{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n/*\r\n * Origin Protocol\r\n * https://originprotocol.com\r\n *\r\n * Released under the MIT license\r\n * https://github.com/OriginProtocol\r\n *\r\n * Copyright 2019 Origin Protocol, Inc\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n// File: origin-dollar/contracts/interfaces/ITimelock.sol\r\n\r\ninterface ITimelock {\r\n    function delay() external view returns (uint256);\r\n\r\n    function GRACE_PERIOD() external view returns (uint256);\r\n\r\n    function acceptAdmin() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\n// File: origin-dollar/contracts/governance/Governor.sol\r\n\r\npragma solidity ^0.5.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// Modeled off of Compound's Governor Alpha\r\n//    https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/GovernorAlpha.sol\r\ncontract Governor {\r\n    /// @notice The address of the  Timelock\r\n    ITimelock public timelock;\r\n\r\n    /// @notice The address of the Governor Guardian\r\n    address public guardian;\r\n\r\n    /// @notice The total number of proposals\r\n    uint256 public proposalCount;\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint256 id;\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint256 eta;\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint256[] values;\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        string description\r\n    );\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint256 id);\r\n\r\n    uint256 public constant MAX_OPERATIONS = 16;\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState { Pending, Queued, Expired, Executed }\r\n\r\n    constructor(address timelock_, address guardian_) public {\r\n        timelock = ITimelock(timelock_);\r\n        guardian = guardian_;\r\n    }\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) public returns (uint256) {\r\n        // allow anyone to propose for now, since only guardian can queue the transaction it should be harmless, you just need to pay the gas\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == signatures.length &&\r\n                targets.length == calldatas.length,\r\n            \"Governor::propose: proposal function information arity mismatch\"\r\n        );\r\n        require(targets.length != 0, \"Governor::propose: must provide actions\");\r\n        require(\r\n            targets.length <= MAX_OPERATIONS,\r\n            \"Governor::propose: too many actions\"\r\n        );\r\n\r\n        proposalCount++;\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            eta: 0,\r\n            targets: targets,\r\n            values: values,\r\n            signatures: signatures,\r\n            calldatas: calldatas,\r\n            executed: false\r\n        });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n\r\n        emit ProposalCreated(\r\n            newProposal.id,\r\n            msg.sender,\r\n            targets,\r\n            values,\r\n            signatures,\r\n            calldatas,\r\n            description\r\n        );\r\n        return newProposal.id;\r\n    }\r\n\r\n    function queue(uint256 proposalId) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"Governor::queue: sender must be gov guardian\"\r\n        );\r\n        require(\r\n            state(proposalId) == ProposalState.Pending,\r\n            \"Governor::queue: proposal can only be queued if it is pending\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.eta = add256(block.timestamp, timelock.delay());\r\n\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            _queueOrRevert(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalQueued(proposal.id, proposal.eta);\r\n    }\r\n\r\n    function state(uint256 proposalId) public view returns (ProposalState) {\r\n        require(\r\n            proposalCount >= proposalId && proposalId > 0,\r\n            \"Governor::state: invalid proposal id\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Pending;\r\n        } else if (\r\n            block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\r\n        ) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    function _queueOrRevert(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) internal {\r\n        require(\r\n            !timelock.queuedTransactions(\r\n                keccak256(abi.encode(target, value, signature, data, eta))\r\n            ),\r\n            \"Governor::_queueOrRevert: proposal action already queued at eta\"\r\n        );\r\n        timelock.queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    function execute(uint256 proposalId) public payable {\r\n        require(\r\n            state(proposalId) == ProposalState.Queued,\r\n            \"Governor::execute: proposal can only be executed if it is queued\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            timelock.executeTransaction.value(proposal.values[i])(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function getActions(uint256 proposalId)\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            string[] memory signatures,\r\n            bytes[] memory calldatas\r\n        )\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    function __acceptAdmin() public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"Governor::__acceptAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.acceptAdmin();\r\n    }\r\n\r\n    function __queueSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.queueTransaction(\r\n            address(timelock),\r\n            0,\r\n            \"setPendingAdmin(address)\",\r\n            abi.encode(newPendingAdmin),\r\n            eta\r\n        );\r\n    }\r\n\r\n    function __executeSetTimelockPendingAdmin(\r\n        address newPendingAdmin,\r\n        uint256 eta\r\n    ) public {\r\n        require(\r\n            msg.sender == guardian,\r\n            \"Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian\"\r\n        );\r\n        timelock.executeTransaction(\r\n            address(timelock),\r\n            0,\r\n            \"setPendingAdmin(address)\",\r\n            abi.encode(newPendingAdmin),\r\n            eta\r\n        );\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__executeSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__queueSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"__acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"}]","ContractName":"Governor","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000052bebd3d7f37ec4284853fd5861ae71253a7f428000000000000000000000000e011fa2a6df98c69383457d87a056ed0103aa352","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://99818fef14051d271c0592ad0e48fe2979b311ad8e6fa6868d414a8bec094534"}]}