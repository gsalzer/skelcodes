{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ninterface IMoloch { // brief interface for minion txs to parent moloch\r\n    function getProposalFlags(uint256 proposalId) external view returns (bool[6] memory);\r\n\r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        bytes32 details\r\n    ) external returns (uint256);\r\n    \r\n    function withdrawBalance(address token, uint256 amount) external;\r\n}\r\n\r\ncontract Minion {\r\n    IMoloch public moloch;\r\n    address private molochDepositToken;\r\n    mapping(uint256 => Action) public actions; // proposalId => Action\r\n\r\n    struct Action {\r\n        uint256 value;\r\n        address to;\r\n        address proposer;\r\n        bool executed;\r\n        bytes data;\r\n    }\r\n\r\n    event ProposeAction(uint256 proposalId, address proposer);\r\n    event ExecuteAction(uint256 proposalId, address executor);\r\n\r\n    constructor(address _moloch, address _molochDepositToken) public {\r\n        moloch = IMoloch(_moloch);\r\n        molochDepositToken = _molochDepositToken;\r\n    }\r\n\r\n    function doWithdraw(address token, uint256 amount) public {\r\n        moloch.withdrawBalance(token, amount); // withdraw funds from parent moloch\r\n    }\r\n\r\n    function proposeAction(\r\n        address actionTo,\r\n        uint256 actionValue,\r\n        bytes memory actionData,\r\n        bytes32 details\r\n    ) public returns (uint256) {\r\n        // No calls to zero address allows us to check that minion submitted\r\n        // the proposal without getting the proposal struct from parent moloch\r\n        require(actionTo != address(0), \"invalid actionTo\");\r\n\r\n        uint256 proposalId = moloch.submitProposal(\r\n            address(this),\r\n            0,\r\n            0,\r\n            0,\r\n            molochDepositToken,\r\n            0,\r\n            molochDepositToken,\r\n            details\r\n        );\r\n\r\n        Action memory action = Action({\r\n            value: actionValue,\r\n            to: actionTo,\r\n            proposer: msg.sender,\r\n            executed: false,\r\n            data: actionData\r\n        });\r\n\r\n        actions[proposalId] = action;\r\n\r\n        emit ProposeAction(proposalId, msg.sender);\r\n        return proposalId;\r\n    }\r\n\r\n    function executeAction(uint256 proposalId) public returns (bytes memory) {\r\n        Action memory action = actions[proposalId];\r\n        bool[6] memory flags = moloch.getProposalFlags(proposalId);\r\n\r\n        require(action.to != address(0), \"invalid proposalId\");\r\n        require(!action.executed, \"action executed\");\r\n        require(address(this).balance >= action.value, \"insufficient eth\");\r\n        require(flags[2], \"proposal not passed\");\r\n\r\n        // execute call\r\n        actions[proposalId].executed = true;\r\n        (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);\r\n        require(success, \"call failure\");\r\n        emit ExecuteAction(proposalId, msg.sender);\r\n        return retData;\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_molochDepositToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecuteAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposeAction\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moloch\",\"outputs\":[{\"internalType\":\"contract IMoloch\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"actionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actionValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"proposeAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Minion","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000aeb0162aa17165708210436e72462ecfa344ecd8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://09ad3280827a33ad477f4113afaf75481f97b3776644fb425cff9e49a2f93bae"}]}