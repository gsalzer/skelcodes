{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _who) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title HBC token\r\n */\r\n\r\ncontract HBC is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n   \r\n    uint256 constant public TOKEN_DECIMALS = 10 ** 18;\r\n    string public constant name            = \"Hybrid Bank Cash\";\r\n    string public constant symbol          = \"HBC\";\r\n    uint256 public totalTokenSupply        = 10000000000 * TOKEN_DECIMALS;\r\n    uint8 public constant decimals         = 18;\r\n    bool public stopped                    = false;\r\n    address public owner;\r\n    uint256 public totalBurned;\r\n\r\n    event Burn(address indexed _burner, uint256 _value);\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n    event OwnershipRenounced(address indexed _previousOwner);\r\n\r\n    /** mappings **/ \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => address) private forbiddenAddresses;\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n       require(msg.sender == owner, \"Caller is not owner\");\r\n       _;\r\n    }\r\n    \r\n    /** constructor **/\r\n\r\n    constructor() public {\r\n       owner = msg.sender;\r\n       balances[owner] = totalTokenSupply;\r\n\r\n       emit Transfer(address(0x0), owner, balances[owner]);\r\n    }\r\n\r\n    /**\r\n     * @dev To pause token transfer. In general pauseTransfer can be triggered\r\n     *      only on some specific error conditions \r\n     */\r\n\r\n    function pauseTransfer() external onlyOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    /**\r\n     * @dev To resume token transfer\r\n     */\r\n\r\n    function resumeTransfer() external onlyOwner {\r\n        stopped = false;\r\n    }\r\n\r\n    /**\r\n     * @dev To add address into forbiddenAddresses\r\n     */\r\n\r\n    function addToForbiddenAddresses(address _newAddr) external onlyOwner {\r\n       forbiddenAddresses[_newAddr] = _newAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev To remove address from forbiddenAddresses\r\n     */\r\n\r\n    function removeFromForbiddenAddresses(address _newAddr) external onlyOwner {\r\n       delete forbiddenAddresses[_newAddr];\r\n    }\r\n\r\n    /**\r\n     * @dev Burn specified number of HBC tokens from token owner wallet\r\n     */\r\n\r\n    function burn(uint256 _value) onlyOwner external returns (bool) {\r\n       require(!stopped, \"Paused\");\r\n\r\n       address burner = msg.sender;\r\n\r\n       balances[burner] = balances[burner].sub(_value, \"burn amount exceeds balance\");\r\n       totalTokenSupply = totalTokenSupply.sub(_value);\r\n       totalBurned      = totalBurned.add(_value);\r\n\r\n       emit Burn(burner, _value);\r\n       emit Transfer(burner, address(0x0), _value);\r\n\r\n       return true;\r\n    }     \r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     * @return An uint256 representing the total number of tokens in existence\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256) { \r\n       return totalTokenSupply; \r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner The address to query the the balance of \r\n     * @return An uint256 representing the amount owned by the passed address\r\n     */\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n       return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {    \r\n\r\n       require(!stopped, \"Paused\");\r\n \r\n       require(_to != address(0x0), \"ERC20: transferring to zero address\");\r\n\r\n       require(_from != address(0x0), \"ERC20: transferring from zero address\");\r\n\r\n       require(forbiddenAddresses[_from] != _from, \"ERC20: transfer from forbidden address\");\r\n\r\n       require(forbiddenAddresses[_to] != _to, \"ERC20: transfer to forbidden address\");\r\n\r\n\r\n       if (_value == 0) \r\n       {\r\n           emit Transfer(_from, _to, _value);  // Follow the spec to launch the event when value is equal to 0\r\n           return true;\r\n       }\r\n\r\n\r\n       require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\r\n\r\n       balances[_from] = balances[_from].sub(_value, \"transfer amount exceeds balance\");\r\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n       balances[_to] = balances[_to].add(_value);\r\n\r\n       emit Transfer(_from, _to, _value);\r\n\r\n       return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds\r\n     * @param _tokens The amount of tokens to be spent\r\n     */\r\n\r\n    function approve(address _spender, uint256 _tokens) external returns(bool) {\r\n\r\n       require(!stopped, \"Paused\");\r\n\r\n       require(_spender != address(0x0));\r\n\r\n       allowed[msg.sender][_spender] = _tokens;\r\n\r\n       emit Approval(msg.sender, _spender, _tokens);\r\n\r\n       return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     * @param _owner address The address which owns the funds\r\n     * @param _spender address The address which will spend the funds\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender\r\n     */\r\n\r\n    function allowance(address _owner, address _spender) external view returns(uint256) {\r\n\r\n       require(!stopped, \"Paused\");\r\n\r\n       require(_owner != address(0x0) && _spender != address(0x0));\r\n\r\n       return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _address The address to transfer to\r\n     * @param _tokens The amount to be transferred\r\n     */\r\n\r\n    function transfer(address _address, uint256 _tokens) external returns(bool) {\r\n\r\n       require(!stopped, \"Paused\");\r\n\r\n       require(_address != address(0x0), \"ERC20: transferring to zero address\");\r\n\r\n       require(forbiddenAddresses[msg.sender] != msg.sender, \"ERC20: transfer from forbidden address\");\r\n\r\n       require(forbiddenAddresses[_address] != _address, \"ERC20: transfer to forbidden address\");\r\n\r\n       if (_tokens == 0) \r\n       {\r\n           emit Transfer(msg.sender, _address, _tokens);  // Follow the spec to launch the event when tokens are equal to 0\r\n           return true;\r\n       }\r\n\r\n\r\n       require(balances[msg.sender] >= _tokens);\r\n\r\n       balances[msg.sender] = (balances[msg.sender]).sub(_tokens, \"transfer amount exceeds balance\");\r\n       balances[_address] = (balances[_address]).add(_tokens);\r\n\r\n       emit Transfer(msg.sender, _address, _tokens);\r\n\r\n       return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer ownership of this contract, only by owner\r\n     * @param _newOwner The address of the new owner to transfer ownership\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n\r\n       uint256 ownerBalances;\r\n\r\n       require(!stopped, \"Paused\");\r\n\r\n       require( _newOwner != address(0x0), \"ERC20: transferOwnership address is zero address\");\r\n\r\n       ownerBalances = balances[owner];\r\n\r\n       balances[_newOwner] = (balances[_newOwner]).add(balances[owner]);\r\n       balances[owner] = 0;\r\n       owner = _newOwner;\r\n\r\n       emit Transfer(msg.sender, _newOwner, ownerBalances);\r\n   }\r\n\r\n   /**\r\n    * @dev Allows the current owner to relinquish control of the contract\r\n    * @notice Renouncing to ownership will leave the contract without an owner\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore\r\n    */\r\n\r\n   function renounceOwnership() external onlyOwner {\r\n\r\n      require(!stopped, \"Paused\");\r\n\r\n      owner = address(0x0);\r\n      emit OwnershipRenounced(owner);\r\n   }\r\n\r\n   /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender\r\n    */\r\n\r\n   function increaseApproval(address _spender, uint256 _addedValue) external returns (bool success) {\r\n\r\n      require(!stopped, \"Paused\");\r\n\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender\r\n    */\r\n\r\n   function decreaseApproval(address _spender, uint256 _subtractedValue) external returns (bool success) {\r\n\r\n      uint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n      require(!stopped, \"Paused\");\r\n\r\n      if (_subtractedValue > oldValue) \r\n      {\r\n         allowed[msg.sender][_spender] = 0;\r\n      }\r\n      else \r\n      {\r\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n      return true;\r\n   }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"addToForbiddenAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"removeFromForbiddenAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HBC","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc07ec3f6eafd8fec1d45e780ef12d550d948231b766f3857125302cdf9d5ff7"}]}