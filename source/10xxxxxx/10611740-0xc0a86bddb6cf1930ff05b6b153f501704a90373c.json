{"status":"1","message":"OK","result":[{"SourceCode":"/*! absgoldenmatrix.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | SPDX-License-Identifier: MIT License */\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract AbsGoldenMatrix {\r\n    struct Level {\r\n        uint256 price;\r\n        uint256 profit;\r\n    }\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address inviter;\r\n        uint256 level;\r\n        uint256 profit;\r\n        uint256 hold;\r\n        mapping(uint256 => address) uplines;\r\n        mapping(uint256 => address[]) referrals;\r\n    }\r\n\r\n    address payable public root;\r\n    uint256 public last_id;\r\n\r\n    Level[] public levels;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public users_ids;\r\n\r\n    event Register(address indexed addr, address indexed inviter, uint256 id);\r\n    event LevelUp(address indexed addr, address indexed upline, uint256 level);\r\n    event Profit(address indexed addr, address indexed referral, uint256 value);\r\n    event Hold(address indexed addr, address indexed referral, uint256 value);\r\n\r\n    constructor() public {\r\n        levels.push(Level(0.05 ether, 0.05 ether));\r\n        levels.push(Level(0.05 ether, 0.05 ether));\r\n\r\n        levels.push(Level(0.15 ether, 0.15 ether));\r\n        levels.push(Level(0.15 ether, 0.15 ether));\r\n\r\n        levels.push(Level(0.45 ether, 0.45 ether));\r\n        levels.push(Level(0.45 ether, 0.45 ether));\r\n        \r\n        levels.push(Level(1.35 ether, 1.35 ether));\r\n        levels.push(Level(1.35 ether, 1.35 ether));\r\n        \r\n        levels.push(Level(4.05 ether, 4.05 ether));\r\n        levels.push(Level(4.05 ether, 4.05 ether));\r\n        \r\n        levels.push(Level(12.15 ether, 12.15 ether));\r\n        levels.push(Level(12.15 ether, 12.15 ether));\r\n        \r\n        levels.push(Level(36.45 ether, 36.45 ether));\r\n        levels.push(Level(36.45 ether, 145.75 ether));\r\n\r\n        root = 0xcC16f3dcE95cC295741c2f638c22a43C23a8e009;\r\n\r\n        _newUser(root, address(0), address(0));\r\n    }\r\n\r\n    receive() payable external {\r\n        _register(msg.sender, root, msg.value);\r\n    }\r\n\r\n    fallback() payable external {\r\n        _register(msg.sender, _bytesToAddress(msg.data), msg.value);\r\n    }\r\n\r\n    function _send(address _addr, uint256 _value) private {\r\n        if(_addr == address(0) || !payable(_addr).send(_value)) {\r\n            root.transfer(_value);\r\n        }\r\n    }\r\n\r\n    function _newUser(address _addr, address _inviter, address _upline) private {\r\n        users[_addr].id = ++last_id;\r\n        users[_addr].inviter = _inviter;\r\n        users_ids[last_id] = _addr;\r\n\r\n        emit Register(_addr, _inviter, last_id);\r\n\r\n        _levelUp(_addr, _upline, 0);\r\n    }\r\n\r\n    function _levelUp(address _addr, address _upline, uint256 _level) private {\r\n        if(_upline != address(0)) {\r\n            users[_addr].uplines[_level] = _upline;\r\n            users[_upline].referrals[_level].push(_addr);\r\n        }\r\n\r\n        emit LevelUp(_addr, _upline, _level);\r\n    }\r\n\r\n    function _transferFunds(address _user, address _from, uint256 _amount) private {\r\n        if(users[_user].profit < levels[users[_user].level % levels.length].profit) {\r\n            users[_user].profit += _amount;\r\n            \r\n            _send(_user, _amount);\r\n            \r\n            emit Profit(_user, _from, _amount);\r\n        }\r\n        else {\r\n            users[_user].hold += _amount;\r\n            \r\n            emit Hold(_user, _from, _amount);\r\n\r\n            uint256 next_level = users[_user].level + 1;\r\n\r\n            if(users[_user].hold >= levels[next_level % levels.length].price) {\r\n                users[_user].hold = 0;\r\n                users[_user].level = next_level;\r\n\r\n                if(_user != root) {\r\n                    address upline = this.findFreeReferrer(\r\n                        this.findUplineOffset(\r\n                            this.findUplineHasLevel(\r\n                                users[_user].uplines[0],\r\n                                next_level\r\n                            ),\r\n                            next_level,\r\n                            uint8(next_level % 2)\r\n                        ),\r\n                        next_level\r\n                    );\r\n                    \r\n                    _levelUp(_user, upline, next_level);\r\n                }\r\n                else _levelUp(_user, address(0), next_level);\r\n            }\r\n\r\n            _transferFunds(users[_user].uplines[users[_user].level], _from, _amount);\r\n        }\r\n    }\r\n\r\n    function _register(address _user, address _inviter, uint256 _value) private {\r\n        require(users[_user].id == 0, \"User arleady register\");\r\n        require(users[_inviter].id != 0, \"Upline not register\");\r\n        require(_value == levels[0].price, \"Bad amount\");\r\n\r\n        address upline = this.findFreeReferrer(_inviter, 0);\r\n        \r\n        _newUser(_user, _inviter, upline);\r\n        _transferFunds(upline, _user, _value);\r\n    }\r\n\r\n    function register(uint256 _upline_id) payable external {\r\n        _register(msg.sender, users_ids[_upline_id], msg.value);\r\n    }\r\n\r\n    function findUplineHasLevel(address _user, uint256 _level) external view returns(address) {\r\n        if(_user == root || users[_user].level >= _level) return _user;\r\n\r\n        return this.findUplineHasLevel(users[_user].uplines[0], _level);\r\n    }\r\n\r\n    function findUplineOffset(address _user, uint256 _level, uint8 _offset) external view returns(address) {\r\n        if(_user == root || _offset == 0) return _user;\r\n\r\n        return this.findUplineOffset(users[_user].uplines[_level], _level, _offset - 1);\r\n    }\r\n\r\n    function findFreeReferrer(address _user, uint256 _level) external view returns(address) {\r\n        if(users[_user].referrals[_level].length < 2) return _user;\r\n\r\n        address[] memory refs = new address[](1024);\r\n        \r\n        refs[0] = users[_user].referrals[_level][0];\r\n        refs[1] = users[_user].referrals[_level][1];\r\n\r\n        for(uint16 i = 0; i < 1024; i++) {\r\n            if(users[refs[i]].referrals[_level].length < 2) {\r\n                return refs[i];\r\n            }\r\n\r\n            if(i < 511) {\r\n                uint16 n = (i + 1) * 2;\r\n\r\n                refs[n] = users[refs[i]].referrals[_level][0];\r\n                refs[n + 1] = users[refs[i]].referrals[_level][1];\r\n            }\r\n        }\r\n\r\n        revert(\"No free referrer\");\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory _data) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(_data, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Hold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findUplineHasLevel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_offset\",\"type\":\"uint8\"}],\"name\":\"findUplineOffset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upline_id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users_ids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AbsGoldenMatrix","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1a61edf078ea26e1d2be2368331b1a515afdb97a7eded59e34b0899dd172e298"}]}