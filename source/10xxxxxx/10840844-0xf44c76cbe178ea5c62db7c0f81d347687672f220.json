{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\IDefiProtocol.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IDefiProtocol {\r\n    /**\r\n     * @notice Transfer tokens from sender to DeFi protocol\r\n     * @param token Address of token\r\n     * @param amount Value of token to deposit\r\n     * @return new balances of each token\r\n     */\r\n    function handleDeposit(address token, uint256 amount) external;\r\n\r\n    function handleDeposit(address[] calldata tokens, uint256[] calldata amounts) external;\r\n\r\n    /**\r\n     * @notice Transfer tokens from DeFi protocol to beneficiary\r\n     * @param token Address of token\r\n     * @param amount Denormalized value of token to withdraw\r\n     * @return new balances of each token\r\n     */\r\n    function withdraw(address beneficiary, address token, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Transfer tokens from DeFi protocol to beneficiary\r\n     * @param amounts Array of amounts to withdraw, in order of supportedTokens()\r\n     * @return new balances of each token\r\n     */\r\n    function withdraw(address beneficiary, uint256[] calldata amounts) external;\r\n\r\n    /**\r\n     * @notice Claim rewards. Reward tokens will be stored on protocol balance.\r\n     * @return tokens and their amounts received\r\n     */\r\n    function claimRewards() external returns(address[] memory tokens, uint256[] memory amounts);\r\n\r\n    /**\r\n     * @notice Withdraw reward tokens to user\r\n     * @dev called by SavingsModule\r\n     * @param token Reward token to withdraw\r\n     * @param user Who should receive tokens\r\n     * @param amount How many tokens to send\r\n     */\r\n    function withdrawReward(address token, address user, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     */\r\n    function balanceOf(address token) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Balance of all tokens supported by protocol \r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     */\r\n    function balanceOfAll() external returns(uint256[] memory); \r\n\r\n    /**\r\n     * @notice Returns optimal proportions of underlying tokens \r\n     * to prevent fees on deposit/withdrawl if supplying multiple tokens\r\n     * @dev This function is not view because on some protocols \r\n     * (Compound, RAY with Compound oportunity) it may cause storage writes\r\n     * same as balanceOfAll()\r\n     */\r\n    function optimalProportions() external returns(uint256[] memory);\r\n\r\n    /**\r\n    * @notice Returns normalized (to USD with 18 decimals) summary balance \r\n    * of pool using all tokens in this protocol\r\n    */\r\n    function normalizedBalance() external returns(uint256);\r\n\r\n    function supportedTokens() external view returns(address[] memory);\r\n\r\n    function supportedTokensCount() external view returns(uint256);\r\n\r\n    function supportedRewardTokens() external view returns(address[] memory);\r\n\r\n    function isSupportedRewardToken(address token) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Returns if this protocol can swap all it's normalizedBalance() to specified token\r\n     */\r\n    function canSwapToToken(address token) external view returns(bool);\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\aave\\IAaveLendingPoolAddressesProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n@title IAaveLendingPoolAddressesProvider interface\r\n@notice provides the interface to fetch the LendingPoolCore address\r\n */\r\n\r\ninterface IAaveLendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPoolConfigurator() external view returns (address);\r\n    function getLendingPoolDataProvider() external view returns (address);\r\n    function getLendingPoolParametersProvider() external view returns (address);\r\n    function getTokenDistributor() external view returns (address);\r\n    function getFeeProvider() external view returns (address);\r\n    function getLendingPoolLiquidationManager() external view returns (address);\r\n    function getLendingPoolManager() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n    function getLendingRateOracle() external view returns (address);\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\aave\\IAaveLendingPoolCore.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IAaveLendingPoolCore {\r\n    /**\r\n    * @dev gets the aToken contract address for the reserve\r\n    * @param _reserve the reserve address\r\n    * @return the address of the aToken contract\r\n    **/\r\n    function getReserveATokenAddress(address _reserve) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\aave\\IAaveLendingPool.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IAaveLendingPool {\r\n    /**\r\n    * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\r\n    * is minted.\r\n    * @param _reserve the address of the reserve\r\n    * @param _amount the amount to be deposited\r\n    * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.\r\n    **/\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\aave\\IAToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IAToken {\r\n    //ERC20 functions\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    //AToken functions\r\n\r\n    /**\r\n    * @dev redeems aToken for the underlying asset\r\n    * @param _amount the amount being redeemed\r\n    **/\r\n    function redeem(uint256 _amount) external ;\r\n\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\common\\Base.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\core\\ModuleNames.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_SAVINGS           = \"savings\";\r\n    string internal constant MODULE_INVESTING         = \"investing\";\r\n    string internal constant MODULE_STAKING           = \"staking\";\r\n    string internal constant MODULE_DCA               = \"dca\";\r\n    string internal constant MODULE_REWARD            = \"reward\";\r\n\r\n    // Pool tokens\r\n    string internal constant TOKEN_AKRO               = \"akro\";    \r\n    string internal constant TOKEN_ADEL               = \"adel\";    \r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant CONTRACT_RAY             = \"ray\";\r\n}\r\n\r\n// File: contracts\\common\\Module.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        // string memory error = string(abi.encodePacked(\"Module: requested module not found - \", module));\r\n        // require(moduleAddress != ZERO_ADDRESS, error);\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\defi\\DefiOperatorRole.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract DefiOperatorRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event DefiOperatorAdded(address indexed account);\r\n    event DefiOperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isDefiOperator(sender)) {\r\n            _addDefiOperator(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyDefiOperator() {\r\n        require(isDefiOperator(_msgSender()), \"DefiOperatorRole: caller does not have the DefiOperator role\");\r\n        _;\r\n    }\r\n\r\n    function addDefiOperator(address account) public onlyDefiOperator {\r\n        _addDefiOperator(account);\r\n    }\r\n\r\n    function renounceDefiOperator() public {\r\n        _removeDefiOperator(_msgSender());\r\n    }\r\n\r\n    function isDefiOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    function _addDefiOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit DefiOperatorAdded(account);\r\n    }\r\n\r\n    function _removeDefiOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit DefiOperatorRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\ICErc20.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * Most important functions of Compound CErc20 token.\r\n * Source: https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\r\n *\r\n * Original interface name: CErc20Interface\r\n * but we use our naming covention.\r\n */\r\n//solhint-disable func-order\r\ncontract ICErc20 { \r\n\r\n\r\n    /*** User Interface of CTokenInterface ***/\r\n\r\n    function transfer(address dst, uint amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function exchangeRateStored() external view returns (uint256);\r\n    function accrueInterest() external returns (uint256);\r\n\r\n     /*** User Interface of CErc20Interface ***/\r\n\r\n    function mint(uint mintAmount) external returns (uint256);\r\n    function redeem(uint redeemTokens) external returns (uint256);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\defi\\IComptroller.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IComptroller {\r\n    function claimComp(address holder) external;\r\n    function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;\r\n    function getCompAddress() external view returns (address);\r\n}\r\n\r\n// File: contracts\\modules\\reward\\RewardManagerRole.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract RewardManagerRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event RewardManagerAdded(address indexed account);\r\n    event RewardManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private _managers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isRewardManager(sender)) {\r\n            _addRewardManager(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyRewardManager() {\r\n        require(isRewardManager(_msgSender()), \"RewardManagerRole: caller does not have the RewardManager role\");\r\n        _;\r\n    }\r\n\r\n    function addRewardManager(address account) public onlyRewardManager {\r\n        _addRewardManager(account);\r\n    }\r\n\r\n    function renounceRewardManager() public {\r\n        _removeRewardManager(_msgSender());\r\n    }\r\n\r\n    function isRewardManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n\r\n    function _addRewardManager(address account) internal {\r\n        _managers.add(account);\r\n        emit RewardManagerAdded(account);\r\n    }\r\n\r\n    function _removeRewardManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit RewardManagerRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\modules\\reward\\RewardVestingModule.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardVestingModule is Module, RewardManagerRole {\r\n    event RewardTokenRegistered(address indexed protocol, address token);\r\n    event EpochRewardAdded(address indexed protocol, address indexed token, uint256 epoch, uint256 amount);\r\n    event RewardClaimed(address indexed protocol, address indexed token, uint256 claimPeriodStart, uint256 claimPeriodEnd, uint256 claimAmount);\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct Epoch {\r\n        uint256 end;        // Timestamp of Epoch end\r\n        uint256 amount;     // Amount of reward token for this protocol on this epoch\r\n    }\r\n\r\n    struct RewardInfo {\r\n        Epoch[] epochs;\r\n        uint256 lastClaim; // Timestamp of last claim\r\n    }\r\n\r\n    struct ProtocolRewards {\r\n        address[] tokens;\r\n        mapping(address=>RewardInfo) rewardInfo;\r\n    }\r\n\r\n    mapping(address => ProtocolRewards) internal rewards;\r\n    uint256 public defaultEpochLength;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        RewardManagerRole.initialize(_msgSender());\r\n        defaultEpochLength = 7*24*60*60;\r\n    }\r\n\r\n    function registerRewardToken(address protocol, address token, uint256 firstEpochStart) public onlyRewardManager {\r\n        if(firstEpochStart == 0) firstEpochStart = block.timestamp;\r\n        //Push zero epoch\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length == 0, \"RewardVesting: token already registered for this protocol\");\r\n        r.tokens.push(token);\r\n        ri.epochs.push(Epoch({\r\n            end: firstEpochStart,\r\n            amount: 0\r\n        }));\r\n        emit RewardTokenRegistered(protocol, token);\r\n    }\r\n\r\n    function setDefaultEpochLength(uint256 _defaultEpochLength) public onlyRewardManager {\r\n        defaultEpochLength = _defaultEpochLength;\r\n    }\r\n\r\n    function getEpochInfo(address protocol, address token, uint256 epoch) public view returns(uint256 epochStart, uint256 epochEnd, uint256 rewardAmount) {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length > 0, \"RewardVesting: protocol or token not registered\");\r\n        require (epoch < ri.epochs.length, \"RewardVesting: epoch number too high\");\r\n        if(epoch == 0) {\r\n            epochStart = 0;\r\n        }else {\r\n            epochStart = ri.epochs[epoch-1].end;\r\n        }\r\n        epochEnd = ri.epochs[epoch].end;\r\n        rewardAmount = ri.epochs[epoch].amount;\r\n        return (epochStart, epochEnd, rewardAmount);\r\n    }\r\n\r\n    function getLastCreatedEpoch(address protocol, address token) public view returns(uint256) {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        require(ri.epochs.length > 0, \"RewardVesting: protocol or token not registered\");\r\n        return ri.epochs.length-1;       \r\n    }\r\n\r\n    function claimRewards() public {\r\n        address protocol = _msgSender();\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        //require(r.tokens.length > 0, \"RewardVesting: call only from registered protocols allowed\");\r\n        if(r.tokens.length == 0) return;    //This allows claims from protocols which are not yet registered without reverting\r\n        for(uint256 i=0; i < r.tokens.length; i++){\r\n            _claimRewards(protocol, r.tokens[i]);\r\n        }\r\n    }\r\n\r\n    function claimRewards(address protocol, address token) public {\r\n        _claimRewards(protocol, token);\r\n    }\r\n\r\n    function _claimRewards(address protocol, address token) internal {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n\r\n        Epoch storage lastEpoch = ri.epochs[epochsLength-1];\r\n        uint256 previousClaim = ri.lastClaim;\r\n        if(previousClaim == lastEpoch.end) return; // Nothing to claim yet\r\n\r\n        if(lastEpoch.end < block.timestamp) {\r\n            ri.lastClaim = lastEpoch.end;\r\n        }else{\r\n            ri.lastClaim = block.timestamp;\r\n        }\r\n        \r\n        uint256 claimAmount;\r\n        Epoch storage ep = ri.epochs[0];\r\n        uint256 i;\r\n        // Searching for last claimable epoch\r\n        for(i = epochsLength-1; i > 0; i--) {\r\n            ep = ri.epochs[i];\r\n            if(ep.end >= block.timestamp) {\r\n                break;\r\n            }\r\n        }\r\n        if(ep.end > block.timestamp) {\r\n            //Half-claim\r\n            uint256 epStart = ri.epochs[i-1].end;\r\n            uint256 claimStart = (previousClaim > epStart)?previousClaim:epStart;\r\n            uint256 epochClaim = ep.amount.mul(block.timestamp.sub(claimStart)).div(ep.end.sub(epStart));\r\n            claimAmount = claimAmount.add(epochClaim);\r\n            i--;\r\n        }\r\n        //Claim rest\r\n        for(i; i > 0; i--) {\r\n            ep = ri.epochs[i];\r\n            if(ep.end > previousClaim) {\r\n                claimAmount = claimAmount.add(ep.amount);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        IERC20(token).safeTransfer(protocol, claimAmount);\r\n        emit RewardClaimed(protocol, token, previousClaim, ri.lastClaim, claimAmount);\r\n    }\r\n\r\n    function createEpoch(address protocol, address token, uint256 epochEnd, uint256 amount) public onlyRewardManager {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n        uint256 prevEpochEnd = ri.epochs[epochsLength-1].end;\r\n        require(epochEnd > prevEpochEnd, \"RewardVesting: new epoch should end after previous\");\r\n        ri.epochs.push(Epoch({\r\n            end: epochEnd,\r\n            amount:0\r\n        }));            \r\n        _addReward(protocol, token, epochsLength, amount);\r\n    }\r\n\r\n    function addReward(address protocol, address token, uint256 epoch, uint256 amount) public onlyRewardManager {\r\n        _addReward(protocol, token, epoch, amount);\r\n    }\r\n\r\n    function addRewards(address[] calldata protocols, address[] calldata tokens, uint256[] calldata epochs, uint256[] calldata amounts) external onlyRewardManager {\r\n        require(\r\n            (protocols.length == tokens.length) && \r\n            (protocols.length == epochs.length) && \r\n            (protocols.length == amounts.length),\r\n            \"RewardVesting: array lengths do not match\");\r\n        for(uint256 i=0; i<protocols.length; i++) {\r\n            _addReward(protocols[i], tokens[i], epochs[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Add reward to existing epoch or crete a new one\r\n     * @param protocol Protocol for reward\r\n     * @param token Reward token\r\n     * @param epoch Epoch number - can be 0 to create new Epoch\r\n     * @param amount Amount of Reward token to deposit\r\n     */\r\n    function _addReward(address protocol, address token, uint256 epoch, uint256 amount) internal {\r\n        ProtocolRewards storage r = rewards[protocol];\r\n        RewardInfo storage ri = r.rewardInfo[token];\r\n        uint256 epochsLength = ri.epochs.length;\r\n        require(epochsLength > 0, \"RewardVesting: protocol or token not registered\");\r\n        if(epoch == 0) epoch = epochsLength; // creating a new epoch\r\n        if (epoch == epochsLength) {\r\n            uint256 epochEnd = ri.epochs[epochsLength-1].end.add(defaultEpochLength);\r\n            if(epochEnd < block.timestamp) epochEnd = block.timestamp; //This generally should not happen, but just in case - we generate only one epoch since previous end\r\n            ri.epochs.push(Epoch({\r\n                end: epochEnd,\r\n                amount: amount\r\n            }));            \r\n        } else  {\r\n            require(epochsLength > epoch, \"RewardVesting: epoch is too high\");\r\n            Epoch storage ep = ri.epochs[epoch];\r\n            require(ep.end > block.timestamp, \"RewardVesting: epoch already finished\");\r\n            ep.amount = ep.amount.add(amount);\r\n        }\r\n        emit EpochRewardAdded(protocol, token, epoch, amount);\r\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount);\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts\\modules\\defi\\ProtocolBase.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProtocolBase is Module, DefiOperatorRole, IDefiProtocol {\r\n    uint256 constant MAX_UINT256 = uint256(-1);\r\n\r\n    event RewardTokenClaimed(address indexed token, uint256 amount);\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(address=>uint256) public rewardBalances;    //Mapping of already claimed amounts of reward tokens\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        DefiOperatorRole.initialize(_msgSender());\r\n    }\r\n\r\n    function supportedRewardTokens() public view returns(address[] memory) {\r\n        return defaultRewardTokens();\r\n    }\r\n\r\n    function isSupportedRewardToken(address token) public view returns(bool) {\r\n        address[] memory srt = supportedRewardTokens();\r\n        for(uint256 i=0; i < srt.length; i++) {\r\n            if(srt[i] == token) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function cliamRewardsFromProtocol() internal;\r\n\r\n    function claimRewards() public onlyDefiOperator returns(address[] memory tokens, uint256[] memory amounts){\r\n        cliamRewardsFromProtocol();\r\n        claimDefaultRewards();\r\n\r\n        // Check what we received\r\n        address[] memory rewardTokens = supportedRewardTokens();\r\n        uint256[] memory rewardAmounts = new uint256[](rewardTokens.length);\r\n        uint256 receivedRewardTokensCount;\r\n        for(uint256 i = 0; i < rewardTokens.length; i++) {\r\n            address rtkn = rewardTokens[i];\r\n            uint256 newBalance = IERC20(rtkn).balanceOf(address(this));\r\n            if(newBalance > rewardBalances[rtkn]) {\r\n                receivedRewardTokensCount++;\r\n                rewardAmounts[i] = newBalance.sub(rewardBalances[rtkn]);\r\n                rewardBalances[rtkn] = newBalance;\r\n            }\r\n        }\r\n\r\n        //Fill result arrays\r\n        tokens = new address[](receivedRewardTokensCount);\r\n        amounts = new uint256[](receivedRewardTokensCount);\r\n        if(receivedRewardTokensCount > 0) {\r\n            uint256 j;\r\n            for(uint256 i = 0; i < rewardTokens.length; i++) {\r\n                if(rewardAmounts[i] > 0) {\r\n                    tokens[j] = rewardTokens[i];\r\n                    amounts[j] = rewardAmounts[i];\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawReward(address token, address user, uint256 amount) public onlyDefiOperator {\r\n        require(isSupportedRewardToken(token), \"ProtocolBase: not reward token\");\r\n        rewardBalances[token] = rewardBalances[token].sub(amount);\r\n        IERC20(token).safeTransfer(user, amount);\r\n    }\r\n\r\n    function claimDefaultRewards() internal {\r\n        RewardVestingModule rv = RewardVestingModule(getModuleAddress(MODULE_REWARD));\r\n        rv.claimRewards();\r\n    }\r\n\r\n    function defaultRewardTokens() internal view returns(address[] memory) {\r\n        address[] memory rt = new address[](2);\r\n        return defaultRewardTokensFillArray(rt);\r\n    }\r\n    function defaultRewardTokensFillArray(address[] memory rt) internal view returns(address[] memory) {\r\n        require(rt.length >= 2, \"ProtocolBase: not enough space in array\");\r\n        rt[0] = getModuleAddress(TOKEN_AKRO);\r\n        rt[1] = getModuleAddress(TOKEN_ADEL);\r\n        return rt;\r\n    }\r\n    function defaultRewardTokensCount() internal pure returns(uint256) {\r\n        return 2;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\defi\\AaveProtocol.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AaveProtocol is ProtocolBase {\r\n    uint256 constant MAX_UINT256 = uint256(-1);\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public baseToken;\r\n    uint8 public decimals;\r\n    IAToken public aToken;\r\n    IAaveLendingPool public lendingPool;\r\n    IAaveLendingPoolCore public lendingPoolCore;\r\n    uint16 public aaveReferralCode;\r\n\r\n    function initialize(address _pool, address _token, address aaveAddressProvider, uint16 _aaveReferralCode) public initializer {\r\n        ProtocolBase.initialize(_pool);\r\n        baseToken = IERC20(_token);\r\n        aaveReferralCode = _aaveReferralCode;\r\n        lendingPool = IAaveLendingPool(IAaveLendingPoolAddressesProvider(aaveAddressProvider).getLendingPool());\r\n        address payable _lendingPool = IAaveLendingPoolAddressesProvider(aaveAddressProvider).getLendingPoolCore();\r\n        lendingPoolCore = IAaveLendingPoolCore(address(_lendingPool));\r\n        aToken = IAToken(lendingPoolCore.getReserveATokenAddress(_token));\r\n        decimals = ERC20Detailed(_token).decimals();\r\n\r\n        baseToken.safeApprove(address(lendingPoolCore), MAX_UINT256);\r\n    }\r\n\r\n    function handleDeposit(address token, uint256 amount) public onlyDefiOperator {\r\n        require(token == address(baseToken), \"AAVEProtocol: token not supported\");\r\n        lendingPool.deposit(token, amount, aaveReferralCode);\r\n    }\r\n\r\n    function handleDeposit(address[] memory tokens, uint256[] memory amounts) public onlyDefiOperator {\r\n        require(tokens.length == 1 && amounts.length == 1, \"AAVEProtocol: wrong count of tokens or amounts\");\r\n        handleDeposit(tokens[0], amounts[0]);\r\n    }\r\n\r\n    function withdraw(address beneficiary, address token, uint256 amount) public onlyDefiOperator {\r\n        require(token == address(baseToken), \"AAVEProtocol: token not supported\");\r\n\r\n        aToken.redeem(amount);\r\n        baseToken.safeTransfer(beneficiary, amount);\r\n    }\r\n\r\n    function withdraw(address beneficiary, uint256[] memory amounts) public onlyDefiOperator {\r\n        require(amounts.length == 1, \"AAVEProtocol: wrong amounts array length\");\r\n\r\n        aToken.redeem(amounts[0]);\r\n        baseToken.safeTransfer(beneficiary, amounts[0]);\r\n    }\r\n\r\n    function balanceOf(address token) public returns(uint256) {\r\n        if (token != address(baseToken)) return 0;\r\n        return aToken.balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfAll() public returns(uint256[] memory) {\r\n        uint256[] memory balances = new uint256[](1);\r\n        balances[0] = aToken.balanceOf(address(this));\r\n        return balances;\r\n    }\r\n\r\n    function normalizedBalance() public returns(uint256) {\r\n        uint256 balance = aToken.balanceOf(address(this));\r\n        return normalizeAmount(balance);\r\n    }\r\n\r\n    function optimalProportions() public returns(uint256[] memory) {\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = 1e18;\r\n        return amounts;\r\n    }\r\n\r\n    function canSwapToToken(address token) public view returns(bool) {\r\n        return (token == address(baseToken));\r\n    }    \r\n\r\n    function supportedTokens() public view returns(address[] memory){\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = address(baseToken);\r\n        return tokens;\r\n    }\r\n\r\n    function supportedTokensCount() public view returns(uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function cliamRewardsFromProtocol() internal {\r\n        //do nothing\r\n    }\r\n\r\n    function normalizeAmount(uint256 amount) private view returns(uint256) {\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.div(10**(uint256(decimals)-18));\r\n        } else if (decimals < 18) {\r\n            return amount.mul(10**(18-uint256(decimals)));\r\n        }\r\n    }\r\n\r\n    function denormalizeAmount(uint256 amount) private view returns(uint256) {\r\n        if (decimals == 18) {\r\n            return amount;\r\n        } else if (decimals > 18) {\r\n            return amount.mul(10**(uint256(decimals)-18));\r\n        } else if (decimals < 18) {\r\n            return amount.div(10**(18-uint256(decimals)));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\deploy\\AaveProtocol_SUSD.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ncontract AaveProtocol_sUSD is AaveProtocol {\r\n    function initialize(address _pool, address _token, address aaveAddressProvider, uint16 _aaveReferralCode) public initializer {\r\n        AaveProtocol.initialize(\r\n            _pool, \r\n            _token,\r\n            aaveAddressProvider,\r\n            _aaveReferralCode\r\n        );\r\n    }    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DefiOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DefiOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenClaimed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveReferralCode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDefiOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"balanceOfAll\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"canSwapToToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"handleDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_aaveReferralCode\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDefiOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isSupportedRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract IAaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPoolCore\",\"outputs\":[{\"internalType\":\"contract IAaveLendingPoolCore\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"normalizedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optimalProportions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceDefiOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveProtocol_sUSD","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://025b18639493d976f845a773bc195ff97e7d2291fcb958e3aa88c3e4b1180333"}]}