{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICurve {\r\n    function get_virtual_price() external view returns (uint256 out);\r\n    function coins(int128 tokenId) external view returns (address token);\r\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit) external view returns (uint256 amount);\r\n    function get_dy_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external view returns (uint256 buyTokenAmt);\r\n}\r\n\r\ninterface ICurveZap {\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256 amount);\r\n}\r\n\r\ninterface YTokenInterface {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function getPricePerFullShare() external view returns (uint256 amount);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface IStakingRewards {\r\n  function balanceOf(address) external view returns (uint256);\r\n  function earned(address) external view returns (uint256);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract CurveHelpers is DSMath {\r\n    /**\r\n    * @dev Return ycurve Swap Address\r\n    */\r\n    function getCurveSwapAddr() internal pure returns (address) {\r\n        return 0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51;\r\n    }\r\n\r\n    /**\r\n    * @dev Return ycurve zap Address\r\n    */\r\n    function getCurveZapAddr() internal pure returns (address) {\r\n        return 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\r\n    }\r\n\r\n    /**\r\n    * @dev Return Curve Token Address\r\n    */\r\n    function getCurveTokenAddr() internal pure returns (address) {\r\n        return 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Curve y Staking Address\r\n     */\r\n    function getCurveStakingAddr() internal pure returns (address) {\r\n        return 0x0001FB050Fe7312791bF6475b96569D83F695C9f;\r\n    }\r\n\r\n    /**\r\n     * @dev Return yfi reward Address\r\n     */\r\n    function getYFItoken() internal pure returns (address) {\r\n        return 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\r\n    }\r\n\r\n\r\n    function getTokenI(address token) internal pure returns (int128 i) {\r\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\r\n            // DAI Token\r\n            i = 0;\r\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n            // USDC Token\r\n            i = 1;\r\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\r\n            // USDT Token\r\n            i = 2;\r\n        } else if (token == address(0x0000000000085d4780B73119b644AE5ecd22b376)) {\r\n            // USDT Token\r\n            i = 3;\r\n        } else {\r\n            revert(\"token-not-found.\");\r\n        }\r\n    }\r\n\r\n    function getYtoken(address token) internal pure returns (address yTkn) {\r\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\r\n            // DAI Token\r\n            yTkn = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01;\r\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n            // USDC Token\r\n            yTkn = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e;\r\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\r\n            // USDT Token\r\n            yTkn = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D;\r\n        } else if (token == address(0x0000000000085d4780B73119b644AE5ecd22b376)) {\r\n            // USDT Token\r\n            yTkn = 0x73a052500105205d34Daf004eAb301916DA8190f;\r\n        } else {\r\n            revert(\"token-not-found.\");\r\n        }\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18(TokenInterface(sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(TokenInterface(buyAddr).decimals(), buyAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getDepositUnitAmt(\r\n        address token,\r\n        uint depositAmt,\r\n        uint curveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _depositAmt = convertTo18(TokenInterface(token).decimals(), depositAmt);\r\n        uint _curveAmt = convertTo18(TokenInterface(getCurveTokenAddr()).decimals(), curveAmt);\r\n        unitAmt = wdiv(_curveAmt, _depositAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getWithdrawtUnitAmt(\r\n        address token,\r\n        uint withdrawAmt,\r\n        uint curveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _withdrawAmt = convertTo18(TokenInterface(token).decimals(), withdrawAmt);\r\n        uint _curveAmt = convertTo18(TokenInterface(getCurveTokenAddr()).decimals(), curveAmt);\r\n        unitAmt = wdiv(_curveAmt, _withdrawAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is CurveHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint buyAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        ICurve curve = ICurve(getCurveSwapAddr());\r\n        buyAmt = curve.get_dy_underlying(getTokenI(sellAddr), getTokenI(buyAddr), sellAmt);\r\n        virtualPrice = curve.get_virtual_price();\r\n        unitAmt = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, buyAmt, slippage);\r\n    }\r\n\r\n    function getDepositAmount(address token, uint depositAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint curveAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        uint sharePrice = YTokenInterface(getYtoken(token)).getPricePerFullShare();\r\n        uint yAmt = wdiv(depositAmt, sharePrice);\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = yAmt;\r\n        ICurve curve = ICurve(getCurveSwapAddr());\r\n        curveAmt = curve.calc_token_amount(amts, true);\r\n        virtualPrice = curve.get_virtual_price();\r\n        unitAmt = getDepositUnitAmt(token, yAmt, curveAmt, slippage);\r\n    }\r\n\r\n    function getWithdrawAmount(address token, uint withdrawAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint curveAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        uint sharePrice = YTokenInterface(getYtoken(token)).getPricePerFullShare();\r\n        uint yAmt = wdiv(withdrawAmt, sharePrice);\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = yAmt;\r\n        ICurve curve = ICurve(getCurveSwapAddr());\r\n        curveAmt = curve.calc_token_amount(amts, false);\r\n        virtualPrice = curve.get_virtual_price();\r\n        unitAmt = getWithdrawtUnitAmt(token, yAmt, curveAmt, slippage);\r\n    }\r\n\r\n    function getWithdrawTokenAmount(address token, uint curveAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint tokenAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        tokenAmt = ICurveZap(getCurveZapAddr()).calc_withdraw_one_coin(curveAmt, getTokenI(token));\r\n        virtualPrice = ICurve(getCurveSwapAddr()).get_virtual_price();\r\n        unitAmt = getWithdrawtUnitAmt(token, tokenAmt, curveAmt, slippage);\r\n    }\r\n\r\n    struct yTokenData {\r\n        uint yPoolBal;\r\n        uint tokenPoolbal;\r\n        uint sharePrice;\r\n    }\r\n\r\n    function getPosition(\r\n        address user\r\n    ) public view returns (\r\n        uint userBal,\r\n        uint totalSupply,\r\n        uint virtualPrice,\r\n        uint userShare,\r\n        yTokenData memory poolyDai,\r\n        yTokenData memory poolyUsdc,\r\n        yTokenData memory poolyUsdt,\r\n        yTokenData memory poolyTusd,\r\n        uint stakedBal,\r\n        uint rewardsEarned,\r\n        uint yfiBal\r\n    ) {\r\n        TokenInterface curveToken = TokenInterface(getCurveTokenAddr());\r\n        userBal = curveToken.balanceOf(user);\r\n        totalSupply = curveToken.totalSupply();\r\n        userShare = wdiv(userBal, totalSupply);\r\n        ICurve curveContract = ICurve(getCurveSwapAddr());\r\n        virtualPrice = curveContract.get_virtual_price();\r\n        poolyDai = getCurveYBalance(curveContract.coins(0));\r\n        poolyUsdc = getCurveYBalance(curveContract.coins(1));\r\n        poolyUsdt = getCurveYBalance(curveContract.coins(2));\r\n        poolyTusd = getCurveYBalance(curveContract.coins(3));\r\n        // Staking Details.\r\n        (stakedBal, rewardsEarned, yfiBal) = getStakingPosition(user);\r\n    }\r\n\r\n    function getStakingPosition(address user) public view returns (\r\n        uint stakedBal,\r\n        uint rewardsEarned,\r\n        uint yfiBal\r\n    ) {\r\n        IStakingRewards stakingContract = IStakingRewards(getCurveStakingAddr());\r\n        stakedBal = stakingContract.balanceOf(user);\r\n        rewardsEarned = stakingContract.earned(user);\r\n        yfiBal = TokenInterface(getYFItoken()).balanceOf(user);\r\n    }\r\n\r\n    function getCurveYBalance(address tToken) public view returns (yTokenData memory ytoken) {\r\n        uint yPoolBal = YTokenInterface(tToken).balanceOf(getCurveSwapAddr());\r\n        uint sharePrice = YTokenInterface(tToken).getPricePerFullShare();\r\n        uint rawTokenPoolBal = wmul(yPoolBal, sharePrice);\r\n        return yTokenData(yPoolBal, rawTokenPoolBal, sharePrice);\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCurveYResolver is Resolver {\r\n    string public constant name = \"Curve-Y-Resolver-v1.1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tToken\",\"type\":\"address\"}],\"name\":\"getCurveYBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yPoolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPoolbal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.yTokenData\",\"name\":\"ytoken\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yPoolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPoolbal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.yTokenData\",\"name\":\"poolyDai\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yPoolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPoolbal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.yTokenData\",\"name\":\"poolyUsdc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yPoolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPoolbal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.yTokenData\",\"name\":\"poolyUsdt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"yPoolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPoolbal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.yTokenData\",\"name\":\"poolyTusd\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yfiBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yfiBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCurveYResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ef6c4808c87875c5dc30741af0c3909f143ca5f4cab9a6456e4b01d233e6cec2"}]}