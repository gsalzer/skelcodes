{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\n\r\ncontract Spinosa {\r\n    struct MP {\r\n        string id;\r\n        string data;\r\n    }\r\n\r\n    struct PF {\r\n        string id;\r\n        string data;\r\n    }\r\n\r\n    address private owner;\r\n    mapping(string => bool) private exist_MP;\r\n    mapping(string => MP) private list_MP;\r\n    mapping(string => bool) private exist_PF;\r\n    mapping(string => PF) private list_PF;\r\n\r\n    // event for EVM logging\r\n    event MPSet(string, string);\r\n    event PFSet(string, string);\r\n\r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setMP(string calldata _id, string calldata _data)\r\n        external\r\n        isOwner\r\n    {\r\n        require(bytes(_id).length > 0, \"ID is empty\");\r\n        require(exist_MP[_id] == false, \"MP already exist\");\r\n        require(bytes(_data).length > 0, \"DATA is empty\");\r\n\r\n        MP memory tmp;\r\n        tmp.id = _id;\r\n        tmp.data = _data;\r\n\r\n        list_MP[_id] = tmp;\r\n        exist_MP[_id] = true;\r\n\r\n        emit MPSet(\"New MP was added with ID: \", _id);\r\n    }\r\n\r\n    function setPF(string calldata _id, string calldata _data)\r\n        external\r\n        isOwner\r\n    {\r\n        require(bytes(_id).length > 0, \"ID is empty\");\r\n        require(exist_PF[_id] == false, \"PF already exist\");\r\n        require(bytes(_data).length > 0, \"DATA is empty\");\r\n\r\n        PF memory tmp;\r\n        tmp.id = _id;\r\n        tmp.data = _data;\r\n\r\n        list_PF[_id] = tmp;\r\n        exist_PF[_id] = true;\r\n\r\n        emit MPSet(\"New PF was added with ID: \", _id);\r\n    }\r\n\r\n    function getMP(string memory _id) public view returns (string memory) {\r\n        require(bytes(_id).length > 0, \"ID is empty\");\r\n        require(exist_MP[_id] == true, \"MP does not exist\");\r\n\r\n        return list_MP[_id].data;\r\n    }\r\n\r\n    function getPF(string memory _id) public view returns (string memory) {\r\n        require(bytes(_id).length > 0, \"ID is empty\");\r\n        require(exist_PF[_id] == true, \"PF does not exist\");\r\n\r\n        return list_PF[_id].data;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"MPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"PFSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getMP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getPF\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setPF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Spinosa","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8aa84669f31c535b540dded389a9a77e62a43b092fd8b60d27de1db1ac09bea6"}]}