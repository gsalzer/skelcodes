{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract Withdrawable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function adminWithdraw(address asset) onlyOwner public {\r\n        uint amount = adminWitrawAllowed(asset);\r\n        require(amount > 0, \"admin witdraw not allowed\");\r\n        if (asset == address(0)) {\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            IERC20(asset).safeTransfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    // can be overridden to disallow withdraw for some token\r\n    function adminWitrawAllowed(address asset) internal view returns(uint allowedAmount) {\r\n        allowedAmount = asset == address(0)\r\n            ? address(this).balance\r\n            : IERC20(asset).balanceOf(address(this));\r\n    }\r\n}\r\n\r\n// File: contracts/SimpleStaking.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SimpleStaking is Withdrawable, Pausable {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint;\r\n\r\n  IERC20 public token;\r\n  uint public stakingStart;\r\n  uint public stakingEnd;\r\n  uint public interestRate;\r\n  uint constant interestRateUnit = 1e6;\r\n//  uint public accruingDelta = 15 days;\r\n//  uint public stakingStepTimespan;\r\n  uint constant HUGE_TIME = 99999999999999999;\r\n  uint public adminStopTime = HUGE_TIME;\r\n  uint public accruingInterval;\r\n\r\n  mapping (address => uint) public lockedAmount;\r\n  mapping (address => uint) public alreadyWithdrawn;\r\n  uint public totalLocked;\r\n  uint public totalWithdrawn;\r\n\r\n  uint public interestReserveBalance;\r\n\r\n  event StakingUpdated(address indexed user, uint userLocked, uint remainingInterestReserve);\r\n  event Withdraw(address investor, uint amount);\r\n\r\n  constructor (address token_, uint start_, uint end_, uint accruingInterval_, uint rate_) public {\r\n    token = IERC20(token_);\r\n    require(end_ > start_, \"end must be greater than start\");\r\n    stakingStart = start_;\r\n    stakingEnd = end_;\r\n    require(rate_ > 0 && rate_ < interestRateUnit, \"rate must be greater than 0 and lower than unit\");\r\n    interestRate = rate_;\r\n    require(accruingInterval_ > 0, \"accruingInterval_ must be greater than 0\");\r\n    require((end_ - start_) % accruingInterval_ == 0, \"end time not alligned\");\r\n    require(end_ - start_ >= accruingInterval_, \"end - start must be greater than accruingInterval\");\r\n    accruingInterval = accruingInterval_;\r\n  }\r\n\r\n  modifier afterStart() {\r\n    require(stakingStart < now, \"Only after start\");\r\n    _;\r\n  }\r\n\r\n  modifier beforeStart() {\r\n    require(now < stakingStart, \"Only before start\");\r\n    _;\r\n  }\r\n\r\n  function adminWitrawAllowed(address asset) internal view returns(uint) {\r\n    if (asset != address(token)) {\r\n      return super.adminWitrawAllowed(asset);\r\n    } else {\r\n      uint balance = token.balanceOf(address(this));\r\n      uint maxInterest = _getTotalInterestAmount(totalLocked);\r\n      uint interest = adminStopTime == HUGE_TIME\r\n        ? maxInterest\r\n        : _getAccruedInterest(maxInterest, adminStopTime);\r\n      uint reserved = totalLocked.add(interest).sub(totalWithdrawn);\r\n      return reserved < balance ? balance - reserved : 0;\r\n    }\r\n  }\r\n\r\n  function _min(uint a, uint b) private pure returns(uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) private pure returns(uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function adminStop() public onlyOwner {\r\n    require(adminStopTime == HUGE_TIME, \"already admin stopped\");\r\n    require(now < stakingEnd, \"already ended\");\r\n    adminStopTime = _max(now, stakingStart);\r\n  }\r\n\r\n  function _transferTokensFromSender(uint amount) private {\r\n    require(amount > 0, \"Invalid amount\");\r\n    uint expectedBalance = token.balanceOf(address(this)).add(amount);\r\n    token.safeTransferFrom(msg.sender, address(this), amount);\r\n    require(token.balanceOf(address(this)) == expectedBalance, \"Invalid balance after transfer\");\r\n  }\r\n\r\n  function addFundsForInterests(uint amount) public {\r\n    _transferTokensFromSender(amount);\r\n    interestReserveBalance = interestReserveBalance.add(amount);\r\n  }\r\n\r\n  function getAvailableStaking() external view returns(uint) {\r\n    return now > stakingStart\r\n    ? 0\r\n    : interestReserveBalance.mul(interestRateUnit).div(interestRate).add(interestRateUnit / interestRate).sub(1);\r\n  }\r\n\r\n  function _getTotalInterestAmount(uint investmentAmount) private view returns(uint) {\r\n    return investmentAmount.mul(interestRate).div(interestRateUnit);\r\n  }\r\n\r\n  function getAccruedInterestNow(address user) public view returns(uint) {\r\n    return getAccruedInterest(user, now);\r\n  }\r\n\r\n  function getAccruedInterest(address user, uint time) public view returns(uint) {\r\n    uint totalInterest = _getTotalInterestAmount(lockedAmount[user]);\r\n    return _getAccruedInterest(totalInterest, time);\r\n  }\r\n\r\n  function _getAccruedInterest(uint totalInterest, uint time) private view returns(uint) {\r\n    if (time < stakingStart + accruingInterval) {\r\n      return 0;\r\n    } else if ( stakingEnd <= time && time < adminStopTime) {\r\n      return totalInterest;\r\n    } else {\r\n      uint lockTimespanLength = stakingEnd - stakingStart;\r\n      uint elapsed = _min(time, adminStopTime).sub(stakingStart).div(accruingInterval).mul(accruingInterval);\r\n      return totalInterest.mul(elapsed).div(lockTimespanLength);\r\n    }\r\n  }\r\n\r\n  function addStaking(uint amount) external\r\n    whenNotPaused\r\n    beforeStart\r\n  {\r\n    require(token.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n    uint interestAmount = _getTotalInterestAmount(amount);\r\n    require(interestAmount <= interestReserveBalance, \"No tokens available for interest\");\r\n\r\n    _transferTokensFromSender(amount);\r\n    interestReserveBalance = interestReserveBalance.sub(interestAmount);\r\n\r\n    uint newLockedAmount = lockedAmount[msg.sender].add(amount);\r\n    lockedAmount[msg.sender] = newLockedAmount;\r\n    totalLocked = totalLocked.add(amount);\r\n\r\n    emit StakingUpdated(msg.sender, newLockedAmount, interestReserveBalance);\r\n  }\r\n\r\n  function withdraw() external\r\n    afterStart\r\n    returns(uint)\r\n  {\r\n    uint locked = lockedAmount[msg.sender];\r\n    uint withdrawn = alreadyWithdrawn[msg.sender];\r\n    uint accruedInterest = getAccruedInterest(msg.sender, now);\r\n    uint unlockedAmount = now < _min(stakingEnd, adminStopTime) ? 0 : locked;\r\n\r\n    uint accrued = accruedInterest + unlockedAmount;\r\n    require(accrued > withdrawn, \"nothing to withdraw\");\r\n    uint toTransfer = accrued.sub(withdrawn);\r\n\r\n    alreadyWithdrawn[msg.sender] = withdrawn.add(toTransfer);\r\n    totalWithdrawn = totalWithdrawn.add(toTransfer);\r\n    token.safeTransfer(msg.sender, toTransfer);\r\n    emit Withdraw(msg.sender, toTransfer);\r\n\r\n    return toTransfer;\r\n  }\r\n}\r\n\r\n// File: contracts/SimpleStakingProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SimpleStakingProxy is Withdrawable, Pausable {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint;\r\n\r\n  IERC20 public token;\r\n  uint public stakingStart;\r\n  uint public stakingEnd;\r\n  uint public interestRate;\r\n  uint constant interestRateUnit = 1e6;\r\n//  uint public accruingDelta = 15 days;\r\n//  uint public stakingStepTimespan;\r\n  uint constant HUGE_TIME = 99999999999999999;\r\n  uint public adminStopTime = HUGE_TIME;\r\n  uint public accruingInterval;\r\n\r\n  SimpleStaking public proxedStaking;\r\n  mapping (address => uint) public _lockedAmount;\r\n  mapping (address => uint) public _alreadyWithdrawn;\r\n  uint public totalLocked;\r\n  uint public totalWithdrawn;\r\n\r\n  uint public interestReserveBalance;\r\n\r\n  event StakingUpdated(address indexed user, uint userLocked, uint remainingInterestReserve);\r\n  event Withdraw(address investor, uint amount);\r\n\r\n  constructor (address token_, address staking_) public {\r\n    token = IERC20(token_);\r\n    proxedStaking = SimpleStaking(staking_);\r\n    stakingStart = proxedStaking.stakingStart();\r\n    stakingEnd = proxedStaking.stakingEnd();\r\n    interestRate = proxedStaking.interestRate();\r\n    accruingInterval = proxedStaking.accruingInterval();\r\n    totalLocked = proxedStaking.totalLocked();\r\n//    totalWithdrawn = proxedStaking.totalWithdrawn();\r\n    require(proxedStaking.paused(), \"proxed staking contract must be paused\");\r\n    require(stakingEnd > stakingStart, \"end must be greater than start\");\r\n    require(interestRate > 0 && interestRate < interestRateUnit, \"rate must be greater than 0 and lower than unit\");\r\n    require(accruingInterval > 0, \"accruingInterval_ must be greater than 0\");\r\n    require((stakingEnd - stakingStart) % accruingInterval == 0, \"end time not alligned\");\r\n    require(stakingEnd - stakingStart >= accruingInterval, \"end - start must be greater than accruingInterval\");\r\n  }\r\n\r\n  modifier afterStart() {\r\n    require(stakingStart < now, \"Only after start\");\r\n    _;\r\n  }\r\n\r\n  modifier beforeStart() {\r\n    require(now < stakingStart, \"Only before start\");\r\n    _;\r\n  }\r\n\r\n  function _min(uint a, uint b) private pure returns(uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) private pure returns(uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function adminStop() public onlyOwner {\r\n    require(adminStopTime == HUGE_TIME, \"already admin stopped\");\r\n    require(now < stakingEnd, \"already ended\");\r\n    adminStopTime = _max(now, stakingStart);\r\n  }\r\n\r\n  function lockedAmount(address user) public view returns(uint amount) {\r\n    amount = _lockedAmount[user];\r\n    if (amount == 0) {\r\n      amount = proxedStaking.lockedAmount(user);\r\n    }\r\n  }\r\n\r\n  function alreadyWithdrawn(address user) public view returns(uint amount) {\r\n    if (_lockedAmount[user] == 0) {\r\n      amount = proxedStaking.alreadyWithdrawn(user);\r\n    } else {\r\n      amount = _alreadyWithdrawn[user];\r\n    }\r\n  }\r\n\r\n  function _fetchAmounts(address user) internal returns(uint locked, uint withdrawn) {\r\n    locked = _lockedAmount[user];\r\n    withdrawn = _alreadyWithdrawn[user];\r\n    if (locked == 0) {\r\n      locked = proxedStaking.lockedAmount(user);\r\n      withdrawn = proxedStaking.alreadyWithdrawn(user);\r\n      _lockedAmount[user] = locked;\r\n      _alreadyWithdrawn[user] = withdrawn;\r\n    }\r\n  }\r\n\r\n  function fetchAmounts(address[] memory users) public {\r\n    for (uint i=0; i < users.length; i++) {\r\n      _fetchAmounts(users[i]);\r\n    }\r\n  }\r\n\r\n  event AdminStakingChanged(address user, uint oldLocked, uint oldWithdrawn, uint newLocked, uint newWithdrawn);\r\n\r\n  function adminSetAmounts(address user, uint locked, uint withdrawn) public onlyOwner {\r\n    (uint oldLocked, uint oldWithdrawn) = _fetchAmounts(msg.sender);\r\n    _lockedAmount[user] = locked;\r\n    _alreadyWithdrawn[user] = withdrawn;\r\n    emit AdminStakingChanged(user, oldLocked, oldWithdrawn, locked, withdrawn);\r\n  }\r\n\r\n  function _transferTokensFromSender(uint amount) private {\r\n    require(amount > 0, \"Invalid amount\");\r\n    uint expectedBalance = token.balanceOf(address(this)).add(amount);\r\n    token.safeTransferFrom(msg.sender, address(this), amount);\r\n    require(token.balanceOf(address(this)) == expectedBalance, \"Invalid balance after transfer\");\r\n  }\r\n\r\n  function addFundsForInterests(uint amount) public {\r\n    _transferTokensFromSender(amount);\r\n    interestReserveBalance = interestReserveBalance.add(amount);\r\n  }\r\n\r\n  function getAvailableStaking() external view returns(uint) {\r\n    return now > stakingStart\r\n    ? 0\r\n    : interestReserveBalance.mul(interestRateUnit).div(interestRate).add(interestRateUnit / interestRate).sub(1);\r\n  }\r\n\r\n  function _getTotalInterestAmount(uint investmentAmount) private view returns(uint) {\r\n    return investmentAmount.mul(interestRate).div(interestRateUnit);\r\n  }\r\n\r\n  function getAccruedInterestNow(address user) public view returns(uint) {\r\n    return getAccruedInterest(user, now);\r\n  }\r\n\r\n  function getAccruedInterest(address user, uint time) public view returns(uint) {\r\n    uint totalInterest = _getTotalInterestAmount(lockedAmount(user));\r\n    return _getAccruedInterest(totalInterest, time);\r\n  }\r\n\r\n  function _getAccruedInterest(uint totalInterest, uint time) private view returns(uint) {\r\n    if (time < stakingStart + accruingInterval) {\r\n      return 0;\r\n    } else if ( stakingEnd <= time && time < adminStopTime) {\r\n      return totalInterest;\r\n    } else {\r\n      uint lockTimespanLength = stakingEnd - stakingStart;\r\n      uint elapsed = _min(time, adminStopTime).sub(stakingStart).div(accruingInterval).mul(accruingInterval);\r\n      return totalInterest.mul(elapsed).div(lockTimespanLength);\r\n    }\r\n  }\r\n\r\n  function addStaking(uint amount) external\r\n    whenNotPaused\r\n    beforeStart\r\n  {\r\n    require(token.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n    uint interestAmount = _getTotalInterestAmount(amount);\r\n    require(interestAmount <= interestReserveBalance, \"No tokens available for interest\");\r\n\r\n    _transferTokensFromSender(amount);\r\n    interestReserveBalance = interestReserveBalance.sub(interestAmount);\r\n\r\n    (uint newLockedAmount, ) = _fetchAmounts(msg.sender);\r\n    newLockedAmount = newLockedAmount.add(amount);\r\n    _lockedAmount[msg.sender] = newLockedAmount;\r\n    totalLocked = totalLocked.add(amount);\r\n\r\n    emit StakingUpdated(msg.sender, newLockedAmount, interestReserveBalance);\r\n  }\r\n\r\n  function withdraw() external\r\n    afterStart\r\n    returns(uint)\r\n  {\r\n    (, uint withdrawn) = _fetchAmounts(msg.sender);\r\n    uint accruedInterest = getAccruedInterest(msg.sender, now);\r\n//    uint unlockedAmount = now < _min(stakingEnd, adminStopTime) ? 0 : locked;\r\n    uint unlockedAmount = 0; // locked tokens managed by the DAO\r\n\r\n    uint accrued = accruedInterest + unlockedAmount;\r\n    require(accrued > withdrawn, \"nothing to withdraw\");\r\n    uint toTransfer = accrued.sub(withdrawn);\r\n\r\n    _alreadyWithdrawn[msg.sender] = withdrawn.add(toTransfer);\r\n    totalWithdrawn = totalWithdrawn.add(toTransfer);\r\n    token.safeTransfer(msg.sender, toTransfer);\r\n    emit Withdraw(msg.sender, toTransfer);\r\n\r\n    return toTransfer;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawn\",\"type\":\"uint256\"}],\"name\":\"AdminStakingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingInterestReserve\",\"type\":\"uint256\"}],\"name\":\"StakingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_alreadyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accruingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addFundsForInterests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"adminSetAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminStopTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"alreadyWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"fetchAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccruedInterestNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestReserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxedStaking\",\"outputs\":[{\"internalType\":\"contract SimpleStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleStakingProxy","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089ab32156e46f46d02ade3fecbe5fc4243b9aaed0000000000000000000000004bbea0ba8c493fb6820080c5544623b5f245d745","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2729e54cf68a1fbc92ea5b6586894e80f3a12838c57c37fbc9ee2621edeb1c1d"}]}