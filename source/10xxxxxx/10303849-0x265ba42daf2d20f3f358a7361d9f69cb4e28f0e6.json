{"status":"1","message":"OK","result":[{"SourceCode":"//                          _\r\n//                        /   \\\r\n//                       .     \\\r\n//                      /       \\\r\n//                 .BBBBB;     . | .\r\n//               BBBBBBBBB      \\|/\r\n//              ;BBIBBBBb     `--+--'\r\n//        .=YRBBBBBBBBBBB       /|\\\r\n//      =RBBBBBBBBBBBBBB;      . . .\r\n//    ;BBBR=VBBBBBBBBBBBV.\r\n//   tBBR::VBBBBBBBBBBBBBB:      _   _        ______                 _\r\n//  tBBt ;BBBBBBBBBBBBBBBBB.    | | | |       | ___ \\               | |\r\n// ;BBY ;BBBBBBBBBBBBBBBBBBV    | | | |_ __  ♥| |_/ / ___  _ __ ___ | |_\r\n// XBB .BBBBBBBBBBBBBBBBBBBB:   | | | |  _ \\| | ___ \\/ _ \\|  _   _ \\|  _ \\\r\n// BBI +BBBBBBBBBBBBBBBBBBBBi   | |_| | | | | | |_/ / (_) | | | | | | |_) |\r\n//.BB= XBBBBBBBBBBBBBBBBBBBBY    \\___/|_| |_|_\\____/ \\___/|_| |_| |_|____/\r\n// BBt YBBBBBBBBBBBBBBBBBBBBi\r\n// VBB +BBBBBBBBBBBBBBBBBBBB:\r\n// ;BB+ BBBBBBBBBBBBBBBBBBBR     ██╗   ██╗██████╗   Created by Dorf and Mr Fahrenheit\r\n//  tBBVBBBBBBBBBBBBBBBBBBB.     ██║   ██║╚════██╗\r\n//   tBBBBBBBBBBBBBBBBBBBB:      ██║   ██║ █████╔╝    https://unibomb.it/ - created by Karl\r\n//    ;BBBBBBBBBBBBBBBBBY        ╚██╗ ██╔╝ ╚═══██╗    https://t.me/UniBomb\r\n//      +BBBBBBBBBBBBBY:          ╚████╔╝ ██████╔╝    https://discord.gg/Jmsbnsx\r\n//        :+YRBBBRVt;\r\n//\r\n//-------------------------------------------------------------------------\r\n//\r\n//Contributions:\r\n//~~~~~~~~~~ MrBlobby - UniPower, Proof of Liquidity concept:\r\n// https://etherscan.io/address/0xF2f9A7e93f845b3ce154EfbeB64fB9346FCCE509#code\r\n//\r\n//~~~ Dorf - UniBomb V1 and V2, V3 migration\r\n//~~~ Mr Fahrenheit - Most of V3 contract\r\n//~~~ Zoma - Auditing\r\n//~~~ Phil - Design\r\n//~~~ V2 Community - Design and feedback\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint tokens, address token, bytes calldata data) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ncontract UniBombV3 is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    modifier initialPhaseOver() {\r\n        require(now > initialPhaseEnd, 'Not yet');\r\n        _;\r\n    }\r\n\r\n    modifier unclaimedRewards(address addr) {\r\n        uint rewards = calculateRewards(addr);\r\n        if (rewards > 0) {\r\n            claimRewards(addr, rewards);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier burnCheck() {\r\n        if (lastPoolBalance != balanceOf(pool)) {\r\n            burnUpdate();\r\n        }\r\n        _;\r\n    }\r\n\r\n    struct User {\r\n        uint balance;\r\n        mapping (address => uint) allowed;\r\n        uint allTimeRewards;\r\n        uint stakeBalance;\r\n        int stakePayouts;\r\n    }\r\n\r\n    mapping (address => User) internal user;\r\n\r\n    address pool;\r\n\r\n    // ERC20 stuff\r\n    string public constant name  = \"UniBombV3\";\r\n    string public constant symbol = \"UBOMB\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // v2\r\n    ERC20 private ubombv2;\r\n\r\n    // burn stuff\r\n    uint lastBurnTime;\r\n    uint toBurn;\r\n    uint day = 86400; // 86400 seconds in one day\r\n    uint burnRate = 3; // 3% burn per day\r\n    uint _totalSupply;\r\n    uint startingSupply = 10000000 * (10 ** 18); // 10 million supply\r\n    uint totalBurned;\r\n\r\n    uint lastPoolBalance;\r\n\r\n    uint constant private BURN_REWARD = 10;\r\n\r\n    // staking stuff\r\n    uint constant private STAKE_FEE = 10;\r\n    uint constant private MAG = 2**64;\r\n\r\n    uint internal initialPhaseEnd;\r\n    uint internal totalStaked;\r\n    uint internal divsPerShare;\r\n    bool internal initialized;\r\n\r\n    event Stake(address user, uint staked);\r\n    event Unstake(address user, uint unstaked);\r\n    event PoolBurn(address user, uint burned, uint newSupply, uint newPool);\r\n\r\n    function() external payable {\r\n        revert('No');\r\n    }\r\n\r\n    // For UI\r\n\r\n    function allInfoFor(address addr) public view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        User memory _user = user[addr];\r\n        return (\r\n            _user.balance,\r\n            _user.stakeBalance,\r\n            calculateRewards(addr),\r\n            _user.allTimeRewards,\r\n            user[pool].balance,\r\n            _totalSupply,\r\n            totalStaked,\r\n            totalBurned,\r\n            toBurn,\r\n            lastBurnTime\r\n        );\r\n    }\r\n\r\n    // Migration\r\n\r\n    function initialize(uint _initialPhaseEnd, uint _poolSupply, address _ubombv2, address _poolAddr) external {\r\n        require(!initialized);\r\n        initialPhaseEnd = _initialPhaseEnd;\r\n        user[msg.sender].balance = _poolSupply;\r\n        _totalSupply = _poolSupply;\r\n        ubombv2 = ERC20(_ubombv2);\r\n        totalBurned = startingSupply - ubombv2.totalSupply();\r\n        pool = _poolAddr;\r\n        lastBurnTime = now;\r\n        initialized = true;\r\n    }\r\n\r\n    function receiveApproval(address from, uint tokens, address token, bytes memory data) public {\r\n        require(ubombv2.transferFrom(from, address(this), tokens), 'Transfer failed');\r\n        user[from].balance += tokens;\r\n        _totalSupply += tokens;\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n    }\r\n\r\n    // Staking functions\r\n\r\n    function distribute(uint amount) public {\r\n        require(totalStaked > 0, 'Stake required');\r\n        User memory _user = user[msg.sender];\r\n        require(_user.balance >= amount, 'Not enough minerals');\r\n        _user.balance = _user.balance.sub(amount);\r\n        user[msg.sender] = _user;\r\n\r\n        divsPerShare = divsPerShare.add((amount * MAG) / totalStaked);\r\n    }\r\n\r\n    function stake(address addr, uint amount) public unclaimedRewards(msg.sender) {\r\n        require(user[msg.sender].balance >= amount, 'Not enough minerals');\r\n        require(addr != pool, 'Pool cannot stake');\r\n        User memory _user = user[addr];\r\n\r\n        if (now < initialPhaseEnd) {\r\n            totalStaked += amount;\r\n            _user.stakeBalance += amount;\r\n            _user.stakePayouts += (int)(divsPerShare.mul(amount));\r\n            user[addr] = _user;\r\n            user[msg.sender].balance = user[msg.sender].balance.sub(amount);\r\n            return;\r\n        }\r\n\r\n        uint fee = (amount * STAKE_FEE) / 100;\r\n        uint newStake = amount.sub(fee);\r\n        totalStaked += newStake;\r\n        uint userFeeShare = fee - (fee - (newStake * ((fee * MAG) / totalStaked)));\r\n        divsPerShare = divsPerShare.add((fee * MAG) / totalStaked);\r\n\r\n        _user.stakeBalance += newStake;\r\n        _user.stakePayouts += (int)(divsPerShare.mul(newStake).sub(userFeeShare));\r\n\r\n        user[addr] = _user;\r\n        user[msg.sender].balance = user[msg.sender].balance.sub(amount);\r\n\r\n        emit Stake(addr, amount);\r\n    }\r\n\r\n    function unstake(uint amount) public initialPhaseOver {\r\n        address addr = msg.sender;\r\n        User memory _user = user[addr];\r\n        require(amount <= _user.stakeBalance, 'Not enough staked');\r\n\r\n        uint fee = (amount * STAKE_FEE) / 100;\r\n        uint received = amount.sub(fee);\r\n\r\n        totalStaked = totalStaked.sub(amount);\r\n        _user.stakeBalance -= amount;\r\n        _user.stakePayouts -= (int)(divsPerShare.mul(amount));\r\n        _user.balance += received;\r\n\r\n        divsPerShare = divsPerShare.add((fee * MAG).div(totalStaked));\r\n\r\n        user[addr] = _user;\r\n\r\n        emit Unstake(addr, amount);\r\n    }\r\n\r\n    function calculateRewards(address addr) internal view returns (uint) {\r\n        User memory _user = user[addr];\r\n        return (uint)((int)(divsPerShare.mul(_user.stakeBalance)) - _user.stakePayouts) / MAG;\r\n    }\r\n\r\n    function claimRewards(address addr, uint rewards) internal {\r\n        User memory _user = user[addr];\r\n        _user.balance += rewards;\r\n        _user.allTimeRewards += rewards;\r\n        _user.stakePayouts += (int)(rewards * MAG);\r\n        user[addr] = _user;\r\n    }\r\n\r\n    // ERC20 functions\r\n\r\n    function totalSupply() public view returns (uint) {\r\n       return _totalSupply.sub(toBurn + getBurnAmount());\r\n    }\r\n\r\n    function balanceOf(address addr) public view returns (uint) {\r\n        return user[addr].balance + calculateRewards(addr);\r\n    }\r\n\r\n    function allowance(address addr, address spender) public view returns (uint) {\r\n        return user[addr].allowed[spender];\r\n    }\r\n\r\n    function transfer(address to, uint value) public unclaimedRewards(msg.sender) burnCheck returns (bool) {\r\n        User memory _user = user[msg.sender];\r\n        require(_user.balance >= value, 'Not enough minerals');\r\n\r\n        _user.balance = _user.balance.sub(value);\r\n        user[msg.sender] = _user;\r\n        user[to].balance += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint value) public returns (bool) {\r\n        user[msg.sender].allowed[spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes calldata data) external unclaimedRewards(msg.sender) returns (bool) {\r\n        user[msg.sender].allowed[spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) public unclaimedRewards(from) burnCheck returns (bool) {\r\n        User storage _user = user[from];\r\n        require(_user.balance >= value, 'Not enough minerals');\r\n        require(_user.allowed[msg.sender] >= value, 'You require more vespene gas');\r\n\r\n        _user.balance = _user.balance.sub(value);\r\n        _user.allowed[msg.sender] = _user.allowed[msg.sender].sub(value);\r\n        user[from] = _user;\r\n        user[to].balance += value;\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        user[msg.sender].allowed[spender] = user[msg.sender].allowed[spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, user[msg.sender].allowed[spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        user[msg.sender].allowed[spender] = user[msg.sender].allowed[spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, user[msg.sender].allowed[spender]);\r\n        return true;\r\n    }\r\n\r\n    // burn functions\r\n\r\n    function burnPool() external {\r\n        require(totalStaked > 0, 'Stake required');\r\n        uint _burnAmount = getBurnAmount() + toBurn;\r\n        require(_burnAmount >= 10, \"Nothing to burn...\");\r\n        lastBurnTime = now;\r\n        toBurn = 0;\r\n\r\n        uint _userReward = _burnAmount * 10 / 100;\r\n        uint _stakeReward = _burnAmount * 20 / 100;\r\n        uint _finalBurn = _burnAmount - _userReward - _stakeReward;\r\n\r\n        _totalSupply = _totalSupply.sub(_finalBurn);\r\n        totalBurned += _finalBurn;\r\n        user[msg.sender].balance += _userReward;\r\n        divsPerShare = divsPerShare.add((_stakeReward * MAG) / totalStaked);\r\n        user[pool].balance = user[pool].balance.sub(_finalBurn);\r\n\r\n        IUniswapV2Pair(pool).sync();\r\n\r\n        emit PoolBurn(msg.sender, _burnAmount, _totalSupply, balanceOf(pool));\r\n    }\r\n\r\n    function getBurnAmount() public view returns (uint) {\r\n        uint _time = now - lastBurnTime;\r\n        uint _poolAmount = balanceOf(pool);\r\n        uint _burnAmount = (_poolAmount * burnRate * _time) / (day * 100);\r\n        return _burnAmount;\r\n    }\r\n\r\n    function burnUpdate() internal {\r\n        toBurn += getBurnAmount();\r\n        lastBurnTime = now;\r\n        lastPoolBalance = balanceOf(pool);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"safemath mul\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"safemath sub\");\r\n        return a - b;\r\n    }\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"safemath add\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPool\",\"type\":\"uint256\"}],\"name\":\"PoolBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPhaseEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ubombv2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniBombV3","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b90ce3024a3024c01a6e7fd10b14a6a152a678698ea757754a3fab085031f5fc"}]}