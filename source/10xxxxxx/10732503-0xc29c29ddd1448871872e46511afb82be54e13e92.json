{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n//Note that assert() is now used because the try/catch mechanism in the Pamp.sol contract does not revert on failure with require();\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a/*, \"SafeMath: addition overflow\"*/);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        assert(b <= a/*, errorMessage*/);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        assert(c / a == b/*, \"SafeMath: multiplication overflow\"*/);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        assert(b > 0/*, errorMessage*/);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        assert(b != 0/*, errorMessage*/);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Parent token contract, see Pamp.sol\r\nabstract contract PampToken {\r\n    function balanceOf(address account) public view virtual returns (uint256);\r\n}\r\n\r\nabstract contract StakingContract {\r\n    function getStaker(address _staker) external virtual view returns (uint256, uint256, bool);\r\n    function liquidityRewards(address recipient, uint amount) external virtual;\r\n}\r\n\r\ncontract HoldersDay {\r\n    using SafeMath for uint256;\r\n    \r\n    PampToken token;\r\n    StakingContract stakingContract;\r\n    address owner;\r\n    \r\n    uint adjustmentFactor;\r\n    \r\n    uint32 public currentHoldersDayRewardedVersion;\r\n    \r\n    bool public enableHoldersDay;                     // once a month, holders receive a nice bump. This is true for 24 hours, once a month only.\r\n    \r\n    mapping (bytes32 => bool) public holdersDayRewarded; // Mapping to test whether an individual received his Holder's Day reward\r\n    \r\n    event HoldersDayEnabled();\r\n    \r\n    event HoldersDayRewarded(uint Amount);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        token = PampToken(0xF0FAC7104aAC544e4a7CE1A55ADF2B5a25c65bD1);\r\n        stakingContract = StakingContract(0x738d3CEC4E685A2546Ab6C3B055fd6B8C1198093);\r\n        adjustmentFactor = 600;\r\n    }\r\n    \r\n    // This function can be called once a month, when holder's day is enabled\r\n    function claimHoldersDay() external {\r\n        \r\n        require(!getHoldersDayRewarded(msg.sender), \"You've already claimed Holder's Day\");\r\n        require(enableHoldersDay, \"Holder's Day is not enabled\");\r\n\r\n        (uint startTimestamp, uint lastTimestamp, bool hasMigrated) = stakingContract.getStaker(msg.sender);\r\n        uint daysStaked = block.timestamp.sub(startTimestamp) / 86400;  // Calculate time staked in days\r\n        require(daysStaked >= 30, \"You must stake for 30 days to claim holder's day rewards\");\r\n        if (enableHoldersDay && daysStaked >= 30) {\r\n            setHoldersDayRewarded(msg.sender);\r\n            uint balance = token.balanceOf(msg.sender);\r\n            uint numTokens = mulDiv(balance, daysStaked, adjustmentFactor);   // Once a month, holders get a nice bump\r\n            uint tenPercent = mulDiv(balance, 1, 10);\r\n        \r\n            if (numTokens > tenPercent) {       // We don't allow a daily reward of greater than ten percent of a holder's balance.\r\n                numTokens = tenPercent;\r\n            }\r\n            \r\n            stakingContract.liquidityRewards(msg.sender, numTokens);\r\n            emit HoldersDayRewarded(numTokens);\r\n        }\r\n        \r\n    }\r\n\r\n    function getHoldersDayRewarded(address holder) internal view returns(bool) {\r\n        bytes32 key = keccak256(abi.encodePacked(currentHoldersDayRewardedVersion, holder));\r\n        return holdersDayRewarded[key];\r\n    }\r\n\r\n    function setHoldersDayRewarded(address holder) internal {\r\n        bytes32 key = keccak256(abi.encodePacked(currentHoldersDayRewardedVersion, holder));\r\n        holdersDayRewarded[key] = true;\r\n    }\r\n\r\n    function deleteHoldersDayRewarded() internal {\r\n        currentHoldersDayRewardedVersion++;\r\n    }\r\n        \r\n    function updateHoldersDay(bool _enableHoldersDay) external onlyOwner {\r\n        enableHoldersDay = _enableHoldersDay;\r\n        if(enableHoldersDay) {\r\n            deleteHoldersDayRewarded();\r\n            emit HoldersDayEnabled();\r\n        }\r\n    }\r\n    \r\n    function updateAdjustmentFactor(uint _adjustmentFactor) external onlyOwner {\r\n        adjustmentFactor = _adjustmentFactor;\r\n    }\r\n    \r\n    function mulDiv (uint x, uint y, uint z) public pure returns (uint) {\r\n          (uint l, uint h) = fullMul (x, y);\r\n          assert (h < z);\r\n          uint mm = mulmod (x, y, z);\r\n          if (mm > l) h -= 1;\r\n          l -= mm;\r\n          uint pow2 = z & -z;\r\n          z /= pow2;\r\n          l /= pow2;\r\n          l += h * ((-pow2) / pow2 + 1);\r\n          uint r = 1;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          return l * r;\r\n    }\r\n    \r\n    function fullMul (uint x, uint y) private pure returns (uint l, uint h) {\r\n          uint mm = mulmod (x, y, uint (-1));\r\n          l = x * y;\r\n          h = mm - l;\r\n          if (mm < l) h -= 1;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HoldersDayEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"HoldersDayRewarded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimHoldersDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentHoldersDayRewardedVersion\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableHoldersDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"holdersDayRewarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"updateAdjustmentFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableHoldersDay\",\"type\":\"bool\"}],\"name\":\"updateHoldersDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HoldersDay","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c6e5a5b31f2aea8be6d89029e7e8eabc759d4cb9f9d9b9e5a0466690f900aa9"}]}