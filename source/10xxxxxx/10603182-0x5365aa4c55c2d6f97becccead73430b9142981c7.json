{"status":"1","message":"OK","result":[{"SourceCode":"//        .__           .__  .__                    __         .__        \r\n//   _____|  |__   ____ |  | |  |     _____ _____ _/  |________|__|__  ___\r\n//  /  ___/  |  \\_/ __ \\|  | |  |    /     \\\\__  \\\\   __\\_  __ \\  \\  \\/  /\r\n//  \\___ \\|   Y  \\  ___/|  |_|  |__ |  Y Y  \\/ __ \\|  |  |  | \\/  |>    < \r\n// /____  >___|  /\\___  >____/____/ |__|_|  (____  /__|  |__|  |__/__/\\_ \\\r\n//      \\/     \\/     \\/                  \\/     \\/                     \\/\r\n//\r\n//  Shell Matrix https://shell.org\r\n//\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface Matrix {\r\n    function ids(address _user) external view returns (uint);\r\n\r\n    function getUserWallet(uint _userID) external view returns (address);\r\n\r\n    function getReferrerID(uint _userID) external view returns (uint);\r\n\r\n    function getReferrerWallet(uint _userID) external view returns (address);\r\n\r\n    function getUserContribution(uint _userID) external view returns (uint);\r\n    function getUserX3Level(uint _userID) external view returns (uint8);\r\n\r\n    function getUserX6Level(uint _userID) external view returns (uint8);\r\n\r\n    function getUserX3Matrix(uint _userID, uint8 _level) external view returns (uint, uint, uint, uint, bool);\r\n\r\n    function getUserX6Matrix(uint _userID, uint8 _level) external view returns (uint, uint, uint, uint, bool);\r\n\r\n    function getUserX3Partners(uint _userID, uint8 _level) external view returns (uint[] memory);\r\n\r\n    function getUserX6Partners(uint _userID, uint8 _level) external view returns (uint[] memory, uint[] memory, uint[] memory);\r\n}\r\n\r\ninterface USDT {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external;\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract MatrixBase is Context {\r\n    struct X3 {\r\n        uint uplineID;\r\n        uint[] partners;\r\n        uint reinvestCount;\r\n        uint missed;\r\n        uint totalPartners;\r\n        bool active;\r\n    }\r\n\r\n    struct X6 {\r\n        uint uplineID;\r\n        uint[] firstLevelPartners;\r\n        uint[] secondLevelPartners;\r\n        uint[] thirdLevelPartners;\r\n        uint reinvestCount;\r\n        uint missed;\r\n        uint totalPartners;\r\n        bool active;\r\n    }\r\n\r\n    struct User {\r\n        uint id;\r\n        uint referrerId;\r\n        uint contribution;\r\n        uint earned;\r\n        address wallet;\r\n\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n\r\n    USDT public usdt;\r\n    Matrix public oldMatrix;\r\n    address public owner;\r\n    uint public totalUser;\r\n    uint public totalEarned;\r\n    uint8 public MAX_LEVEL;\r\n    bool public isOpen;\r\n\r\n    mapping(uint => User) public users;\r\n    mapping(address => uint) public ids;\r\n    mapping(uint8 => uint) public levelPrices;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, uint caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewPartner(address indexed referrer, uint userID, uint8 matrix, uint8 level, uint8 place);\r\n    event MissPartner(address indexed referrer, uint userID, uint8 matrix, uint8 level);\r\n    event SendDividends(address indexed from, address indexed to, uint payer, uint8 matrix, uint8 level);\r\n\r\n    function isRegistered(address _user) public view returns (bool) {\r\n        return (ids[_user] != 0);\r\n    }\r\n\r\n    function isValidID(uint _userID) public view returns (bool) {\r\n        return (users[_userID].wallet != address(0) && users[_userID].id > 0);\r\n    }\r\n\r\n    function getUserWallet(uint _userID) public view returns (address) {\r\n        return (users[_userID].wallet);\r\n    }\r\n\r\n    function getReferrerID(uint _userID) public view returns (uint) {\r\n        return (users[_userID].referrerId);\r\n    }\r\n\r\n    function getReferrerWallet(uint _userID) public view returns (address) {\r\n        uint _referrerId = getReferrerID(_userID);\r\n        return (getUserWallet(_referrerId));\r\n    }\r\n\r\n    function getUserContribution(uint _userID) public view returns (uint) {\r\n        return (users[_userID].contribution);\r\n    }\r\n\r\n    function getUserX3Level(uint _userID) public view returns (uint8) {\r\n        uint8 X3Lv = 0;\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            if (users[_userID].x3Matrix[i].active) {\r\n                X3Lv = i;\r\n            }\r\n        }\r\n        return (X3Lv);\r\n    }\r\n\r\n    function getUserX6Level(uint _userID) public view returns (uint8) {\r\n        uint8 X6Lv = 0;\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            if (users[_userID].x6Matrix[i].active) {\r\n                X6Lv = i;\r\n            }\r\n        }\r\n        return (X6Lv);\r\n    }\r\n\r\n    function getUserX3Matrix(uint _userID, uint8 _level) public view returns (uint, uint, uint, uint, bool) {\r\n        uint uplineID = users[_userID].x3Matrix[_level].uplineID;\r\n        uint reinvestCount = users[_userID].x3Matrix[_level].reinvestCount;\r\n        uint missed = users[_userID].x3Matrix[_level].missed;\r\n        uint totalPartners = users[_userID].x3Matrix[_level].totalPartners;\r\n        bool active = users[_userID].x3Matrix[_level].active;\r\n        return (uplineID, reinvestCount, missed, totalPartners, active);\r\n    }\r\n\r\n    function getUserX6Matrix(uint _userID, uint8 _level) public view returns (uint, uint, uint, uint, bool) {\r\n        uint uplineID = users[_userID].x6Matrix[_level].uplineID;\r\n        uint reinvestCount = users[_userID].x6Matrix[_level].reinvestCount;\r\n        uint missed = users[_userID].x6Matrix[_level].missed;\r\n        uint totalPartners = users[_userID].x6Matrix[_level].totalPartners;\r\n        bool active = users[_userID].x6Matrix[_level].active;\r\n        return (uplineID, reinvestCount, missed, totalPartners, active);\r\n    }\r\n\r\n    function getUserX3Partners(uint _userID, uint8 _level) public view returns (uint[] memory) {\r\n        return (users[_userID].x3Matrix[_level].partners);\r\n    }\r\n\r\n    function getUserX6Partners(uint _userID, uint8 _level) public view returns (uint[] memory, uint[] memory, uint[] memory) {\r\n        return (\r\n            users[_userID].x6Matrix[_level].firstLevelPartners,\r\n            users[_userID].x6Matrix[_level].secondLevelPartners,\r\n            users[_userID].x6Matrix[_level].thirdLevelPartners\r\n        );\r\n    }\r\n}\r\n\r\ncontract ShellMatrix is MatrixBase {\r\n\r\n    constructor(address _owner, address _tether, address _oldMatrix, uint _hasEarned) public {\r\n        totalUser = 0;\r\n        MAX_LEVEL = 12;\r\n        totalEarned = _hasEarned;\r\n        owner = _owner;\r\n        usdt = USDT(_tether);\r\n        oldMatrix = Matrix(_oldMatrix);\r\n\r\n        levelPrices[1] = 10*1000000;\r\n        for (uint8 i = 2; i <= MAX_LEVEL; i++) {\r\n            levelPrices[i] = levelPrices[i-1] * 2;\r\n        }\r\n\r\n        _recoverUser(uint(1), uint(0));\r\n\r\n    }\r\n\r\n    function() external payable {\r\n      revert(\"Disable fallback.\");\r\n    }\r\n\r\n    function register(uint _referrerID) external {\r\n        require(isOpen, \"Shell Matrix is paused.\");\r\n        require(!isRegistered(_msgSender()), \"User is already registered.\");\r\n        require(isValidID(_referrerID), \"Referrer ID is invalid.\");\r\n        require(usdt.allowance(_msgSender(), address(this)) >= levelPrices[2], \"Registration fee exceeds USDT allowance!\");\r\n        _register(_msgSender(), _referrerID);\r\n    }\r\n\r\n    function pauseSwitch() external {\r\n        require(_msgSender() == owner, \"Not owner!\");\r\n        isOpen = !isOpen;\r\n    }\r\n\r\n    function recoverUser(uint _userID, uint _earned) external {\r\n        require(_msgSender() == owner, \"Not owner!\");\r\n        require(_userID > totalUser, \"User is already registered.\");\r\n        _recoverUser(_userID, _earned);\r\n    }\r\n\r\n    function _recoverUser(uint _userID, uint _earned) private {\r\n\r\n        address _wallet = oldMatrix.getUserWallet(_userID);\r\n        User memory user = User({\r\n            id: _userID,\r\n            referrerId: oldMatrix.getReferrerID(_userID),\r\n            contribution: oldMatrix.getUserContribution(_userID),\r\n            earned: _earned,\r\n            wallet: _wallet\r\n        });\r\n\r\n        users[_userID] = user;\r\n        ids[_wallet] = _userID;\r\n\r\n        _recoverUserX3Matrix(_userID);\r\n        _recoverUserX6Matrix(_userID);\r\n        _recoverUserPartners(_userID);\r\n\r\n        totalUser++;\r\n    }\r\n\r\n    function _recoverUserPartners(uint _userID) private {\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            users[_userID].x3Matrix[i].partners = oldMatrix.getUserX3Partners(_userID, i);\r\n\r\n            (users[_userID].x6Matrix[i].firstLevelPartners,\r\n            users[_userID].x6Matrix[i].secondLevelPartners,\r\n            users[_userID].x6Matrix[i].thirdLevelPartners) = oldMatrix.getUserX6Partners(_userID, i);\r\n        }\r\n    }\r\n\r\n    function _recoverUserX3Matrix(uint _userID) private {\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            (users[_userID].x3Matrix[i].uplineID,\r\n            ,\r\n            users[_userID].x3Matrix[i].missed,\r\n            users[_userID].x3Matrix[i].totalPartners,\r\n            users[_userID].x3Matrix[i].active) = oldMatrix.getUserX3Matrix(_userID, i);\r\n        }\r\n    }\r\n\r\n    function _recoverUserX6Matrix(uint _userID) private {\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            (users[_userID].x6Matrix[i].uplineID,\r\n            ,\r\n            users[_userID].x6Matrix[i].missed,\r\n            users[_userID].x6Matrix[i].totalPartners,\r\n            users[_userID].x6Matrix[i].active) = oldMatrix.getUserX6Matrix(_userID, i);\r\n        }\r\n    }\r\n\r\n    function upgrade(uint8 _matrix) external {\r\n        require(isRegistered(_msgSender()), \"User is not registered.\");\r\n        _upgrade(_matrix);\r\n    }\r\n\r\n    function _register(address _userAddress, uint _referrerID) private {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_userAddress)\r\n        }\r\n        require(size == 0, \"Cannot be a contract\");\r\n\r\n        uint _userID = totalUser+1;\r\n        address _referrerAddress = getUserWallet(_referrerID);\r\n\r\n        User memory user = User({\r\n            id: _userID,\r\n            referrerId: _referrerID,\r\n            contribution: uint(0),\r\n            earned: uint(0),\r\n            wallet: _userAddress\r\n        });\r\n\r\n        users[_userID] = user;\r\n        ids[_userAddress] = _userID;\r\n        totalUser++;\r\n\r\n        uint x3Upline = _getX3Upline(_userID, _referrerID, 1);\r\n        uint x6Upline = _getX6Upline(_userID, _referrerID, 1);\r\n        _placeUserToX3(_userID, x3Upline, 1);\r\n        _placeUserToX6(_userID, x6Upline, 1);\r\n\r\n        users[_userID].x3Matrix[1].active = true;\r\n        users[_userID].x6Matrix[1].active = true;\r\n\r\n        users[_referrerID].contribution += 2;\r\n\r\n        emit Registration(_userAddress, _referrerAddress, _userID, _referrerID);\r\n    }\r\n\r\n    function _upgrade(uint8 _matrix) private {\r\n        uint8 _level = MAX_LEVEL;\r\n        uint _userID = ids[_msgSender()];\r\n        if (_matrix==3) {\r\n            _level = getUserX3Level(_userID);\r\n        } else if (_matrix==6) {\r\n            _level = getUserX6Level(_userID);\r\n        } else {\r\n            revert(\"Something is wrong!\");\r\n        }\r\n        _level++;\r\n\r\n        require(_level>1 && _level<=MAX_LEVEL, \"Invalid level, can not upgrade!\");\r\n        require(usdt.allowance(_msgSender(), address(this)) >= levelPrices[_level], \"Upgrading fee exceeds USDT allowance!\");\r\n\r\n        if (_matrix==3) {\r\n            _upgradeX3(_userID, _level);\r\n        } else if (_matrix==6) {\r\n            _upgradeX6(_userID, _level);\r\n        } else {\r\n            revert(\"Something is wrong!\");\r\n        }\r\n\r\n    }\r\n\r\n    function _upgradeX3(uint _userID, uint8 _level) private {\r\n        uint _referrerID = users[_userID].referrerId;\r\n        uint _x3Upline = _getX3Upline(_userID, _referrerID, _level);\r\n        _placeUserToX3(_userID, _x3Upline, _level);\r\n        users[_referrerID].contribution += 2**uint(_level-1);\r\n    }\r\n\r\n    function _upgradeX6(uint _userID, uint8 _level) private {\r\n        uint _referrerID = users[_userID].referrerId;\r\n        uint _x6Upline = _getX6Upline(_userID, _referrerID, _level);\r\n        _placeUserToX6(_userID, _x6Upline, _level);\r\n        users[_referrerID].contribution += 2**uint(_level-1);\r\n    }\r\n\r\n    function _getX3Upline(uint _userID, uint _referrerID, uint8 _level) private returns(uint) {\r\n        uint _id = _referrerID;\r\n        while (true) {\r\n            if (users[_id].x3Matrix[_level].active) {\r\n                return _id;\r\n            } else {\r\n                users[_id].x3Matrix[_level].missed++;\r\n                address _addr = getUserWallet(_id);\r\n                emit MissPartner(_addr, _userID, 3, _level);\r\n                _id = users[_id].referrerId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getX6Upline(uint _userID, uint _referrerID, uint8 _level) private returns(uint) {\r\n        uint _id = _referrerID;\r\n        while (true) {\r\n            if (users[_id].x6Matrix[_level].active) {\r\n                return _id;\r\n            } else {\r\n                users[_id].x6Matrix[_level].missed++;\r\n                address _addr = getUserWallet(_id);\r\n                emit MissPartner(_addr, _userID, 6, _level);\r\n                _id = users[_id].referrerId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _placeUserToX3(uint _userID, uint _upline, uint8 _level) private {\r\n        if (users[_upline].x3Matrix[_level].partners.length < 2) {\r\n            users[_upline].x3Matrix[_level].partners.push(_userID);\r\n            emit NewPartner(users[_upline].wallet, _userID, 3, _level, uint8(users[_upline].x3Matrix[_level].partners.length));\r\n            users[_upline].x3Matrix[_level].totalPartners += 1;\r\n            _sendDividends(_userID, _upline, 3, _level);\r\n        } else {\r\n            users[_upline].x3Matrix[_level].partners = new uint[](0);\r\n            users[_upline].x3Matrix[_level].reinvestCount++;\r\n            uint _higher = users[_upline].x3Matrix[_level].uplineID;\r\n            address _higherAddr = users[_higher].wallet;\r\n            emit Reinvest(users[_upline].wallet, _higherAddr, _userID, 3, _level);\r\n            _sendDividends(_upline, _higher, 3, _level);\r\n        }\r\n\r\n        users[_userID].x3Matrix[_level].uplineID = _upline;\r\n        users[_userID].x3Matrix[_level].partners = new uint[](0);\r\n        users[_userID].x3Matrix[_level].reinvestCount = 0;\r\n        users[_userID].x3Matrix[_level].missed = 0;\r\n        users[_userID].x3Matrix[_level].totalPartners = 0;\r\n        users[_userID].x3Matrix[_level].active = true;\r\n    }\r\n\r\n    function _placeUserToX6(uint _userID, uint _upline, uint8 _level) private {\r\n        _placeToX6(_userID, _upline, _level);\r\n    }\r\n\r\n    function _placeToX6(uint _userID, uint _upline, uint8 _level) private {\r\n        uint _lenFirst = users[_upline].x6Matrix[_level].firstLevelPartners.length;\r\n        if (_lenFirst<2) {\r\n            // up - 1\r\n            users[_upline].x6Matrix[_level].firstLevelPartners.push(_userID);\r\n            emit NewPartner(users[_upline].wallet, _userID, 6, _level, uint8(_lenFirst));\r\n            users[_upline].x6Matrix[_level].totalPartners++;\r\n\r\n            uint _higher = users[_upline].x6Matrix[_level].uplineID;\r\n            if (_higher==0) {\r\n                _sendDividends(_upline, 1, 6, _level);\r\n                users[_userID].x6Matrix[_level].uplineID = _upline;\r\n                users[_userID].x6Matrix[_level].firstLevelPartners = new uint[](0);\r\n                users[_userID].x6Matrix[_level].secondLevelPartners = new uint[](0);\r\n                users[_userID].x6Matrix[_level].thirdLevelPartners = new uint[](0);\r\n                users[_userID].x6Matrix[_level].reinvestCount = 0;\r\n                users[_userID].x6Matrix[_level].missed = 0;\r\n                users[_userID].x6Matrix[_level].totalPartners = 0;\r\n                users[_userID].x6Matrix[_level].active = true;\r\n                return;\r\n            }\r\n            uint _lengHiSecond = users[_higher].x6Matrix[_level].secondLevelPartners.length;\r\n            uint _lengHiThird = users[_higher].x6Matrix[_level].thirdLevelPartners.length;\r\n\r\n            // higher - 2\r\n            if (users[_higher].x6Matrix[_level].firstLevelPartners[0] == _upline && _lengHiSecond<2) {\r\n                users[_higher].x6Matrix[_level].secondLevelPartners.push(_userID);\r\n                emit NewPartner(users[_higher].wallet, _userID, 6, _level, uint8(_lengHiSecond)+2);\r\n                users[_higher].x6Matrix[_level].totalPartners += 1;\r\n            } else if (users[_higher].x6Matrix[_level].firstLevelPartners[1] == _upline && _lengHiThird<2) {\r\n                users[_higher].x6Matrix[_level].thirdLevelPartners.push(_userID);\r\n                emit NewPartner(users[_higher].wallet, _userID, 6, _level, uint8(_lengHiThird)+4);\r\n                users[_higher].x6Matrix[_level].totalPartners += 1;\r\n            }\r\n\r\n            // reinvest\r\n            if (users[_higher].x6Matrix[_level].secondLevelPartners.length>=2 && users[_higher].x6Matrix[_level].thirdLevelPartners.length>=2) {\r\n                uint _highest = users[_higher].x6Matrix[_level].uplineID;\r\n                _highest = users[_highest].x6Matrix[_level].uplineID;\r\n\r\n                users[_higher].x6Matrix[_level].firstLevelPartners = new uint[](0);\r\n                users[_higher].x6Matrix[_level].secondLevelPartners = new uint[](0);\r\n                users[_higher].x6Matrix[_level].thirdLevelPartners = new uint[](0);\r\n                users[_higher].x6Matrix[_level].reinvestCount++;\r\n                emit Reinvest(users[_higher].wallet, users[_highest].wallet, _userID, 6, _level);\r\n                _sendDividends(_upline, _highest, 6, _level);\r\n            } else {\r\n                _sendDividends(_userID, _higher, 6, _level);\r\n            }\r\n        } else {\r\n            uint _lengSecond = users[_upline].x6Matrix[_level].secondLevelPartners.length;\r\n            uint _lengThird = users[_upline].x6Matrix[_level].thirdLevelPartners.length;\r\n            if (_lengSecond<2) {\r\n                _placeUserToX6(_userID, users[_upline].x6Matrix[_level].firstLevelPartners[0], _level);\r\n            } else if (_lengThird<2) {\r\n                _placeUserToX6(_userID, users[_upline].x6Matrix[_level].firstLevelPartners[1], _level);\r\n            } else {\r\n                revert(\"Something is wrong!\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        users[_userID].x6Matrix[_level].uplineID = _upline;\r\n        users[_userID].x6Matrix[_level].firstLevelPartners = new uint[](0);\r\n        users[_userID].x6Matrix[_level].secondLevelPartners = new uint[](0);\r\n        users[_userID].x6Matrix[_level].thirdLevelPartners = new uint[](0);\r\n        users[_userID].x6Matrix[_level].reinvestCount = 0;\r\n        users[_userID].x6Matrix[_level].missed = 0;\r\n        users[_userID].x6Matrix[_level].totalPartners = 0;\r\n        users[_userID].x6Matrix[_level].active = true;\r\n    }\r\n\r\n    function _sendDividends(uint _from, uint _to, uint8 _matrix, uint8 _level)  private {\r\n        uint _amount = levelPrices[_level];\r\n        address _fromAddr = getUserWallet(_from);\r\n        address _toAddr = owner;\r\n        totalEarned += _amount;\r\n        if (_to>0) {\r\n            _toAddr = users[_to].wallet;\r\n            users[_to].earned += _amount;\r\n        }\r\n        usdt.transferFrom(_msgSender(), _toAddr, _amount);\r\n        emit SendDividends(_fromAddr, _toAddr, ids[_msgSender()], _matrix, _level);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tether\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldMatrix\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hasEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"caller\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getReferrerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getReferrerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getUserContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getUserWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getUserX3Level\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getUserX3Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getUserX3Partners\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"getUserX6Level\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getUserX6Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getUserX6Partners\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"isValidID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldMatrix\",\"outputs\":[{\"internalType\":\"contract Matrix\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"}],\"name\":\"recoverUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_matrix\",\"type\":\"uint8\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract USDT\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ShellMatrix","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000fe372ef30c6c726138f943b3462cc866c1f37aa000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000011d5ecd7548bd92b71b06dd97268ebe8b20521a20000000000000000000000000000000000000000000000000000000146a22a00","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://467adf5df4d7e820a034d6952001429863cb22f00cef3882973ebe99fbf49a83"}]}