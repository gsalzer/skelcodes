{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract EtherBoard{\r\n    struct Slot{\r\n        address payable ownerAddress;\r\n        string imageCID;\r\n        string caption;\r\n        string link;\r\n        uint currentPrice;\r\n        uint numOfSales;\r\n    }\r\n    mapping (uint => Slot) public slots;\r\n    address[] managers;\r\n    uint startingPrice;\r\n    uint soldBlocks;\r\n    uint numOfSlots;\r\n    uint constant COMMISION_PERCENT = 20;\r\n    uint constant INCREASE_PERCENT = 20;\r\n\r\n    constructor(uint givenPrice, address[] memory managerAdresses) payable {\r\n        for(uint i = 0; i < managerAdresses.length; i++){\r\n            managers.push(managerAdresses[i]);\r\n        }\r\n        startingPrice = givenPrice;\r\n        numOfSlots = 10;\r\n    }\r\n\r\n    function isManager(address userAddress) public view returns(bool) {\r\n        for(uint i = 0; i < managers.length; i++){\r\n            if(managers[i] == userAddress) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function processPayment(string memory caption, string memory link, string memory imageCID, uint index) public payable {\r\n        Slot storage slot = slots[index];\r\n        bool managerCheck = isManager(msg.sender);\r\n        // In order to avoid buying blocks that is already owned\r\n        require(msg.sender != address(0), \"Invalid address for operation\");\r\n        require(index >= 0 && index <= numOfSlots, \"Invalid slot index\");\r\n        require(managerCheck == false, \"Invalid operation for manager\");\r\n        bool firstSale = true;\r\n        if(slot.currentPrice > 0){\r\n            require(msg.value >= slot.currentPrice, \"Insufficient fund\");\r\n            firstSale = false;\r\n        } else {\r\n            require(msg.value >= startingPrice, \"Insufficient fund\");\r\n        }\r\n        uint currentPrice = msg.value;\r\n        uint newPrice = currentPrice + currentPrice * INCREASE_PERCENT / 100;\r\n        uint totalProfit = newPrice - currentPrice;\r\n        uint systemProfit = totalProfit * COMMISION_PERCENT / 100;\r\n        uint ownerBalance = currentPrice - systemProfit;\r\n        if(firstSale){\r\n            uint ownerShare = ownerBalance / managers.length;\r\n            for(uint i = 0; i < managers.length; i++){\r\n                payable(managers[i]).transfer(ownerShare);\r\n            }\r\n            soldBlocks += 1;\r\n            if(soldBlocks == numOfSlots){\r\n                numOfSlots += 1;\r\n            }\r\n        } else {\r\n            slot.ownerAddress.transfer(ownerBalance);\r\n        }\r\n        uint equalManagerShare = systemProfit / managers.length;\r\n        for(uint i = 0; i < managers.length; i++){\r\n            payable(managers[i]).transfer(equalManagerShare);\r\n        }\r\n        slot.ownerAddress = msg.sender;\r\n        slot.currentPrice = newPrice;\r\n        slot.imageCID = imageCID;\r\n        slot.caption = caption;\r\n        slot.link = link;\r\n        slot.numOfSales += 1;\r\n    }\r\n    \r\n    function getContractConstants() public view returns (uint, uint, uint, uint){\r\n        return (startingPrice, COMMISION_PERCENT, INCREASE_PERCENT, numOfSlots);\r\n    }\r\n\r\n    modifier managerAuth() {\r\n        bool managerCheck = isManager(msg.sender);\r\n        require(managerCheck == true, \"Only managers can use this operation\");\r\n        _;\r\n    }\r\n\r\n    function changeStartingPrice(uint newPrice) public payable managerAuth {\r\n        startingPrice = newPrice;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"givenPrice\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"managerAdresses\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeStartingPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractConstants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"processPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherBoard","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000094598a801cac28edb00499e221dcd4d3a6b4e0550000000000000000000000009b7377d6fb7deef92fb819a9528a300f98a240a1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c3c3cc55b5a9df8d3579275f8e654e77d0433582884d113fcd8848bd74aab77"}]}