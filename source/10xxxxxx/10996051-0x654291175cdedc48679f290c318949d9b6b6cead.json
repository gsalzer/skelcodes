{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with buidler v1.4.3 https://buidler.dev\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Pausable.sol@v3.1.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/f1dt-ethereum-contracts/contracts/game/TimeTrialEliteLeague.sol@v0.4.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n/// Minimal transfers-only ERC20 interface\r\ninterface IERC20Transfers {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nstruct ParticipantData {\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n    }\r\n\r\n/**\r\n * @title TimeTrialEliteLeague.\r\n * Contract which manages the participation status of players to the elite tiers.\r\n * Entering a tier requires the participant to escrow some ERC20 gaming token, which\r\n * is given back to the participant when they leave the tier.\r\n */\r\ncontract TimeTrialEliteLeague is Context, Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n    /**\r\n     * Event emitted when a player's particiation in a tier is updated.\r\n     * @param participant The address of the participant.\r\n     * @param tierId The tier identifier.\r\n     * @param deposit Amount escrowed in tier. 0 means non participant.\r\n     */\r\n    event ParticipationUpdated(address participant, bytes32 tierId, uint256 deposit);\r\n\r\n    IERC20Transfers public immutable gamingToken;\r\n    uint256 public immutable lockingPeriod;\r\n    mapping(bytes32 => uint256) public tiers; // tierId => minimumAmountToEscrow\r\n    mapping(address => mapping(bytes32 => ParticipantData)) public participants; // participant => tierId => ParticipantData\r\n    /**\r\n     * @dev Reverts if `gamingToken_` is the zero address.\r\n     * @dev Reverts if `lockingPeriod` is zero.\r\n     * @dev Reverts if `tierIds` and `amounts` have different lengths.\r\n     * @dev Reverts if any element of `amounts` is zero.\r\n     * @param gamingToken_ An ERC20-compliant contract address.\r\n     * @param lockingPeriod_ The period that a participant needs to wait for leaving a tier after entering it.\r\n     * @param tierIds The identifiers of each supported tier.\r\n     * @param amounts The amounts of gaming token to escrow for participation, for each one of the `tierIds`.\r\n     */\r\n    constructor(\r\n        IERC20Transfers gamingToken_,\r\n        uint256 lockingPeriod_,\r\n        bytes32[] memory tierIds,\r\n        uint256[] memory amounts\r\n    ) public {\r\n        require(gamingToken_ != IERC20Transfers(0), \"Leagues: zero address\");\r\n        require(lockingPeriod_ != 0, \"Leagues: zero lock\");\r\n        gamingToken = gamingToken_;\r\n        lockingPeriod = lockingPeriod_;\r\n\r\n        uint256 length = tierIds.length;\r\n        require(length == amounts.length, \"Leagues: inconsistent arrays\");\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            uint256 amount = amounts[i];\r\n            require(amount != 0, \"Leagues: zero amount\");\r\n            tiers[tierIds[i]] = amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates amount staked for participant in tier\r\n     * @dev Reverts if `tierId` does not exist.  \r\n     * @dev Reverts if user is not in tier.     \r\n     * @dev Emits a ParticipationUpdated event.\r\n     * @dev An amount of ERC20 `gamingToken` is transferred from the sender to this contract.\r\n     * @param tierId The identifier of the tier to increase the deposit for.\r\n     * @param amount The amount to deposit.\r\n     */\r\n    function increaseDeposit(bytes32 tierId, uint256 amount) whenNotPaused public {\r\n        address sender = _msgSender();\r\n        require(tiers[tierId] != 0, \"Leagues: tier not found\");\r\n        ParticipantData memory pd = participants[sender][tierId];\r\n        require(pd.timestamp != 0, \"Leagues: non participant\");\r\n        uint256 newAmount = amount.add(pd.amount);\r\n        participants[sender][tierId] = ParticipantData(block.timestamp,newAmount);\r\n        require(\r\n            gamingToken.transferFrom(sender, address(this), amount),\r\n            \"Leagues: transfer in failed\"\r\n        );\r\n        emit ParticipationUpdated(sender, tierId, newAmount);\r\n    }\r\n\r\n    /**\r\n     * Enables the participation of a player in a tier. Requires the escrowing of an amount of gaming token.\r\n     * @dev Reverts if `tierId` does not exist.\r\n     * @dev Reverts if 'deposit' is less than minimumAmountToEscrow\r\n     * @dev Reverts if the sender is already participant in the tier.\r\n     * @dev Emits a ParticipationUpdated event.\r\n     * @dev An amount of ERC20 `gamingToken` is transferred from the sender to this contract.\r\n     * @param tierId The identifier of the tier to enter.\r\n     * @param deposit The amount to deposit.\r\n     */\r\n    function enterTier(bytes32 tierId, uint256 deposit) whenNotPaused public {\r\n        address sender = _msgSender();\r\n        uint256 minDeposit = tiers[tierId];\r\n        require(minDeposit != 0, \"Leagues: tier not found\");\r\n        require(minDeposit <= deposit, \"Leagues: insufficient amount\");\r\n        require(participants[sender][tierId].timestamp == 0, \"Leagues: already participant\");\r\n        participants[sender][tierId] = ParticipantData(block.timestamp,deposit);\r\n        require(\r\n            gamingToken.transferFrom(sender, address(this), deposit),\r\n            \"Leagues: transfer in failed\"\r\n        );\r\n        emit ParticipationUpdated(sender, tierId, deposit);\r\n    }\r\n\r\n    /**\r\n     * Disables the participation of a player in a tier. Releases the amount of gaming token escrowed for this tier.\r\n     * @dev Reverts if the sender is not a participant in the tier.\r\n     * @dev Reverts if the tier participation of the sender is still time-locked.\r\n     * @dev Emits a ParticipationUpdated event.\r\n     * @dev An amount of ERC20 `gamingToken` is transferred from this contract to the sender.\r\n     * @param tierId The identifier of the tier to exit.\r\n     */\r\n    function exitTier(bytes32 tierId) public {\r\n        address sender = _msgSender();\r\n        ParticipantData memory pd = participants[sender][tierId];\r\n        require(pd.timestamp != 0, \"Leagues: non-participant\");\r\n        \r\n        require(block.timestamp - pd.timestamp > lockingPeriod, \"Leagues: time-locked\");\r\n        participants[sender][tierId] = ParticipantData(0,0);\r\n        emit ParticipationUpdated(sender, tierId, 0);\r\n        require(\r\n            gamingToken.transfer(sender, pd.amount),\r\n            \"Leagues: transfer out failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the partricipation status of several tiers for a participant.\r\n     * @param participant The participant to check the status of.\r\n     * @param tierIds The tier identifiers to check.\r\n     * @return timestamps The enter timestamp for each of the the `tierIds`. Zero values mean non-participant.\r\n     */\r\n    function participantStatus(address participant, bytes32[] calldata tierIds)\r\n        external\r\n        view\r\n        returns (uint256[] memory timestamps)\r\n    {\r\n        uint256 length = tierIds.length;\r\n        timestamps = new uint256[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            timestamps[i] = participants[participant][tierIds[i]].timestamp;\r\n        }\r\n    }\r\n\r\n     /**\r\n     * Pauses the deposit operations.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if the contract is paused already.\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Unpauses the deposit operations.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if the contract is not paused.\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20Transfers\",\"name\":\"gamingToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"tierIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tierId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"ParticipationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tierId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"enterTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tierId\",\"type\":\"bytes32\"}],\"name\":\"exitTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Transfers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tierId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"tierIds\",\"type\":\"bytes32[]\"}],\"name\":\"participantStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimeTrialEliteLeague","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000557b933a7c2c45672b610f8954a3deb39a51a8cad02c7e14af6800000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000021e19e0c9bab2400000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af051ceda58e40b700c3fe5823d12e019e930f4af7e7adf89ad9948a9e7087ad"}]}