{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n * ██╗  ██╗███████╗████████╗██╗  ██╗\r\n * ╚██╗██╔╝██╔════╝╚══██╔══╝██║  ██║\r\n *  ╚███╔╝ █████╗     ██║   ███████║\r\n *  ██╔██╗ ██╔══╝     ██║   ██╔══██║\r\n * ██╔╝ ██╗███████╗   ██║   ██║  ██║\r\n * ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝\r\n * \r\n *    An Ethereum pegged \r\n * base-down, burn-up currency. \r\n *                    \r\n *  https://xEth.finance\r\n *                              \r\n * \r\n**/\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event TransferOwnership(address _from, address _to);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        emit TransferOwnership(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\ncontract XplosiveEthereum is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event Rebase(uint256 indexed epoch, uint256 scalingFactor);\r\n    event NewRebaser(address oldRebaser, address newRebaser);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    string public name     = \"Xplosive Ethereum\";\r\n    string public symbol   = \"xETH\";\r\n    uint8  public decimals = 18;\r\n    \r\n    address public rebaser;\r\n    \r\n    address public rewardAddress;\r\n\r\n    /**\r\n     * @notice Internal decimals used to handle scaling factor\r\n     */\r\n    uint256 public constant internalDecimals = 10**24;\r\n\r\n    /**\r\n     * @notice Used for percentage maths\r\n     */\r\n    uint256 public constant BASE = 10**18;\r\n\r\n    /**\r\n     * @notice Scaling factor that adjusts everyone's balances\r\n     */\r\n    uint256 public xETHScalingFactor  = BASE;\r\n\r\n    mapping (address => uint256) internal _xETHBalances;\r\n    mapping (address => mapping (address => uint256)) internal _allowedFragments;\r\n    \r\n    \r\n    mapping(address => bool) public whitelistFrom;\r\n    mapping(address => bool) public whitelistTo;\r\n    mapping(address => bool) public whitelistRebase;\r\n    \r\n    \r\n    address public noRebaseAddress;\r\n    \r\n    uint256 initSupply = 0;\r\n    uint256 _totalSupply = 0;\r\n    uint16 public SELL_FEE = 33;\r\n    uint16 public TX_FEE = 50;\r\n    \r\n    event WhitelistFrom(address _addr, bool _whitelisted);\r\n    event WhitelistTo(address _addr, bool _whitelisted);\r\n    event WhitelistRebase(address _addr, bool _whitelisted);\r\n    \r\n     constructor(\r\n        uint256 initialSupply,\r\n        address initialSupplyAddr\r\n        \r\n        ) public {\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), msg.sender);\r\n        _mint(initialSupplyAddr,initialSupply);\r\n        \r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function getSellBurn(uint256 value) public view returns (uint256)  {\r\n        uint256 nPercent = value.divRound(SELL_FEE);\r\n        return nPercent;\r\n    }\r\n    function getTxBurn(uint256 value) public view returns (uint256)  {\r\n        uint256 nPercent = value.divRound(TX_FEE);\r\n        return nPercent;\r\n    }\r\n    \r\n    function _isWhitelisted(address _from, address _to) internal view returns (bool) {\r\n        return whitelistFrom[_from]||whitelistTo[_to];\r\n    }\r\n    function _isRebaseWhitelisted(address _addr) internal view returns (bool) {\r\n        return whitelistRebase[_addr];\r\n    }\r\n\r\n    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\r\n        emit WhitelistTo(_addr, _whitelisted);\r\n        whitelistTo[_addr] = _whitelisted;\r\n    }\r\n    \r\n    function setTxFee(uint16 fee) external onlyRebaser {\r\n        TX_FEE = fee;\r\n    }\r\n    \r\n    function setSellFee(uint16 fee) external onlyRebaser {\r\n        SELL_FEE = fee;\r\n    }\r\n    \r\n    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\r\n        emit WhitelistFrom(_addr, _whitelisted);\r\n        whitelistFrom[_addr] = _whitelisted;\r\n    }\r\n      \r\n    function setWhitelistedRebase(address _addr, bool _whitelisted) external onlyOwner {\r\n        emit WhitelistRebase(_addr, _whitelisted);\r\n        whitelistRebase[_addr] = _whitelisted;\r\n    }\r\n    \r\n    function setNoRebaseAddress(address _addr) external onlyOwner {\r\n        noRebaseAddress = _addr;\r\n    }\r\n    \r\n    \r\n   \r\n\r\n    modifier onlyRebaser() {\r\n        require(msg.sender == rebaser);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    \r\n    /**\r\n    * @notice Computes the current max scaling factor\r\n    */\r\n    function maxScalingFactor()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _maxScalingFactor();\r\n    }\r\n\r\n    function _maxScalingFactor()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // scaling factor can only go up to 2**256-1 = initSupply * xETHScalingFactor\r\n        // this is used to check if xETHScalingFactor will be too high to compute balances when rebasing.\r\n        return uint256(-1) / initSupply;\r\n    }\r\n\r\n   \r\n    function _mint(address to, uint256 amount)\r\n        internal\r\n    {\r\n      // increase totalSupply\r\n      _totalSupply = _totalSupply.add(amount);\r\n\r\n      // get underlying value\r\n      uint256 xETHValue = amount.mul(internalDecimals).div(xETHScalingFactor);\r\n\r\n      // increase initSupply\r\n      initSupply = initSupply.add(xETHValue);\r\n\r\n      // make sure the mint didnt push maxScalingFactor too low\r\n      require(xETHScalingFactor <= _maxScalingFactor(), \"max scaling factor too low\");\r\n\r\n      // add balance\r\n      _xETHBalances[to] = _xETHBalances[to].add(xETHValue);\r\n      \r\n      emit Transfer(address(0),to,amount);\r\n\r\n     \r\n    }\r\n    \r\n   \r\n\r\n    /* - ERC20 functionality - */\r\n\r\n    /**\r\n    * @dev Transfer tokens to a specified address.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    * @return True on success, false otherwise.\r\n    */\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        // underlying balance is stored in xETH, so divide by current scaling factor\r\n\r\n        // note, this means as scaling factor grows, dust will be untransferrable.\r\n        // minimum transfer value == xETHScalingFactor / 1e24;\r\n        \r\n        // get amount in underlying\r\n        //from noRebaseWallet\r\n        if(_isRebaseWhitelisted(msg.sender)){\r\n            uint256 noReValue = value.mul(internalDecimals).div(BASE);\r\n            uint256 noReNextValue = noReValue.mul(BASE).div(xETHScalingFactor);\r\n            _xETHBalances[msg.sender] = _xETHBalances[msg.sender].sub(noReValue); //value==underlying\r\n            _xETHBalances[to] = _xETHBalances[to].add(noReNextValue);\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        else if(_isRebaseWhitelisted(to)){\r\n            uint256 fee = getSellBurn(value);\r\n            uint256 tokensToBurn = fee/2;\r\n            uint256 tokensForRewards = fee-tokensToBurn;\r\n            uint256 tokensToTransfer = value-fee;\r\n                \r\n            uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n            uint256 xETHValueKeep = tokensToTransfer.mul(internalDecimals).div(xETHScalingFactor);\r\n            uint256 xETHValueReward = tokensForRewards.mul(internalDecimals).div(xETHScalingFactor);\r\n            \r\n            \r\n            uint256 xETHNextValue = xETHValueKeep.mul(xETHScalingFactor).div(BASE);\r\n            \r\n            _totalSupply = _totalSupply-fee;\r\n            _xETHBalances[address(0)] = _xETHBalances[address(0)].add(fee/2);\r\n            _xETHBalances[msg.sender] = _xETHBalances[msg.sender].sub(xETHValue); \r\n            _xETHBalances[to] = _xETHBalances[to].add(xETHNextValue);\r\n            _xETHBalances[rewardAddress] = _xETHBalances[rewardAddress].add(xETHValueReward);\r\n            emit Transfer(msg.sender, to, tokensToTransfer);\r\n            emit Transfer(msg.sender, address(0), tokensToBurn);\r\n            emit Transfer(msg.sender, rewardAddress, tokensForRewards);\r\n        }\r\n        else{\r\n          if(!_isWhitelisted(msg.sender, to)){\r\n                uint256 fee = getTxBurn(value);\r\n                uint256 tokensToBurn = fee/2;\r\n                uint256 tokensForRewards = fee-tokensToBurn;\r\n                uint256 tokensToTransfer = value-fee;\r\n                    \r\n                uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n                uint256 xETHValueKeep = tokensToTransfer.mul(internalDecimals).div(xETHScalingFactor);\r\n                uint256 xETHValueReward = tokensForRewards.mul(internalDecimals).div(xETHScalingFactor);\r\n                \r\n                _totalSupply = _totalSupply-fee;\r\n                _xETHBalances[address(0)] = _xETHBalances[address(0)].add(fee/2);\r\n                _xETHBalances[msg.sender] = _xETHBalances[msg.sender].sub(xETHValue); \r\n                _xETHBalances[to] = _xETHBalances[to].add(xETHValueKeep);\r\n                _xETHBalances[rewardAddress] = _xETHBalances[rewardAddress].add(xETHValueReward);\r\n                emit Transfer(msg.sender, to, tokensToTransfer);\r\n                emit Transfer(msg.sender, address(0), tokensToBurn);\r\n                emit Transfer(msg.sender, rewardAddress, tokensForRewards);\r\n           }\r\n             else{\r\n                uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n               \r\n                _xETHBalances[msg.sender] = _xETHBalances[msg.sender].sub(xETHValue); \r\n                _xETHBalances[to] = _xETHBalances[to].add(xETHValue);\r\n                emit Transfer(msg.sender, to, xETHValue);\r\n             }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another.\r\n    * @param from The address you want to send tokens from.\r\n    * @param to The address you want to transfer to.\r\n    * @param value The amount of tokens to be transferred.\r\n    */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        // decrease allowance\r\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\r\n\r\n        if(_isRebaseWhitelisted(from)){\r\n            uint256 noReValue = value.mul(internalDecimals).div(BASE);\r\n            uint256 noReNextValue = noReValue.mul(BASE).div(xETHScalingFactor);\r\n            _xETHBalances[from] = _xETHBalances[from].sub(noReValue); //value==underlying\r\n            _xETHBalances[to] = _xETHBalances[to].add(noReNextValue);\r\n            emit Transfer(from, to, value);\r\n        }\r\n        else if(_isRebaseWhitelisted(to)){\r\n            uint256 fee = getSellBurn(value);\r\n            uint256 tokensForRewards = fee-(fee/2);\r\n            uint256 tokensToTransfer = value-fee;\r\n            \r\n            uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n            uint256 xETHValueKeep = tokensToTransfer.mul(internalDecimals).div(xETHScalingFactor);\r\n            uint256 xETHValueReward = tokensForRewards.mul(internalDecimals).div(xETHScalingFactor);\r\n            uint256 xETHNextValue = xETHValueKeep.mul(xETHScalingFactor).div(BASE);\r\n            \r\n            _totalSupply = _totalSupply-fee;\r\n            \r\n            _xETHBalances[from] = _xETHBalances[from].sub(xETHValue); \r\n            _xETHBalances[to] = _xETHBalances[to].add(xETHNextValue);\r\n            _xETHBalances[rewardAddress] = _xETHBalances[rewardAddress].add(xETHValueReward);\r\n            _xETHBalances[address(0)] = _xETHBalances[address(0)].add(fee/2);\r\n            emit Transfer(from, to, tokensToTransfer);\r\n            emit Transfer(from, address(0), fee/2);\r\n            emit Transfer(from, rewardAddress, tokensForRewards);\r\n        }\r\n        else{\r\n          if(!_isWhitelisted(from, to)){\r\n                uint256 fee = getTxBurn(value);\r\n                uint256 tokensToBurn = fee/2;\r\n                uint256 tokensForRewards = fee-tokensToBurn;\r\n                uint256 tokensToTransfer = value-fee;\r\n                    \r\n                uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n                uint256 xETHValueKeep = tokensToTransfer.mul(internalDecimals).div(xETHScalingFactor);\r\n                uint256 xETHValueReward = tokensForRewards.mul(internalDecimals).div(xETHScalingFactor);\r\n            \r\n                _totalSupply = _totalSupply-fee;\r\n                _xETHBalances[address(0)] = _xETHBalances[address(0)].add(fee/2);\r\n                _xETHBalances[from] = _xETHBalances[from].sub(xETHValue); \r\n                _xETHBalances[to] = _xETHBalances[to].add(xETHValueKeep);\r\n                _xETHBalances[rewardAddress] = _xETHBalances[rewardAddress].add(xETHValueReward);\r\n                emit Transfer(from, to, tokensToTransfer);\r\n                emit Transfer(from, address(0), tokensToBurn);\r\n                emit Transfer(from, rewardAddress, tokensForRewards);\r\n           }\r\n             else{\r\n                uint256 xETHValue = value.mul(internalDecimals).div(xETHScalingFactor);\r\n               \r\n                _xETHBalances[from] = _xETHBalances[from].sub(xETHValue); \r\n                _xETHBalances[to] = _xETHBalances[to].add(xETHValue);\r\n                emit Transfer(from, to, xETHValue);\r\n                \r\n            \r\n             }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @param who The address to query.\r\n    * @return The balance of the specified address.\r\n    */\r\n    function balanceOf(address who)\r\n      external\r\n      view\r\n      returns (uint256)\r\n    {\r\n      if(_isRebaseWhitelisted(who)){\r\n        return _xETHBalances[who].mul(BASE).div(internalDecimals);\r\n      }\r\n      else{\r\n        return _xETHBalances[who].mul(xETHScalingFactor).div(internalDecimals);\r\n      }\r\n    }\r\n\r\n    /** @notice Currently returns the internal storage amount\r\n    * @param who The address to query.\r\n    * @return The underlying balance of the specified address.\r\n    */\r\n    function balanceOfUnderlying(address who)\r\n      external\r\n      view\r\n      returns (uint256)\r\n    {\r\n      return _xETHBalances[who];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\r\n     * @param owner_ The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n     * msg.sender. This method is included for ERC20 compatibility.\r\n     * increaseAllowance and decreaseAllowance should be used instead.\r\n     * Changing an allowance with this method brings the risk that someone may transfer both\r\n     * the old and the new allowance - if they are both greater than zero - if a transfer\r\n     * transaction is mined before the later approve() call is mined.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability\r\n     * described above.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] =\r\n            _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /* - Governance Functions - */\r\n\r\n    /** @notice sets the rebaser\r\n     * @param rebaser_ The address of the rebaser contract to use for authentication.\r\n     */\r\n    function _setRebaser(address rebaser_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address oldRebaser = rebaser;\r\n        rebaser = rebaser_;\r\n        emit NewRebaser(oldRebaser, rebaser_);\r\n    }\r\n    \r\n     function _setRewardAddress(address rewards_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rewardAddress = rewards_;\r\n      \r\n    }\r\n    \r\n    /**\r\n    * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\r\n    *\r\n    * @dev The supply adjustment equals (totalSupply * DeviationFromTargetRate) / rebaseLag\r\n    *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\r\n    *      and targetRate is CpiOracleRate / baseCpi\r\n    */\r\n    function rebase(\r\n        uint256 epoch,\r\n        uint256 indexDelta,\r\n        bool positive\r\n    )\r\n        external\r\n        onlyRebaser\r\n        returns (uint256)\r\n    {\r\n        if (indexDelta == 0 || !positive) {\r\n          emit Rebase(epoch, xETHScalingFactor);\r\n          return _totalSupply;\r\n        }\r\n\r\n            uint256 newScalingFactor = xETHScalingFactor.mul(BASE.add(indexDelta)).div(BASE);\r\n            if (newScalingFactor < _maxScalingFactor()) {\r\n                xETHScalingFactor = newScalingFactor;\r\n            } else {\r\n              xETHScalingFactor = _maxScalingFactor();\r\n            }\r\n        \r\n\r\n        _totalSupply = ((initSupply.sub(_xETHBalances[address(0)]).sub(_xETHBalances[noRebaseAddress]))\r\n                        .mul(xETHScalingFactor).div(internalDecimals))\r\n                        .add(_xETHBalances[noRebaseAddress].mul(BASE).div(internalDecimals));\r\n        emit Rebase(epoch, xETHScalingFactor);\r\n        return _totalSupply;\r\n    }\r\n}\r\n\r\n    \r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n \r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n \r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n  \r\n  function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        uint256 r = x / y;\r\n        if (x % y != 0) {\r\n            r = r + 1;\r\n        }\r\n\r\n        return r;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialSupplyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRebaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRebaser\",\"type\":\"address\"}],\"name\":\"NewRebaser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scalingFactor\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistTo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebaser_\",\"type\":\"address\"}],\"name\":\"_setRebaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewards_\",\"type\":\"address\"}],\"name\":\"_setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSellBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noRebaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setNoRebaseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xETHScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XplosiveEthereum","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000d1f0ecda3699e6135a4dc9c3807bab4aec23898b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://188ecb7c107fa187b5d904d73e652b4033760070e8687f6a457ce0ff9e8f68c0"}]}