{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Gather_coin.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n /**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event Mintai(address indexed owner, address indexed msgSender, uint256 msgSenderBalance, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  mapping(address=>uint256) mintPermissions;\r\n\r\n  uint256 public maxMintLimit;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(checkMintPermission(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function checkMintPermission(address _minter) private view returns (bool) {\r\n    if (_minter == owner) {\r\n      return true;\r\n    }\r\n\r\n    return mintPermissions[_minter] > 0;\r\n\r\n  }\r\n\r\n  function setMinter(address _minter, uint256 _amount) public onlyOwner {\r\n    require(_minter != owner);\r\n    mintPermissions[_minter] = _amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens. Delegates minting to internal function\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    return mintInternal(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mintInternal(address _to, uint256 _amount) internal returns (bool) {\r\n    if (msg.sender != owner) {\r\n      mintPermissions[msg.sender] = mintPermissions[msg.sender].sub(_amount);\r\n    }\r\n\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    require(totalSupply_ <= maxMintLimit);\r\n\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function mintAllowed(address _minter) public view returns (uint256) {\r\n    return mintPermissions[_minter];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract GatherToken is MintableToken {\r\n\r\n  string public constant name = \"Gather\";\r\n  string public constant symbol = \"GTH\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  bool public transferPaused = true;\r\n\r\n  constructor() public {\r\n    maxMintLimit = 400000000 * (10 ** uint(decimals));\r\n  }\r\n\r\n  function unpauseTransfer() public onlyOwner {\r\n    transferPaused = false;\r\n  }\r\n\r\n  function pauseTransfer() public onlyOwner {\r\n    transferPaused = true;\r\n  }\r\n\r\n  // The modifier checks, if address can send tokens or not at current contract state.\r\n  modifier tranferable() {\r\n    require(!transferPaused, \"Gath3r: Token transfer is pauses\");\r\n    _;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public tranferable returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public tranferable returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/VestingPool.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n\r\ncontract VestingPool is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being vested\r\n  GatherToken public token;\r\n\r\n  // Category name identifiers\r\n  bytes32 public privateCategory = keccak256(\"privateCategory\");\r\n  bytes32 public platformCategory = keccak256(\"platformCategory\");\r\n  bytes32 public seedCategory = keccak256(\"seedCategory\");\r\n  bytes32 public foundationCategory = keccak256(\"foundationCategory\");\r\n  bytes32 public marketingCategory = keccak256(\"marketingCategory\");\r\n  bytes32 public teamCategory = keccak256(\"teamCategory\");\r\n  bytes32 public advisorCategory = keccak256(\"advisorCategory\");\r\n\r\n  bool public isVestingStarted;\r\n  uint256 public vestingStartDate;\r\n\r\n  struct vestingInfo {\r\n    uint256 limit;\r\n    uint256 released;\r\n    uint256[] scheme;\r\n    mapping(address => bool) adminEmergencyFirstApprove;\r\n    mapping(address => bool) adminEmergencySecondApprove;\r\n    bool multiownedEmergencyFirstApprove;\r\n    bool multiownedEmergencySecondApprove;\r\n    uint256 initEmergencyDate;\r\n  }\r\n\r\n  mapping(bytes32 => vestingInfo) public vesting;\r\n\r\n  uint32 private constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n  uint32 private constant SECONDS_PER_MONTH = SECONDS_PER_DAY * 30;\r\n\r\n  address public admin1address;\r\n  address public admin2address;\r\n\r\n  event Withdraw(address _to, uint256 _amount);\r\n\r\n\r\n  constructor(address _token) public {\r\n    require(_token != address(0), \"Gath3r: Token address must be set for vesting\");\r\n\r\n    token = GatherToken(_token);\r\n\r\n    // Setup vesting data for each category\r\n    _initVestingData();\r\n  }\r\n\r\n  modifier isNotStarted() {\r\n    require(!isVestingStarted, \"Gath3r: Vesting is already started\");\r\n    _;\r\n  }\r\n\r\n  modifier isStarted() {\r\n    require(isVestingStarted, \"Gath3r: Vesting is not started yet\");\r\n    _;\r\n  }\r\n\r\n  modifier approvedByAdmins(bytes32 _category) {\r\n    require(vesting[_category].adminEmergencyFirstApprove[admin1address], \"Gath3r: Emergency transfer must be approved by Admin 1\");\r\n    require(vesting[_category].adminEmergencyFirstApprove[admin2address], \"Gath3r: Emergency transfer must be approved by Admin 2\");\r\n    require(vesting[_category].adminEmergencySecondApprove[admin1address], \"Gath3r: Emergency transfer must be approved twice by Admin 1\");\r\n    require(vesting[_category].adminEmergencySecondApprove[admin2address], \"Gath3r: Emergency transfer must be approved twice by Admin 2\");\r\n    _;\r\n  }\r\n\r\n  modifier approvedByMultiowned(bytes32 _category) {\r\n    require(vesting[_category].multiownedEmergencyFirstApprove, \"Gath3r: Emergency transfer must be approved by Multiowned\");\r\n    require(vesting[_category].multiownedEmergencySecondApprove, \"Gath3r: Emergency transfer must be approved twice by Multiowned\");\r\n    _;\r\n  }\r\n\r\n  function startVesting() public onlyOwner isNotStarted {\r\n    vestingStartDate = now;\r\n    isVestingStarted = true;\r\n  }\r\n\r\n  // Two Admins for emergency transfer\r\n  function addAdmin1address(address _admin) public onlyOwner {\r\n    require(_admin != address(0), \"Gath3r: Admin 1 address must be exist for emergency transfer\");\r\n    _resetAllAdminApprovals(_admin);\r\n    admin1address = _admin;\r\n  }\r\n\r\n  function addAdmin2address(address _admin) public onlyOwner {\r\n    require(_admin != address(0), \"Gath3r: Admin 2 address must be exist for emergency transfer\");\r\n    _resetAllAdminApprovals(_admin);\r\n    admin2address = _admin;\r\n  }\r\n\r\n  function multipleWithdraw(address[] _addresses, uint256[] _amounts, bytes32 _category) public onlyOwner isStarted {\r\n    require(_addresses.length == _amounts.length, \"Gath3r: Amount of adddresses must be equal withdrawal amounts length\");\r\n\r\n    uint256 withdrawalAmount;\r\n    uint256 availableAmount = getAvailableAmountFor(_category);\r\n    for(uint i = 0; i < _amounts.length; i++) {\r\n      withdrawalAmount = withdrawalAmount.add(_amounts[i]);\r\n    }\r\n    require(withdrawalAmount <= availableAmount, \"Gath3r: Withdraw amount more than available limit\");\r\n\r\n    for(i = 0; i < _addresses.length; i++) {\r\n      _withdraw(_addresses[i], _amounts[i], _category);\r\n    }\r\n  }\r\n\r\n  function getAvailableAmountFor(bytes32 _category) public view returns (uint256) {\r\n    uint256 currentMonth = now.sub(vestingStartDate).div(SECONDS_PER_MONTH);\r\n    uint256 totalUnlockedAmount;\r\n\r\n    for(uint8 i = 0; i <= currentMonth; i++ ) {\r\n      totalUnlockedAmount = totalUnlockedAmount.add(vesting[_category].scheme[i]);\r\n    }\r\n\r\n    return totalUnlockedAmount.sub(vesting[_category].released);\r\n  }\r\n\r\n  function firstAdminEmergencyApproveFor(bytes32 _category, address _admin) public onlyOwner {\r\n    require(_admin == admin1address || _admin == admin2address, \"Gath3r: Approve for emergency address must be from admin address\");\r\n    require(!vesting[_category].adminEmergencyFirstApprove[_admin]);\r\n\r\n    if (vesting[_category].initEmergencyDate == 0) {\r\n      vesting[_category].initEmergencyDate = now;\r\n    }\r\n    vesting[_category].adminEmergencyFirstApprove[_admin] = true;\r\n  }\r\n\r\n  function secondAdminEmergencyApproveFor(bytes32 _category, address _admin) public onlyOwner {\r\n    require(_admin == admin1address || _admin == admin2address, \"Gath3r: Approve for emergency address must be from admin address\");\r\n    require(vesting[_category].adminEmergencyFirstApprove[_admin]);\r\n    require(now.sub(vesting[_category].initEmergencyDate) > SECONDS_PER_DAY);\r\n\r\n    vesting[_category].adminEmergencySecondApprove[_admin] = true;\r\n  }\r\n\r\n  function firstMultiownedEmergencyApproveFor(bytes32 _category) public onlyOwner {\r\n    require(!vesting[_category].multiownedEmergencyFirstApprove);\r\n\r\n    if (vesting[_category].initEmergencyDate == 0) {\r\n      vesting[_category].initEmergencyDate = now;\r\n    }\r\n    vesting[_category].multiownedEmergencyFirstApprove = true;\r\n  }\r\n\r\n  function secondMultiownedEmergencyApproveFor(bytes32 _category) public onlyOwner {\r\n    require(vesting[_category].multiownedEmergencyFirstApprove, \"Gath3r: Second multiowned approval must be after fisrt multiowned approval\");\r\n    require(now.sub(vesting[_category].initEmergencyDate) > SECONDS_PER_DAY);\r\n\r\n    vesting[_category].multiownedEmergencySecondApprove = true;\r\n  }\r\n\r\n  function emergencyTransferFor(bytes32 _category, address _to) public onlyOwner approvedByAdmins(_category) approvedByMultiowned(_category) {\r\n    require(_to != address(0), \"Gath3r: Address must be transmit for emergency transfer\");\r\n    uint256 limit = vesting[_category].limit;\r\n    uint256 released = vesting[_category].released;\r\n    uint256 availableAmount = limit.sub(released);\r\n    _withdraw(_to, availableAmount, _category);\r\n  }\r\n\r\n  function _withdraw(address _beneficiary, uint256 _amount, bytes32 _category) internal {\r\n    token.transfer(_beneficiary, _amount);\r\n    vesting[_category].released = vesting[_category].released.add(_amount);\r\n\r\n    emit Withdraw(_beneficiary, _amount);\r\n  }\r\n\r\n  function _resetAllAdminApprovals(address _admin) internal {\r\n    vesting[seedCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[seedCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[foundationCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[foundationCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[marketingCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[marketingCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[teamCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[teamCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[advisorCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[advisorCategory].adminEmergencySecondApprove[_admin] = false;\r\n  }\r\n\r\n  function _amountWithPrecision(uint256 _amount) internal view returns (uint256) {\r\n    return _amount.mul(10 ** uint(token.decimals()));\r\n  }\r\n\r\n  // Vesting data for public sale category\r\n  function _initVestingData() internal {\r\n    // Vesting data for private sale category\r\n    vesting[privateCategory].limit = _expandToDecimals(20000000);\r\n    vesting[privateCategory].scheme = [\r\n      /* initial amount */\r\n      10500000,\r\n      /* M+1 M+2 */\r\n      10500000, 9000000\r\n    ];\r\n\r\n    // Vesting data for platform category\r\n    vesting[platformCategory].limit = _expandToDecimals(30000000);\r\n    vesting[platformCategory].scheme = [\r\n      /* initial amount */\r\n      30000000\r\n    ];\r\n\r\n    // Vesting data for seed category\r\n    vesting[seedCategory].limit = _expandToDecimals(22522500);\r\n    vesting[seedCategory].scheme = [\r\n      /* initial amount */\r\n      5630625,\r\n      /* M+1 M+2 M+3 M+4 M+5 */\r\n      3378375, 3378375, 3378375, 3378375, 3378375\r\n    ];\r\n\r\n    // Vesting data for foundation category\r\n    vesting[foundationCategory].limit = _expandToDecimals(193477500);\r\n    vesting[foundationCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 0, 0, 0, 6000000, 6000000, 6000000, 6000000, 6000000, 6000000, 6000000,\r\n      /* Y+2 */\r\n      4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000,\r\n      /* Y+3 */\r\n      4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000,\r\n      /* Y+4 */\r\n      3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000,\r\n      /* Y+5 */\r\n      19477500\r\n    ];\r\n\r\n    // Vesting data for marketing category\r\n    vesting[marketingCategory].limit = _expandToDecimals(50000000);\r\n    vesting[marketingCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000,\r\n      /* Y+2 */\r\n      1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000,\r\n      /* Y+3 */\r\n      1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000\r\n    ];\r\n\r\n    // Vesting data for team category\r\n    vesting[teamCategory].limit = _expandToDecimals(50000000);\r\n    vesting[teamCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 0, 0, 0, 7000000, 0, 0, 0, 7000000, 0, 0,\r\n      /* Y+2 */\r\n      0, 7000000, 0, 0, 0, 7000000, 0, 0, 7000000, 0, 0, 0,\r\n      /* Y+3 */\r\n      0, 7500000, 0, 0, 0, 7500000\r\n    ];\r\n\r\n    // Vesting data for advisor category\r\n    vesting[advisorCategory].limit = _expandToDecimals(24000000);\r\n    vesting[advisorCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 */\r\n      0, 0, 6000000, 6000000, 4500000, 4500000, 0, 1500000, 1500000\r\n    ];\r\n\r\n    _expandToDecimalsVestingScheme(privateCategory);\r\n    _expandToDecimalsVestingScheme(platformCategory);\r\n    _expandToDecimalsVestingScheme(seedCategory);\r\n    _expandToDecimalsVestingScheme(foundationCategory);\r\n    _expandToDecimalsVestingScheme(marketingCategory);\r\n    _expandToDecimalsVestingScheme(teamCategory);\r\n    _expandToDecimalsVestingScheme(advisorCategory);\r\n  }\r\n\r\n  function _expandToDecimalsVestingScheme(bytes32 _category) internal returns (uint256[]) {\r\n    for(uint i = 0; i < vesting[_category].scheme.length; i++) {\r\n      vesting[_category].scheme[i] = _expandToDecimals(vesting[_category].scheme[i]);\r\n    }\r\n  }\r\n\r\n  function _expandToDecimals(uint256 _amount) internal view returns (uint256) {\r\n    return _amount.mul(10 ** uint(18));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyTransferFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVestingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"firstMultiownedEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"firstAdminEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin2address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"getAvailableAmountFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"secondAdminEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"secondMultiownedEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vesting\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"released\",\"type\":\"uint256\"},{\"name\":\"multiownedEmergencyFirstApprove\",\"type\":\"bool\"},{\"name\":\"multiownedEmergencySecondApprove\",\"type\":\"bool\"},{\"name\":\"initEmergencyDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin1address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"multipleWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VestingPool","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c3771d47e2ab5a519e2917e61e23078d0c05ed7f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://34c7fb61fedfdf9ab0deb421c95579b98d7204a77532c6bf563ec9eec698dd34"}]}