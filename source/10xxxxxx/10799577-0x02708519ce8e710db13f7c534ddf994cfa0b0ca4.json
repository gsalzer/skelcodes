{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\ninterface ICurveDeposit {\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_uamount, bool donate_dust) external;\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns(uint);\n}\n\ninterface ICurve {\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\n    function remove_liquidity(uint amount, uint[4] calldata min_amounts) external;\n    function calc_token_amount(uint[4] calldata inAmounts, bool deposit) external view returns(uint);\n    function balances(int128 i) external view returns(uint);\n    function get_virtual_price() external view returns(uint);\n\n    // for tests\n    function mock_add_to_balance(uint[4] calldata amounts) external;\n}\n\ninterface IUtil {\n    function get_D(uint[4] calldata uamounts) external pure returns(uint);\n}\n\ninterface ICore {\n    function mint(uint dusdAmount, address account) external returns(uint usd);\n    function redeem(uint dusdAmount, address account) external returns(uint usd);\n    function rewardDistributionCheckpoint(bool shouldDistribute) external returns(uint periodIncome);\n\n    function lastPeriodIncome() external view returns(uint _totalAssets, uint _periodIncome, uint _adminFee);\n    function currentSystemState() external view returns (uint _totalAssets, uint _deficit, uint _deficitPercent);\n    function dusdToUsd(uint _dusd, bool fee) external view returns(uint usd);\n}\n\ninterface IPeak {\n    function updateFeed(uint[] calldata feed) external returns(uint portfolio);\n    function portfolioValueWithFeed(uint[] calldata feed) external view returns(uint);\n    function portfolioValue() external view returns(uint);\n}\n\ncontract Initializable {\n    bool initialized = false;\n\n    modifier notInitialized() {\n        require(!initialized, \"already initialized\");\n        initialized = true;\n        _;\n    }\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[20] private _gap;\n\n    function getStore(uint a) internal view returns(uint) {\n        require(a < 20, \"Not allowed\");\n        return _gap[a];\n    }\n\n    function setStore(uint a, uint val) internal {\n        require(a < 20, \"Not allowed\");\n        _gap[a] = val;\n    }\n}\n\ncontract OwnableProxy {\n    bytes32 constant OWNER_SLOT = keccak256(\"proxy.owner\");\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns(address _owner) {\n        bytes32 position = OWNER_SLOT;\n        assembly {\n            _owner := sload(position)\n        }\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"NOT_OWNER\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return owner() == msg.sender;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"OwnableProxy: new owner is the zero address\");\n        emit OwnershipTransferred(owner(), newOwner);\n        bytes32 position = OWNER_SLOT;\n        assembly {\n            sstore(position, newOwner)\n        }\n    }\n}\n\ninterface IGauge {\n    function deposit(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function claimable_tokens(address) external view returns (uint);\n    function claimable_reward(address) external view returns (uint);\n    function withdraw(uint) external;\n    function claim_rewards() external;\n}\n\ninterface IMintr {\n    function mint(address) external;\n}\n\ncontract CurveSusdPeak is OwnableProxy, Initializable, IPeak {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n    using Math for uint;\n\n    uint constant MAX = uint(-1);\n    uint constant N_COINS = 4;\n    string constant ERR_SLIPPAGE = \"They see you slippin\";\n\n    uint[N_COINS] ZEROES = [uint(0),uint(0),uint(0),uint(0)];\n    address[N_COINS] underlyingCoins;\n    uint[N_COINS] feed;\n\n    ICurveDeposit curveDeposit; // deposit contract\n    ICurve curve; // swap contract\n    IERC20 curveToken; // LP token contract\n    IUtil util;\n    IGauge gauge;\n    IMintr mintr;\n    ICore core;\n\n    function initialize(\n        ICurveDeposit _curveDeposit,\n        ICurve _curve,\n        IERC20 _curveToken,\n        ICore _core,\n        IUtil _util,\n        IGauge _gauge,\n        IMintr _mintr,\n        address[N_COINS] memory _underlyingCoins\n    )   public\n        notInitialized\n    {\n        curveDeposit = _curveDeposit;\n        curve = _curve;\n        curveToken = _curveToken;\n        core = _core;\n        util = _util;\n        gauge = _gauge;\n        mintr = _mintr;\n        underlyingCoins = _underlyingCoins;\n        replenishApprovals(MAX);\n    }\n\n    /**\n    * @dev Mint DUSD\n    * @param inAmounts Exact inAmounts in the same order as required by the curve pool\n    * @param minDusdAmount Minimum DUSD to mint, used for capping slippage\n    */\n    function mint(uint[N_COINS] calldata inAmounts, uint minDusdAmount)\n        external\n        returns (uint dusdAmount)\n    {\n        address[N_COINS] memory coins = underlyingCoins;\n        for (uint i = 0; i < N_COINS; i++) {\n            if (inAmounts[i] > 0) {\n                IERC20(coins[i]).safeTransferFrom(msg.sender, address(this), inAmounts[i]);\n            }\n        }\n        dusdAmount = _mint(inAmounts, minDusdAmount);\n        stake();\n    }\n\n    function _mint(uint[N_COINS] memory inAmounts, uint minDusdAmount)\n        internal\n        returns (uint dusdAmount)\n    {\n        uint _old = portfolioValue();\n        curve.add_liquidity(inAmounts, 0);\n        uint _new = portfolioValue();\n        dusdAmount = core.mint(_new.sub(_old), msg.sender);\n        require(dusdAmount >= minDusdAmount, ERR_SLIPPAGE);\n    }\n\n    /**\n    * @notice Mint DUSD with Curve LP tokens\n    * @param inAmount Exact amount of Curve LP tokens\n    * @param minDusdAmount Minimum DUSD to mint, used for capping slippage\n    */\n    function mintWithScrv(uint inAmount, uint minDusdAmount)\n        external\n        returns (uint dusdAmount)\n    {\n        curveToken.safeTransferFrom(msg.sender, address(this), inAmount);\n        dusdAmount = core.mint(sCrvToUsd(inAmount), msg.sender);\n        require(dusdAmount >= minDusdAmount, ERR_SLIPPAGE);\n        stake();\n    }\n\n    /**\n    * @dev Redeem DUSD\n    * @param dusdAmount Exact dusdAmount to burn\n    * @param minAmounts Min expected amounts to cap slippage\n    */\n    function redeem(uint dusdAmount, uint[N_COINS] calldata minAmounts)\n        external\n    {\n        uint sCrv = _secureFunding(core.redeem(dusdAmount, msg.sender));\n        curve.remove_liquidity(sCrv, ZEROES);\n        address[N_COINS] memory coins = underlyingCoins;\n        IERC20 coin;\n        uint toTransfer;\n        for (uint i = 0; i < N_COINS; i++) {\n            coin = IERC20(coins[i]);\n            toTransfer = coin.balanceOf(address(this));\n            require(toTransfer >= minAmounts[i], ERR_SLIPPAGE);\n            coin.safeTransfer(msg.sender, toTransfer);\n        }\n    }\n\n    function redeemInSingleCoin(uint dusdAmount, uint i, uint minOut)\n        external\n    {\n        uint sCrv = _secureFunding(core.redeem(dusdAmount, msg.sender));\n        curveDeposit.remove_liquidity_one_coin(sCrv, int128(i), minOut, false);\n        IERC20 coin = IERC20(underlyingCoins[i]);\n        uint toTransfer = coin.balanceOf(address(this));\n        require(toTransfer >= minOut, ERR_SLIPPAGE);\n        coin.safeTransfer(msg.sender, toTransfer);\n    }\n\n    function redeemInScrv(uint dusdAmount, uint minOut)\n        external\n    {\n        uint sCrv = _secureFunding(core.redeem(dusdAmount, msg.sender));\n        require(sCrv >= minOut, ERR_SLIPPAGE);\n        curveToken.safeTransfer(msg.sender, sCrv);\n    }\n\n    /**\n    * @notice Stake in sCrv Gauge\n    */\n    function stake() public {\n        _stake(curveToken.balanceOf(address(this)));\n    }\n\n    function updateFeed(uint[] calldata _feed)\n        external\n        returns(uint /* portfolio */)\n    {\n        require(msg.sender == address(core), \"ERR_NOT_AUTH\");\n        require(_feed.length == N_COINS, \"ERR_INVALID_UPDATE\");\n        feed = _processFeed(_feed);\n        return portfolioValue();\n    }\n\n    // thank you Andre :)\n    function harvest(bool shouldClaim, uint minDusdAmount) external onlyOwner returns(uint) {\n        if (shouldClaim) {\n            claimRewards();\n        }\n        address uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        address[] memory path = new address[](3);\n        path[1] = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // weth\n\n        address __crv = address(0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433);\n        IERC20 crv = IERC20(__crv);\n        uint _crv = crv.balanceOf(address(this));\n        uint _usdt;\n        if (_crv > 0) {\n            crv.safeApprove(uni, 0);\n            crv.safeApprove(uni, _crv);\n            path[0] = __crv;\n            address __usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n            path[2] = __usdt;\n            Uni(uni).swapExactTokensForTokens(_crv, uint(0), path, address(this), now.add(1800));\n            _usdt = IERC20(__usdt).balanceOf(address(this));\n            return _mint([0,0,_usdt,0], minDusdAmount);\n        }\n        return 0;\n    }\n\n    function getRewards(address destination) external onlyOwner {\n        claimRewards();\n        IERC20 crv = IERC20(0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433);\n        crv.safeTransfer(destination, crv.balanceOf(address(this)));\n    }\n\n    function claimRewards() public {\n        mintr.mint(address(gauge));\n    }\n\n    function replenishApprovals(uint value) public {\n        curveToken.safeIncreaseAllowance(address(curveDeposit), value);\n        curveToken.safeIncreaseAllowance(address(gauge), value);\n        for (uint i = 0; i < N_COINS; i++) {\n            IERC20(underlyingCoins[i]).safeIncreaseAllowance(address(curve), value);\n        }\n    }\n\n    /* ##### View Functions ##### */\n\n    function calcMint(uint[N_COINS] memory inAmounts)\n        public view\n        returns (uint dusdAmount)\n    {\n        return sCrvToUsd(curve.calc_token_amount(inAmounts, true /* deposit */));\n    }\n\n    function calcMintWithScrv(uint inAmount)\n        public view\n        returns (uint dusdAmount)\n    {\n        return sCrvToUsd(inAmount);\n    }\n\n    function calcRedeem(uint dusdAmount)\n        public view\n        returns(uint[N_COINS] memory amounts)\n    {\n        uint usd = core.dusdToUsd(dusdAmount, true);\n        uint exchangeRate = sCrvToUsd(1e18);\n        uint sCrv = usd.mul(1e18).div(exchangeRate);\n        uint totalSupply = curveToken.totalSupply();\n        for(uint i = 0; i < N_COINS; i++) {\n            amounts[i] = curve.balances(int128(i)).mul(sCrv).div(totalSupply);\n        }\n    }\n\n    function calcRedeemWithScrv(uint dusdAmount)\n        public view\n        returns(uint amount)\n    {\n        uint usd = core.dusdToUsd(dusdAmount, true);\n        uint exchangeRate = sCrvToUsd(1e18);\n        amount = usd.mul(1e18).div(exchangeRate);\n    }\n\n    function calcRedeemInSingleCoin(uint dusdAmount, uint i)\n        public view\n        returns(uint amount)\n    {\n        uint sCrv = usdToScrv(core.dusdToUsd(dusdAmount, true));\n        amount = curveDeposit.calc_withdraw_one_coin(sCrv, int128(i));\n    }\n\n    function usdToScrv(uint usd) public view returns(uint sCrv) {\n        uint exchangeRate = sCrvToUsd(1e18);\n        if (exchangeRate > 0) {\n            return usd.mul(1e18).div(exchangeRate);\n        }\n    }\n\n    function portfolioValue() public view returns(uint) {\n        return sCrvToUsd(sCrvBalance());\n    }\n\n    function sCrvToUsd(uint sCrvBal) public view returns(uint) {\n        return _sCrvToUsd(sCrvBal, feed);\n    }\n\n    function portfolioValueWithFeed(uint[] calldata _feed) external view returns(uint) {\n        return _sCrvToUsd(sCrvBalance(), _processFeed(_feed));\n    }\n\n    function sCrvBalance() public view returns(uint) {\n        return curveToken.balanceOf(address(this))\n            .add(gauge.balanceOf(address(this)));\n    }\n\n    function vars() public view returns(\n        address _curveDeposit,\n        address _curve,\n        address _curveToken,\n        address _util,\n        address _gauge,\n        address _mintr,\n        address _core,\n        address[N_COINS] memory _underlyingCoins,\n        uint[N_COINS] memory _feed\n    ) {\n        return(\n            address(curveDeposit),\n            address(curve),\n            address(curveToken),\n            address(util),\n            address(gauge),\n            address(mintr),\n            address(core),\n            underlyingCoins,\n            feed\n        );\n    }\n\n    /* ##### Internal Functions ##### */\n\n    function _sCrvToUsd(uint sCrvBal, uint[N_COINS] memory _feed)\n        internal view\n        returns(uint)\n    {\n        uint sCrvTotalSupply = curveToken.totalSupply();\n        if (sCrvTotalSupply == 0 || sCrvBal == 0) {\n            return 0;\n        }\n        uint[N_COINS] memory balances;\n        for (uint i = 0; i < N_COINS; i++) {\n            balances[i] = curve.balances(int128(i)).mul(_feed[i]);\n            if (i == 0 || i == 3) {\n                balances[i] = balances[i].div(1e18);\n            } else {\n                balances[i] = balances[i].div(1e6);\n            }\n        }\n        // https://github.com/curvefi/curve-contract/blob/pool_susd_plain/vyper/stableswap.vy#L149\n        return util.get_D(balances).mul(sCrvBal).div(sCrvTotalSupply);\n    }\n\n    function _secureFunding(uint usd) internal returns(uint sCrv) {\n        sCrv = usdToScrv(usd).min(sCrvBalance()); // in an extreme scenario there might not be enough sCrv to redeem\n        gauge.withdraw(sCrv);\n    }\n\n    function _processFeed(uint[] memory _feed)\n        internal\n        pure\n        returns(uint[N_COINS] memory _processedFeed)\n    {\n        for (uint i = 0; i < N_COINS; i++) {\n            _processedFeed[i] = _feed[i].min(1e18);\n        }\n    }\n\n    function _stake(uint amount) internal {\n        if (amount > 0) {\n            gauge.deposit(amount);\n        }\n    }\n}\n\ninterface Uni {\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"inAmounts\",\"type\":\"uint256[4]\"}],\"name\":\"calcMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calcMintWithScrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeem\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcRedeemInSingleCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeemWithScrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldClaim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minDusdAmount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ICurveDeposit\",\"name\":\"_curveDeposit\",\"type\":\"address\"},{\"internalType\":\"contract ICurve\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_curveToken\",\"type\":\"address\"},{\"internalType\":\"contract ICore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IUtil\",\"name\":\"_util\",\"type\":\"address\"},{\"internalType\":\"contract IGauge\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"contract IMintr\",\"name\":\"_mintr\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_underlyingCoins\",\"type\":\"address[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"inAmounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minDusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDusdAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithScrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"portfolioValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feed\",\"type\":\"uint256[]\"}],\"name\":\"portfolioValueWithFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"minAmounts\",\"type\":\"uint256[4]\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeemInScrv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeemInSingleCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"replenishApprovals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sCrvBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sCrvBal\",\"type\":\"uint256\"}],\"name\":\"sCrvToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feed\",\"type\":\"uint256[]\"}],\"name\":\"updateFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"usdToScrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sCrv\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_curveDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_util\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_underlyingCoins\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_feed\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveSusdPeak","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}