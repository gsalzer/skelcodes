{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\common\\Base.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\core\\CoreInterface.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract CoreInterface {\r\n\r\n    /* Module manipulation events */\r\n\r\n    event ModuleAdded(string name, address indexed module);\r\n\r\n    event ModuleRemoved(string name, address indexed module);\r\n\r\n    event ModuleReplaced(string name, address indexed from, address indexed to);\r\n\r\n\r\n    /* Functions */\r\n\r\n    function set(string memory  _name, address _module, bool _constant) public;\r\n\r\n    function setMetadata(string memory _name, string  memory _description) public;\r\n\r\n    function remove(string memory _name) public;\r\n    \r\n    function contains(address _module)  public view returns (bool);\r\n\r\n    function size() public view returns (uint);\r\n\r\n    function isConstant(string memory _name) public view returns (bool);\r\n\r\n    function get(string memory _name)  public view returns (address);\r\n\r\n    function getName(address _module)  public view returns (string memory);\r\n\r\n    function first() public view returns (address);\r\n\r\n    function next(address _current)  public view returns (address);\r\n}\r\n\r\n// File: contracts\\utils\\AddressList.sol\r\n\r\npragma solidity ^0.5.12;\r\n/**\r\n * @dev Double linked list with address items\r\n */\r\nlibrary AddressList {\r\n\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    struct Data {\r\n        address head;\r\n        address tail;\r\n        uint    length;\r\n        mapping(address => bool)    isContain;\r\n        mapping(address => address) nextOf;\r\n        mapping(address => address) prevOf;\r\n    }\r\n\r\n    /**\r\n     * @dev Append element to end of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element\r\n     */\r\n    function append(Data storage _data, address _item) internal\r\n    {\r\n        append(_data, _item, _data.tail);\r\n    }\r\n\r\n    /**\r\n     * @dev Append element to end of element\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element\r\n     * @param _to is a item element before new\r\n     * @notice gas usage < 100000\r\n     */\r\n    function append(Data storage _data, address _item, address _to) internal {\r\n        // Unable to contain double element\r\n        require(!_data.isContain[_item], \"Unable to contain double element\");\r\n\r\n        // Empty list\r\n        if (_data.head == ZERO_ADDRESS) {\r\n            _data.head = _data.tail = _item;\r\n        } else {\r\n            require(_data.isContain[_to], \"Append target not contained\");\r\n\r\n            address  nextTo = _data.nextOf[_to];\r\n            if (nextTo != ZERO_ADDRESS) {\r\n                _data.prevOf[nextTo] = _item;\r\n            } else {\r\n                _data.tail = _item;\r\n            }\r\n\r\n            _data.nextOf[_to] = _item;\r\n            _data.prevOf[_item] = _to;\r\n            _data.nextOf[_item] = nextTo;\r\n        }\r\n        _data.isContain[_item] = true;\r\n        ++_data.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Prepend element to begin of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element\r\n     */\r\n    function prepend(Data storage _data, address _item) internal\r\n    {\r\n        prepend(_data, _item, _data.head);\r\n    }\r\n\r\n    /**\r\n     * @dev Prepend element to element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is a new list element\r\n     * @param _to is a item element before new\r\n     */\r\n    function prepend(Data storage _data, address _item, address _to) internal {\r\n        require(!_data.isContain[_item], \"Unable to contain double element\");\r\n\r\n        // Empty list\r\n        if (_data.head == ZERO_ADDRESS) {\r\n            _data.head = _data.tail = _item;\r\n        } else {\r\n            require(_data.isContain[_to], \"Preppend target is not contained\");\r\n\r\n            address  prevTo = _data.prevOf[_to];\r\n            if (prevTo != ZERO_ADDRESS) {\r\n                _data.nextOf[prevTo] = _item;\r\n            } else {\r\n                _data.head = _item;\r\n            }\r\n\r\n            _data.prevOf[_item] = prevTo;\r\n            _data.nextOf[_item] = _to;\r\n            _data.prevOf[_to] = _item;\r\n        }\r\n        _data.isContain[_item] = true;\r\n        ++_data.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove element from list\r\n     * @param _data is list storage ref\r\n     * @param _item is a removed list element\r\n     */\r\n    function remove(Data storage _data, address _item) internal {\r\n        require(_data.isContain[_item], \"Item is not contained\");\r\n\r\n        address  elemPrev = _data.prevOf[_item];\r\n        address  elemNext = _data.nextOf[_item];\r\n\r\n        if (elemPrev != ZERO_ADDRESS) {\r\n            _data.nextOf[elemPrev] = elemNext;\r\n        } else {\r\n            _data.head = elemNext;\r\n        }\r\n\r\n        if (elemNext != ZERO_ADDRESS) {\r\n            _data.prevOf[elemNext] = elemPrev;\r\n        } else {\r\n            _data.tail = elemPrev;\r\n        }\r\n\r\n        _data.isContain[_item] = false;\r\n        --_data.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Replace element on list\r\n     * @param _data is list storage ref\r\n     * @param _from is old element\r\n     * @param _to is a new element\r\n     */\r\n    function replace(Data storage _data, address _from, address _to) internal {\r\n\r\n        require(_data.isContain[_from], \"Old element not contained\");\r\n        require(!_data.isContain[_to], \"New element is already contained\");\r\n\r\n        address  elemPrev = _data.prevOf[_from];\r\n        address  elemNext = _data.nextOf[_from];\r\n\r\n        if (elemPrev != ZERO_ADDRESS) {\r\n            _data.nextOf[elemPrev] = _to;\r\n        } else {\r\n            _data.head = _to;\r\n        }\r\n\r\n        if (elemNext != ZERO_ADDRESS) {\r\n            _data.prevOf[elemNext] = _to;\r\n        } else {\r\n            _data.tail = _to;\r\n        }\r\n\r\n        _data.prevOf[_to] = elemPrev;\r\n        _data.nextOf[_to] = elemNext;\r\n        _data.isContain[_from] = false;\r\n        _data.isContain[_to] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Swap two elements of list\r\n     * @param _data is list storage ref\r\n     * @param _a is a first element\r\n     * @param _b is a second element\r\n     */\r\n    function swap(Data storage _data, address _a, address _b) internal {\r\n        require(_data.isContain[_a] && _data.isContain[_b], \"Can not swap element which is not contained\");\r\n\r\n        address prevA = _data.prevOf[_a];\r\n\r\n        remove(_data, _a);\r\n        replace(_data, _b, _a);\r\n\r\n        if (prevA == ZERO_ADDRESS) {\r\n            prepend(_data, _b);\r\n        } else if (prevA != _b) {\r\n            append(_data, _b, prevA);\r\n        } else {\r\n            append(_data, _b, _a);\r\n        }\r\n    }\r\n\r\n    function first(Data storage _data)  internal view returns (address)\r\n    { \r\n        return _data.head; \r\n    }\r\n\r\n    function last(Data storage _data)  internal view returns (address)\r\n    { \r\n        return _data.tail; \r\n    }\r\n\r\n    /**\r\n     * @dev Chec list for element\r\n     * @param _data is list storage ref\r\n     * @param _item is an element\r\n     * @return `true` when element in list\r\n     */\r\n    function contains(Data storage _data, address _item)  internal view returns (bool)\r\n    { \r\n        return _data.isContain[_item]; \r\n    }\r\n\r\n    /**\r\n     * @dev Next element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is current element of list\r\n     * @return next elemen of list\r\n     */\r\n    function next(Data storage _data, address _item)  internal view returns (address)\r\n    { \r\n        return _data.nextOf[_item]; \r\n    }\r\n\r\n    /**\r\n     * @dev Previous element of list\r\n     * @param _data is list storage ref\r\n     * @param _item is current element of list\r\n     * @return previous element of list\r\n     */\r\n    function prev(Data storage _data, address _item) internal view returns (address)\r\n    { \r\n        return _data.prevOf[_item]; \r\n    }\r\n}\r\n\r\n// File: contracts\\utils\\AddressMap.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @dev Iterable by index (string => address) mapping structure\r\n *      with reverse resolve and fast element remove\r\n */\r\nlibrary AddressMap {\r\n\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    struct Data {\r\n        mapping(bytes32 => address) valueOf;\r\n        mapping(address => string)  keyOf;\r\n        AddressList.Data            items;\r\n    }\r\n\r\n    using AddressList for AddressList.Data;\r\n\r\n    /**\r\n     * @dev Set element value for given key\r\n     * @param _data is an map storage ref\r\n     * @param _key is a item key\r\n     * @param _value is a item value\r\n     * @notice by design you can't set different keys with same value\r\n     */\r\n    function set(Data storage _data, string memory _key, address _value) internal {\r\n        address replaced = get(_data, _key);\r\n        if (replaced != ZERO_ADDRESS) {\r\n            _data.items.replace(replaced, _value);\r\n        } else {\r\n            _data.items.append(_value);\r\n        }\r\n        _data.valueOf[keccak256(abi.encodePacked(_key))] = _value;\r\n        _data.keyOf[_value] = _key;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove item from map by key\r\n     * @param _data is an map storage ref\r\n     * @param _key is and item key\r\n     */\r\n    function remove(Data storage _data, string memory _key) internal {\r\n        address  value = get(_data, _key);\r\n        _data.items.remove(value);\r\n        _data.valueOf[keccak256(abi.encodePacked(_key))] = ZERO_ADDRESS;\r\n        _data.keyOf[value] = \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Get size of map\r\n     * @return count of elements\r\n     */\r\n    function size(Data storage _data) internal view returns (uint)\r\n    { return _data.items.length; }\r\n\r\n    /**\r\n     * @dev Get element by name\r\n     * @param _data is an map storage ref\r\n     * @param _key is a item key\r\n     * @return item value\r\n     */\r\n    function get(Data storage _data, string memory _key) internal view returns (address)\r\n    { return _data.valueOf[keccak256(abi.encodePacked(_key))]; }\r\n\r\n    /** Get key of element\r\n     * @param _data is an map storage ref\r\n     * @param _item is a item\r\n     * @return item key\r\n     */\r\n    function getKey(Data storage _data, address _item) internal view returns (string memory)\r\n    { \r\n        return _data.keyOf[_item]; \r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\core\\Pool.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract Pool is Base, CoreInterface {\r\n\r\n    /* Short description */\r\n    string  public name;\r\n    string  public description;\r\n    address public founder;\r\n\r\n    /* Modules map */\r\n    AddressMap.Data modules;\r\n\r\n    using AddressList for AddressList.Data;\r\n    using AddressMap for AddressMap.Data;\r\n\r\n    /* Module constant mapping */\r\n    mapping(bytes32 => bool) public is_constant;\r\n\r\n    /**\r\n     * @dev Contract ABI storage\r\n     *      the contract interface contains source URI\r\n     */\r\n    mapping(address => string) public abiOf;\r\n    \r\n    function initialize() public initializer {\r\n        Base.initialize();\r\n        founder = _msgSender();\r\n    }\r\n\r\n    function setMetadata(string memory _name, string  memory _description) public onlyOwner {\r\n        name = _name;\r\n        description = _description;\r\n    }\r\n      \r\n    /**\r\n     * @dev Set new module for given name\r\n     * @param _name infrastructure node name\r\n     * @param _module infrastructure node address\r\n     * @param _constant have a `true` value when you create permanent name of module\r\n     */\r\n    function set(string memory _name, address _module, bool _constant) public onlyOwner {\r\n        \r\n        require(!isConstant(_name), \"Pool: module address can not be replaced\");\r\n\r\n        // Notify\r\n        if (modules.get(_name) != ZERO_ADDRESS)\r\n            emit ModuleReplaced(_name, modules.get(_name), _module);\r\n        else\r\n            emit ModuleAdded(_name, _module);\r\n \r\n        // Set module in the map\r\n        modules.set(_name, _module);\r\n\r\n        // Register constant flag \r\n        is_constant[keccak256(abi.encodePacked(_name))] = _constant;\r\n    }\r\n\r\n     /**\r\n     * @dev Remove module by name\r\n     * @param _name module name\r\n     */\r\n    function remove(string memory _name)  public onlyOwner {\r\n        require(!isConstant(_name), \"Pool: module can not be removed\");\r\n\r\n        // Notify\r\n        emit ModuleRemoved(_name, modules.get(_name));\r\n\r\n        // Remove module\r\n        modules.remove(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Fast module exist check\r\n     * @param _module is a module address\r\n     * @return `true` wnen core contains module\r\n     */\r\n    function contains(address _module) public view returns (bool)\r\n    {\r\n        return modules.items.contains(_module);\r\n    }\r\n\r\n    /**\r\n     * @dev Modules counter\r\n     * @return count of modules in core\r\n     */\r\n    function size() public view returns (uint)\r\n    {\r\n        return modules.size();\r\n    }\r\n\r\n    /**\r\n     * @dev Check for module have permanent name\r\n     * @param _name is a module name\r\n     * @return `true` when module have permanent name\r\n     */\r\n    function isConstant(string memory _name) public view returns (bool)\r\n    {\r\n        return is_constant[keccak256(abi.encodePacked(_name))];\r\n    }\r\n\r\n    /**\r\n     * @dev Get module by name\r\n     * @param _name is module name\r\n     * @return module address\r\n     */\r\n    function get(string memory _name) public view returns (address)\r\n    {\r\n        return modules.get(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Get module name by address\r\n     * @param _module is a module address\r\n     * @return module name\r\n     */\r\n    function getName(address _module) public view returns (string memory)\r\n    {\r\n        return modules.keyOf[_module];\r\n    }\r\n\r\n    /**\r\n     * @dev Get first module\r\n     * @return first address\r\n     */\r\n    function first() public view returns (address)\r\n    {\r\n        return modules.items.head;\r\n    }\r\n\r\n    /**\r\n     * @dev Get next module\r\n     * @param _current is an current address\r\n     * @return next address\r\n     */\r\n    function next(address _current) public view returns (address)\r\n    {\r\n        return modules.items.next(_current);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ModuleReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"abiOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"isConstant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"is_constant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_current\",\"type\":\"address\"}],\"name\":\"next\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_constant\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cf384283828b9f81e19e4d977e41f7e47f6f5db6af410ef381577ce33a9d06c8"}]}