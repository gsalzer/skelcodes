{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\ninterface IUniswapV2Pair {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    // prettier-ignore\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // prettier-ignore\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    // prettier-ignore\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\"\r\n    },\r\n    \"contracts/Steroids.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/apps-token-manager/contracts/TokenManager.sol\\\";\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\n\\n\\ncontract Steroids is AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    // prettier-ignore\\n    bytes32 public constant CHANGE_LOCK_TIME_ROLE = keccak256(\\\"CHANGE_LOCK_TIME_ROLE\\\");\\n    // prettier-ignore\\n    bytes32 public constant CHANGE_MAX_LOCKS_ROLE = keccak256(\\\"CHANGE_MAX_LOCKS_ROLE\\\");\\n    // prettier-ignore\\n    bytes32 public constant CHANGE_VAULT_ROLE = keccak256(\\\"CHANGE_VAULT_ROLE\\\");\\n    // prettier-ignore\\n    bytes32 public constant ADJUST_BALANCE_ROLE = keccak256(\\\"ADJUST_BALANCE_ROLE\\\");\\n\\n    uint64 public constant MAX_LOCKS_LIMIT = 20;\\n\\n    // prettier-ignore\\n    string private constant ERROR_ADDRESS_NOT_CONTRACT = \\\"STEROIDS_ADDRESS_NOT_CONTRACT\\\";\\n    // prettier-ignore\\n    string private constant ERROR_TOKEN_WRAP_REVERTED = \\\"STEROIDS_WRAP_REVERTED\\\";\\n    // prettier-ignore\\n    string private constant ERROR_INSUFFICENT_TOKENS = \\\"STEROIDS_INSUFFICENT_TOKENS\\\";\\n    // prettier-ignore\\n    string private constant ERROR_NOT_ENOUGH_UNWRAPPABLE_TOKENS = \\\"STEROIDS_NOT_ENOUGH_UNWRAPPABLE_TOKENS\\\";\\n    // prettier-ignore\\n    string private constant ERROR_TOKENS_NOT_APPROVED = \\\"STEROIDS_TOKENS_NOT_APPROVED\\\";\\n    // prettier-ignore\\n    string private constant ERROR_STAKE_ZERO_TOKENS = \\\"STEROIDS_STAKE_ZERO_TOKENS\\\";\\n    // prettier-ignore\\n    string private constant ERROR_LOCK_TIME_TOO_LOW = \\\"STEROIDS_LOCK_TIME_TOO_LOW\\\";\\n    // prettier-ignore\\n    string private constant ERROR_IMPOSSIBLE_TO_INSERT = \\\"STEROIDS_IMPOSSIBLE_TO_INSERT\\\";\\n    // prettier-ignore\\n    string private constant ERROR_MAX_LOCKS_TOO_HIGH = \\\"STEROIDS_MAX_LOCKS_TOO_HIGH\\\";\\n    // prettier-ignore\\n    string private constant ERROR_AMOUNT_TOO_LOW = \\\"STEROIDS_AMOUNT_TOO_LOW\\\";\\n\\n    struct Lock {\\n        uint64 lockDate;\\n        uint64 duration;\\n        uint256 uniV2PairAmount;\\n        uint256 wrappedTokenAmount;\\n    }\\n\\n    TokenManager public wrappedTokenManager;\\n    Vault public vault;\\n    IUniswapV2Pair public uniV2Pair;\\n\\n    uint64 public minLockTime;\\n    uint64 public maxLocks;\\n\\n    mapping(address => Lock[]) public addressStakeLocks;\\n    mapping(address => uint256) public addressUniV2PairBalances;\\n\\n    event Staked(\\n        address sender,\\n        address receiver,\\n        uint256 uniV2Amount,\\n        uint256 wrappedTokenAmount,\\n        uint64 duration,\\n        uint64 lockDate\\n    );\\n    event Unstaked(\\n        address receiver,\\n        uint256 uniV2Amount,\\n        uint256 wrappedTokenAmount\\n    );\\n    event LockTimeChanged(uint256 duration);\\n    event MaxLocksChanged(uint64 maxLocks);\\n    event VaultChanged(address vault);\\n    event StakedLockAdjusted(address owner, uint256 amount);\\n\\n    /**\\n     * @notice Initialize Steroids app contract\\n     * @param _tokenManager TokenManager address\\n     * @param _vault Vault address\\n     * @param _uniV2Pair Accepted token address\\n     * @param _minLockTime minimum number of seconds after which it's possible to unstake tokens\\n     * @param _maxLocks number of possible Lock for a given address\\n     */\\n    function initialize(\\n        address _tokenManager,\\n        address _vault,\\n        address _uniV2Pair,\\n        uint64 _minLockTime,\\n        uint64 _maxLocks\\n    ) external onlyInit {\\n        require(isContract(_tokenManager), ERROR_ADDRESS_NOT_CONTRACT);\\n        require(isContract(_uniV2Pair), ERROR_ADDRESS_NOT_CONTRACT);\\n        require(isContract(_vault), ERROR_ADDRESS_NOT_CONTRACT);\\n        require(_maxLocks <= MAX_LOCKS_LIMIT, ERROR_MAX_LOCKS_TOO_HIGH);\\n\\n        wrappedTokenManager = TokenManager(_tokenManager);\\n        vault = Vault(_vault);\\n        uniV2Pair = IUniswapV2Pair(_uniV2Pair);\\n        minLockTime = _minLockTime;\\n        maxLocks = _maxLocks;\\n\\n        initialized();\\n    }\\n\\n    /**\\n     * @notice Stake a given amount of uniV2Pair into wrappedTokenManager's token\\n     * @dev This function requires the MINT_ROLE permission on the TokenManager specified\\n     * @param _amount number of uniV2Pair tokens to stake\\n     * @param _duration lock time for this staking\\n     * @param _receiver address who will receive back once unstaked\\n     */\\n    function stake(\\n        uint256 _amount,\\n        uint64 _duration,\\n        address _receiver\\n    ) external returns (bool) {\\n        require(_duration >= minLockTime, ERROR_LOCK_TIME_TOO_LOW);\\n        require(_amount > 0, ERROR_AMOUNT_TOO_LOW);\\n        require(\\n            uniV2Pair.balanceOf(msg.sender) >= _amount,\\n            ERROR_INSUFFICENT_TOKENS\\n        );\\n        require(\\n            uniV2Pair.allowance(msg.sender, this) >= _amount,\\n            ERROR_TOKENS_NOT_APPROVED\\n        );\\n        require(\\n            uniV2Pair.transferFrom(msg.sender, address(vault), _amount),\\n            ERROR_TOKEN_WRAP_REVERTED\\n        );\\n\\n        uint256 uniswapV2PairTotalSupply = uniV2Pair.totalSupply();\\n        (uint256 uniswapV2PairReserve0, , ) = uniV2Pair.getReserves();\\n        uint256 wrappedTokenAmountToStake = _amount\\n            .mul(uniswapV2PairReserve0)\\n            .div(uniswapV2PairTotalSupply);\\n\\n        require(wrappedTokenAmountToStake > 0, ERROR_STAKE_ZERO_TOKENS);\\n\\n        wrappedTokenManager.mint(_receiver, wrappedTokenAmountToStake);\\n        (\\n            uint256 emptyIndex,\\n            uint256 totalNumberOfStakedLocks\\n        ) = _getEmptyLockIndexForAddress(_receiver);\\n        uint64 lockDate = getTimestamp64();\\n\\n        if (emptyIndex < totalNumberOfStakedLocks) {\\n            addressStakeLocks[_receiver][emptyIndex] = Lock(\\n                lockDate,\\n                _duration,\\n                _amount,\\n                wrappedTokenAmountToStake\\n            );\\n        } else {\\n            addressStakeLocks[_receiver].push(\\n                Lock(lockDate, _duration, _amount, wrappedTokenAmountToStake)\\n            );\\n        }\\n\\n        emit Staked(\\n            msg.sender,\\n            _receiver,\\n            _amount,\\n            wrappedTokenAmountToStake,\\n            _duration,\\n            lockDate\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unstake a given amount of wrappedTokenManager's token\\n     * @dev This function requires the MINT_ROLE and BURN_ROLE permissions on the TokenManager and TRANSFER_ROLE on the Vault specified\\n     * @param _amount uniV2Pair amount\\n     */\\n    function unstake(uint256 _amount) external returns (bool) {\\n        uint256 uniswapV2PairTotalSupply = uniV2Pair.totalSupply();\\n        (uint256 uniswapV2PairReserve0, , ) = uniV2Pair.getReserves();\\n\\n        (\\n            bool result,\\n            uint256 burnableWrappedTokenAmount\\n        ) = _updateStakedTokenLocksAndCalculateBurnableWrappedTokenAmount(\\n            msg.sender,\\n            _amount,\\n            uniswapV2PairTotalSupply,\\n            uniswapV2PairReserve0\\n        );\\n\\n        require(result, ERROR_NOT_ENOUGH_UNWRAPPABLE_TOKENS);\\n\\n        wrappedTokenManager.burn(msg.sender, burnableWrappedTokenAmount);\\n        vault.transfer(uniV2Pair, msg.sender, _amount);\\n\\n        emit Unstaked(msg.sender, _amount, burnableWrappedTokenAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Adjust the user balance for an array of addresses in order to\\n     *         unstake the correct amount of tokens\\n     * @param _owners token owners\\n     */\\n    function adjustBalanceOfMany(address[] _owners)\\n        external\\n        auth(ADJUST_BALANCE_ROLE)\\n    {\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            adjustBalanceOf(_owners[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Change lock time\\n     * @param _minLockTime Lock time\\n     */\\n    function changeMinLockTime(uint64 _minLockTime)\\n        external\\n        auth(CHANGE_LOCK_TIME_ROLE)\\n    {\\n        minLockTime = _minLockTime;\\n        emit LockTimeChanged(minLockTime);\\n    }\\n\\n    /**\\n     * @notice Change max stakedLocks\\n     * @param _maxLocks Maximun number of stakedLocks allowed for an address\\n     */\\n    function changeMaxAllowedStakeLocks(uint64 _maxLocks)\\n        external\\n        auth(CHANGE_MAX_LOCKS_ROLE)\\n    {\\n        require(_maxLocks <= MAX_LOCKS_LIMIT, ERROR_MAX_LOCKS_TOO_HIGH);\\n        maxLocks = _maxLocks;\\n        emit MaxLocksChanged(maxLocks);\\n    }\\n\\n    /**\\n     * @notice Change vault\\n     * @param _vault new Vault address\\n     */\\n    function changeVaultContractAddress(address _vault)\\n        external\\n        auth(CHANGE_VAULT_ROLE)\\n    {\\n        require(isContract(_vault), ERROR_ADDRESS_NOT_CONTRACT);\\n\\n        vault = Vault(_vault);\\n        emit VaultChanged(_vault);\\n    }\\n\\n    /**\\n     * @notice Return all Locks for a given _address\\n     * @param _address address\\n     */\\n    function getStakedLocks(address _address) external view returns (Lock[]) {\\n        return addressStakeLocks[_address];\\n    }\\n\\n    /**\\n     * @notice Adjust the user balance for an address in order to\\n     *         unstake the correct amount of tokens\\n     * @dev This function requires the MINT_ROLE and BURN_ROLE permission on the TokenManager specified\\n     * @param _owner token owner\\n     */\\n    function adjustBalanceOf(address _owner)\\n        public\\n        auth(ADJUST_BALANCE_ROLE)\\n        returns (bool)\\n    {\\n        Lock[] storage stakedLocks = addressStakeLocks[_owner];\\n\\n        uint256 uniswapV2PairTotalSupply = uniV2Pair.totalSupply();\\n        (uint256 uniswapV2PairReserve0, , ) = uniV2Pair.getReserves();\\n\\n        for (uint256 i = 0; i < stakedLocks.length; i++) {\\n            _adjustBalanceAndStakedLockOf(\\n                _owner,\\n                stakedLocks[i],\\n                uniswapV2PairTotalSupply,\\n                uniswapV2PairReserve0\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Check if it's possible to unstake the specified _amountToUnstake of tokens, updates (or deletes) related stakedLocks and adjust the balance\\n     * @param _unstaker address who want to unstake\\n     * @param _amountToUnstake uinV2Pair amount\\n     * @param _uniswapV2PairTotalSupply UniV2 current total supply\\n     * @param _uniswapV2PairReserve0 UniV2 current value of Reserve0\\n     */\\n    function _updateStakedTokenLocksAndCalculateBurnableWrappedTokenAmount(\\n        address _unstaker,\\n        uint256 _amountToUnstake,\\n        uint256 _uniswapV2PairTotalSupply,\\n        uint256 _uniswapV2PairReserve0\\n    ) internal returns (bool result, uint256 burnableWrappedTokenAmount) {\\n        Lock[] storage stakedLocks = addressStakeLocks[_unstaker];\\n        burnableWrappedTokenAmount = 0;\\n        result = false;\\n\\n        uint256 totalAmountUnstakedSoFar = 0;\\n        uint256 stakedLocksLength = stakedLocks.length;\\n        uint64[] memory locksToRemove = new uint64[](stakedLocksLength);\\n        uint64 currentIndexOfLocksToBeRemoved = 0;\\n\\n        uint64 timestamp = getTimestamp64();\\n        uint64 i = 0;\\n\\n        for (i = 0; i < stakedLocksLength; i++) {\\n            _adjustBalanceAndStakedLockOf(\\n                msg.sender,\\n                stakedLocks[i],\\n                _uniswapV2PairTotalSupply,\\n                _uniswapV2PairReserve0\\n            );\\n        }\\n\\n        i = 0;\\n        for (; i < stakedLocksLength; i++) {\\n            if (\\n                timestamp >=\\n                stakedLocks[i].lockDate.add(stakedLocks[i].duration) &&\\n                !_isStakedLockEmpty(stakedLocks[i])\\n            ) {\\n                totalAmountUnstakedSoFar = totalAmountUnstakedSoFar.add(\\n                    stakedLocks[i].uniV2PairAmount\\n                );\\n\\n                if (_amountToUnstake == totalAmountUnstakedSoFar) {\\n                    locksToRemove[currentIndexOfLocksToBeRemoved] = i;\\n                    currentIndexOfLocksToBeRemoved = currentIndexOfLocksToBeRemoved\\n                        .add(1);\\n\\n                    burnableWrappedTokenAmount = burnableWrappedTokenAmount.add(\\n                        stakedLocks[i].wrappedTokenAmount\\n                    );\\n\\n                    result = true;\\n                    break;\\n                } else if (_amountToUnstake < totalAmountUnstakedSoFar) {\\n                    stakedLocks[i].uniV2PairAmount = totalAmountUnstakedSoFar\\n                        .sub(_amountToUnstake);\\n\\n                    stakedLocks[i].wrappedTokenAmount = stakedLocks[i]\\n                        .uniV2PairAmount\\n                        .mul(_uniswapV2PairReserve0)\\n                        .div(_uniswapV2PairTotalSupply);\\n\\n                    burnableWrappedTokenAmount = _amountToUnstake\\n                        .mul(_uniswapV2PairReserve0)\\n                        .div(_uniswapV2PairTotalSupply);\\n\\n                    /**\\n                     * \\\"sub(1)\\\" because it can happens that burnableWrappedTokenAmount is greater of 1 unit\\n                     * (because of decimals rounding) than the maximum amount of wrapped tokens staked within Steroids.\\n                     * This could lead to:\\n                     *      - burn tokens generated from other smart contracts\\n                     *        (since the token manager could be shared among them) causing malfunctions.\\n                     *      - transaction is reverted because of missing funds\\n                     */\\n                    // prettier-ignore\\n                    burnableWrappedTokenAmount = burnableWrappedTokenAmount.sub(1);\\n                    stakedLocks[i].wrappedTokenAmount = stakedLocks[i].wrappedTokenAmount.sub(1);\\n\\n                    result = true;\\n                    break;\\n                } else {\\n                    locksToRemove[currentIndexOfLocksToBeRemoved] = i;\\n                    currentIndexOfLocksToBeRemoved = currentIndexOfLocksToBeRemoved\\n                        .add(1);\\n\\n                    burnableWrappedTokenAmount = burnableWrappedTokenAmount.add(\\n                        stakedLocks[i].wrappedTokenAmount\\n                    );\\n                }\\n            }\\n        }\\n\\n        for (i = 0; i < currentIndexOfLocksToBeRemoved; i++) {\\n            delete stakedLocks[locksToRemove[i]];\\n        }\\n\\n        return (result, burnableWrappedTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Adjust a staked lock and corresponding portion of wrappedToken balance\\n     * @dev This function requires the MINT_ROLE and BURN_ROLE permission on the TokenManager specified\\n     * @param _owner token owner\\n     * @param _lock lock to adjust\\n     * @param _uniswapV2PairTotalSupply UniV2 current total supply\\n     * @param _uniswapV2PairReserve0 UniV2 current value of Reserve0\\n     */\\n    function _adjustBalanceAndStakedLockOf(\\n        address _owner,\\n        Lock storage _lock,\\n        uint256 _uniswapV2PairTotalSupply,\\n        uint256 _uniswapV2PairReserve0\\n    ) internal returns (bool) {\\n        uint256 currentOwnerWrappedTokenLockAmount = _lock.wrappedTokenAmount;\\n        uint256 adjustedOwnerWrappedTokenLockAmount = _lock\\n            .uniV2PairAmount\\n            .mul(_uniswapV2PairReserve0)\\n            .div(_uniswapV2PairTotalSupply);\\n\\n        if (\\n            adjustedOwnerWrappedTokenLockAmount ==\\n            currentOwnerWrappedTokenLockAmount\\n        ) {\\n            return false;\\n        }\\n\\n        if (\\n            adjustedOwnerWrappedTokenLockAmount >\\n            currentOwnerWrappedTokenLockAmount\\n        ) {\\n            wrappedTokenManager.mint(\\n                _owner,\\n                adjustedOwnerWrappedTokenLockAmount.sub(\\n                    currentOwnerWrappedTokenLockAmount\\n                )\\n            );\\n        } else {\\n            wrappedTokenManager.burn(\\n                _owner,\\n                currentOwnerWrappedTokenLockAmount.sub(\\n                    adjustedOwnerWrappedTokenLockAmount\\n                )\\n            );\\n        }\\n\\n        _lock.wrappedTokenAmount = adjustedOwnerWrappedTokenLockAmount;\\n        emit StakedLockAdjusted(_owner, adjustedOwnerWrappedTokenLockAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the position in which it's possible to insert a new Lock within addressStakeLocks\\n     * @param _address address\\n     */\\n    function _getEmptyLockIndexForAddress(address _address)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Lock[] storage stakedLocks = addressStakeLocks[_address];\\n        uint256 numberOfStakeLocks = stakedLocks.length;\\n\\n        if (numberOfStakeLocks < maxLocks) {\\n            return (maxLocks.add(1), numberOfStakeLocks);\\n        } else {\\n            for (uint256 i = 0; i < numberOfStakeLocks; i++) {\\n                if (_isStakedLockEmpty(stakedLocks[i])) {\\n                    return (i, numberOfStakeLocks);\\n                }\\n            }\\n\\n            revert(ERROR_IMPOSSIBLE_TO_INSERT);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if a Lock is empty\\n     * @param _lock lock\\n     */\\n    function _isStakedLockEmpty(Lock memory _lock)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            _lock.duration == 0 &&\\n            _lock.lockDate == 0 &&\\n            _lock.uniV2PairAmount == 0 &&\\n            _lock.wrappedTokenAmount == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AragonApp.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/UnstructuredStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/IKernel.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/IACL.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IVaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Autopetrified.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Petrifiable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Initializable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/TimeHelpers.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/Uint256Helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ConversionHelpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/VaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/token/ERC20.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/EtherTokenConstant.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IsContract.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/SafeERC20.sol\": {\r\n      \"content\": \"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelConstants.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-token-manager/contracts/TokenManager.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\n/* solium-disable function-order */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/ITokenController.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract TokenManager is ITokenController, IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n\\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = \\\"TM_CALLER_NOT_TOKEN\\\";\\n    string private constant ERROR_NO_VESTING = \\\"TM_NO_VESTING\\\";\\n    string private constant ERROR_TOKEN_CONTROLLER = \\\"TM_TOKEN_CONTROLLER\\\";\\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \\\"TM_MINT_RECEIVER_IS_TM\\\";\\n    string private constant ERROR_VESTING_TO_TM = \\\"TM_VESTING_TO_TM\\\";\\n    string private constant ERROR_TOO_MANY_VESTINGS = \\\"TM_TOO_MANY_VESTINGS\\\";\\n    string private constant ERROR_WRONG_CLIFF_DATE = \\\"TM_WRONG_CLIFF_DATE\\\";\\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \\\"TM_VESTING_NOT_REVOKABLE\\\";\\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \\\"TM_REVOKE_TRANSFER_FROM_REVERTED\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"TM_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \\\"TM_BALANCE_INC_NOT_ALLOWED\\\";\\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \\\"TM_ASSIGN_TRANSFER_FROM_REVERTED\\\";\\n\\n    struct TokenVesting {\\n        uint256 amount;\\n        uint64 start;\\n        uint64 cliff;\\n        uint64 vesting;\\n        bool revokable;\\n    }\\n\\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\\n    MiniMeToken public token;\\n    uint256 public maxAccountTokens;\\n\\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\\n    mapping (address => uint256) public vestingsLengths;\\n\\n    // Other token specific events can be watched on the token address directly (avoids duplication)\\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    modifier vestingExists(address _holder, uint256 _vestingId) {\\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\\n    * @param _transferable whether the token can be transferred by holders\\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\\n\\n        token = _token;\\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\\n\\n        if (token.transfersEnabled() != _transferable) {\\n            token.enableTransfers(_transferable);\\n        }\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\\n    * @param _amount Number of tokens minted\\n    */\\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\\n    * @param _amount Number of tokens minted\\n    */\\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\\n        _mint(address(this), _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\\n    * @param _receiver The address receiving the tokens\\n    * @param _amount Number of tokens transferred\\n    */\\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\\n        _assign(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\\n    * @param _holder Holder of tokens being burned\\n    * @param _amount Number of tokens being burned\\n    */\\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\\n        // minime.destroyTokens() never returns false, only reverts on failure\\n        token.destroyTokens(_holder, _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\\n    * @param _amount Number of tokens vested\\n    * @param _start Date the vesting calculations start\\n    * @param _cliff Date when the initial portion of tokens are transferable\\n    * @param _vested Date when all tokens are transferable\\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\\n    */\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    )\\n        external\\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\\n        returns (uint256)\\n    {\\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\\n\\n        uint256 vestingId = vestingsLengths[_receiver]++;\\n        vestings[_receiver][vestingId] = TokenVesting(\\n            _amount,\\n            _start,\\n            _cliff,\\n            _vested,\\n            _revokable\\n        );\\n\\n        _assign(_receiver, _amount);\\n\\n        emit NewVesting(_receiver, vestingId, _amount);\\n\\n        return vestingId;\\n    }\\n\\n    /**\\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\\n    * @param _holder Address whose vesting to revoke\\n    * @param _vestingId Numeric id of the vesting\\n    */\\n    function revokeVesting(address _holder, uint256 _vestingId)\\n        external\\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\\n        vestingExists(_holder, _vestingId)\\n    {\\n        TokenVesting storage v = vestings[_holder][_vestingId];\\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\\n\\n        uint256 nonVested = _calculateNonVestedTokens(\\n            v.amount,\\n            getTimestamp(),\\n            v.start,\\n            v.cliff,\\n            v.vesting\\n        );\\n\\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\\n        delete vestings[_holder][_vestingId];\\n\\n        // transferFrom always works as controller\\n        // onTransfer hook always allows if transfering to token controller\\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\\n\\n        emit RevokeVesting(_holder, _vestingId, nonVested);\\n    }\\n\\n    // ITokenController fns\\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\\n    // during initialization.\\n\\n    /*\\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\\n    *      to allow it or react if desired (only callable from the token).\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    * @return False if the controller does not authorize the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\\n        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\\n    }\\n\\n    /**\\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return False if the controller does not authorize the approval\\n    */\\n    function onApprove(address, address, uint) external onlyToken returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Called when ether is sent to the MiniMe Token contract\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return True if the ether is accepted, false for it to throw\\n    */\\n    function proxyPayment(address) external payable onlyToken returns (bool) {\\n        return false;\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Execute desired action as a token holder\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(token);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return hasInitialized() && token.balanceOf(_sender) > 0;\\n    }\\n\\n    // Getter fns\\n\\n    function getVesting(\\n        address _recipient,\\n        uint256 _vestingId\\n    )\\n        public\\n        view\\n        vestingExists(_recipient, _vestingId)\\n        returns (\\n            uint256 amount,\\n            uint64 start,\\n            uint64 cliff,\\n            uint64 vesting,\\n            bool revokable\\n        )\\n    {\\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\\n        amount = tokenVesting.amount;\\n        start = tokenVesting.start;\\n        cliff = tokenVesting.cliff;\\n        vesting = tokenVesting.vesting;\\n        revokable = tokenVesting.revokable;\\n    }\\n\\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, getTimestamp());\\n    }\\n\\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, _time);\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch for own token,\\n    *      as the it has the concept of issuing tokens without assigning them\\n    */\\n    function allowRecoverability(address _token) public view returns (bool) {\\n        return _token != address(token);\\n    }\\n\\n    // Internal fns\\n\\n    function _assign(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        // Must use transferFrom() as transfer() does not give the token controller full control\\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\\n    }\\n\\n    function _mint(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\\n    }\\n\\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\\n        // Max balance doesn't apply to the token manager itself\\n        if (_receiver == address(this)) {\\n            return true;\\n        }\\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\\n    }\\n\\n    /**\\n    * @dev Calculate amount of non-vested tokens at a specifc time\\n    * @param tokens The total amount of tokens vested\\n    * @param time The time at which to check\\n    * @param start The date vesting started\\n    * @param cliff The cliff period\\n    * @param vested The fully vested date\\n    * @return The amount of non-vested tokens of a specific grant\\n    *  transferableTokens\\n    *   |                         _/--------   vestedTokens rect\\n    *   |                       _/\\n    *   |                     _/\\n    *   |                   _/\\n    *   |                 _/\\n    *   |                /\\n    *   |              .|\\n    *   |            .  |\\n    *   |          .    |\\n    *   |        .      |\\n    *   |      .        |\\n    *   |    .          |\\n    *   +===+===========+---------+----------> time\\n    *      Start       Cliff    Vested\\n    */\\n    function _calculateNonVestedTokens(\\n        uint256 tokens,\\n        uint256 time,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 vested\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Shortcuts for before cliff and after vested cases.\\n        if (time >= vested) {\\n            return 0;\\n        }\\n        if (time < cliff) {\\n            return tokens;\\n        }\\n\\n        // Interpolate all vested tokens.\\n        // As before cliff the shortcut returns 0, we can just calculate a value\\n        // in the vesting rect (as shown in above's figure)\\n\\n        // vestedTokens = tokens * (time - start) / (vested - start)\\n        // In assignVesting we enforce start <= cliff <= vested\\n        // Here we shortcut time >= vested and time < cliff,\\n        // so no division by 0 is possible\\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\\n\\n        // tokens - vestedTokens\\n        return tokens.sub(vestedTokens);\\n    }\\n\\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\\n        uint256 transferable = token.balanceOf(_holder);\\n\\n        // This check is not strictly necessary for the current version of this contract, as\\n        // Token Managers now cannot assign vestings to themselves.\\n        // However, this was a possibility in the past, so in case there were vestings assigned to\\n        // themselves, this will still return the correct value (entire balance, as the Token\\n        // Manager does not have a spending limit on its own balance).\\n        if (_holder != address(this)) {\\n            uint256 vestingsCount = vestingsLengths[_holder];\\n            for (uint256 i = 0; i < vestingsCount; i++) {\\n                TokenVesting storage v = vestings[_holder][i];\\n                uint256 nonTransferable = _calculateNonVestedTokens(\\n                    v.amount,\\n                    _time,\\n                    v.start,\\n                    v.cliff,\\n                    v.vesting\\n                );\\n                transferable = transferable.sub(nonTransferable);\\n            }\\n        }\\n\\n        return transferable;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IForwarder.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-shared-minime/contracts/ITokenController.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/apps-vault/contracts/Vault.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DATA_NON_ZERO = \\\"VAULT_DATA_NON_ZERO\\\";\\n    string private constant ERROR_NOT_DEPOSITABLE = \\\"VAULT_NOT_DEPOSITABLE\\\";\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"VAULT_TOKEN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"VAULT_TOKEN_TRANSFER_REVERTED\\\";\\n\\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\\n\\n    /**\\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\\n    *      intercepted by the Proxy (see aragonOS#281)\\n    */\\n    function () external payable isInitialized {\\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\\n        _deposit(ETH, msg.value);\\n    }\\n\\n    /**\\n    * @notice Initialize Vault app\\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\\n    */\\n    function initialize() external onlyInit {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` `_token` to the vault\\n    * @param _token Address of the token being transferred\\n    * @param _value Amount of tokens being transferred\\n    */\\n    function deposit(address _token, uint256 _value) external payable isInitialized {\\n        _deposit(_token, _value);\\n    }\\n\\n    /**\\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\\n    * @param _token Address of the token being transferred\\n    * @param _to Address of the recipient of tokens\\n    * @param _value Amount of tokens being transferred\\n    */\\n    /* solium-disable-next-line function-order */\\n    function transfer(address _token, address _to, uint256 _value)\\n        external\\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\\n    {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(_to.send(_value), ERROR_SEND_REVERTED);\\n        } else {\\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return ERC20(_token).staticBalanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch, as it could be used\\n    *      maliciously to transfer funds away from the vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    function _deposit(address _token, uint256 _value) internal {\\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // Deposit is implicit in this case\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            require(\\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n            );\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/math/SafeMath64.sol\": {\r\n      \"content\": \"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/Imports.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/Kernel.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/DAOFactory.sol\\\";\\nimport \\\"@aragon/test-helpers/contracts/TokenMock.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\n\\ncontract Imports {\\n    // solium-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/ACL.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n\\n        bool ok;\\n        assembly {\\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\\n            // note that we are currently guaranteed to still have some gas after the call from\\n            // EIP-150's 63/64 gas forward rule\\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/acl/IACLOracle.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/Kernel.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/Petrifiable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\n// solium-disable-next-line max-len\\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n\\n    string private constant ERROR_APP_NOT_CONTRACT = \\\"KERNEL_APP_NOT_CONTRACT\\\";\\n    string private constant ERROR_INVALID_APP_CHANGE = \\\"KERNEL_INVALID_APP_CHANGE\\\";\\n    string private constant ERROR_AUTH_FAILED = \\\"KERNEL_AUTH_FAILED\\\";\\n\\n    /**\\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\\n    */\\n    constructor(bool _shouldPetrify) public {\\n        if (_shouldPetrify) {\\n            petrify();\\n        }\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\\n        initialized();\\n\\n        // Set ACL base\\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\\n\\n        // Create ACL instance and attach it as the default ACL app\\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\\n        acl.initialize(_permissionsCreator);\\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\\n\\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxy(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @param _app Address of the app instance or base implementation\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\\n    {\\n        _setApp(_namespace, _appId, _app);\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\\n    */\\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\\n    {\\n        recoveryVaultAppId = _recoveryVaultAppId;\\n    }\\n\\n    // External access to default app id and namespace constants to mimic default getters for constants\\n    /* solium-disable function-order, mixedcase */\\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\\n    /* solium-enable function-order, mixedcase */\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\\n        return apps[_namespace][_appId];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return Boolean indicating whether the ACL allows the role or not.\\n    *         Always returns false if the kernel hasn't been initialized yet.\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        IACL defaultAcl = acl();\\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\\n            defaultAcl.hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\\n        apps[_namespace][_appId] = _app;\\n        emit SetApp(_namespace, _appId, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        address app = getApp(_namespace, _appId);\\n        if (app != address(0)) {\\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\\n        } else {\\n            _setApp(_namespace, _appId, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory _params) {\\n        require(\\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\\n            ERROR_AUTH_FAILED\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\n\\ncontract KernelStorage {\\n    // namespace => app id => address\\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\\n    bytes32 public recoveryVaultAppId;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/AppProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Proxy initialization payload\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyBase.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableDelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\\n\\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\\n        assembly {\\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\\n            // otherwise continue outside of the assembly block.\\n            if lt(gas, forwardGasThreshold) {\\n                // Only accept the deposit and emit an event if all of the following are true:\\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\\n                    // Equivalent Solidity code for emitting the event:\\n                    // emit ProxyDeposit(msg.sender, msg.value);\\n\\n                    let logData := mload(0x40) // free memory pointer\\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\\n\\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\\n\\n                    stop() // Stop. Exits execution context\\n                }\\n\\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address target = implementation();\\n        delegatedFwd(target, msg.data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/misc/ERCProxy.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyPinned.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is IsContract, AppProxyBase {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.appStorage.pinnedCode\\\")\\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\\n\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        setPinnedCode(getAppBase(_appId));\\n        require(isContract(pinnedCode()));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode();\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n\\n    function setPinnedCode(address _pinnedCode) internal {\\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\\n    }\\n\\n    function pinnedCode() internal view returns (address) {\\n        return PINNED_CODE_POSITION.getStorageAddress();\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/DAOFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../kernel/KernelProxy.sol\\\";\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\nimport \\\"./EVMScriptRegistryFactory.sol\\\";\\n\\n\\ncontract DAOFactory {\\n    IKernel public baseKernel;\\n    IACL public baseACL;\\n    EVMScriptRegistryFactory public regFactory;\\n\\n    event DeployDAO(address dao);\\n    event DeployEVMScriptRegistry(address reg);\\n\\n    /**\\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\\n    * @param _baseKernel Base Kernel\\n    * @param _baseACL Base ACL\\n    * @param _regFactory EVMScriptRegistry factory\\n    */\\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\\n        // No need to init as it cannot be killed by devops199\\n        if (address(_regFactory) != address(0)) {\\n            regFactory = _regFactory;\\n        }\\n\\n        baseKernel = _baseKernel;\\n        baseACL = _baseACL;\\n    }\\n\\n    /**\\n    * @notice Create a new DAO with `_root` set as the initial admin\\n    * @param _root Address that will be granted control to setup DAO permissions\\n    * @return Newly created DAO\\n    */\\n    function newDAO(address _root) public returns (Kernel) {\\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\\n\\n        if (address(regFactory) == address(0)) {\\n            dao.initialize(baseACL, _root);\\n        } else {\\n            dao.initialize(baseACL, this);\\n\\n            ACL acl = ACL(dao.acl());\\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\\n\\n            acl.grantPermission(regFactory, acl, permRole);\\n\\n            acl.createPermission(regFactory, dao, appManagerRole, this);\\n\\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\\n            emit DeployEVMScriptRegistry(address(reg));\\n\\n            // Clean up permissions\\n            // First, completely reset the APP_MANAGER_ROLE\\n            acl.revokePermission(regFactory, dao, appManagerRole);\\n            acl.removePermissionManager(dao, appManagerRole);\\n\\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\\n            acl.revokePermission(regFactory, acl, permRole);\\n            acl.revokePermission(this, acl, permRole);\\n            acl.grantPermission(_root, acl, permRole);\\n            acl.setPermissionManager(_root, acl, permRole);\\n        }\\n\\n        emit DeployDAO(address(dao));\\n\\n        return dao;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\n\\n\\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\\n    /**\\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\\n    *      can update the reference, which effectively upgrades the contract\\n    * @param _kernelImpl Address of the contract used as implementation for kernel\\n    */\\n    constructor(IKernel _kernelImpl) public {\\n        require(isContract(address(_kernelImpl)));\\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\\n\\n        // Note that emitting this event is important for verifying that a KernelProxy instance\\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\\n        // This starts the \\\"chain of trust\\\", that can be followed through later SetApp() events\\n        // emitted during kernel upgrades.\\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n\\n    /**\\n    * @dev ERC897, the address the proxy would delegate calls to\\n    */\\n    function implementation() public view returns (address) {\\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../evmscript/IEVMScriptExecutor.sol\\\";\\nimport \\\"../evmscript/EVMScriptRegistry.sol\\\";\\n\\nimport \\\"../evmscript/executors/CallsScript.sol\\\";\\n\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\n\\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\\n    EVMScriptRegistry public baseReg;\\n    IEVMScriptExecutor public baseCallScript;\\n\\n    /**\\n    * @notice Create a new EVMScriptRegistryFactory.\\n    */\\n    constructor() public {\\n        baseReg = new EVMScriptRegistry();\\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\\n    }\\n\\n    /**\\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\\n    * @param _dao Kernel\\n    * @return Installed EVMScriptRegistry\\n    */\\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\\n\\n        ACL acl = ACL(_dao.acl());\\n\\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\\n\\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\\n\\n        // Clean up the permissions\\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n\\n        return reg;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/EVMScriptRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\\\"REGISTRY_ADD_EXECUTOR_ROLE\\\");\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\\\"REGISTRY_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\\n    // WARN: Manager can censor all votes and the like happening in an org\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\\n\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n\\n    string private constant ERROR_INEXISTENT_EXECUTOR = \\\"EVMREG_INEXISTENT_EXECUTOR\\\";\\n    string private constant ERROR_EXECUTOR_ENABLED = \\\"EVMREG_EXECUTOR_ENABLED\\\";\\n    string private constant ERROR_EXECUTOR_DISABLED = \\\"EVMREG_EXECUTOR_DISABLED\\\";\\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \\\"EVMREG_SCRIPT_LENGTH_TOO_SHORT\\\";\\n\\n    struct ExecutorEntry {\\n        IEVMScriptExecutor executor;\\n        bool enabled;\\n    }\\n\\n    uint256 private executorsNextIndex;\\n    mapping (uint256 => ExecutorEntry) public executors;\\n\\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n\\n    modifier executorExists(uint256 _executorId) {\\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize the registry\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        // Create empty record to begin executor IDs at 1\\n        executorsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Add a new script executor with address `_executor` to the registry\\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\\n    * @return id Identifier of the executor in the registry\\n    */\\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\\n        uint256 executorId = executorsNextIndex++;\\n        executors[executorId] = ExecutorEntry(_executor, true);\\n        emit EnableExecutor(executorId, _executor);\\n        return executorId;\\n    }\\n\\n    /**\\n    * @notice Disable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function disableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n    {\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\\n        executorEntry.enabled = false;\\n        emit DisableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @notice Enable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function enableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n        executorExists(_executorId)\\n    {\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\\n        executorEntry.enabled = true;\\n        emit EnableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\\n    * @param _script EVMScript being inspected\\n    */\\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\\n        uint256 id = _script.getSpecId();\\n\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage entry = executors[id];\\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/ScriptHelpers.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary ScriptHelpers {\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/executors/CallsScript.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/reverendus/tx-manager\\n\\nimport \\\"../ScriptHelpers.sol\\\";\\nimport \\\"./BaseEVMScriptExecutor.sol\\\";\\n\\n\\ncontract CallsScript is BaseEVMScriptExecutor {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\\\"CALLS_SCRIPT\\\");\\n    */\\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\\n\\n    string private constant ERROR_BLACKLISTED_CALL = \\\"EVMCALLS_BLACKLISTED_CALL\\\";\\n    string private constant ERROR_INVALID_LENGTH = \\\"EVMCALLS_INVALID_LENGTH\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_CALL_REVERTED = \\\"EVMCALLS_CALL_REVERTED\\\";\\n    */\\n\\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\\n\\n    /**\\n    * @notice Executes a number of call scripts\\n    * @param _script [ specId (uint32) ] many calls with this structure ->\\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\\n    * @param _blacklist Addresses the script cannot call to, or will revert.\\n    * @return Always returns empty byte array\\n    */\\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\\n        while (location < _script.length) {\\n            // Check there's at least address + calldataLength available\\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\\n\\n            address contractAddress = _script.addressAt(location);\\n            // Check address being called is not blacklist\\n            for (uint256 i = 0; i < _blacklist.length; i++) {\\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\\n            }\\n\\n            // logged before execution to ensure event ordering in receipt\\n            // if failed entire execution is reverted regardless\\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\\n\\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\\n            uint256 startOffset = location + 0x14 + 0x04;\\n            uint256 calldataStart = _script.locationOf(startOffset);\\n\\n            // compute end of script / next location\\n            location = startOffset + calldataLength;\\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\\n\\n            bool success;\\n            assembly {\\n                success := call(\\n                    sub(gas, 5000),       // forward gas left - 5000\\n                    contractAddress,      // address\\n                    0,                    // no value\\n                    calldataStart,        // calldata start\\n                    calldataLength,       // calldata length\\n                    0,                    // don't write output\\n                    0                     // don't write output\\n                )\\n\\n                switch success\\n                case 0 {\\n                    let ptr := mload(0x40)\\n\\n                    switch returndatasize\\n                    case 0 {\\n                        // No error data was returned, revert with \\\"EVMCALLS_CALL_REVERTED\\\"\\n                        // See remix: doing a `revert(\\\"EVMCALLS_CALL_REVERTED\\\")` always results in\\n                        // this memory layout\\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\\n\\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                    }\\n                    default {\\n                        // Forward the full error data\\n                        returndatacopy(ptr, 0, returndatasize)\\n                        revert(ptr, returndatasize)\\n                    }\\n                }\\n                default { }\\n            }\\n        }\\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\\n        // (due to the isInitialized modifier)\\n    }\\n\\n    function executorType() external pure returns (bytes32) {\\n        return EXECUTOR_TYPE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../common/Autopetrified.sol\\\";\\nimport \\\"../IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n}\\n\"\r\n    },\r\n    \"@aragon/test-helpers/contracts/TokenMock.sol\": {\r\n      \"content\": \"// Modified from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/StandardToken.sol\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\n\\ncontract TokenMock {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private balances;\\n    mapping (address => mapping (address => uint256)) private allowed;\\n    uint256 private totalSupply_;\\n    bool private allowTransfer_;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // Allow us to set the inital balance for an account on construction\\n    constructor(address initialAccount, uint256 initialBalance) public {\\n        balances[initialAccount] = initialBalance;\\n        totalSupply_ = initialBalance;\\n        allowTransfer_ = true;\\n    }\\n\\n    function totalSupply() public view returns (uint256) { return totalSupply_; }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint256 representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint256 specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n    * @dev Set whether the token is transferable or not\\n    * @param _allowTransfer Should token be transferable\\n    */\\n    function setAllowTransfer(bool _allowTransfer) public {\\n        allowTransfer_ = _allowTransfer;\\n    }\\n\\n    /**\\n    * @dev Transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(allowTransfer_);\\n        require(_value <= balances[msg.sender]);\\n        require(_to != address(0));\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        // Assume we want to protect for the race condition\\n        require(allowed[msg.sender][_spender] == 0);\\n\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint256 the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n        require(allowTransfer_);\\n        require(_value <= balances[_from]);\\n        require(_value <= allowed[_from][msg.sender]);\\n        require(_to != address(0));\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/StandardToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://github.com/ethereum/EIPs/issues/20\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal balances;\\n\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n\\n    uint256 internal supply;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    constructor(\\n        string _name,\\n        string _symbol,\\n        uint8 _decimals,\\n        uint256 _totalSupply\\n    ) public {\\n        supply = _totalSupply; // Update total supply\\n        name = _name; // Set the id for reference\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply); // Transfer event indicating token creation\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Transfer token for a specified address\\n     * @param _to The address to transfer to.\\n     * @param _value The amount to be transferred.\\n     */\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_value <= balances[msg.sender]);\\n        require(_to != address(0));\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        require(_value <= balances[_from]);\\n        require(_value <= allowed[_from][msg.sender]);\\n        require(_to != address(0));\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue)\\n        );\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Total number of tokens in existence\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return supply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _owner The address to query the the balance of.\\n     * @return An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ADJUST_BALANCE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakedLocks\",\"outputs\":[{\"components\":[{\"name\":\"lockDate\",\"type\":\"uint64\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"uniV2PairAmount\",\"type\":\"uint256\"},{\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"adjustBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxLocks\",\"type\":\"uint64\"}],\"name\":\"changeMaxAllowedStakeLocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_uniV2Pair\",\"type\":\"address\"},{\"name\":\"_minLockTime\",\"type\":\"uint64\"},{\"name\":\"_maxLocks\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LOCKS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressUniV2PairBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"adjustBalanceOfMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint64\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_MAX_LOCKS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"changeVaultContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappedTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_VAULT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressStakeLocks\",\"outputs\":[{\"name\":\"lockDate\",\"type\":\"uint64\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"uniV2PairAmount\",\"type\":\"uint256\"},{\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_LOCK_TIME_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minLockTime\",\"type\":\"uint64\"}],\"name\":\"changeMinLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uniV2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"lockDate\",\"type\":\"uint64\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uniV2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wrappedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxLocks\",\"type\":\"uint64\"}],\"name\":\"MaxLocksChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedLockAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]","ContractName":"Steroids","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}