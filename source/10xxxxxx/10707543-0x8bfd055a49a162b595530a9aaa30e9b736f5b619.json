{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IRebaseableERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function rebase(uint256 epoch, uint256 supplyDelta) external returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ninterface IExchangeRates {\r\n    function calculateExchangeRateFor(IERC20 token1, IERC20 token2, address pool, uint256 decimals1, uint256 decimals2, uint256 addedDecimals) external view returns(uint256);\r\n    function calculateUsdForToken(address token, address pool, uint256 tokenDecimals, uint256 precision) external view returns(uint256);\r\n    function getUsdEtherPrice() external view returns(uint256);\r\n}\r\n\r\ncontract Rebaser is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IUniswapV2Pair public pool = IUniswapV2Pair(0x7844c04B043B51dc45Bdf59ee2De53e7686865ff); // Address of the IUniswapV2Pair for Weth / Token\r\n    IUniswapV2Pair public xamp_pool = IUniswapV2Pair(0x28BC0c76a5f8f8461be181c0Cbddf715bC1d96AF);\r\n    \r\n    IRebaseableERC20 public token = IRebaseableERC20(0x7777770f8A6632ff043c8833310e245EBa9209E6);\r\n    uint256 public tokenDecimals = 18;\r\n    \r\n    IExchangeRates rates = IExchangeRates(0x3eAfb425e22beCFAB10754Ef8BDE68B2AB640384);\r\n    \r\n    uint256 public lastRebase;\r\n    uint256 public timeBetweenRebases = 12 hours;\r\n    uint256 public lastExchangeRate = 0;\r\n    \r\n    bool public guarded = true;\r\n    \r\n    event RebaseSuccess(uint256 oldPrice, uint256 newPrice, uint256 delta);\r\n    event RebaseFail(uint256 oldPrice, uint256 newPrice);\r\n    \r\n    constructor() public {\r\n        lastRebase = now;\r\n        lastExchangeRate = currentExchangeRate();\r\n    }\r\n    \r\n    // Enforces only owner if the guarded \r\n    modifier onlyOwnerIfGuarded {\r\n        canOperateRebase(msg.sender);\r\n        _;\r\n    }\r\n    \r\n    // Public function to return if address can operate rebase or not\r\n    function canOperateRebase(address _a) public view returns(bool) {\r\n        return ((guarded == false) || (_a == _owner));\r\n    }\r\n    \r\n    // Size of next rebase\r\n    function nextSupplyDelta() public view returns(uint256) {\r\n        \r\n        uint256 currentSupply = token.totalSupply();\r\n        if (currentSupply < 100) {\r\n            return 0;\r\n        }\r\n        return currentSupply.div(100);\r\n    }\r\n    \r\n    // Public shouldRebase\r\n    function shouldRebase(uint256 exchangeRate) public view returns(bool) {\r\n        if (exchangeRate > lastExchangeRate) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Public exchange rate variable\r\n    function currentExchangeRate() public view returns(uint256) {\r\n        return rates.calculateUsdForToken({\r\n            token: address(token),\r\n            pool: address(pool),\r\n            tokenDecimals: tokenDecimals,\r\n            precision: 4\r\n        });\r\n    }\r\n    \r\n    function newTargetRate(uint256 exchangeRate) public view returns(uint256) {\r\n        if (shouldRebase(exchangeRate)) {\r\n            uint256 tenPercent = exchangeRate.div(10);\r\n            return exchangeRate.add(tenPercent);\r\n        }\r\n        else {\r\n            uint256 difference = lastExchangeRate.sub(exchangeRate).div(2);\r\n            return exchangeRate.add(difference);\r\n        }\r\n    }\r\n    \r\n    function isTimeForRebase() public view returns(bool) {\r\n        return (now > lastRebase.add(timeBetweenRebases));\r\n    }\r\n    \r\n    function _adjust_supply(uint256 supplyDelta) internal {\r\n        token.rebase(0, supplyDelta);\r\n        pool.sync();\r\n        xamp_pool.sync();\r\n    }\r\n    \r\n    \r\n    // Fully open rebasing. Openned to the public when the owner calls unguard\r\n    function rebase() public onlyOwnerIfGuarded {\r\n        uint256 exchangeRate = currentExchangeRate();\r\n        \r\n        require(isTimeForRebase() || shouldRebase(exchangeRate));\r\n        \r\n        bool _shouldRebase = shouldRebase(exchangeRate);\r\n        \r\n        if (_shouldRebase) {\r\n            uint256 supplyDelta = nextSupplyDelta();\r\n            \r\n            // Reduce supply and sync pools\r\n            _adjust_supply(supplyDelta);\r\n            \r\n            // Set a new rate\r\n            lastExchangeRate = newTargetRate(exchangeRate);\r\n            \r\n            // Do not reset rebase timer\r\n            \r\n            emit RebaseSuccess(lastExchangeRate, exchangeRate, supplyDelta);\r\n        }\r\n        else {\r\n            // Don't burn tokens.\r\n            \r\n            // Adjust the lastExchangeRate to current price\r\n            uint256 _newRate = newTargetRate(exchangeRate);\r\n            \r\n            if (_newRate < lastExchangeRate) lastExchangeRate = _newRate;\r\n\r\n            // reset rebase timer\r\n            lastRebase = now;\r\n            \r\n             emit RebaseFail(lastExchangeRate, exchangeRate);\r\n        }\r\n    }\r\n    \r\n    /*\r\n     MANAGEMENT AND TESTING.\r\n    */\r\n    // Switches contract from completely owner operated to public operated and gives up management rights.\r\n    function unguard() public onlyOwner {\r\n        guarded = false;\r\n    }\r\n    \r\n    // Only owner operated manual rebasing. This right is given up when unguard() is called\r\n    function _rebase() public onlyOwner {\r\n        require(guarded == true);\r\n        \r\n        // Get current exchange rate\r\n        uint256 exchangeRate = currentExchangeRate();\r\n        \r\n        // Get the proper supply delta\r\n        uint256 supplyDelta = nextSupplyDelta();\r\n        \r\n        // Rebase and sync liquidity\r\n        token.rebase(0, supplyDelta);\r\n        pool.sync();\r\n        xamp_pool.sync();\r\n        \r\n        // Emit success for external services to take action\r\n        emit RebaseSuccess(lastExchangeRate, exchangeRate, supplyDelta);\r\n        \r\n        // Sync the state\r\n        lastRebase = now;\r\n        \r\n        uint256 tenPercent;\r\n        if (exchangeRate > 0) tenPercent = exchangeRate.div(10);\r\n        else tenPercent = 0;\r\n        lastExchangeRate = exchangeRate.add(tenPercent);\r\n    }\r\n    \r\n    // Syncs the exchange rate and rebase to the current transaction state. This right is given up when unguard() is called\r\n    function refresh() public onlyOwner {\r\n        require(guarded == true);\r\n        \r\n        lastExchangeRate = currentExchangeRate();\r\n        lastRebase = now;\r\n    }\r\n    \r\n    // Change token to test rebase\r\n    function changeToken(address _token) public onlyOwner {\r\n        require(guarded == true);\r\n        token = IRebaseableERC20(_token);\r\n    }\r\n    \r\n    // Change pool to test\r\n    function changePool(address _pool) public onlyOwner {\r\n        require(guarded == true);\r\n        pool = IUniswapV2Pair(_pool);\r\n    }\r\n    \r\n    // Modifies the period between rebases\r\n    function changePeriod(uint256 _t) public onlyOwner {\r\n        require(guarded == true);\r\n        timeBetweenRebases = _t;\r\n    }\r\n    \r\n    /*\r\n     OWNERSHIP\r\n    */\r\n    // Transfers the rebase token to a new owner. This right is relinquished by renouncing ownership of the oracle.\r\n    function transferTokenOwnership(address newOwner) public onlyOwner {\r\n        token.transferOwnership(newOwner);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"RebaseFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"RebaseSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"canOperateRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"changePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeForRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"newTargetRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSupplyDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBetweenRebases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IRebaseableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unguard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xamp_pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Rebaser","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1b09dcdf430b64d1f8b439c92139c9e32234bb1c07c8470c558d1320c8797fc7"}]}