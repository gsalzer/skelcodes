{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Version 3. 09 apr 2020 Chelbukhov A.\r\n * Add external storage for base data\r\n */\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address candidate;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);    \r\n    _;\r\n  }\r\n\r\n\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    candidate = newOwner;\r\n  }\r\n\r\n  function confirmOwnership() public {\r\n    require(candidate == msg.sender);\r\n    emit OwnershipTransferred(owner, candidate);\r\n    owner = candidate;\r\n    delete candidate;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract KEDRON is StandardToken {\r\n    string public name ='';\r\n    string public symbol = '';\r\n    uint32 public constant decimals = 0;\r\n    uint256 public INITIAL_SUPPLY = 0;\r\n    address public mainContract;\r\n    address candidate;\r\n\r\n\r\n    event Mint(address indexed to, uint256 amount, string comment);\r\n    event Burn(address indexed burner, uint256 value, string comment);\r\n    \r\n    constructor(address _MainContract, string memory _name, string memory _symbol) public {\r\n        mainContract = _MainContract;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        // only MainContract contract\r\n        require(msg.sender == mainContract);\r\n        _;\r\n    }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    candidate = newOwner;\r\n  }\r\n\r\n  function confirmOwnership() public {\r\n    require(candidate == msg.sender);\r\n    mainContract = candidate;\r\n    delete candidate;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount, string memory _comment) onlyOwner public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount, _comment);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }     \r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(address _investor, uint256 _value, string memory _comment) onlyOwner public {\r\n        require(_value > 0);\r\n        require(_value <= balances[_investor]);\r\n\r\n        balances[_investor] = balances[_investor].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_investor, _value, _comment);\r\n        emit Transfer(_investor, address(0), _value);\r\n    }\r\n     \r\n    /**\r\n     * @dev Override for restricted function\r\n     */\r\n    function transfer(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for restricted function\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        // The token contract don`t receive ether\r\n        revert();\r\n    }  \r\n}\r\n\r\n\r\ncontract ExternalStorage is Ownable {\r\n    address public addrMainContract;\r\n    //address public owner;\r\n    uint public constant maxRecords = 100;\r\n\r\n    struct RP {\r\n        uint256 ID ;\r\n        string name ;\r\n        string location ;\r\n        string description ;\r\n        string site;\r\n        string googlemap;\r\n        string pathToPhoto;\r\n        bool isWork ;\r\n    }\r\n    \r\n    RP[] public rps;                                     //patrimonial settlement (родовые поселения)\r\n\r\n\r\n\r\n    struct User {\r\n        string login;\r\n        string name;\r\n        uint256 RPID;\r\n        bool isRPAdmin;\r\n        bool isUser;\r\n        mapping(uint256 => uint256) projetcsDep;        // вложения в проекты: ProjectID => Amount\r\n    }\r\n    mapping (address => User) public users;\r\n    mapping (string => address) public userAddress;             //string = login\r\n\r\n    string[] public userArray;                                  // Array of login users\r\n    mapping (string => bool) isUserInArray;                      // string = login - mapping for quick detect users in userArray\r\n    \r\n    struct Project {\r\n        uint256 ID;\r\n        string name;\r\n        string description;\r\n        uint256 RPID;\r\n        address admin;\r\n        uint256 profit;\r\n        string site;\r\n        string pathToPhoto;\r\n        bool isWork;\r\n    }\r\n    Project[] public projects;\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n        addrMainContract = msg.sender;\r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        // only MainContract contract\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyMainContract() {\r\n        // only MainContract contract\r\n        require(msg.sender == addrMainContract);\r\n        _;\r\n    }     \r\n     \r\n        modifier isRPAdmin (address _addr) {\r\n        require(users[_addr].isRPAdmin == true, \"Only for project admins\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * internal functions \r\n     */\r\n    function getNewRPID() internal view returns (uint256) {\r\n        return rps.length +1;\r\n    }\r\n    \r\n        function getNewProjectID() internal view returns (uint256) {\r\n        return projects.length +1;\r\n    }\r\n    \r\n    function getRPID(address _addr) internal view returns (uint256) {\r\n        return users[_addr].RPID;\r\n    }\r\n\r\n    function getRPName(uint256 _RPID) internal view returns (string memory) {\r\n        return rps[_RPID-1].name;\r\n    }\r\n\r\n    /**\r\n     * Migrate functions\r\n     */\r\n    function changeAddrMainContract(address _newAddr) public onlyOwner {\r\n        addrMainContract = _newAddr;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Base functions\r\n     */\r\n    function isRPAdminF (address _addr) public view returns(bool) {\r\n        return users[_addr].isRPAdmin;\r\n        \r\n    }\r\n\r\n    function addRP(string memory _name, string memory _location, string memory _description) public onlyOwner {\r\n        //get new ID\r\n        uint256 myID = getNewRPID();\r\n        \r\n        RP memory newRP = RP({\r\n            ID: myID,\r\n            name: _name,\r\n            location: _location,\r\n            description: _description,\r\n            site: '',\r\n            googlemap: '',\r\n            pathToPhoto: '',\r\n            isWork: true\r\n        });\r\n        rps.push(newRP);\r\n    }\r\n    \r\n    function addRPAdmin(uint256 _RPID, string memory _login, string memory _name, address _addr) public onlyOwner {\r\n        require (_addr != address(0),\"Only real address\");\r\n        User memory newUser = User ({\r\n            login: _login,\r\n            name: _name,\r\n            RPID: _RPID,\r\n            isRPAdmin: true,\r\n            isUser: true\r\n        });\r\n        users[_addr] = newUser;\r\n        if (isUserInArray[_login] == false) userArray.push(_login);\r\n        userAddress[_login] = _addr;\r\n        isUserInArray[_login] = true;\r\n    }\r\n\r\n    function cleareUser(string memory _login) public onlyOwner {\r\n        address myAddr = userAddress[_login];\r\n        User memory clearUser = User ({\r\n            login: \"\",\r\n            name: \"\",\r\n            RPID: 0,\r\n            isRPAdmin: false,\r\n            isUser:false\r\n        });\r\n        users[myAddr] = clearUser;\r\n        userAddress[_login]=address(0);\r\n    }\r\n\r\n    function addProject(string memory _name, string memory _description) public isRPAdmin(msg.sender) {\r\n        uint256 newProjectID = getNewProjectID();\r\n        uint256 myRPID = getRPID(address(msg.sender));\r\n        Project memory newProject = Project ({\r\n            ID: newProjectID,\r\n            name: _name,\r\n            description: _description,\r\n            RPID: myRPID,\r\n            admin: address(msg.sender),\r\n            profit: 0,\r\n            pathToPhoto: '',\r\n            site: '',\r\n            isWork: true\r\n        });\r\n        projects.push(newProject);\r\n    }\r\n    \r\n    function editProjectProfit(uint256 _projectID, uint256 _newProfit) public isRPAdmin(msg.sender) {\r\n        projects[_projectID-1].profit = _newProfit;\r\n    }\r\n\r\n    function editProjectPhoto(uint256 _projectID, string memory _newPhoto) public isRPAdmin(msg.sender) {\r\n        projects[_projectID-1].pathToPhoto = _newPhoto;\r\n    }\r\n\r\n    function editProjectSite(uint256 _projectID, string memory _newSite) public isRPAdmin(msg.sender) {\r\n        projects[_projectID-1].site = _newSite;\r\n    }\r\n\r\n    function addUser(string memory _login, string memory _name, address _addr) public isRPAdmin(msg.sender) {\r\n        require (_addr != address(0),\"Only real address\");\r\n        require(userAddress[_login] == address(0),\"This login allready in base\");\r\n        require(users[_addr].isUser == false,\"This address allready in base\");\r\n        User memory newUser = User ({\r\n            login: _login,\r\n            name: _name,\r\n            RPID: getRPID(msg.sender),\r\n            isRPAdmin: false,\r\n            isUser:true\r\n        });\r\n        users[_addr] = newUser;\r\n        if (isUserInArray[_login] == false) userArray.push(_login);\r\n        userAddress[_login] = _addr;\r\n        isUserInArray[_login] = true;\r\n\r\n    }\r\n\r\n    function changeUserLogin (string memory _oldLogin, string memory _newLogin) public isRPAdmin(msg.sender) {\r\n        require(isUserInArray[_oldLogin] == true, 'User not found');\r\n        uint32 x = 0;\r\n        address myUserAddress;\r\n        while (x < userArray.length) {\r\n            if (keccak256(bytes(userArray[x])) == keccak256(bytes(_oldLogin))){\r\n                myUserAddress = userAddress[_oldLogin];\r\n                userArray[x] = _newLogin;\r\n                users[myUserAddress].login = _newLogin;\r\n                userAddress[_oldLogin] = address(0);\r\n                userAddress[_newLogin] = myUserAddress;\r\n                isUserInArray[_oldLogin] = false;\r\n                isUserInArray[_newLogin] = true;\r\n            }\r\n            x++;\r\n        }\r\n    }\r\n    function changeUserName (address _userAddress, string memory _newName) public isRPAdmin (msg.sender) {\r\n        require (_userAddress != address(0), 'invalid address');\r\n        users[_userAddress].name = _newName;\r\n    }\r\n\r\n     function getUserCount() public view returns(uint256) {\r\n         return userArray.length;\r\n     }\r\n\r\n     function getRPCount() public view returns(uint256) {\r\n         return rps.length;\r\n     }\r\n\r\n     function getProjectCount() public view returns(uint256) {\r\n         return projects.length;\r\n     }\r\n     \r\n     function getUserDeposit(address _addr, uint256 _projectID) public view returns (uint256) {\r\n         return users[_addr].projetcsDep[_projectID];\r\n     }\r\n\r\n\r\n /**\r\n     * Main admin functions for patrimonial settlement control\r\n     */\r\n\r\n\r\n    function editRPName(uint256 _RPID, string memory _newName) public onlyOwner {\r\n        rps[_RPID-1].name = _newName;\r\n    }\r\n    \r\n    function editRPLocation(uint256 _RPID, string memory _newLocation) public onlyOwner {\r\n        rps[_RPID-1].location = _newLocation;\r\n    }\r\n    \r\n    function editRPDescription(uint256 _RPID, string memory _newDescription) public onlyOwner {\r\n        rps[_RPID-1].description = _newDescription;\r\n    }    \r\n\r\n    function editRPsite(uint256 _RPID, string memory _newSite) public onlyOwner {\r\n        rps[_RPID-1].site = _newSite;\r\n    }    \r\n    \r\n    function editRPGoogleMap(uint256 _RPID, string memory _newGoogleMap) public onlyOwner {\r\n        rps[_RPID-1].googlemap = _newGoogleMap;\r\n    }    \r\n\r\n    function editRPPhoto(uint256 _RPID, string memory _pathToPhoto) public onlyOwner {\r\n        rps[_RPID-1].pathToPhoto = _pathToPhoto;\r\n    }    \r\n\r\n    function lockRP(uint256 _RPID) public onlyOwner {\r\n        rps[_RPID-1].isWork = false;\r\n    }\r\n    \r\n    function unlockRP(uint256 _RPID) public onlyOwner {\r\n        rps[_RPID-1].isWork = true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Main admin functions for projects control\r\n     */\r\n\r\n    function editNameProject(uint256 _projectID, string memory _newName) public onlyOwner {\r\n        projects[_projectID-1].name = _newName;\r\n    }\r\n\r\n    function editDescriptionProject(uint256 _projectID, string memory _newDescription) public onlyOwner {\r\n        projects[_projectID-1].description = _newDescription;\r\n    }\r\n    \r\n    \r\n    function editAdminProject(uint256 _projectID, address _newAdmin) public onlyOwner {\r\n        projects[_projectID-1].admin = _newAdmin;\r\n    }\r\n    \r\n    function killProject(uint256 _projectID) public onlyOwner {\r\n        projects[_projectID-1].RPID=0;\r\n        projects[_projectID-1].name='';\r\n        projects[_projectID-1].description='';\r\n        projects[_projectID-1].admin=address(0);\r\n        projects[_projectID-1].pathToPhoto='';\r\n        projects[_projectID-1].site='';\r\n        projects[_projectID-1].profit=0;\r\n        projects[_projectID-1].isWork = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * RPadmin functions for projects control\r\n     */\r\n\r\n\r\n    function lockProject(uint256 _projectID) public isRPAdmin(msg.sender) {\r\n        require (projects[_projectID-1].admin == msg.sender,\"Is not your project\");\r\n        projects[_projectID-1].isWork = false;\r\n    }\r\n    \r\n    function unlockProject(uint256 _projectID) public isRPAdmin(msg.sender) {\r\n        require (projects[_projectID-1].admin == msg.sender,\"Is not your project\");\r\n        projects[_projectID-1].isWork = true;\r\n    }\r\n\r\n    /**\r\n     * RPadmin functions for deposit control\r\n     */\r\n    function addDeposit (address _investor, uint256 _projectID, uint256 _value, address _RPAdmin) public  onlyMainContract {\r\n        require(projects[_projectID-1].admin == _RPAdmin, \"Is not your project\");\r\n        users[_investor].projetcsDep[_projectID] += _value; \r\n    }    \r\n     \r\n    function revokeDeposit (address _investor, uint256 _projectID, uint256 _value, address _RPAdmin) public onlyMainContract {\r\n        require (users[_investor].projetcsDep[_projectID] >= _value,\"User deposit is smaller then you want revoke\");\r\n        require(projects[_projectID-1].admin == _RPAdmin, \"Is not your project\");\r\n        users[_investor].projetcsDep[_projectID] -= _value; \r\n    }  \r\n\r\n\r\n    /**\r\n     * User functions\r\n     * showDeposit - возвращает вкладчиков определенного проекта\r\n     * showRPS - возвращает список поселений\r\n     * showProjects - возвращает проекты определенного поселения\r\n     * showUsers - отображает пользователей\r\n     */ \r\n\r\n\r\n\r\n        function showUsers(uint256 _RPID) public view returns (bytes32[maxRecords] memory, bytes32[maxRecords] memory){\r\n            //RPID = 0 - отображает всех пользователей\r\n            //RPID > 0 - отображает пользователей определенного поселения\r\n            uint32 x = 0;\r\n            uint32 count = 0;\r\n            bytes32[maxRecords] memory myRPSNameArray;\r\n            bytes32[maxRecords] memory myUserNameArray;\r\n            address myUserAddress;\r\n            while (x < userArray.length) {\r\n                myUserAddress = userAddress[userArray[x]];\r\n                if (myUserAddress != address(0) && users[myUserAddress].isUser == true){\r\n                    if (_RPID > 0) {\r\n                        if (_RPID == users[myUserAddress].RPID){\r\n                            myUserNameArray[count] = stringToBytes32(users[myUserAddress].name);\r\n                            myRPSNameArray[count] = stringToBytes32(getRPName(users[myUserAddress].RPID));\r\n                            count++;\r\n                        }\r\n                    } else {\r\n                        myUserNameArray[count] = stringToBytes32(users[myUserAddress].name);\r\n                        myRPSNameArray[count] = stringToBytes32(getRPName(users[myUserAddress].RPID));\r\n                        count++;\r\n                        \r\n                    }\r\n                }\r\n                x++;\r\n            }\r\n            return (myUserNameArray, myRPSNameArray);\r\n        }\r\n\r\n\r\n\r\n        function showRPS() public view returns (bytes32[maxRecords] memory, uint256[maxRecords] memory){\r\n            uint32 x = 0;\r\n            uint32 count = 0;\r\n            bytes32[maxRecords] memory myRPSNameArray;\r\n            uint256[maxRecords] memory myRPSIDArray;\r\n            while (x < rps.length) {\r\n                if (rps[x].isWork == true) {\r\n                    myRPSNameArray[count] = stringToBytes32(rps[x].name);\r\n                    myRPSIDArray[count] = rps[x].ID;\r\n                    count++;\r\n                }\r\n                x++;\r\n            }\r\n            return (myRPSNameArray, myRPSIDArray);\r\n        }\r\n\r\n\r\n        function showProjects(uint256 _RPID) public view returns (bytes32[maxRecords] memory, uint256[maxRecords] memory){\r\n            uint32 x = 0;\r\n            uint32 count = 0;\r\n            bytes32[maxRecords] memory myProjectNameArray;\r\n            uint256[maxRecords] memory myProjectIDArray;\r\n            while (x < projects.length) {\r\n                if (projects[x].RPID == _RPID && projects[x].isWork == true) {\r\n                    myProjectNameArray[count] = stringToBytes32(projects[x].name);\r\n                    myProjectIDArray[count] = projects[x].ID;\r\n                    count++;\r\n                }\r\n                x++;\r\n            }\r\n            return (myProjectNameArray, myProjectIDArray);\r\n        }\r\n\r\n        function showDeposit(uint256 _projectID) public view returns (address[maxRecords] memory, uint256[maxRecords] memory, bytes32[maxRecords] memory, bytes32[maxRecords] memory){\r\n        bytes32[maxRecords] memory myFIOArray;\r\n        bytes32[maxRecords] memory myRPSNameArray;\r\n        address[maxRecords] memory myAdresses;\r\n        uint256[maxRecords] memory myDepo;\r\n        string memory myCurrentLogin;\r\n        address myCurrentAddress;\r\n        uint256 myCurrentDeposit;\r\n        uint32 x = 0;\r\n        uint32 count = 0;\r\n        \r\n        while( x < userArray.length)\r\n            {\r\n                myCurrentLogin = userArray[x]; \r\n                myCurrentAddress = userAddress[myCurrentLogin];\r\n                myCurrentDeposit = getUserDeposit(myCurrentAddress, _projectID); \r\n                if (myCurrentDeposit > 0) {\r\n                    myAdresses[count] =myCurrentAddress;\r\n                    myDepo[count] = myCurrentDeposit;\r\n                    myFIOArray[count] = stringToBytes32(users[myCurrentAddress].name); \r\n                    myRPSNameArray[count] = stringToBytes32(getRPName(users[myCurrentAddress].RPID));\r\n                    count++;\r\n                }\r\n                x++;\r\n            }\r\n        \r\n        return (myAdresses, myDepo, myFIOArray, myRPSNameArray);\r\n    }\r\n\r\n/* function test(string memory source) public view returns (bytes32[maxRecords] memory) {\r\n    bytes32[maxRecords] memory myArray;\r\n    myArray[0] = stringToBytes32(source);\r\n    return myArray;\r\n} */\r\n\r\n\r\nfunction stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n}\r\n\r\n\r\n\r\n    function() external payable {\r\n        // The token contract don`t receive ether\r\n        revert();\r\n    }  \r\n}\r\n\r\n\r\n\r\ncontract MainContract is Ownable {\r\n    using SafeMath for uint; \r\n\r\n    address myAddress = address(this);\r\n    address myOwnerAddress = msg.sender;\r\n\r\n    KEDRON public token = new KEDRON(myAddress, 'KERD Token', 'KEDR');\r\n    ExternalStorage public exStorage = new ExternalStorage(myOwnerAddress);\r\n\r\n\r\n\r\n    modifier isRPAdmin (address _addr) {\r\n        require(exStorage.isRPAdminF(_addr) == true, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        \r\n    }\r\n\r\n\r\n\r\n    function transferTokenOwnerShip(address _newOwnerContract)public onlyOwner {\r\n        token.transferOwnership(_newOwnerContract);\r\n    }\r\n\r\n    function confirmTokenOwnerShip() public onlyOwner {\r\n        token.confirmOwnership();\r\n    }\r\n    /**\r\n     * RPadmin functions for deposit control\r\n     */\r\n\r\n    function transferTokens(address _addrInvestor, uint256 _projectID, uint256 _amount, string memory _comment) public isRPAdmin(msg.sender) {\r\n        require (_addrInvestor != address(0));\r\n        require (_amount >= 1);\r\n        exStorage.addDeposit (_addrInvestor, _projectID, _amount, msg.sender) ;\r\n        token.mint(_addrInvestor, _amount, _comment);\r\n    }\r\n    \r\n    function revokeTokens(address _addrInvestor, uint256 _projectID, uint256 _amount, string memory _comment) public isRPAdmin(msg.sender) {\r\n        // the function take tokens from _investor to contract\r\n        // the sum is entered in whole tokens (1 = 1 token)\r\n        require (_amount >= 1);\r\n        exStorage.revokeDeposit (_addrInvestor, _projectID, _amount, msg.sender) ;\r\n        token.burn(_addrInvestor, _amount, _comment);    \r\n    }     \r\n    \r\n    function withdrawFunds (address payable _to, uint256 _value) public onlyOwner {\r\n        require(_to != address(0),\"Invalid address\");\r\n        require (myAddress.balance >= _value,\"Value is more than balance\");\r\n        _to.transfer(_value);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmTokenOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exStorage\",\"outputs\":[{\"internalType\":\"contract ExternalStorage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrInvestor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"revokeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract KEDRON\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerContract\",\"type\":\"address\"}],\"name\":\"transferTokenOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addrInvestor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MainContract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0019a81acb1557dbce0962efe4eadaabb0dfd6a805c0d683d6681d69a7e07058"}]}