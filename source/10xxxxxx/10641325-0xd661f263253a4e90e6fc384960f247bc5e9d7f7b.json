{"status":"1","message":"OK","result":[{"SourceCode":"{\"hxbExchange.sol\":{\"content\":\"//HXB_EXCHANGE.sol\\r\\n\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface HXB {\\r\\n    function mintHXB (uint256 value, address receiver)\\r\\n        external\\r\\n    returns (bool);\\r\\n    \\r\\n    function mintRatio() external pure returns (uint256);//hxb\\r\\n    function mintBlock() external pure returns (bool);//hxy/hxb\\r\\n   // uint256 mintRatio;\\r\\n   // bool mintBlock;\\r\\n}\\r\\n\\r\\n//Uniswap v2 interface\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n  function symbol() external pure returns (string memory);\\r\\n  function decimals() external pure returns (uint8);\\r\\n  function totalSupply() external view returns (uint);\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n      address indexed sender,\\r\\n      uint amount0In,\\r\\n      uint amount1In,\\r\\n      uint amount0Out,\\r\\n      uint amount1Out,\\r\\n      address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n  function skim(address to) external;\\r\\n  function sync() external;\\r\\n}\\r\\n\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract Events {\\r\\n\\r\\n    //when a user transforms HEX to HXB\\r\\n    event HexTransform (\\r\\n        uint hexAmt,\\r\\n        uint hxyAmt,\\r\\n        address indexed transformer\\r\\n    );\\r\\n    \\r\\n    //when a user transforms ETH to HXB\\r\\n    event EthTransform (\\r\\n        uint ethAmt,\\r\\n        uint hxyAmt,\\r\\n        address indexed transformer\\r\\n    );\\r\\n    \\r\\n    //when a user transforms HXY to HXB\\r\\n    event HxyTransform (\\r\\n        uint ethAmt,\\r\\n        uint hxyAmt,\\r\\n        address indexed transformer\\r\\n    );\\r\\n    \\r\\n    //when a users ref bonus gets locked\\r\\n    event RefLock(\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n    \\r\\n    event RefUnlock(\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    //when transformed tokens get locked\\r\\n    event TransformLock(\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n    \\r\\n    event TransformUnlock(\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n    \\r\\n    event MultisigSet(\\r\\n        address indexed wallet\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HXBTRANSFORM CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HXBTRANSFORM is Events {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    //uniswap setup\\r\\n    address public factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    address public routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    //address public uniHXBETH = 0xaDEA645907Dbe2b9BCB7B102695Ad0C321f6b40c;\\r\\n    address public uniHEXHXY = 0x8081Daa61DC0fb980Ad6bB61f51461877EC8dc7A;\\r\\n    address public uniHEXHXB = 0x938Af9DE4Fe7Fd683F9eDf29E12457181E01Ca46;\\r\\n    //address public uniHXBHXY = 0x7a1Bb83A28203636F1cd75B6Fac54d4a8dff0F50;\\r\\n    address public uniHEXETH = 0x55D5c232D921B9eAA6b37b5845E439aCD04b4DBa;\\r\\n    \\r\\n    IUniswapV2Pair internal uniHexHxyInterface = IUniswapV2Pair(uniHEXHXY);\\r\\n    IUniswapV2Pair internal uniHexHxbInterface = IUniswapV2Pair(uniHEXHXB);\\r\\n    //IUniswapV2Pair internal uniHxbHxyInterface = IUniswapV2Pair(uniHXBHXY);\\r\\n    IUniswapV2Pair internal uniHexEthInterface = IUniswapV2Pair(uniHEXETH);\\r\\n    \\r\\n    IUniswapV2Router02 internal uniV2Router = IUniswapV2Router02(routerAddress);\\r\\n    \\r\\n    //hex contract setup\\r\\n    address internal hexAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\\r\\n    IERC20 internal hexInterface = IERC20(hexAddress);\\r\\n    \\r\\n    //hxy contract setup\\r\\n    address internal hxyAddress = 0xf3A2ace8e48751c965eA0A1D064303AcA53842b9;\\r\\n    IERC20 internal hxyInterface = IERC20(hxyAddress);\\r\\n    \\r\\n    //hxb contract setup\\r\\n    address internal hxbAddress = 0x9BB6fd000109E24Eb38B0Deb806382fF9247E478;\\r\\n    IERC20 internal hxbInterface = IERC20(hxbAddress);\\r\\n    HXB internal hxbControl = HXB(hxbAddress);\\r\\n    \\r\\n    address payable public liquidityBuyback = 0xf72842821c58aDe72EDa5ec5399B959b499d4AA4;\\r\\n    address public hexDividendContract = 0x7d68C0321cf6B3A12E6e5D5ABbAA8F2A13d77FDd;\\r\\n    address public hxyDividendContract = 0x8530261684C0549D5E85A30934e30D60C46AA8a1;\\r\\n    //transform room\\r\\n    bool public roomActive;\\r\\n    uint public totalHexTransformed = 0;\\r\\n    uint public totalEthTransformed = 0;\\r\\n    uint public totalHxyTransformed = 0;\\r\\n    uint public totalHxbMinted = 0;\\r\\n    uint private ethLiquidity = 0;\\r\\n    uint private hexLiquidity = 0;\\r\\n    uint private hxyLiquidity = 0;\\r\\n    uint private ethDivs = 0;\\r\\n    uint private hexDivs = 0;\\r\\n    uint private hxyDivs = 0;\\r\\n    \\r\\n    //referral lock\\r\\n    uint public totalRefLocked = 0;\\r\\n    mapping (address =\\u003e uint) public refLockedBalances; //balance of referral HXB locked till maxSupply\\r\\n    uint public totalTransformLocked = 0;\\r\\n    mapping (address =\\u003e uint) public transformLockedBalances; // balance of 50% transformed HXB locked till maxSupply\\r\\n    \\r\\n    //admin\\r\\n    address payable internal _p1 = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39;\\r\\n    address payable internal _p2 = 0xD64FF89558Cd0EA20Ae7aA032873d290801865f3;\\r\\n    \\r\\n    bool private multisigSet;\\r\\n    \\r\\n    bool private _sync;\\r\\n    \\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    mapping (address =\\u003e Transformed) public transformed;\\r\\n\\r\\n    struct Transformed{\\r\\n        uint256 hexTransformed;\\r\\n        uint256 ethTransformed;\\r\\n        uint256 usdcTransformed;\\r\\n        uint256 hxyTransformed;\\r\\n        uint256 hxbMinted;\\r\\n        uint256 hxbRefMinted;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!_sync, \\\"Sync lock\\\");\\r\\n        _sync = true;\\r\\n        _;\\r\\n        _sync = false;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        admins[_p1] = true;\\r\\n        admins[_p2] = true;\\r\\n        admins[msg.sender] = true;\\r\\n    }\\r\\n \\r\\n    receive() external payable{\\r\\n        //\\r\\n    }\\r\\n\\r\\n    function pushEthLiquidity()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        //get price \\r\\n        (uint reserve0, uint reserve1,) = uniHexEthInterface.getReserves();\\r\\n        uint _hex = uniV2Router.quote(ethLiquidity, reserve0, reserve1);\\r\\n        //get price \\r\\n        (uint _reserve0, uint _reserve1,) = uniHexHxbInterface.getReserves();\\r\\n        uint hxb = uniV2Router.quote(_hex, _reserve0, _reserve1);\\r\\n        //mint\\r\\n        require(hxbControl.mintHXB(hxb.mul(hxbControl.mintRatio()), address(this)), \\\"could not mint HXB\\\");\\r\\n        //send\\r\\n        liquidityBuyback.transfer(ethLiquidity);\\r\\n        hxbInterface.transfer(liquidityBuyback, hxb);\\r\\n        //reset\\r\\n        ethLiquidity = 0;\\r\\n    }\\r\\n    \\r\\n    function pushHexLiquidity()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        //get price \\r\\n        (uint reserve0, uint reserve1,) = uniHexHxbInterface.getReserves();\\r\\n        uint hxb = uniV2Router.quote(hexLiquidity, reserve0, reserve1);\\r\\n        //mint\\r\\n        require(hxbControl.mintHXB(hxb.mul(hxbControl.mintRatio()), address(this)), \\\"could not mint HXB\\\");\\r\\n        //send\\r\\n        hexInterface.transfer(liquidityBuyback, hexLiquidity);\\r\\n        hxbInterface.transfer(liquidityBuyback, hxb);\\r\\n        //reset\\r\\n        hexLiquidity = 0;\\r\\n    }\\r\\n    \\r\\n    function pushHxyLiquidity()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        //get price \\r\\n        (uint reserve0, uint reserve1,) = uniHexHxyInterface.getReserves();\\r\\n        uint _hex = uniV2Router.quote(hxyLiquidity, reserve0, reserve1);\\r\\n        //gett price \\r\\n        (uint _reserve0, uint _reserve1,) = uniHexHxbInterface.getReserves();\\r\\n        uint hxb = uniV2Router.quote(_hex, _reserve0, _reserve1);\\r\\n        //mint\\r\\n        require(hxbControl.mintHXB(hxb.mul(hxbControl.mintRatio()), address(this)), \\\"could not mint HXB\\\");\\r\\n        //send\\r\\n        hxyInterface.transfer(liquidityBuyback, hxyLiquidity);\\r\\n        hxbInterface.transfer(liquidityBuyback, hxb);\\r\\n        //reset\\r\\n        hxyLiquidity = 0;\\r\\n    }\\r\\n    \\r\\n    function pushAllLiquidity()\\r\\n        public\\r\\n    {\\r\\n        if(ethLiquidity \\u003e 0){\\r\\n            pushEthLiquidity();\\r\\n        }\\r\\n        if(hexLiquidity \\u003e 0){\\r\\n            pushHexLiquidity();\\r\\n        }   \\r\\n        if(hxyLiquidity \\u003e 0){\\r\\n            pushHxyLiquidity();\\r\\n        }   \\r\\n    }\\r\\n    \\r\\n    function pushDivs()\\r\\n        public\\r\\n    {\\r\\n        if(ethDivs \\u003e 0){\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = uniV2Router.WETH();\\r\\n            path[1] = address(hexAddress);\\r\\n            //buy hex with eth, recipient is div contract\\r\\n            uniV2Router.swapExactETHForTokens{value:ethDivs}(0, path, hexDividendContract, now.add(800));\\r\\n            ethDivs = 0;\\r\\n        }\\r\\n        if(hexDivs \\u003e 0){\\r\\n            //send hex to div contract\\r\\n            hexInterface.transfer(hexDividendContract, hexDivs);\\r\\n            hexDivs = 0;\\r\\n        }\\r\\n        if(hxyDivs \\u003e 0){\\r\\n            //send hxy to div contract\\r\\n            hxyInterface.transfer(hxyDividendContract, hxyDivs);\\r\\n            hxyDivs = 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //transforms ETH to HXB @ uniswap rate\\r\\n    function transformETH(address ref)//Approval needed\\r\\n        public\\r\\n        payable\\r\\n        synchronized\\r\\n    {\\r\\n        require(roomActive, \\\"transform room not active\\\");\\r\\n        require(msg.value \\u003e= 100, \\\"value too low\\\");\\r\\n        //allocate funds\\r\\n        ethLiquidity += msg.value.mul(60).div(100);//60%\\r\\n        ethDivs += msg.value.mul(40).div(100);//40%\\r\\n        //get HEX to ETH price\\r\\n        (uint reserve0, uint reserve1,) = uniHexEthInterface.getReserves();\\r\\n        uint _hex = uniV2Router.quote(msg.value, reserve0, reserve1);\\r\\n        //get HEX to HXB price \\r\\n        (uint _reserve0, uint _reserve1,) = uniHexHxbInterface.getReserves();\\r\\n        uint hxb = uniV2Router.quote(_hex, _reserve0, _reserve1);\\r\\n        require(_hex \\u003c= _reserve0.div(10), \\\"transform value too high\\\");\\r\\n        uint256 mintRatio = hxbControl.mintRatio();//adjust for changing dapp mintratio by multiplying first before division in HXB contract\\r\\n        \\r\\n        if(ref != address(0))//ref\\r\\n        {\\r\\n            uint refBonus = hxb.div(10);\\r\\n            require(hxbControl.mintHXB(hxb.add(refBonus).mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            //global\\r\\n            totalHxbMinted += hxb.add(refBonus);\\r\\n            //user\\r\\n            transformed[ref].hxbRefMinted += refBonus;\\r\\n            //lock +10% to referrer\\r\\n            LockRefTokens(refBonus, ref);\\r\\n        }\\r\\n        else{//no ref\\r\\n            require(hxbControl.mintHXB(hxb.mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            totalHxbMinted += hxb;\\r\\n        }\\r\\n        \\r\\n        totalEthTransformed += msg.value;\\r\\n        transformed[msg.sender].ethTransformed += msg.value;\\r\\n        transformed[msg.sender].hxbMinted += hxb;\\r\\n        LockTransformTokens(hxb.div(2), msg.sender);//lock 50% HXB\\r\\n        hxbInterface.transfer(msg.sender, hxb.div(2));//transfer 50% HXB\\r\\n        emit EthTransform(msg.value, hxb, msg.sender);\\r\\n    }\\r\\n    \\r\\n    //transforms HEX to HXB @ uniswap rate\\r\\n    function transformHEX(uint hearts, address ref)//Approval needed\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(roomActive, \\\"transform room not active\\\");\\r\\n        require(hearts \\u003e= 100, \\\"value too low\\\");\\r\\n        require(hexInterface.transferFrom(msg.sender, address(this), hearts), \\\"Transfer failed\\\");//send hex from user to contract\\r\\n        //allocate funds\\r\\n        hexLiquidity += hearts.mul(60).div(100);//60%\\r\\n        hexDivs += hearts.mul(40).div(100);//40%\\r\\n        //get HXB price\\r\\n        (uint reserve0, uint reserve1,) = uniHexHxbInterface.getReserves();\\r\\n        uint hxb = uniV2Router.quote(hearts, reserve0, reserve1);\\r\\n        require(hearts \\u003c= reserve0.div(10), \\\"transform value too high\\\");\\r\\n        uint256 mintRatio = hxbControl.mintRatio();//adjust for changing dapp mintratio by multiplying first before division in HXB contract\\r\\n        \\r\\n        if(ref != address(0))//ref\\r\\n        {\\r\\n            uint refBonus = hxb.div(10);\\r\\n            require(hxbControl.mintHXB(hxb.add(refBonus).mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            //global\\r\\n            totalHxbMinted += hxb.add(refBonus);\\r\\n            //user\\r\\n            transformed[ref].hxbRefMinted += refBonus;\\r\\n            //lock +10% to referrer\\r\\n            LockRefTokens(refBonus, ref);\\r\\n        }\\r\\n        else{//no ref\\r\\n            require(hxbControl.mintHXB(hxb.mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            totalHxbMinted += hxb;\\r\\n        }\\r\\n        \\r\\n        totalHexTransformed += hearts;\\r\\n        transformed[msg.sender].hexTransformed += hearts;\\r\\n        transformed[msg.sender].hxbMinted += hxb;\\r\\n        LockTransformTokens(hxb.div(2), msg.sender);//lock 50% HXB\\r\\n        hxbInterface.transfer(msg.sender, hxb.div(2));//transfer 50% HXB\\r\\n        emit HexTransform(hearts, hxb, msg.sender);\\r\\n    }\\r\\n    \\r\\n    //transforms HXY to HXB @ uniswap rate\\r\\n    function transformHXY(uint value, address ref)//Approval needed\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(roomActive, \\\"transform room not active\\\");\\r\\n        require(value \\u003e= 100, \\\"value too low\\\");\\r\\n        require(hxyInterface.transferFrom(msg.sender, address(this), value), \\\"Transfer failed\\\");//send hex from user to contract\\r\\n        //allocate funds\\r\\n        hxyLiquidity += value.mul(60).div(100);//60%\\r\\n        hxyDivs += value.mul(40).div(100);//40%\\r\\n        //get HEX price\\r\\n        (uint reserve0, uint reserve1,) = uniHexHxyInterface.getReserves(); \\r\\n        uint _hex = uniV2Router.quote(value, reserve0, reserve1);\\r\\n        //get HXB price\\r\\n        (uint _reserve0, uint _reserve1,) = uniHexHxbInterface.getReserves(); \\r\\n        uint hxb = uniV2Router.quote(_hex, _reserve0, _reserve1);\\r\\n        require(_hex \\u003c= _reserve0.div(10), \\\"transform value too high\\\");\\r\\n        uint256 mintRatio = hxbControl.mintRatio();//adjust for changing dapp mintratio by multiplying first before division in HXB contract\\r\\n        \\r\\n        if(ref != address(0))//ref\\r\\n        {\\r\\n            uint refBonus = hxb.div(10);\\r\\n            require(hxbControl.mintHXB(hxb.add(refBonus).mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            //global\\r\\n            totalHxbMinted += hxb.add(refBonus);\\r\\n            //user\\r\\n            transformed[ref].hxbRefMinted += refBonus;\\r\\n            //lock +10% to referrer\\r\\n            LockRefTokens(refBonus, ref);\\r\\n        }\\r\\n        else{//no ref\\r\\n            require(hxbControl.mintHXB(hxb.mul(mintRatio), address(this)), \\\"Mint failed\\\");//mint hxb from contract to this contract\\r\\n            totalHxbMinted += hxb;\\r\\n        }\\r\\n        \\r\\n        totalHxyTransformed += value;\\r\\n        transformed[msg.sender].hxyTransformed += value;\\r\\n        transformed[msg.sender].hxbMinted += hxb;\\r\\n        LockTransformTokens(hxb.div(2), msg.sender);//lock 50% HXB\\r\\n        hxbInterface.transfer(msg.sender, hxb.div(2));//transfer 50% HXB\\r\\n        emit HxyTransform(value, hxb, msg.sender);\\r\\n    }\\r\\n\\r\\n    //lock referral HXB tokens to contract\\r\\n    function LockRefTokens(uint amt, address ref)\\r\\n        internal\\r\\n    {\\r\\n        //update balances\\r\\n        refLockedBalances[ref] = refLockedBalances[ref].add(amt);\\r\\n        totalRefLocked = totalRefLocked.add(amt);\\r\\n        emit RefLock(ref, amt);\\r\\n    }\\r\\n\\r\\n    //unlock referral HXB tokens from contract\\r\\n    function UnlockRefTokens()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(refLockedBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient locked balance\\\");//ensure user has enough locked funds\\r\\n        require(isLockFinished(), \\\"tokens cannot be unlocked yet. hxb maxsupply not yet reached\\\");\\r\\n        uint amt = refLockedBalances[msg.sender];\\r\\n        refLockedBalances[msg.sender] = 0;\\r\\n        totalRefLocked = totalRefLocked.sub(amt);\\r\\n        hxbInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit RefUnlock(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //lock transformed HXB tokens to contract\\r\\n    function LockTransformTokens(uint amt, address transformer)\\r\\n        internal\\r\\n    {\\r\\n        //update balances\\r\\n        transformLockedBalances[transformer] = transformLockedBalances[transformer].add(amt);\\r\\n        totalTransformLocked = totalTransformLocked.add(amt);\\r\\n        emit TransformLock(transformer, amt);\\r\\n    }\\r\\n    \\r\\n    //unlock transformed HXB tokens from contract\\r\\n    function UnlockTransformTokens()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(transformLockedBalances[msg.sender] \\u003e 0,\\\"Error: unsufficient locked balance\\\");//ensure user has enough locked funds\\r\\n        require(isLockFinished(), \\\"tokens cannot be unlocked yet. hxb maxsupply not yet reached\\\");\\r\\n        uint amt = transformLockedBalances[msg.sender];\\r\\n        transformLockedBalances[msg.sender] = 0;\\r\\n        totalTransformLocked = totalTransformLocked.sub(amt);\\r\\n        hxbInterface.transfer(msg.sender, amt);//make transfer\\r\\n        emit TransformUnlock(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //\\r\\n    function isLockFinished()\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        return hxbControl.mintBlock();\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n    \\r\\n    //toggle transform room on/off\\r\\n    function toggleRoundActive(bool active)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        if(active){\\r\\n            roomActive = true;\\r\\n        }\\r\\n        else{\\r\\n            roomActive = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setLiquidityBuyback(address payable _multiSig)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(!multisigSet);\\r\\n        liquidityBuyback = _multiSig;\\r\\n        multisigSet = true;\\r\\n        emit MultisigSet(_multiSig);\\r\\n    }\\r\\n    \\r\\n    function setHexEthExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniHEXETH = exchange;\\r\\n        uniHexEthInterface = IUniswapV2Pair(uniHEXETH);\\r\\n    }\\r\\n    \\r\\n    function setHexHxbExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniHEXHXB = exchange;\\r\\n        uniHexHxbInterface = IUniswapV2Pair(uniHEXHXB);\\r\\n    }\\r\\n    \\r\\n    function setHexHxyExchange(address exchange)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uniHEXHXY = exchange;\\r\\n        uniHexHxyInterface = IUniswapV2Pair(uniHEXHXY);\\r\\n    }\\r\\n    \\r\\n}\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transformer\",\"type\":\"address\"}],\"name\":\"EthTransform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transformer\",\"type\":\"address\"}],\"name\":\"HexTransform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hxyAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transformer\",\"type\":\"address\"}],\"name\":\"HxyTransform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"MultisigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransformLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransformUnlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UnlockRefTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnlockTransformTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexDividendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyDividendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLockFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyback\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushAllLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushDivs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushEthLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushHexLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushHxyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refLockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHexEthExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHexHxbExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"setHexHxyExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_multiSig\",\"type\":\"address\"}],\"name\":\"setLiquidityBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"toggleRoundActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHexTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxbMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHxyTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransformLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"transformETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"transformHEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"transformHXY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transformLockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hexTransformed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethTransformed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcTransformed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxyTransformed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxbMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hxbRefMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniHEXETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniHEXHXB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniHEXHXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HXBTRANSFORM","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0749c9dee73b2a04cb8b5a646f4055e0276fe97c834000ee789778898d661c00"}]}