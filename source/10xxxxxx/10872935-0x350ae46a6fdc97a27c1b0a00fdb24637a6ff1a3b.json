{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Lend/ProtocolInterface.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\nabstract contract ProtocolInterface {\r\n    function deposit(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public virtual;\r\n\r\n    function withdraw(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public virtual;\r\n}\r\n\r\n// File: contracts/interfaces/ERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\ninterface ERC20 {\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _src, address indexed _dst, uint256 _amount);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    // function decimals() external view returns (uint256 digits);\r\n\r\n   \r\n}\r\n\r\n// File: contracts/interfaces/CTokenInterface.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\n\r\n\r\nabstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    function mint() external virtual payable;\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\r\n        external\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral\r\n    ) external virtual returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/Lend/compound/CompoundProtocol.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice CompoundProtocol\r\n * @author Solidefi\r\n */\r\ncontract CompoundProtocol is ProtocolInterface {\r\n    CTokenInterface public cTokenContract;\r\n\r\n    /**\r\n     * @dev Deposit DAI to compound protocol return cDAI to user proxy wallet.\r\n     * @param _user User proxy wallet address.\r\n     * @param _amount Amount of DAI.\r\n     */\r\n\r\n    function deposit(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public override {\r\n        cTokenContract = CTokenInterface(_cToken);\r\n\r\n        require(ERC20(_token).transferFrom(_user, address(this), _amount), \"Nothing to deposit\");\r\n\r\n        ERC20(_token).approve(_cToken, uint256(-1));\r\n        require(cTokenContract.mint(_amount) == 0, \"Failed to mint\");\r\n        cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     *@dev Withdraw DAI from Compound protcol return it to users EOA\r\n     *@param _user User proxy wallet address.\r\n     *@param _amount Amount of DAI.\r\n     */\r\n    function withdraw(\r\n        address _user,\r\n        uint256 _amount,\r\n        address _token,\r\n        address _cToken\r\n    ) public override {\r\n        cTokenContract = CTokenInterface(_cToken);\r\n        require(\r\n            cTokenContract.transferFrom(_user, address(this), ERC20(_cToken).balanceOf(_user)),\r\n            \"Nothing to withdraw\"\r\n        );\r\n        cTokenContract.approve(_cToken, uint256(-1));\r\n        require(cTokenContract.redeemUnderlying(_amount) == 0, \"Reedem Failed\");\r\n        uint256 cDaiBalance = cTokenContract.balanceOf(address(this));\r\n        if (cDaiBalance > 0) {\r\n            cTokenContract.transfer(_user, cDaiBalance);\r\n        }\r\n        ERC20(_token).transfer(_user, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"cTokenContract\",\"outputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundProtocol","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5d9250f23e17fd1999dc653c4813922133e3c2bad5c636fff9bcab39ba64b9a3"}]}