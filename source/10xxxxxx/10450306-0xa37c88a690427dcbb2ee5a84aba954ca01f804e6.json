{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-17\r\n*/\r\n\r\npragma solidity >=0.4.16 <0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Erc20Interface {\r\n  function transfer(address _to, uint256 _value) external;\r\n  function transferFrom(address _from, address _to, uint256 _value) external;\r\n  mapping (address => uint256) public balanceOf;\r\n  function destruction(uint256 _value) external;\r\n}\r\ncontract AGLASS is Ownable{\r\n    using SafeMath for uint256;\r\n    //ANA代币合约地址\r\n    address public anaContract = 0x4B473E7a249CBEa15921AcB2CBcBD09160845fe3;\r\n    //ANA发行总量\r\n    uint256 public anaTotalSupply = 8000000000000000000000000;\r\n    //ANS总产生的挖矿\r\n    uint256 public anaRewardTotal;\r\n\r\n\r\n    //ANB代币合约地址\r\n    address public anbContract = 0xeDb0942Ea9d99589007a813db3dEFCD280ca8Bc2;\r\n    //ANB发行总量\r\n    uint256 public anbTotalSupply = 7000000000000000000000000;\r\n    //ANB总产生的挖矿\r\n    uint256 public anbRewardTotal;\r\n\r\n\r\n    //ANC代币合约地址\r\n    address public ancContract = 0x772482fC3844Ff020f6eF9cE3eC48FE1d02F3cFF;\r\n    //ANC发行总量\r\n    uint256 public ancTotalSupply = 6000000000000000000000000;\r\n    //ANC总产生的挖矿\r\n    uint256 public ancRewardTotal;\r\n\r\n\r\n    //ANT代币合约地址\r\n    address public antContract = 0x39450E66567447F6044B8e548899D0bc48f6772A;\r\n    //ANT发行总量\r\n    uint256 public antTotalSupply = 5000000000000000000000000;\r\n    //ANT总产生的挖矿\r\n    uint256 public antRewardTotal;\r\n\r\n\r\n     //usdt代币合约地址\r\n    address public usdtContract = 0xdac17f958d2ee523a2206206994597c13d831ec7;\r\n    uint32 public nowRound = 1;//当前阶段 \r\n    uint32 public smallNowRound = 1;//阶段小期 \r\n    mapping(address=>mapping(uint256=>TransModi)) public m_trans;\r\n    mapping(address=>uint8) public isTrans;\r\n    //每个阶段累计产的货币数量\r\n    mapping(uint32=>uint256) public roundRewardTotal;\r\n    modifier authority(uint256 _today) {\r\n        require(m_trans[msg.sender][_today].isAuthority);\r\n        _;\r\n    }\r\n    modifier erc20s(address _contractAddress){\r\n        require(_contractAddress==anaContract\r\n        ||_contractAddress==anbContract\r\n        ||_contractAddress==ancContract\r\n        ||_contractAddress==antContract\r\n        ||_contractAddress==usdtContract);\r\n        _;\r\n    }\r\n    struct TransModi{\r\n        address erc20Contract;\r\n        address[] toAddrrs;\r\n        uint256[] amounts;\r\n        bool isAuthority;\r\n\r\n    }\r\n    //矿机购买记录结构\r\n    struct PollRecord{\r\n        //矿机类型\r\n        uint32 minerTypeId;\r\n        //支出的货币数量\r\n        uint256 num;\r\n        //购买的时间\r\n        uint32 time;\r\n        //购买时的阶段\r\n        uint32 round;\r\n    }\r\n    mapping(address=>bool) authdestruction;//币种销毁计划授权\r\n    struct BuyCoinType{\r\n        //兑换矿机所消耗币种合约地址1\r\n        address contaddr1;\r\n        //兑换矿机种所消耗币种占比值1\r\n        uint8 num1;\r\n        //兑换矿机所消耗币种合约地址2\r\n        address contaddr2;\r\n        //兑换矿机种所消耗币种占比值2\r\n        uint8 num2;\r\n        //兑换矿机所消耗币种合约地址3\r\n        address contaddr3;\r\n        //兑换矿机种所消耗币种占比值2\r\n        uint8 num3;\r\n    }\r\n    //存储每个阶段每一期间兑换矿机所消耗币种 \r\n    mapping(uint8=>mapping(uint8=>BuyCoinType)) public buyCoinTypes;\r\n    uint8 public s = 1;\r\n     // 矿机类型结构\r\n    struct MinerType{\r\n        //矿机价格\r\n        uint256 price;\r\n        //矿机名称 \r\n        string minerName;\r\n        //是否已开放\r\n        uint8 status;\r\n    }\r\n    \r\n    MinerType[] public minerTypes;\r\n    Round[] public rounds;\r\n    PollRecord[] public pollRecords;\r\n    //存储购买矿机\r\n    mapping(address=>uint256) public mpollRecords;\r\n    //阶段结构\r\n    struct Round{\r\n        //购买消耗的货币合约地址\r\n        address buyContractAddr;\r\n        //产出的货币合约地址\r\n        address rewardContractAddr;\r\n    }\r\n    function addMinerType(uint32 _price,string _minerName,uint8 _status)public onlyOwner{\r\n        minerTypes.push(MinerType(_price,_minerName,_status));\r\n    }\r\n    function sets(uint8 _s)public{\r\n        require(isTrans[msg.sender]!=0);\r\n        s =_s;\r\n    }\r\n    //更新当前阶段\r\n    function updateRound()public {\r\n        //如果ANA产出收益数量<ANA初始发行数量(800w)*0.51 则进入第一阶段 \r\n        if(anaRewardTotal<anaTotalSupply*51/100){\r\n            //设置收益的币种合约地址为ANA \r\n            erc20Interface =  Erc20Interface(anaContract);\r\n            //将当前阶段值设置为:1\r\n            nowRound = 1;\r\n            //如果ANA产出收益数量<ANA初始发行数量(800w)*0.51*0.5 则进入第一阶段的第一期 \r\n            if(anaRewardTotal<anaTotalSupply*51/100*50/100){\r\n                //将当前小阶段值设置为:1\r\n                smallNowRound = 1;\r\n                //设置购买矿机消耗币种usdt:占比值:1 即100% (因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[1][1] = BuyCoinType(usdtContract,10,0,0,0,0);\r\n            //否则进入第一阶段的第二期     \r\n            }else{\r\n                //将当前小阶段值设置为:2\r\n                smallNowRound = 2;\r\n                //设置购买矿机消耗币种ana:占比值:1 即100% (因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[1][2] = BuyCoinType(anaContract,10,0,0,0,0);\r\n                //授权ANA销毁计划\r\n                authdestruction[anaContract] = true;\r\n            }\r\n        //如果ANB产出收益数量<ANB初始发行数量(700w)*0.51 则进入第二阶段 \r\n        }else if(anbRewardTotal<anbTotalSupply*51/100){\r\n            //设置收益的币种合约地址为ANB\r\n            erc20Interface =  Erc20Interface(anbContract);\r\n            //将当前阶段值设置为:2\r\n            nowRound = 2;\r\n            //如果ANB产出收益数量<ANB初始发行数量(700w)*0.51*0.5 则进入第一期 \r\n            if(anbRewardTotal<anbTotalSupply*51/100*50/100){\r\n                //将当前小阶段值设置为:1\r\n                smallNowRound = 1;\r\n                //设置购买矿机消耗币种ana:占比值:1 即100% (因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[2][1] = BuyCoinType(anaContract,10,0,0,0,0);\r\n                //授权ANA销毁计划\r\n                authdestruction[anaContract] = true;\r\n            //否则进入第二期     \r\n            }else{\r\n                //将当前小阶段值设置为:2\r\n                smallNowRound = 2;\r\n                //设置购买矿机消耗币种ana:占比值:0.5 即50%,anb:0.5 即50%(因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[2][2] = BuyCoinType(anaContract,5,anbContract,5,0,0);\r\n                //授权ANA销毁计划\r\n                authdestruction[anaContract] = true;\r\n                //授权ANB销毁计划\r\n                authdestruction[anbContract] = true;\r\n            }\r\n         //如果ANC产出收益数量<ANC初始发行数量(600w)*0.51 则进入第三阶段 \r\n        } else if(ancRewardTotal<ancTotalSupply*51/100){\r\n            //设置收益的币种合约地址为ANC\r\n            erc20Interface =  Erc20Interface(ancContract);\r\n            //将当前阶段值设置为:3\r\n            nowRound = 3;\r\n            //如果ANC产出收益数量<ANC初始发行数量(600w)*0.51*0.5 则进入第一期 \r\n            if(ancRewardTotal<ancTotalSupply*51/100*50/100){\r\n                //将当前小阶段值设置为:1\r\n                smallNowRound = 1;\r\n                //设置购买矿机消耗币种ana:占比值:0.5 即50%,anb:0.5 即50%(因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[3][1] = BuyCoinType(anaContract,5,anbContract,5,0,0);\r\n                //授权ANA销毁计划\r\n                authdestruction[anaContract] = true;\r\n                //授权ANB销毁计划\r\n                authdestruction[anbContract] = true;\r\n            //否则进入第二期     \r\n            }else{\r\n                //将当前小阶段值设置为:2\r\n                smallNowRound = 2;\r\n                //设置购买矿机消耗币种ana:占比值:0.2 即20%,anb:0.3 即30%,anc:0.5 即50%(因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n                buyCoinTypes[3][1] = BuyCoinType(anaContract,2,anbContract,3,ancContract,5);\r\n                //授权FPS销毁计划\r\n                authdestruction[anaContract] = true;\r\n                //授权PPS销毁计划\r\n                authdestruction[anbContract] = true;\r\n                //授权PSS销毁计划\r\n                authdestruction[ancContract] = true;\r\n            }\r\n        //如果ANT产出收益数量<ANT初始发行数量(500w)则进入第4阶段\r\n        }else if(antRewardTotal<antTotalSupply){\r\n            //设置收益的币种合约地址为ANT\r\n            erc20Interface =  Erc20Interface(antContract);\r\n            //将当前阶段值设置为:4\r\n            nowRound = 4;\r\n            //当前小阶段值不予区分一期或二期 将0代替 \r\n            smallNowRound = 0;\r\n            //设置购买矿机消耗币种ana:占比值:0.2 即20%,anb:0.3 即30%,anc:0.5 即50%(因小数点问题 此处以*10代替 最终计算根据币种价格除10计算 )\r\n            buyCoinTypes[3][1] = BuyCoinType(anaContract,2,anbContract,3,ancContract,5);\r\n            //授权ANA销毁计划\r\n            authdestruction[anaContract] = true;\r\n            //授权ANB销毁计划\r\n            authdestruction[anbContract] = true;\r\n            //授权ANC销毁计划\r\n            authdestruction[ancContract] = true;\r\n        //上述条件均不符合意味结束   \r\n        }else{\r\n             //将当前阶段值设置为:0 代替结束\r\n            nowRound = 0;\r\n        } \r\n    }\r\n   \r\n    function getNowRound()public view returns(uint32){\r\n        return nowRound;\r\n    }\r\n    function settIsTrans(address _addr,uint8 n)public onlyOwner{\r\n        isTrans[_addr]=n;\r\n    }\r\n    function getRewardTotal(uint32 _round)public view returns(uint256){\r\n        if(_round==0||_round==1){\r\n            return anaRewardTotal;\r\n        }else if(_round==2){\r\n            return anbRewardTotal;\r\n        }else if(_round==3){\r\n            return ancRewardTotal;\r\n        }else if(_round==4){\r\n            return antRewardTotal;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    //购买矿机\r\n    function buyMiner(uint32 _minerTypeId,uint256 coinToUsdt_price)public returns(bool){\r\n        //校验矿机是否已开放\r\n        require(minerTypes[_minerTypeId].status!=0);\r\n        //校验是否已购过矿机\r\n        require(mpollRecords[msg.sender]==0);\r\n        mpollRecords[msg.sender] = pollRecords.push(\r\n            PollRecord(\r\n                _minerTypeId,\r\n                minerTypes[_minerTypeId].price/coinToUsdt_price,\r\n                uint32(now),\r\n                nowRound\r\n            )\r\n        )-1;\r\n    }\r\n    //授权buy\r\n    function proxyBuyMiner(address _addr,uint32 _minerTypeId,uint256 coinToUsdt_price)public returns(bool){\r\n        //校验矿机是否已开放\r\n        require(minerTypes[_minerTypeId].status!=0);\r\n        //校验是否已购过矿机\r\n        require(mpollRecords[_addr]==0);\r\n        require(isTrans[msg.sender]!=0);\r\n        mpollRecords[_addr] = pollRecords.push(\r\n            PollRecord(\r\n                _minerTypeId,\r\n                minerTypes[_minerTypeId].price/coinToUsdt_price,\r\n                uint32(now),\r\n                nowRound\r\n            )\r\n        )-1;\r\n    }\r\n    //升级矿机\r\n    function upMyMiner(uint256 coinToUsdt_price)public returns(bool){\r\n        require(mpollRecords[msg.sender]!=0);\r\n        //矿机是否已达到最高\r\n        require(pollRecords[mpollRecords[msg.sender]].minerTypeId<minerTypes.length);\r\n        pollRecords[mpollRecords[msg.sender]].minerTypeId++;\r\n        pollRecords[mpollRecords[msg.sender]].num = minerTypes[pollRecords[mpollRecords[msg.sender]].minerTypeId].price/coinToUsdt_price;\r\n        return true;\r\n    }\r\n    //授权up\r\n    function proxyupMyMiner(address _addr,uint256 coinToUsdt_price)public returns(bool){\r\n        require(mpollRecords[_addr]!=0);\r\n        //矿机是否已达到最高\r\n        require(pollRecords[mpollRecords[_addr]].minerTypeId<minerTypes.length);\r\n        require(isTrans[msg.sender]!=0);\r\n        pollRecords[mpollRecords[_addr]].minerTypeId++;\r\n        pollRecords[mpollRecords[_addr]].num = minerTypes[pollRecords[mpollRecords[_addr]].minerTypeId].price/coinToUsdt_price;\r\n        return true;\r\n    }\r\n    function getMyMiner()public view returns(\r\n        uint32,//矿机id\r\n        uint256,//消耗货币数量\r\n        uint32,//时间\r\n        uint32,//购买时所属轮次  \r\n        uint256,//矿机则算价格\r\n        string minerName//矿机名称\r\n    ){\r\n        return (\r\n        pollRecords[mpollRecords[msg.sender]].minerTypeId,\r\n        pollRecords[mpollRecords[msg.sender]].num,\r\n        pollRecords[mpollRecords[msg.sender]].time,\r\n        pollRecords[mpollRecords[msg.sender]].round,\r\n        minerTypes[pollRecords[mpollRecords[msg.sender]].minerTypeId].price,\r\n        minerTypes[pollRecords[mpollRecords[msg.sender]].minerTypeId].minerName\r\n        );\r\n    }\r\n    function getMyMiner2(address _addr)public view returns(\r\n        uint32,//矿机id\r\n        uint256,//消耗货币数量\r\n        uint32,//时间\r\n        uint32,//购买时所属轮次  \r\n        uint256,//矿机则算价格\r\n        string minerName //矿机名称\r\n    ){\r\n        return (\r\n        pollRecords[mpollRecords[_addr]].minerTypeId,\r\n        pollRecords[mpollRecords[_addr]].num,\r\n        pollRecords[mpollRecords[_addr]].time,\r\n        pollRecords[mpollRecords[_addr]].round,\r\n        minerTypes[pollRecords[mpollRecords[_addr]].minerTypeId].price,\r\n        minerTypes[pollRecords[mpollRecords[_addr]].minerTypeId].minerName\r\n        );\r\n    }\r\n    Erc20Interface erc20Interface;\r\n    \r\n    function _setErc20token(address _address)public onlyOwner erc20s(_address){\r\n        erc20Interface = Erc20Interface(_address);\r\n    }\r\n    function getErc20Balance()public view returns(uint){\r\n       return  erc20Interface.balanceOf(this);\r\n    }\r\n    function tanscoin(address _contaddr,address _addr,uint256 _num)public{\r\n        require(isTrans[msg.sender]!=0);\r\n        erc20Interface =  Erc20Interface(_contaddr);\r\n        erc20Interface.transfer(_addr,_num);\r\n    }\r\n    function transcoineth(uint256 _num)public onlyOwner{\r\n        msg.sender.transfer(_num);\r\n    }\r\n    function transferReward(\r\n    address addr1,uint256 num1,\r\n    address addr2,uint256 num2,\r\n    address addr3,uint256 num3,\r\n    address addr4,uint256 num4,\r\n    address addr5,uint256 num5,\r\n    address addr6,uint256 num6\r\n    ) public returns(bool){\r\n        require(isTrans[msg.sender]!=0);\r\n        if(s==0){\r\n            updateRound();\r\n        }\r\n        erc20Interface.transfer(addr1,num1);\r\n        erc20Interface.transfer(addr2,num2);\r\n        erc20Interface.transfer(addr3,num3);\r\n        erc20Interface.transfer(addr4,num4);\r\n        erc20Interface.transfer(addr5,num5);\r\n        erc20Interface.transfer(addr6,num6);\r\n        if(nowRound==0||nowRound==1){\r\n            anaRewardTotal=anaRewardTotal+num2+num3+num4+num5+num6+num1;\r\n        }else if(nowRound==2){\r\n            anbRewardTotal=anbRewardTotal+num2+num3+num4+num5+num6+num1;\r\n        }else if(nowRound==3){\r\n            ancRewardTotal=ancRewardTotal+num2+num3+num4+num5+num6+num1;\r\n        }else if(nowRound==4){\r\n            antRewardTotal=antRewardTotal+num2+num3+num4+num5+num6+num1;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    function addminerTypes(uint256 _price,string _minerName,uint8 _status)public onlyOwner{\r\n        minerTypes.push(MinerType(_price,_minerName,_status));\r\n    }\r\n    //初始化矿机类型\r\n    function initminerTypes()public onlyOwner{\r\n        minerTypes.push(MinerType(50000000000000000000,'MB-126',1));\r\n        minerTypes.push(MinerType(100000000000000000000,'MB-258',1));\r\n        minerTypes.push(MinerType(200000000000000000000,'MB-512',1));\r\n        minerTypes.push(MinerType(500000000000000000000,'GB-240',1));\r\n        minerTypes.push(MinerType(1000000000000000000000,'GB-500',1));\r\n        minerTypes.push(MinerType(2000000000000000000000,'GB-800',1));\r\n        minerTypes.push(MinerType(5000000000000000000000,'GB-960',1));\r\n    }\r\n    function setMinerTypePrice(uint256 _minerTypeId,uint256 _price)public onlyOwner{\r\n        require(minerTypes[_minerTypeId].price!=0);\r\n        minerTypes[_minerTypeId].price!=_price;\r\n    }\r\n    function setMinerTypeName(uint256 _minerTypeId,string _name)public onlyOwner{\r\n        require(minerTypes[_minerTypeId].price!=0);\r\n        minerTypes[_minerTypeId].minerName=_name;\r\n    }\r\n    function setMinerTypeStatus(uint256 _minerTypeId,uint8 _status)public onlyOwner{\r\n        require(minerTypes[_minerTypeId].price!=0);\r\n        minerTypes[_minerTypeId].status=_status;\r\n    }\r\n    function AGLASS() public {\r\n       erc20Interface = Erc20Interface(anaContract);\r\n       //设置矿机购买和产出的数字货币类型\r\n       rounds.push(Round(usdtContract,anaContract));\r\n       isTrans[msg.sender]=1;\r\n       initminerTypes();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"coinToUsdt_price\",\"type\":\"uint256\"}],\"name\":\"proxyupMyMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerTypes\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"minerName\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anbRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint32\"}],\"name\":\"getRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pollRecords\",\"outputs\":[{\"name\":\"minerTypeId\",\"type\":\"uint32\"},{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint32\"},{\"name\":\"round\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anaRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_s\",\"type\":\"uint8\"}],\"name\":\"sets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contaddr\",\"type\":\"address\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"tanscoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerTypeId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinerTypePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"n\",\"type\":\"uint8\"}],\"name\":\"settIsTrans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"transcoineth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"buyCoinTypes\",\"outputs\":[{\"name\":\"contaddr1\",\"type\":\"address\"},{\"name\":\"num1\",\"type\":\"uint8\"},{\"name\":\"contaddr2\",\"type\":\"address\"},{\"name\":\"num2\",\"type\":\"uint8\"},{\"name\":\"contaddr3\",\"type\":\"address\"},{\"name\":\"num3\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerTypeId\",\"type\":\"uint32\"},{\"name\":\"coinToUsdt_price\",\"type\":\"uint256\"}],\"name\":\"buyMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anbContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ancRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anbTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallNowRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_minerName\",\"type\":\"string\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"addminerTypes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"antContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anaContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initminerTypes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMyMiner2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"minerName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"s\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"buyContractAddr\",\"type\":\"address\"},{\"name\":\"rewardContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerTypeId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setMinerTypeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ancTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"num1\",\"type\":\"uint256\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"num2\",\"type\":\"uint256\"},{\"name\":\"addr3\",\"type\":\"address\"},{\"name\":\"num3\",\"type\":\"uint256\"},{\"name\":\"addr4\",\"type\":\"address\"},{\"name\":\"num4\",\"type\":\"uint256\"},{\"name\":\"addr5\",\"type\":\"address\"},{\"name\":\"num5\",\"type\":\"uint256\"},{\"name\":\"addr6\",\"type\":\"address\"},{\"name\":\"num6\",\"type\":\"uint256\"}],\"name\":\"transferReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"roundRewardTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerTypeId\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setMinerTypeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint32\"},{\"name\":\"_minerName\",\"type\":\"string\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"addMinerType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_minerTypeId\",\"type\":\"uint32\"},{\"name\":\"coinToUsdt_price\",\"type\":\"uint256\"}],\"name\":\"proxyBuyMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setErc20token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ancContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"m_trans\",\"outputs\":[{\"name\":\"erc20Contract\",\"type\":\"address\"},{\"name\":\"isAuthority\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getErc20Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinToUsdt_price\",\"type\":\"uint256\"}],\"name\":\"upMyMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mpollRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anaTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"minerName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AGLASS","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6b8cd88f242c7c162a502c3ea9a4c8769ad0473ba36edd992e5d28871b5ce67f"}]}