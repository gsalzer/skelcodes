{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// ProfitLineInc contract\r\ncontract DecentribeIntegration  {\r\n    using SafeMath for uint;\r\n    // params \r\n    uint256 public previousPrice;\r\n    uint256 public daibalance;// original dai balance\r\n    address payable tribe; //decentrice distribution pot;\r\n    // interfaces\r\n    UniswapExchangeInterface constant _swapDAI = UniswapExchangeInterface(0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667);// uniswap\r\n    PlincInterface constant hub_ = PlincInterface(0xd5D10172e8D8B84AC83031c16fE093cba4c84FC6);  // hubplinc\r\n    IIdleToken constant _idle = IIdleToken(0x78751B12Da02728F467A44eAc40F5cbc16Bd7934);         // idle\r\n    ERC20Interface constant _dai = ERC20Interface(0x6B175474E89094C44Da98b954EedeAC495271d0F);  //dai\r\n    \r\n    // Decentribe integration\r\n    function () external payable{} // needs for divs\r\n    function setApproval() public {\r\n        //using idle needs to have aproval before able to get idle tokens\r\n        // aprove idle address, amount to aprove\r\n        _dai.approve(0x78751B12Da02728F467A44eAc40F5cbc16Bd7934,1000000000000000000000000000000000000000000);\r\n        // approve uniswap\r\n        _dai.approve(0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667,1000000000000000000000000000000000000000000);\r\n    }\r\n    function mintIdles() public payable {\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 deadline = block.timestamp.add(100);\r\n        _swapDAI.ethToTokenSwapInput.value(ethBalance)(1,deadline);\r\n        uint256 myBalance = _dai.balanceOf(address(this));\r\n        uint256[] memory empty;\r\n        _idle.mintIdleToken(myBalance,empty);\r\n        daibalance = daibalance.add(myBalance);\r\n        previousPrice = _idle.tokenPrice();\r\n    }\r\n    function divsToHubp1() public {\r\n        //buy hub bonds\r\n        \r\n        // calculate divsToHub\r\n        uint256[] memory empty;\r\n        uint256 myBalance = daibalance;\r\n        uint256 idlebalance = _idle.balanceOf(address(this));\r\n        // fetch divs to contract (exitidle)\r\n        \r\n        _idle.redeemIdleToken(idlebalance, false,empty);// get all dai\r\n        _idle.mintIdleToken(myBalance,empty);// put back investment\r\n        // swap remaining dai to ether\r\n        uint256 daiBalance = _dai.balanceOf(address(this));\r\n        uint256 deadline = block.timestamp.add(100);\r\n        _swapDAI.tokenToEthSwapInput(daiBalance,1, deadline) ;\r\n        //\r\n        uint256 ethBalance = address(this).balance;\r\n        // buy bonds\r\n        hub_.buyBonds.value(ethBalance)(0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220);\r\n    }\r\n    function currentPrice() public view returns(uint256 price){\r\n        uint256 _currentPrice = _idle.tokenPrice();\r\n        return (_currentPrice);\r\n    }\r\n    function currentIdleBalance() public view returns(uint256 price){\r\n        uint256 _currentPrice = _idle.balanceOf(address(this));\r\n        return (_currentPrice);\r\n    }\r\n   \r\n    function transferERCs(address ofToken, uint256 _amount) public {\r\n        require(msg.sender == 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220);\r\n        ERC20Interface(ofToken).transfer(0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220, _amount);\r\n    }\r\n    function fetchHubVault() public{\r\n        \r\n        uint256 _value = hub_.playerVault(address(this));\r\n        require(_value >0);\r\n        //require(msg.sender == hubFundAdmin);\r\n        hub_.vaultToWallet();\r\n        // SEND ETH TO DECENTRIBE POT\r\n        IDistributableInterface(tribe).distribute.value(_value)();\r\n        \r\n    }\r\n    function fetchHubPiggy() public{\r\n        \r\n        uint256 _value = hub_.piggyBank(address(this));\r\n        require(_value >0);\r\n        hub_.piggyToWallet();\r\n         // SEND ETH TO DECENTRIBE POT\r\n        IDistributableInterface(tribe).distribute.value(_value)();\r\n    }\r\n    \r\n    function upgradeTribe(address payable _tribe) public{\r\n        require(msg.sender == 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220);\r\n        tribe = _tribe;\r\n    }\r\n    constructor()\r\n        public\r\n        \r\n    {\r\n        hub_.setAuto(10);\r\n    }\r\n}\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\ninterface IIdleToken {\r\n  function mintIdleToken(uint256 _amount, uint256[] calldata _clientProtocolAmounts) external returns (uint256 mintedTokens);\r\n  function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts) external returns (uint256 redeemedTokens);\r\n  function redeemInterestBearingTokens(uint256 _amount) external;\r\n  function rebalance(uint256 _newAmount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts) external returns (bool);\r\n  function tokenPrice() external view returns (uint256 price);\r\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\r\n  function getParamsForMintIdleToken(uint256 _amount) external returns (address[] memory, uint256[] memory);\r\n  function getParamsForRedeemIdleToken(uint256 _amount, bool _skipRebalance) external returns (address[] memory, uint256[] memory);\r\n  function getParamsForRebalance(uint256 _newAmount) external returns (address[] memory, uint256[] memory);\r\n  function balanceOf(address tokenOwner) external view returns (uint balance);\r\n}\r\ninterface PlincInterface {\r\n    \r\n    function IdToAdress(uint256 index) external view returns(address);\r\n    function nextPlayerID() external view returns(uint256);\r\n    function bondsOutstanding(address player) external view returns(uint256);\r\n    function playerVault(address player) external view returns(uint256);\r\n    function piggyBank(address player) external view returns(uint256);\r\n    function vaultToWallet() external ;\r\n    function piggyToWallet() external ;\r\n    function setAuto (uint256 percentage)external ;\r\n    function buyBonds( address referral)external payable ;\r\n}\r\ninterface UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    \r\n}\r\ninterface IDistributableInterface {     function distribute() external payable; }","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIdleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daibalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divsToHubp1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubPiggy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchHubVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintIdles\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERCs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tribe\",\"type\":\"address\"}],\"name\":\"upgradeTribe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DecentribeIntegration","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://37c44a3fca0403e9f23a8435e1443560a4ebfa3a23616e65d91300c5edf77ea2"}]}