{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Distribute is Context {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => bool) public isParticipate;\r\n\r\n    mapping(address => uint256) public giverBalance; \r\n\r\n    struct UserInfo {\r\n        uint256 value;\r\n\r\n        uint256 flagBlock;\r\n\r\n        uint256 preBlockReward;\r\n\r\n        uint256 withdraw;\r\n    }\r\n\r\n    mapping(address => UserInfo) userDepositInfo;\r\n\r\n    //time params\r\n    uint256 public  getSonEndTime;\r\n\r\n    uint256 public  giveSonEndTime;\r\n\r\n    uint256 public  depositEndBlock;\r\n\r\n    //balance params\r\n    uint256 public getBalance;\r\n\r\n    uint256 public stakeBalance;\r\n\r\n    uint256 public giveEthBalance;\r\n   \r\n    uint256 public giveVitalikEtherValue;\r\n\r\n    //balance to giver\r\n    uint256 private constant PER_GET_REWARD = 2 ether;\r\n\r\n    uint256 private constant PER_DEPOSIT_REWARD = 50 ether;  \r\n\r\n    uint256 private constant PER_GIVER_REWARD =  150 ether;\r\n    \r\n    //limited value\r\n    uint256 private constant MAX_GIVER_VALUE = 3 ether;\r\n\r\n    uint256 private constant MAX_DEPOSIT_VALUE = 5 ether;\r\n\r\n    //STAKE_BLOCK must > depositEndBlock\r\n    uint256 private constant STAKE_BLOCK = 288000;\r\n\r\n    uint256 public constant GIVE_VITALIK_BLOCK_TIME = 1612022400;\r\n\r\n    //address\r\n    address public constant VITALIK_ADDRESS = address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B);\r\n    \r\n    address public dev;\r\n\r\n    //flag\r\n    bool private isInnit;\r\n \r\n    uint private unlocked = 1;\r\n \r\n    IERC20  son;\r\n\r\n    event GetSon(address getAddress);\r\n    event DepositeGetSon(address getAddress, uint256 value);\r\n    event WithdrawDepositReward(address user, uint256 value);\r\n    event WithdrawDepositEther(address user, uint256 value);\r\n    event Unlock(address user, address value);\r\n    event GiverGetSon(address getAddress, uint256 giverEtherValue);\r\n    event GiverToVitalik(address _vitalikAddress, uint256 value);\r\n    event TransferDev(address oldDev, address newDev);\r\n\r\n    constructor()public {\r\n        dev = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Son Distribute: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    \r\n    //init son Address;\r\n    function initSon(address sonAddress) public {\r\n        require(!isInnit,\"Son Distribute: is already init\");\r\n\r\n        require(msg.sender == dev);\r\n\r\n        son = IERC20(sonAddress);\r\n\r\n        getSonEndTime = block.timestamp + 15 days;\r\n\r\n        giveSonEndTime = block.timestamp + 15 days;\r\n\r\n        depositEndBlock = block.number + 86400;\r\n\r\n        require(STAKE_BLOCK.sub(depositEndBlock.sub(block.number)) > 0, \"Son Distribute: stake period must > deposit period!\");\r\n\r\n        uint256 toThisAddress = son.totalSupply().mul(95).div(100);\r\n\r\n        require(son.balanceOf(address(this)) == toThisAddress);\r\n\r\n        getBalance = toThisAddress.mul(20).div(100);\r\n        stakeBalance = toThisAddress.mul(50).div(100);\r\n        giveEthBalance = toThisAddress.sub(getBalance).sub(stakeBalance);\r\n\r\n        isInnit = true;\r\n    }\r\n    \r\n\r\n    //airdrop\r\n    function getSon() public lock {\r\n\r\n        require(block.timestamp <= getSonEndTime,\"Son Distribute: free get Son is End!\");\r\n        \r\n        require(getBalance >= PER_GET_REWARD,\"Son Distribute: have no enough son to giver!\");\r\n\r\n        require(!isParticipate[msg.sender],\"Son Distribute: Have already taken part in!\");\r\n        \r\n        getBalance = getBalance.sub(PER_GET_REWARD);\r\n\r\n        isParticipate[msg.sender] = true;\r\n\r\n        TransferHelper.safeTransfer(address(son),msg.sender,PER_GET_REWARD);\r\n\r\n        emit GetSon(msg.sender);\r\n    }\r\n\r\n\r\n    function depositGetSon() public payable lock{\r\n        require(msg.value > 100 gwei,\"Son Distribute: too small value\");\r\n\r\n        require(msg.value <= MAX_DEPOSIT_VALUE,\"Son Distribute: over max deposit\");\r\n\r\n        require(block.number < depositEndBlock,\"Son Distribute: deposit time is end!\");\r\n\r\n        require(userDepositInfo[msg.sender].value == 0,\"Son Distribute: already deposit\");\r\n\r\n        uint256 getSonBalance = msg.value.mul(PER_DEPOSIT_REWARD).div(10 ** 18);\r\n\r\n        require(stakeBalance >= getSonBalance,\"Son Distribute: not enough son to give!\");\r\n\r\n        stakeBalance = stakeBalance.sub(getSonBalance);\r\n\r\n        uint256 preReward = getSonBalance.div(depositEndBlock.sub(block.number));\r\n\r\n        userDepositInfo[msg.sender] = UserInfo({value:msg.value,flagBlock: block.number,preBlockReward:preReward,withdraw:0});\r\n\r\n        emit DepositeGetSon(_msgSender(),msg.value);\r\n    }\r\n\r\n    function checkDepositInfo(address user) public view returns(uint256,uint256,uint256,uint256) {\r\n\r\n        return (userDepositInfo[user].value, userDepositInfo[user].flagBlock, userDepositInfo[user].preBlockReward, userDepositInfo[user].withdraw);\r\n\r\n    }\r\n\r\n\r\n\r\n    function pendingDepositReward(address user) public view returns(uint256 amount){\r\n\r\n        if(block.number >= depositEndBlock){\r\n            \r\n            amount = userDepositInfo[user].value.mul(PER_DEPOSIT_REWARD).div(10 ** 18).sub(userDepositInfo[user].withdraw);\r\n \r\n        }else{\r\n\r\n             amount = block.number.sub(userDepositInfo[user].flagBlock).mul(userDepositInfo[user].preBlockReward).sub(userDepositInfo[user].withdraw);\r\n    \r\n        }\r\n    \r\n    }\r\n\r\n    function withdrawDepositReward() public lock{\r\n\r\n        require(userDepositInfo[msg.sender].value > 0,\"Son Distribute: have no deposit\");\r\n\r\n        uint256 newWithdraw = pendingDepositReward(msg.sender);\r\n\r\n        require(newWithdraw > 0, \"Son Distribute: no reward to give\");\r\n\r\n        userDepositInfo[msg.sender].withdraw = userDepositInfo[msg.sender].withdraw.add(newWithdraw);\r\n\r\n        TransferHelper.safeTransfer(address(son),msg.sender,newWithdraw);\r\n\r\n        emit WithdrawDepositReward(msg.sender,newWithdraw);\r\n    }\r\n\r\n\r\n    function withdrawDepositEther() public payable lock {\r\n        \r\n        require(userDepositInfo[msg.sender].value > 0,\"Son Distribute: have no deposit\");\r\n        \r\n        //check stake finish\r\n        require(block.number.sub(userDepositInfo[msg.sender].flagBlock) >= STAKE_BLOCK,\"Son Distribute: still in staking\");\r\n        \r\n        //check if already withdraw\r\n        require(userDepositInfo[msg.sender].flagBlock < depositEndBlock,\"Son Distribute: already withdraw\");\r\n\r\n        uint256 sendAmount = userDepositInfo[msg.sender].value;\r\n\r\n        userDepositInfo[msg.sender].flagBlock = block.number;\r\n\r\n        TransferHelper.safeTransferETH(_msgSender(),sendAmount);\r\n\r\n        emit WithdrawDepositEther(msg.sender,sendAmount);\r\n    }\r\n\r\n\r\n    function giverGetSon() public payable lock {\r\n        require(msg.value > 0,\"Son Distribute: no ether!\");\r\n\r\n        require(block.timestamp <= giveSonEndTime,\"Son Distribute: not in the period\");\r\n        \r\n        require(giverBalance[msg.sender].add(msg.value) <= MAX_GIVER_VALUE,\"Son Distribute: is over MAX_GIVER_VALUE\");\r\n\r\n        giverBalance[msg.sender] = giverBalance[msg.sender].add(msg.value);\r\n\r\n        uint256 getSonBalance = msg.value.mul(PER_GIVER_REWARD).div(10 ** 18);\r\n\r\n        require(giveEthBalance >= getSonBalance,\"Son Distribute: not enough son to give!\");\r\n\r\n        giveEthBalance = giveEthBalance.sub(getSonBalance);\r\n\r\n        TransferHelper.safeTransfer(address(son),_msgSender(),getSonBalance);\r\n\r\n        giveVitalikEtherValue = giveVitalikEtherValue.add(msg.value);\r\n\r\n        emit GiverGetSon(_msgSender(),msg.value);\r\n    }\r\n\r\n\r\n    function giverToVitalik() public lock{\r\n\r\n        require(block.timestamp >= GIVE_VITALIK_BLOCK_TIME,\"Son Distribute: block timestamp limited!\");\r\n\r\n        require(giveVitalikEtherValue > 0,\"Son Distribute: no ether to give!\");\r\n\r\n        uint256 toValue = giveVitalikEtherValue;\r\n\r\n        giveVitalikEtherValue = 0;\r\n\r\n        TransferHelper.safeTransferETH(VITALIK_ADDRESS,toValue);\r\n\r\n        emit GiverToVitalik(VITALIK_ADDRESS,toValue);\r\n    }\r\n\r\n\r\n    function getRemianSon() public  {\r\n\r\n        uint256 toValue;\r\n\r\n        if (getBalance > 0 && block.timestamp > getSonEndTime) {\r\n            toValue = toValue.add(getBalance);\r\n            getBalance = 0;\r\n            \r\n        }\r\n\r\n        if (stakeBalance > 0 && block.number > depositEndBlock) {\r\n            toValue = toValue.add(stakeBalance);\r\n            stakeBalance = 0;  \r\n        }\r\n\r\n        if(giveEthBalance > 0 && block.timestamp > giveSonEndTime) {\r\n            toValue = toValue.add(giveEthBalance);\r\n            giveEthBalance = 0;\r\n        }\r\n\r\n        require(toValue > 0,\"Son Distribute: no value to give back!\");\r\n\r\n        TransferHelper.safeTransfer(address(son),dev,toValue);\r\n    }\r\n\r\n\r\n    function transferDev(address _dev) public {\r\n        require(msg.sender == dev,\"Son Distribute: not dev!\");\r\n        dev = _dev;\r\n        emit TransferDev(msg.sender, dev);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"getAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositeGetSon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"getAddress\",\"type\":\"address\"}],\"name\":\"GetSon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"getAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"giverEtherValue\",\"type\":\"uint256\"}],\"name\":\"GiverGetSon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vitalikAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GiverToVitalik\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"TransferDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawDepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawDepositReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIVE_VITALIK_BLOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VITALIK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositGetSon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemianSon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSonEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveSonEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveVitalikEtherValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"giverBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giverGetSon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giverToVitalik\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sonAddress\",\"type\":\"address\"}],\"name\":\"initSon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isParticipate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingDepositReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"transferDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDepositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDepositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Distribute","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91ae3350a903a0299ced4e9b2a91ba7b66a4bc3e8b700165c763cbcb861e1efc"}]}