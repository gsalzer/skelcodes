{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/vendor/Buffer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n* @dev A library for working with mutable byte buffers in Solidity.\r\n*\r\n* Byte buffers are mutable and expandable, and provide a variety of primitives\r\n* for writing to them. At any time you can fetch a bytes object containing the\r\n* current contents of the buffer. The bytes object should not be stored between\r\n* operations, as it may change due to resizing of the buffer.\r\n*/\r\nlibrary Buffer {\r\n  /**\r\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n  *      a capacity. The capacity may be longer than the current value, in\r\n  *      which case it can be extended without the need to allocate more memory.\r\n  */\r\n  struct buffer {\r\n    bytes buf;\r\n    uint capacity;\r\n  }\r\n\r\n  /**\r\n  * @dev Initializes a buffer with an initial capacity.\r\n  * @param buf The buffer to initialize.\r\n  * @param capacity The number of bytes of space to allocate the buffer.\r\n  * @return The buffer, for chaining.\r\n  */\r\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\r\n    if (capacity % 32 != 0) {\r\n      capacity += 32 - (capacity % 32);\r\n    }\r\n    // Allocate space for the buffer data\r\n    buf.capacity = capacity;\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      mstore(buf, ptr)\r\n      mstore(ptr, 0)\r\n      mstore(0x40, add(32, add(ptr, capacity)))\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Initializes a new buffer from an existing bytes object.\r\n  *      Changes to the buffer may mutate the original value.\r\n  * @param b The bytes object to initialize the buffer with.\r\n  * @return A new buffer.\r\n  */\r\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\r\n    buffer memory buf;\r\n    buf.buf = b;\r\n    buf.capacity = b.length;\r\n    return buf;\r\n  }\r\n\r\n  function resize(buffer memory buf, uint capacity) private pure {\r\n    bytes memory oldbuf = buf.buf;\r\n    init(buf, capacity);\r\n    append(buf, oldbuf);\r\n  }\r\n\r\n  function max(uint a, uint b) private pure returns(uint) {\r\n    if (a > b) {\r\n      return a;\r\n    }\r\n    return b;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets buffer length to 0.\r\n  * @param buf The buffer to truncate.\r\n  * @return The original buffer, for chaining..\r\n  */\r\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\r\n    assembly {\r\n      let bufptr := mload(buf)\r\n      mstore(bufptr, 0)\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The start offset to write to.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to copy.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\r\n    require(len <= data.length);\r\n\r\n    if (off + len > buf.capacity) {\r\n      resize(buf, max(buf.capacity, len + off) * 2);\r\n    }\r\n\r\n    uint dest;\r\n    uint src;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Start address = buffer address + offset + sizeof(buffer length)\r\n      dest := add(add(bufptr, 32), off)\r\n      // Update buffer length if we're extending it\r\n      if gt(add(len, off), buflen) {\r\n        mstore(bufptr, add(len, off))\r\n      }\r\n      src := add(data, 32)\r\n    }\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; len >= 32; len -= 32) {\r\n      assembly {\r\n        mstore(dest, mload(src))\r\n      }\r\n      dest += 32;\r\n      src += 32;\r\n    }\r\n\r\n    // Copy remaining bytes\r\n    uint mask = 256 ** (32 - len) - 1;\r\n    assembly {\r\n      let srcpart := and(mload(src), not(mask))\r\n      let destpart := and(mload(dest), mask)\r\n      mstore(dest, or(destpart, srcpart))\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to copy.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, len);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, data.length);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write the byte at.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\r\n    if (off >= buf.capacity) {\r\n      resize(buf, buf.capacity * 2);\r\n    }\r\n\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Address = buffer address + sizeof(buffer length) + off\r\n      let dest := add(add(bufptr, off), 32)\r\n      mstore8(dest, data)\r\n      // Update buffer length if we extended it\r\n      if eq(off, buflen) {\r\n        mstore(bufptr, add(buflen, 1))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\r\n    return writeUint8(buf, buf.buf.length, data);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n  *      exceed the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to write (left-aligned).\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    uint mask = 256 ** len - 1;\r\n    // Right-align data\r\n    data = data >> (8 * (32 - len));\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Address = buffer address + sizeof(buffer length) + off + len\r\n      let dest := add(add(bufptr, off), len)\r\n      mstore(dest, or(and(mload(dest), not(mask)), data))\r\n      // Update buffer length if we extended it\r\n      if gt(add(off, len), mload(bufptr)) {\r\n        mstore(bufptr, add(off, len))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\r\n    return write(buf, off, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chhaining.\r\n  */\r\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\r\n    return write(buf, buf.buf.length, data, 32);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to write (right-aligned).\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    uint mask = 256 ** len - 1;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Address = buffer address + off + sizeof(buffer length) + len\r\n      let dest := add(add(bufptr, off), len)\r\n      mstore(dest, or(and(mload(dest), not(mask)), data))\r\n      // Update buffer length if we extended it\r\n      if gt(add(off, len), mload(bufptr)) {\r\n        mstore(bufptr, add(off, len))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n    * exceed the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer.\r\n    */\r\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\r\n    return writeInt(buf, buf.buf.length, data, len);\r\n  }\r\n}\r\n\r\n// File: contracts/vendor/CBOR.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary CBOR {\r\n  using Buffer for Buffer.buffer;\r\n\r\n  uint8 private constant MAJOR_TYPE_INT = 0;\r\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n  uint8 private constant MAJOR_TYPE_STRING = 3;\r\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n  uint8 private constant MAJOR_TYPE_MAP = 5;\r\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n  function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\r\n    if(value <= 23) {\r\n      buf.appendUint8(uint8((major << 5) | value));\r\n    } else if(value <= 0xFF) {\r\n      buf.appendUint8(uint8((major << 5) | 24));\r\n      buf.appendInt(value, 1);\r\n    } else if(value <= 0xFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 25));\r\n      buf.appendInt(value, 2);\r\n    } else if(value <= 0xFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 26));\r\n      buf.appendInt(value, 4);\r\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 27));\r\n      buf.appendInt(value, 8);\r\n    }\r\n  }\r\n\r\n  function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\r\n    buf.appendUint8(uint8((major << 5) | 31));\r\n  }\r\n\r\n  function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\r\n    encodeType(buf, MAJOR_TYPE_INT, value);\r\n  }\r\n\r\n  function encodeInt(Buffer.buffer memory buf, int value) internal pure {\r\n    if(value >= 0) {\r\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\r\n    } else {\r\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\r\n    }\r\n  }\r\n\r\n  function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\r\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\r\n    buf.append(value);\r\n  }\r\n\r\n  function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\r\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\r\n    buf.append(bytes(value));\r\n  }\r\n\r\n  function startArray(Buffer.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n  }\r\n\r\n  function startMap(Buffer.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n  }\r\n\r\n  function endSequence(Buffer.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n  }\r\n}\r\n\r\n// File: contracts/Chainlink.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Library for common Chainlink functions\r\n * @dev Uses imported CBOR library for encoding to buffer\r\n */\r\nlibrary Chainlink {\r\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\r\n\r\n  using CBOR for Buffer.buffer;\r\n\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    Buffer.buffer buf;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes a Chainlink request\r\n   * @dev Sets the ID, callback address, and callback function signature on the request\r\n   * @param self The uninitialized request\r\n   * @param _id The Job Specification ID\r\n   * @param _callbackAddress The callback address\r\n   * @param _callbackFunction The callback function signature\r\n   * @return The initialized request\r\n   */\r\n  function initialize(\r\n    Request memory self,\r\n    bytes32 _id,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunction\r\n  ) internal pure returns (Chainlink.Request memory) {\r\n    Buffer.init(self.buf, defaultBufferSize);\r\n    self.id = _id;\r\n    self.callbackAddress = _callbackAddress;\r\n    self.callbackFunctionId = _callbackFunction;\r\n    return self;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\r\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\r\n   * @param self The initialized request\r\n   * @param _data The CBOR data\r\n   */\r\n  function setBuffer(Request memory self, bytes memory _data)\r\n    internal pure\r\n  {\r\n    Buffer.init(self.buf, _data.length);\r\n    Buffer.append(self.buf, _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a string value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param _key The name of the key\r\n   * @param _value The string value to add\r\n   */\r\n  function add(Request memory self, string memory _key, string memory _value)\r\n    internal pure\r\n  {\r\n    self.buf.encodeString(_key);\r\n    self.buf.encodeString(_value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a bytes value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param _key The name of the key\r\n   * @param _value The bytes value to add\r\n   */\r\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\r\n    internal pure\r\n  {\r\n    self.buf.encodeString(_key);\r\n    self.buf.encodeBytes(_value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a int256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param _key The name of the key\r\n   * @param _value The int256 value to add\r\n   */\r\n  function addInt(Request memory self, string memory _key, int256 _value)\r\n    internal pure\r\n  {\r\n    self.buf.encodeString(_key);\r\n    self.buf.encodeInt(_value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a uint256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param _key The name of the key\r\n   * @param _value The uint256 value to add\r\n   */\r\n  function addUint(Request memory self, string memory _key, uint256 _value)\r\n    internal pure\r\n  {\r\n    self.buf.encodeString(_key);\r\n    self.buf.encodeUInt(_value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an array of strings to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param _key The name of the key\r\n   * @param _values The array of string values to add\r\n   */\r\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\r\n    internal pure\r\n  {\r\n    self.buf.encodeString(_key);\r\n    self.buf.startArray();\r\n    for (uint256 i = 0; i < _values.length; i++) {\r\n      self.buf.encodeString(_values[i]);\r\n    }\r\n    self.buf.endSequence();\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ENSInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ENSInterface {\r\n\r\n  // Logged when the owner of a node assigns a new owner to a subnode.\r\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n  // Logged when the owner of a node transfers ownership to a new account.\r\n  event Transfer(bytes32 indexed node, address owner);\r\n\r\n  // Logged when the resolver for a node changes.\r\n  event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n  // Logged when the TTL of a node changes\r\n  event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\r\n  function setResolver(bytes32 node, address _resolver) external;\r\n  function setOwner(bytes32 node, address _owner) external;\r\n  function setTTL(bytes32 node, uint64 _ttl) external;\r\n  function owner(bytes32 node) external view returns (address);\r\n  function resolver(bytes32 node) external view returns (address);\r\n  function ttl(bytes32 node) external view returns (uint64);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/LinkTokenInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\n// File: contracts/interfaces/ChainlinkRequestInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ChainlinkRequestInterface {\r\n  function oracleRequest(\r\n    address sender,\r\n    uint256 requestPrice,\r\n    bytes32 serviceAgreementID,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion, // Currently unused, always \"1\"\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function cancelOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration\r\n  ) external;\r\n}\r\n\r\n// File: contracts/interfaces/PointerInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface PointerInterface {\r\n  function getAddress() external view returns (address);\r\n}\r\n\r\n// File: contracts/vendor/ENSResolver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ENSResolver {\r\n  function addr(bytes32 node) public view virtual returns (address);\r\n}\r\n\r\n// File: contracts/vendor/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/ChainlinkClient.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The ChainlinkClient contract\r\n * @notice Contract writers can inherit this contract in order to create requests for the\r\n * Chainlink network\r\n */\r\ncontract ChainlinkClient {\r\n  using Chainlink for Chainlink.Request;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant internal LINK = 10**18;\r\n  uint256 constant private AMOUNT_OVERRIDE = 0;\r\n  address constant private SENDER_OVERRIDE = address(0);\r\n  uint256 constant private ARGS_VERSION = 1;\r\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\r\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\r\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\r\n\r\n  ENSInterface private ens;\r\n  bytes32 private ensNode;\r\n  LinkTokenInterface private link;\r\n  ChainlinkRequestInterface private oracle;\r\n  uint256 private requestCount = 1;\r\n  mapping(bytes32 => address) private pendingRequests;\r\n\r\n  event ChainlinkRequested(bytes32 indexed id);\r\n  event ChainlinkFulfilled(bytes32 indexed id);\r\n  event ChainlinkCancelled(bytes32 indexed id);\r\n\r\n  /**\r\n   * @notice Creates a request that can hold additional parameters\r\n   * @param _specId The Job Specification ID that the request will be created for\r\n   * @param _callbackAddress The callback address that the response will be sent to\r\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\r\n   * @return A Chainlink Request struct in memory\r\n   */\r\n  function buildChainlinkRequest(\r\n    bytes32 _specId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionSignature\r\n  ) internal pure returns (Chainlink.Request memory) {\r\n    Chainlink.Request memory req;\r\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the stored oracle address\r\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\r\n   * @param _req The initialized Chainlink Request\r\n   * @param _payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\r\n    internal\r\n    returns (bytes32)\r\n  {\r\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the specified oracle address\r\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n   * send LINK which creates a request on the target oracle contract.\r\n   * Emits ChainlinkRequested event.\r\n   * @param _oracle The address of the oracle for the request\r\n   * @param _req The initialized Chainlink Request\r\n   * @param _payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\r\n    internal\r\n    returns (bytes32 requestId)\r\n  {\r\n    requestId = keccak256(abi.encodePacked(this, requestCount));\r\n    _req.nonce = requestCount;\r\n    pendingRequests[requestId] = _oracle;\r\n    emit ChainlinkRequested(requestId);\r\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \"unable to transferAndCall to oracle\");\r\n    requestCount += 1;\r\n\r\n    return requestId;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows a request to be cancelled if it has not been fulfilled\r\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\r\n   * Deletes the request from the `pendingRequests` mapping.\r\n   * Emits ChainlinkCancelled event.\r\n   * @param _requestId The request ID\r\n   * @param _payment The amount of LINK sent for the request\r\n   * @param _callbackFunc The callback function specified for the request\r\n   * @param _expiration The time of the expiration for the request\r\n   */\r\n  function cancelChainlinkRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n  )\r\n    internal\r\n  {\r\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\r\n    delete pendingRequests[_requestId];\r\n    emit ChainlinkCancelled(_requestId);\r\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle address\r\n   * @param _oracle The address of the oracle contract\r\n   */\r\n  function setChainlinkOracle(address _oracle) internal {\r\n    oracle = ChainlinkRequestInterface(_oracle);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the LINK token address\r\n   * @param _link The address of the LINK token contract\r\n   */\r\n  function setChainlinkToken(address _link) internal {\r\n    link = LinkTokenInterface(_link);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the Chainlink token address for the public\r\n   * network as given by the Pointer contract\r\n   */\r\n  function setPublicChainlinkToken() internal {\r\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the LINK token\r\n   * @return The address of the LINK token\r\n   */\r\n  function chainlinkTokenAddress()\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    return address(link);\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the oracle contract\r\n   * @return The address of the oracle contract\r\n   */\r\n  function chainlinkOracleAddress()\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    return address(oracle);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows for a request which was created on another contract to be fulfilled\r\n   * on this contract\r\n   * @param _oracle The address of the oracle contract that will fulfill the request\r\n   * @param _requestId The request ID used for the response\r\n   */\r\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\r\n    internal\r\n    notPendingRequest(_requestId)\r\n  {\r\n    pendingRequests[_requestId] = _oracle;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\r\n   * @dev Accounts for subnodes having different resolvers\r\n   * @param _ens The address of the ENS contract\r\n   * @param _node The ENS node hash\r\n   */\r\n  function useChainlinkWithENS(address _ens, bytes32 _node)\r\n    internal\r\n  {\r\n    ens = ENSInterface(_ens);\r\n    ensNode = _node;\r\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\r\n    ENSResolver resolver = ENSResolver(ens.resolver(linkSubnode));\r\n    setChainlinkToken(resolver.addr(linkSubnode));\r\n    updateChainlinkOracleWithENS();\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle contract with the address resolved by ENS\r\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\r\n   */\r\n  function updateChainlinkOracleWithENS()\r\n    internal\r\n  {\r\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\r\n    ENSResolver resolver = ENSResolver(ens.resolver(oracleSubnode));\r\n    setChainlinkOracle(resolver.addr(oracleSubnode));\r\n  }\r\n\r\n  /**\r\n   * @notice Encodes the request to be sent to the oracle contract\r\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\r\n   * will be validated in the oracle contract.\r\n   * @param _req The initialized Chainlink Request\r\n   * @return The bytes payload for the `transferAndCall` method\r\n   */\r\n  function encodeRequest(Chainlink.Request memory _req)\r\n    private\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return abi.encodeWithSelector(\r\n      oracle.oracleRequest.selector,\r\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\r\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\r\n      _req.id,\r\n      _req.callbackAddress,\r\n      _req.callbackFunctionId,\r\n      _req.nonce,\r\n      ARGS_VERSION,\r\n      _req.buf.buf);\r\n  }\r\n\r\n  /**\r\n   * @notice Ensures that the fulfillment is valid for this contract\r\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\r\n   * @param _requestId The request ID for fulfillment\r\n   */\r\n  function validateChainlinkCallback(bytes32 _requestId)\r\n    internal\r\n    recordChainlinkFulfillment(_requestId)\r\n    // solhint-disable-next-line no-empty-blocks\r\n  {}\r\n\r\n  /**\r\n   * @dev Reverts if the sender is not the oracle of the request.\r\n   * Emits ChainlinkFulfilled event.\r\n   * @param _requestId The request ID for fulfillment\r\n   */\r\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\r\n    require(msg.sender == pendingRequests[_requestId],\r\n            \"Source must be the oracle of the request\");\r\n    delete pendingRequests[_requestId];\r\n    emit ChainlinkFulfilled(_requestId);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the request is already pending\r\n   * @param _requestId The request ID for fulfillment\r\n   */\r\n  modifier notPendingRequest(bytes32 _requestId) {\r\n    require(pendingRequests[_requestId] == address(0), \"Request is already pending\");\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/LinkTokenReceiver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract LinkTokenReceiver {\r\n\r\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\r\n  uint256 constant private SELECTOR_LENGTH = 4;\r\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\r\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\r\n  /**\r\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\r\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\r\n   * values to ensure correctness. Calls oracleRequest.\r\n   * @param _sender Address of the sender\r\n   * @param _amount Amount of LINK sent (specified in wei)\r\n   * @param _data Payload of the transaction\r\n   */\r\n  function onTokenTransfer(\r\n    address _sender,\r\n    uint256 _amount,\r\n    bytes memory _data\r\n  )\r\n    public\r\n    onlyLINK\r\n    validRequestLength(_data)\r\n    permittedFunctionsForLINK(_data)\r\n  {\r\n    assembly {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\r\n    }\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\r\n    require(success, \"Unable to create request\");\r\n  }\r\n\r\n  function getChainlinkToken() public view virtual returns (address);\r\n\r\n  /**\r\n   * @dev Reverts if not sent from the LINK token\r\n   */\r\n  modifier onlyLINK() {\r\n    require(msg.sender == getChainlinkToken(), \"Must use LINK token\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\r\n   * @param _data The data payload of the request\r\n   */\r\n  modifier permittedFunctionsForLINK(bytes memory _data) {\r\n    bytes4 funcSelector;\r\n    assembly {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      funcSelector := mload(add(_data, 32))\r\n    }\r\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \"Must use whitelisted functions\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the given payload is less than needed to create a request\r\n   * @param _data The request payload\r\n   */\r\n  modifier validRequestLength(bytes memory _data) {\r\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/SignedSafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SignedSafeMath {\r\n  int256 constant private _INT256_MIN = -2**255;\r\n\r\n  /**\r\n   * @dev Multiplies two signed integers, reverts on overflow.\r\n   */\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n    int256 c = a * b;\r\n    require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    require(b != 0, \"SignedSafeMath: division by zero\");\r\n    require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n    int256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two signed integers, reverts on overflow.\r\n   */\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a - b;\r\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two signed integers, reverts on overflow.\r\n   */\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @notice Computes average of two signed integers, ensuring that the computation\r\n   * doesn't overflow.\r\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\r\n   * avg(-3, -4) = -3\r\n   */\r\n  function avg(int256 _a, int256 _b)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\r\n      return add(_a, _b) / 2;\r\n    }\r\n    int256 remainder = (_a % 2 + _b % 2) / 2;\r\n    return add(add(_a / 2, _b / 2), remainder);\r\n  }\r\n}\r\n\r\n// File: contracts/Median.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nlibrary Median {\r\n  using SignedSafeMath for int256;\r\n\r\n  int256 constant INT_MAX = 2**255-1;\r\n\r\n  /**\r\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\r\n   * array has an even number of elements.\r\n   * @dev The list passed as an argument isn't modified.\r\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\r\n   * the runtime is O(n^2).\r\n   * @param list The list of elements to compare\r\n   */\r\n  function calculate(int256[] memory list)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    return calculateInplace(copy(list));\r\n  }\r\n\r\n  /**\r\n   * @notice See documentation for function calculate.\r\n   * @dev The list passed as an argument may be permuted.\r\n   */\r\n  function calculateInplace(int256[] memory list)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    require(0 < list.length, \"list must not be empty\");\r\n    uint256 len = list.length;\r\n    uint256 middleIndex = len / 2;\r\n    if (len % 2 == 0) {\r\n      int256 median1;\r\n      int256 median2;\r\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\r\n      return SignedSafeMath.avg(median1, median2);\r\n    } else {\r\n      return quickselect(list, 0, len - 1, middleIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Maximum length of list that shortSelectTwo can handle\r\n   */\r\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\r\n\r\n  /**\r\n   * @notice Select the k1-th and k2-th element from list of length at most 7\r\n   * @dev Uses an optimal sorting network\r\n   */\r\n  function shortSelectTwo(\r\n    int256[] memory list,\r\n    uint256 lo,\r\n    uint256 hi,\r\n    uint256 k1,\r\n    uint256 k2\r\n  )\r\n    private\r\n    pure\r\n    returns (int256 k1th, int256 k2th)\r\n  {\r\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\r\n    // for lists of length 7. Network layout is taken from\r\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\r\n\r\n    uint256 len = hi + 1 - lo;\r\n    int256 x0 = list[lo + 0];\r\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\r\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\r\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\r\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\r\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\r\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\r\n\r\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\r\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\r\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\r\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\r\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\r\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\r\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\r\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\r\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\r\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\r\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\r\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\r\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\r\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\r\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\r\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\r\n\r\n    uint256 index1 = k1 - lo;\r\n    if (index1 == 0) {k1th = x0;}\r\n    else if (index1 == 1) {k1th = x1;}\r\n    else if (index1 == 2) {k1th = x2;}\r\n    else if (index1 == 3) {k1th = x3;}\r\n    else if (index1 == 4) {k1th = x4;}\r\n    else if (index1 == 5) {k1th = x5;}\r\n    else if (index1 == 6) {k1th = x6;}\r\n    else {revert(\"k1 out of bounds\");}\r\n\r\n    uint256 index2 = k2 - lo;\r\n    if (k1 == k2) {return (k1th, k1th);}\r\n    else if (index2 == 0) {return (k1th, x0);}\r\n    else if (index2 == 1) {return (k1th, x1);}\r\n    else if (index2 == 2) {return (k1th, x2);}\r\n    else if (index2 == 3) {return (k1th, x3);}\r\n    else if (index2 == 4) {return (k1th, x4);}\r\n    else if (index2 == 5) {return (k1th, x5);}\r\n    else if (index2 == 6) {return (k1th, x6);}\r\n    else {revert(\"k2 out of bounds\");}\r\n  }\r\n\r\n  /**\r\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\r\n   * (inclusive). Modifies list in-place.\r\n   */\r\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\r\n    private\r\n    pure\r\n    returns (int256 kth)\r\n  {\r\n    require(lo <= k);\r\n    require(k <= hi);\r\n    while (lo < hi) {\r\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\r\n        int256 ignore;\r\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\r\n        return kth;\r\n      }\r\n      uint256 pivotIndex = partition(list, lo, hi);\r\n      if (k <= pivotIndex) {\r\n        // since pivotIndex < (original hi passed to partition),\r\n        // termination is guaranteed in this case\r\n        hi = pivotIndex;\r\n      } else {\r\n        // since (original lo passed to partition) <= pivotIndex,\r\n        // termination is guaranteed in this case\r\n        lo = pivotIndex + 1;\r\n      }\r\n    }\r\n    return list[lo];\r\n  }\r\n\r\n  /**\r\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\r\n   * lo and hi (inclusive). Modifies list in-place.\r\n   */\r\n  function quickselectTwo(\r\n    int256[] memory list,\r\n    uint256 lo,\r\n    uint256 hi,\r\n    uint256 k1,\r\n    uint256 k2\r\n  )\r\n    internal // for testing\r\n    pure\r\n    returns (int256 k1th, int256 k2th)\r\n  {\r\n    require(k1 < k2);\r\n    require(lo <= k1 && k1 <= hi);\r\n    require(lo <= k2 && k2 <= hi);\r\n\r\n    while (true) {\r\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\r\n        return shortSelectTwo(list, lo, hi, k1, k2);\r\n      }\r\n      uint256 pivotIdx = partition(list, lo, hi);\r\n      if (k2 <= pivotIdx) {\r\n        hi = pivotIdx;\r\n      } else if (pivotIdx < k1) {\r\n        lo = pivotIdx + 1;\r\n      } else {\r\n        assert(k1 <= pivotIdx && pivotIdx < k2);\r\n        k1th = quickselect(list, lo, pivotIdx, k1);\r\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\r\n        return (k1th, k2th);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\r\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\r\n   * Returns an index i, such that:\r\n   * - lo <= i < hi\r\n   * - forall j in [lo, i]. list[j] <= list[i]\r\n   * - forall j in [i, hi]. list[i] <= list[j]\r\n   */\r\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // We don't care about overflow of the addition, because it would require a list\r\n    // larger than any feasible computer's memory.\r\n    int256 pivot = list[(lo + hi) / 2];\r\n    lo -= 1; // this can underflow. that's intentional.\r\n    hi += 1;\r\n    while (true) {\r\n      do {\r\n        lo += 1;\r\n      } while (list[lo] < pivot);\r\n      do {\r\n        hi -= 1;\r\n      } while (list[hi] > pivot);\r\n      if (lo < hi) {\r\n        (list[lo], list[hi]) = (list[hi], list[lo]);\r\n      } else {\r\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\r\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\r\n        // in each loop iteration and\r\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\r\n        //   will achieve hi < orig_hi;\r\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\r\n        //   needed:\r\n        //   - lo will have to stop at least once in the interval\r\n        //     [orig_lo, (orig_lo + orig_hi)/2]\r\n        //   - (orig_lo + orig_hi)/2 < orig_hi\r\n        return hi;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Makes an in-memory copy of the array passed in\r\n   * @param list Reference to the array to be copied\r\n   */\r\n  function copy(int256[] memory list)\r\n    private\r\n    pure\r\n    returns(int256[] memory)\r\n  {\r\n    int256[] memory list2 = new int256[](list.length);\r\n    for (uint256 i = 0; i < list.length; i++) {\r\n      list2[i] = list[i];\r\n    }\r\n    return list2;\r\n  }\r\n}\r\n\r\n// File: contracts/Owned.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address payable public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/AccessControllerInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface AccessControllerInterface {\r\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\r\n}\r\n\r\n// File: contracts/SimpleWriteAccessController.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title SimpleWriteAccessController\r\n * @notice Gives access to accounts explicitly added to an access list by the\r\n * controller's owner.\r\n * @dev does not make any special permissions for externally, see\r\n * SimpleReadAccessController for that.\r\n */\r\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\r\n\r\n  bool public checkEnabled;\r\n  mapping(address => bool) internal accessList;\r\n\r\n  event AddedAccess(address user);\r\n  event RemovedAccess(address user);\r\n  event CheckAccessEnabled();\r\n  event CheckAccessDisabled();\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    checkEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the access of an address\r\n   * @param _user The address to query\r\n   */\r\n  function hasAccess(\r\n    address _user,\r\n    bytes memory\r\n  )\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return accessList[_user] || !checkEnabled;\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an address to the access list\r\n   * @param _user The address to add\r\n   */\r\n  function addAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!accessList[_user]) {\r\n      accessList[_user] = true;\r\n\r\n      emit AddedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Removes an address from the access list\r\n   * @param _user The address to remove\r\n   */\r\n  function removeAccess(address _user)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (accessList[_user]) {\r\n      accessList[_user] = false;\r\n\r\n      emit RemovedAccess(_user);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check enforced\r\n   */\r\n  function enableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (!checkEnabled) {\r\n      checkEnabled = true;\r\n\r\n      emit CheckAccessEnabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice makes the access check unenforced\r\n   */\r\n  function disableAccessCheck()\r\n    external\r\n    onlyOwner()\r\n  {\r\n    if (checkEnabled) {\r\n      checkEnabled = false;\r\n\r\n      emit CheckAccessDisabled();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if the caller does not have access\r\n   */\r\n  modifier checkAccess() {\r\n    require(hasAccess(msg.sender, msg.data), \"No access\");\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/PreCoordinator.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PreCoordinator is a contract that builds on-chain service agreements\r\n * using the current architecture of 1 request to 1 oracle contract.\r\n * @dev This contract accepts requests as service agreement IDs and loops over\r\n * the corresponding list of oracles to create distinct requests to each one.\r\n */\r\ncontract PreCoordinator is\r\n  ChainlinkClient,\r\n  LinkTokenReceiver,\r\n  SimpleWriteAccessController,\r\n  ChainlinkRequestInterface\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant private MAX_ORACLE_COUNT = 45;\r\n\r\n  uint256 private globalNonce;\r\n\r\n  struct ServiceAgreement {\r\n    uint256 totalPayment;\r\n    uint256 minResponses;\r\n    address[] oracles;\r\n    bytes32[] jobIds;\r\n    uint256[] payments;\r\n  }\r\n\r\n  struct Requester {\r\n    bytes4 callbackFunctionId;\r\n    address sender;\r\n    address callbackAddress;\r\n    int256[] responses;\r\n  }\r\n\r\n  // Service Agreement ID => ServiceAgreement\r\n  mapping(bytes32 => ServiceAgreement) internal serviceAgreements;\r\n  // Local Request ID => Service Agreement ID\r\n  mapping(bytes32 => bytes32) internal serviceAgreementRequests;\r\n  // Requester's Request ID => Requester\r\n  mapping(bytes32 => Requester) internal requesters;\r\n  // Local Request ID => Requester's Request ID\r\n  mapping(bytes32 => bytes32) internal requests;\r\n\r\n  event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses);\r\n  event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment);\r\n  event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer);\r\n  event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer);\r\n  event ServiceAgreementDeleted(bytes32 indexed saId);\r\n\r\n  /**\r\n   * @notice Deploy the contract with a specified address for the LINK\r\n   * and Oracle contract addresses\r\n   * @dev Sets the storage for the specified addresses\r\n   * @param _link The address of the LINK token contract\r\n   */\r\n  constructor(address _link) public {\r\n    if(_link == address(0)) {\r\n      setPublicChainlinkToken();\r\n    } else {\r\n      setChainlinkToken(_link);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner of the contract to create new service agreements\r\n   * with multiple oracles. Each oracle will have their own Job ID and can have\r\n   * their own payment amount.\r\n   * @dev The globalNonce keeps service agreement IDs unique. Assume one cannot\r\n   * create the max uint256 number of service agreements in the same block.\r\n   * @param _minResponses The minimum number of responses before the requesting\r\n   * contract is called with the response data.\r\n   * @param _oracles The list of oracle contract addresses.\r\n   * @param _jobIds The corresponding list of Job IDs.\r\n   * @param _payments The corresponding list of payment amounts.\r\n   */\r\n  function createServiceAgreement(\r\n    uint256 _minResponses,\r\n    address[] calldata _oracles,\r\n    bytes32[] calldata _jobIds,\r\n    uint256[] calldata _payments\r\n  )\r\n    external returns (bytes32 saId)\r\n  {\r\n    require(_minResponses > 0, \"Min responses must be > 0\");\r\n    require(_oracles.length == _jobIds.length && _oracles.length == _payments.length, \"Unmet length\");\r\n    require(_oracles.length <= MAX_ORACLE_COUNT, \"Cannot have more than 45 oracles\");\r\n    require(_oracles.length >= _minResponses, \"Invalid min responses\");\r\n    uint256 totalPayment;\r\n    for (uint i = 0; i < _payments.length; i++) {\r\n      totalPayment = totalPayment.add(_payments[i]);\r\n    }\r\n    saId = keccak256(abi.encodePacked(globalNonce, now));\r\n    globalNonce++; // yes, let it overflow\r\n    serviceAgreements[saId] = ServiceAgreement(totalPayment, _minResponses, _oracles, _jobIds, _payments);\r\n\r\n    emit NewServiceAgreement(saId, totalPayment, _minResponses);\r\n  }\r\n\r\n  /**\r\n   * @notice This is a helper function to retrieve the details of a service agreement\r\n   * by its given service agreement ID.\r\n   * @dev This function is used instead of the public mapping to return the values\r\n   * of the arrays: oracles, jobIds, and payments.\r\n   */\r\n  function getServiceAgreement(bytes32 _saId)\r\n    external view returns\r\n  (\r\n    uint256 totalPayment,\r\n    uint256 minResponses,\r\n    address[] memory oracles,\r\n    bytes32[] memory jobIds,\r\n    uint256[] memory payments\r\n  )\r\n  {\r\n    return\r\n    (\r\n      serviceAgreements[_saId].totalPayment,\r\n      serviceAgreements[_saId].minResponses,\r\n      serviceAgreements[_saId].oracles,\r\n      serviceAgreements[_saId].jobIds,\r\n      serviceAgreements[_saId].payments\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the LINK token\r\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\r\n   * an internal method of the ChainlinkClient contract\r\n   */\r\n  function getChainlinkToken() public view override returns (address) {\r\n    return chainlinkTokenAddress();\r\n  }\r\n\r\n  /**\r\n   * @notice Creates the Chainlink request\r\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\r\n   * Emits OracleRequest event for the Chainlink node to detect.\r\n   * @param _sender The sender of the request\r\n   * @param _payment The amount of payment given (specified in wei)\r\n   * @param _saId The Job Specification ID\r\n   * @param _callbackAddress The callback address for the response\r\n   * @param _callbackFunctionId The callback function ID for the response\r\n   * @param _nonce The nonce sent by the requester\r\n   * @param _data The CBOR payload of the request\r\n   */\r\n  function oracleRequest(\r\n    address _sender,\r\n    uint256 _payment,\r\n    bytes32 _saId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionId,\r\n    uint256 _nonce,\r\n    uint256,\r\n    bytes calldata _data\r\n  )\r\n    external\r\n    onlyLINK\r\n    override\r\n    checkCallbackAddress(_callbackAddress)\r\n  {\r\n    require(hasAccess(_sender, _data));\r\n\r\n    uint256 totalPayment = serviceAgreements[_saId].totalPayment;\r\n    // this revert message does not bubble up\r\n    require(_payment >= totalPayment, \"Insufficient payment\");\r\n    bytes32 callbackRequestId = keccak256(abi.encodePacked(_sender, _nonce));\r\n    require(requesters[callbackRequestId].sender == address(0), \"Nonce already in-use\");\r\n    requesters[callbackRequestId].callbackFunctionId = _callbackFunctionId;\r\n    requesters[callbackRequestId].callbackAddress = _callbackAddress;\r\n    requesters[callbackRequestId].sender = _sender;\r\n    createRequests(_saId, callbackRequestId, _data);\r\n    if (_payment > totalPayment) {\r\n      uint256 overage = _payment.sub(totalPayment);\r\n      LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\r\n      assert(_link.transfer(_sender, overage));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Creates Chainlink requests to each oracle in the service agreement with the\r\n   * same data payload supplied by the requester\r\n   * @param _saId The service agreement ID\r\n   * @param _incomingRequestId The requester-supplied request ID\r\n   * @param _data The data payload (request parameters) to send to each oracle\r\n   */\r\n  function createRequests(bytes32 _saId, bytes32 _incomingRequestId, bytes memory _data) private {\r\n    ServiceAgreement memory sa = serviceAgreements[_saId];\r\n    require(sa.minResponses > 0, \"Invalid service agreement\");\r\n    Chainlink.Request memory request;\r\n    bytes32 outgoingRequestId;\r\n    emit ServiceAgreementRequested(_saId, _incomingRequestId, sa.totalPayment);\r\n    for (uint i = 0; i < sa.oracles.length; i++) {\r\n      request = buildChainlinkRequest(sa.jobIds[i], address(this), this.chainlinkCallback.selector);\r\n      request.setBuffer(_data);\r\n      outgoingRequestId = sendChainlinkRequestTo(sa.oracles[i], request, sa.payments[i]);\r\n      requests[outgoingRequestId] = _incomingRequestId;\r\n      serviceAgreementRequests[outgoingRequestId] = _saId;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice The fulfill method from requests created by this contract\r\n   * @dev The recordChainlinkFulfillment protects this function from being called\r\n   * by anyone other than the oracle address that the request was sent to\r\n   * @param _requestId The ID that was generated for the request\r\n   * @param _data The answer provided by the oracle\r\n   */\r\n  function chainlinkCallback(bytes32 _requestId, int256 _data)\r\n    external\r\n    recordChainlinkFulfillment(_requestId)\r\n    returns (bool)\r\n  {\r\n    ServiceAgreement memory sa = serviceAgreements[serviceAgreementRequests[_requestId]];\r\n    bytes32 cbRequestId = requests[_requestId];\r\n    bytes32 saId = serviceAgreementRequests[_requestId];\r\n    delete requests[_requestId];\r\n    delete serviceAgreementRequests[_requestId];\r\n    emit ServiceAgreementResponseReceived(saId, cbRequestId, msg.sender, _data);\r\n    requesters[cbRequestId].responses.push(_data);\r\n    Requester memory req = requesters[cbRequestId];\r\n    if (req.responses.length == sa.oracles.length) delete requesters[cbRequestId];\r\n    bool success = true;\r\n    if (req.responses.length == sa.minResponses) {\r\n      int256 result = Median.calculate(req.responses);\r\n      emit ServiceAgreementAnswerUpdated(saId, cbRequestId, result);\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      (success, ) = req.callbackAddress.call(abi.encodeWithSelector(req.callbackFunctionId, cbRequestId, result));\r\n    }\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to withdraw any LINK balance on the contract\r\n   * @dev The only valid case for there to be remaining LINK on this contract\r\n   * is if a user accidentally sent LINK directly to this contract's address.\r\n   */\r\n  function withdrawLink() external onlyOwner {\r\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\r\n    require(_link.transfer(msg.sender, _link.balanceOf(address(this))), \"Unable to transfer\");\r\n  }\r\n\r\n  /**\r\n   * @notice Call this method if no response is received within 5 minutes\r\n   * @param _requestId The ID that was generated for the request to cancel\r\n   * @param _payment The payment specified for the request to cancel\r\n   * @param _callbackFunctionId The bytes4 callback function ID specified for\r\n   * the request to cancel\r\n   * @param _expiration The expiration generated for the request to cancel\r\n   */\r\n  function cancelOracleRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunctionId,\r\n    uint256 _expiration\r\n  )\r\n    external\r\n    override\r\n  {\r\n    bytes32 cbRequestId = requests[_requestId];\r\n    delete requests[_requestId];\r\n    delete serviceAgreementRequests[_requestId];\r\n    Requester memory req = requesters[cbRequestId];\r\n    require(req.sender == msg.sender, \"Only requester can cancel\");\r\n    delete requesters[cbRequestId];\r\n    cancelChainlinkRequest(_requestId, _payment, _callbackFunctionId, _expiration);\r\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\r\n    require(_link.transfer(req.sender, _payment), \"Unable to transfer\");\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the callback address is the LINK token\r\n   * @param _to The callback address\r\n   */\r\n  modifier checkCallbackAddress(address _to) {\r\n    require(_to != chainlinkTokenAddress(), \"Cannot callback to LINK\");\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minresponses\",\"type\":\"uint256\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"ServiceAgreementAnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"}],\"name\":\"ServiceAgreementDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"ServiceAgreementRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"ServiceAgreementResponseReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_data\",\"type\":\"int256\"}],\"name\":\"chainlinkCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minResponses\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_jobIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payments\",\"type\":\"uint256[]\"}],\"name\":\"createServiceAgreement\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"saId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_saId\",\"type\":\"bytes32\"}],\"name\":\"getServiceAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minResponses\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"jobIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_saId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PreCoordinator","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://52c68c49bb1b01c87cc7eee255d0e467ca8ef28b94c7d14b1463b01b5b55d926"}]}