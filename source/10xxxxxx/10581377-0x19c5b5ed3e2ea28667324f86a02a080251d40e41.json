{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n  /**\r\n   * @dev Return ethereum address\r\n   */\r\n  function getEthAddr() internal pure returns (address) {\r\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return memory variable address\r\n   */\r\n  function getMemoryAddr() internal pure returns (address) {\r\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n  }\r\n\r\n  /**\r\n   * @dev Return InstaEvent Address.\r\n   */\r\n  function getEventAddr() internal pure returns (address) {\r\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n  }\r\n\r\n  /**\r\n   * @dev Get Uint value from InstaMemory Contract.\r\n   */\r\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n  }\r\n\r\n  /**\r\n  * @dev Set Uint value in InstaMemory Contract.\r\n  */\r\n  function setUint(uint setId, uint val) virtual internal {\r\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n  }\r\n\r\n  /**\r\n  * @dev emit event on event contract\r\n  */\r\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\r\n    (uint model, uint id) = connectorID();\r\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n  }\r\n\r\n  /**\r\n  * @dev Connector Details - needs to be changed before deployment\r\n  */\r\n  function connectorID() public view returns(uint model, uint id) {\r\n    (model, id) = (0, 0);\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/common/math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface OneProtoInterface {\r\n    function swapWithReferral(\r\n        TokenInterface fromToken,\r\n        TokenInterface destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags, // See contants in IOneSplit.sol\r\n        address referral,\r\n        uint256 feePercent\r\n    ) external payable returns(uint256);\r\n\r\n    function swapWithReferralMulti(\r\n        TokenInterface[] calldata tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256[] calldata flags,\r\n        address referral,\r\n        uint256 feePercent\r\n    ) external payable returns(uint256 returnAmount);\r\n\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\n\r\ncontract OneHelpers is Stores, DSMath {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev Return 1proto Address\r\n     */\r\n    function getOneProtoAddress() internal pure returns (address payable) {\r\n        return 0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e;\r\n    }\r\n\r\n    function getReferralAddr() internal pure returns (address) {\r\n        return 0xa7615CD307F323172331865181DC8b80a2834324;  // TODO - change address\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == getEthAddr() ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == getEthAddr() ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == getEthAddr() ?  18 : sellAddr.decimals();\r\n    }\r\n\r\n    function getSlippageAmt(\r\n        TokenInterface _buyAddr,\r\n        TokenInterface _sellAddr,\r\n        uint _sellAmt,\r\n        uint unitAmt\r\n    ) internal view returns(uint _slippageAmt) {\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\r\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\r\n        _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\r\n    }\r\n\r\n    function convertToTokenInterface(address[] memory tokens) internal pure returns(TokenInterface[] memory) {\r\n        TokenInterface[] memory _tokens = new TokenInterface[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _tokens[i] = TokenInterface(tokens[i]);\r\n        }\r\n        return _tokens;\r\n    }\r\n\r\n    function _transfer(address payable to, IERC20 token, uint _amt) internal {\r\n        address(token) == getEthAddr() ?\r\n            to.transfer(_amt) :\r\n            token.safeTransfer(to, _amt);\r\n    }\r\n\r\n    function takeFee(\r\n        address token,\r\n        uint amount,\r\n        address feeCollector,\r\n        uint feePercent\r\n    ) internal returns (uint leftAmt, uint feeAmount){\r\n        if (feeCollector != address(0)) {\r\n            feeAmount = wmul(amount, feePercent);\r\n            leftAmt = sub(amount, feeAmount);\r\n            uint feeCollectorAmt = wmul(feeAmount, 7 * 10 ** 17); // 70% to feeCollector\r\n            uint restAmt = sub(feeAmount, feeCollectorAmt); // rest 30%\r\n            IERC20 tokenContract = IERC20(token);\r\n            _transfer(payable(feeCollector), tokenContract, feeCollectorAmt);\r\n            _transfer(payable(getReferralAddr()), tokenContract, restAmt);\r\n        } else {\r\n            leftAmt = amount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is OneHelpers {\r\n    struct OneProtoData {\r\n        TokenInterface sellToken;\r\n        TokenInterface buyToken;\r\n        uint _sellAmt;\r\n        uint _buyAmt;\r\n        uint unitAmt;\r\n        address feeCollector;\r\n        uint256 feeAmount;\r\n        uint[] distribution;\r\n        uint disableDexes;\r\n    }\r\n\r\n    function oneProtoSwap(\r\n        OneProtoInterface oneProtoContract,\r\n        OneProtoData memory oneProtoData\r\n    ) internal returns (uint buyAmt) {\r\n        TokenInterface _sellAddr = oneProtoData.sellToken;\r\n        TokenInterface _buyAddr = oneProtoData.buyToken;\r\n        uint _sellAmt = oneProtoData._sellAmt;\r\n\r\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneProtoContract), _sellAmt);\r\n        }\r\n\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n        oneProtoContract.swapWithReferral.value(ethAmt)(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            _slippageAmt,\r\n            oneProtoData.distribution,\r\n            oneProtoData.disableDexes,\r\n            getReferralAddr(),\r\n            0\r\n        );\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n\r\n    struct OneProtoMultiData {\r\n        address[] tokens;\r\n        TokenInterface sellToken;\r\n        TokenInterface buyToken;\r\n        uint _sellAmt;\r\n        uint _buyAmt;\r\n        uint unitAmt;\r\n        address feeCollector;\r\n        uint256 feeAmount;\r\n        uint[] distribution;\r\n        uint[] disableDexes;\r\n    }\r\n\r\n    function oneProtoSwapMulti(OneProtoMultiData memory oneProtoData) internal returns (uint buyAmt) {\r\n        TokenInterface _sellAddr = oneProtoData.sellToken;\r\n        TokenInterface _buyAddr = oneProtoData.buyToken;\r\n        uint _sellAmt = oneProtoData._sellAmt;\r\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\r\n\r\n        OneProtoInterface oneSplitContract = OneProtoInterface(getOneProtoAddress());\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\r\n        }\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n        oneSplitContract.swapWithReferralMulti.value(ethAmt)(\r\n            convertToTokenInterface(oneProtoData.tokens),\r\n            _sellAmt,\r\n            _slippageAmt,\r\n            oneProtoData.distribution,\r\n            oneProtoData.disableDexes,\r\n            getReferralAddr(),\r\n            0\r\n        );\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n}\r\n\r\ncontract OneProtoEventResolver is Resolver {\r\n    event LogSell(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellFee(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        address indexed feeCollector,\r\n        uint256 feeAmount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSell(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        if (oneProtoData.feeCollector == address(0)) {\r\n            emit LogSell(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n        } else {\r\n            emit LogSellFee(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSellFee(address,address,uint256,uint256,address,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n        }\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    event LogSellTwo(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellFeeTwo(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        address indexed feeCollector,\r\n        uint256 feeAmount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSellTwo(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        if (oneProtoData.feeCollector == address(0)) {\r\n            emit LogSellTwo(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSellTwo(address,address,uint256,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n        } else {\r\n            emit LogSellFeeTwo(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSellFeeTwo(address,address,uint256,uint256,address,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n        }\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    event LogSellMulti(\r\n        address[] tokens,\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellFeeMulti(\r\n        address[] tokens,\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        address indexed feeCollector,\r\n        uint256 feeAmount,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function emitLogSellMulti(\r\n        OneProtoMultiData memory oneProtoData,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        bytes32 _eventCode;\r\n        bytes memory _eventParam;\r\n        if (oneProtoData.feeCollector == address(0)) {\r\n            emit LogSellMulti(\r\n                oneProtoData.tokens,\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSellMulti(address[],address,address,uint256,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                oneProtoData.tokens,\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                getId,\r\n                setId\r\n            );\r\n        } else {\r\n            emit LogSellFeeMulti(\r\n                oneProtoData.tokens,\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n            _eventCode = keccak256(\"LogSellFeeMulti(address[],address,address,uint256,uint256,address,uint256,uint256,uint256)\");\r\n            _eventParam = abi.encode(\r\n                oneProtoData.tokens,\r\n                address(oneProtoData.buyToken),\r\n                address(oneProtoData.sellToken),\r\n                oneProtoData._buyAmt,\r\n                oneProtoData._sellAmt,\r\n                oneProtoData.feeCollector,\r\n                oneProtoData.feeAmount,\r\n                getId,\r\n                setId\r\n            );\r\n        }\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract OneProtoResolverHelpers is OneProtoEventResolver {\r\n    function _sell(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 feePercent,\r\n        uint256 getId,\r\n        uint256 setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        OneProtoInterface oneProtoContract = OneProtoInterface(getOneProtoAddress());\r\n\r\n        (, oneProtoData.distribution) = oneProtoContract.getExpectedReturn(\r\n                oneProtoData.sellToken,\r\n                oneProtoData.buyToken,\r\n                oneProtoData._sellAmt,\r\n                5,\r\n                0\r\n            );\r\n\r\n        oneProtoData._buyAmt = oneProtoSwap(\r\n            oneProtoContract,\r\n            oneProtoData\r\n        );\r\n\r\n        (uint feeAmount, uint leftBuyAmt) = takeFee(\r\n            address(oneProtoData.buyToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData.feeCollector,\r\n            feePercent\r\n        );\r\n\r\n        setUint(setId, leftBuyAmt);\r\n        oneProtoData.feeAmount = feeAmount;\r\n\r\n        emitLogSell(oneProtoData, getId, setId);\r\n    }\r\n\r\n    function _sellTwo(\r\n        OneProtoData memory oneProtoData,\r\n        uint256 feePercent,\r\n        uint getId,\r\n        uint setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        oneProtoData._buyAmt = oneProtoSwap(\r\n            OneProtoInterface(getOneProtoAddress()),\r\n            oneProtoData\r\n        );\r\n\r\n        (uint feeAmount, uint leftBuyAmt) = takeFee(\r\n            address(oneProtoData.buyToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData.feeCollector,\r\n            feePercent\r\n        );\r\n\r\n        setUint(setId, leftBuyAmt);\r\n        oneProtoData.feeAmount = feeAmount;\r\n\r\n        emitLogSellTwo(oneProtoData, getId, setId);\r\n    }\r\n\r\n    function _sellMulti(\r\n        OneProtoMultiData memory oneProtoData,\r\n        uint256 feePercent,\r\n        uint getId,\r\n        uint setId\r\n    ) internal {\r\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\r\n\r\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\r\n            getTokenBal(oneProtoData.sellToken) :\r\n            _sellAmt;\r\n\r\n        oneProtoData._buyAmt = oneProtoSwapMulti(oneProtoData);\r\n\r\n        uint leftBuyAmt;\r\n        (oneProtoData.feeAmount, leftBuyAmt) = takeFee(\r\n            address(oneProtoData.buyToken),\r\n            oneProtoData._buyAmt,\r\n            oneProtoData.feeCollector,\r\n            feePercent\r\n        );\r\n        setUint(setId, leftBuyAmt);\r\n\r\n        emitLogSellMulti(oneProtoData, getId, setId);\r\n    }\r\n}\r\n\r\ncontract OneProtoResolver is OneProtoResolverHelpers {\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: new uint[](0),\r\n            feeCollector: address(0),\r\n            _buyAmt: 0,\r\n            disableDexes: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sell(oneProtoData, 0, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto on-chain calculation.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param feeCollector Fee amount to transfer.\r\n     * @param feePercent Fee percentage on buyAmt.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellFee(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        address feeCollector,\r\n        uint feePercent,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        require(feePercent > 0 && feePercent <= 2*10*16, \"Fee more than 2%\");\r\n        require(feeCollector != address(0), \"feeCollector is not vaild address\");\r\n\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: new uint[](0),\r\n            feeCollector: feeCollector,\r\n            _buyAmt: 0,\r\n            disableDexes: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sell(oneProtoData, feePercent, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto using off-chain calculation.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellTwo(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint disableDexes,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            feeCollector: address(0),\r\n            _buyAmt: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sellTwo(oneProtoData, 0, getId, setId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param feeCollector Fee amount to transfer.\r\n     * @param feePercent Fee percentage on buyAmt.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellFeeTwo(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint disableDexes,\r\n        address feeCollector,\r\n        uint feePercent,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        require(feePercent > 0 && feePercent <= 2*10*16, \"Fee more than 2%\");\r\n        require(feeCollector != address(0), \"feeCollector is not vaild address\");\r\n        OneProtoData memory oneProtoData = OneProtoData({\r\n            buyToken: TokenInterface(buyAddr),\r\n            sellToken: TokenInterface(sellAddr),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            feeCollector: feeCollector,\r\n            _buyAmt: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sellTwo(oneProtoData, feePercent, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto using muliple token.\r\n     * @param tokens array of tokens.\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellMulti(\r\n        address[] calldata tokens,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint[] calldata disableDexes,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        OneProtoMultiData memory oneProtoData = OneProtoMultiData({\r\n            tokens: tokens,\r\n            buyToken: TokenInterface(address(tokens[tokens.length - 1])),\r\n            sellToken: TokenInterface(address(tokens[0])),\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            _sellAmt: sellAmt,\r\n            feeCollector: address(0),\r\n            _buyAmt: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sellMulti(oneProtoData, 0, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token using 1proto using muliple token.\r\n     * @param tokens buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param distribution distribution of swap across different dex.\r\n     * @param disableDexes disable a dex. (To disable none: 0)\r\n     * @param feeCollector Fee amount to transfer.\r\n     * @param feePercent Fee percentage on buyAmt.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sellFeeMulti(\r\n        address[] calldata tokens,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint[] calldata disableDexes,\r\n        address feeCollector,\r\n        uint feePercent,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        require(feePercent > 0 && feePercent <= 2*10*16, \"Fee more than 2%\");\r\n        require(feeCollector != address(0), \"feeCollector is not vaild address\");\r\n        TokenInterface buyToken = TokenInterface(address(tokens[tokens.length - 1]));\r\n        OneProtoMultiData memory oneProtoData = OneProtoMultiData({\r\n            tokens: tokens,\r\n            buyToken: buyToken,\r\n            sellToken: TokenInterface(address(tokens[0])),\r\n            _sellAmt: sellAmt,\r\n            unitAmt: unitAmt,\r\n            distribution: distribution,\r\n            disableDexes: disableDexes,\r\n            feeCollector: feeCollector,\r\n            _buyAmt: 0,\r\n            feeAmount: 0\r\n        });\r\n\r\n        _sellMulti(oneProtoData, feePercent, getId, setId);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellFeeMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellFeeTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellTwo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellFeeMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellFeeTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"OneProtoResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae1f30bda4b522f3582e0c49a8514db87bde1d84db74cfa60e1f798022da74f8"}]}