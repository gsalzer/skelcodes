{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title NToken mapping contract\r\n * @dev Add, modify and check offering token mapping\r\n */\r\ncontract Nest_NToken_TokenMapping {\r\n    \r\n    mapping (address => address) _tokenMapping;                 //  Token mapping - offering token => NToken\r\n    Nest_3_VoteFactory _voteFactory;                            //  Voting contract\r\n    \r\n    event TokenMappingLog(address token, address nToken);\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor(address voteFactory) public {\r\n        _voteFactory = Nest_3_VoteFactory(address(voteFactory));\r\n    }\r\n    \r\n    /**\r\n    * @dev Reset voting contract\r\n    * @param voteFactory  voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n    \t_voteFactory = Nest_3_VoteFactory(address(voteFactory));\r\n    }\r\n    \r\n    /**\r\n    * @dev Add token mapping\r\n    * @param token Offering token address\r\n    * @param nToken Mining NToken address\r\n    */\r\n    function addTokenMapping(address token, address nToken) public {\r\n        require(address(msg.sender) == address(_voteFactory.checkAddress(\"nest.nToken.tokenAuction\")), \"No authority\");\r\n        require(_tokenMapping[token] == address(0x0), \"Token already exists\");\r\n        _tokenMapping[token] = nToken;\r\n        emit TokenMappingLog(token, nToken);\r\n    }\r\n    \r\n    /**\r\n    * @dev Change token mapping\r\n    * @param token Offering token address\r\n    * @param nToken Mining NToken address\r\n    */\r\n    function changeTokenMapping(address token, address nToken) public onlyOwner {\r\n        _tokenMapping[token] = nToken;\r\n        emit TokenMappingLog(token, nToken);\r\n    }\r\n    \r\n    /**\r\n    * @dev Check token mapping\r\n    * @param token Offering token address\r\n    * @return Mining NToken address\r\n    */\r\n    function checkTokenMapping(address token) public view returns (address) {\r\n        return _tokenMapping[token];\r\n    }\r\n    \r\n    // Only for administrator\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(msg.sender), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Voting contract\r\ninterface Nest_3_VoteFactory {\r\n    // Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t// Check whether the administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nToken\",\"type\":\"address\"}],\"name\":\"TokenMappingLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nToken\",\"type\":\"address\"}],\"name\":\"addTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nToken\",\"type\":\"address\"}],\"name\":\"changeTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkTokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Nest_NToken_TokenMapping","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92290ffa1f4c935c39a9b3c1fc61cf4bfc326a854cb98c2e9d1519389ce89e96"}]}