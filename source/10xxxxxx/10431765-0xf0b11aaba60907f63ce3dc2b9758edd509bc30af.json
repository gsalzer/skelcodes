{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\n\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\n\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\n\n//https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\ninterface IERC900 {\r\n    event Staked(address indexed addr, uint256 amount, uint256 total, bytes data);\r\n    event Unstaked(address indexed addr, uint256 amount, uint256 total, bytes data);\r\n\r\n    function stake(uint256 amount, bytes calldata data) external;\r\n    function stakeFor(address addr, uint256 amount, bytes calldata data) external;\r\n    function unstake(uint256 amount, bytes calldata data) external;\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n    function totalStaked() external view returns (uint256);\r\n    function token() external view returns (address);\r\n    function supportsHistory() external pure returns (bool);\r\n\r\n    // optional\r\n    //function lastStakedFor(address addr) public view returns (uint256);\r\n    //function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\r\n    //function totalStakedAt(uint256 blockNumber) public view returns (uint256);\r\n}\n\ninterface IDistributable {\r\n    function distribute() external payable;\r\n}\n\ninterface IDistributableERC20 {\r\n    function distribute(uint256 amount) external;\r\n}\n\n/**\r\n * An IERC900 staking contract\r\n */\ncontract Staking is IERC900, IDistributable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 PRECISION;\r\n\r\n    event Profit(uint256 amount);\r\n\r\n    uint256 public bond_value;\r\n    //just for info\r\n    uint256 public investor_count;\r\n\r\n    uint256 private _total_staked;\r\n    // the amount of dust left to distribute after the bond value has been updated\r\n    uint256 public to_distribute;\r\n    mapping(address => uint256) private _bond_value_addr;\r\n    mapping(address => uint256) private _stakes;\r\n\r\n    /// @dev handle to access ERC20 token token contract to make transfers\r\n    IERC20 private _token;\r\n\r\n    constructor(address token_address, uint256 decimals) public {\r\n        _token = IERC20(token_address);\r\n        PRECISION = 10**decimals;\r\n    }\r\n    \r\n    /**\r\n        @dev Stakes a certain amount of tokens, this MUST transfer the given amount from the addr\r\n        @param amount Amount of ERC20 token to stake\r\n        @param data Additional data as per the EIP900\r\n    */\r\n    function stake(uint256 amount, bytes calldata data) external override {\r\n        //transfer the ERC20 token from the addr, he must have set an allowance of {amount} tokens\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"ERC20 token transfer failed, did you forget to create an allowance?\");\r\n        _stakeFor(msg.sender, amount, data);\r\n    }\r\n\r\n    /**\r\n        @dev Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\r\n        @param addr Address who will own the stake afterwards\r\n        @param amount Amount of ERC20 token to stake\r\n        @param data Additional data as per the EIP900\r\n    */\r\n    function stakeFor(address addr, uint256 amount, bytes calldata data) external override {\r\n        //transfer the ERC20 token from the addr, he must have set an allowance of {amount} tokens\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"ERC20 token transfer failed, did you forget to create an allowance?\");\r\n        //create the stake for this amount\r\n        _stakeFor(addr, amount, data);\r\n    }\r\n\r\n    /**\r\n        @dev Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the addr, if unstaking is currently not possible the function MUST revert\r\n        @param amount Amount of ERC20 token to remove from the stake\r\n        @param data Additional data as per the EIP900\r\n    */\r\n    function unstake(uint256 amount, bytes calldata data) external override {\r\n        _unstake(amount, data);\r\n        //make the transfer\r\n        require(_token.transfer(msg.sender, amount),\"ERC20 token transfer failed\");\r\n    }\r\n\r\n     /**\r\n        @dev Withdraws rewards (basically unstake then restake)\r\n        @param amount Amount of ERC20 token to remove from the stake\r\n    */\r\n    function withdraw(uint256 amount) external {\r\n        _unstake(amount, \"0x\");\r\n        _stakeFor(msg.sender, amount, \"0x\");\r\n    }\r\n\r\n    /**\r\n        @dev Called by contracts to distribute dividends\r\n        Updates the bond value\r\n    */\r\n    function distribute() external payable override virtual {\r\n        _distribute(msg.value);\r\n    }\r\n\r\n    /**\r\n        @dev Called by contracts to distribute dividends\r\n        Updates the bond value\r\n    */\r\n    function _distribute(uint256 amount) internal {\r\n        //cant distribute when no stakers\r\n        require(_total_staked > 0, \"cant distribute when no stakers\");\r\n        //take into account the dust\r\n        uint256 temp_to_distribute = to_distribute.add(amount);\r\n        uint256 total_bonds = _total_staked.div(PRECISION);\r\n        uint256 bond_increase = temp_to_distribute.div(total_bonds);\r\n        uint256 distributed_total = total_bonds.mul(bond_increase);\r\n        bond_value = bond_value.add(bond_increase);\r\n        //collect the dust\r\n        to_distribute = temp_to_distribute.sub(distributed_total);\r\n        emit Profit(amount);\r\n    }\r\n\r\n    /**\r\n        @dev Returns the current total of tokens staked for an address\r\n        @param addr address owning the stake\r\n        @return the total of staked tokens of this address\r\n    */\r\n    function totalStakedFor(address addr) external view override returns (uint256) {\r\n        return _stakes[addr];\r\n    }\r\n    \r\n    /**\r\n        @dev Returns the current total of tokens staked\r\n        @return the total of staked tokens\r\n    */\r\n    function totalStaked() external view override returns (uint256) {\r\n        return _total_staked;\r\n    }\r\n\r\n    /**\r\n        @dev Address of the token being used by the staking interface\r\n        @return ERC20 token token address\r\n    */\r\n    function token() external view override returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n        @dev MUST return true if the optional history functions are implemented, otherwise false\r\n        We dont want this\r\n    */\r\n    function supportsHistory() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n        @dev Returns how much ETH the user can withdraw currently\r\n        @param addr Address of the user to check reward for\r\n        @return the amount of ETH addr will perceive if he unstakes now\r\n    */\r\n    function getReward(address addr) public view returns (uint256) {\r\n        return _getReward(addr,_stakes[addr]);\r\n    }\r\n\r\n    /**\r\n        @dev Returns how much ETH the user can withdraw currently\r\n        @param addr Address of the user to check reward for\r\n        @param amount Number of stakes\r\n        @return the amount of ETH addr will perceive if he unstakes now\r\n    */\r\n    function _getReward(address addr, uint256 amount) internal view returns (uint256) {\r\n        return amount.mul(bond_value.sub(_bond_value_addr[addr])).div(PRECISION);\r\n    }\r\n\r\n    /**\r\n        @dev Internally unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the addr, if unstaking is currently not possible the function MUST revert\r\n        @param amount Amount of ERC20 token to remove from the stake\r\n        @param data Additional data as per the EIP900\r\n    */\r\n    function _unstake(uint256 amount, bytes memory data) internal {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(amount <= _stakes[msg.sender], \"You dont have enough staked\");\r\n        uint256 to_reward = _getReward(msg.sender, amount);\r\n        _total_staked = _total_staked.sub(amount);\r\n        _stakes[msg.sender] = _stakes[msg.sender].sub(amount);\r\n        if(_stakes[msg.sender] == 0) {\r\n            investor_count--;\r\n        }\r\n        //take into account dust error during payment too\r\n        if(address(this).balance >= to_reward) {\r\n            msg.sender.transfer(to_reward);\r\n        } else {\r\n            //we cant pay the dust error, just void the balance\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n        \r\n        emit Unstaked(msg.sender, amount, _total_staked, data);\r\n    }\r\n\r\n    /**\r\n        @dev Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\r\n        @param addr Address who will own the stake afterwards\r\n        @param amount Amount of ERC20 token to stake\r\n        @param data Additional data as per the EIP900\r\n    */\r\n    function _stakeFor(address addr, uint256 amount, bytes memory data) internal {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(addr != address(0));\r\n        _total_staked = _total_staked.add(amount);\r\n        if(_stakes[addr] == 0) {\r\n            investor_count++;\r\n        }\r\n\r\n        uint256 accumulated_reward = getReward(addr);\r\n        _stakes[addr] = _stakes[addr].add(amount);\r\n        \r\n        uint256 new_bond_value = accumulated_reward.div(_stakes[addr].div(PRECISION));\r\n        _bond_value_addr[addr] = bond_value.sub(new_bond_value);\r\n        emit Staked(msg.sender, amount, _total_staked, data);\r\n    }\r\n}\n\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\n\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\n\n/**\r\n* Allows a contract to have admin rights on changing some config values\r\n*/\nabstract contract Configurable is Ownable {\r\n\r\n    event ConfigChanged(bytes32 name, uint256 new_value);\r\n    // config\r\n\tmapping(bytes32 => uint256) public config;\r\n\r\n    constructor() public\r\n    Ownable() {\r\n    }\r\n\r\n    /**\r\n        @dev Sets a config value\r\n\t\t@param name Name of the value\r\n        @param new_value The value to write in the config\r\n    */\r\n    function setConfigValue(bytes32 name, uint256 new_value) public virtual\r\n    onlyOwner() {\r\n        config[name] = new_value;\r\n        emit ConfigChanged(name, new_value);\r\n    }\r\n}\n\n/**\r\n * An IERC900 staking contract\r\n */\ncontract TribeStaking is Staking, Configurable {\r\n    using SafeMath for uint256;\r\n\r\n    IDistributable public KnightsAddress;\r\n    address payable public PlincAddress;\r\n\r\n    constructor(address tribe_address, address knights_address, address payable plinc_address) public\r\n    Staking(tribe_address, 18)\r\n    Configurable()\r\n    {\r\n        KnightsAddress = IDistributable(knights_address);\r\n        PlincAddress = plinc_address;\r\n        //plinc and dev shares permill\r\n        config[\"PLINC_SHARE\"] = 20;\r\n        config[\"DEV_SHARE\"] = 200;\r\n    }\r\n    /**\r\n        @dev Called by contracts to distribute dividends\r\n        Updates the bond value\r\n    */\r\n    function distribute() external payable override {\r\n        uint256 total = msg.value;\r\n        //compute plinc and dev net share and send it directly\r\n        uint256 plinc = msg.value.div(1000).mul(config[\"PLINC_SHARE\"]);\r\n        uint256 dev = msg.value.div(1000).mul(config[\"DEV_SHARE\"]);\r\n        KnightsAddress.distribute{value : dev}();\r\n        PlincAddress.transfer(plinc);\r\n        //distribute to stakers\r\n        super._distribute(total.sub(plinc).sub(dev));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tribe_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"knights_address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"plinc_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KnightsAddress\",\"outputs\":[{\"internalType\":\"contract IDistributable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PlincAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond_value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investor_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"setConfigValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"to_distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TribeStaking","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001405c709d6bed996d046cd94d174af7ec0c39f430000000000000000000000002baed9dbcfbe27be25eeee3025d070dfd233f1400000000000000000000000004e3ee12ae8d953dc8e85911a447b7b816363577b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}