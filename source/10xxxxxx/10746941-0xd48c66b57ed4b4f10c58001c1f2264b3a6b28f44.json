{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: DeFiat 2020\r\n\r\n/*\r\n* Copyright (c) 2020 DeFiat.net\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: DeFiat 2020\r\n\r\n/*\r\n* Copyright (c) 2020 DeFiat.net\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n//DeFiat Governance v0.1 - 2020 AUG 27\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract DeFiat_Gov{\r\n//Governance contract for DeFiat Token.\r\n    address public mastermind;\r\n    mapping (address => uint256) private actorLevel; //governance = multi-tier level\r\n    \r\n    mapping (address => uint256) private override _balances; \r\n     mapping (address => uint256) private override _allowances; \r\n     \r\n    uint256 private burnRate; // %rate of burn at each transaction\r\n    uint256 private feeRate;  // %rate of fee taken at each transaction\r\n    address private feeDestination; //target address for fees (to support staking contracts)\r\n\r\n    event stdEvent(address _txOrigin, uint256 _number, bytes32 _signature, string _desc);\r\n\r\n//== CONSTRUCTOR\r\nconstructor() public {\r\n    mastermind = msg.sender;\r\n    actorLevel[mastermind] = 3;\r\n    feeDestination = mastermind;\r\n    emit stdEvent(msg.sender, 3, sha256(abi.encodePacked(mastermind)), \"constructor\");\r\n}\r\n\r\n//== MODIFIERS ==\r\n    modifier onlyMastermind {\r\n    require(msg.sender == mastermind, \" only Mastermind\");\r\n    _;\r\n    }\r\n    modifier onlyGovernor {\r\n    require(actorLevel[msg.sender] >= 2,\"only Governors\");\r\n    _;\r\n    }\r\n    modifier onlyPartner {\r\n    require(actorLevel[msg.sender] >= 1,\"only Partners\");\r\n    _;\r\n    }  //future use\r\n    \r\n//== VIEW ==    \r\n    function viewActorLevelOf(address _address) public view returns (uint256) {\r\n        return actorLevel[_address]; //address lvl (3, 2, 1 or 0)\r\n    }  \r\n    function viewBurnRate() public view returns (uint256)  {\r\n        return burnRate;\r\n    }\r\n    function viewFeeRate() public view returns (uint256)  {\r\n        return feeRate;\r\n    }\r\n    function viewFeeDestination() public view returns (address)  {\r\n        return feeDestination;\r\n    }\r\n    \r\n//== SET INTERNAL VARIABLES==\r\n\r\n    function setActorLevel(address _address, uint256 _newLevel) public {\r\n      require(_newLevel < actorLevel[msg.sender], \"Can only give rights below you\");\r\n      actorLevel[_address] = _newLevel; //updates level -> adds or removes rights\r\n      emit stdEvent(_address, _newLevel, sha256(abi.encodePacked(msg.sender, _newLevel)), \"Level changed\");\r\n    }\r\n    \r\n    //MasterMind specific \r\n    function removeAllRights(address _address) public onlyMastermind {\r\n      require(_address != mastermind);\r\n      actorLevel[_address] = 0; //removes all rights\r\n      emit stdEvent(address(_address), 0, sha256(abi.encodePacked(_address)), \"Rights Revoked\");\r\n    }\r\n    function killContract() public onlyMastermind {\r\n        selfdestruct(msg.sender); //destroys the contract if replacement needed\r\n    } //only Mastermind can kill contract\r\n    function setMastermind(address _mastermind) public onlyMastermind {\r\n      mastermind = _mastermind;     //Only one mastermind\r\n      actorLevel[_mastermind] = 3; \r\n      actorLevel[msg.sender] = 2;  //new level for previous mastermind\r\n      emit stdEvent(tx.origin, 0, sha256(abi.encodePacked(_mastermind, mastermind)), \"MasterMind Changed\");\r\n    }     //only Mastermind can transfer his own rights\r\n     \r\n    //Governors specific\r\n    function changeBurnRate(uint _burnRate) public onlyGovernor {\r\n      require(_burnRate <=200, \"20% limit\"); //cannot burn more than 20%/tx\r\n      burnRate = _burnRate; \r\n      emit stdEvent(address(msg.sender), _burnRate, sha256(abi.encodePacked(msg.sender, _burnRate)), \"BurnRate Changed\");\r\n    }     //only governors can change burnRate/tx\r\n    function changeFeeRate(uint _feeRate) public onlyGovernor {\r\n      require(_feeRate <=200, \"20% limit\"); //cannot take more than 20% fees/tx\r\n      feeRate = _feeRate;\r\n      emit stdEvent(address(msg.sender), _feeRate, sha256(abi.encodePacked(msg.sender, _feeRate)), \"FeeRate Changed\");\r\n    }    //only governors can change feeRate/tx\r\n    function setFeeDestination(address _nextDest) public onlyGovernor {\r\n         feeDestination = _nextDest;\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n        \r\n    //max and min from Zeppelin math.   \r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}          //Zeppelin's SafeMath\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n} //don't use\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract _ERC20 is Context, IERC20 { \r\n    using SafeMath for uint256;\r\n    //using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function _constructor(string memory name, string memory symbol) internal {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n//Public Functions\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n//Internal Functions\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }  //overriden in Defiat_Token\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n} \r\n\r\n\r\ncontract DeFiat_Points is _ERC20{\r\n    \r\n    //global variables\r\n    address public deFiat_Token;                        //1 DeFiat token address \r\n    mapping(address => bool) public deFiat_Gov;         //multiple governing addresses\r\n    \r\n    uint256 public txThreshold; //min tansfer to generate points\r\n    mapping (uint => uint256) public _discountTranches;\r\n    mapping (address => uint256) private _discounts; //current discount (base100)\r\n\r\n\r\n//== modifiers ==\r\n    modifier onlyGovernors {\r\n        require(deFiat_Gov[msg.sender] == true, \"Only governing contract\");\r\n        _;\r\n    }\r\n    modifier onlyToken {\r\n        require(msg.sender == deFiat_Token, \"Only token\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public { //token and governing contract\r\n        deFiat_Gov[msg.sender] = true; //msg.sender is the 1st governor\r\n        _constructor(\"DeFiat Points\", \"DFTP\"); //calls the ERC20 \"_constructor\" to update token name\r\n        txThreshold = 1e18*100;//\r\n        setAll10DiscountTranches(\r\n             1e18*10,  1e18*50,  1e18*100,  1e18*500,  1e18*1000, \r\n             1e18*1e10,  1e18*1e10+1,  1e18*1e10+2, 1e18*1e10+3); //60% and abovse closed at launch.\r\n        _discounts[msg.sender]=100;\r\n        //no minting. _totalSupply = 0\r\n    }\r\n\r\n//== VIEW ==\r\n    function viewDiscountOf(address _address) public view returns (uint256) {\r\n        return _discounts[_address];\r\n    }\r\n    function viewEligibilityOf(address _address) public view returns (uint256 tranche) {\r\n        uint256 _tranche = 0;\r\n        for(uint256 i=0; i<=9; i++){\r\n           if(balanceOf(_address) >= _discountTranches[i]) { \r\n             _tranche = i;}\r\n           else{break;}\r\n        }\r\n        return _tranche;\r\n    }\r\n    function discountPointsNeeded(uint _tranche) public view returns (uint256 pointsNeeded) {\r\n        return( _discountTranches[_tranche]); //check the nb of points needed to access discount tranche\r\n    }\r\n\r\n//== SET ==\r\n    function updateMyDiscountOf() public returns (bool) {\r\n        uint256 _tranche = viewEligibilityOf(msg.sender);\r\n        _discounts[msg.sender] =  SafeMath.mul(10, _tranche); //update of discount base100\r\n        return true;\r\n    }  //users execute this function to upgrade a status level to the max tranche\r\n\r\n//== SET onlyGovernor ==\r\n    function setDeFiatToken(address _token) external onlyGovernors returns(address){\r\n        return deFiat_Token = _token;\r\n    }\r\n    function setGovernor(address _address, bool _rights) external onlyGovernors {\r\n        require(msg.sender != _address); //prevents self stripping of rights\r\n        deFiat_Gov[_address] = _rights;\r\n    }\r\n    \r\n    function setTxTreshold(uint _amount) external onlyGovernors {\r\n      txThreshold = _amount;  //base 1e18\r\n    } //minimum amount of tokens to generate points per transaction\r\n    function overrideDiscount(address _address, uint256 _newDiscount) external onlyGovernors {\r\n      require(_newDiscount <= 100); //100 = 100% discount\r\n      _discounts[_address]  = _newDiscount;\r\n    }\r\n    function overrideLoyaltyPoints(address _address, uint256 _newPoints) external onlyGovernors {\r\n        _burn(_address, balanceOf(_address)); //burn all points\r\n        _mint(_address, _newPoints); //mint new points\r\n    }\r\n    \r\n    function setDiscountTranches(uint _tranche, uint256 _pointsNeeded) external onlyGovernors {\r\n        require(_tranche <10, \"max tranche is 9\"); //tranche 9 = 90% discount\r\n        _discountTranches[_tranche] = _pointsNeeded;\r\n    }\r\n    \r\n    function setAll10DiscountTranches(\r\n            uint256 _pointsNeeded1, uint256 _pointsNeeded2, uint256 _pointsNeeded3, uint256 _pointsNeeded4, \r\n            uint256 _pointsNeeded5, uint256 _pointsNeeded6, uint256 _pointsNeeded7, uint256 _pointsNeeded8, \r\n            uint256 _pointsNeeded9) public onlyGovernors {\r\n        _discountTranches[0] = 0;\r\n        _discountTranches[1] = _pointsNeeded1; //10%\r\n        _discountTranches[2] = _pointsNeeded2; //20%\r\n        _discountTranches[3] = _pointsNeeded3; //30%\r\n        _discountTranches[4] = _pointsNeeded4; //40%\r\n        _discountTranches[5] = _pointsNeeded5; //50%\r\n        _discountTranches[6] = _pointsNeeded6; //60%\r\n        _discountTranches[7] = _pointsNeeded7; //70%\r\n        _discountTranches[8] = _pointsNeeded8; //80%\r\n        _discountTranches[9] = _pointsNeeded9; //90%\r\n    }\r\n    \r\n//== MINT points: onlyToken ==  \r\n    function addPoints(address _address, uint256 _txSize, uint256 _points) external onlyToken {\r\n       if(_txSize >= txThreshold){ _mint(_address, _points);}\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal override virtual {\r\n        _ERC20._transfer(sender, recipient, amount);\r\n        //force update discount\r\n        uint256 _tranche = viewEligibilityOf(msg.sender);\r\n        _discounts[msg.sender] =  SafeMath.mul(10, _tranche);\r\n        \r\n    }  //overriden to update discount at every points Transfer. Avoids passing tokens to get discounts.\r\n    \r\n    function burn(uint256 _amount) public returns(bool) {\r\n        _ERC20._burn(msg.sender,_amount);\r\n    }\r\n} \r\n\r\n\r\ncontract DeFiat_Token is _ERC20 {  //overrides the _transfer function and adds burn capabilities\r\n\r\n    using SafeMath for uint;\r\n\r\n//== Variables ==\r\n    address private mastermind;     // token creator.\r\n    address public DeFiat_gov;      // contract governing the Token\r\n    address public DeFiat_points;   // ERC20 loyalty TOKEN\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    struct Transaction {\r\n        address sender;\r\n        address recipient;\r\n        uint256 burnRate;\r\n        uint256 feeRate;\r\n        address feeDestination;\r\n        uint256 senderDiscount;\r\n        uint256 recipientDiscount;\r\n        uint256 actualDiscount;\r\n    }\r\n    Transaction private transaction;\r\n        \r\n//== Modifiers ==\r\n    modifier onlyMastermind {\r\n    require(msg.sender == mastermind, \"only Mastermind\");\r\n    _;\r\n    }\r\n    modifier onlyGovernor {\r\n    require(msg.sender == mastermind || msg.sender == DeFiat_gov, \"only Governance contract\");\r\n    _;\r\n    } //only Governance managing contract\r\n    modifier onlyPoints {\r\n    require(msg.sender == mastermind || msg.sender == DeFiat_points, \" only Points contract\");\r\n    _;\r\n    }   //only Points managing contract\r\n\r\n\r\n    \r\n//== Events ==\r\n    event stdEvent(address _address, uint256 _number, bytes32 _signature, string _desc);\r\n \r\n//== Token generation ==\r\n    constructor (address _gov, address _points) public {  //token requires that governance and points are up and running\r\n        mastermind = msg.sender;\r\n        _constructor(\"DeFiat\",\"DFT\"); //calls the ERC20 _constructor\r\n        _mint(mastermind, 1e18 * 500000); //mint 300,000 tokens\r\n        \r\n        DeFiat_gov = _gov;      // contract governing the Token\r\n        DeFiat_points = _points;   // ERC20 loyalty TOKEN\r\n    }\r\n    \r\n//== mastermind ==\r\n    function widthdrawAnyToken(address _recipient, address _ERC20address, uint256 _amount) public onlyGovernor returns (bool) {\r\n        IERC20(_ERC20address).transfer(_recipient, _amount); //use of the _ERC20 traditional transfer\r\n        return true;\r\n    } //get tokens sent by error to contract\r\n    function setGovernorContract(address _gov) external onlyGovernor {\r\n        DeFiat_gov = _gov;\r\n    }    // -> governance transfer\r\n    function setPointsContract(address _pts) external onlyGovernor {\r\n        DeFiat_points = _pts;\r\n    }      // -> new points management contract\r\n    function setMastermind(address _mastermind) external onlyMastermind {\r\n        mastermind = _mastermind; //use the 0x0 address to resign\r\n    } // transfered to go contract OCT 2020\r\n\r\n//== View variables from external contracts ==\r\n    function _viewFeeRate() public view returns(uint256){\r\n       return DeFiat_Gov(DeFiat_gov).viewFeeRate();\r\n    }\r\n    function _viewBurnRate() public view returns(uint256){\r\n        return DeFiat_Gov(DeFiat_gov).viewBurnRate();\r\n    }\r\n    function _viewFeeDestination() public view returns(address){\r\n        return DeFiat_Gov(DeFiat_gov).viewFeeDestination();\r\n    }\r\n    function _viewDiscountOf(address _address) public view returns(uint256){\r\n        return DeFiat_Points(DeFiat_points).viewDiscountOf(_address);\r\n    }\r\n    function _viewPointsOf(address _address) public view returns(uint256){\r\n        return DeFiat_Points(DeFiat_points).balanceOf(_address);\r\n    }\r\n  \r\n//== override _transfer function in the ERC20Simple contract ==    \r\n    function updateTxStruct(address sender, address recipient) internal returns(bool){\r\n        transaction.sender = sender;\r\n        transaction.recipient = recipient;\r\n        transaction.burnRate = _viewBurnRate();\r\n        transaction.feeRate = _viewFeeRate();\r\n        transaction.feeDestination = _viewFeeDestination();\r\n        transaction.senderDiscount = _viewDiscountOf(sender);\r\n        transaction.recipientDiscount = _viewDiscountOf(recipient);\r\n        transaction.actualDiscount = SafeMath.max(transaction.senderDiscount, transaction.recipientDiscount);\r\n        \r\n         if( transaction.actualDiscount > 100){transaction.actualDiscount = 100;} //manages \"forever pools\"\r\n    \r\n        return true;\r\n    } //struct used to prevent \"stack too deep\" error\r\n    \r\n    function addPoints(address sender, uint256 _threshold) public {\r\n    DeFiat_Points(DeFiat_points).addPoints(sender, _threshold, 1e18); //Update user's loyalty points +1 = +1e18\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal override { //overrides the inherited ERC20 _transfer\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n    //load transaction Struct (gets info from external contracts)\r\n        updateTxStruct(sender, recipient);\r\n        \r\n    //get discounts and apply them. You get the MAX discounts of the sender x recipient. discount is base100\r\n        uint256 dAmount = \r\n        SafeMath.div(\r\n            SafeMath.mul(amount, \r\n                                SafeMath.sub(100, transaction.actualDiscount))\r\n        ,100);     //amount discounted to calculate fees\r\n\r\n    //Calculates burn and fees on discounted amount (burn and fees are 0.0X% ie base 10000 -> \"10\" = 0.1%)\r\n        uint _toBurn = SafeMath.div(SafeMath.mul(dAmount,transaction.burnRate),10000); \r\n        uint _toFee = SafeMath.div(SafeMath.mul(dAmount,transaction.feeRate),10000); \r\n        uint _amount = SafeMath.sub(amount, SafeMath.add(_toBurn,_toFee)); //calculates the remaning amount to be sent\r\n   \r\n    //transfers -> forcing _ERC20 inheritance level\r\n        if(_toFee > 0) {\r\n        _ERC20._transfer(sender, transaction.feeDestination, _toFee); //native _transfer + emit\r\n        } //transfer fee\r\n        \r\n        if(_toBurn > 0) {_ERC20._burn(sender,_toBurn);} //native _burn tokens from sender\r\n        \r\n        //transfer remaining amount. + emit\r\n        _ERC20._transfer(sender, recipient, _amount); //native _transfer + emit\r\n\r\n        //mint loyalty points and update lastTX\r\n        if(sender != recipient){addPoints(sender, amount);} //uses the full amount to determine point minting\r\n    }\r\n    \r\n    function burn(uint256 _amount) public returns(bool) {\r\n        _ERC20._burn(msg.sender,_amount);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_points\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_signature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"stdEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFiat_gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiat_points\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_viewBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_viewDiscountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_viewFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_viewFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_viewPointsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastermind\",\"type\":\"address\"}],\"name\":\"setMastermind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pts\",\"type\":\"address\"}],\"name\":\"setPointsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"widthdrawAnyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeFiat_Token","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003aa3303877a0d1c360a9fe2693ae9f31087a13810000000000000000000000008c9d8f5cc3427f460e20f63b36992f74aa19e27d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3ce84145792b8a9067d114793ef328bb44c033bdd368948002ec53470096052f"}]}