{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICurveGaugeMapping {\r\n\r\n  struct GaugeData {\r\n    address gaugeAddress;\r\n    bool rewardToken;\r\n  }\r\n\r\n  function gaugeMapping(bytes32) external view returns(GaugeData memory);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface IMintor {\r\n    function minted(address, address) external view returns (uint);\r\n}\r\n\r\ninterface IGauge {\r\n  function integrate_fraction(address user) external view returns(uint256 amt);\r\n  function lp_token() external view returns(address token);\r\n  function rewarded_token() external view returns(address token);\r\n  function crv_token() external view returns(address token);\r\n  function balanceOf(address user) external view returns(uint256 amt);\r\n  function rewards_for(address user) external view returns(uint256 amt);\r\n  function claimed_rewards_for(address user) external view returns(uint256 amt);\r\n}\r\n\r\ncontract GaugeHelper {\r\n  function getCurveGaugeMappingAddr() internal pure returns (address){\r\n    return 0x1C800eF1bBfE3b458969226A96c56B92a069Cc92;\r\n  }\r\n\r\n  function getCurveMintorAddr() internal pure returns (address){\r\n    return 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n  }\r\n\r\n  /**\r\n   * @dev Convert String to bytes32.\r\n   */\r\n  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n    require(bytes(str).length != 0, \"string-empty\");\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      result := mload(add(str, 32))\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract Resolver is GaugeHelper {\r\n    struct PositionData {\r\n        uint stakedBal;\r\n        uint crvEarned;\r\n        uint crvClaimed;\r\n        uint rewardsEarned;\r\n        uint rewardsClaimed;\r\n        uint crvBal;\r\n        uint rewardBal;\r\n        bool hasReward;\r\n    }\r\n    function getPosition(string memory gaugeName, address user) public view returns (PositionData memory positionData) { \r\n        ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());\r\n        ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(\r\n            bytes32(stringToBytes32(gaugeName)\r\n        ));\r\n        IGauge gauge = IGauge(curveGaugeData.gaugeAddress);\r\n        IMintor mintor = IMintor(getCurveMintorAddr());\r\n        positionData.stakedBal = gauge.balanceOf(user);\r\n        positionData.crvEarned = gauge.integrate_fraction(user);\r\n        positionData.crvClaimed = mintor.minted(user, address(gauge));\r\n\r\n        if (curveGaugeData.rewardToken) {\r\n            positionData.rewardsEarned = gauge.rewards_for(user);\r\n            positionData.rewardsClaimed = gauge.claimed_rewards_for(user);\r\n            positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);\r\n        }\r\n        positionData.hasReward = curveGaugeData.rewardToken;\r\n\r\n        positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);\r\n    }\r\n\r\n    function getPositions(string[] memory gaugesName, address user) public view returns (PositionData[] memory positions) {\r\n        positions = new PositionData[](gaugesName.length);\r\n        for (uint i = 0; i < gaugesName.length; i++) {\r\n            positions[i] = getPosition(gaugesName[i], user);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCurveGaugeResolver is Resolver {\r\n    string public constant name = \"Curve-Gauge-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gaugeName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasReward\",\"type\":\"bool\"}],\"internalType\":\"struct Resolver.PositionData\",\"name\":\"positionData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"gaugesName\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasReward\",\"type\":\"bool\"}],\"internalType\":\"struct Resolver.PositionData[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCurveGaugeResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d5d46a5700e3bd7f8eb161b9971258d9cb047f84d36578a51126f56bb385ef28"}]}