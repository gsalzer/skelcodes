{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface PermittedConvertsInterface {\r\n  function permittedAddresses(address _address) external view returns(bool);\r\n}\r\ninterface PermittedStablesInterface {\r\n  function permittedAddresses(address _address) external view returns(bool);\r\n}\r\ninterface PermittedPoolsInterface {\r\n  function permittedAddresses(address _address) external view returns(bool);\r\n}\r\ninterface PermittedExchangesInterface {\r\n  function permittedAddresses(address _address) external view returns(bool);\r\n}\r\ninterface SmartFundUSDFactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string  calldata _name,\r\n    uint256 _successFee,\r\n    uint256 _platformFee,\r\n    address _platfromAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedExchanges,\r\n    address _permittedPools,\r\n    address _permittedStabels,\r\n    address _poolPortalAddress,\r\n    address _stableCoinAddress,\r\n    address _cEther,\r\n    address _permittedConvertsAddress\r\n    )\r\n  external\r\n  returns(address);\r\n}\r\ninterface SmartFundETHFactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string  calldata _name,\r\n    uint256 _successFee,\r\n    uint256 _platformFee,\r\n    address _platfromAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedExchanges,\r\n    address _permittedPools,\r\n    address _poolPortalAddress,\r\n    address _cEther,\r\n    address _permittedConvertsAddress\r\n    )\r\n  external\r\n  returns(address);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n* The SmartFundRegistry is used to manage the creation and permissions of SmartFund contracts\r\n*/\r\ncontract SmartFundRegistry is Ownable {\r\n  address[] public smartFunds;\r\n\r\n  // The Smart Contract which stores the addresses of all the authorized Exchange Portals\r\n  PermittedExchangesInterface public permittedExchanges;\r\n  // The Smart Contract which stores the addresses of all the authorized Pool Portals\r\n  PermittedPoolsInterface public permittedPools;\r\n  // The Smart Contract which stores the addresses of all the authorized stable coins\r\n  PermittedStablesInterface public permittedStables;\r\n  // The Smart Contract which stores the addresses of all the authorized Converts portal\r\n  PermittedConvertsInterface public permittedConverts;\r\n\r\n  // Addresses of portals\r\n  address public poolPortalAddress;\r\n  address public exchangePortalAddress;\r\n  address public convertPortalAddress;\r\n\r\n  // platForm fee is out of 10,000, e.g 2500 is 25%\r\n  uint256 public platformFee;\r\n\r\n  // Default maximum success fee is 3000/30%\r\n  uint256 public maximumSuccessFee = 3000;\r\n\r\n  // Address of stable coin can be set in constructor and changed via function\r\n  address public stableCoinAddress;\r\n\r\n  // Addresses for Compound platform\r\n  address public cEther;\r\n\r\n  // Factories\r\n  SmartFundETHFactoryInterface public smartFundETHFactory;\r\n  SmartFundUSDFactoryInterface public smartFundUSDFactory;\r\n\r\n  event SmartFundAdded(address indexed smartFundAddress, address indexed owner);\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _convertPortalAddress         address of convert portal contract\r\n  * @param _platformFee                  Initial platform fee\r\n  * @param _permittedExchangesAddress    Address of the permittedExchanges contract\r\n  * @param _exchangePortalAddress        Address of the initial ExchangePortal contract\r\n  * @param _permittedPoolAddress         Address of the permittedPool contract\r\n  * @param _poolPortalAddress            Address of the initial PoolPortal contract\r\n  * @param _permittedStables             Address of the permittesStabels contract\r\n  * @param _stableCoinAddress            Address of the stable coin\r\n  * @param _smartFundETHFactory          Address of smartFund ETH factory\r\n  * @param _smartFundUSDFactory          Address of smartFund USD factory\r\n  * @param _cEther                       Address of Compound ETH wrapper\r\n  * @param _permittedConvertsAddress     Address of the permittedConverts contract\r\n  */\r\n  constructor(\r\n    address _convertPortalAddress,\r\n    uint256 _platformFee,\r\n    address _permittedExchangesAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedPoolAddress,\r\n    address _poolPortalAddress,\r\n    address _permittedStables,\r\n    address _stableCoinAddress,\r\n    address _smartFundETHFactory,\r\n    address _smartFundUSDFactory,\r\n    address _cEther,\r\n    address _permittedConvertsAddress\r\n  ) public {\r\n    convertPortalAddress = _convertPortalAddress;\r\n    platformFee = _platformFee;\r\n    exchangePortalAddress = _exchangePortalAddress;\r\n    permittedExchanges = PermittedExchangesInterface(_permittedExchangesAddress);\r\n    permittedPools = PermittedPoolsInterface(_permittedPoolAddress);\r\n    permittedStables = PermittedStablesInterface(_permittedStables);\r\n    poolPortalAddress = _poolPortalAddress;\r\n    stableCoinAddress = _stableCoinAddress;\r\n    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\r\n    smartFundUSDFactory = SmartFundUSDFactoryInterface(_smartFundUSDFactory);\r\n    cEther = _cEther;\r\n    permittedConverts = PermittedConvertsInterface(_permittedConvertsAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev Creates a new SmartFund\r\n  *\r\n  * @param _name               The name of the new fund\r\n  * @param _successFee         The fund managers success fee\r\n  * @param _isStableBasedFund  true for USD base fund, false for ETH base\r\n  */\r\n  function createSmartFund(\r\n    string memory _name,\r\n    uint256 _successFee,\r\n    bool _isStableBasedFund\r\n  ) public {\r\n    // Require that the funds success fee be less than the maximum allowed amount\r\n    require(_successFee <= maximumSuccessFee);\r\n\r\n    address owner = msg.sender;\r\n    address smartFund;\r\n\r\n    if(_isStableBasedFund){\r\n      // Create USD Fund\r\n      smartFund = smartFundUSDFactory.createSmartFund(\r\n        owner,\r\n        _name,\r\n        _successFee,\r\n        platformFee,\r\n        exchangePortalAddress,\r\n        address(permittedExchanges),\r\n        address(permittedPools),\r\n        address(permittedStables),\r\n        poolPortalAddress,\r\n        stableCoinAddress,\r\n        convertPortalAddress,\r\n        cEther,\r\n        address(permittedConverts)\r\n      );\r\n    }else{\r\n      // Create ETH Fund\r\n      smartFund = smartFundETHFactory.createSmartFund(\r\n        owner,\r\n        _name,\r\n        _successFee,\r\n        platformFee,\r\n        exchangePortalAddress,\r\n        address(permittedExchanges),\r\n        address(permittedPools),\r\n        poolPortalAddress,\r\n        convertPortalAddress,\r\n        cEther,\r\n        address(permittedConverts)\r\n      );\r\n    }\r\n\r\n    smartFunds.push(smartFund);\r\n    emit SmartFundAdded(smartFund, owner);\r\n  }\r\n\r\n  function totalSmartFunds() public view returns (uint256) {\r\n    return smartFunds.length;\r\n  }\r\n\r\n  function getAllSmartFundAddresses() public view returns(address[] memory) {\r\n    address[] memory addresses = new address[](smartFunds.length);\r\n\r\n    for (uint i; i < smartFunds.length; i++) {\r\n      addresses[i] = address(smartFunds[i]);\r\n    }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets a new default ExchangePortal address\r\n  *\r\n  * @param _newExchangePortalAddress    Address of the new exchange portal to be set\r\n  */\r\n  function setExchangePortalAddress(address _newExchangePortalAddress) public onlyOwner {\r\n    // Require that the new exchange portal is permitted by permittedExchanges\r\n    require(permittedExchanges.permittedAddresses(_newExchangePortalAddress));\r\n\r\n    exchangePortalAddress = _newExchangePortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets a new default Portal Portal address\r\n  *\r\n  * @param _poolPortalAddress    Address of the new pool portal to be set\r\n  */\r\n  function setPoolPortalAddress (address _poolPortalAddress) external onlyOwner {\r\n    // Require that the new pool portal is permitted by permittedPools\r\n    require(permittedPools.permittedAddresses(_poolPortalAddress));\r\n\r\n    poolPortalAddress = _poolPortalAddress;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets a new default Convert Portal address\r\n  *\r\n  * @param _convertPortalAddress    Address of the new convert portal to be set\r\n  */\r\n  function setConvertPortalAddress(address _convertPortalAddress) external onlyOwner {\r\n    // Require that the new convert portal is permitted by permittedConverts\r\n    require(permittedConverts.permittedAddresses(_convertPortalAddress));\r\n\r\n    convertPortalAddress = _convertPortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets maximum success fee for all newly created SmartFunds\r\n  *\r\n  * @param _maximumSuccessFee    New maximum success fee\r\n  */\r\n  function setMaximumSuccessFee(uint256 _maximumSuccessFee) external onlyOwner {\r\n    maximumSuccessFee = _maximumSuccessFee;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets platform fee for all newly created SmartFunds\r\n  *\r\n  * @param _platformFee    New platform fee\r\n  */\r\n  function setPlatformFee(uint256 _platformFee) external onlyOwner {\r\n    platformFee = _platformFee;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets new stableCoinAddress\r\n  *\r\n  * @param _stableCoinAddress    New stable address\r\n  */\r\n  function setStableCoinAddress(address _stableCoinAddress) external onlyOwner {\r\n    require(permittedStables.permittedAddresses(_stableCoinAddress));\r\n    stableCoinAddress = _stableCoinAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows platform to withdraw tokens received as part of the platform fee\r\n  *\r\n  * @param _tokenAddress    Address of the token to be withdrawn\r\n  */\r\n  function withdrawTokens(address _tokenAddress) external onlyOwner {\r\n    IERC20 token = IERC20(_tokenAddress);\r\n\r\n    token.transfer(owner(), token.balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n  * @dev Allows platform to withdraw ether received as part of the platform fee\r\n  */\r\n  function withdrawEther() external onlyOwner {\r\n    payable(owner()).transfer(address(this).balance);\r\n  }\r\n\r\n  // Fallback payable function in order to receive ether when fund manager withdraws their cut\r\n  fallback() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_convertPortalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_permittedExchangesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangePortalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolPortalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedStables\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundETHFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartFundUSDFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cEther\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permittedConvertsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartFundAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SmartFundAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cEther\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertPortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_successFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStableBasedFund\",\"type\":\"bool\"}],\"name\":\"createSmartFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangePortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSmartFundAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumSuccessFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedConverts\",\"outputs\":[{\"internalType\":\"contract PermittedConvertsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedExchanges\",\"outputs\":[{\"internalType\":\"contract PermittedExchangesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedPools\",\"outputs\":[{\"internalType\":\"contract PermittedPoolsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permittedStables\",\"outputs\":[{\"internalType\":\"contract PermittedStablesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolPortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_convertPortalAddress\",\"type\":\"address\"}],\"name\":\"setConvertPortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExchangePortalAddress\",\"type\":\"address\"}],\"name\":\"setExchangePortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumSuccessFee\",\"type\":\"uint256\"}],\"name\":\"setMaximumSuccessFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolPortalAddress\",\"type\":\"address\"}],\"name\":\"setPoolPortalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"setStableCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundETHFactory\",\"outputs\":[{\"internalType\":\"contract SmartFundETHFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFundUSDFactory\",\"outputs\":[{\"internalType\":\"contract SmartFundUSDFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smartFunds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSmartFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartFundRegistry","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a6a40e3c70710be8d137f66a2697c8227821cd6c00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000b55aad20a6c310a5e4b68c3ff1abe5e3ba1b7ffb000000000000000000000000a145eca55ae0e39d7c228ed7a962424a97ac74cb00000000000000000000000065743d807839d4a9a0d7986a09d12698d6138766000000000000000000000000d63495461ca711d59e480ac5c3827b7f7c334fb30000000000000000000000003621c85a4f3a4dcff575550c5e1916b9ba4aeebd0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009e8991f78367af819188e1a2aa6c9474bc48e696000000000000000000000000ea7c52716e07d8ff83d8f6e042f7c6105f5818b00000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed50000000000000000000000006666fc23ae6c26e8500ccd55a870cd4ede49202c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e8ff3143b6f976864bd375d837b3762831c2258969b461a3fe657e18cd0269a5"}]}