{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n// @Smart Contract: TrustarooFund\r\n// @Author: Trustaroo Global Community Fund - TGCF\r\n\r\ncontract TrustarooFund {\r\n    \r\n    address public owner;\r\n    uint public total;\r\n    \r\n    mapping (address => uint) public invested;\r\n    mapping (address => uint) public balances;\r\n    \r\n    address[] investors;\r\n\r\n\tfunction TrustarooFund() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n    // Fund Manager Fee\r\n    \r\n    function ownerFee(uint amount) private returns (uint fee) {\r\n        \r\n        fee = amount / 10;\r\n        balances[owner] += fee;\r\n\r\n        return;\r\n        \r\n    }\r\n\r\n    function withdraw() public\r\n    {\r\n        require( balances[msg.sender] != 0 );\r\n\r\n        uint amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n\r\n        if ( !msg.sender.send(amount) ) {\r\n            balances[msg.sender] = amount;\r\n        }\r\n        \r\n    }\r\n\r\n    // Fallback to Accept Funds\r\n    \r\n\tfunction () public payable\r\n    {\r\n        uint dividend = msg.value;\r\n\r\n        // First Investment Goes Completely to the Fund Manager.\r\n        \r\n        if (investors.length == 0) {\r\n            balances[owner] = msg.value;\r\n        } else {\r\n            \r\n            uint fee = ownerFee(dividend);\r\n\r\n            dividend -= fee;\r\n            \r\n        }\r\n     \r\n         // Distribute Dividends\r\n         for ( uint i = 0; i < investors.length; i++ ) {\r\n           if (balances[investors[i]] == 0) {\r\n                balances[investors[i]] = dividend * invested[investors[i]] / total;\r\n           } else {\r\n               balances[investors[i]] += dividend * invested[investors[i]] / total;\r\n           }\r\n         }\r\n\r\n        if ( invested[msg.sender] == 0 ) {\r\n            investors.push(msg.sender);\r\n            invested[msg.sender] = msg.value;\r\n        } else {\r\n            invested[msg.sender] += msg.value;\r\n        }\r\n\r\n        total += msg.value;\r\n        \r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TrustarooFund","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://83a0e210da8f1b39cf1867af441d61a3ad0caa28346cbc89b983138f7236936b"}]}