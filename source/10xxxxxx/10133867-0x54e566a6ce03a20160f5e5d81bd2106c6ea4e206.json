{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n     \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n     \r\n        function owned () public {\r\n            owner = msg.sender;\r\n        }\r\n        \r\n        modifier onlyOwner {\r\n            require (msg.sender == owner);\r\n            _;\r\n        }\r\n      \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n          }\r\n        }\r\n    }\r\n    /**\r\n     * 基础代币合约\r\n     */\r\n    contract TokenERC20 {\r\n        string public name;   //发行的代币名称\r\n        string public symbol; //发行的代币符号\r\n        uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0。\r\n        uint256 public totalSupply; //发行的代币总量\r\n     \r\n    \r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n     \r\n        event Transfer(address indexed from, address indexed to, uint256 value);  \r\n        event Burn(address indexed from, uint256 value);  \r\n     \r\n        function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n            totalSupply = initialSupply * 10 ** uint256(decimals);   \r\n            balanceOf[msg.sender] = totalSupply;\r\n            name = tokenName;\r\n            symbol = tokenSymbol;\r\n        }\r\n     \r\n        function _transfer(address _from, address _to, uint256 _value) internal {\r\n     \r\n          require(_to != 0x0);\r\n    \r\n          require(balanceOf[_from] >= _value);\r\n     \r\n          require(balanceOf[_to] + _value > balanceOf[_to]);\r\n     \r\n          uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n     \r\n        \r\n          balanceOf[_from] -= _value;\r\n     \r\n          balanceOf[_to] += _value;\r\n     \r\n          assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n     \r\n        }\r\n     \r\n      \r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n     \r\n     \r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            //检查发送者是否拥有足够余额\r\n            require(_value <= allowance[_from][msg.sender]);\r\n            allowance[_from][msg.sender] -= _value;\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n     \r\n        function approve(address _spender, uint256 _value) public returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n     \r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n     \r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n    \r\n            balanceOf[msg.sender] -= _value;\r\n           \r\n            totalSupply -= _value;\r\n            Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n     \r\n       \r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n         \r\n            require(balanceOf[_from] >= _value);\r\n            \r\n            require(_value <= allowance[_from][msg.sender]);\r\n           \r\n            balanceOf[_from] -= _value;\r\n            allowance[_from][msg.sender] -= _value;\r\n           \r\n            totalSupply -= _value;\r\n            Burn(_from, _value);\r\n            return true;\r\n        }\r\n    }\r\n     \r\n     \r\n    contract MyAdvancedToken is owned, TokenERC20 {\r\n     \r\n        \r\n        uint256 public sellPrice;\r\n     \r\n       \r\n        uint256 public buyPrice;\r\n     \r\n        \r\n        mapping (address => bool) public frozenAccount;\r\n     \r\n        \r\n        event FrozenFunds(address target, bool frozen);\r\n     \r\n     \r\n        \r\n            function MyAdvancedToken(\r\n            uint256 initialSupply,\r\n            string tokenName,\r\n            string tokenSymbol\r\n        ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n     \r\n     \r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n     \r\n           \r\n            require (_to != 0x0);\r\n     \r\n            \r\n            require (balanceOf[_from] > _value);\r\n     \r\n           \r\n            require (balanceOf[_to] + _value > balanceOf[_to]);\r\n     \r\n           \r\n            require(!frozenAccount[_from]);\r\n            require(!frozenAccount[_to]);\r\n     \r\n            \r\n            balanceOf[_from] -= _value;\r\n     \r\n            \r\n            balanceOf[_to] += _value;\r\n     \r\n            \r\n            Transfer(_from, _to, _value);\r\n     \r\n        }\r\n     \r\n    \r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n            balanceOf[target] += mintedAmount;\r\n            totalSupply += mintedAmount;\r\n     \r\n     \r\n            Transfer(0, this, mintedAmount);\r\n            Transfer(this, target, mintedAmount);\r\n        }\r\n     \r\n       \r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n            FrozenFunds(target, freeze);\r\n        }\r\n     \r\n      \r\n        function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n            sellPrice = newSellPrice;\r\n            buyPrice = newBuyPrice;\r\n        }\r\n        \r\n        function buyEth() payable public {\r\n          uint amount = msg.value / buyPrice;\r\n     \r\n          _transfer(this, msg.sender, amount);\r\n        }\r\n     \r\n      \r\n        function sellEth(uint256 amount) public {\r\n     \r\n           \r\n            require(this.balance >= amount * sellPrice);\r\n     \r\n            _transfer(msg.sender, this, amount);\r\n     \r\n            msg.sender.transfer(amount * sellPrice);\r\n        }\r\n    }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000004a817c800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b676f20627579207468656d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034742540000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3403cf98b903689d502ff083d8b67e9a9870a25c6df31cc4d629aeea4ffb6e5d"}]}