{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.7.0;\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who)  public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n    owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused  {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0x0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken, Pausable {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0x0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view whenNotPaused returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  \r\n  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Buming is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    //Information coin\r\n    string public name = \"Buming\";\r\n    string public symbol = \"BMWT\";\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply = 100000000 * (10 ** decimals);\r\n    \r\n    address public contractAddress = address(this);\r\n    address payable public tokenSale;\r\n    uint256 public unlockTokens = 1654473600;\r\n    uint256 public valueMax = 9999 * (10 ** decimals); \r\n    uint256 public valueMin = 100 * (10 ** decimals);\r\n    uint256 public rate = 1200;\r\n \r\n    //Utils\r\n    uint256 public bonusTotalTokens = 0;\r\n    uint256 public teamTotalTokens = 0;\r\n    uint256 public advisorTotalTokens = 0;\r\n    uint256 public totalTokenToSale = 0;\r\n    uint256 public brazilTotalToSale = 0;\r\n    uint256 public argentinaTotalToSale = 0;\r\n    uint256 public tokensSold = 0;\r\n    uint256 public stage = 0;\r\n    bool public tokensPaid = false;\r\n    \r\n    struct TokensLockedAddress {\r\n      address wallet;\r\n      uint256 value;\r\n    }\r\n\r\n    TokensLockedAddress[] private accounts;\r\n    TokensLockedAddress private objTokensLockedAddress;\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    event SendBonus(address indexed from, address indexed to, uint256 value);\r\n       \r\n    constructor() public {\r\n      tokenSale = 0xe7b283F03834a0d59058bafB7A89c0b902F92fFb;\r\n\r\n      balances[tokenSale] = totalSupply;\r\n      totalTokenToSale = totalSupply.mul(50).div(100);\r\n      bonusTotalTokens = totalSupply.mul(33).div(100);\r\n      advisorTotalTokens = totalSupply.mul(10).div(100);\r\n      teamTotalTokens = totalSupply.mul(7).div(100);\r\n      \r\n      brazilTotalToSale = totalTokenToSale.mul(10).div(100);\r\n      argentinaTotalToSale = totalTokenToSale.mul(10).div(100);\r\n    }\r\n\r\n    modifier stageLocked(){\r\n        require(stage >= 0,'stage dont find');\r\n        require(stage <= 3,'stage dont find');\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroBuy() {\r\n        require(msg.value > 0,'error value zero');\r\n        _;\r\n    }\r\n\r\n    modifier timeLocked(){\r\n        require(now > unlockTokens,'time is blocked');\r\n        _;\r\n    } \r\n\r\n    modifier allowAddLocked(){\r\n        require(tokensPaid == false,'all tokens already was paid');\r\n        _;\r\n    } \r\n    \r\n    function () external nonZeroBuy stageLocked allowAddLocked payable {\r\n        uint256 amount = msg.value.mul(rate);\r\n        \r\n        require (amount <= valueMax,'value dont aceptable');\r\n        require (amount >= valueMin,'value dont aceptable');\r\n        \r\n        assignTokens(msg.sender, amount);\r\n        bonusPhase(msg.sender, amount);\r\n        forwardFundsToWallet();\r\n    }\r\n\r\n    function assignTokens(address _recipient, uint256 _value) internal {\r\n        balances[tokenSale] = balances[tokenSale].sub(_value);   \r\n        balances[_recipient] = balances[_recipient].add(_value);\r\n        tokensSold = tokensSold.add(_value);        \r\n\r\n        emit Transfer(tokenSale, _recipient, _value);\r\n    }\r\n    \r\n    function forwardFundsToWallet() internal {\r\n        tokenSale.transfer(msg.value);\r\n    }\r\n\r\n    function bonusPhase(address _recipient, uint256 _value) internal {\r\n        uint256 valueBonusPhase = 0;\r\n        if(stage == 0){\r\n          valueBonusPhase = _value.mul(100).div(100);\r\n        }\r\n        if(stage == 1){\r\n          valueBonusPhase = _value.mul(50).div(100);\r\n        }\r\n        if(stage == 2){\r\n          valueBonusPhase = _value.mul(25).div(100);\r\n        }\r\n        if(stage == 3){\r\n          valueBonusPhase = 0;\r\n        }\r\n        bonusAddTokensLocked(_recipient, valueBonusPhase);\r\n    }\r\n    \r\n    function bonusAddTokensLocked(address _recipient, uint256 _value) internal {\r\n        require(_value <= bonusTotalTokens,'');\r\n        addTokensLocked(_recipient,_value);\r\n        bonusTotalTokens = bonusTotalTokens.sub(_value);\r\n    }\r\n    \r\n    function addTokensLocked(address _recipient, uint256 _value) internal {\r\n        TokensLockedAddress memory addBlockTokens = objTokensLockedAddress;\r\n        addBlockTokens.wallet = _recipient;\r\n        addBlockTokens.value = _value;\r\n        accounts.push(addBlockTokens);\r\n        \r\n        balances[tokenSale] = balances[tokenSale].sub(_value);\r\n        balances[contractAddress] = balances[contractAddress].add(_value);\r\n        \r\n        emit SendBonus(tokenSale, _recipient, _value);\r\n    }\r\n\r\n    function sendTokens(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        require(stage > 0, 'out of permitted purchase stage');\r\n        require(_value > 0, 'amount dont can be zero');\r\n        require(tokensSold < totalTokenToSale, 'total tokens for sale zeroed');\r\n        \r\n        assignTokens(_recipient, _value);\r\n        bonusPhase(_recipient, _value);\r\n    }\r\n    \r\n    function sendBonus(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        bonusAddTokensLocked(_recipient, _value);\r\n    }\r\n   \r\n    function sendTokensBrazil(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        require(stage == 0,'out of permitted purchase stage');\r\n        require(_value <= brazilTotalToSale,'');\r\n        \r\n        assignTokens(_recipient, _value);\r\n        bonusPhase(_recipient, _value);\r\n        brazilTotalToSale = brazilTotalToSale.sub(_value);\r\n        if(brazilTotalToSale == 0)  stage = 1;\r\n    }\r\n    \r\n    function sendTokensArgentina(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        require(stage == 0,'');\r\n        require(_value <= argentinaTotalToSale,'');\r\n        \r\n        assignTokens(_recipient, _value);\r\n        bonusPhase(_recipient, _value);\r\n        argentinaTotalToSale = argentinaTotalToSale.sub(_value);\r\n        if(argentinaTotalToSale == 0)  stage = 1;\r\n    }\r\n\r\n    function advisorAddTokensLocked(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        require(_value <= advisorTotalTokens,'');\r\n        addTokensLocked(_recipient,_value);\r\n        advisorTotalTokens = advisorTotalTokens.sub(_value);\r\n    }\r\n    \r\n    function teamAddTokensLocked(address _recipient, uint256 _value) external onlyOwner stageLocked allowAddLocked {\r\n        require(_value <= teamTotalTokens,'');\r\n        addTokensLocked(_recipient,_value);\r\n        teamTotalTokens = teamTotalTokens.sub(_value);\r\n    }\r\n    \r\n    function unlockTokensBonus() external onlyOwner allowAddLocked timeLocked {\r\n      require(stage > 2);  \r\n      for (uint i=0; i < accounts.length; i++) {\r\n        balances[contractAddress] = balances[contractAddress].sub(accounts[i].value);\r\n        balances[accounts[i].wallet] = balances[accounts[i].wallet].add(accounts[i].value);\r\n      }\r\n      tokensPaid = true;\r\n    } \r\n\r\n    function setStage(uint256 _stage) external onlyOwner {\r\n      require(_stage >= 0,'');\r\n      require(_stage <= 3,'');\r\n      stage = _stage;\r\n    } \r\n    \r\n    function setRate(uint256 _rate) external onlyOwner {\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n    }\r\n    \r\n    function setValueMax(uint256 _value) external onlyOwner {\r\n        valueMax = _value * (10 ** decimals);\r\n    }\r\n    \r\n    function setValueMin(uint256 _value) external onlyOwner {\r\n        valueMin = _value * (10 ** decimals);\r\n    }\r\n\r\n    function getBonusBalance(address _recipient) external view returns(uint256 _balance, bool _paid) {\r\n      uint256 value = 0;\r\n      bool paid = false;\r\n      \r\n      for (uint i=0; i < accounts.length; i++) {\r\n        if(_recipient == accounts[i].wallet) {\r\n          value = value.add(accounts[i].value);\r\n          paid = tokensPaid;\r\n        }\r\n      }\r\n\r\n      _balance = value;\r\n      _paid = paid;\r\n    }\r\n    \r\n    function burn(uint256 _value) external whenNotPaused {\r\n      require(_value > 0,'');\r\n\r\n      address burner = msg.sender;\r\n      balances[burner] = balances[burner].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      emit Burn(burner, _value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getBonusBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"},{\"name\":\"_paid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"argentinaTotalToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brazilTotalToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokensArgentina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValueMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValueMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"teamAddTokensLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"advisorAddTokensLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokensBrazil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokensBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Buming","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}