{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract SGCDEXETHSwap {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public owner;\r\n  address payable exchangeFeeAddress;\r\n  uint256 exchangeFee;\r\n  uint256 SafeTime = 2 hours; // atomic swap timeOut\r\n\r\n  struct Swap {\r\n    address payable targetWallet;\r\n    bytes32 secret;\r\n    bytes20 secretHash;\r\n    uint256 createdAt;\r\n    uint256 balance;\r\n  }\r\n\r\n  // ETH Owner => BTC Owner => Swap\r\n  mapping(address => mapping(address => Swap)) public swaps;\r\n  mapping(address => mapping(address => uint)) public participantSigns;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n    exchangeFee = 1000;\r\n    exchangeFeeAddress = 0x264Ea0F0edCf7D471b41c12540183bc38236Aec6;\r\n  }\r\n\r\n  function updateExchangeFeeAddress (address payable newAddress) public returns (bool status) {\r\n    require(owner == msg.sender);\r\n    exchangeFeeAddress = newAddress;\r\n    return true;\r\n  }\r\n\r\n  function updateExchangeFee (uint256 newExchangeFee) public returns (bool status) {\r\n    require(owner == msg.sender);\r\n    exchangeFee = newExchangeFee;\r\n    return true;\r\n  }\r\n\r\n  event CreateSwap(address _buyer, address _seller, uint256 _value, bytes20 _secretHash, uint256 createdAt);\r\n\r\n  // ETH Owner creates Swap with secretHash\r\n  // ETH Owner make Ether deposit\r\n  function createSwap(bytes20 _secretHash, address payable _participantAddress) public payable {\r\n    require(msg.value > 0);\r\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\r\n\r\n    swaps[msg.sender][_participantAddress] = Swap(\r\n      _participantAddress,\r\n      bytes32(0),\r\n      _secretHash,\r\n      now,\r\n      msg.value\r\n    );\r\n\r\n    emit CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\r\n  }\r\n\r\n  // ETH Owner creates Swap with secretHash\r\n  // ETH Owner make Ether deposit\r\n  function createSwapTarget(bytes20 _secretHash, address payable _participantAddress, address payable _targetWallet) public payable {\r\n    require(msg.value > 0);\r\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\r\n\r\n    swaps[msg.sender][_participantAddress] = Swap(\r\n      _targetWallet,\r\n      bytes32(0),\r\n      _secretHash,\r\n      now,\r\n      msg.value\r\n    );\r\n\r\n    emit CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\r\n  }\r\n\r\n  function getBalance(address _ownerAddress) public view returns (uint256) {\r\n    return swaps[_ownerAddress][msg.sender].balance;\r\n  }\r\n\r\n  // Get target wallet (buyer check)\r\n  function getTargetWallet(address _ownerAddress) public view returns (address) {\r\n      return swaps[_ownerAddress][msg.sender].targetWallet;\r\n  }\r\n\r\n  event Withdraw(address _buyer, address _seller, bytes20 _secretHash, uint256 withdrawnAt);\r\n\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\r\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\r\n\r\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    uint256 actualValue = swap.balance;\r\n    uint256 tradeFee = actualValue.div(exchangeFee);\r\n    uint256 balanceAfterDeduction = actualValue.sub(tradeFee);\r\n\r\n    swap.targetWallet.transfer(balanceAfterDeduction);\r\n    exchangeFeeAddress.transfer(tradeFee);\r\n\r\n    swaps[_ownerAddress][msg.sender].balance = 0;\r\n    swaps[_ownerAddress][msg.sender].secret = _secret;\r\n\r\n    emit Withdraw(msg.sender, _ownerAddress, swap.secretHash, now);\r\n  }\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdrawNoMoney(bytes32 _secret, address participantAddress) public {\r\n    Swap memory swap = swaps[msg.sender][participantAddress];\r\n\r\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    uint256 actualValue = swap.balance;\r\n    uint256 tradeFee = actualValue.div(10**2).mul(exchangeFee);\r\n    uint256 balanceAfterDeduction = actualValue.sub(tradeFee);\r\n\r\n    swap.targetWallet.transfer(balanceAfterDeduction);\r\n    exchangeFeeAddress.transfer(tradeFee);\r\n\r\n    swaps[msg.sender][participantAddress].balance = 0;\r\n    swaps[msg.sender][participantAddress].secret = _secret;\r\n\r\n    emit Withdraw(participantAddress, msg.sender, swap.secretHash, now);\r\n  }\r\n  // BTC Owner withdraw money and adds secret key to swap\r\n  // BTC Owner receive +1 reputation\r\n  function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {\r\n    Swap memory swap = swaps[_ownerAddress][participantAddress];\r\n\r\n    require(swap.secretHash == ripemd160(abi.encodePacked(_secret)));\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) > now);\r\n\r\n    uint256 actualValue = swap.balance;\r\n    \r\n    uint256 tradeFee = actualValue.div(exchangeFee);\r\n    uint256 balanceAfterDeduction = actualValue.sub(tradeFee);\r\n\r\n    swap.targetWallet.transfer(balanceAfterDeduction);\r\n    exchangeFeeAddress.transfer(tradeFee);\r\n\r\n    swaps[_ownerAddress][participantAddress].balance = 0;\r\n    swaps[_ownerAddress][participantAddress].secret = _secret;\r\n\r\n    emit Withdraw(participantAddress, _ownerAddress, swap.secretHash, now);\r\n  }\r\n\r\n  // ETH Owner receive secret\r\n  function getSecret(address _participantAddress) public view returns (bytes32) {\r\n    return swaps[msg.sender][_participantAddress].secret;\r\n  }\r\n\r\n  event Close(address _buyer, address _seller);\r\n\r\n\r\n\r\n  event Refund(address _buyer, address _seller, bytes20 _secretHash);\r\n\r\n  // ETH Owner refund money\r\n  // BTC Owner gets -1 reputation\r\n  function refund(address _participantAddress) public {\r\n    Swap memory swap = swaps[msg.sender][_participantAddress];\r\n\r\n    require(swap.balance > uint256(0));\r\n    require(swap.createdAt.add(SafeTime) < now);\r\n\r\n    msg.sender.transfer(swap.balance);\r\n\r\n    clean(msg.sender, _participantAddress);\r\n\r\n    emit Refund(_participantAddress, msg.sender, swap.secretHash);\r\n  }\r\n\r\n  function clean(address _ownerAddress, address _participantAddress) internal {\r\n    delete swaps[_ownerAddress][_participantAddress];\r\n    delete participantSigns[_ownerAddress][_participantAddress];\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"CreateSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"internalType\":\"address payable\",\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"internalType\":\"address payable\",\"name\":\"_participantAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_targetWallet\",\"type\":\"address\"}],\"name\":\"createSwapTarget\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"getSecret\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getTargetWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantSigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participantAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"targetWallet\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"bytes20\",\"name\":\"secretHash\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangeFee\",\"type\":\"uint256\"}],\"name\":\"updateExchangeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateExchangeFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawNoMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SGCDEXETHSwap","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0ce313d6af0e9e185bebbd1d3e06a49f4f2014b642405b8653a9195bae68898a"}]}