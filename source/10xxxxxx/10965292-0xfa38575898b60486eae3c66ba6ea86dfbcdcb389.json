{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n *  Ticket 1.0\r\n *  VERSION: 1.0\r\n *\r\n */\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ERC20{\r\n    function allowance(address owner, address spender) external view returns (uint256){}\r\n    function transfer(address recipient, uint256 amount) external returns (bool){}\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool){}\r\n    function balanceOf(address account) external view returns (uint256){}\r\n}\r\n\r\n\r\ncontract HappyBox{\r\n    \r\n    event Gifted(address gifted);\r\n    \r\n    address[] public modules_list;\r\n    mapping(address => bool)public modules;\r\n    \r\n    ERC20 public token;\r\n    address master;\r\n    address public receiver;\r\n    \r\n    constructor() public{\r\n        master=msg.sender;\r\n    }\r\n    \r\n    function gift(address tkn,uint amount,address gifted) public returns(bool){\r\n        require(modules[msg.sender]);\r\n        ERC20 token=ERC20(tkn);\r\n        require(token.transfer(gifted, amount));\r\n        emit Gifted(gifted);\r\n        return true;\r\n    } \r\n    \r\n    function burn(address tkn)public returns(bool){\r\n        require(msg.sender==master);\r\n        ERC20 token=ERC20(tkn);\r\n        token.transfer(master, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    function setModule(address new_module,bool set)public returns(bool){\r\n        require(msg.sender==master);\r\n        modules[new_module]=set;\r\n        if(set)modules_list.push(new_module);\r\n        return true;\r\n    }\r\n    \r\n    function setMaster(address new_master)public returns(bool){\r\n        require(msg.sender==master);\r\n        master=new_master;\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\ncontract priceList {\r\n    \r\n    event priceSet(address token);\r\n    \r\n    address public master;\r\n    mapping(address => uint)public price;\r\n    address[] list;\r\n    \r\n\r\n    constructor() public {\r\n        master=msg.sender;\r\n    }\r\n    \r\n    function priceListing(uint index)view public returns(address,uint,uint){\r\n        return (list[index],price[list[index]],list.length);\r\n    }\r\n    \r\n    function setPrice(address tkn,uint prc)public returns(bool){\r\n        require(msg.sender==master);\r\n        require(prc > 0, \"Price > 0 please\");\r\n        if(price[tkn]==0)list.push(tkn);\r\n        price[tkn]=prc;\r\n        emit priceSet(tkn);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract Ticket {\r\n    \r\n    uint8 public code=1;\r\n    address public vault;\r\n    HappyBox public box;\r\n    priceList public prices;\r\n    \r\n    constructor(address vlt, address prcs, address gftr) public{\r\n        vault=vlt;\r\n        prices=priceList(prcs);\r\n        box=HappyBox(gftr);\r\n    }\r\n    \r\n    function buy(address tkn,address ref) payable public returns(bool){\r\n        require(box.gift(tkn,msg.value*1000/prices.price(tkn),msg.sender));\r\n        payable(ref).transfer(msg.value/10);\r\n        return true;\r\n    } \r\n    \r\n    function pull() public {\r\n       payable(vault).transfer(address(this).balance);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vlt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prcs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gftr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"box\",\"outputs\":[{\"internalType\":\"contract HappyBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"code\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"contract priceList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ticket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000510f0a380c914928386bda31dc159fcb30ffa70800000000000000000000000049b8653fbee7137d122dcc2353e5c231ba1f6219000000000000000000000000c9746af16e5d5cc414edf53f91cba76e6eaf739d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31c5cfcdef9f94ad8cfe1ae1373ba2c250805608f6687e94624f1344ba471149"}]}