{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: MIT AND GPL-3.0-or-later\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IMintableERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Interface of an ERC20 which implements the mint() function.\r\n */\r\ninterface IMintableERC20\r\n   is IERC20\r\n{\r\n   /**\r\n    * @dev Creates `amount` new tokens for `to`.\r\n    *\r\n    * See {ERC20-_mint}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - the caller must have the `MINTER_ROLE`.\r\n    */\r\n   function mint(address to, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/KnsTokenWork.sol\r\n\r\n/**************************************************************************************\r\n *                                                                                    *\r\n *                             GENERATED FILE DO NOT EDIT                             *\r\n *   ___  ____  _  _  ____  ____    __   ____  ____  ____     ____  ____  __    ____  *\r\n *  / __)( ___)( \\( )( ___)(  _ \\  /__\\ (_  _)( ___)(  _ \\   ( ___)(_  _)(  )  ( ___) *\r\n * ( (_-. )__)  )  (  )__)  )   / /(__)\\  )(   )__)  )(_) )   )__)  _)(_  )(__  )__)  *\r\n *  \\___/(____)(_)\\_)(____)(_)\\_)(__)(__)(__) (____)(____/   (__)  (____)(____)(____) *\r\n *                                                                                    *\r\n *                             GENERATED FILE DO NOT EDIT                             *\r\n *                                                                                    *\r\n **************************************************************************************/\r\npragma solidity ^0.6.0;\r\n\r\ncontract KnsTokenWork\r\n{\r\n   /**\r\n    * Compute the work function for a seed, secured_struct_hash, and nonce.\r\n    *\r\n    * work_result[10] is the actual work function value, this is what is compared against the target.\r\n    * work_result[0] through work_result[9] (inclusive) are the values of w[y_i].\r\n    */\r\n   function work(\r\n      uint256 seed,\r\n      uint256 secured_struct_hash,\r\n      uint256 nonce\r\n      ) public pure returns (uint256[11] memory work_result)\r\n   {\r\n      uint256 w;\r\n      uint256 x;\r\n      uint256 y;\r\n      uint256 result = secured_struct_hash;\r\n      uint256 coeff_0 = (nonce % 0x0000fffd)+1;\r\n      uint256 coeff_1 = (nonce % 0x0000fffb)+1;\r\n      uint256 coeff_2 = (nonce % 0x0000fff7)+1;\r\n      uint256 coeff_3 = (nonce % 0x0000fff1)+1;\r\n      uint256 coeff_4 = (nonce % 0x0000ffef)+1;\r\n\r\n\r\n\r\n\r\n      x = secured_struct_hash % 0x0000fffd;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[0] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000fffb;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[1] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000fff7;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[2] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000fff1;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[3] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffef;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[4] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffe5;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[5] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffdf;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[6] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffd9;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[7] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffd3;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[8] = w;\r\n      result ^= w;\r\n\r\n\r\n      x = secured_struct_hash % 0x0000ffd1;\r\n      y = coeff_4;\r\n      y *= x;\r\n      y += coeff_3;\r\n      y *= x;\r\n      y += coeff_2;\r\n      y *= x;\r\n      y += coeff_1;\r\n      y *= x;\r\n      y += coeff_0;\r\n      y %= 0x0000ffff;\r\n      w = uint256( keccak256( abi.encode( seed, y ) ) );\r\n      work_result[9] = w;\r\n      result ^= w;\r\n\r\n\r\n      work_result[10] = result;\r\n      return work_result;\r\n   }\r\n}\r\n\r\n// File: contracts/KnsTokenMining.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract KnsTokenMining\r\n   is AccessControl,\r\n      KnsTokenWork\r\n{\r\n   IMintableERC20 public token;\r\n   mapping (uint256 => uint256) private user_pow_height;\r\n\r\n   uint256 public constant ONE_KNS = 100000000;\r\n   uint256 public constant MINEABLE_TOKENS = 100 * 1000000 * ONE_KNS;\r\n\r\n   uint256 public constant FINAL_PRINT_RATE = 1500;  // basis points\r\n   uint256 public constant TOTAL_EMISSION_TIME = 180 days;\r\n   uint256 public constant EMISSION_COEFF_1 = (MINEABLE_TOKENS * (20000 - FINAL_PRINT_RATE) * TOTAL_EMISSION_TIME);\r\n   uint256 public constant EMISSION_COEFF_2 = (MINEABLE_TOKENS * (10000 - FINAL_PRINT_RATE));\r\n   uint256 public constant HC_RESERVE_DECAY_TIME = 5 days;\r\n   uint256 public constant RECENT_BLOCK_LIMIT = 96;\r\n\r\n   uint256 public start_time;\r\n   uint256 public token_reserve;\r\n   uint256 public hc_reserve;\r\n   uint256 public last_mint_time;\r\n\r\n   bool public is_testing;\r\n\r\n   event Mine( address[] recipients, uint256[] split_percents, uint256 hc_submit, uint256 hc_decay, uint256 token_virtual_mint, uint256[] tokens_mined );\r\n\r\n   constructor( address tok, uint256 start_t, uint256 start_hc_reserve, bool testing )\r\n      public\r\n   {\r\n      token = IMintableERC20(tok);\r\n      _setupRole( DEFAULT_ADMIN_ROLE, _msgSender() );\r\n\r\n      start_time = start_t;\r\n      last_mint_time = start_t;\r\n      hc_reserve = start_hc_reserve;\r\n      token_reserve = 0;\r\n\r\n      is_testing = testing;\r\n\r\n      _initial_mining_event( start_hc_reserve );\r\n   }\r\n\r\n   function _initial_mining_event( uint256 start_hc_reserve ) internal\r\n   {\r\n      address[] memory recipients = new address[](1);\r\n      uint256[] memory split_percents = new uint256[](1);\r\n      uint256[] memory tokens_mined = new uint256[](1);\r\n\r\n      recipients[0] = address(0);\r\n      split_percents[0] = 10000;\r\n      tokens_mined[0] = 0;\r\n\r\n      emit Mine( recipients, split_percents, start_hc_reserve, 0, 0, tokens_mined );\r\n   }\r\n\r\n   /**\r\n    * Get the hash of the secured struct.\r\n    *\r\n    * Basically calls keccak256() on parameters.  Mainly exists for readability purposes.\r\n    */\r\n   function get_secured_struct_hash(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents,\r\n      uint256 recent_eth_block_number,\r\n      uint256 recent_eth_block_hash,\r\n      uint256 target,\r\n      uint256 pow_height\r\n      ) public pure returns (uint256)\r\n   {\r\n      return uint256( keccak256( abi.encode( recipients, split_percents, recent_eth_block_number, recent_eth_block_hash, target, pow_height ) ) );\r\n   }\r\n\r\n   /**\r\n    * Require w[0]..w[9] are all distinct values.\r\n    *\r\n    * w[10] is untouched.\r\n    */\r\n   function check_uniqueness(\r\n      uint256[11] memory w\r\n      ) public pure\r\n   {\r\n      // Implement a simple direct comparison algorithm, unroll to optimize gas usage.\r\n      require( (w[0] != w[1]) && (w[0] != w[2]) && (w[0] != w[3]) && (w[0] != w[4]) && (w[0] != w[5]) && (w[0] != w[6]) && (w[0] != w[7]) && (w[0] != w[8]) && (w[0] != w[9])\r\n                              && (w[1] != w[2]) && (w[1] != w[3]) && (w[1] != w[4]) && (w[1] != w[5]) && (w[1] != w[6]) && (w[1] != w[7]) && (w[1] != w[8]) && (w[1] != w[9])\r\n                                                && (w[2] != w[3]) && (w[2] != w[4]) && (w[2] != w[5]) && (w[2] != w[6]) && (w[2] != w[7]) && (w[2] != w[8]) && (w[2] != w[9])\r\n                                                                  && (w[3] != w[4]) && (w[3] != w[5]) && (w[3] != w[6]) && (w[3] != w[7]) && (w[3] != w[8]) && (w[3] != w[9])\r\n                                                                                    && (w[4] != w[5]) && (w[4] != w[6]) && (w[4] != w[7]) && (w[4] != w[8]) && (w[4] != w[9])\r\n                                                                                                      && (w[5] != w[6]) && (w[5] != w[7]) && (w[5] != w[8]) && (w[5] != w[9])\r\n                                                                                                                        && (w[6] != w[7]) && (w[6] != w[8]) && (w[6] != w[9])\r\n                                                                                                                                          && (w[7] != w[8]) && (w[7] != w[9])\r\n                                                                                                                                                            && (w[8] != w[9]),\r\n               \"Non-unique work components\" );\r\n   }\r\n\r\n   /**\r\n    * Check proof of work for validity.\r\n    *\r\n    * Throws if the provided fields have any problems.\r\n    */\r\n   function check_pow(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents,\r\n      uint256 recent_eth_block_number,\r\n      uint256 recent_eth_block_hash,\r\n      uint256 target,\r\n      uint256 pow_height,\r\n      uint256 nonce\r\n      ) public view\r\n   {\r\n      require( recent_eth_block_hash != 0, \"Zero block hash not allowed\" );\r\n      require( recent_eth_block_number <= block.number, \"Recent block in future\" );\r\n      require( recent_eth_block_number + RECENT_BLOCK_LIMIT > block.number, \"Recent block too old\" );\r\n      require( nonce >= recent_eth_block_hash, \"Nonce too small\" );\r\n      require( (recent_eth_block_hash + (1 << 128)) > nonce, \"Nonce too large\" );\r\n      require( uint256( blockhash( recent_eth_block_number ) ) == recent_eth_block_hash, \"Block hash mismatch\" );\r\n\r\n      require( recipients.length <= 5, \"Number of recipients cannot exceed 5\" );\r\n      require( recipients.length == split_percents.length, \"Recipient and split percent array size mismatch\" );\r\n      array_check( split_percents );\r\n\r\n      require( get_pow_height( _msgSender(), recipients, split_percents ) + 1 == pow_height, \"pow_height mismatch\" );\r\n      uint256 h = get_secured_struct_hash( recipients, split_percents, recent_eth_block_number, recent_eth_block_hash, target, pow_height );\r\n      uint256[11] memory w = work( recent_eth_block_hash, h, nonce );\r\n      check_uniqueness( w );\r\n      require( w[10] < target, \"Work missed target\" );     // always fails if target == 0\r\n   }\r\n\r\n   function array_check( uint256[] memory arr )\r\n   internal pure\r\n   {\r\n      uint256 sum = 0;\r\n      for (uint i = 0; i < arr.length; i++)\r\n      {\r\n         require( arr[i] <= 10000, \"Percent array element cannot exceed 10000\" );\r\n         sum += arr[i];\r\n      }\r\n      require( sum == 10000, \"Split percentages do not add up to 10000\" );\r\n   }\r\n\r\n   function get_emission_curve( uint256 t )\r\n      public view returns (uint256)\r\n   {\r\n      if( t < start_time )\r\n         t = start_time;\r\n      if( t > start_time + TOTAL_EMISSION_TIME )\r\n         t = start_time + TOTAL_EMISSION_TIME;\r\n      t -= start_time;\r\n      return ((EMISSION_COEFF_1 - (EMISSION_COEFF_2*t))*t) / (10000 * TOTAL_EMISSION_TIME * TOTAL_EMISSION_TIME);\r\n   }\r\n\r\n   function get_hc_reserve_multiplier( uint256 dt )\r\n      public pure returns (uint256)\r\n   {\r\n      if( dt >= HC_RESERVE_DECAY_TIME )\r\n         return 0x80000000;\r\n      int256 idt = (int256( dt ) << 32) / int32(HC_RESERVE_DECAY_TIME);\r\n      int256 y = -0xa2b23f3;\r\n      y *= idt;\r\n      y >>= 32;\r\n      y += 0x3b9d3bec;\r\n      y *= idt;\r\n      y >>= 32;\r\n      y -= 0xb17217f7;\r\n      y *= idt;\r\n      y >>= 32;\r\n      y += 0x100000000;\r\n      if( y < 0 )\r\n         y = 0;\r\n      return uint256( y );\r\n   }\r\n\r\n   function get_background_activity( uint256 current_time ) public view\r\n      returns (uint256 hc_decay, uint256 token_virtual_mint)\r\n   {\r\n      hc_decay = 0;\r\n      token_virtual_mint = 0;\r\n\r\n      if( current_time <= last_mint_time )\r\n         return (hc_decay, token_virtual_mint);\r\n      uint256 dt = current_time - last_mint_time;\r\n\r\n      uint256 f_prev = get_emission_curve( last_mint_time );\r\n      uint256 f_now = get_emission_curve( current_time );\r\n      if( f_now <= f_prev )\r\n         return (hc_decay, token_virtual_mint);\r\n\r\n      uint256 mul = get_hc_reserve_multiplier( dt );\r\n      uint256 new_hc_reserve = (hc_reserve * mul) >> 32;\r\n      hc_decay = hc_reserve - new_hc_reserve;\r\n\r\n      token_virtual_mint = f_now - f_prev;\r\n\r\n      return (hc_decay, token_virtual_mint);\r\n   }\r\n\r\n   function process_background_activity( uint256 current_time ) internal\r\n      returns (uint256 hc_decay, uint256 token_virtual_mint)\r\n   {\r\n      (hc_decay, token_virtual_mint) = get_background_activity( current_time );\r\n      hc_reserve -= hc_decay;\r\n      token_reserve += token_virtual_mint;\r\n      last_mint_time = current_time;\r\n      return (hc_decay, token_virtual_mint);\r\n   }\r\n\r\n   /**\r\n    * Calculate value in tokens the given hash credits are worth\r\n    **/\r\n   function get_hash_credits_conversion( uint256 hc )\r\n      public view\r\n      returns (uint256)\r\n   {\r\n      require( hc > 1, \"HC underflow\" );\r\n      require( hc < (1 << 128), \"HC overflow\" );\r\n\r\n      // xyk algorithm\r\n      uint256 x0 = token_reserve;\r\n      uint256 y0 = hc_reserve;\r\n\r\n      require( x0 < (1 << 128), \"Token balance overflow\" );\r\n      require( y0 < (1 << 128), \"HC balance overflow\" );\r\n\r\n      uint256 y1 = y0 + hc;\r\n      require( y1 < (1 << 128), \"HC balance overflow\" );\r\n\r\n      // x0*y0 = x1*y1 -> x1 = (x0*y0)/y1\r\n      // NB above require() ensures overflow safety\r\n      uint256 x1 = ((x0*y0)/y1)+1;\r\n      require( x1 < x0, \"No tokens available\" );\r\n\r\n      return x0-x1;\r\n   }\r\n\r\n   /**\r\n    * Executes the trade of hash credits to tokens\r\n    * Returns number of minted tokens\r\n    **/\r\n   function convert_hash_credits(\r\n      uint256 hc ) internal\r\n      returns (uint256)\r\n   {\r\n      uint256 tokens_minted = get_hash_credits_conversion( hc );\r\n      hc_reserve += hc;\r\n      token_reserve -= tokens_minted;\r\n\r\n      return tokens_minted;\r\n   }\r\n\r\n   function increment_pow_height(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents ) internal\r\n   {\r\n      user_pow_height[uint256( keccak256( abi.encode( _msgSender(), recipients, split_percents ) ) )] += 1;\r\n   }\r\n\r\n   function mine_impl(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents,\r\n      uint256 recent_eth_block_number,\r\n      uint256 recent_eth_block_hash,\r\n      uint256 target,\r\n      uint256 pow_height,\r\n      uint256 nonce,\r\n      uint256 current_time ) internal\r\n   {\r\n      check_pow(\r\n         recipients,\r\n         split_percents,\r\n         recent_eth_block_number,\r\n         recent_eth_block_hash,\r\n         target,\r\n         pow_height,\r\n         nonce\r\n         );\r\n      uint256 hc_submit = uint256(-1)/target;\r\n\r\n      uint256 hc_decay;\r\n      uint256 token_virtual_mint;\r\n      (hc_decay, token_virtual_mint) = process_background_activity( current_time );\r\n      uint256 token_mined;\r\n      token_mined = convert_hash_credits( hc_submit );\r\n\r\n      uint256[] memory distribution = distribute( recipients, split_percents, token_mined );\r\n      increment_pow_height( recipients, split_percents );\r\n\r\n      emit Mine( recipients, split_percents, hc_submit, hc_decay, token_virtual_mint, distribution );\r\n   }\r\n\r\n   /**\r\n    * Get the total number of proof-of-work submitted by a user.\r\n    */\r\n   function get_pow_height(\r\n      address from,\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents\r\n    )\r\n      public view\r\n      returns (uint256)\r\n   {\r\n      return user_pow_height[uint256( keccak256( abi.encode( from, recipients, split_percents ) ) )];\r\n   }\r\n\r\n   /**\r\n    * Executes the distribution, minting the tokens to the recipient addresses\r\n    **/\r\n   function distribute(address[] memory recipients, uint256[] memory split_percents, uint256 token_mined)\r\n   internal returns ( uint256[] memory )\r\n   {\r\n      uint256 remaining = token_mined;\r\n      uint256[] memory distribution = new uint256[]( recipients.length );\r\n      for (uint i = distribution.length-1; i > 0; i--)\r\n      {\r\n         distribution[i] = (token_mined * split_percents[i]) / 10000;\r\n\t token.mint( recipients[i], distribution[i] );\r\n\t remaining -= distribution[i];\r\n      }\r\n      distribution[0] = remaining;\r\n      token.mint( recipients[0], remaining );\r\n\r\n      return distribution;\r\n   }\r\n\r\n   function mine(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents,\r\n      uint256 recent_eth_block_number,\r\n      uint256 recent_eth_block_hash,\r\n      uint256 target,\r\n      uint256 pow_height,\r\n      uint256 nonce ) public\r\n   {\r\n      require( now >= start_time, \"Mining has not started\" );\r\n      mine_impl( recipients, split_percents, recent_eth_block_number, recent_eth_block_hash, target, pow_height, nonce, now );\r\n   }\r\n\r\n   function test_process_background_activity( uint256 current_time )\r\n      public\r\n   {\r\n      require( is_testing, \"Cannot call test method\" );\r\n      process_background_activity( current_time );\r\n   }\r\n\r\n   function test_mine(\r\n      address[] memory recipients,\r\n      uint256[] memory split_percents,\r\n      uint256 recent_eth_block_number,\r\n      uint256 recent_eth_block_hash,\r\n      uint256 target,\r\n      uint256 pow_height,\r\n      uint256 nonce,\r\n      uint256 current_time ) public\r\n   {\r\n      require( is_testing, \"Cannot call test method\" );\r\n      mine_impl( recipients, split_percents, recent_eth_block_number, recent_eth_block_hash, target, pow_height, nonce, current_time );\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_hc_reserve\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"testing\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hc_submit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hc_decay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_virtual_mint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokens_mined\",\"type\":\"uint256[]\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_COEFF_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_COEFF_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINAL_PRINT_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HC_RESERVE_DECAY_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINEABLE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_KNS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECENT_BLOCK_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_EMISSION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"check_pow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"w\",\"type\":\"uint256[11]\"}],\"name\":\"check_uniqueness\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current_time\",\"type\":\"uint256\"}],\"name\":\"get_background_activity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hc_decay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_virtual_mint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"get_emission_curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hc\",\"type\":\"uint256\"}],\"name\":\"get_hash_credits_conversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dt\",\"type\":\"uint256\"}],\"name\":\"get_hc_reserve_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"}],\"name\":\"get_pow_height\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow_height\",\"type\":\"uint256\"}],\"name\":\"get_secured_struct_hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hc_reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_mint_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"split_percents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recent_eth_block_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_time\",\"type\":\"uint256\"}],\"name\":\"test_mine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current_time\",\"type\":\"uint256\"}],\"name\":\"test_process_background_activity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secured_struct_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"work_result\",\"type\":\"uint256[11]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"KnsTokenMining","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000066d28cb58487a7609877550e1a34691810a6b9fc000000000000000000000000000000000000000000000000000000005f85dd10000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64bdaa5bbc81fa02c3f879dc34453b324911bd6573ef018f9830bf296841766f"}]}