{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module.\r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n\r\n    /**\r\n     * @dev Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external;\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n\r\n    /**\r\n    * @dev Utility method to recover any ERC20 token that was sent to the\r\n    * module by mistake.\r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external;\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n\r\n    // The implementation of the proxy\r\n    address public implementation;\r\n    // The owner\r\n    address public owner;\r\n    // The authorised modules\r\n    mapping (address => bool) public authorised;\r\n    // The enabled static calls\r\n    mapping (bytes4 => address) public enabled;\r\n    // The number of modules\r\n    uint public modules;\r\n\r\n    event AuthorisedModule(address indexed module, bool value);\r\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\r\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n    event OwnerChanged(address owner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not an authorised module.\r\n     */\r\n    modifier moduleOnly {\r\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the wallet by setting the owner and authorising a list of modules.\r\n     * @param _owner The owner.\r\n     * @param _modules The modules to authorise.\r\n     */\r\n    function init(address _owner, address[] calldata _modules) external {\r\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\r\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\r\n        owner = _owner;\r\n        modules = _modules.length;\r\n        for (uint256 i = 0; i < _modules.length; i++) {\r\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\r\n            authorised[_modules[i]] = true;\r\n            Module(_modules[i]).init(this);\r\n            emit AuthorisedModule(_modules[i], true);\r\n        }\r\n        if (address(this).balance > 0) {\r\n            emit Received(address(this).balance, address(0), \"\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enables/Disables a module.\r\n     * @param _module The target module.\r\n     * @param _value Set to true to authorise the module.\r\n     */\r\n    function authoriseModule(address _module, bool _value) external moduleOnly {\r\n        if (authorised[_module] != _value) {\r\n            emit AuthorisedModule(_module, _value);\r\n            if (_value == true) {\r\n                modules += 1;\r\n                authorised[_module] = true;\r\n                Module(_module).init(this);\r\n            } else {\r\n                modules -= 1;\r\n                require(modules > 0, \"BW: wallet must have at least one module\");\r\n                delete authorised[_module];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Enables a static method by specifying the target module to which the call\r\n    * must be delegated.\r\n    * @param _module The target module.\r\n    * @param _method The static method signature.\r\n    */\r\n    function enableStaticCall(address _module, bytes4 _method) external moduleOnly {\r\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\r\n        enabled[_method] = _module;\r\n        emit EnabledStaticCall(_module, _method);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner for the wallet.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function setOwner(address _newOwner) external moduleOnly {\r\n        require(_newOwner != address(0), \"BW: address cannot be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a generic transaction.\r\n     * @param _target The address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invoke(address _target, uint _value, bytes calldata _data) external moduleOnly returns (bytes memory _result) {\r\n        bool success;\r\n        // solium-disable-next-line security/no-call-value\r\n        (success, _result) = _target.call.value(_value)(_data);\r\n        if (!success) {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n        emit Invoked(msg.sender, _target, _value, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev This method makes it possible for the wallet to comply to interfaces expecting the wallet to\r\n     * implement specific static methods. It delegates the static call to a target contract if the data corresponds\r\n     * to an enabled method, or logs the call otherwise.\r\n     */\r\n    function() external payable {\r\n        if (msg.data.length > 0) {\r\n            address module = enabled[msg.sig];\r\n            if (module == address(0)) {\r\n                emit Received(msg.value, msg.sender, msg.data);\r\n            } else {\r\n                require(authorised[module], \"BW: must be an authorised module for static call\");\r\n                // solium-disable-next-line security/no-inline-assembly\r\n                assembly {\r\n                    calldatacopy(0, 0, calldatasize())\r\n                    let result := staticcall(gas, module, 0, calldatasize(), 0, 0)\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    switch result\r\n                    case 0 {revert(0, returndatasize())}\r\n                    default {return (0, returndatasize())}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules.\r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract ModuleRegistry is Owned {\r\n\r\n    mapping (address => Info) internal modules;\r\n    mapping (address => Info) internal upgraders;\r\n\r\n    event ModuleRegistered(address indexed module, bytes32 name);\r\n    event ModuleDeRegistered(address module);\r\n    event UpgraderRegistered(address indexed upgrader, bytes32 name);\r\n    event UpgraderDeRegistered(address upgrader);\r\n\r\n    struct Info {\r\n        bool exists;\r\n        bytes32 name;\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a module.\r\n     * @param _module The module.\r\n     * @param _name The unique name of the module.\r\n     */\r\n    function registerModule(address _module, bytes32 _name) external onlyOwner {\r\n        require(!modules[_module].exists, \"MR: module already exists\");\r\n        modules[_module] = Info({exists: true, name: _name});\r\n        emit ModuleRegistered(_module, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters a module.\r\n     * @param _module The module.\r\n     */\r\n    function deregisterModule(address _module) external onlyOwner {\r\n        require(modules[_module].exists, \"MR: module does not exist\");\r\n        delete modules[_module];\r\n        emit ModuleDeRegistered(_module);\r\n    }\r\n\r\n        /**\r\n     * @dev Registers an upgrader.\r\n     * @param _upgrader The upgrader.\r\n     * @param _name The unique name of the upgrader.\r\n     */\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external onlyOwner {\r\n        require(!upgraders[_upgrader].exists, \"MR: upgrader already exists\");\r\n        upgraders[_upgrader] = Info({exists: true, name: _name});\r\n        emit UpgraderRegistered(_upgrader, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters an upgrader.\r\n     * @param _upgrader The _upgrader.\r\n     */\r\n    function deregisterUpgrader(address _upgrader) external onlyOwner {\r\n        require(upgraders[_upgrader].exists, \"MR: upgrader does not exist\");\r\n        delete upgraders[_upgrader];\r\n        emit UpgraderDeRegistered(_upgrader);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling the owner of the registry to claim any ERC20 token that was sent to the\r\n    * registry.\r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external onlyOwner {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(msg.sender, total);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the name of a module from its address.\r\n     * @param _module The module address.\r\n     * @return the name.\r\n     */\r\n    function moduleInfo(address _module) external view returns (bytes32) {\r\n        return modules[_module].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the name of an upgrader from its address.\r\n     * @param _upgrader The upgrader address.\r\n     * @return the name.\r\n     */\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32) {\r\n        return upgraders[_upgrader].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a module is registered.\r\n     * @param _module The module address.\r\n     * @return true if the module is registered.\r\n     */\r\n    function isRegisteredModule(address _module) external view returns (bool) {\r\n        return modules[_module].exists;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a list of modules are registered.\r\n     * @param _modules The list of modules address.\r\n     * @return true if all the modules are registered.\r\n     */\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool) {\r\n        for (uint i = 0; i < _modules.length; i++) {\r\n            if (!modules[_modules[i]].exists) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an upgrader is registered.\r\n     * @param _upgrader The upgrader address.\r\n     * @return true if the upgrader is registered.\r\n     */\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool) {\r\n        return upgraders[_upgrader].exists;\r\n    }\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n/**\r\n * @title Storage\r\n * @dev Base contract for the storage of a wallet.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract Storage {\r\n\r\n    /**\r\n     * @dev Throws if the caller is not an authorised module.\r\n     */\r\n    modifier onlyModule(BaseWallet _wallet) {\r\n        require(_wallet.authorised(msg.sender), \"TS: must be an authorized module to call this method\");\r\n        _;\r\n    }\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\ninterface IGuardianStorage{\r\n\r\n    /**\r\n     * @dev Lets an authorised module add a guardian to a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The guardian to add.\r\n     */\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n\r\n    /**\r\n     * @dev Lets an authorised module revoke a guardian from a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The guardian to revoke.\r\n     */\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n\r\n    /**\r\n     * @dev Checks if an account is a guardian for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The account.\r\n     * @return true if the account is a guardian for a wallet.\r\n     */\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.im>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.im>\r\n */\r\ncontract GuardianStorage is IGuardianStorage, Storage {\r\n\r\n    struct GuardianStorageConfig {\r\n        // the list of guardians\r\n        address[] guardians;\r\n        // the info about guardians\r\n        mapping (address => GuardianInfo) info;\r\n        // the lock's release timestamp\r\n        uint256 lock;\r\n        // the module that set the last lock\r\n        address locker;\r\n    }\r\n\r\n    struct GuardianInfo {\r\n        bool exists;\r\n        uint128 index;\r\n    }\r\n\r\n    // wallet specific storage\r\n    mapping (address => GuardianStorageConfig) internal configs;\r\n\r\n    // *************** External Functions ********************* //\r\n\r\n    /**\r\n     * @dev Lets an authorised module add a guardian to a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The guardian to add.\r\n     */\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external onlyModule(_wallet) {\r\n        GuardianStorageConfig storage config = configs[address(_wallet)];\r\n        config.info[_guardian].exists = true;\r\n        config.info[_guardian].index = uint128(config.guardians.push(_guardian) - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets an authorised module revoke a guardian from a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The guardian to revoke.\r\n     */\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external onlyModule(_wallet) {\r\n        GuardianStorageConfig storage config = configs[address(_wallet)];\r\n        address lastGuardian = config.guardians[config.guardians.length - 1];\r\n        if (_guardian != lastGuardian) {\r\n            uint128 targetIndex = config.info[_guardian].index;\r\n            config.guardians[targetIndex] = lastGuardian;\r\n            config.info[lastGuardian].index = targetIndex;\r\n        }\r\n        config.guardians.length--;\r\n        delete config.info[_guardian];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of guardians for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @return the number of guardians.\r\n     */\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256) {\r\n        return configs[address(_wallet)].guardians.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the list of guaridans for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @return the list of guardians.\r\n     */\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory) {\r\n        GuardianStorageConfig storage config = configs[address(_wallet)];\r\n        address[] memory guardians = new address[](config.guardians.length);\r\n        for (uint256 i = 0; i < config.guardians.length; i++) {\r\n            guardians[i] = config.guardians[i];\r\n        }\r\n        return guardians;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an account is a guardian for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _guardian The account.\r\n     * @return true if the account is a guardian for a wallet.\r\n     */\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool) {\r\n        return configs[address(_wallet)].info[_guardian].exists;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets an authorised module set the lock for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _releaseAfter The epoch time at which the lock should automatically release.\r\n     */\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external onlyModule(_wallet) {\r\n        configs[address(_wallet)].lock = _releaseAfter;\r\n        if (_releaseAfter != 0 && msg.sender != configs[address(_wallet)].locker) {\r\n            configs[address(_wallet)].locker = msg.sender;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the lock is set for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @return true if the lock is set for the wallet.\r\n     */\r\n    function isLocked(BaseWallet _wallet) external view returns (bool) {\r\n        return configs[address(_wallet)].lock > now;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the time at which the lock of a wallet will release.\r\n     * @param _wallet The target wallet.\r\n     * @return the time at which the lock of a wallet will release, or zero if there is no lock set.\r\n     */\r\n    function getLock(BaseWallet _wallet) external view returns (uint256) {\r\n        return configs[address(_wallet)].lock;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the address of the last module that modified the lock for a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @return the address of the last module that modified the lock for a wallet.\r\n     */\r\n    function getLocker(BaseWallet _wallet) external view returns (address) {\r\n        return configs[address(_wallet)].locker;\r\n    }\r\n}/* The MIT License (MIT)\r\n\r\nCopyright (c) 2016 Smart Contract Solutions, Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c + 1;\r\n        }\r\n    }\r\n\r\n    // from DSMath - operations on fixed precision floats\r\n\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n}\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // Empty calldata\r\n    bytes constant internal EMPTY_BYTES = \"\";\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n    // The address of the Guardian storage\r\n    GuardianStorage internal guardianStorage;\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \"BM: wallet must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, GuardianStorage _guardianStorage, bytes32 _name) public {\r\n        registry = _registry;\r\n        guardianStorage = _guardianStorage;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry.\r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to invoke a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _to The target address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invokeWallet(address _wallet, address _to, uint256 _value, bytes memory _data) internal returns (bytes memory _res) {\r\n        bool success;\r\n        // solium-disable-next-line security/no-call-value\r\n        (success, _res) = _wallet.call(abi.encodeWithSignature(\"invoke(address,uint256,bytes)\", _to, _value, _data));\r\n        if (success && _res.length > 0) { //_res is empty if _wallet is an \"old\" BaseWallet that can't return output values\r\n            (_res) = abi.decode(_res, (bytes));\r\n        } else if (_res.length > 0) {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        } else if (!success) {\r\n            revert(\"BM: wallet invoke reverted\");\r\n        }\r\n    }\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\nlibrary GuardianUtils {\r\n\r\n    /**\r\n    * @dev Checks if an address is an account guardian or an account authorised to sign on behalf of a smart-contract guardian\r\n    * given a list of guardians.\r\n    * @param _guardians the list of guardians\r\n    * @param _guardian the address to test\r\n    * @return true and the list of guardians minus the found guardian upon success, false and the original list of guardians if not found.\r\n    */\r\n    function isGuardian(address[] memory _guardians, address _guardian) internal view returns (bool, address[] memory) {\r\n        if (_guardians.length == 0 || _guardian == address(0)) {\r\n            return (false, _guardians);\r\n        }\r\n        bool isFound = false;\r\n        address[] memory updatedGuardians = new address[](_guardians.length - 1);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < _guardians.length; i++) {\r\n            if (!isFound) {\r\n                // check if _guardian is an account guardian\r\n                if (_guardian == _guardians[i]) {\r\n                    isFound = true;\r\n                    continue;\r\n                }\r\n                // check if _guardian is the owner of a smart contract guardian\r\n                if (isContract(_guardians[i]) && isGuardianOwner(_guardians[i], _guardian)) {\r\n                    isFound = true;\r\n                    continue;\r\n                }\r\n            }\r\n            if (index < updatedGuardians.length) {\r\n                updatedGuardians[index] = _guardians[i];\r\n                index++;\r\n            }\r\n        }\r\n        return isFound ? (true, updatedGuardians) : (false, _guardians);\r\n    }\r\n\r\n   /**\r\n    * @dev Checks if an address is a contract.\r\n    * @param _addr The address.\r\n    */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint32 size;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if an address is the owner of a guardian contract.\r\n    * The method does not revert if the call to the owner() method consumes more then 5000 gas.\r\n    * @param _guardian The guardian contract\r\n    * @param _owner The owner to verify.\r\n    */\r\n    function isGuardianOwner(address _guardian, address _owner) internal view returns (bool) {\r\n        address owner = address(0);\r\n        bytes4 sig = bytes4(keccak256(\"owner()\"));\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr,sig)\r\n            let result := staticcall(5000, _guardian, ptr, 0x20, ptr, 0x20)\r\n            if eq(result, 1) {\r\n                owner := mload(ptr)\r\n            }\r\n        }\r\n        return owner == _owner;\r\n    }\r\n}\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RelayerModuleV2\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer.\r\n * RelayerModuleV2 should ultimately replace RelayerModule and be subclassed by all modules.\r\n * It is currently only subclassed by RecoveryManager and ApprovedTransfer.\r\n * @author Julien Niset <julien@argent.xyz>, Olivier VDB <olivier@argent.xyz>\r\n */\r\ncontract RelayerModuleV2 is BaseModule {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address => RelayerConfig) public relayer;\r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 => bool) executedTx;\r\n    }\r\n\r\n    enum OwnerSignature {\r\n        Required,\r\n        Optional,\r\n        Disallowed\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract methods ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) public view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST return false if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @return A boolean indicating whether the signatures are valid.\r\n    */\r\n    function validateSignatures(\r\n        BaseWallet _wallet,\r\n        bytes memory _data,\r\n        bytes32 _signHash,\r\n        bytes memory _signatures\r\n    )\r\n        internal view returns (bool);\r\n\r\n    /* ***************** External methods ************************* */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data,\r\n        uint256 _nonce,\r\n        bytes calldata _signatures,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\r\n        require(verifyData(address(_wallet), _data), \"RM: Target of _data != _wallet\");\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        require(requiredSignatures * 65 == _signatures.length, \"RM: Wrong number of signatures\");\r\n        require(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures), \"RM: Invalid signatures\");\r\n        // The correctness of the refund is checked on the next line using an `if` instead of a `require`\r\n        // in order to prevent a failing refund from being replayable in the future.\r\n        if (verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n            // solium-disable-next-line security/no-call-value\r\n            (success,) = address(this).call(_data);\r\n            refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /* ***************** Internal & Private methods ************************* */\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if (relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid.\r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if (_nonce <= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }\r\n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\r\n        if (nonceBlock > block.number + BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _option An enum indicating whether the owner is required, optional or disallowed.\r\n    */\r\n    function validateSignatures(\r\n        BaseWallet _wallet,\r\n        bytes32 _signHash,\r\n        bytes memory _signatures,\r\n        OwnerSignature _option\r\n    )\r\n        internal view returns (bool)\r\n    {\r\n        address lastSigner = address(0);\r\n        address[] memory guardians;\r\n        if (_option != OwnerSignature.Required || _signatures.length > 65) {\r\n            guardians = guardianStorage.getGuardians(_wallet); // guardians are only read if they may be needed\r\n        }\r\n        bool isGuardian;\r\n\r\n        for (uint8 i = 0; i < _signatures.length / 65; i++) {\r\n            address signer = recoverSigner(_signHash, _signatures, i);\r\n\r\n            if (i == 0) {\r\n                if (_option == OwnerSignature.Required) {\r\n                    // First signer must be owner\r\n                    if (isOwner(_wallet, signer)) {\r\n                        continue;\r\n                    }\r\n                    return false;\r\n                } else if (_option == OwnerSignature.Optional) {\r\n                    // First signer can be owner\r\n                    if (isOwner(_wallet, signer)) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            if (signer <= lastSigner) {\r\n                return false; // Signers must be different\r\n            }\r\n            lastSigner = signer;\r\n            (isGuardian, guardians) = GuardianUtils.isGuardian(guardians, signer);\r\n            if (!isGuardian) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28); // solium-disable-line error-reason\r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer.\r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(\r\n        BaseWallet _wallet,\r\n        uint _gasUsed,\r\n        uint _gasPrice,\r\n        uint _gasLimit,\r\n        uint _signatures,\r\n        address _relayer\r\n    )\r\n        internal\r\n    {\r\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if (_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\r\n            if (_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            } else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            invokeWallet(address(_wallet), _relayer, amount, EMPTY_BYTES);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if (_gasPrice > 0 &&\r\n            _signatures > 1 &&\r\n            (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature.\r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method.\r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n}// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RecoveryManager\r\n * @dev Module to manage the recovery of a wallet owner.\r\n * Recovery is executed by a consensus of the wallet's guardians and takes\r\n * 24 hours before it can be finalized. Once finalised the ownership of the wallet\r\n * is transfered to a new address.\r\n * @author Julien Niset - <julien@argent.im>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.im>\r\n */\r\ncontract RecoveryManager is BaseModule, RelayerModuleV2 {\r\n\r\n    bytes32 constant NAME = \"RecoveryManager\";\r\n\r\n    bytes4 constant internal EXECUTE_RECOVERY_PREFIX = bytes4(keccak256(\"executeRecovery(address,address)\"));\r\n    bytes4 constant internal FINALIZE_RECOVERY_PREFIX = bytes4(keccak256(\"finalizeRecovery(address)\"));\r\n    bytes4 constant internal CANCEL_RECOVERY_PREFIX = bytes4(keccak256(\"cancelRecovery(address)\"));\r\n    bytes4 constant internal TRANSFER_OWNERSHIP_PREFIX = bytes4(keccak256(\"transferOwnership(address,address)\"));\r\n\r\n    struct RecoveryConfig {\r\n        address recovery;\r\n        uint64 executeAfter;\r\n        uint32 guardianCount;\r\n    }\r\n\r\n    // Wallet specific storage\r\n    mapping (address => RecoveryConfig) internal recoveryConfigs;\r\n\r\n    // Recovery period\r\n    uint256 public recoveryPeriod;\r\n    // Lock period\r\n    uint256 public lockPeriod;\r\n    // Security period used for (non-recovery) ownership transfer\r\n    uint256 public securityPeriod;\r\n    // Security window used for (non-recovery) ownership transfer\r\n    uint256 public securityWindow;\r\n    // Location of the Guardian storage\r\n    GuardianStorage public guardianStorage;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event RecoveryExecuted(address indexed wallet, address indexed _recovery, uint64 executeAfter);\r\n    event RecoveryFinalized(address indexed wallet, address indexed _recovery);\r\n    event RecoveryCanceled(address indexed wallet, address indexed _recovery);\r\n    event OwnershipTransfered(address indexed wallet, address indexed _newOwner);\r\n\r\n    // *************** Modifiers ************************ //\r\n\r\n    /**\r\n     * @dev Throws if there is no ongoing recovery procedure.\r\n     */\r\n    modifier onlyWhenRecovery(BaseWallet _wallet) {\r\n        require(recoveryConfigs[address(_wallet)].executeAfter > 0, \"RM: there must be an ongoing recovery\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if there is an ongoing recovery procedure.\r\n     */\r\n    modifier notWhenRecovery(BaseWallet _wallet) {\r\n        require(recoveryConfigs[address(_wallet)].executeAfter == 0, \"RM: there cannot be an ongoing recovery\");\r\n        _;\r\n    }\r\n\r\n    // *************** Constructor ************************ //\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        GuardianStorage _guardianStorage,\r\n        uint256 _recoveryPeriod,\r\n        uint256 _lockPeriod,\r\n        uint256 _securityPeriod,\r\n        uint256 _securityWindow\r\n    )\r\n        BaseModule(_registry, _guardianStorage, NAME)\r\n        public\r\n    {\r\n        require(_lockPeriod >= _recoveryPeriod && _recoveryPeriod >= _securityPeriod + _securityWindow, \"RM: insecure security periods\");\r\n        guardianStorage = _guardianStorage;\r\n        recoveryPeriod = _recoveryPeriod;\r\n        lockPeriod = _lockPeriod;\r\n        securityPeriod = _securityPeriod;\r\n        securityWindow = _securityWindow;\r\n    }\r\n\r\n    // *************** External functions ************************ //\r\n\r\n    /**\r\n     * @dev Lets the guardians start the execution of the recovery procedure.\r\n     * Once triggered the recovery is pending for the security period before it can\r\n     * be finalised.\r\n     * Must be confirmed by N guardians, where N = ((Nb Guardian + 1) / 2).\r\n     * @param _wallet The target wallet.\r\n     * @param _recovery The address to which ownership should be transferred.\r\n     */\r\n    function executeRecovery(BaseWallet _wallet, address _recovery) external onlyExecute notWhenRecovery(_wallet) {\r\n        require(_recovery != address(0), \"RM: recovery address cannot be null\");\r\n        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];\r\n        config.recovery = _recovery;\r\n        config.executeAfter = uint64(now + recoveryPeriod);\r\n        config.guardianCount = uint32(guardianStorage.guardianCount(_wallet));\r\n        guardianStorage.setLock(_wallet, now + lockPeriod);\r\n        emit RecoveryExecuted(address(_wallet), _recovery, config.executeAfter);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalizes an ongoing recovery procedure if the security period is over.\r\n     * The method is public and callable by anyone to enable orchestration.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function finalizeRecovery(BaseWallet _wallet) external onlyWhenRecovery(_wallet) {\r\n        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];\r\n        require(uint64(now) > config.executeAfter, \"RM: the recovery period is not over yet\");\r\n        _wallet.setOwner(config.recovery);\r\n        emit RecoveryFinalized(address(_wallet), config.recovery);\r\n        guardianStorage.setLock(_wallet, 0);\r\n        delete recoveryConfigs[address(_wallet)];\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner cancel an ongoing recovery procedure.\r\n     * Must be confirmed by N guardians, where N = ((Nb Guardian + 1) / 2) - 1.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function cancelRecovery(BaseWallet _wallet) external onlyExecute onlyWhenRecovery(_wallet) {\r\n        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];\r\n        emit RecoveryCanceled(address(_wallet), config.recovery);\r\n        guardianStorage.setLock(_wallet, 0);\r\n        delete recoveryConfigs[address(_wallet)];\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner start the execution of the ownership transfer procedure.\r\n     * Once triggered the ownership transfer is pending for the security period before it can\r\n     * be finalised.\r\n     * @param _wallet The target wallet.\r\n     * @param _newOwner The address to which ownership should be transferred.\r\n     */\r\n    function transferOwnership(BaseWallet _wallet, address _newOwner) external onlyExecute onlyWhenUnlocked(_wallet) {\r\n        require(_newOwner != address(0), \"RM: new owner address cannot be null\");\r\n        _wallet.setOwner(_newOwner);\r\n\r\n        emit OwnershipTransfered(address(_wallet), _newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the details of the ongoing recovery procedure if any.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getRecovery(BaseWallet _wallet) public view returns(address _address, uint64 _executeAfter, uint32 _guardianCount) {\r\n        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];\r\n        return (config.recovery, config.executeAfter, config.guardianCount);\r\n    }\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    function validateSignatures(\r\n        BaseWallet _wallet,\r\n        bytes memory _data,\r\n        bytes32 _signHash,\r\n        bytes memory _signatures\r\n    )\r\n        internal view returns (bool)\r\n    {\r\n        bytes4 functionSignature = functionPrefix(_data);\r\n        if (functionSignature == TRANSFER_OWNERSHIP_PREFIX) {\r\n            return validateSignatures(_wallet, _signHash, _signatures, OwnerSignature.Required);\r\n        } else if (functionSignature == EXECUTE_RECOVERY_PREFIX) {\r\n            return validateSignatures(_wallet, _signHash, _signatures, OwnerSignature.Disallowed);\r\n        } else if (functionSignature == CANCEL_RECOVERY_PREFIX) {\r\n            return validateSignatures(_wallet, _signHash, _signatures, OwnerSignature.Optional);\r\n        }\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) public view returns (uint256) {\r\n        bytes4 methodId = functionPrefix(_data);\r\n        if (methodId == EXECUTE_RECOVERY_PREFIX) {\r\n            uint walletGuardians = guardianStorage.guardianCount(_wallet);\r\n            require(walletGuardians > 0, \"RM: no guardians set on wallet\");\r\n            return SafeMath.ceil(walletGuardians, 2);\r\n        }\r\n        if (methodId == FINALIZE_RECOVERY_PREFIX) {\r\n            return 0;\r\n        }\r\n        if (methodId == CANCEL_RECOVERY_PREFIX) {\r\n            return SafeMath.ceil(recoveryConfigs[address(_wallet)].guardianCount + 1, 2);\r\n        }\r\n        if (methodId == TRANSFER_OWNERSHIP_PREFIX) {\r\n            uint majorityGuardians = SafeMath.ceil(guardianStorage.guardianCount(_wallet), 2);\r\n            return SafeMath.add(majorityGuardians, 1);\r\n        }\r\n        revert(\"RM: unknown method\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"securityWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"finalizeRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getRequiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getRecovery\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_executeAfter\",\"type\":\"uint64\"},{\"name\":\"_guardianCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_recovery\",\"type\":\"address\"}],\"name\":\"executeRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"cancelRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_guardianStorage\",\"type\":\"address\"},{\"name\":\"_recoveryPeriod\",\"type\":\"uint256\"},{\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"name\":\"_securityPeriod\",\"type\":\"uint256\"},{\"name\":\"_securityWindow\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recovery\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"executeAfter\",\"type\":\"uint64\"}],\"name\":\"RecoveryExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recovery\",\"type\":\"address\"}],\"name\":\"RecoveryFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recovery\",\"type\":\"address\"}],\"name\":\"RecoveryCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"}]","ContractName":"RecoveryManager","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f000000000000000000000000000000000000000000000000000000000001fa4000000000000000000000000000000000000000000000000000000000000697800000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000a8c0","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://848907040818e3346c3e6c43f000ac1b896832fc10bd65e67c18fda3fff5b9a0"}]}