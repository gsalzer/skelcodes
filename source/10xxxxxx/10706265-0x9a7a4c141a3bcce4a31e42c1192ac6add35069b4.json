{"status":"1","message":"OK","result":[{"SourceCode":"{\"ABDKMath64x64.sol\":{\"content\":\"/*\\r\\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov \\u003cmikhail.vladimirov@gmail.com\\u003e\\r\\n */\\r\\npragma solidity ^0.5.0 || ^0.6.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath64x64 {\\r\\n  /**\\r\\n   * Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /**\\r\\n   * Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x \\u003e= -0x8000000000000000 \\u0026\\u0026 x \\u003c= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x \\u003c\\u003c 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x \\u003e\\u003e 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x \\u003c= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x \\u003c\\u003c 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x \\u003e= 0);\\r\\n    return uint64 (x \\u003e\\u003e 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x \\u003e\\u003e 64;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) \\u003c\\u003c 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y \\u003e\\u003e 64;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (y \\u003e= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \\u0026\\u0026\\r\\n        y \\u003c= 0x1000000000000000000000000000000000000000000000000);\\r\\n      return -y \\u003c\\u003c 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x \\u003c 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y \\u003c 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult \\u003c=\\r\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult \\u003c=\\r\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x \\u003e= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y \\u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) \\u003e\\u003e 64;\\r\\n    uint256 hi = uint256 (x) * (y \\u003e\\u003e 128);\\r\\n\\r\\n    require (hi \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi \\u003c\\u003c= 64;\\r\\n\\r\\n    require (hi \\u003c=\\r\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) \\u003c\\u003c 64) / y;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x \\u003c 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y \\u003c 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult \\u003c= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result \\u003c= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x \\u003c 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) \\u003e\\u003e 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m \\u003e= 0);\\r\\n    require (m \\u003c\\r\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) \\u003e\\u003e 1));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x \\u003e= 0) {\\r\\n      absoluteResult = powu (uint256 (x) \\u003c\\u003c 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) \\u003c\\u003c 63, y);\\r\\n      negativeResult = y \\u0026 1 \\u003e 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult \\u003e\\u003e= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult \\u003c= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x \\u003c 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x \\u003e= 0);\\r\\n    return int128 (sqrtu (uint256 (x) \\u003c\\u003c 64, 0x10000000000000000));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x \\u003c= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x \\u003e 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc \\u003e= 0x10000000000000000) { xc \\u003e\\u003e= 64; msb += 64; }\\r\\n    if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\r\\n    if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\r\\n    if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\r\\n    if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\r\\n    if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\r\\n    if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 \\u003c\\u003c 64;\\r\\n    uint256 ux = uint256 (x) \\u003c\\u003c 127 - msb;\\r\\n    for (int256 bit = 0x8000000000000000; bit \\u003e 0; bit \\u003e\\u003e= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux \\u003e\\u003e 255;\\r\\n      ux \\u003e\\u003e= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x \\u003c= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x \\u003e 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF \\u003e\\u003e 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x \\u003c 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x \\u003c -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x \\u0026 0x8000000000000000 \\u003e 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4000000000000000 \\u003e 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2000000000000000 \\u003e 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1000000000000000 \\u003e 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x800000000000000 \\u003e 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x400000000000000 \\u003e 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x200000000000000 \\u003e 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x100000000000000 \\u003e 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x80000000000000 \\u003e 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x40000000000000 \\u003e 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x20000000000000 \\u003e 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x10000000000000 \\u003e 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x8000000000000 \\u003e 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4000000000000 \\u003e 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2000000000000 \\u003e 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1000000000000 \\u003e 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x800000000000 \\u003e 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x400000000000 \\u003e 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x200000000000 \\u003e 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x100000000000 \\u003e 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x80000000000 \\u003e 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x40000000000 \\u003e 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x20000000000 \\u003e 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x10000000000 \\u003e 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x8000000000 \\u003e 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4000000000 \\u003e 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2000000000 \\u003e 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1000000000 \\u003e 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x800000000 \\u003e 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x400000000 \\u003e 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x200000000 \\u003e 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x100000000 \\u003e 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x80000000 \\u003e 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x40000000 \\u003e 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x20000000 \\u003e 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x10000000 \\u003e 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x8000000 \\u003e 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4000000 \\u003e 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2000000 \\u003e 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1000000 \\u003e 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x800000 \\u003e 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x400000 \\u003e 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x200000 \\u003e 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x100000 \\u003e 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x80000 \\u003e 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x40000 \\u003e 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x20000 \\u003e 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x10000 \\u003e 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x8000 \\u003e 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4000 \\u003e 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2000 \\u003e 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1000 \\u003e 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x800 \\u003e 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x400 \\u003e 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x200 \\u003e 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x100 \\u003e 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x80 \\u003e 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x40 \\u003e 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x20 \\u003e 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x10 \\u003e 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x8 \\u003e 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x4 \\u003e 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x2 \\u003e 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 \\u003e\\u003e 128;\\r\\n    if (x \\u0026 0x1 \\u003e 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB \\u003e\\u003e 128;\\r\\n\\r\\n    result \\u003e\\u003e= 63 - (x \\u003e\\u003e 64);\\r\\n    require (result \\u003c= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x \\u003c 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x \\u003c -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (\\r\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 \\u003e\\u003e 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x \\u003c\\u003c 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x \\u003e\\u003e 192;\\r\\n      if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\r\\n      if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\r\\n      if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\r\\n      if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\r\\n      if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\r\\n      if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x \\u003c\\u003c 255 - msb) / ((y - 1 \\u003e\\u003e msb - 191) + 1);\\r\\n      require (result \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y \\u003e\\u003e 128);\\r\\n      uint256 lo = result * (y \\u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x \\u003e\\u003e 192;\\r\\n      uint256 xl = x \\u003c\\u003c 64;\\r\\n\\r\\n      if (xl \\u003c lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi \\u003c\\u003c 128;\\r\\n      if (xl \\u003c lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi \\u003e\\u003e 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc \\u003e= 0x100000000000000000000000000000000) { xc \\u003e\\u003e= 128; msb += 128; }\\r\\n      if (xc \\u003e= 0x10000000000000000) { xc \\u003e\\u003e= 64; msb += 64; }\\r\\n      if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\r\\n      if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\r\\n      if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\r\\n      if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\r\\n      if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\r\\n      if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe \\u003e 0) x \\u003e\\u003e= xe;\\r\\n      else x \\u003c\\u003c= -xe;\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y \\u003e 0) {\\r\\n        if (y \\u0026 1 \\u003e 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result \\u003e=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result \\u003e\\u003e= 128;\\r\\n            re += 1;\\r\\n          } else result \\u003e\\u003e= 127;\\r\\n          if (re \\u003c -127) return 0; // Underflow\\r\\n          require (re \\u003c 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y \\u003e\\u003e= 1;\\r\\n          xe \\u003c\\u003c= 1;\\r\\n          if (x \\u003e=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x \\u003e\\u003e= 128;\\r\\n            xe += 1;\\r\\n          } else x \\u003e\\u003e= 127;\\r\\n          if (xe \\u003c -127) return 0; // Underflow\\r\\n          require (xe \\u003c 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re \\u003e 0) result \\u003c\\u003c= re;\\r\\n      else if (re \\u003c 0) result \\u003e\\u003e= -re;\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      require (r \\u003e 0);\\r\\n      while (true) {\\r\\n        uint256 rr = x / r;\\r\\n        if (r == rr || r + 1 == rr) return uint128 (r);\\r\\n        else if (r == rr + 1) return uint128 (rr);\\r\\n        r = r + rr + 1 \\u003e\\u003e 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Momentum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.6.12;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport { ABDKMath64x64 as Math } from \\\"./ABDKMath64x64.sol\\\";\\r\\n\\r\\ncontract Momentum is ERC20, Ownable {\\r\\n    int128 shortMomentum;\\r\\n    int128 longMomentum;\\r\\n    int128 SMweight;\\r\\n    int128 LMweightEx;\\r\\n    int128 LMweightCo;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\r\\n\\r\\n    bool isBurning = false;\\r\\n\\r\\n    constructor(\\r\\n        uint256 initialSupply, \\r\\n        uint256 _shortMomentumWeight,\\r\\n        uint256 _LMweightEx,\\r\\n        uint256 _LMweightCo,\\r\\n        uint256 factor,\\r\\n        uint256 _shortMomentum, \\r\\n        uint256 _longMomentum\\r\\n    ) public ERC20(\\\"Momentum\\\", \\\"XMM\\\") {\\r\\n        _setupDecimals(10);\\r\\n        _mint(_msgSender(), initialSupply);\\r\\n        SMweight = Math.divu(_shortMomentumWeight, factor);\\r\\n        LMweightEx = Math.divu(_LMweightEx, factor);\\r\\n        LMweightCo = Math.divu(_LMweightCo, factor);\\r\\n        shortMomentum = Math.fromUInt(_shortMomentum);\\r\\n        longMomentum = Math.fromUInt(_longMomentum);\\r\\n    }\\r\\n\\r\\n    function getShortMomentum() external view returns (uint256) {\\r\\n        return Math.mulu(shortMomentum, 1);\\r\\n    }\\r\\n\\r\\n    function getLongMomentum() external view returns (uint256) {\\r\\n        return Math.mulu(longMomentum, 1);\\r\\n    }\\r\\n\\r\\n    function getMomentumAndSupply() external view returns (uint256, uint256, uint256) {\\r\\n        uint256 SM = Math.mulu(shortMomentum, 1);\\r\\n        uint256 LM = Math.mulu(longMomentum, 1);\\r\\n        return (SM, LM, totalSupply());\\r\\n    }\\r\\n\\r\\n    function getNewMomentum(int128 amount, int128 SMcopy, int128 LMcopy) internal view returns (int128, int128) {\\r\\n        int128 LMweight = (amount \\u003c SMcopy) ? LMweightCo : LMweightEx;\\r\\n        int128 LMnew = Math.add(LMcopy, Math.div(Math.sub(amount, LMcopy), LMweight));\\r\\n        int128 SMnew = Math.add(SMcopy, Math.div(Math.sub(amount, SMcopy), SMweight));\\r\\n        return (LMnew, SMnew);\\r\\n    }\\r\\n\\r\\n    function getRangeData(int128 LMcopy, int128 SMcopy, int128 LMnew, int128 SMnew) internal pure returns (int128, int128) {\\r\\n        int128 range = Math.abs(Math.sub(LMcopy, SMcopy));\\r\\n        int128 newRange = Math.abs(Math.sub(LMnew, SMnew));\\r\\n        int128 rangeDelta = Math.sub(newRange, range);\\r\\n        return (rangeDelta, newRange);\\r\\n    }\\r\\n\\r\\n    function getDestabilizingTransferFee(int128 amount, int128 newRange, int128 newLongMomentum) internal pure returns (int128) {\\r\\n        // If newRange is within 2% of newLongMomentum, apply ~0.75% fee \\r\\n        // to avoid potential overflow calculations and negative log values\\r\\n        if (newRange \\u003c= Math.div(newLongMomentum, Math.fromUInt(50))) {\\r\\n            return Math.mul(amount, Math.div(Math.fromUInt(1), Math.fromUInt(133)));\\r\\n        } else {\\r\\n            int128 proportion = Math.div(newRange, newLongMomentum);\\r\\n            int128 rate = Math.add(Math.fromUInt(1), Math.ln(Math.mul(proportion, Math.fromUInt(50))));\\r\\n            return Math.mul(amount, Math.div(rate, Math.fromUInt(133)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTransferFee(uint256 amount256, int128 SMcopy, int128 LMcopy) internal returns (uint256) {\\r\\n        int128 amount = Math.fromUInt(amount256);\\r\\n\\r\\n        // Guard against flood of small transfers manipulating momentum values\\r\\n        // If transfer size is less than ~0.3% of lower momentum value, charge 5% fee and skip momentum update\\r\\n        if (SMcopy \\u003c= LMcopy) {\\r\\n            if (amount \\u003c Math.div(SMcopy, Math.fromUInt(333))) {\\r\\n                return Math.mulu(Math.div(amount, Math.fromUInt(20)), 1);\\r\\n            }\\r\\n        } else {\\r\\n            if (amount \\u003c Math.div(LMcopy, Math.fromUInt(333))) {\\r\\n                return Math.mulu(Math.div(amount, Math.fromUInt(20)), 1);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        (int128 newLongMomentum, int128 newShortMomentum) = getNewMomentum(amount, SMcopy, LMcopy);\\r\\n        (int128 rangeDelta, int128 newRange) = getRangeData(LMcopy, SMcopy, newLongMomentum, newShortMomentum);\\r\\n\\r\\n        int128 transferFee;\\r\\n\\r\\n        if (rangeDelta \\u003c Math.fromUInt(0)) {\\r\\n            transferFee = Math.div(amount, Math.fromUInt(133)); // stabilizing transfer ~0.75% fee\\r\\n        } else {\\r\\n            transferFee = getDestabilizingTransferFee(amount, newRange, newLongMomentum);\\r\\n        }\\r\\n\\r\\n        longMomentum = newLongMomentum;\\r\\n        shortMomentum = newShortMomentum;\\r\\n\\r\\n        return Math.mulu(transferFee, 1);\\r\\n    }\\r\\n\\r\\n    function startBurning() public onlyOwner {\\r\\n        isBurning = true;\\r\\n        renounceOwnership();\\r\\n    }\\r\\n\\r\\n    function burnAndTransfer(address sender, address recipient, uint256 amount256) internal {\\r\\n        if (isBurning) {\\r\\n            uint256 transferFee = getTransferFee(amount256, shortMomentum, longMomentum);\\r\\n            uint256 adjustedAmount = amount256.sub(transferFee);\\r\\n            _burn(sender, transferFee);\\r\\n            _transfer(sender, recipient, adjustedAmount);\\r\\n        } else {\\r\\n            _transfer(sender, recipient, amount256);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount256) public override returns (bool) {\\r\\n        burnAndTransfer(_msgSender(), recipient, amount256);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount256) public override returns (bool) {\\r\\n        burnAndTransfer(sender, recipient, amount256);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount256, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal override {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortMomentumWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LMweightEx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LMweightCo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortMomentum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_longMomentum\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLongMomentum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMomentumAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShortMomentum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBurning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount256\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount256\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Momentum","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000aaf96eb9d0d0000000000000000000000000000000000000000000000000000000000000002780b000000000000000000000000000000000000000000000000000000000003feab00000000000000000000000000000000000000000000000000000000000676b50000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000110d9316ec000000000000000000000000000000000000000000000000000000110d9316ec000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae3ab1acab4a6a7b5465e9a1db9c3e425a43d4e681c312ba2be7906e37a83838"}]}