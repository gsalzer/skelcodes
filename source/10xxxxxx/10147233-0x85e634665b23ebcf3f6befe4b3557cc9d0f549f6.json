{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * \\u003e It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n}\\n\"},\"DADTokenVesting.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./VestingPlan.sol\\\";\\nimport \\\"./SeedAccountInit.sol\\\";\\nimport \\\"./TeamAccountInit.sol\\\";\\n\\ncontract DADTokenVesting is Ownable{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    using Address for address;\\n\\n    VestingPlan.AccountPlans private seed_plans;\\n    VestingPlan.AccountPlans private team_plans;\\n    enum releaseTargetType {TEAM, SEED}\\n\\n    event TokensReleased(IERC20 token, uint256 amount, address account, releaseTargetType target_type);\\n    event TokensRevoked(IERC20 token, address to, uint256 amount);\\n\\n    IERC20 private _dad_token;\\n\\n    constructor(IERC20 dad_token) public{\\n        require(address(dad_token) != address(0), \\\"TokenVesting: dad token is the zero address\\\");\\n        _dad_token = dad_token;\\n        \\n        // 2020-04-30 2020-10-31 2021-4-30 2021-10-31\\n        uint256[4] memory seed_paln_timestamps = [uint256(1588204800),1604102400, 1619712000, 1635638400];\\n        // seed init data\\n        SeedAccountInit.AccountInitPlan[] memory seed_accounts_plans = new SeedAccountInit.AccountInitPlan[](3);\\n        seed_accounts_plans[0] = SeedAccountInit.AccountInitPlan(\\n                            {account:address(0xe9cCb1a22D7aEF37964f70C0F051DD8E6F6d43fC),\\n                             amounts:[uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000)],\\n                             timestamps:seed_paln_timestamps});\\n        seed_accounts_plans[1] = SeedAccountInit.AccountInitPlan(\\n                            {account:address(0x3AEE5cf9Fe5B8E788C32815C19B4acF88D653B51),\\n                             amounts:[uint256(18_750_000_000_000_000),uint256(1_875_0000_000_000_000),uint256(1_875_0000_000_000_000),uint256(1_875_0000_000_000_000)],\\n                             timestamps:seed_paln_timestamps});\\n        seed_accounts_plans[2] = SeedAccountInit.AccountInitPlan(\\n                            {account:address(0x8e1D52B707cb808DE04e49a8cd99124cDBC18Aa0),\\n                             amounts:[uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000),uint256(9_375_000_000_000_000)],\\n                             timestamps:seed_paln_timestamps});\\n                     \\n        _init_seed_plan_detail(seed_plans,seed_accounts_plans);\\n        \\n        \\n        // 2020-5-31, 2020-11-30, 2021-5-31, 2021-11-30, 2022-5-31, 2022-11-30, 2023-5-31,2023-11-30\\n        uint256[8] memory team_paln_timestamps = [uint256(1590854400),1606694400,1622390400,1638230400,1653926400,1669766400,1685462400,1701302400];\\n        \\n        uint256 team_coin_count_per_time = 18750000_000_000_000;\\n        TeamAccountInit.AccountInitPlan[] memory team_accounts_plans = new TeamAccountInit.AccountInitPlan[](1);\\n        team_accounts_plans[0] = TeamAccountInit.AccountInitPlan(\\n                            {account:address(0x7f372E2a4E69f92b4D70Cb3D637BB1FEbF118062),\\n                             amounts:[team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time,team_coin_count_per_time],\\n                             timestamps:team_paln_timestamps});\\n        _init_team_plan_detail(team_plans,team_accounts_plans);\\n\\n    }\\n\\n\\n    ///////////plan functions///////\\n    function _init_seed_plan_detail(VestingPlan.AccountPlans storage plans_init, \\n                                SeedAccountInit.AccountInitPlan[] memory accounts_plans) internal{\\n        \\n        for(uint a = 0; a \\u003c accounts_plans.length; a++){\\n            SeedAccountInit.AccountInitPlan memory plans = accounts_plans[a];\\n            // account must be unique\\n            assert(plans_init._account_plans[plans.account].length == 0);\\n            // add account key\\n            plans_init._accounts.push(plans.account);\\n            // setup account values\\n            for(uint t = 0; t \\u003c plans.timestamps.length; t++){\\n                plans_init._account_plans[plans.account].push(VestingPlan.AccountTimePlan(\\n                    {amount:plans.amounts[t], timestamp:plans.timestamps[t]}\\n                    ));\\n            }\\n        }\\n    }\\n\\n    ///////////plan functions///////\\n    function _init_team_plan_detail(VestingPlan.AccountPlans storage plans_init, \\n                                TeamAccountInit.AccountInitPlan[] memory accounts_plans) internal{\\n        \\n        for(uint a = 0; a \\u003c accounts_plans.length; a++){\\n            TeamAccountInit.AccountInitPlan memory plans = accounts_plans[a];\\n            // account must be unique\\n            assert(plans_init._account_plans[plans.account].length == 0);\\n            // add account key\\n            plans_init._accounts.push(plans.account);\\n            // setup account values\\n            for(uint t = 0; t \\u003c plans.timestamps.length; t++){\\n                plans_init._account_plans[plans.account].push(VestingPlan.AccountTimePlan(\\n                    {amount:plans.amounts[t], timestamp:plans.timestamps[t]}\\n                    ));\\n            }\\n        }\\n    }\\n\\n    function _get_vested_account_amount(VestingPlan.AccountPlans storage accounts_plans, \\n    uint256 timestamp, address account) internal view returns(uint256){\\n        uint256 release_amount = 0;\\n         VestingPlan.AccountTimePlan[] storage plans = accounts_plans._account_plans[account];\\n         for (uint i = 0; i \\u003c plans.length; i++) {\\n            if(plans[i].timestamp \\u003c timestamp){\\n                release_amount += plans[i].amount;\\n            }\\n        }\\n        return release_amount;\\n    }\\n    \\n    // send token and record the released amount\\n    function _do_record_release_token(VestingPlan.AccountPlans storage accounts_plans, \\n    address target, uint256 amount) internal {\\n        accounts_plans._account_released[target] = accounts_plans._account_released[target].add(amount);\\n    }\\n    \\n    // get the amount that already vested but hasn\\u0027t been released yet.\\n    function _releasable_account_amount(VestingPlan.AccountPlans storage accounts_plans, \\n    address account) internal view returns(uint256) {\\n        return _get_vested_account_amount(accounts_plans, block.timestamp, account).sub(accounts_plans._account_released[account]);\\n    }\\n\\n    function _get_account_released(VestingPlan.AccountPlans storage accounts_plans, \\n    address account) internal view returns(uint256){\\n        return accounts_plans._account_released[account];\\n    }\\n\\n    // send token and record the released amount\\n    function _do_release_token(IERC20 token, address target, uint256 amount, releaseTargetType targetType, \\n                            VestingPlan.AccountPlans storage plans) private{\\n        _do_record_release_token(plans, target, amount);\\n        token.safeTransfer(target, amount);\\n        emit TokensReleased(_dad_token, amount, target, targetType);\\n    }\\n\\n    /////////////seed part api///////////\\n    function seed_plan_amount(address account) public view returns (uint256){\\n       return _get_vested_account_amount(seed_plans, block.timestamp, account);\\n    }\\n\\n\\n    function get_seed_account_released(address account) public view returns(uint256){\\n        return _get_account_released(seed_plans, account);\\n    }\\n    \\n    function seed_plan_amount_time(uint256 timestamp, address account) public view returns (uint256){\\n       return _get_vested_account_amount(seed_plans, timestamp, account);\\n    }\\n    \\n    // release the token for seed account\\n    function seed_account_release(address account) public onlyOwner{\\n\\n        uint256 unreleased = _releasable_account_amount(seed_plans, account);\\n\\n        require(unreleased \\u003e 0, \\\"TokenVesting: no tokens are due\\\");\\n\\n        _do_release_token(_dad_token, account, unreleased, \\n                            releaseTargetType.SEED, seed_plans);\\n    }\\n    \\n    // release seed all accounts\\n    function seed_release_all_accounts() public onlyOwner{\\n        for(uint a = 0; a \\u003c seed_plans._accounts.length; a++){\\n            uint256 unreleased = _releasable_account_amount(seed_plans, seed_plans._accounts[a]);\\n            if(unreleased == 0){\\n                continue;\\n            }\\n            _do_release_token(_dad_token, seed_plans._accounts[a], unreleased, \\n                                releaseTargetType.SEED, seed_plans);\\n        }\\n    }\\n    \\n    /////////////team part api///////////\\n    function team_plan_amount(address account) public view returns (uint256){\\n       return _get_vested_account_amount(team_plans, block.timestamp, account);\\n    }\\n\\n\\n    function get_team_account_released(address account) public view returns(uint256){\\n        return _get_account_released(team_plans, account);\\n    }\\n    \\n    function team_plan_amount_time(uint256 timestamp, address account) public view returns (uint256){\\n       return _get_vested_account_amount(team_plans, timestamp, account);\\n    }\\n    \\n    // release the token for team account\\n    function team_account_release(address account) public onlyOwner{\\n\\n        uint256 unreleased = _releasable_account_amount(team_plans, account);\\n\\n        require(unreleased \\u003e 0, \\\"TokenVesting: no tokens are due\\\");\\n\\n        _do_release_token(_dad_token, account, unreleased, \\n                            releaseTargetType.TEAM, team_plans);\\n    }\\n    \\n    // release team all accounts\\n    function team_release_all_accounts() public onlyOwner{\\n        for(uint a = 0; a \\u003c team_plans._accounts.length; a++){\\n            uint256 unreleased = _releasable_account_amount(team_plans, team_plans._accounts[a]);\\n            if(unreleased == 0){\\n                continue;\\n            }\\n            _do_release_token(_dad_token, team_plans._accounts[a], unreleased, \\n                                releaseTargetType.TEAM, team_plans);\\n        }\\n    }\\n\\n    //////////manage part api//////////////\\n    function dad_token_balance() public view returns(uint256){\\n        return _dad_token.balanceOf(address(this));\\n    }\\n\\n    function dad_token_address() public view returns(IERC20){\\n        return _dad_token;\\n    }\\n\\n    //回收\\n    function revoke(address to, uint256 amount) public onlyOwner {\\n        uint256 balance = _dad_token.balanceOf(address(this));\\n        require(balance \\u003e= amount, \\\"balance is not enough for amount\\\");\\n        _dad_token.safeTransfer(to, amount);\\n        emit TokensRevoked(_dad_token, to, amount);\\n    }\\n    \\n    function set_dad_token_address(IERC20 dad_token) public onlyOwner {\\n        require(address(dad_token) != address(0), \\\"TokenVesting: dad token is the zero address\\\");\\n       _dad_token = dad_token;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"},\"SeedAccountInit.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract SeedAccountInit{\\n    uint256 public constant INITIAL_RELEASE_COUNT = 4;\\n\\n    struct AccountInitPlan{\\n        address account;\\n        uint256[INITIAL_RELEASE_COUNT] amounts;\\n        uint256[INITIAL_RELEASE_COUNT] timestamps;\\n    }\\n}\\n\"},\"TeamAccountInit.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract TeamAccountInit{\\n    uint256 public constant INITIAL_RELEASE_COUNT = 8;\\n    \\n    struct AccountInitPlan{\\n        address account;\\n        uint256[INITIAL_RELEASE_COUNT] amounts;\\n        uint256[INITIAL_RELEASE_COUNT] timestamps;\\n    }\\n}\\n\"},\"VestingPlan.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary VestingPlan{\\n    using SafeMath for uint256;\\n\\n    struct AccountTimePlan {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n    \\n    struct AccountPlans{\\n        mapping(address =\\u003e AccountTimePlan[])  _account_plans;\\n        address[]  _accounts;\\n        mapping(address=\\u003e uint256)  _account_released;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dad_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DADTokenVesting.releaseTargetType\",\"name\":\"target_type\",\"type\":\"uint8\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRevoked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"dad_token_address\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dad_token_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_seed_account_released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_team_account_released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"seed_account_release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"seed_plan_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"seed_plan_amount_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seed_release_all_accounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"dad_token\",\"type\":\"address\"}],\"name\":\"set_dad_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"team_account_release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"team_plan_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"team_plan_amount_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"team_release_all_accounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DADTokenVesting","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005b322514ff727253292637d9054301600c2c81e8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eda8d36423dc246f3103e23921e8e0e296691108d77739deaef1b4acdd1d914a"}]}