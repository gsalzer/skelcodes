{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\nlibrary SafeMath{\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract HimintGold{\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) private transferable;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => bool) private admin;\r\n    \r\n    uint256 private _totalSupply=1000000000000000000000000000;\r\n    string private _name= \"HiMintGold\";\r\n    string private _symbol= \"HMG\";\r\n    uint256 private _decimals = 18;\r\n    \r\n    constructor () public {\r\n\tadmin[msg.sender] = true;\r\n            balanceOf[msg.sender] = _totalSupply;\r\n        }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n        \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        \r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balanceOf[_from]>=_value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(transfercheck(_from) == true);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value,\"ERC20: transfer amount exceeds balance\");\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n    }\r\n    \r\n    \r\n    function transfer(address to, uint256 value) public {\r\n        _transfer(msg.sender, to, value);\r\n    }\r\n    \r\n    function transferFrom(address _from, uint256 amount) public {\r\n         \r\n       require(allowed[_from][msg.sender]>=amount);\r\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(amount);\r\n       _transfer(_from,msg.sender,amount);\r\n    }\r\n    \r\n    function transfercheck(address check) internal returns(bool) {\r\n        if (transferable[check]==false){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function AllowenceCheck(address spender, address approver) public view returns (uint256){\r\n        return allowed[approver][spender];\r\n    }\r\n    \r\n    \r\n    function approve(address spender, uint256 _value) public{\r\n        require(balanceOf[msg.sender]>=_value);\r\n        allowed[msg.sender][spender] = _value;\r\n        emit Approval(msg.sender, spender, _value);\r\n        \r\n    }\r\n    \r\n    function increaseAllowence(address spender, uint256 _value) public{\r\n        require(balanceOf[msg.sender]>=_value);\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(_value);\r\n        emit Approval(msg.sender, spender, _value);\r\n    }\r\n    \r\n    function decreaseAllowence(address spender, uint256 _value) public{\r\n        require(balanceOf[msg.sender]>=_value);\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(_value);\r\n        emit Approval(msg.sender, spender, -_value);\r\n    }\r\n\r\n    function lock(address lockee) public {\r\n        require(admin[msg.sender]==true);\r\n        transferable[lockee] = true;\r\n    }\r\n    \r\n    function unlock(address unlockee) public {\r\n        require(admin[msg.sender]==true);\r\n        transferable[unlockee] = false;\r\n    }\r\n    \r\n    function lockcheck(address checkee) public view returns (bool){\r\n        return transferable[checkee];\r\n    }\r\n    \r\n    \r\n    function _burn(address account, uint256 value) private {\r\n        require(admin[account]==true);\r\n        require(admin[msg.sender]==true);\r\n        require(balanceOf[account]>=value);\r\n        require(_totalSupply>=value);\r\n        balanceOf[account] =balanceOf[account].sub(value);\r\n        _totalSupply = _totalSupply.sub(value);\r\n    }\r\n    \r\n    \r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function addadmin(address account) public{\r\n        require(admin[msg.sender]==true);\r\n        admin[account]=true;\r\n    }\r\n\r\n    function deleteadmin(address account) public{\r\n        require(admin[msg.sender]==true);\r\n        admin[account]=false;\r\n    }\r\n\r\n    function admincheck(address account) public view returns (bool){\r\n        return admin[account];\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unlockee\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deleteadmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addadmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"checkee\",\"type\":\"address\"}],\"name\":\"lockcheck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"AllowenceCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"admincheck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockee\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HimintGold","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b8747e536ef13967aee2eed4eb3edc5edf8b9abab16da327ce7b22e8da095144"}]}