{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller,                              // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ncontract PitchLike {\r\n    function transfer(address,uint) external returns (bool);\r\n    function transferFrom(address,address,uint) external returns (bool);\r\n}\r\n\r\n\r\ncontract Pitch2Like {\r\n    function mint(address,uint) external;\r\n    function burn(address,uint) external;\r\n}\r\n\r\n\r\n/*\r\n    Here we provide *adapter* to swap Pitch tokens to the Pitch - v2 tokens. The\r\n    adapters here are provided as working examples:\r\n      - `PitchLike`: For well behaved ERC20 tokens, with simple transfer\r\n                   semantics.\r\n      - `Pitch2Like`: For DAI-like tokens, with ability to mint and burn tokens.\r\n\r\n    Adapter has two basic methods:\r\n      - `join`: enter collateral into the system\r\n      - `exit`: remove collateral from the system\r\n*/\r\n\r\ncontract PitchSwap is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"PitchSwap/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    Pitch2Like public pitch2;\r\n    PitchLike public pitch;\r\n    uint    public live;  // Access Flag\r\n\r\n    constructor(address pitch2_, address pitch_) public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n        pitch2 = Pitch2Like(pitch2_);\r\n        pitch = PitchLike(pitch_);\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n\t// In wad input we have 1E9 and will convert to 1E18\r\n\t// we need to mul input wad to 1E9 (10**9)\r\n\tuint constant ONE = 10 ** 9; //10 ** 18;\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function join(address usr, uint wad) external note {\r\n        require(live == 1, \"PitchSwap/not-live\");\r\n        require(int(wad) >= 0, \"PitchSwap/overflow\");\r\n\t\t// mul to get 18 decimals\r\n        pitch2.mint(usr, mul(ONE, wad));\r\n        require(pitch.transferFrom(msg.sender, address(this), wad), \"PitchSwap/failed-transfer\");\r\n    }\r\n\r\n    function exit(address usr, uint wad) external note {\r\n        require(wad <= 2 ** 255, \"PitchSwap/overflow\");\r\n\t\t// mul to get 18 decimals\r\n        pitch2.burn(usr, mul(ONE, wad));\r\n        require(pitch.transfer(usr, wad), \"PitchSwap/failed-transfer\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pitch2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pitch_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pitch\",\"outputs\":[{\"internalType\":\"contract PitchLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pitch2\",\"outputs\":[{\"internalType\":\"contract Pitch2Like\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PitchSwap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000ee41dcc47045a85bcf7784264f23a6f8bad35c00000000000000000000000087f56ee356b434187105b40f96b230f5283c0ab4","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5db6303e9e8b5df6cbd2b09169b00ebff7b22e5f018bed8b25a715e3f3713f5a"}]}