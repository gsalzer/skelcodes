{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    /     |  __    / ____|\r\n   /      | |__) | | |\r\n  / /    |  _  /  | |\r\n / ____   | |    | |____\r\n/_/    _ |_|  _  _____|\r\n\r\n* ARC: v1/StateV1.sol\r\n*\r\n* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/v1/StateV1.sol\r\n*\r\n* Contract Dependencies: \r\n*\t- Context\r\n*\t- Ownable\r\n* Libraries: \r\n*\t- Address\r\n*\t- Decimal\r\n*\t- Math\r\n*\t- SafeERC20\r\n*\t- SafeMath\r\n*\t- TypesV1\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 ARC\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/* ===============================================\r\n* Flattened with Solidifier by Coinage\r\n* \r\n* https://solidifier.coina.ge\r\n* ===============================================\r\n*/\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @title Math\r\n *\r\n * Library for non-standard Math functions\r\n */\r\nlibrary Math {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Library Functions ============\r\n\r\n    /*\r\n     * Return target * (numerator / denominator).\r\n     */\r\n    function getPartial(\r\n        uint256 target,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return target.mul(numerator).div(denominator);\r\n    }\r\n\r\n    function to128(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        uint128 result = uint128(number);\r\n        require(\r\n            result == number,\r\n            \"Math: Unsafe cast to uint128\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to96(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        uint96 result = uint96(number);\r\n        require(\r\n            result == number,\r\n            \"Math: Unsafe cast to uint96\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function to32(\r\n        uint256 number\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        uint32 result = uint32(number);\r\n        require(\r\n            result == number,\r\n            \"Math: Unsafe cast to uint32\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function min(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(\r\n        uint256 a,\r\n        uint256 b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @title Decimal\r\n *\r\n * Library that defines a fixed-point number with 18 decimal places.\r\n */\r\nlibrary Decimal {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Constants ============\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // ============ Structs ============\r\n\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function one()\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: BASE });\r\n    }\r\n\r\n    function onePlus(\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: d.value.add(BASE) });\r\n    }\r\n\r\n    function mul(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, d.value, BASE);\r\n    }\r\n\r\n    function mul(\r\n        D256 memory d1,\r\n        D256 memory d2\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return Decimal.D256({ value: Math.getPartial(d1.value, d2.value, BASE) });\r\n    }\r\n\r\n    function div(\r\n        uint256 target,\r\n        D256 memory d\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return Math.getPartial(target, BASE, d.value);\r\n    }\r\n\r\n    function add(\r\n        D256 memory d,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: d.value.add(amount) });\r\n    }\r\n\r\n    function sub(\r\n        D256 memory d,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        pure\r\n        returns (D256 memory)\r\n    {\r\n        return D256({ value: d.value.sub(amount) });\r\n    }\r\n\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\ninterface IOracle {\r\n\r\n    function fetchCurrentPrice()\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\ninterface ISyntheticToken {\r\n\r\n    function symbolKey()\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n    function burn(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n    function transferCollateral(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\ninterface IMintableToken {\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n    function burn(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary TypesV1 {\r\n\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Enums ============\r\n\r\n    enum AssetType {\r\n        Collateral,\r\n        Synthetic\r\n    }\r\n\r\n    // ============ Structs ============\r\n\r\n    struct MarketParams {\r\n        Decimal.D256 collateralRatio;\r\n        Decimal.D256 liquidationUserFee;\r\n        Decimal.D256 liquidationArcFee;\r\n    }\r\n\r\n    struct Position {\r\n        address owner;\r\n        AssetType collateralAsset;\r\n        AssetType borrowedAsset;\r\n        Par collateralAmount;\r\n        Par borrowedAmount;\r\n    }\r\n\r\n    struct RiskParams {\r\n        uint256 collateralLimit;\r\n        uint256 syntheticLimit;\r\n        uint256 positionCollateralMinimum;\r\n    }\r\n\r\n    // ============ AssetAmount ============\r\n\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par  // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    // ============ ArcAsset ============\r\n\r\n    function oppositeAsset(\r\n        AssetType assetType\r\n    )\r\n        internal\r\n        pure\r\n        returns (AssetType)\r\n    {\r\n        return assetType == AssetType.Collateral ? AssetType.Synthetic : AssetType.Collateral;\r\n    }\r\n\r\n    // ============ Par (Principal Amount) ============\r\n\r\n    // Individual principal amount for an account\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    function zeroPar()\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: false,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function positiveZeroPar()\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: true,\r\n            value: 0\r\n        });\r\n    }\r\n\r\n    function sub(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return add(a, negative(b));\r\n    }\r\n\r\n    function add(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        Par memory result;\r\n        if (a.sign == b.sign) {\r\n            result.sign = a.sign;\r\n            result.value = SafeMath.add(a.value, b.value).to128();\r\n        } else {\r\n            if (a.value >= b.value) {\r\n                result.sign = a.sign;\r\n                result.value = SafeMath.sub(a.value, b.value).to128();\r\n            } else {\r\n                result.sign = b.sign;\r\n                result.value = SafeMath.sub(b.value, a.value).to128();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function equals(\r\n        Par memory a,\r\n        Par memory b\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (a.value == b.value) {\r\n            if (a.value == 0) {\r\n                return true;\r\n            }\r\n            return a.sign == b.sign;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function negative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (Par memory)\r\n    {\r\n        return Par({\r\n            sign: !a.sign,\r\n            value: a.value\r\n        });\r\n    }\r\n\r\n    function isNegative(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return !a.sign && a.value > 0;\r\n    }\r\n\r\n    function isPositive(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.sign && a.value > 0;\r\n    }\r\n\r\n    function isZero(\r\n        Par memory a\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return a.value == 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @title StateV1\r\n * @author Kerman Kohli\r\n * @notice This contract holds all the state regarding a sythetic asset protocol.\r\n *         The contract has an owner and core address which can call certain functions.\r\n */\r\ncontract StateV1 is Ownable {\r\n\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n    using TypesV1 for TypesV1.Par;\r\n\r\n    // ============ Variables ============\r\n\r\n    address public core;\r\n\r\n    TypesV1.MarketParams public market;\r\n    TypesV1.RiskParams public risk;\r\n\r\n    IOracle public oracle;\r\n    address public collateralAsset;\r\n    address public syntheticAsset;\r\n\r\n    uint256 public positionCount;\r\n    uint256 public totalSupplied;\r\n\r\n    mapping (uint256 => TypesV1.Position) public positions;\r\n\r\n    // ============ Events ============\r\n\r\n    event MarketParamsUpdated(TypesV1.MarketParams updatedMarket);\r\n    event RiskParamsUpdated(TypesV1.RiskParams updatedParams);\r\n    event OracleUpdated(address updatedOracle);\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        address _core,\r\n        address _collateralAsset,\r\n        address _syntheticAsset,\r\n        address _oracle,\r\n        TypesV1.MarketParams memory _marketParams,\r\n        TypesV1.RiskParams memory _riskParams\r\n    )\r\n        public\r\n    {\r\n        core = _core;\r\n        collateralAsset = _collateralAsset;\r\n        syntheticAsset = _syntheticAsset;\r\n\r\n        setOracle(_oracle);\r\n        setMarketParams(_marketParams);\r\n        setRiskParams(_riskParams);\r\n    }\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyCore() {\r\n        require(\r\n            msg.sender == core,\r\n            \"StateV1: only core can call\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ============ Admin Setters ============\r\n\r\n    /**\r\n     * @dev Set the address of the oracle\r\n     *\r\n     * @param _oracle Address of the oracle to set\r\n     */\r\n    function setOracle(\r\n        address _oracle\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _oracle != address(0),\r\n            \"StateV1: cannot set 0 for oracle address\"\r\n        );\r\n\r\n        oracle = IOracle(_oracle);\r\n        emit OracleUpdated(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the parameters of the market\r\n     *\r\n     * @param _marketParams Set the new market params\r\n     */\r\n    function setMarketParams(\r\n        TypesV1.MarketParams memory _marketParams\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        market = _marketParams;\r\n        emit MarketParamsUpdated(market);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the risk parameters of the market\r\n     *\r\n     * @param _riskParams Set the risk levels of the market\r\n     */\r\n    function setRiskParams(\r\n        TypesV1.RiskParams memory _riskParams\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        risk = _riskParams;\r\n        emit RiskParamsUpdated(risk);\r\n    }\r\n\r\n    // ============ Core Setters ============\r\n\r\n    function updateTotalSupplied(\r\n        uint256 amount\r\n    )\r\n        public\r\n        onlyCore\r\n    {\r\n        totalSupplied = totalSupplied.add(amount);\r\n    }\r\n\r\n    function savePosition(\r\n        TypesV1.Position memory position\r\n    )\r\n        public\r\n        onlyCore\r\n        returns (uint256)\r\n    {\r\n        uint256 idToAllocate = positionCount;\r\n        positions[positionCount] = position;\r\n        positionCount = positionCount.add(1);\r\n\r\n        return idToAllocate;\r\n    }\r\n\r\n    function setAmount(\r\n        uint256 id,\r\n        TypesV1.AssetType asset,\r\n        TypesV1.Par memory amount\r\n    )\r\n        public\r\n        onlyCore\r\n        returns (TypesV1.Position memory)\r\n    {\r\n        TypesV1.Position storage position = positions[id];\r\n\r\n        if (position.collateralAsset == asset) {\r\n            position.collateralAmount = amount;\r\n        } else {\r\n            position.borrowedAmount = amount;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    function updatePositionAmount(\r\n        uint256 id,\r\n        TypesV1.AssetType asset,\r\n        TypesV1.Par memory amount\r\n    )\r\n        public\r\n        onlyCore\r\n        returns (TypesV1.Position memory)\r\n    {\r\n        TypesV1.Position storage position = positions[id];\r\n\r\n        if (position.collateralAsset == asset) {\r\n            position.collateralAmount = position.collateralAmount.add(amount);\r\n        } else {\r\n            position.borrowedAmount = position.borrowedAmount.add(amount);\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    // ============ Public Getters ============\r\n\r\n    function getAddress(\r\n        TypesV1.AssetType asset\r\n    )\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return asset == TypesV1.AssetType.Collateral ?\r\n            address(collateralAsset) :\r\n            address(syntheticAsset);\r\n    }\r\n\r\n    function getPosition(\r\n        uint256 id\r\n    )\r\n        public\r\n        view\r\n        returns (TypesV1.Position memory)\r\n    {\r\n        return positions[id];\r\n    }\r\n\r\n    function getCurrentPrice()\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        return oracle.fetchCurrentPrice();\r\n    }\r\n\r\n    // ============ Calculation Getters ============\r\n\r\n    function isCollateralized(\r\n        TypesV1.Position memory position\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (position.borrowedAmount.value == 0) {\r\n            return true;\r\n        }\r\n\r\n        Decimal.D256 memory currentPrice = oracle.fetchCurrentPrice();\r\n\r\n        (TypesV1.Par memory collateralDelta) = calculateCollateralDelta(\r\n            position.borrowedAsset,\r\n            position.collateralAmount,\r\n            position.borrowedAmount,\r\n            currentPrice\r\n        );\r\n\r\n        return collateralDelta.sign || collateralDelta.value == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Given an asset, calculate the inverse amount of that asset\r\n     *\r\n     * @param asset The asset in question here\r\n     * @param amount The amount of this asset\r\n     * @param price What price do you want to calculate the inverse at\r\n     */\r\n    function calculateInverseAmount(\r\n        TypesV1.AssetType asset,\r\n        uint256 amount,\r\n        Decimal.D256 memory price\r\n    )\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 borrowRequired;\r\n\r\n        if (asset == TypesV1.AssetType.Collateral) {\r\n            borrowRequired = Decimal.mul(\r\n                amount,\r\n                price\r\n            );\r\n        } else if (asset == TypesV1.AssetType.Synthetic) {\r\n            borrowRequired = Decimal.div(\r\n                amount,\r\n                price\r\n            );\r\n        }\r\n\r\n        return borrowRequired;\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to calculateInverseAmount although the difference being\r\n     *      that this factors in the collateral ratio.\r\n     *\r\n     * @param asset The asset in question here\r\n     * @param amount The amount of this asset\r\n     * @param price What price do you want to calculate the inverse at\r\n     */\r\n    function calculateInverseRequired(\r\n        TypesV1.AssetType asset,\r\n        uint256 amount,\r\n        Decimal.D256 memory price\r\n    )\r\n        public\r\n        view\r\n        returns (TypesV1.Par memory)\r\n    {\r\n\r\n        uint256 inverseRequired = calculateInverseAmount(\r\n            asset,\r\n            amount,\r\n            price\r\n        );\r\n\r\n        if (asset == TypesV1.AssetType.Collateral) {\r\n            inverseRequired = Decimal.div(\r\n                inverseRequired,\r\n                market.collateralRatio\r\n            );\r\n\r\n        } else if (asset == TypesV1.AssetType.Synthetic) {\r\n            inverseRequired = Decimal.mul(\r\n                inverseRequired,\r\n                market.collateralRatio\r\n            );\r\n        }\r\n\r\n        return TypesV1.Par({\r\n            sign: true,\r\n            value: inverseRequired.to128()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev When executing a liqudation, the price of the asset has to be calculated\r\n     *      at a discount in order for it to be profitable for the liquidator. This function\r\n     *      will get the current oracle price for the asset and find the discounted price.\r\n     *\r\n     * @param asset The asset in question here\r\n     */\r\n    function calculateLiquidationPrice(\r\n        TypesV1.AssetType asset\r\n    )\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        Decimal.D256 memory result;\r\n        Decimal.D256 memory currentPrice = oracle.fetchCurrentPrice();\r\n\r\n        uint256 totalSpread = market.liquidationUserFee.value.add(\r\n            market.liquidationArcFee.value\r\n        );\r\n\r\n        if (asset == TypesV1.AssetType.Collateral) {\r\n            result = Decimal.sub(\r\n                Decimal.one(),\r\n                totalSpread\r\n            );\r\n        } else if (asset == TypesV1.AssetType.Synthetic) {\r\n            result = Decimal.add(\r\n                Decimal.one(),\r\n                totalSpread\r\n            );\r\n        }\r\n\r\n        result = Decimal.mul(\r\n            currentPrice,\r\n            result\r\n        );\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Given an asset being borrowed, figure out how much collateral can this still borrow or\r\n     *      is in the red by. This function is used to check if a position is undercolalteralised and\r\n     *      also to calculate how much can a position be liquidated by.\r\n     *\r\n     * @param borrowedAsset The asset which is being borrowed\r\n     * @param parSupply The amount being supplied\r\n     * @param parBorrow The amount being borrowed\r\n     * @param price The price to calculate this difference by\r\n     */\r\n    function calculateCollateralDelta(\r\n        TypesV1.AssetType borrowedAsset,\r\n        TypesV1.Par memory parSupply,\r\n        TypesV1.Par memory parBorrow,\r\n        Decimal.D256 memory price\r\n    )\r\n        public\r\n        view\r\n        returns (TypesV1.Par memory)\r\n    {\r\n        TypesV1.Par memory collateralDelta;\r\n        TypesV1.Par memory collateralRequired;\r\n\r\n        if (borrowedAsset == TypesV1.AssetType.Collateral) {\r\n            collateralRequired = calculateInverseRequired(\r\n                borrowedAsset,\r\n                parBorrow.value,\r\n                price\r\n            );\r\n        } else if (borrowedAsset == TypesV1.AssetType.Synthetic) {\r\n            collateralRequired = calculateInverseRequired(\r\n                borrowedAsset,\r\n                parBorrow.value,\r\n                price\r\n            );\r\n        }\r\n\r\n        collateralDelta = parSupply.sub(collateralRequired);\r\n\r\n        return collateralDelta;\r\n    }\r\n\r\n    /**\r\n     * @dev Add the user liqudation fee with the arc liquidation fee\r\n     */\r\n    function totalLiquidationSpread()\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory)\r\n    {\r\n        return Decimal.D256({\r\n            value: market.liquidationUserFee.value.add(\r\n                market.liquidationArcFee.value\r\n            )\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the liquidation ratio between the user and ARC.\r\n     *\r\n     * @return First parameter it the user ratio, second is ARC's ratio\r\n     */\r\n    function calculateLiquidationSplit()\r\n        public\r\n        view\r\n        returns (\r\n            Decimal.D256 memory,\r\n            Decimal.D256 memory\r\n        )\r\n    {\r\n        Decimal.D256 memory total = Decimal.D256({\r\n            value: market.liquidationUserFee.value.add(\r\n                market.liquidationArcFee.value\r\n            )\r\n        });\r\n\r\n        Decimal.D256 memory userRatio = Decimal.D256({\r\n            value: Decimal.div(\r\n                market.liquidationUserFee.value,\r\n                total\r\n            )\r\n        });\r\n\r\n        return (\r\n            userRatio,\r\n            Decimal.sub(\r\n                Decimal.one(),\r\n                userRatio.value\r\n            )\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_syntheticAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"collateralRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationUserFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationArcFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.MarketParams\",\"name\":\"_marketParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syntheticLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionCollateralMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct TypesV1.RiskParams\",\"name\":\"_riskParams\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"collateralRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationUserFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationArcFee\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TypesV1.MarketParams\",\"name\":\"updatedMarket\",\"type\":\"tuple\"}],\"name\":\"MarketParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syntheticLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionCollateralMinimum\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TypesV1.RiskParams\",\"name\":\"updatedParams\",\"type\":\"tuple\"}],\"name\":\"RiskParamsUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"parSupply\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"parBorrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"calculateCollateralDelta\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"calculateInverseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"calculateInverseRequired\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"calculateLiquidationPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateLiquidationSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"isCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"collateralRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationUserFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationArcFee\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"risk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syntheticLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionCollateralMinimum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"name\":\"savePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"setAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"collateralRatio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationUserFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"liquidationArcFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.MarketParams\",\"name\":\"_marketParams\",\"type\":\"tuple\"}],\"name\":\"setMarketParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syntheticLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionCollateralMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct TypesV1.RiskParams\",\"name\":\"_riskParams\",\"type\":\"tuple\"}],\"name\":\"setRiskParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"syntheticAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLiquidationSpread\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"asset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"updatePositionAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"collateralAsset\",\"type\":\"uint8\"},{\"internalType\":\"enum TypesV1.AssetType\",\"name\":\"borrowedAsset\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"collateralAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sign\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct TypesV1.Par\",\"name\":\"borrowedAmount\",\"type\":\"tuple\"}],\"internalType\":\"struct TypesV1.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupplied\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StateV1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005568df89af6bc835b876fdc3b2d44ef63530e419000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000000e2ec54fc0b509f445631bf4b91ab8168230c752000000000000000000000000effd9768a337950cdc883682dc08583d4a3fe59600000000000000000000000000000000000000000000000030927f74c9de0000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://16d02db7db9c3bbc7204fadfbb7582a74dd5d382b5a72de0be7da9414ce59436"}]}