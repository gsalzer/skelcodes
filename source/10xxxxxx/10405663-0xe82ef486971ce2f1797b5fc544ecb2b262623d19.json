{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract PaymentSplitter {\r\n  using SafeMath for uint256;\r\n\r\n /**\r\n  * Transfers ether to multiple recipients as specified by _recepients and _splits arrays\r\n  *\r\n  * @param _recipients Array of payment recipients\r\n  * @param _splits Array of share amount to transfer to corresponding recipient. Values can be anything as long as ratio is correct â€” e.g. [5,5,5] will split the value equally. If you want to transfer specific amounts in wei, specify _splits in wei. The splits should sum up to the `msg.value` in this case. The remainder, if any, will be sent to the last recipient\r\n  */\r\n  function split(\r\n    address payable[] memory _recipients,\r\n    uint256[] memory _splits\r\n  ) public payable {\r\n    require(_recipients.length > 0, \"no data for split\");\r\n    require(_recipients.length == _splits.length, \"splits and recipients should be of the same length\");\r\n\r\n    uint256 sumShares = 0;\r\n    for (uint i = 0; i < _recipients.length; i++) {\r\n      sumShares = sumShares.add(_splits[i]);\r\n    }\r\n\r\n    for (uint i = 0; i < _recipients.length - 1; i++) {\r\n      _recipients[i].transfer(msg.value.mul(_splits[i]).div(sumShares));\r\n    }\r\n    // flush the rest, so that we don't have rounding errors or stuck funds\r\n    _recipients[_recipients.length - 1].transfer(address(this).balance);\r\n  }\r\n\r\n\r\n /**\r\n  * Transfers given token to multiple recipients as specified by _recepients and _splits arrays\r\n  *\r\n  * @dev This contract should have enough allowance of _tokenAddr from _payerAddr\r\n  * @param _recipients Array of payment recipients\r\n  * @param _splits Array of amounts for _tokenAddr ERC20 to transfer to corresponding recipient.\r\n  * @param _tokenAddr ERC20 token used for payment unit\r\n  */\r\n  function splitERC20(\r\n    address[] memory _recipients,\r\n    uint256[] memory _splits,\r\n    address _tokenAddr\r\n  ) public {\r\n    require(_recipients.length == _splits.length, \"splits and recipients should be of the same length\");\r\n    IERC20 token = IERC20(_tokenAddr);\r\n    for (uint i = 0; i < _recipients.length; i++) {\r\n      token.transferFrom(msg.sender, _recipients[i], _splits[i]);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_splits\",\"type\":\"uint256[]\"}],\"name\":\"split\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_splits\",\"type\":\"uint256[]\"},{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"splitERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PaymentSplitter","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"2","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://407ac644a953e8cc4f1626431d0455a3a7e1b9e0259b2a14949014838a8c2059"}]}