{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Factory {\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address wallet) external view returns (uint);\r\n}\r\n\r\ncontract UniswapHelper {\r\n    \r\n    IUniswapV2Factory factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    \r\n    struct Pair {\r\n        address id;\r\n        address token0;\r\n        address token1;\r\n        uint walletBalance;\r\n    }\r\n    \r\n    function getAllPairsWithBalances(address wallet) external view returns (Pair[] memory pairsWithBalances) {\r\n        uint pairsLength = factory.allPairsLength();\r\n        Pair[] memory pairs = new Pair[](pairsLength);\r\n        \r\n        uint numOfPairsWithBalances;\r\n        uint256[] memory pairsWithBalancesIndexes = new uint256[](pairsLength);\r\n        for (uint i = 0; i < pairsLength; i++) {\r\n            address pair = factory.allPairs(i);\r\n            uint pairBalance = IERC20(pair).balanceOf(wallet);\r\n            if (pairBalance == 0) {\r\n                continue;\r\n            }\r\n            \r\n            pairs[i] = Pair({\r\n                id: pair,\r\n                token0: IUniswapV2Pair(pair).token0(),\r\n                token1: IUniswapV2Pair(pair).token1(),\r\n                walletBalance: pairBalance\r\n            });\r\n            \r\n            pairsWithBalancesIndexes[numOfPairsWithBalances] = i;\r\n            numOfPairsWithBalances++;\r\n        }\r\n        \r\n        pairsWithBalances = new Pair[](numOfPairsWithBalances);\r\n        for (uint i = 0; i < numOfPairsWithBalances; i++) {\r\n            pairsWithBalances[i] = pairs[pairsWithBalancesIndexes[i]];\r\n        }\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAllPairsWithBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct UniswapHelper.Pair[]\",\"name\":\"pairsWithBalances\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapHelper","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d81830ad632c84f5aff0d3386cee2476db146ed0cc8af2b1e74309671dc22694"}]}