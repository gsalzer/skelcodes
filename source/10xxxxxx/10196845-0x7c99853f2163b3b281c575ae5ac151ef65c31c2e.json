{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n// openzeppelin-solidity@2.5.1 from NPM\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AccessList is Ownable {\r\n\r\n    string private __identifier;\r\n    mapping(address => bool) private accessList;\r\n\r\n    event WalletEnabled(address indexed wallet);\r\n    event WalletDisabled(address indexed wallet);\r\n\r\n    constructor(string memory _identifier) public {\r\n        __identifier = _identifier;\r\n    }\r\n\r\n    function enableWallet(address _wallet)\r\n        public\r\n        onlyOwner\r\n        {\r\n            require(_wallet != address(0), \"Invalid wallet\");\r\n            accessList[_wallet] = true;\r\n            emit WalletEnabled(_wallet);\r\n    }\r\n\r\n    function disableWallet(address _wallet)\r\n        public\r\n        onlyOwner\r\n        {\r\n            accessList[_wallet] = false;\r\n            emit WalletDisabled(_wallet);\r\n    }\r\n\r\n    function enableWalletList(address[] calldata _walletList)\r\n        external\r\n        onlyOwner {\r\n            for(uint i = 0; i < _walletList.length; i++) {\r\n                enableWallet(_walletList[i]);\r\n            }\r\n    }\r\n\r\n    function disableWalletList(address[] calldata _walletList)\r\n        external\r\n        onlyOwner {\r\n            for(uint i = 0; i < _walletList.length; i++) {\r\n                disableWallet(_walletList[i]);\r\n            }\r\n    }\r\n\r\n    function checkEnabled(address _wallet)\r\n        external\r\n        view\r\n        returns (bool) {\r\n            return accessList[_wallet];\r\n    }\r\n\r\n    function checkEnabled(address _wallet1, address _wallet2)\r\n        external\r\n        view\r\n        returns (bool) {\r\n            return accessList[_wallet1] && accessList[_wallet2];\r\n    }\r\n\r\n    function checkEnabled(address _wallet1, address _wallet2, address _wallet3)\r\n        external\r\n        view\r\n        returns (bool) {\r\n            return accessList[_wallet1] && accessList[_wallet2] && accessList[_wallet3];\r\n    }\r\n\r\n    function identifier()\r\n        external\r\n        view \r\n        returns (string memory) {\r\n            return __identifier;\r\n        }\r\n\r\n}\r\n\r\ncontract Authorizable is Ownable {\r\n\r\n    mapping(address => bool) public authorized;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender], \"Authorizable: Address is not authorized\");\r\n        _;\r\n    }\r\n\r\n    event AddressEnabled(address enabledAddress);\r\n    event AddressDisabled(address disabledAddress);\r\n\r\n    function enableAddress(address _address) public onlyOwner {\r\n        authorized[_address] = true;\r\n        emit AddressEnabled(_address);\r\n    }\r\n\r\n    function disableAddress(address _address) public onlyOwner {\r\n        authorized[_address] = false;\r\n        emit AddressDisabled(_address);\r\n    }\r\n\r\n    function isAuthorized(address _address) public view returns (bool) {\r\n        return authorized[_address];\r\n    }\r\n\r\n}\r\n\r\ncontract OneSignRegistry is Authorizable {\r\n\r\n    AccessList public accessList;\r\n\r\n    event AccessListSet(address accessList);\r\n    event DocumentRegistered(string issuer, string documentHash, address sender);\r\n    event DocumentRegistered(address issuer, string documentHash, address sender);\r\n\r\n    /**\r\n     * @dev Adds or updates this contract's access list\r\n     * @param _accessList the access list address\r\n     */\r\n    function setupAccessList(address _accessList)\r\n        external\r\n        onlyAuthorized {\r\n            if (_accessList == address(0)) revert(\"Invalid access list address\");\r\n            accessList = AccessList(_accessList);\r\n            emit AccessListSet(_accessList);\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a file on behalf of _issuer\r\n     * @param _issuer issuer ID\r\n     * @param _documentHash hash of the document\r\n     */\r\n    function registerFile(string calldata _issuer, string calldata _documentHash) external {\r\n        require(accessList.checkEnabled(msg.sender), \"AccessList: address not authorized\");\r\n        emit DocumentRegistered(_issuer, _documentHash, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a file for msg.sender\r\n     * @param _documentHash hash of the document\r\n     */\r\n    function registerFile(string calldata _documentHash) external {\r\n        require(accessList.checkEnabled(msg.sender), \"AccessList: address not authorized\");\r\n        emit DocumentRegistered(msg.sender, _documentHash, msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessList\",\"type\":\"address\"}],\"name\":\"AccessListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disabledAddress\",\"type\":\"address\"}],\"name\":\"AddressDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"enabledAddress\",\"type\":\"address\"}],\"name\":\"AddressEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"issuer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DocumentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DocumentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessList\",\"outputs\":[{\"internalType\":\"contract AccessList\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disableAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"enableAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_documentHash\",\"type\":\"string\"}],\"name\":\"registerFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_issuer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentHash\",\"type\":\"string\"}],\"name\":\"registerFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessList\",\"type\":\"address\"}],\"name\":\"setupAccessList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OneSignRegistry","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c5856c3602d674b44a6ac2949cdf670d2198a21685ba9b74c1f9e0c388afb0e4"}]}