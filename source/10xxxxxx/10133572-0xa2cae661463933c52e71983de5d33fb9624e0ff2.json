{"status":"1","message":"OK","result":[{"SourceCode":"//Orfeed oracle interest rate aggregator alpha contract\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20Detailed {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Compound\r\ninterface Compound {\r\n    function supply(address asset, uint amount) external returns (uint);\r\n    function withdraw(address asset, uint requestedAmount) external returns (uint);\r\n    function getSupplyBalance(address account, address asset) external view returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\n// Fulcrum\r\ninterface Fulcrum {\r\n    function borrowInterestRate() external view returns (uint256);\r\n    function supplyInterestRate() external view returns (uint256);\r\n}\r\n\r\ninterface DyDx {\r\n    struct val {\r\n        uint256 value;\r\n    }\r\n\r\n    struct set {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    function getEarningsRate() external view returns (val memory);\r\n    function getMarketInterestRate(uint256 marketId) external view returns (val memory);\r\n    function getMarketTotalPar(uint256 marketId) external view returns (set memory);\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address);\r\n}\r\n\r\ninterface LendingPoolCore  {\r\n    function getReserveCurrentLiquidityRate(address _reserve)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 liquidityRate\r\n    );\r\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256);\r\n}\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string calldata fromSymbol, string calldata  toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string calldata  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n  function arb(address  fundsReturnToAddress,  address liquidityProviderContractAddress, string[] calldata   tokens,  uint256 amount, string[] calldata  exchanges) external payable returns (bool);\r\n}\r\n\r\ncontract InterestRateOracleContract {\r\n    using SafeMath\r\n    for uint256;\r\n    \r\n    struct PlatformSide {\r\n        string platform;\r\n        bool isBorrow;\r\n    }\r\n\r\n   OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n    DyDx dYdX = DyDx(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n   // LendingPoolCore aave = LendingPoolCore(LendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8).getLendingPoolCore());\r\n   //0x3dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3\r\n   //0x5766067108e534419ce13f05899bc3e3f4344948\r\n\r\n   LendingPoolCore aave =  LendingPoolCore(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3);\r\n\r\n    uint256 constant ASCII_HYPHEN = 45;\r\n    uint256 constant ASCII_ZERO = 48;\r\n    uint256 constant ASCII_UPPERCASE_X = 88;\r\n    uint256 constant ASCII_LOWERCASE_X = 120;\r\n    uint256 constant DECIMAL = 10 ** 18;\r\n    address owner;\r\n    uint256 blocksPerYear = 2102400;\r\n    \r\n    constructor() public payable {\r\n         owner = msg.sender;\r\n    }\r\n\r\n    function getPriceFromOracle(string memory fromParam, string memory toParam, string memory venue, uint256 amount) public view returns (uint256) {\r\n        string memory tokenSymbol = fromParam;\r\n        PlatformSide memory platformSide = getPlatformSide(toParam, venue);\r\n        uint256  interestRate = getInterestRate(tokenSymbol, platformSide);\r\n\r\n        return amount.mul(interestRate).div(DECIMAL);\r\n    }\r\n/*\r\n    function getTokenSymbol(string memory input) internal returns (string memory) {\r\n        bytes memory b = bytes(input);\r\n\r\n        if (b.length < 3) {\r\n            return input;\r\n        } else if (b[0] == ASCII_ZERO && (b[1] == ASCII_UPPERCASE_X || b[1] == ASCII_LOWERCASE_X)) {\r\n            return ERC20Detailed(address(input)).symbol();\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n*/\r\n    function getPlatformSide(string memory whichPlatform, string memory doesBorrow) internal view returns (PlatformSide memory) {\r\n        bool isBorrowing;\r\n        if(equal(\"BORROW\", doesBorrow)){\r\n            isBorrowing= true;\r\n        }\r\n        else{\r\n            isBorrowing=false;\r\n        }\r\n        return PlatformSide(whichPlatform,isBorrowing);\r\n    }\r\n     \r\nfunction compare(string memory _a, string memory _b) internal view returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    \r\n    function equal(string memory _a, string memory _b) internal view returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n    \r\n    function indexOf(string memory _haystack, string memory _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0]) // found the first char of b\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n    \r\n\r\nfunction concat(string memory _base, string memory _value) public view  returns (string memory) {\r\n       return string(abi.encodePacked(_base, _value));\r\n    }\r\n\r\n\r\n    function getInterestRate(string memory symbol, PlatformSide memory platformSide) public view returns (uint256 ) {\r\n        if (equal(platformSide.platform, \"COMPOUND\")) {\r\n            string memory platformToken;\r\n           \r\n            platformToken = concat(\"C\", symbol);\r\n           \r\n\r\n            Compound  cToken = Compound(orfeed.getTokenAddress(platformToken));\r\n\r\n            if (platformSide.isBorrow) {\r\n                return cToken.borrowRatePerBlock().mul(blocksPerYear);\r\n            } else {\r\n               return cToken.supplyRatePerBlock().mul(blocksPerYear);\r\n            }\r\n        } else if (equal(platformSide.platform , 'FULCRUM')) {\r\n            string memory platformToken;\r\n           \r\n                platformToken = concat('I', symbol);\r\n           \r\n\r\n            Fulcrum  iToken = Fulcrum(orfeed.getTokenAddress(platformToken));\r\n\r\n            if (platformSide.isBorrow) {\r\n                return iToken.borrowInterestRate().div(1000);\r\n            } else {\r\n                return iToken.supplyInterestRate().div(1000);\r\n            }\r\n        } else if (equal(platformSide.platform , 'DYDX')) {\r\n            uint  marketId;\r\n            if (equal(symbol, \"ETH\")) {\r\n                marketId = 0;\r\n            } else if (equal(symbol, \"SAI\")) {\r\n                marketId = 1;\r\n            } else if (equal(symbol, \"USDC\")) {\r\n                marketId = 2;\r\n            } else if (equal(symbol, \"DAI\")) {\r\n                marketId = 3;\r\n            } else {\r\n                require(false, concat('dYdX does not have market data for ', symbol));\r\n            }\r\n\r\n            uint256 rate = dYdX.getMarketInterestRate(marketId).value;\r\n            uint256 aprBorrow = rate * 31622400;\r\n\r\n            if (platformSide.isBorrow) {\r\n                return aprBorrow;\r\n            }\r\n\r\n            uint256 borrow = dYdX.getMarketTotalPar(marketId).borrow;\r\n            uint256 supply = dYdX.getMarketTotalPar(marketId).supply;\r\n            uint256 usage = (borrow * DECIMAL) / supply;\r\n            return (((aprBorrow * usage) / DECIMAL) * dYdX.getEarningsRate().value) / DECIMAL;\r\n        } else if (equal(platformSide.platform ,'AAVE')) {\r\n            string memory platformToken;\r\n         \r\n               // platformToken = concat('A', symbol);\r\n            platformToken= symbol;\r\n\r\n            if (platformSide.isBorrow) {\r\n                return aave.getReserveCurrentVariableBorrowRate(orfeed.getTokenAddress(platformToken)).div(1e9);\r\n            }\r\n            return aave.getReserveCurrentLiquidityRate(orfeed.getTokenAddress(platformToken)).div(1e9);\r\n        } else {\r\n            require(false, 'Platform not supported');\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"concat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBorrow\",\"type\":\"bool\"}],\"internalType\":\"struct InterestRateOracleContract.PlatformSide\",\"name\":\"platformSide\",\"type\":\"tuple\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fromParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"toParam\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"venue\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InterestRateOracleContract","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eecce5689c5f14ea21f5a700fd9612333fc6f0f5fb3566bd3ce1fe9a6927db88"}]}