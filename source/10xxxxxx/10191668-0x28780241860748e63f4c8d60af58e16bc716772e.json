{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\npragma experimental ABIEncoderV2;\r\ncontract Witness {\r\n    \r\n    struct UploadEvent {\r\n        string prefHash;\r\n        string[] refHash;\r\n        string id;\r\n        string desc;\r\n        string data;\r\n    }\r\n    \r\n    UploadEvent[] public uploads;\r\n    \r\n    struct WitnessEvent {\r\n        string hash;\r\n        string pkHash;\r\n        string sig;\r\n    }\r\n    \r\n    WitnessEvent[] public witnesses;\r\n    \r\n    event onUpload(string prefHash, string[] refHash, string id, string desc, string data);\r\n    event onWitness(string hash, string pkHash, string sig);\r\n   \r\n    function upload(string memory prefHash, string[] memory refHash, string memory id, string memory desc, string memory data) public {\r\n        require(bytes(prefHash).length > 0);\r\n        require(bytes(id).length > 0);\r\n        require(bytes(desc).length > 0);\r\n        require(bytes(data).length > 0);\r\n        \r\n        uploads.push(UploadEvent(prefHash, refHash, id, desc, data));\r\n        \r\n        emit onUpload(prefHash, refHash, id, desc, data);\r\n    }\r\n    \r\n    function witness(string memory hash, string memory pkHash, string memory sig) public {\r\n        require(bytes(hash).length > 0);\r\n        require(bytes(pkHash).length > 0);\r\n        require(bytes(sig).length > 0);\r\n        \r\n        witnesses.push(WitnessEvent(hash, pkHash, sig));\r\n        \r\n        emit onWitness(hash, pkHash, sig);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"prefHash\",\"type\":\"string\"},{\"name\":\"refHash\",\"type\":\"string[]\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"witnesses\",\"outputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"pkHash\",\"type\":\"string\"},{\"name\":\"sig\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"pkHash\",\"type\":\"string\"},{\"name\":\"sig\",\"type\":\"string\"}],\"name\":\"witness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uploads\",\"outputs\":[{\"name\":\"prefHash\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prefHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"refHash\",\"type\":\"string[]\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"onUpload\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sig\",\"type\":\"string\"}],\"name\":\"onWitness\",\"type\":\"event\"}]","ContractName":"Witness","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b22f120885e230bb5b1b860a6400d53cb394efb54def3105fd67eda33584f6df"}]}