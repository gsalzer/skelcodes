{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n  * @title INexus\r\n  * @dev Basic interface for interacting with the Nexus i.e. SystemKernel\r\n  */\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\n/**\r\n * @title   Governable\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  Simple contract implementing an Ownable pattern.\r\n * @dev     Derives from OpenZeppelin 2.3.0 Ownable.sol\r\n *          Modified to have custom name and features\r\n */\r\ncontract Governable {\r\n\r\n    event GovernorChanged(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    address private _governor;\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial Governor.\r\n     */\r\n    constructor () internal {\r\n        _governor = msg.sender;\r\n        emit GovernorChanged(address(0), _governor);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current Governor.\r\n     */\r\n    function governor() public view returns (address) {\r\n        return _governor;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(isGovernor(), \"GOV: caller is not the Governor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current Governor.\r\n     */\r\n    function isGovernor() public view returns (bool) {\r\n        return msg.sender == _governor;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\r\n     * Can only be called by the current Governor.\r\n     * @param _newGovernor Address of the new Governor\r\n     */\r\n    function changeGovernor(address _newGovernor) external onlyGovernor {\r\n        _changeGovernor(_newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\r\n     * @param _newGovernor Address of the new Governor\r\n     */\r\n    function _changeGovernor(address _newGovernor) internal {\r\n        require(_newGovernor != address(0), \"GOV: new Governor is address(0)\");\r\n        emit GovernorChanged(_governor, _newGovernor);\r\n        _governor = _newGovernor;\r\n    }\r\n}\r\n\r\n/**\r\n * @title   ClaimableGovernor\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  2 way handshake for Governance transfer\r\n */\r\ncontract ClaimableGovernor is Governable {\r\n\r\n    event GovernorChangeClaimed(address indexed proposedGovernor);\r\n    event GovernorChangeCancelled(address indexed governor, address indexed proposed);\r\n    event GovernorChangeRequested(address indexed governor, address indexed proposed);\r\n\r\n    address public proposedGovernor = address(0);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Proposed Governor.\r\n     */\r\n    modifier onlyProposedGovernor() {\r\n        require(msg.sender == proposedGovernor, \"Sender is not proposed governor\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _governorAddr) public {\r\n        _changeGovernor(_governorAddr);\r\n    }\r\n\r\n    //@override\r\n    function changeGovernor(address) external onlyGovernor {\r\n        revert(\"Direct change not allowed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Current Governor request to proposes a new Governor\r\n     * @param _proposedGovernor Address of the proposed Governor\r\n     */\r\n    function requestGovernorChange(address _proposedGovernor) public onlyGovernor {\r\n        require(_proposedGovernor != address(0), \"Proposed governor is address(0)\");\r\n        require(proposedGovernor == address(0), \"Proposed governor already set\");\r\n\r\n        proposedGovernor = _proposedGovernor;\r\n        emit GovernorChangeRequested(governor(), _proposedGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Current Governor cancel Governor change request\r\n     */\r\n    function cancelGovernorChange() public onlyGovernor {\r\n        require(proposedGovernor != address(0), \"Proposed Governor not set\");\r\n\r\n        emit GovernorChangeCancelled(governor(), proposedGovernor);\r\n        proposedGovernor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Proposed Governor can claim governance ownership\r\n     */\r\n    function claimGovernorChange() public onlyProposedGovernor {\r\n        _changeGovernor(proposedGovernor);\r\n        emit GovernorChangeClaimed(proposedGovernor);\r\n        proposedGovernor = address(0);\r\n    }\r\n}\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title   DelayedClaimableGovernor\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  Current Governor can initiate governance change request.\r\n *          After a defined delay, proposed Governor can claim governance\r\n *          ownership.\r\n */\r\ncontract DelayedClaimableGovernor is ClaimableGovernor {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public delay = 0;\r\n    uint256 public requestTime = 0;\r\n\r\n    /**\r\n     * @dev Initializes the contract with given delay\r\n     * @param _governorAddr Initial governor\r\n     * @param _delay    Delay in seconds for 2 way handshake\r\n     */\r\n    constructor(address _governorAddr, uint256 _delay)\r\n        public\r\n        ClaimableGovernor(_governorAddr)\r\n    {\r\n        require(_delay > 0, \"Delay must be greater than zero\");\r\n        delay = _delay;\r\n    }\r\n\r\n    //@override\r\n    /**\r\n     * @dev Requests change of governor and logs request time\r\n     * @param _proposedGovernor Address of the new governor\r\n     */\r\n    function requestGovernorChange(address _proposedGovernor) public onlyGovernor {\r\n        requestTime = now;\r\n        super.requestGovernorChange(_proposedGovernor);\r\n    }\r\n\r\n    //@override\r\n    /**\r\n     * @dev Cancels an outstanding governor change request by resetting request time\r\n     */\r\n    function cancelGovernorChange() public onlyGovernor {\r\n        requestTime = 0;\r\n        super.cancelGovernorChange();\r\n    }\r\n\r\n    //@override\r\n    /**\r\n     * @dev Proposed governor claims new position, callable after time elapsed\r\n     */\r\n    function claimGovernorChange() public onlyProposedGovernor {\r\n        require(now >= (requestTime.add(delay)), \"Delay not over\");\r\n        super.claimGovernorChange();\r\n        requestTime = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title   Nexus\r\n * @author  Stability Labs Pty. Ltd.\r\n * @notice  This is the system address kernel, it also facilitates the changing of governor\r\n * @dev     The Nexus is mStable's Kernel, and allows the publishing and propagating\r\n *          of new system Modules. Other Modules will read from the Nexus\r\n */\r\ncontract Nexus is INexus, DelayedClaimableGovernor {\r\n\r\n    event ModuleProposed(bytes32 indexed key, address addr, uint256 timestamp);\r\n    event ModuleAdded(bytes32 indexed key, address addr, bool isLocked);\r\n    event ModuleCancelled(bytes32 indexed key);\r\n    event ModuleLockRequested(bytes32 indexed key, uint256 timestamp);\r\n    event ModuleLockEnabled(bytes32 indexed key);\r\n    event ModuleLockCancelled(bytes32 indexed key);\r\n\r\n    /** @dev Struct to store information about current modules */\r\n    struct Module {\r\n        address addr;       // Module address\r\n        bool isLocked;      // Module lock status\r\n    }\r\n\r\n    /** @dev Struct to store information about proposed modules */\r\n    struct Proposal {\r\n        address newAddress; // Proposed Module address\r\n        uint256 timestamp;  // Timestamp when module upgrade was proposed\r\n    }\r\n\r\n    // 1 week delayed upgrade period\r\n    uint256 public constant UPGRADE_DELAY = 1 weeks;\r\n\r\n    // Module-key => Module\r\n    mapping(bytes32 => Module) public modules;\r\n    // Module-address => Module-key\r\n    mapping(address => bytes32) private addressToModule;\r\n    // Module-key => Proposal\r\n    mapping(bytes32 => Proposal) public proposedModules;\r\n    // Module-key => Timestamp when lock was proposed\r\n    mapping(bytes32 => uint256) public proposedLockModules;\r\n\r\n    // Init flag to allow add modules at the time of deplyment without delay\r\n    bool public initialized = false;\r\n\r\n    /**\r\n     * @dev Modifier allows functions calls only when contract is not initialized.\r\n     */\r\n    modifier whenNotInitialized() {\r\n        require(!initialized, \"Nexus is already initialized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialises the Nexus and adds the core data to the Kernel (itself and governor)\r\n     * @param _governorAddr Governor address\r\n     */\r\n    constructor(address _governorAddr)\r\n        public\r\n        DelayedClaimableGovernor(_governorAddr, UPGRADE_DELAY)\r\n    {}\r\n\r\n    /**\r\n     * @dev Adds multiple new modules to the system to initialize the\r\n     *      Nexus contract with default modules. This should be called first\r\n     *      after deploying Nexus contract.\r\n     * @param _keys         Keys of the new modules in bytes32 form\r\n     * @param _addresses    Contract addresses of the new modules\r\n     * @param _isLocked     IsLocked flag for the new modules\r\n     * @param _governorAddr New Governor address\r\n     * @return bool         Success of publishing new Modules\r\n     */\r\n    function initialize(\r\n        bytes32[] calldata _keys,\r\n        address[] calldata _addresses,\r\n        bool[] calldata _isLocked,\r\n        address _governorAddr\r\n    )\r\n        external\r\n        onlyGovernor\r\n        whenNotInitialized\r\n        returns (bool)\r\n    {\r\n        uint256 len = _keys.length;\r\n        require(len > 0, \"No keys provided\");\r\n        require(len == _addresses.length, \"Insufficient address data\");\r\n        require(len == _isLocked.length, \"Insufficient locked statuses\");\r\n\r\n        for(uint256 i = 0 ; i < len; i++) {\r\n            _publishModule(_keys[i], _addresses[i], _isLocked[i]);\r\n        }\r\n\r\n        if(_governorAddr != governor()) _changeGovernor(_governorAddr);\r\n\r\n        initialized = true;\r\n        return true;\r\n    }\r\n\r\n    /***************************************\r\n                MODULE ADDING\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Propose a new or update existing module\r\n     * @param _key  Key of the module\r\n     * @param _addr Address of the module\r\n     */\r\n    function proposeModule(bytes32 _key, address _addr)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(_key != bytes32(0x0), \"Key must not be zero\");\r\n        require(_addr != address(0), \"Module address must not be 0\");\r\n        require(!modules[_key].isLocked, \"Module must be unlocked\");\r\n        require(modules[_key].addr != _addr, \"Module already has same address\");\r\n        Proposal storage p = proposedModules[_key];\r\n        require(p.timestamp == 0, \"Module already proposed\");\r\n\r\n        p.newAddress = _addr;\r\n        p.timestamp = now;\r\n        emit ModuleProposed(_key, _addr, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a proposed module request\r\n     * @param _key Key of the module\r\n     */\r\n    function cancelProposedModule(bytes32 _key)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        uint256 timestamp = proposedModules[_key].timestamp;\r\n        require(timestamp > 0, \"Proposed module not found\");\r\n\r\n        delete proposedModules[_key];\r\n        emit ModuleCancelled(_key);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept and publish an already proposed module\r\n     * @param _key Key of the module\r\n     */\r\n    function acceptProposedModule(bytes32 _key)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        _acceptProposedModule(_key);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept and publish already proposed modules\r\n     * @param _keys Keys array of the modules\r\n     */\r\n    function acceptProposedModules(bytes32[] calldata _keys)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        uint256 len = _keys.length;\r\n        require(len > 0, \"Keys array empty\");\r\n\r\n        for(uint256 i = 0 ; i < len; i++) {\r\n            _acceptProposedModule(_keys[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a proposed module\r\n     * @param _key Key of the module\r\n     */\r\n    function _acceptProposedModule(bytes32 _key) internal {\r\n        Proposal memory p = proposedModules[_key];\r\n        require(_isDelayOver(p.timestamp), \"Module upgrade delay not over\");\r\n\r\n        delete proposedModules[_key];\r\n        _publishModule(_key, p.newAddress, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal func to publish a module to kernel\r\n     * @param _key      Key of the new module in bytes32 form\r\n     * @param _addr     Contract address of the new module\r\n     * @param _isLocked Flag to lock a module\r\n     */\r\n    function _publishModule(bytes32 _key, address _addr, bool _isLocked) internal {\r\n        require(addressToModule[_addr] == bytes32(0x0), \"Modules must have unique addr\");\r\n        require(!modules[_key].isLocked, \"Module must be unlocked\");\r\n        // Old no longer points to a moduleAddress\r\n        address oldModuleAddr = modules[_key].addr;\r\n        if(oldModuleAddr != address(0x0)) {\r\n            addressToModule[oldModuleAddr] = bytes32(0x0);\r\n        }\r\n        modules[_key].addr = _addr;\r\n        modules[_key].isLocked = _isLocked;\r\n        addressToModule[_addr] = _key;\r\n        emit ModuleAdded(_key, _addr, _isLocked);\r\n    }\r\n\r\n    /***************************************\r\n                MODULE LOCKING\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Request to lock an existing module\r\n     * @param _key Key of the module\r\n     */\r\n    function requestLockModule(bytes32 _key)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(moduleExists(_key), \"Module must exist\");\r\n        require(!modules[_key].isLocked, \"Module must be unlocked\");\r\n        require(proposedLockModules[_key] == 0, \"Lock already proposed\");\r\n\r\n        proposedLockModules[_key] = now;\r\n        emit ModuleLockRequested(_key, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a lock module request\r\n     * @param _key Key of the module\r\n     */\r\n    function cancelLockModule(bytes32 _key)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(proposedLockModules[_key] > 0, \"Module lock request not found\");\r\n\r\n        delete proposedLockModules[_key];\r\n        emit ModuleLockCancelled(_key);\r\n    }\r\n\r\n    /**\r\n     * @dev Permanently lock a module to its current settings\r\n     * @param _key Bytes32 key of the module\r\n     */\r\n    function lockModule(bytes32 _key)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        require(_isDelayOver(proposedLockModules[_key]), \"Delay not over\");\r\n\r\n        modules[_key].isLocked = true;\r\n        delete proposedLockModules[_key];\r\n        emit ModuleLockEnabled(_key);\r\n    }\r\n\r\n    /***************************************\r\n                HELPERS & GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Checks if a module exists\r\n     * @param _key  Key of the module\r\n     * @return      Returns 'true' when a module exists, otherwise 'false'\r\n     */\r\n    function moduleExists(bytes32 _key) public view returns (bool) {\r\n        if(_key != 0 && modules[_key].addr != address(0))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the module address\r\n     * @param _key  Key of the module\r\n     * @return      Return the address of the module\r\n     */\r\n    function getModule(bytes32 _key) external view returns (address addr) {\r\n        addr = modules[_key].addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if upgrade delay over\r\n     * @param _timestamp    Timestamp to check\r\n     * @return              Return 'true' when delay is over, otherwise 'false'\r\n     */\r\n    function _isDelayOver(uint256 _timestamp) private view returns (bool) {\r\n        if(_timestamp > 0 && now >= _timestamp.add(UPGRADE_DELAY))\r\n            return true;\r\n        return false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governorAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"GovernorChangeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"GovernorChangeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"GovernorChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ModuleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ModuleLockCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ModuleLockEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ModuleLockRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ModuleProposed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPGRADE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"acceptProposedModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"acceptProposedModules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelGovernorChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"cancelLockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"cancelProposedModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernorChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isLocked\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"_governorAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"lockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"moduleExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"proposeModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposedLockModules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposedModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"requestGovernorChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"requestLockModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Nexus","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000019f12c947d25ff8a3b748829d8001ca09a28d46d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7086f7e9d76bb328fe79dc25bc590a966d779a27870e3eec7f942a4930b7f358"}]}