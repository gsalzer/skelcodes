{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath{\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n        return 0;}\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract SOLEDAO {\r\n    function getAddresses() public view returns(address  [] memory) { }\r\n    function balanceOf(address _owner) public view returns (uint256 balance) { }\r\n}\r\n\r\ncontract SOLE {\r\n    function transfer(address _to, uint256 _value) public returns (bool) { }\r\n    function balanceOf(address _owner) public view returns (uint256 balance) { }\r\n}\r\n\r\ncontract AIRDROPSOLE {\r\n    using SafeMath for uint256;\r\n    \r\n    SOLEDAO smb;\r\n    SOLE sl;\r\n    uint256 zero = 0;\r\n    address _owner;\r\n    address[] public userAddresses;\r\n\r\n\r\n    event soleAirDrop(address indexed to, uint value);\r\n    event test(uint256 date, uint256 balance);\r\n    \r\n    constructor(address solemb, address sole) public {\r\n        smb = SOLEDAO(solemb);\r\n        sl = SOLE(sole);\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function airDrop(uint256 dropAmount)internal returns(bool) {\r\n        require( msg.sender == _owner );\r\n        uint256 contractBalance = sl.balanceOf(address(this));\r\n        require(contractBalance >= dropAmount);\r\n        \r\n        userAddresses = smb.getAddresses();\r\n        uint256 value;\r\n        uint256 solembBalance;\r\n\r\n        uint arrayLength = userAddresses.length;\r\n        \r\n        for (uint i=0; i< arrayLength; i++) {\r\n            solembBalance = smb.balanceOf(userAddresses[i]);\r\n            \r\n            if ( solembBalance > zero){\r\n                \r\n                value = (dropAmount.mul(solembBalance)).div(200) ;\r\n            \r\n                sl.transfer( userAddresses[i] ,value);\r\n                \r\n                emit soleAirDrop(userAddresses[i], value);\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // 31 oct = 1604102400 \r\n    function Drop()public {\r\n        require( msg.sender == _owner );\r\n        \r\n        uint256 contractBalance = sl.balanceOf(address(this));\r\n        uint256 unfreezeDate = 1604102400;\r\n        uint256 dropAmount = 0;\r\n        uint256 freezeAmount = 250000000000000;\r\n        uint256 today = now;\r\n        \r\n        emit test(today, contractBalance.sub(freezeAmount));\r\n        \r\n        if (today < unfreezeDate) {\r\n            dropAmount = contractBalance.sub(freezeAmount);\r\n            \r\n            if (dropAmount > 0 ){\r\n                airDrop(dropAmount);\r\n                \r\n            }\r\n            \r\n        }else{\r\n            airDrop(contractBalance);\r\n        }\r\n        \r\n    }\r\n    \r\n    function transferownership(address _newaddress) public returns(bool){\r\n        require(msg.sender== _owner);\r\n        _owner=_newaddress;\r\n        return true;\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"solemb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sole\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"soleAirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"test\",\"type\":\"event\"}]","ContractName":"AIRDROPSOLE","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008f408daade6df0f4f960fd30f5dc7d03328e0282000000000000000000000000c2424317aafb6a9ee12892a7097432627537eb2e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://04d6a5deb6ab24efaa05ae6fc5e26b3e88bb603b127918e2b84b139370391e09"}]}