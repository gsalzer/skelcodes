{"status":"1","message":"OK","result":[{"SourceCode":"/// flop.sol -- Debt auction\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.12;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize()                       // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller(),                            // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ninterface VatLike {\r\n    function move(address,address,uint) external;\r\n    function suck(address,address,uint) external;\r\n}\r\ninterface GemLike {\r\n    function mint(address,uint) external;\r\n}\r\ninterface VowLike {\r\n    function Ash() external returns (uint);\r\n    function kiss(uint) external;\r\n}\r\n\r\n/*\r\n   This thing creates gems on demand in return for dai.\r\n\r\n - `lot` gems in return for bid\r\n - `bid` dai paid\r\n - `gal` receives dai income\r\n - `ttl` single bid lifetime\r\n - `beg` minimum bid increase\r\n - `end` max auction duration\r\n*/\r\n\r\ncontract Flopper is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Flopper/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Bid {\r\n        uint256 bid;  // dai paid                [rad]\r\n        uint256 lot;  // gems in return for bid  [wad]\r\n        address guy;  // high bidder\r\n        uint48  tic;  // bid expiry time         [unix epoch time]\r\n        uint48  end;  // auction expiry time     [unix epoch time]\r\n    }\r\n\r\n    mapping (uint => Bid) public bids;\r\n\r\n    VatLike  public   vat;  // CDP Engine\r\n    GemLike  public   gem;\r\n\r\n    uint256  constant ONE = 1.00E18;\r\n    uint256  public   beg = 1.05E18;  // 5% minimum bid increase\r\n    uint256  public   pad = 1.50E18;  // 50% lot increase for tick\r\n    uint48   public   ttl = 3 hours;  // 3 hours bid lifetime         [seconds]\r\n    uint48   public   tau = 2 days;   // 2 days total auction length  [seconds]\r\n    uint256  public kicks = 0;\r\n    uint256  public live;             // Active Flag\r\n    address  public vow;              // not used until shutdown\r\n\r\n    // --- Events ---\r\n    event Kick(\r\n      uint256 id,\r\n      uint256 lot,\r\n      uint256 bid,\r\n      address indexed gal\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor(address vat_, address gem_) public {\r\n        wards[msg.sender] = 1;\r\n        vat = VatLike(vat_);\r\n        gem = GemLike(gem_);\r\n        live = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint48 x, uint48 y) internal pure returns (uint48 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        if (x > y) { z = y; } else { z = x; }\r\n    }\r\n\r\n    // --- Admin ---\r\n    function file(bytes32 what, uint data) external note auth {\r\n        if (what == \"beg\") beg = data;\r\n        else if (what == \"pad\") pad = data;\r\n        else if (what == \"ttl\") ttl = uint48(data);\r\n        else if (what == \"tau\") tau = uint48(data);\r\n        else revert(\"Flopper/file-unrecognized-param\");\r\n    }\r\n\r\n    // --- Auction ---\r\n    function kick(address gal, uint lot, uint bid) external auth returns (uint id) {\r\n        require(live == 1, \"Flopper/not-live\");\r\n        require(kicks < uint(-1), \"Flopper/overflow\");\r\n        id = ++kicks;\r\n\r\n        bids[id].bid = bid;\r\n        bids[id].lot = lot;\r\n        bids[id].guy = gal;\r\n        bids[id].end = add(uint48(now), tau);\r\n\r\n        emit Kick(id, lot, bid, gal);\r\n    }\r\n    function tick(uint id) external note {\r\n        require(bids[id].end < now, \"Flopper/not-finished\");\r\n        require(bids[id].tic == 0, \"Flopper/bid-already-placed\");\r\n        bids[id].lot = mul(pad, bids[id].lot) / ONE;\r\n        bids[id].end = add(uint48(now), tau);\r\n    }\r\n    function dent(uint id, uint lot, uint bid) external note {\r\n        require(live == 1, \"Flopper/not-live\");\r\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\r\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\r\n        require(bids[id].end > now, \"Flopper/already-finished-end\");\r\n\r\n        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\r\n        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\r\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\r\n\r\n        if (msg.sender != bids[id].guy) {\r\n            vat.move(msg.sender, bids[id].guy, bid);\r\n\r\n            // on first dent, clear as much Ash as possible\r\n            if (bids[id].tic == 0) {\r\n                uint Ash = VowLike(bids[id].guy).Ash();\r\n                VowLike(bids[id].guy).kiss(min(bid, Ash));\r\n            }\r\n\r\n            bids[id].guy = msg.sender;\r\n        }\r\n\r\n        bids[id].lot = lot;\r\n        bids[id].tic = add(uint48(now), ttl);\r\n    }\r\n    function deal(uint id) external note {\r\n        require(live == 1, \"Flopper/not-live\");\r\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\r\n        gem.mint(bids[id].guy, bids[id].lot);\r\n        delete bids[id];\r\n    }\r\n\r\n    // --- Shutdown ---\r\n    function cage() external note auth {\r\n       live = 0;\r\n       vow = msg.sender;\r\n    }\r\n    function yank(uint id) external note {\r\n        require(live == 0, \"Flopper/still-live\");\r\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\r\n        vat.suck(vow, bids[id].guy, bids[id].bid);\r\n        delete bids[id];\r\n    }\r\n}\r\n\r\n\r\ncontract FlopFab {\r\n    function newFlop(address vat, address gov) public returns (Flopper flop) {\r\n        flop = new Flopper(vat, gov);\r\n        flop.rely(msg.sender);\r\n        flop.deny(address(this));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"newFlop\",\"outputs\":[{\"internalType\":\"contract Flopper\",\"name\":\"flop\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlopFab","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://84bb3414362b03ce9689d409de7bf0a4c9edab6db1f04d96dee591ade62a00b8"}]}