{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\n/// @title ICONOMI Daa token\r\ncontract DaaToken {\r\n  //\r\n  // events\r\n  //\r\n  // ERC20 events\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  // mint/burn events\r\n  event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n  event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n  // admin events\r\n  event BlockLockSet(uint256 _value);\r\n  event NewOwner(address _newOwner);\r\n  event NewMinter(address _minter);\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier minterOrOwner {\r\n    if (msg.sender == minter || msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier blockLock(address _sender) {\r\n    if (!isLocked() || _sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier validTransfer(address _from, address _to, uint256 _amount) {\r\n    if (isTransferValid(_from, _to, _amount)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  uint256 public totalSupply;\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  string public version = '0.0.1';\r\n  address public owner;\r\n  address public minter;\r\n  uint256 public lockedUntilBlock;\r\n\r\n  constructor(\r\n      string memory _tokenName,\r\n      uint8 _decimalUnits,\r\n      string memory _tokenSymbol,\r\n      address _owner,\r\n      address _minter,\r\n      uint256  _lockedUntilBlock\r\n  ) public {\r\n\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    owner = _owner;\r\n    minter = _minter;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value)\r\n      public\r\n      blockLock(msg.sender)\r\n      validTransfer(msg.sender, _to, _value)\r\n      returns (bool success)\r\n  {\r\n\r\n    // transfer tokens\r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value)\r\n      public\r\n      returns (bool success)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n      public\r\n      blockLock(_from)\r\n      validTransfer(_from, _to, _value)\r\n      returns (bool success)\r\n  {\r\n\r\n    // check sufficient allowance\r\n    if (_value > allowed[_from][msg.sender]) {\r\n      return false;\r\n    }\r\n\r\n    // transfer tokens\r\n    balances[_from] -= _value;\r\n    balances[_to] += _value;\r\n    allowed[_from][msg.sender] -= _value;\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes calldata _extraData)\r\n      public\r\n      returns (bool success)\r\n  {\r\n    if (approve(_spender, _value)) {\r\n      tokenRecipient(_spender).receiveApproval(msg.sender, _value, address(this), _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /// @notice Mint new tokens. Can only be called by minter or owner\r\n  function mint(address _to, uint256 _value)\r\n      public\r\n      minterOrOwner\r\n      blockLock(msg.sender)\r\n      returns (bool success)\r\n  {\r\n    // ensure _value is greater than zero and\r\n    // doesn't overflow\r\n    if (totalSupply + _value <= totalSupply) {\r\n      return false;\r\n    }\r\n\r\n    balances[_to] += _value;\r\n    totalSupply += _value;\r\n\r\n    emit Mint(_to, _value, totalSupply);\r\n    emit Transfer(address(0x0), _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Burn tokens. Can be called by any account\r\n  function burn(uint256 _value)\r\n      public\r\n      blockLock(msg.sender)\r\n      returns (bool success)\r\n  {\r\n    if (_value == 0 || _value > balances[msg.sender]) {\r\n      return false;\r\n    }\r\n\r\n    balances[msg.sender] -= _value;\r\n    totalSupply -= _value;\r\n\r\n    Burn(msg.sender, _value, totalSupply);\r\n    emit Transfer(msg.sender, address(0x0), _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Set block lock. Until that block (exclusive) transfers are disallowed\r\n  function setBlockLock(uint256 _lockedUntilBlock)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Replace current owner with new one\r\n  function replaceOwner(address _newOwner)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Set account that can mint new tokens\r\n  function setMinter(address _newMinter)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    minter = _newMinter;\r\n    NewMinter(_newMinter);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner)\r\n      public\r\n      view\r\n      returns (uint256 balance)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)\r\n      public\r\n      view\r\n      returns (uint256 remaining)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /// @notice Are transfers currently disallowed\r\n  function isLocked()\r\n      public\r\n      view\r\n      returns (bool success)\r\n  {\r\n    return lockedUntilBlock > block.number;\r\n  }\r\n\r\n  /// @dev Checks if transfer parameters are valid\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n      private\r\n      view\r\n      returns (bool isValid)\r\n  {\r\n    return  balances[_from] >= _amount &&  // sufficient balance\r\n            _amount > 0 &&                 // amount is positive\r\n            _to != address(this) &&        // prevent sending tokens to contract\r\n            _to != address(0x0)            // prevent sending token to 0x0 address\r\n    ;\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BlockLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setBlockLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DaaToken","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000012000000000000000000000000029d38fdf26d64fa799276e6615759d27db1f1fcd00000000000000000000000006e3ccaf50dae224cc8b7b120ec855e97c0bb42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023323130306e65777320457468657265756d20546f6b656e7320496e6465782046756e64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054e57534554000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f1ef76d90a0613671ac682cd349c08f428a8b33d96f2a2f75e99d7789f988d7"}]}