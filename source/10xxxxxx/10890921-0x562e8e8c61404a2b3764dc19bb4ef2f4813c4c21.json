{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\n\r\n/**\r\n * @title Dexter Capital\r\n * @notice Contract Publish Doc Hashes\r\n * @author Mayank Saxena\r\n */\r\ncontract Dexter {\r\n    \r\n    // Owner's name\r\n    string public name ;\r\n\r\n    // Algorithm used to Hash Docs\r\n     string public hashingAlgo;\r\n    \r\n    // address of Deployer - publisher of Document_Hashes\r\n    address public owner;\r\n    \r\n    // mapping of all Document_Hashes\r\n    mapping (bytes32 => bool) public docsCheck;\r\n    \r\n    // kycId -> Document_Hash Array\r\n    mapping (string => bytes32[]) private kycIdDocMap;\r\n    \r\n    // Document_Hash -> kycId\r\n    mapping (bytes32 => string) private docKycIdMap;\r\n\r\n    /**\r\n     *  @notice Constructor to initialize owner\r\n     *  @dev Deployer is Owner\r\n     *  @param _name: Name of the Contract Owner\r\n     */\r\n    constructor ( string memory _name, string memory _hashingAlgo) public {\r\n        owner = msg.sender;\r\n        name = _name;\r\n        hashingAlgo = _hashingAlgo;\r\n    }\r\n    \r\n    /**\r\n     * @dev modifier to check if the signer is owner\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Signer Not Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice publish doc hashes against KycId\r\n     *  @param _kycId: key for hashes\r\n     *  @param _hash: Array of Hashes\r\n     *  @param _ops: type of Operation - append/replace\r\n     */\r\n    function docOps(string memory _kycId, bytes32[] memory _hash, uint8 _ops) public onlyOwner {\r\n        require(_ops == 1 || _ops == 2, \"Invalid Ops requested\");\r\n        if( _ops == 1){\r\n            // append hashes\r\n            addDocs(_kycId, _hash);\r\n        } else if( _ops == 2){\r\n            // replace hashes\r\n            deleteHashes(_kycId);\r\n            addDocs(_kycId, _hash);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *  @notice To append docs against a KycId - Internal Function\r\n     *  @param  _kycId: key against which docs are added\r\n     *  @param  _hash: Array of Hashes\r\n     */\r\n    function addDocs(string memory _kycId, bytes32[] memory _hash) internal{\r\n        for(uint256 i = 0; i < _hash.length; i++){\r\n            require(docsCheck[_hash[i]] == false, \"Previously Published Hash Detected\");\r\n            docsCheck[_hash[i]] = true;\r\n            docKycIdMap[_hash[i]] = _kycId;\r\n            kycIdDocMap[_kycId].push(_hash[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice To delete existing hashes against a _KycId\r\n     * @param _kycId: key against which hashes are stored\r\n     */\r\n    function deleteHashes(string memory _kycId) internal {\r\n        for(uint256 i = 0; i < kycIdDocMap[_kycId].length; i++){\r\n            bytes32 docHash = kycIdDocMap[_kycId][i];\r\n            docsCheck[docHash] = false;\r\n        }\r\n        delete kycIdDocMap[_kycId];\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Key(KycId) against which Hash is stored\r\n     * @param _hash: doc hash\r\n     */\r\n    function getKycId(bytes32 _hash) public view returns(string memory){\r\n        string memory kycId = docKycIdMap[_hash];\r\n        return kycId;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Hashes against _kycId\r\n     * @param _kycId: key against which hashes are stored\r\n     */\r\n    function getDocHashes(string memory _kycId) public view returns(bytes32[] memory){\r\n        return kycIdDocMap[_kycId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get count of hashes against a KycId\r\n     * @param _kycId: key against which hashes are stored\r\n     */\r\n    function getDocCountAgainstKycId(string memory _kycId) public view returns(uint256){\r\n        return kycIdDocMap[_kycId].length;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hashingAlgo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_kycId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"_ops\",\"type\":\"uint8\"}],\"name\":\"docOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"docsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_kycId\",\"type\":\"string\"}],\"name\":\"getDocCountAgainstKycId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_kycId\",\"type\":\"string\"}],\"name\":\"getDocHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getKycId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashingAlgo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Dexter","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e446578746572204361706974616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065348413235360000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c9c611959d7c8579f1172694a228f4a30564e68c3d7226088769cc5169d84d22"}]}