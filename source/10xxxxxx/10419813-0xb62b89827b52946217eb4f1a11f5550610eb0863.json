{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\ncontract ERC20Interface{\r\n        //using SafeMath for uint256;\r\n        \r\n        function transfer(address _address, uint _value) public returns (bool success){}\r\n        function balanceOf(address _address)view public returns(uint);\r\n        function transferFrom(address _from, address _receiver, uint _value) public returns (bool success){}\r\n        function allowance(address owner, address spender) public view returns (uint256) {}\r\n      \r\n}\r\n\r\ncontract Reward{\r\n    \r\n    address owner; \r\n    uint public _tokenDecimal = 18;\r\n    ERC20Interface public token;\r\n    uint holderbalance;\r\n    uint amount;\r\n    uint  real1 = 5;\r\n    uint  p1 = 1; //for first set of people;\r\n    uint  p2 = 10000; //for second set of people;\r\n    \r\n   \r\n   uint peal1 = p1*10**_tokenDecimal;\r\n   uint  peal2 = p2*10**_tokenDecimal;\r\n\r\n   bool public open = true;\r\n   \r\n   \r\n    \r\n    mapping (address => uint) _holdersID;\r\n    address [] _whitelist;\r\n    address rewardpool;\r\n    \r\n    \r\n    constructor(ERC20Interface _token, address _rewardpool) public{\r\n        token = _token;\r\n        owner = msg.sender;\r\n        rewardpool = _rewardpool;\r\n         _whitelist.push(msg.sender);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    \r\n    \r\n    function _percent1(uint _value) public onlyOwner{ real1 = _value; }\r\n    \r\n    function _RewardPool(address _account) public onlyOwner{ rewardpool = _account; }\r\n    \r\n    function _range1(uint _value) public onlyOwner{ p1 = _value; } \r\n    function _range2(uint _value) public onlyOwner{ p2 =  _value; }\r\n   \r\n   \r\n    \r\n    function _showrange1() public view  returns(uint){ return p1; } \r\n    function _showrange2() public view  returns(uint){ return p2; } \r\n  \r\n    \r\n    \r\n    function _start() public onlyOwner{\r\n        \r\n        require(real1 != 0, 'Reward category 1 percentage has not be set');\r\n        open = true;\r\n    }\r\n    \r\n    \r\n    function _end() public onlyOwner{ open = false; }\r\n    \r\n    \r\n    function Claim() public returns(bool){ \r\n    \r\n    require(open == true, \"Claiming is not yet initialized\");\r\n    require(check() == false, \"Already Claimed\");\r\n    \r\n    uint place = lengthShotslist();\r\n    _holdersID[msg.sender] = place;\r\n    _whitelist.push(msg.sender);\r\n   \r\n    holderbalance = token.balanceOf(msg.sender);\r\n    \r\n    if(holderbalance >= peal1 && holderbalance < peal2){\r\n        \r\n        amount = holderbalance * real1 / 100; //5 percent\r\n        // stage = 1;\r\n        require(token.allowance(rewardpool, address(this)) >= amount, 'All tokens aloted has been completely claimed');\r\n        \r\n        token.transferFrom(rewardpool, msg.sender, amount);\r\n       \r\n          \r\n    } else if(holderbalance >= peal2){\r\n        // stage = 2;\r\n        amount = peal2 * real1 / 100; //5 percent\r\n        require(token.allowance(rewardpool, address(this)) >= amount, 'All tokens aloted has been completely claimed');\r\n        token.transferFrom(rewardpool, msg.sender, amount);\r\n       \r\n        \r\n    }\r\n     \r\n   \r\n   \r\n   \r\n  \r\n    return true;\r\n        \r\n    }\r\n    \r\n    function holdersID() internal view returns(uint){\r\n        \r\n       return _holdersID[msg.sender];\r\n    }\r\n   \r\n   \r\n    \r\n    function viewWhitelist(uint _ID) internal view returns(address){\r\n        \r\n        return _whitelist[_ID];\r\n       \r\n    }\r\n    \r\n    \r\n   \r\n    \r\n    function check() public returns (bool){\r\n    \r\n    if(lengthShotslist() == 1){\r\n        \r\n        _holdersID[msg.sender] = 0;\r\n        \r\n        uint id = holdersID();  \r\n        address holder = _whitelist[id];\r\n        \r\n        if(holder == msg.sender){\r\n            \r\n            return true;\r\n        }else{\r\n            \r\n           return false;\r\n        } \r\n         \r\n        \r\n    }else{\r\n        \r\n        uint id = holdersID();  \r\n        address holder = _whitelist[id];\r\n        \r\n        if(holder == msg.sender){\r\n            \r\n            return true;\r\n        }else{\r\n            \r\n           return false;\r\n        }   \r\n        \r\n    }\r\n    \r\n   \r\n        \r\n        \r\n    }\r\n    \r\n    function clear()public onlyOwner{\r\n        delete _whitelist;\r\n        _whitelist.push(msg.sender);\r\n    }\r\n    \r\n    function lengthShotslist() internal view returns (uint){\r\n    \r\n      return  _whitelist.length;\r\n    }\r\n   \r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_range1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_RewardPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_showrange1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_percent1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_showrange2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_range2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardpool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Reward","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000035fbc59b87229d3beddbfb1d3c1d7a97ee0c4fff0000000000000000000000002b729980d63a330a941f2422435978f756024587","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e04bad89cc8c06ef1f28eff4d18da0aae51216911e28f69eaeb8b98c7770bc5d"}]}