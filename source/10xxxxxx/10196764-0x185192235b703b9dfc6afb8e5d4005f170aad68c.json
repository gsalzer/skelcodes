{"status":"1","message":"OK","result":[{"SourceCode":"// Draft: Gas retail contract for buying, storing and selling gas token at set rates, as well as deploying gas as a proxy contract\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface ERC20GasToken {\r\n    function name (  ) external view returns ( string memory);\r\n  function freeFromUpTo ( address from, uint256 value ) external returns ( uint256 freed );\r\n  function approve ( address spender, uint256 value ) external returns ( bool success );\r\n  function totalSupply (  ) external view returns ( uint256 supply );\r\n  function transferFrom ( address from, address to, uint256 value ) external returns ( bool success );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function freeFrom ( address from, uint256 value ) external returns ( bool success );\r\n  function freeUpTo ( uint256 value ) external returns ( uint256 freed );\r\n  function balanceOf ( address owner ) external view returns ( uint256 balance );\r\n  function symbol (  ) external view returns ( string memory);\r\n  function mint ( uint256 value ) external;\r\n  function transfer ( address to, uint256 value ) external returns ( bool success );\r\n  function free ( uint256 value ) external returns ( bool success );\r\n  function allowance ( address owner, address spender ) external view returns ( uint256 remaining );\r\n}\r\n\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string calldata fromSymbol, string calldata  toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string calldata  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n  function arb(address  fundsReturnToAddress,  address liquidityProviderContractAddress, string[] calldata   tokens,  uint256 amount, string[] calldata  exchanges) external payable returns (bool);\r\n}\r\n\r\ncontract GasRetailContract {\r\n    using SafeMath\r\n    for uint256;\r\n \r\n    OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n    ERC20GasToken gasToken = ERC20GasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    uint8 public constant decimals = 2;\r\n    uint256 public buyPrice = 2500; //25 gwei\r\n    uint256 public sellPrice = 2000; //20 gwei\r\n    uint256 public constant gweiToWei = 1000000000; //gwei to wei converter\r\n    \r\n    address payable owner;\r\n    mapping(address => uint256) balances;\r\n    uint256 public thirdPartyStored = 0;\r\n    uint256 public totalSupply = 0;\r\n    \r\n     // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner of the contract\");\r\n        _;\r\n    }\r\n    \r\n    // check that amount sent to buy gas tokens is greaterthan or equal to the current buying price in gwei\r\n    modifier buyerPriceSentValid(uint256 _amountSentInGwei) {\r\n        require(_amountSentInGwei >= buyPrice, \"Make sure the buying amount sent is equal to or greater the current buying price\");\r\n        _;\r\n    }\r\n\r\n    \r\n    // check the seller has enough gas tokens to sell back to contract\r\n    modifier gasTokensBalanceValid(uint _amount) {\r\n        require(balances[msg.sender] >= _amount, \"Amount to sell is greater than your aavailable gas token balance \");\r\n        _;\r\n    }\r\n    \r\n    // check if user has enough gas token balance to store in this contract\r\n    modifier userGastokenBalanceSufficient(uint _amount) {\r\n        require(gasToken.balanceOf(msg.sender) >= _amount, \"Your gas token balance is insufficient to store the specified amount\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public payable {\r\n         owner = msg.sender;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns(uint256){\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function setGasBuyPrice(uint256 newPrice) public onlyOwner returns(bool){\r\n        buyPrice = newPrice;\r\n        return true;\r\n    }\r\n\r\n    function setGasSellPrice(uint256 newPrice) public onlyOwner returns(bool){\r\n        sellPrice = newPrice;\r\n        return true;\r\n    }\r\n\r\n    function buyGas() public payable buyerPriceSentValid(msg.value.div(gweiToWei)) returns (bool){\r\n        \r\n        uint256 gweiSent = msg.value.div(gweiToWei);\r\n        uint256 amountToSend = gweiSent.div(buyPrice);\r\n        require(gasToken.transfer(msg.sender, amountToSend), \"This contract does not have enough gas token to fill your order\");\r\n        return true;\r\n    }\r\n\r\n    function sellGas(uint256 amount) external gasTokensBalanceValid(amount) returns (bool){\r\n        // convert the amount to pay from gwei to wei\r\n        uint256 amountToPayInWei = sellPrice.mul(amount).mul(gweiToWei);\r\n        \r\n        require(msg.sender.send(amountToPayInWei), \"Not enough ETH in the contract to fill this order\");\r\n        // reduce the seller's gas token balance & also third party store\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        // we also reduce the total 3rd party supply of gas tokens because technically the tokens sold belong to this contract\r\n        thirdPartyStored = thirdPartyStored.sub(amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function storeGas(uint256 amount)external userGastokenBalanceSufficient(amount) returns (bool){\r\n      \r\n        require(gasToken.transferFrom(msg.sender, address(this), amount ), \"You must approve this contract at the following smart contract before buying: 0x0000000000b3F879cb30FE243b4Dfee438691c04\");\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        thirdPartyStored = thirdPartyStored.add(amount);\r\n        totalSupply = totalSupply.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function returnOwnerStoredGas(address tokenAddress, uint256 amount) onlyOwner public returns(bool){\r\n       ERC20 tokenToWithdraw = ERC20(tokenAddress);\r\n       tokenToWithdraw.transfer(owner, amount);\r\n       return true;\r\n    }\r\n    \r\n    // return surplus gas token to the owner\r\n    function returnSurplusGasTokenToOwner() public onlyOwner returns(uint256){\r\n        uint256 gasTokenSurplus = 0;\r\n      // check if the balance of gas tokens in the contract is greater than the total supply of 3rd party store\r\n       if( gasToken.balanceOf(address(this)) > thirdPartyStored) {\r\n           gasTokenSurplus = gasToken.balanceOf(address(this)) - thirdPartyStored;\r\n           gasToken.transfer(owner, gasTokenSurplus);\r\n       }\r\n       \r\n       return gasTokenSurplus;\r\n    }\r\n    \r\n    // return surplus ETH to the owner\r\n    \r\n    function returnSurplusEthToOwner() public onlyOwner returns(uint256){\r\n        uint256 ethSurplus = 0;\r\n        uint256 totalSellingPriceInWei = sellPrice.mul(thirdPartyStored).mul(gweiToWei);\r\n        \r\n        if (address(this).balance >= totalSellingPriceInWei) {\r\n            ethSurplus = address(this).balance - totalSellingPriceInWei;\r\n            owner.transfer(ethSurplus);\r\n        }\r\n   \r\n       return ethSurplus;\r\n    }\r\n    \r\n    // free up gas tokens held by the contract for the user so as to do more expensive operations\r\n    function deployGas() external {\r\n        require(balances[msg.sender] > 0, \"Not enough gas tokens, please store some gas in this contract to continue!\");\r\n        gasToken.freeFromUpTo(address(this), balances[msg.sender]);\r\n    }\r\n   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gweiToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnOwnerStoredGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnSurplusEthToOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnSurplusGasTokenToOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setGasBuyPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setGasSellPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"storeGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdPartyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GasRetailContract","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8660c4d0c1c903ac037528e0cb46a4d45d29e9177ebfdcbb2e423f6923c33ea9"}]}