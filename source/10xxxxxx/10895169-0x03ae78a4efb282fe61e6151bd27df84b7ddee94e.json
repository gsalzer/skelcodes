{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n\r\n/*\r\n   The 'Invader' token is a yield farming token that farms the trading fees of the 0xBTC-ETH pair on UniswapV2.\r\n   \r\n   By simply holding this token, you will earn yields of Uniswap trading activity which can be redeemed at any time from the Uniswap contract.\r\n\r\n    1 million Invader (NVDR) token <==> 1 Liquidity Pool (LP) token \r\n*/\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n} \r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n \r\n\r\ncontract InvaderToken {\r\n    \r\n   using SafeMath for uint;\r\n \r\n    address public baseToken; \r\n\r\n    string public name     = \"Invader\";\r\n    string public symbol   = \"NVDR\";\r\n    uint8  public decimals = 18;\r\n    uint   private _totalSupply;\r\n    uint256 public expansionMultiplier = 1000000;\r\n\r\n    event  Approval(address indexed src, address indexed ext, uint amt);\r\n    event  Transfer(address indexed src, address indexed dst, uint amt);\r\n    event  Mint(address indexed src, uint amt);\r\n    event  Burn(address indexed src, uint amt);\r\n\r\n    mapping (address => uint)                       public  balances;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n  \r\n  \r\n    constructor(address bToken) public {\r\n        baseToken = bToken;\r\n    }\r\n    \r\n     /**\r\n     * Do not allow Ether to enter \r\n     */\r\n    function() external payable  \r\n    {\r\n        revert();\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     *  \r\n     * @dev Deposit base tokens, receive proxy tokens \r\n     */\r\n    function depositTokens(address from, uint amount) public returns (uint mintedAmount)\r\n    {\r\n        require( amount > 0 );\r\n        \r\n        require( ERC20( baseToken ).transferFrom( from, this, amount) );\r\n        \r\n        uint expandedAmount = amount.mul(expansionMultiplier);\r\n            \r\n        balances[from] = balances[from].add(expandedAmount);\r\n        _totalSupply = _totalSupply.add(expandedAmount);\r\n        \r\n        emit Transfer(address(this),from,expandedAmount);\r\n\r\n        emit Mint(from,expandedAmount);\r\n        \r\n        return expandedAmount;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Withdraw base tokens, burn proxy tokens.  ExpandedAmount must be divisible by expansionMultiplier.\r\n     */\r\n    function withdrawTokens(uint expandedAmount) public returns (uint withdrawnAmount)\r\n    {\r\n        address from = msg.sender;\r\n        \r\n        require( expandedAmount > 0 );\r\n        \r\n        uint amount = expandedAmount.div(expansionMultiplier);\r\n        \r\n        require( amount > 0 );\r\n        \r\n        require( amount.mul(expansionMultiplier) == expandedAmount );\r\n        \r\n        balances[from] = balances[from].sub(expandedAmount);\r\n        _totalSupply = _totalSupply.sub(expandedAmount);\r\n        \r\n        emit Transfer(from,address(this),expandedAmount);\r\n        emit Burn(from, expandedAmount);\r\n            \r\n        require( ERC20(baseToken).transfer( from, amount) );\r\n        return amount;\r\n    }\r\n    \r\n    function getBaseTokenAddress() public view returns (address){\r\n    \treturn baseToken;\r\n    }\r\n    \r\n    \r\n     function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function approve(address ext, uint amt) public returns (bool) {\r\n        allowance[msg.sender][ext] = amt;\r\n        emit Approval(msg.sender, ext, amt);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool) {\r\n        address from = msg.sender;\r\n        balances[from] = balances[from].sub(tokens);\r\n        \r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"address\"},{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expandedAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expansionMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"bToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ext\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"InvaderToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c12c4c3e0008b838f75189bfb39283467cf6e5b3","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://89e5e350661402b35ac991b301919168ebf2e9e550d89214af97f4e6b08e7205"}]}