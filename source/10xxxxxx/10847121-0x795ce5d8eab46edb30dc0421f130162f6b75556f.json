{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownership Contract\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface of DefiBids\r\n */\r\ninterface BIDSInterface { \r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function BURN_RATE() external view returns(uint256);\r\n    function isStackingActive() external view returns(bool);\r\n} \r\n\r\n\r\ncontract StakingPoolFunds is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address public divPoolAddress;\r\n    address public constant bidsTokenAddress = 0x912B38134F395D1BFAb4C6F9db632C31667ACF98;\r\n    \r\n    modifier onlyDivPool() {\r\n        require(divPoolAddress == msg.sender, \"Ownable: caller is not the authorized.\");\r\n        _;\r\n    }\r\n    \r\n    /*\r\n        Fallback function. It just accepts incoming ETH\r\n    */\r\n    function () payable external {}\r\n    \r\n    function requestDividendRewards() external onlyDivPool returns(uint256 ethRewards, uint256 bidsRewards){\r\n        \r\n        bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));\r\n        \r\n        // Calculate remaining amount to be tranferred at staking portal\r\n        uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();\r\n        bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();\r\n        \r\n        uint256 remainingAmount = bidsRewards;\r\n        if(BURN_RATE > 0){\r\n            uint256 burnAmount = bidsRewards.mul(BURN_RATE).div(1000);\r\n            remainingAmount = remainingAmount.sub(burnAmount);\r\n\r\n        }\r\n        \r\n        if(isStakingActive){\r\n            uint256 amountToStakePool = bidsRewards.mul(10).div(1000);\r\n            remainingAmount = remainingAmount.sub(amountToStakePool);\r\n        }\r\n        \r\n        if(bidsRewards > 0){\r\n            BIDSInterface(bidsTokenAddress).transfer(msg.sender, bidsRewards);\r\n        }\r\n        \r\n        ethRewards = address(this).balance;\r\n        if(ethRewards > 0){\r\n            msg.sender.transfer(ethRewards);\r\n        }\r\n        \r\n        return (ethRewards, remainingAmount);\r\n        \r\n    }\r\n    \r\n    function availableDividendRewards() external view returns(uint256 ethRewards, uint256 bidsRewards){\r\n        \r\n        bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));\r\n        ethRewards = address(this).balance;\r\n        \r\n         // Calculate remaining amount to be tranferred at staking portal\r\n        uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();\r\n        bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();\r\n        \r\n        uint256 remainingAmount = bidsRewards;\r\n        if(BURN_RATE > 0){\r\n            uint256 burnAmount = bidsRewards.mul(BURN_RATE).div(1000);\r\n            remainingAmount = remainingAmount.sub(burnAmount);\r\n        }\r\n        \r\n        if(isStakingActive){\r\n            uint256 amountToStakePool = bidsRewards.mul(10).div(1000);\r\n            remainingAmount = remainingAmount.sub(amountToStakePool);\r\n        }\r\n        \r\n        return (ethRewards, remainingAmount);\r\n        \r\n    }\r\n    \r\n    function setDivPoolAddress(address _a) public onlyOwner returns(bool){\r\n        divPoolAddress = _a;\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableDividendRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidsRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestDividendRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidsRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setDivPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingPoolFunds","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a19a58a986d95019f0537ada0d9ec8b92a6c9b85b5afd08e599836b817f6fb8c"}]}