{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/registry/Registry.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value,\r\n        bytes32 _notes\r\n    ) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].pop();\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            bytes32,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(\r\n        bytes32 _attribute,\r\n        uint256 _startIndex,\r\n        address[] calldata _addresses\r\n    ) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i-- > 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/ProxyStorage.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * All storage must be declared here\r\n * New storage must be appended to the end\r\n * Never remove items from this list\r\n */\r\ncontract ProxyStorage {\r\n    bool initalized;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(uint144 => uint256) attributes; // see RegistrySubscriber\r\n\r\n    address owner_;\r\n    address pendingOwner_;\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 64         uint256(address),uint256(1)                                   balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(2))       allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(3))                attributes\r\n     **/\r\n}\r\n\r\n// File: contracts/trusttokens/ValSafeMath.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * Forked subset of Openzeppelin SafeMath allowing custom underflow/overflow messages\r\n * Useful for debugging, replaceable with standard SafeMath\r\n */\r\nlibrary ValSafeMath {\r\n    function add(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory overflowMessage\r\n    ) internal pure returns (uint256 result) {\r\n        result = a + b;\r\n        require(result >= a, overflowMessage);\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory underflowMessage\r\n    ) internal pure returns (uint256 result) {\r\n        require(b <= a, underflowMessage);\r\n        result = a - b;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory overflowMessage\r\n    ) internal pure returns (uint256 result) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        result = a * b;\r\n        require(result / a == b, overflowMessage);\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory divideByZeroMessage\r\n    ) internal pure returns (uint256 result) {\r\n        require(b > 0, divideByZeroMessage);\r\n        result = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/ERC20.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n// Fork of OpenZeppelin's BasicToken\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract ModularBasicToken is ProxyStorage {\r\n    using ValSafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function _addBalance(address _who, uint256 _value) internal returns (uint256 priorBalance) {\r\n        priorBalance = balanceOf[_who];\r\n        balanceOf[_who] = priorBalance.add(_value, \"balance overflow\");\r\n    }\r\n\r\n    function _subBalance(address _who, uint256 _value) internal returns (uint256 result) {\r\n        result = balanceOf[_who].sub(_value, \"insufficient balance\");\r\n        balanceOf[_who] = result;\r\n    }\r\n\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        balanceOf[_who] = _value;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ModularStandardToken is ModularBasicToken {\r\n    using ValSafeMath for uint256;\r\n    uint256 constant INFINITE_ALLOWANCE = 0xfe00000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _approveAllArgs(_spender, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _approveAllArgs(\r\n        address _spender,\r\n        uint256 _value,\r\n        address _tokenHolder\r\n    ) internal {\r\n        _setAllowance(_tokenHolder, _spender, _value);\r\n        emit Approval(_tokenHolder, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        _increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _increaseApprovalAllArgs(\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        address _tokenHolder\r\n    ) internal {\r\n        _addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(_tokenHolder, _spender, allowance[_tokenHolder][_spender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        _decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _decreaseApprovalAllArgs(\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        address _tokenHolder\r\n    ) internal {\r\n        uint256 oldValue = allowance[_tokenHolder][_spender];\r\n        uint256 newValue;\r\n        if (_subtractedValue > oldValue) {\r\n            newValue = 0;\r\n        } else {\r\n            newValue = oldValue - _subtractedValue;\r\n        }\r\n        _setAllowance(_tokenHolder, _spender, newValue);\r\n        emit Approval(_tokenHolder, _spender, newValue);\r\n    }\r\n\r\n    function _addAllowance(\r\n        address _who,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal {\r\n        allowance[_who][_spender] = allowance[_who][_spender].add(_value, \"allowance overflow\");\r\n    }\r\n\r\n    function _subAllowance(\r\n        address _who,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal returns (uint256 newAllowance) {\r\n        newAllowance = allowance[_who][_spender].sub(_value, \"insufficient allowance\");\r\n        if (newAllowance < INFINITE_ALLOWANCE) {\r\n            allowance[_who][_spender] = newAllowance;\r\n        }\r\n    }\r\n\r\n    function _setAllowance(\r\n        address _who,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal {\r\n        allowance[_who][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/RegistrySubscriber.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\nabstract contract RegistrySubscriber is ProxyStorage {\r\n    // Registry Attributes\r\n    bytes32 constant PASSED_KYCAML = \"hasPassedKYC/AML\";\r\n    bytes32 constant IS_DEPOSIT_ADDRESS = \"isDepositAddress\";\r\n    bytes32 constant BLACKLISTED = 0x6973426c61636b6c697374656400000000000000000000000000000000000000;\r\n    bytes32 constant REGISTERED_CONTRACT = 0x697352656769737465726564436f6e7472616374000000000000000000000000;\r\n\r\n    // attributes Bitmasks\r\n    uint256 constant ACCOUNT_BLACKLISTED = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_BLACKLISTED_INV = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_KYC = 0x00ff000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_KYC_INV = 0xff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_ADDRESS = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant ACCOUNT_ADDRESS_INV = 0xffffffffffffffffffffffff0000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_HOOK = 0x0000ff0000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant ACCOUNT_HOOK_INV = 0xffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    function registry() public virtual view returns (Registry);\r\n\r\n    modifier onlyRegistry {\r\n        require(msg.sender == address(registry()));\r\n        _;\r\n    }\r\n\r\n    /**\r\n        Attributes are set per autosweep account\r\n        The layout of attributes is detailed here\r\n        lower bytes -> upper bytes\r\n        [0, 20)  recipient address\r\n        [29, 30) REGISTERED_CONTRACT\r\n        [30, 31) PASSED_KYCAML\r\n        [31, 32) BLACKLISTED\r\n    */\r\n    function syncAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) public onlyRegistry {\r\n        uint144 who = uint144(uint160(_who) >> 20);\r\n        uint256 prior = attributes[who];\r\n        if (prior == 0) {\r\n            prior = uint256(_who);\r\n        }\r\n        if (_attribute == IS_DEPOSIT_ADDRESS) {\r\n            attributes[who] = (prior & ACCOUNT_ADDRESS_INV) | uint256(address(_value));\r\n        } else if (_attribute == BLACKLISTED) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_BLACKLISTED;\r\n            } else {\r\n                attributes[who] = prior & ACCOUNT_BLACKLISTED_INV;\r\n            }\r\n        } else if (_attribute == PASSED_KYCAML) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_KYC;\r\n            } else {\r\n                attributes[who] = prior & ACCOUNT_KYC_INV;\r\n            }\r\n        } else if (_attribute == REGISTERED_CONTRACT) {\r\n            if (_value != 0) {\r\n                attributes[who] = prior | ACCOUNT_HOOK;\r\n            } else {\r\n                attributes[who] = prior & ACCOUNT_HOOK_INV;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/TrueCoinReceiver.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\ninterface TrueCoinReceiver {\r\n    function tokenFallback(address from, uint256 value) external;\r\n}\r\n\r\n// File: contracts/trusttokens/ValTokenWithHook.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\nabstract contract ValTokenWithHook is ModularStandardToken, RegistrySubscriber {\r\n    event Burn(address indexed from, uint256 indexed amount);\r\n    event Mint(address indexed to, uint256 indexed amount);\r\n\r\n    function _resolveRecipient(address _to) internal view returns (address to, bool hook) {\r\n        uint256 flags = (attributes[uint144(uint160(_to) >> 20)]);\r\n        if (flags == 0) {\r\n            to = _to;\r\n            // attributes[uint144(uint160(to) >> 20)] = uint256(to);\r\n            hook = false;\r\n        } else {\r\n            to = address(flags);\r\n            hook = (flags & ACCOUNT_HOOK) != 0;\r\n        }\r\n    }\r\n\r\n    modifier resolveSender(address _from) {\r\n        uint256 flags = (attributes[uint144(uint160(_from) >> 20)]);\r\n        address from = address(flags);\r\n        if (from != address(0)) {\r\n            require(from == _from, \"account collision\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function _transferFromAllArgs(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        address _spender\r\n    ) internal virtual {\r\n        _subAllowance(_from, _spender, _value);\r\n        _transferAllArgs(_from, _to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool) {\r\n        _transferFromAllArgs(_from, _to, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        _transferAllArgs(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transferAllArgs(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal virtual resolveSender(_from) {\r\n        _subBalance(_from, _value);\r\n        emit Transfer(_from, _to, _value);\r\n        bool hasHook;\r\n        address to;\r\n        (to, hasHook) = _resolveRecipient(_to);\r\n        _addBalance(to, _value);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        if (hasHook) {\r\n            TrueCoinReceiver(to).tokenFallback(_from, _value);\r\n        }\r\n    }\r\n\r\n    function _burn(address _from, uint256 _value) internal virtual returns (uint256 resultBalance_, uint256 resultSupply_) {\r\n        emit Transfer(_from, address(0), _value);\r\n        emit Burn(_from, _value);\r\n        resultBalance_ = _subBalance(_from, _value);\r\n        resultSupply_ = totalSupply.sub(_value, \"removing more stake than in supply\");\r\n        totalSupply = resultSupply_;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _value) internal virtual {\r\n        emit Transfer(address(0), _to, _value);\r\n        emit Mint(_to, _value);\r\n        (address to, bool hook) = _resolveRecipient(_to);\r\n        if (_to != to) {\r\n            emit Transfer(_to, to, _value);\r\n        }\r\n        _addBalance(to, _value);\r\n        totalSupply = totalSupply.add(_value, \"totalSupply overflow\");\r\n        if (hook) {\r\n            TrueCoinReceiver(to).tokenFallback(address(0x0), _value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/ClaimableContract.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title ClaimableContract\r\n * @dev The ClaimableContract contract is a copy of Claimable Contract by Zeppelin.\r\n and provides basic authorization control functions. Inherits storage layout of\r\n ProxyStorage.\r\n */\r\ncontract ClaimableContract is ProxyStorage {\r\n    function owner() public view returns (address) {\r\n        return owner_;\r\n    }\r\n\r\n    function pendingOwner() public view returns (address) {\r\n        return pendingOwner_;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev sets the original `owner` of the contract to the sender\r\n     * at construction. Must then be reinitialized\r\n     */\r\n    constructor() public {\r\n        owner_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner_, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner_);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner_ = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        address _pendingOwner = pendingOwner_;\r\n        emit OwnershipTransferred(owner_, _pendingOwner);\r\n        owner_ = _pendingOwner;\r\n        pendingOwner_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/TimeLockedToken.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TimeLockedToken\r\n * @notice Time Locked ERC20 Token\r\n * @author Harold Hyatt\r\n * @dev Contract which gives the ability to time-lock tokens\r\n *\r\n * The registerLockup() function allows an account to transfer\r\n * its tokens to another account, locking them according to the\r\n * distribution epoch periods\r\n *\r\n * By overriding the balanceOf(), transfer(), and transferFrom()\r\n * functions in ERC20, an account can show its full, post-distribution\r\n * balance but only transfer or spend up to an allowed amount\r\n *\r\n * Every time an epoch passes, a portion of previously non-spendable tokens\r\n * are allowed to be transferred, and after all epochs have passed, the full\r\n * account balance is unlocked\r\n */\r\nabstract contract TimeLockedToken is ValTokenWithHook, ClaimableContract {\r\n    using SafeMath for uint256;\r\n\r\n    // represents total distribution for locked balances\r\n    mapping(address => uint256) distribution;\r\n\r\n    // start of the lockup period\r\n    uint256 constant LOCK_START = 1594716039;\r\n    // length of time to delay first epoch\r\n    uint256 constant FIRST_EPOCH_DELAY = 30 days;\r\n    // how long does an epoch last\r\n    uint256 constant EPOCH_DURATION = 90 days;\r\n    // number of epochs\r\n    uint256 constant TOTAL_EPOCHS = 8;\r\n    // registry of locked addresses\r\n    address public timeLockRegistry;\r\n\r\n    modifier onlyTimeLockRegistry() {\r\n        require(msg.sender == timeLockRegistry, \"only TimeLockRegistry\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set TimeLockRegistry address\r\n     * @param newTimeLockRegistry Address of TimeLockRegistry contract\r\n     */\r\n    function setTimeLockRegistry(address newTimeLockRegistry) external onlyOwner {\r\n        require(newTimeLockRegistry != address(0), \"cannot be zero address\");\r\n        require(newTimeLockRegistry != timeLockRegistry, \"must be new TimeLockRegistry\");\r\n        timeLockRegistry = newTimeLockRegistry;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer function which includes unlocked tokens\r\n     * @param _from The address to send tokens from\r\n     * @param _to The address that will receive the tokens\r\n     * @param _value The amount of tokens to be transferred\r\n     */\r\n    function _transferAllArgs(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal override resolveSender(_from) {\r\n        require(balanceOf[_from] >= _value, \"insufficient balance\");\r\n        require(unlockedBalance(_from) >= _value, \"attempting to transfer locked funds\");\r\n\r\n        super._transferAllArgs(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev transferFrom function which includes unlocked tokens\r\n     * @param _from The address to send tokens from\r\n     * @param _to The address that will receive the tokens\r\n     * @param _value The amount of tokens to be transferred\r\n     * @param _spender The address allowed to make the transfer\r\n     */\r\n    function _transferFromAllArgs(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        address _spender\r\n    ) internal override {\r\n        require(balanceOf[_from] >= _value, \"insufficient balance\");\r\n        require(unlockedBalance(_from) >= _value, \"attempting to transfer locked funds\");\r\n\r\n        super._transferFromAllArgs(_from, _to, _value, _spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if amount we want to burn is unlocked before burning\r\n     * @param _from The address whose tokens will burn\r\n     * @param _value The amount of tokens to be burnt\r\n     */\r\n    function _burn(address _from, uint256 _value) internal override returns (uint256 resultBalance_, uint256 resultSupply_) {\r\n        require(unlockedBalance(_from) >= _value, \"attempting to burn locked funds\");\r\n\r\n        (resultBalance_, resultSupply_) = super._burn(_from, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to another account under the lockup schedule\r\n     * Emits a transfer event showing a transfer to the recipient\r\n     * Only the registry can call this function\r\n     * Once registered, the distribution cannot be registered again\r\n     * @param receiver Address to receive the tokens\r\n     * @param amount Tokens to be transferred\r\n     */\r\n    function registerLockup(address receiver, uint256 amount) external onlyTimeLockRegistry {\r\n        require(balanceOf[msg.sender] >= amount, \"insufficient balance\");\r\n        require(distribution[receiver] == 0, \"distribution already set\");\r\n\r\n        // set distribution to lockup amount\r\n        distribution[receiver] = amount;\r\n\r\n        // transfer to recipient\r\n        _transferAllArgs(msg.sender, receiver, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get locked balance for an account\r\n     * @param account Account to check\r\n     * @return Amount locked\r\n     */\r\n    function lockedBalance(address account) public view returns (uint256) {\r\n        // distribution * (epochsLeft / totalEpochs)\r\n        uint256 epochsLeft = TOTAL_EPOCHS.sub(epochsPassed());\r\n        return distribution[account].mul(epochsLeft).div(TOTAL_EPOCHS);\r\n    }\r\n\r\n    /**\r\n     * @dev Get unlocked balance for an account\r\n     * @param account Account to check\r\n     * @return Amount that is unlocked and available eg. to transfer\r\n     */\r\n    function unlockedBalance(address account) public view returns (uint256) {\r\n        // totalBalance - lockedBalance\r\n        return balanceOf[account].sub(lockedBalance(account));\r\n    }\r\n\r\n    /*\r\n     * @dev Get number of epochs passed\r\n     * @return Value between 0 and 8 of lockup epochs already passed\r\n     */\r\n    function epochsPassed() public view returns (uint256) {\r\n        // return 0 if timestamp is lower than start time\r\n        if (block.timestamp < LOCK_START) {\r\n            return 0;\r\n        }\r\n\r\n        // how long it has been since the beginning of lockup period\r\n        uint256 timePassed = block.timestamp.sub(LOCK_START);\r\n\r\n        // 1st epoch is FIRST_EPOCH_DELAY longer; we check to prevent subtraction underflow\r\n        if (timePassed < FIRST_EPOCH_DELAY) {\r\n            return 0;\r\n        }\r\n\r\n        // subtract the FIRST_EPOCH_DELAY, so that we can count all epochs as lasting EPOCH_DURATION\r\n        uint256 totalEpochsPassed = timePassed.sub(FIRST_EPOCH_DELAY).div(EPOCH_DURATION);\r\n\r\n        // epochs don't count over TOTAL_EPOCHS\r\n        if (totalEpochsPassed > TOTAL_EPOCHS) {\r\n            return TOTAL_EPOCHS;\r\n        }\r\n\r\n        return totalEpochsPassed;\r\n    }\r\n\r\n    /**\r\n     * @dev Get timestamp of next epoch\r\n     * Will revert if all epochs have passed\r\n     * @return Timestamp of when the next epoch starts\r\n     */\r\n    function nextEpoch() public view returns (uint256) {\r\n        // get number of epochs passed\r\n        uint256 passed = epochsPassed();\r\n\r\n        // if all epochs passed, return\r\n        if (passed == TOTAL_EPOCHS) {\r\n            // return INT_MAX\r\n            return uint256(-1);\r\n        }\r\n\r\n        // if no epochs passed, return latest epoch + delay + standard duration\r\n        if (passed == 0) {\r\n            return latestEpoch().add(FIRST_EPOCH_DELAY).add(EPOCH_DURATION);\r\n        }\r\n\r\n        // otherwise return latest epoch + epoch duration\r\n        return latestEpoch().add(EPOCH_DURATION);\r\n    }\r\n\r\n    /**\r\n     * @dev Get timestamp of latest epoch\r\n     * @return Timestamp of when the current epoch has started\r\n     */\r\n    function latestEpoch() public view returns (uint256) {\r\n        // get number of epochs passed\r\n        uint256 passed = epochsPassed();\r\n\r\n        // if no epochs passed, return lock start time\r\n        if (passed == 0) {\r\n            return LOCK_START;\r\n        }\r\n\r\n        // accounts for first epoch being longer\r\n        // lockStart + firstEpochDelay + (epochsPassed * epochDuration)\r\n        return LOCK_START.add(FIRST_EPOCH_DELAY).add(passed.mul(EPOCH_DURATION));\r\n    }\r\n\r\n    /**\r\n     * @dev Get timestamp of final epoch\r\n     * @return Timestamp of when the last epoch ends and all funds are released\r\n     */\r\n    function finalEpoch() public pure returns (uint256) {\r\n        // lockStart + firstEpochDelay + (epochDuration * totalEpochs)\r\n        return LOCK_START.add(FIRST_EPOCH_DELAY).add(EPOCH_DURATION.mul(TOTAL_EPOCHS));\r\n    }\r\n\r\n    /**\r\n     * @dev Get timestamp of locking period start\r\n     * @return Timestamp of locking period start\r\n     */\r\n    function lockStart() public pure returns (uint256) {\r\n        return LOCK_START;\r\n    }\r\n}\r\n\r\n// File: contracts/trusttokens/TimeLockRegistry.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @title TimeLockRegistry\r\n * @notice Register Lockups for TimeLocked ERC20 Token\r\n * @author Harold Hyatt\r\n * @dev This contract allows owner to register distributions for a TimeLockedToken\r\n *\r\n * To register a distribution, register method should be called by the owner.\r\n * claim() should then be called by account registered to recieve tokens under lockup period\r\n * If case of a mistake, owner can cancel registration\r\n *\r\n * Note this contract must be setup in TimeLockedToken's setTimeLockRegistry() function\r\n */\r\ncontract TimeLockRegistry is ClaimableContract {\r\n    // time locked token\r\n    TimeLockedToken public token;\r\n\r\n    // mapping from SAFT address to TRU due amount\r\n    mapping(address => uint256) public registeredDistributions;\r\n\r\n    event Register(address receiver, uint256 distribution);\r\n    event Cancel(address receiver, uint256 distribution);\r\n    event Claim(address account, uint256 distribution);\r\n\r\n    /**\r\n     * @dev Initalize function so this contract can be behind a proxy\r\n     * @param _token TimeLockedToken contract to use in this registry\r\n     */\r\n    function initialize(TimeLockedToken _token) external {\r\n        require(!initalized, \"Already initialized\");\r\n        token = _token;\r\n        owner_ = msg.sender;\r\n        initalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Register new SAFT account\r\n     * @param receiver Address belonging to SAFT purchaser\r\n     * @param distribution Tokens amount that receiver is due to get\r\n     */\r\n    function register(address receiver, uint256 distribution) external onlyOwner {\r\n        require(receiver != address(0), \"Zero address\");\r\n        require(distribution != 0, \"Distribution = 0\");\r\n        require(registeredDistributions[receiver] == 0, \"Distribution for this address is already registered\");\r\n\r\n        // register distribution in mapping\r\n        registeredDistributions[receiver] = distribution;\r\n\r\n        // transfer tokens from owner\r\n        require(token.transferFrom(msg.sender, address(this), distribution), \"Transfer failed\");\r\n\r\n        // emit register event\r\n        emit Register(receiver, distribution);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel distribution registration\r\n     * @param receiver Address that should have it's distribution removed\r\n     */\r\n    function cancel(address receiver) external onlyOwner {\r\n        require(registeredDistributions[receiver] != 0, \"Not registered\");\r\n\r\n        // get amount from distributions\r\n        uint256 amount = registeredDistributions[receiver];\r\n\r\n        // set distribution mapping to 0\r\n        delete registeredDistributions[receiver];\r\n\r\n        // transfer tokens back to owner\r\n        require(token.transfer(msg.sender, amount), \"Transfer failed\");\r\n\r\n        // emit cancel event\r\n        emit Cancel(receiver, amount);\r\n    }\r\n\r\n    /// @dev Claim tokens due amount\r\n    function claim() external {\r\n        require(registeredDistributions[msg.sender] != 0, \"Not registered\");\r\n\r\n        // get amount from distributions\r\n        uint256 amount = registeredDistributions[msg.sender];\r\n\r\n        // set distribution mapping to 0\r\n        delete registeredDistributions[msg.sender];\r\n\r\n        // register lockup in TimeLockedToken\r\n        // this will transfer funds from this contract and lock them for sender\r\n        token.registerLockup(msg.sender, amount);\r\n\r\n        // emit claim event\r\n        emit Claim(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimeLockedToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TimeLockedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimeLockRegistry","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d4e995963f62973bc53f9a1c463cd714e328b0d528e43a513826a690f74a69f"}]}