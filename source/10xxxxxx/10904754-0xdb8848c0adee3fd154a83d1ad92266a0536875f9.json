{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) internal view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUSDT {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function decimals() external view returns(uint8);\r\n}\r\n\r\ninterface INTSCD {\r\n    function passRepay(uint256 value, address customerAddress, string calldata comment) external;\r\n    function passInterest(uint256 value, address customerAddress, uint256 valueRate, uint256 rate, string calldata comment) external;\r\n    function mayPassRepay_(address customerAddress) external view returns(uint256);\r\n}\r\n\r\ncontract OperatorNTS is Ownable {\r\n\r\n    IUSDT public token;\r\n\r\n    INTSCD public target;\r\n\r\n    address public boss1;\r\n    address public boss2;\r\n\r\n    modifier onlyOwnerAndBoss1 {\r\n        require(isOwner(msg.sender) || msg.sender == boss1);\r\n        _;\r\n    }\r\n\r\n    event TotalPassRepay(uint256 calls, uint256 addresses, uint256 amountUSDT);\r\n    event TotalPassInterest(uint256 calls, uint256 addresses, uint256 amountUSDT);\r\n    event ExceedGasLimit();\r\n\r\n    constructor(address tokenAddr, address NTSCDAddr, address initialOwner, address initialBoss1, address initialBoss2) public Ownable(initialOwner) {\r\n        require(_isContract(tokenAddr) && _isContract(NTSCDAddr));\r\n\r\n        token = IUSDT(tokenAddr);\r\n        target = INTSCD(NTSCDAddr);\r\n\r\n        boss1 = initialBoss1;\r\n        boss2 = initialBoss2;\r\n    }\r\n\r\n    function setTarget(address newTarget) public onlyOwner {\r\n        require(_isContract(newTarget));\r\n\r\n        target = INTSCD(newTarget);\r\n    }\r\n\r\n    function passRepayNTSCD(uint256[] memory values, address[] memory customerAddresses, string[] memory comments, uint256 startIndex) public onlyOwnerAndBoss1 returns(uint256) {\r\n        uint256 _length = values.length;\r\n\r\n        uint256 totalAmount = getSum(values);\r\n\r\n        require(token.balanceOf(address(this)) >= totalAmount, 'Send tokens to this contract first');\r\n        require(getMayPassRepay_() >= totalAmount, 'Allow pass repay for this contract first');\r\n        require(_length == customerAddresses.length && _length == comments.length, 'Arrays are not equal');\r\n\r\n        approve_USDT(address(target), totalAmount);\r\n\r\n        uint256 i;\r\n        for (i = startIndex; i < _length; i++) {\r\n            require(customerAddresses[i] != address(0), 'Zero address was met');\r\n\r\n            target.passRepay(values[i], customerAddresses[i], comments[i]);\r\n\r\n            if (gasleft() < 100000 && i+1 < _length) {\r\n                i++;\r\n                emit ExceedGasLimit();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit TotalPassRepay(i, _length, totalAmount);\r\n        return i;\r\n    }\r\n\r\n    function passInterestNTSCD(uint256[] memory values, address[] memory customerAddresses, string[] memory comments, uint256 valueRate, uint256 rate, uint256 startIndex) public onlyOwnerAndBoss1 returns(uint256) {\r\n        uint256 _length = values.length;\r\n\r\n        uint256 totalAmount = getSum(values);\r\n\r\n        require(token.balanceOf(address(this)) >= totalAmount, 'Send tokens to this contract first');\r\n        require(getMayPassRepay_() > 0, 'Allow pass repay for this contract first');\r\n        require(_length == customerAddresses.length && _length == comments.length, 'Arrays are not equal');\r\n\r\n        approve_USDT(address(target), totalAmount);\r\n\r\n        uint256 i;\r\n        for (i = startIndex; i < _length; i++) {\r\n            require(customerAddresses[i] != address(0), 'Zero address was met');\r\n\r\n            target.passInterest(values[i], customerAddresses[i], valueRate, rate, comments[i]);\r\n\r\n            if (gasleft() < 100000 && i+1 < _length) {\r\n                i++;\r\n                emit ExceedGasLimit();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit TotalPassInterest(i, _length, totalAmount);\r\n        return i;\r\n    }\r\n\r\n    function approve_USDT(address spender, uint256 amount) public onlyOwnerAndBoss1 {\r\n        if (amount > 0 && token.allowance(address(this), spender) > 0) {\r\n            token.approve(spender, 0);\r\n        }\r\n        token.approve(spender, amount);\r\n    }\r\n\r\n    function transferFrom_USDT(address owner, uint256 amount) public onlyOwnerAndBoss1 {\r\n        require(token.allowance(owner, address(this)) >= amount, 'Owner must approve these tokens first');\r\n        token.transferFrom(owner, address(this), amount);\r\n    }\r\n\r\n    function transfer_USDT(address[] memory recipients, uint256[] memory amounts) public {\r\n        require(isOwner(msg.sender) || msg.sender == boss1 || msg.sender == boss2);\r\n        require(recipients.length == amounts.length, 'Arrays are not equal');\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            token.transfer(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function deputeBoss1(address newBoss1) public onlyOwnerAndBoss1 {\r\n        require(newBoss1 != address(0));\r\n\r\n        boss1 = newBoss1;\r\n    }\r\n\r\n    function deputeBoss2(address newBoss2) public onlyOwnerAndBoss1 {\r\n        require(newBoss2 != address(0));\r\n\r\n        boss2 = newBoss2;\r\n    }\r\n\r\n    function getMayPassRepay_() public view returns(uint256) {\r\n        return target.mayPassRepay_(address(this));\r\n    }\r\n\r\n    function getSum(uint256[] memory values) public pure returns(uint256) {\r\n        uint256 totalAmount;\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            totalAmount += values[i];\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom_USDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boss1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoss2\",\"type\":\"address\"}],\"name\":\"deputeBoss2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"customerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"valueRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"passInterestNTSCD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"customerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"passRepayNTSCD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transfer_USDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMayPassRepay_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve_USDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoss1\",\"type\":\"address\"}],\"name\":\"deputeBoss1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"getSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract INTSCD\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boss2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IUSDT\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NTSCDAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBoss1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBoss2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addresses\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"TotalPassRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addresses\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"TotalPassInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExceedGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OperatorNTS","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000b5670930ef25ba98b87c88f635efd10310fae13e0000000000000000000000002d35e8c931befb9fdc3d5ecf759a9d4a81ef23f3000000000000000000000000f43414abb5a05c3037910506571e4333e16a4bf4000000000000000000000000ca27ff938c760391e76b7ada887288caf9bf6ada","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1007c7e547e121ff65e0f2286814121296fc3cebddc11d8ac0b73c7fb4f028ca"}]}