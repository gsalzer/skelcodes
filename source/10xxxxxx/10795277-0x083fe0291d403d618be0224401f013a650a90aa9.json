{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/interface/IERC20.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interface/ERC2917-Interface.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n// import 'contracts/interface/IERC20.sol';\r\n\r\ninterface IERC2917 is IERC20 {\r\n\r\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\r\n    /// It emits with the old interests amount and the new interests amount.\r\n    event InterestsPerBlockChanged (uint oldValue, uint newValue);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityIncreased (address indexed user, uint value);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n\r\n    \r\n    /// @dev Return the current contract's interests rate per block.\r\n    /// @return The amount of interests currently producing per each block.\r\n    function interestsPerBlock() external view returns (uint);\r\n\r\n    /// @notice Change the current contract's interests rate.\r\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\r\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestsPerBlockChanged event.\r\n    function changeInterestsPerBlock(uint value) external returns (bool);\r\n\r\n    /// @notice It will get the productivity of given user.\r\n    /// @dev it will return 0 if user has no productivity proved in the contract.\r\n    /// @return user's productivity and overall productivity.\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n\r\n    /// @notice increase a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity added success.\r\n    function increaseProductivity(address user, uint value) external returns (uint);\r\n\r\n    /// @notice decrease a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity removed success.\r\n    function decreaseProductivity(address user, uint value) external returns (uint);\r\n\r\n    /// @notice take() will return the interests that callee will get at current block height.\r\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\r\n    /// @return amount of the interests that user are able to mint() at current block height.\r\n    function take() external view returns (uint);\r\n\r\n    /// @notice similar to take(), but with the block height joined to calculate return.\r\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\r\n    /// @return amount of interests and the block height.\r\n    function takeWithBlock() external view returns (uint, uint);\r\n\r\n    /// @notice mint the avaiable interests to callee.\r\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\r\n    /// @return the amount of interests minted.\r\n    function mint(address to) external returns (uint);\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/Upgradable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ncontract UpgradableProduct {\r\n    address public impl;\r\n\r\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\r\n\r\n    constructor() public {\r\n        impl = msg.sender;\r\n    }\r\n\r\n    modifier requireImpl() {\r\n        require(msg.sender == impl, 'FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function upgradeImpl(address _newImpl) public requireImpl {\r\n        require(_newImpl != address(0), 'INVALID_ADDRESS');\r\n        require(_newImpl != impl, 'NO_CHANGE');\r\n        address lastImpl = impl;\r\n        impl = _newImpl;\r\n        emit ImplChanged(lastImpl, _newImpl);\r\n    }\r\n}\r\n\r\ncontract UpgradableGovernance {\r\n    address public governor;\r\n\r\n    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\r\n\r\n    constructor() public {\r\n        governor = msg.sender;\r\n    }\r\n\r\n    modifier requireGovernor() {\r\n        require(msg.sender == governor, 'FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\r\n        require(_newGovernor != address(0), 'INVALID_ADDRESS');\r\n        require(_newGovernor != governor, 'NO_CHANGE');\r\n        address lastGovernor = governor;\r\n        governor = _newGovernor;\r\n        emit GovernorChanged(lastGovernor, _newGovernor);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Root file: contracts/WasabiToken.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\n// import 'contracts/interface/ERC2917-Interface.sol';\r\n// import 'contracts/libraries/Upgradable.sol';\r\n// import 'contracts/libraries/SafeMath.sol';\r\n\r\n/*\r\n    The Objective of ERC2917 Demo is to implement a decentralized staking mechanism, which calculates users' share\r\n    by accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\r\n\r\n        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\r\n       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\r\n       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\r\n\r\n*/\r\ncontract WasabiToken is IERC2917, UpgradableProduct, UpgradableGovernance {\r\n    using SafeMath for uint;\r\n\r\n    uint public mintCumulation;\r\n    uint public maxMintCumulation;\r\n\r\n    struct Production {\r\n        uint amount;            // how many tokens could be produced on block basis\r\n        uint total;             // total produced tokens\r\n        uint block;             // last updated block number\r\n    }\r\n\r\n    Production internal grossProduct = Production(0, 0, 0);\r\n\r\n    struct Productivity {\r\n        uint product;           // user's productivity\r\n        uint total;             // total productivity\r\n        uint block;             // record's block number\r\n        uint user;              // accumulated products\r\n        uint global;            // global accumulated products\r\n        uint gross;             // global gross products\r\n    }\r\n\r\n    Productivity public global;\r\n    mapping(address => Productivity) public users;\r\n\r\n    uint private unlocked = 1;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    // implementation of ERC20 interfaces.\r\n    string override public name;\r\n    string override public symbol;\r\n    uint8 override public decimals = 18;\r\n    uint override public totalSupply;\r\n\r\n    mapping(address => uint) override public balanceOf;\r\n    mapping(address => mapping(address => uint)) override public allowance;\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        if (to == address(0)) { // burn\r\n            totalSupply = totalSupply.sub(value);\r\n        }\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external override returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\r\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // end of implementation of ERC20\r\n\r\n    // creation of the interests token.\r\n    constructor(uint _interestsRate, uint _maxMintCumulation) UpgradableProduct() UpgradableGovernance() public {\r\n        name        = \"Wasabi Swap\";\r\n        symbol      = \"WASABI\";\r\n        decimals    = 18;\r\n\r\n        maxMintCumulation = _maxMintCumulation;\r\n        grossProduct.amount = _interestsRate;\r\n        grossProduct.block  = block.number;\r\n    }\r\n\r\n    // When calling _computeBlockProduct() it calculates the area of productivity * time since last time and accumulate it.\r\n    function _computeBlockProduct() private view returns (uint) {\r\n        uint elapsed = block.number.sub(grossProduct.block);\r\n        return grossProduct.amount.mul(elapsed);\r\n    }\r\n\r\n    // compute productivity returns total productivity of a user.\r\n    function _computeProductivity(Productivity memory user) private view returns (uint) {\r\n        uint blocks = block.number.sub(user.block);\r\n        return user.total.mul(blocks);\r\n    }\r\n\r\n    // update users' productivity by value with boolean value indicating increase  or decrease.\r\n    function _updateProductivity(Productivity storage user, uint value, bool increase) private returns (uint productivity) {\r\n        user.product      = user.product.add(_computeProductivity(user));\r\n        global.product    = global.product.add(_computeProductivity(global));\r\n\r\n        require(global.product <= uint(-1), 'GLOBAL_PRODUCT_OVERFLOW');\r\n\r\n        user.block      = block.number;\r\n        global.block    = block.number;\r\n        if(increase) {\r\n            user.total   = user.total.add(value);\r\n            global.total = global.total.add(value);\r\n        }\r\n        else {\r\n            user.total   = user.total.sub(value);\r\n            global.total = global.total.sub(value);\r\n        }\r\n        productivity = user.total;\r\n    }\r\n\r\n    // External function call\r\n    // This function adjust how many token will be produced by each block, eg:\r\n    // changeAmountPerBlock(100)\r\n    // will set the produce rate to 100/block.\r\n    function changeInterestsPerBlock(uint value) external override requireGovernor returns (bool) {\r\n        uint old = grossProduct.amount;\r\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\r\n\r\n        uint product                = _computeBlockProduct();\r\n        grossProduct.total          = grossProduct.total.add(product);\r\n        grossProduct.block          = block.number;\r\n        grossProduct.amount         = value;\r\n        require(grossProduct.total <= uint(-1), 'BLOCK_PRODUCT_OVERFLOW');\r\n\r\n        emit InterestsPerBlockChanged(old, value);\r\n        return true;\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function increaseProductivity(address user, uint value) external override requireImpl returns (uint) {\r\n        if(mintCumulation >= maxMintCumulation)\r\n            return 0;\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n        Productivity storage product        = users[user];\r\n\r\n        if (product.block == 0) {\r\n            product.gross = grossProduct.total.add(_computeBlockProduct());\r\n            product.global = global.product.add(_computeProductivity(global));\r\n        }\r\n        \r\n        uint _productivity = _updateProductivity(product, value, true);\r\n        emit ProductivityIncreased(user, value);\r\n        return _productivity;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function decreaseProductivity(address user, uint value) external override requireImpl returns (uint) {\r\n        if(mintCumulation >= maxMintCumulation)\r\n            return 0;\r\n        Productivity storage product = users[user];\r\n\r\n        require(value > 0 && product.total >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        uint _productivity = _updateProductivity(product, value, false);\r\n        emit ProductivityDecreased(user, value);\r\n        return _productivity;\r\n    }\r\n\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function mint(address to) external override lock returns (uint) {\r\n        if(mintCumulation >= maxMintCumulation)\r\n            return 0;\r\n\r\n        (uint gp, uint userProduct, uint globalProduct, uint amount) = _computeUserProduct();\r\n\r\n        if(amount == 0)\r\n            return 0;\r\n\r\n        Productivity storage product = users[msg.sender];\r\n        product.gross   = gp;\r\n        product.user    = userProduct;\r\n        product.global  = globalProduct;\r\n\r\n        if (mintCumulation.add(amount) > maxMintCumulation) {\r\n            amount = mintCumulation.add(amount).sub(maxMintCumulation);\r\n        }\r\n        balanceOf[to]   = balanceOf[to].add(amount);\r\n        totalSupply     = totalSupply.add(amount);\r\n        mintCumulation  = mintCumulation.add(amount);\r\n\r\n        emit Transfer(address(0), msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many token he will be able to mint.\r\n    function _computeUserProduct() private view returns (uint gp, uint userProduct, uint globalProduct, uint amount) {\r\n        Productivity memory product    = users[msg.sender];\r\n\r\n        gp              = grossProduct.total.add(_computeBlockProduct());\r\n        userProduct     = product.product.add(_computeProductivity(product));\r\n        globalProduct   = global.product.add(_computeProductivity(global));\r\n\r\n        uint deltaBlockProduct  = gp.sub(product.gross);\r\n        uint numerator          = userProduct.sub(product.user);\r\n        uint denominator        = globalProduct.sub(product.global);\r\n\r\n        if (denominator > 0) {\r\n            amount = deltaBlockProduct.mul(numerator) / denominator;\r\n        }\r\n    }\r\n\r\n    function burnAndReward(uint amountBurn, address rewardToken) public returns (uint amountReward) {\r\n        uint totalReward = IERC20(rewardToken).balanceOf(address(this));\r\n        require(totalReward > 0 && totalSupply > 0, \"Invalid.\");\r\n        require(IERC20(rewardToken).balanceOf(msg.sender) >= amountBurn, \"Insufficient.\");\r\n\r\n        amountReward = amountBurn.mul(totalReward).div(totalSupply);\r\n        _transfer(msg.sender, address(0), amountBurn);\r\n        IERC20(rewardToken).transfer(msg.sender, amountReward);\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) external override view returns (uint, uint) {\r\n        return (users[user].total, global.total);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function interestsPerBlock() external override view returns (uint) {\r\n        return grossProduct.amount;\r\n    }\r\n\r\n    // Returns how much a user could earn.\r\n    function take() external override view returns (uint) {\r\n        if(mintCumulation >= maxMintCumulation)\r\n            return 0;\r\n        (, , , uint amount) = _computeUserProduct();\r\n        return amount;\r\n    }\r\n\r\n    // Returns how much a user could earn plus the giving block number.\r\n    function takeWithBlock() external override view returns (uint, uint) {\r\n        if(mintCumulation >= maxMintCumulation)\r\n            return (0, block.number);\r\n        (, , , uint amount) = _computeUserProduct();\r\n        return (amount, block.number);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintCumulation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"InterestsPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProductivityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"burnAndReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeInterestsPerBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gross\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWithBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"upgradeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"upgradeImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gross\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WasabiToken","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25fc0d83123b9710b68bda8918c9906d713f141fa3e59beb9fcf2b49f947fd5b"}]}