{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    function totalSupply() external virtual view returns (uint256);\r\n    function balanceOf(address account) external virtual view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n    function allowance(address owner, address spender) external virtual view returns (uint256);\r\n    function approve(address spender, uint256 amount) external virtual returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Vesting {\r\n    using SafeMath for uint256;\r\n    ERC20 token = ERC20(0xAeBCC16DDf84830A163079ea4BC1c5A82819B2fa);\r\n    bool hasDeposited  = false;\r\n    \r\n    address owner;\r\n    uint256 depositedAmount;\r\n    uint256 withdrawnAmount = 0;\r\n    uint256 finalBlock;\r\n    uint256 vested_period;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function deposit(uint256 amount, uint256 blocksUntilCompleted) public onlyOwner {\r\n        require(!hasDeposited);\r\n        \r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        \r\n        depositedAmount = amount;\r\n        finalBlock = block.number.add(blocksUntilCompleted);\r\n\r\n        vested_period = blocksUntilCompleted;\r\n        \r\n        hasDeposited = true;\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        require(hasDeposited);\r\n        \r\n        if(block.number > finalBlock){\r\n            token.transfer(owner, token.balanceOf(address(this)));\r\n            hasDeposited = false;\r\n        } \r\n        else{\r\n    \t    uint256 numerator = depositedAmount.mul(vested_period.sub(finalBlock.sub(block.number)));\r\n            uint256 allowedAmount = numerator.div(vested_period);\r\n            uint256 toWithdraw = allowedAmount.sub(withdrawnAmount);\r\n            \r\n            token.transfer(owner, toWithdraw);\r\n            \r\n            withdrawnAmount = withdrawnAmount.add(toWithdraw);\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksUntilCompleted\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69d2568a0d2f6f2508065f47900cdf81c08e484c29e722ec6082298fe7c6402e"}]}