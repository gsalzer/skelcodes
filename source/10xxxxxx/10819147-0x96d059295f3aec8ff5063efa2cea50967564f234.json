{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.7.0;\r\n\r\ncontract X365 {\r\n    \r\n    struct UserAccount {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n         \r\n        mapping(uint8 => bool) activeZ3Levels;\r\n        mapping(uint8 => bool) activeZ6Levels;\r\n        \r\n        mapping(uint8 => Z3) Z3Matrix;\r\n        mapping(uint8 => Z4) Z6Matrix;\r\n    }\r\n    \r\n    struct Z3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Z4{\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 12;\r\n    \r\n    mapping(address => UserAccount) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n\r\n    uint public lastUserId = 2;\r\n    address public  owner;\r\n    address public partner;\r\n    mapping(uint8 => uint) public levelPrice;\r\n\r\n    event UserRegistration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Recycle(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event UpgradeLevel(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewReferral(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedRewardsReceived(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event RewardsSent(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    event IncomeTransferred(address indexed user,address indexed from,uint256 value,uint8 matrix, uint8 level);\r\n    \r\n    constructor(address ownerAddress, address partnerAddress) public {\r\n        levelPrice[1] = 0.025 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n           owner = ownerAddress;\r\n           partner = partnerAddress;\r\n      UserAccount memory user ;\r\n          user= UserAccount({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });   \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        for (uint8 j = 1; j <= LAST_LEVEL; j++) {\r\n            users[ownerAddress].activeZ3Levels[j] = true;\r\n            users[ownerAddress].activeZ6Levels[j] = true;\r\n        }\r\n        userIds[1] = ownerAddress;\r\n        \r\n    }\r\n  \r\n    \r\n    function regUserExternal(address referrerAddress) external payable {\r\n        userRegistration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyLevel(uint8 matrix, uint8 level) external payable {\r\n        require(msg.value == levelPrice[level] ,\"invalid price\");\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n     \r\n       \r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n       \r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeZ3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].Z3Matrix[level-1].blocked) {\r\n                users[msg.sender].Z3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeZ3Referrer = nextFreeZ3Referrer(msg.sender, level);\r\n            users[msg.sender].Z3Matrix[level].currentReferrer = freeZ3Referrer;\r\n            users[msg.sender].activeZ3Levels[level] = true;\r\n            newZ3Referrer(msg.sender, freeZ3Referrer, level);\r\n            \r\n            emit UpgradeLevel(msg.sender, freeZ3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeZ6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].Z6Matrix[level-1].blocked) {\r\n                users[msg.sender].Z6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeZ6Referrer = nextFreeZ4Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeZ6Levels[level] = true;\r\n            newZ4Referrer(msg.sender, freeZ6Referrer, level);\r\n            \r\n            emit UpgradeLevel(msg.sender, freeZ6Referrer, 2, level);\r\n        }\r\n    }    \r\n    \r\n    function userRegistration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.05 ether, \"Invalid Cost\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n    \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cc\");\r\n        \r\n        UserAccount memory user = UserAccount({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeZ3Levels[1] = true; \r\n        users[userAddress].activeZ6Levels[1] = true;\r\n        \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeZ3Referrer = nextFreeZ3Referrer(userAddress, 1);\r\n        users[userAddress].Z3Matrix[1].currentReferrer = freeZ3Referrer;\r\n        newZ3Referrer(userAddress, freeZ3Referrer, 1);\r\n\r\n        newZ4Referrer(userAddress, nextFreeZ4Referrer(userAddress, 1), 1);\r\n        \r\n        emit UserRegistration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function newZ3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].Z3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].Z3Matrix[level].referrals.length < 3) {\r\n            emit NewReferral(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].Z3Matrix[level].referrals.length));\r\n            return sendRewards(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewReferral(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].Z3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeZ3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].Z3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = nextFreeZ3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].Z3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].Z3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].Z3Matrix[level].reinvestCount++;\r\n            emit Recycle(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            newZ3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendRewards(owner, userAddress, 1, level);\r\n            users[owner].Z3Matrix[level].reinvestCount++;\r\n            emit Recycle(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function newZ4Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeZ6Levels[level], \"500\");\r\n        \r\n        if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].Z6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewReferral(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].Z6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].Z6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendRewards(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].Z6Matrix[level].currentReferrer;            \r\n            users[ref].Z6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].Z6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].Z6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].Z6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewReferral(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewReferral(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].Z6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewReferral(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewReferral(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].Z6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewReferral(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewReferral(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return newZ4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].Z6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].Z6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].Z6Matrix[level].closedPart)) {\r\n\r\n                newZ4(userAddress, referrerAddress, level, true);\r\n                return newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].Z6Matrix[level].closedPart) {\r\n            newZ4(userAddress, referrerAddress, level, true);\r\n                return newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                newZ4(userAddress, referrerAddress, level, false);\r\n                return newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            newZ4(userAddress, referrerAddress, level, false);\r\n            return newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            newZ4(userAddress, referrerAddress, level, true);\r\n            return newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0]].Z6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1]].Z6Matrix[level].firstLevelReferrals.length) {\r\n            newZ4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            newZ4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        newZ4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function newZ4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0]].Z6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewReferral(userAddress, users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0]].Z6Matrix[level].firstLevelReferrals.length));\r\n            emit NewReferral(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0]].Z6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].Z6Matrix[level].currentReferrer = users[referrerAddress].Z6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1]].Z6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewReferral(userAddress, users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1]].Z6Matrix[level].firstLevelReferrals.length));\r\n            emit NewReferral(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1]].Z6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].Z6Matrix[level].currentReferrer = users[referrerAddress].Z6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function newZ4ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].Z6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendRewards(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory Z6 = users[users[referrerAddress].Z6Matrix[level].currentReferrer].Z6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (Z6.length == 2) {\r\n            if (Z6[0] == referrerAddress ||\r\n                Z6[1] == referrerAddress) {\r\n                users[users[referrerAddress].Z6Matrix[level].currentReferrer].Z6Matrix[level].closedPart = referrerAddress;\r\n            } else if (Z6.length == 1) {\r\n                if (Z6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].Z6Matrix[level].currentReferrer].Z6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].Z6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].Z6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].Z6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeZ6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].Z6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].Z6Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = nextFreeZ4Referrer(referrerAddress, level);\r\n\r\n            emit Recycle(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            newZ4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Recycle(owner, address(0), userAddress, 2, level);\r\n            sendRewards(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function nextFreeZ3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeZ3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    \r\n    function nextFreeZ4Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeZ6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersZ3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool, bool) {\r\n        return (users[userAddress].Z3Matrix[level].currentReferrer,\r\n                users[userAddress].Z3Matrix[level].referrals,\r\n                users[userAddress].Z3Matrix[level].blocked,\r\n                users[userAddress].activeZ3Levels[level]);\r\n    }\r\n\r\n    function usersZ4Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, bool, address) {\r\n        return (users[userAddress].Z6Matrix[level].currentReferrer,\r\n                users[userAddress].Z6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].Z6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].Z6Matrix[level].blocked,\r\n                users[userAddress].activeZ6Levels[level],\r\n                users[userAddress].Z6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function getRewardRecipient(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].Z3Matrix[level].blocked) {\r\n                    emit MissedRewardsReceived(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].Z3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].Z6Matrix[level].blocked) {\r\n                    emit MissedRewardsReceived(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].Z6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendRewards(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = getRewardRecipient(userAddress, _from, matrix, level);\r\n        \r\n       if (receiver == owner) {\r\n           if (!address(uint160(partner)).send(levelPrice[level] * 10/100)) {\r\n            address(uint160(partner)).transfer(address(this).balance*10/100);    \r\n        }\r\n           if (!address(uint160(receiver)).send(levelPrice[level] * 90/100)) {\r\n             emit  IncomeTransferred(receiver,_from,address(this).balance * 90/100, matrix,level);\r\n            address(uint160(receiver)).transfer(address(this).balance*90/100);\r\n            return;              \r\n        }\r\n        \r\n         emit  IncomeTransferred(receiver,_from,levelPrice[level]*90/100,matrix,level);\r\n        if (isExtraDividends) {\r\n            emit RewardsSent(_from, receiver, matrix, level);\r\n        }\r\n       } else {\r\n            if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n             emit  IncomeTransferred(receiver,_from,address(this).balance, matrix,level);\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n         emit  IncomeTransferred(receiver,_from,levelPrice[level],matrix,level);\r\n        if (isExtraDividends) {\r\n            emit RewardsSent(_from, receiver, matrix, level);\r\n        }\r\n       }  \r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matrix\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"nextFreeZ4Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersZ3Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersZ4Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"nextFreeZ3Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"regUserExternal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"partnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"UpgradeLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedRewardsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"RewardsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"IncomeTransferred\",\"type\":\"event\"}]","ContractName":"X365","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc77ca1f37cad472589465818ccd032d1dfb6f9f0000000000000000000000005323de4e91fef695b7a1627120b1bcb88d5ccc07","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://241befb180b6ef8870a575110607782a261313d4a8295a46bd24b28ae1561966"}]}