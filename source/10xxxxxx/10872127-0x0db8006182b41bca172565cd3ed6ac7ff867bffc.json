{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.9;\r\n\r\ninterface ISDCP {\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IV2Pair {\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n}\r\n\r\ncontract Forge {\r\n    \r\n    struct User {\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        \r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n    \r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 private constant LAST_LEVEL = 12;\r\n    \r\n    uint128 private useIds;\r\n    uint128 private ethAmounts;\r\n\r\n    address private immutable owner;\r\n    address private immutable v2Pair;\r\n    address private immutable sdcpToken;\r\n    address private immutable pool;\r\n    \r\n    mapping(address => User) private users;\r\n    \r\n    mapping(uint8 => uint) internal levelPrice;\r\n    \r\n    event Registration(address indexed user, address indexed referrer);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n    \r\n    constructor(address ownerAddress, address sdcp , address v2, address p ) public {\r\n      sdcpToken = sdcp;\r\n      v2Pair = v2;\r\n      pool = p;\r\n      require(IV2Pair(v2).token0() == sdcp || IV2Pair(v2).token1() == sdcp, \"E/no sdcp\");\r\n\r\n        levelPrice[1] = 0.025 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        \r\n        User memory user = User({\r\n            referrer: address(0),    \r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n        }\r\n    }\r\n    \r\n    function upTeam(address[] calldata team) external {\r\n      require(msg.sender == owner, \"E/not\");\r\n      uint len = team.length;\r\n      for(uint8 t = 0; t < len; t++) {\r\n          for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[team[t]].activeX3Levels[i] = true;\r\n            users[team[t]].activeX6Levels[i] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    function join(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        ethAmounts += uint128(levelPrice[level]);\r\n        uint fee = calcBurnFee(levelPrice[level]);\r\n        require(burnFee(msg.sender, fee), \"fee not enough\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\r\n        }\r\n    } \r\n\r\n    function calcBurnFee(uint value) private view returns (uint) {\r\n      (uint reserve0, uint reserve1,) = IV2Pair(v2Pair).getReserves();\r\n      require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');\r\n      \r\n      if(IV2Pair(v2Pair).token0() == sdcpToken) {\r\n        return value * reserve0 / reserve1 / 10;\r\n      } else {\r\n        return value * reserve1 / reserve0 / 10;\r\n      }\r\n    }\r\n\r\n    function burnFee(address user, uint brunAmount) private returns (bool) {\r\n      try ISDCP(sdcpToken).transferFrom(user, pool, brunAmount) returns (bool) {\r\n        return true;\r\n      } catch Error(string memory /*reason*/) {\r\n        return false;\r\n      }\r\n    }   \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint fee = calcBurnFee(0.05 ether);\r\n        require(burnFee(userAddress, fee), \"fee not enough\");\r\n        \r\n        useIds += 1;\r\n        ethAmounts += 0.05 ether;\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeX3Levels[1] = true; \r\n        users[userAddress].activeX6Levels[1] = true;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n\r\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress);\r\n    }\r\n    \r\n\r\n\r\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        resetX3(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function resetX3 (address userAddress, address referrerAddress, uint8 level) private {\r\n\r\n      if (referrerAddress != owner) {\r\n\r\n        uint fee = calcBurnFee(levelPrice[level]);\r\n        if(!burnFee(referrerAddress, fee)) { \r\n          address freeX3Referrer = findFreeX3Referrer(referrerAddress, level);\r\n          return updateX3Referrer(referrerAddress, freeX3Referrer, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\r\n        if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n            users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n        }\r\n        \r\n        users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n        emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n        updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n      } else {\r\n          sendETHDividends(owner, userAddress, 1, level);\r\n          users[owner].x3Matrix[level].reinvestCount++;\r\n          emit Reinvest(owner, address(0), userAddress, 1, level);\r\n      }\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX6Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n          users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            }\r\n        } else if (x6.length == 1) {\r\n          if (x6[0] == referrerAddress) {\r\n          users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n          }\r\n        }\r\n        \r\n        resetX6(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function resetX6(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (referrerAddress != owner) {\r\n          uint fee = calcBurnFee(levelPrice[level]);\r\n          if(!burnFee(referrerAddress, fee)) { \r\n            address freeX6Referrer = findFreeX6Referrer(referrerAddress, level);\r\n            return updateX6Referrer(referrerAddress, freeX6Referrer, level);\r\n          }\r\n\r\n          users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n          users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n          users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n          if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n              users[referrerAddress].x6Matrix[level].blocked = true;\r\n          }\r\n\r\n          users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n\r\n          address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\r\n\r\n          emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n          updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeX3Referrer(address userAddress, uint8 level) internal view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeX6Referrer(address userAddress, uint8 level) internal view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory,  uint, bool, bool ) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n                users[userAddress].x3Matrix[level].referrals,\r\n                users[userAddress].x3Matrix[level].reinvestCount,\r\n                users[userAddress].x3Matrix[level].blocked,\r\n                users[userAddress].activeX3Levels[level]);\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, uint,  bool, bool) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n                users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x6Matrix[level].reinvestCount,\r\n                users[userAddress].x6Matrix[level].blocked,\r\n                users[userAddress].activeX6Levels[level]);\r\n    }\r\n    \r\n    function usersStatus(address userAddress) external view returns(address, uint, uint128, uint128) {\r\n      return (users[userAddress].referrer, users[userAddress].partnersCount, useIds, ethAmounts);\r\n    }\r\n\r\n    function isUserExists(address user) private view returns (bool) {\r\n        return (user == owner || users[user].referrer != address(0));\r\n    }\r\n    \r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n        if (!payable(receiver).send(levelPrice[level])) {\r\n            return payable(receiver).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sdcp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"team\",\"type\":\"address[]\"}],\"name\":\"upTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Forge","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000011e2e6c98b5e092b119dff93e2a3a408820200e3000000000000000000000000c59ddee8be619680a3b9489eb864b30270f2070d0000000000000000000000002ea6fac74c898811b504aa6f74d8e33bf0dc8554000000000000000000000000f92ef0daa55a8a0209946e91c777500565880f7c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cfba628e09bf2472b9832d9d56d50f8c019316da5fdd414d176ecf1c97d0715c"}]}