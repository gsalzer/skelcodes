{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n// \n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\n\n// \n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\n\n// \n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\n\n// \n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\n\n// \ncontract PublicSaleContract is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tevent Whitelist(address indexed _address, bool _isStaking);\r\n\tevent Deposit(uint256 _timestamp, address indexed _address);\r\n\tevent Refund(uint256 _timestamp, address indexed _address);\r\n\tevent TokenReleased(uint256 _timestamp, address indexed _address, uint256 _amount);\r\n\r\n\t// Token Contract\r\n\tIERC20 tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);\r\n\tuint256 public noStakeReleaseAmount = 166666.67 ether;\r\n\tuint256 public stakeReleaseFirstBatchAmount = 83333.33 ether;\r\n\tuint256 public stakeReleaseSecondBatchAmount = 87500 ether;\r\n\r\n\t// Receiving Address\r\n\taddress payable receivingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;\r\n\r\n\t// Contract status\r\n\tContractStatus public status;\r\n\r\n\tenum ContractStatus {\r\n\t\tINIT, \r\n\t\tACCEPT_DEPOSIT, \r\n\t\tFIRST_BATCH_TOKEN_RELEASED, \r\n\t\tSECOND_BATCH_TOKEN_RELEASED\r\n\t}\r\n\r\n\r\n\t// Whitelist\r\n\tmapping(address => WhitelistDetail) whitelist;\r\n\r\n\tstruct WhitelistDetail {\r\n        // Check if address is whitelisted\r\n        bool isWhitelisted;\r\n\r\n        // Check if address is staking\r\n        bool isStaking;\r\n\r\n        // Check if address has deposited\r\n        bool hasDeposited;\r\n    }\r\n\r\n\t// Total count of whitelisted address\r\n\tuint256 public whitelistCount = 0;\r\n\r\n\t// Addresses that deposited\r\n\taddress[] depositAddresses;\r\n\tuint256 dIndex = 0;\r\n\r\n\t// Addresses for second batch release\r\n\taddress[] secondBatchAddresses;\r\n\tuint256 sIndex = 0;\r\n\r\n\t// Total count of deposits\r\n\tuint256 public depositCount = 0;\r\n\r\n\t// Deposit ticket size\r\n\tuint256 public ticketSize = 2.85 ether;\r\n\r\n\t// Duration of stake\r\n\tuint256 constant stakeDuration = 30 days;\r\n\r\n\t// Time that staking starts\r\n\tuint256 public stakeStart;\r\n\r\n\tconstructor() public {\r\n\t\tstatus = ContractStatus.INIT;\r\n\t}\r\n\r\n\tfunction updateReceivingAddress(address payable _address) public onlyOwner {\r\n\t\treceivingAddress = _address;\r\n\t}\r\n\r\n\t/**\r\n     * @dev ContractStatus.INIT functions\r\n     */\r\n\r\n\tfunction whitelistAddresses(address[] memory _addresses, bool[] memory _isStaking) public onlyOwner {\r\n\t\trequire(status == ContractStatus.INIT);\r\n\r\n\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\r\n\t\t\tif (!whitelist[_addresses[i]].isWhitelisted) {\r\n\t\t\t\twhitelistCount = whitelistCount.add(1);\r\n\t\t\t}\r\n\r\n\t\t\twhitelist[_addresses[i]].isWhitelisted = true;\r\n\t\t\twhitelist[_addresses[i]].isStaking = _isStaking[i];\r\n\r\n\t\t\temit Whitelist(_addresses[i], _isStaking[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction updateTicketSize(uint256 _amount) public onlyOwner {\r\n\t\trequire(status == ContractStatus.INIT);\r\n\r\n\t\tticketSize = _amount;\r\n\t}\r\n\r\n\tfunction acceptDeposit() public onlyOwner {\r\n\t\trequire(status == ContractStatus.INIT);\r\n\r\n\t\tstatus = ContractStatus.ACCEPT_DEPOSIT;\r\n\t}\r\n\r\n\t/**\r\n     * @dev ContractStatus.ACCEPT_DEPOSIT functions\r\n     */\r\n\r\n    receive() external payable {\r\n\t\tdeposit();\r\n\t}\r\n\r\n\tfunction deposit() internal {\r\n\t\trequire(status == ContractStatus.ACCEPT_DEPOSIT);\r\n\t\trequire(whitelist[msg.sender].isWhitelisted && !whitelist[msg.sender].hasDeposited);\r\n\t\trequire(msg.value >= ticketSize);\r\n\r\n\t\tmsg.sender.transfer(msg.value.sub(ticketSize));\r\n\t\twhitelist[msg.sender].hasDeposited = true;\r\n\t\tdepositAddresses.push(msg.sender);\r\n\t\tdepositCount = depositCount.add(1);\r\n\r\n\t\temit Deposit(block.timestamp, msg.sender);\r\n\t}\r\n\r\n\tfunction refund(address payable _address) public onlyOwner {\r\n\t\trequire(whitelist[_address].hasDeposited);\r\n\r\n\t\tdelete whitelist[_address];\r\n\t\t_address.transfer(ticketSize);\r\n\t\tdepositCount = depositCount.sub(1);\r\n\r\n\t\temit Refund(block.timestamp, _address);\r\n\t}\r\n\r\n\tfunction refundMultiple(address payable[] memory _addresses) public onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _addresses.length; i++) {\r\n\t\t\tif (whitelist[_addresses[i]].hasDeposited) {\r\n\t\t\t\tdelete whitelist[_addresses[i]];\r\n\t\t\t\t_addresses[i].transfer(ticketSize);\r\n\t\t\t\tdepositCount = depositCount.sub(1);\r\n\r\n\t\t\t\temit Refund(block.timestamp, _addresses[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction releaseFirstBatchTokens(uint256 _count) public onlyOwner {\r\n\t\trequire(status == ContractStatus.ACCEPT_DEPOSIT);\r\n\r\n\t\tfor (uint256 i = 0; i < _count; i++) {\r\n\t\t\tif (whitelist[depositAddresses[dIndex]].isWhitelisted) {\r\n\t\t\t\tif (whitelist[depositAddresses[dIndex]].isStaking) {\r\n\t\t\t\t\t// Is staking\r\n\t\t\t\t\ttokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);\r\n\t\t\t\t\tsecondBatchAddresses.push(depositAddresses[dIndex]);\r\n\r\n\t\t\t\t\temit TokenReleased(block.timestamp, depositAddresses[dIndex], stakeReleaseFirstBatchAmount);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Not staking\r\n\t\t\t\t\ttokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);\r\n\r\n\t\t\t\t\temit TokenReleased(block.timestamp, depositAddresses[dIndex], noStakeReleaseAmount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdIndex = dIndex.add(1);\r\n\r\n\t\t\tif (dIndex == depositAddresses.length) {\r\n\t\t\t\treceivingAddress.transfer(address(this).balance);\r\n\t\t\t\tstakeStart = block.timestamp;\r\n\t\t\t\tstatus = ContractStatus.FIRST_BATCH_TOKEN_RELEASED;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n     * @dev ContractStatus.FIRST_BATCH_TOKEN_RELEASED functions\r\n     */\r\n\r\n    function releaseSecondBatchTokens(uint256 _count) public onlyOwner {\r\n\t\trequire(status == ContractStatus.FIRST_BATCH_TOKEN_RELEASED);\r\n\t\trequire(block.timestamp > (stakeStart + stakeDuration));\r\n\r\n\t\tfor (uint256 i = 0; i < _count; i++) {\r\n\t\t\ttokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);\r\n\t\t\temit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);\r\n\r\n\t\t\tsIndex = sIndex.add(1);\r\n\r\n\t\t\tif (sIndex == secondBatchAddresses.length) {\r\n\t\t\t\tstatus = ContractStatus.SECOND_BATCH_TOKEN_RELEASED;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n     * @dev ContractStatus.SECOND_BATCH_TOKEN_RELEASED functions\r\n     */\r\n\r\n\tfunction withdrawTokens() public onlyOwner {\r\n\t\trequire(status == ContractStatus.SECOND_BATCH_TOKEN_RELEASED);\r\n\r\n\t\ttokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isStaking\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noStakeReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"refundMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"releaseFirstBatchTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"releaseSecondBatchTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeReleaseFirstBatchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeReleaseSecondBatchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum PublicSaleContract.ContractStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateReceivingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateTicketSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isStaking\",\"type\":\"bool[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PublicSaleContract","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}