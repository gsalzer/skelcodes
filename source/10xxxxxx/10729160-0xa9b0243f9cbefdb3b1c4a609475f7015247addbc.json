{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface Usdt_ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract UsdtLottery {\r\n    event WithdrawMember(uint indexed orderId, address indexed from, address to, uint amount);\r\n    event WithdrawSystem(address indexed from, address indexed to, uint amount);\r\n\r\n    address private owner; \r\n    //管理账户\r\n    address private adminAddr;\r\n    //usdt-erc20合约地址\r\n    address private usdtContractAddr = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    string private privateKey = \"hello\";\r\n\r\n    mapping(uint => uint) withdrawOrderMap;\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function balanceOf() public view returns (uint) {\r\n        return Usdt_ERC20(usdtContractAddr).balanceOf(address(this));\r\n    }\r\n\r\n    function getBytes(uint num) internal pure returns (bytes memory) {\r\n        bytes memory numBytes = new bytes(32);\r\n        assembly { mstore(add(numBytes, 32), num) }\r\n        return numBytes;\r\n    }\r\n    \r\n    function getBytes(string memory str) internal pure returns (bytes memory) {\r\n        return bytes(str);\r\n    }\r\n    \r\n    function getBytes(address addr) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(addr);\r\n    }\r\n\r\n    function copy(bytes memory src, bytes memory dest, uint from) internal pure returns (bytes memory) {\r\n        for (uint idx=0; idx<src.length; idx++) {\r\n            dest[from + idx] = src[idx];\r\n        }\r\n        return dest;\r\n    }\r\n\r\n    function transfer(uint flowId, address to, uint amount, bytes32 checkSum) public returns (bool) {\r\n        require(to != address(0x0), \"address error\");\r\n        //1、身份校验\r\n        require(msg.sender == adminAddr, \"permission denied\");\r\n        //2、防止重复提交\r\n        require(withdrawOrderMap[flowId] == 0, \"duplicate transaction\");\r\n        //3、数据校验\r\n        //3、1流水单号   \r\n        //流水单号   \r\n        bytes memory flowIdBytes = getBytes(flowId);\r\n        //收款地址  \r\n        bytes memory toBytes = getBytes(to);\r\n        //转账金额 \r\n        bytes memory amountBytes = getBytes(amount);\r\n        //私钥\r\n        bytes memory privateKeyBytes = getBytes(privateKey);\r\n        uint totalBytes = flowIdBytes.length + toBytes.length + amountBytes.length;\r\n        bytes memory inputBytes = new bytes(totalBytes);\r\n        inputBytes = copy(flowIdBytes, inputBytes, 0);\r\n        inputBytes = copy(toBytes, inputBytes, flowIdBytes.length);\r\n        inputBytes = copy(amountBytes, inputBytes, flowIdBytes.length + toBytes.length);\r\n        inputBytes = copy(privateKeyBytes, inputBytes, flowIdBytes.length + toBytes.length + amountBytes.length);\r\n        bytes32 tmpCheckSum = sha256(inputBytes);\r\n        \r\n        bool checkSuccess = true;\r\n        for (uint idx=0; idx<32; idx++) {\r\n            if (tmpCheckSum[idx] != checkSum[idx]) {\r\n                checkSuccess = false;\r\n            }\r\n        }\r\n        require(checkSuccess, \"permission denied\");\r\n\r\n        Usdt_ERC20(usdtContractAddr).transfer(to, amount);\r\n        emit WithdrawMember(flowId, msg.sender, to, amount);\r\n        withdrawOrderMap[flowId] = flowId;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        require(to != address(0x0), \"address error\");\r\n        require(msg.sender == owner, \"permission denied\");\r\n        Usdt_ERC20(usdtContractAddr).transfer(to, amount);\r\n        emit WithdrawSystem(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function resetAdmin(address _adminAddr) public returns (bool) {\r\n        require(msg.sender == owner, \"permission denied\");\r\n        adminAddr = _adminAddr;\r\n    }\r\n\r\n    function destroy() public {\r\n        require(msg.sender == owner, \"permission denied\");\r\n        uint balance = Usdt_ERC20(usdtContractAddr).balanceOf(address(this));\r\n        Usdt_ERC20(usdtContractAddr).transfer(owner, balance);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function () external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSystem\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddr\",\"type\":\"address\"}],\"name\":\"resetAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"checkSum\",\"type\":\"bytes32\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UsdtLottery","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa1bd2c219c12e7cbe8f0dda9a16750388b42ed8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5e0061529bb4c25625bd55a5bb385c6c06ed54533d3cd08b17543930bd777a15"}]}