{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IMerkleRedeem {\r\n    function claimEpoch(address _liquidityProvider, uint256 _epoch, address _token, uint256 _claimedBalance, bytes32[] calldata _merkleProof) external;\r\n}\r\n\r\ncontract MerkleRedeemHelper {\r\n    IMerkleRedeem public redeem;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Must be the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function setRedeem(IMerkleRedeem _redeem) external onlyOwner {\r\n        redeem = _redeem;\r\n    }\r\n\r\n    struct Claim {\r\n        uint256 epoch;\r\n        address token;\r\n        uint256 balance;\r\n        bytes32[] merkleProof;\r\n    }\r\n\r\n    function claimEpochs(address _liquidityProvider, Claim[] memory claims) public\r\n    {\r\n        require(address(redeem) != address(0), \"MerkleRedeemHelper: no merkle redeem\");\r\n\r\n        Claim memory claim;\r\n        for (uint256 i = 0; i < claims.length; i++) {\r\n            claim = claims[i];\r\n\r\n            redeem.claimEpoch(\r\n                _liquidityProvider,\r\n                claim.epoch,\r\n                claim.token,\r\n                claim.balance,\r\n                claim.merkleProof\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleRedeemHelper.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IMerkleRedeem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMerkleRedeem\",\"name\":\"_redeem\",\"type\":\"address\"}],\"name\":\"setRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MerkleRedeemHelper","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cf92600a48a0328a9a8807b12ddc3b6fab719d45f042576f66152115faf61c17"}]}