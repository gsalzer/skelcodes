{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Event.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Event {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    bytes5 constant public version = \"2.1.0\";\r\n    uint8 constant private CLAPS_PER_ATTENDEE = 3;\r\n    uint8 constant private MAX_ATTENDEES = 100;\r\n\r\n    uint8 constant private ATTENDEE_UNREGISTERED = 0;\r\n    uint8 constant private ATTENDEE_REGISTERED = 1;\r\n    uint8 constant private ATTENDEE_CLAPPED = 2;\r\n    bool distributionMade;\r\n\r\n    uint64 public fee;\r\n    uint32 public end;\r\n    address payable[] private attendees;\r\n    mapping(address => uint8) public states;\r\n    mapping(address => uint256) public claps;\r\n    uint256 public totalClaps;\r\n\r\n    event Distribution (uint256 totalReward);\r\n    event Transfer (address indexed attendee, uint256 reward);\r\n\r\n    constructor (uint64 _fee, uint32 _end) public {\r\n        require(block.timestamp < _end);\r\n        fee = _fee;\r\n        end = _end;\r\n    }\r\n\r\n    function getAttendees () external view returns (address payable[] memory) {\r\n        return attendees;\r\n    }\r\n\r\n    function register (address payable _attendee, uint256 _fee) internal {\r\n        require(_fee == fee);\r\n        require(states[_attendee] == ATTENDEE_UNREGISTERED);\r\n        require(attendees.length < MAX_ATTENDEES);\r\n        require(block.timestamp < end);\r\n        states[_attendee] = ATTENDEE_REGISTERED;\r\n        attendees.push(_attendee);\r\n        claps[_attendee] = 1;\r\n        totalClaps += 1;\r\n    }\r\n\r\n    function register () external payable {\r\n        register(msg.sender, msg.value);\r\n    }\r\n\r\n    function clap (\r\n        address _clapper,\r\n        address[] memory _attendees,\r\n        uint256[] memory _claps\r\n    ) internal {\r\n        require(states[_clapper] == ATTENDEE_REGISTERED);\r\n        require(_attendees.length == _claps.length);\r\n        states[_clapper] = ATTENDEE_CLAPPED;\r\n        uint256 givenClaps;\r\n        for (uint256 i; i < _attendees.length; i = i.add(1)) {\r\n            givenClaps = givenClaps.add(_claps[i]);\r\n            if (_attendees[i] == _clapper) continue;\r\n            if (states[_attendees[i]] == ATTENDEE_UNREGISTERED) continue;\r\n            claps[_attendees[i]] = claps[_attendees[i]].add(_claps[i]);\r\n        }\r\n        require(givenClaps <= attendees.length.mul(CLAPS_PER_ATTENDEE));\r\n        totalClaps = totalClaps.add(givenClaps);\r\n    }\r\n\r\n    function clap (address[] calldata _attendees, uint256[] calldata _claps)\r\n        external {\r\n        clap(msg.sender, _attendees, _claps);\r\n    }\r\n\r\n    function distribute () external {\r\n        require(distributionMade == false);\r\n        require(block.timestamp >= end);\r\n        require(totalClaps > 0);\r\n        distributionMade = true;\r\n        uint256 totalReward = address(this).balance;\r\n        emit Distribution(totalReward);\r\n        for (uint256 i; i < attendees.length; i = i.add(1)) {\r\n            uint256 reward = claps[attendees[i]]\r\n                .mul(totalReward)\r\n                .div(totalClaps);\r\n            (bool success, ) = attendees[i].call.value(reward)(\"\");\r\n            if (success) {\r\n                emit Transfer(attendees[i], reward);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ProxyEvent.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract ProxyEvent is Event {\r\n\r\n    bytes5 constant public version = \"2.0.0\";\r\n    mapping(address => address) public proxy;\r\n\r\n    constructor(uint64 _fee, uint32 _end) Event(_fee, _end) public {}\r\n\r\n    function registerFor (address payable _attendee) external payable {\r\n        register(_attendee, msg.value);\r\n        proxy[_attendee] = msg.sender;\r\n    }\r\n\r\n    function clapFor (\r\n        address _clapper,\r\n        address[] calldata _attendees,\r\n        uint256[] calldata _claps\r\n    ) external {\r\n        require(proxy[_clapper] == msg.sender);\r\n        clap(_clapper, _attendees, _claps);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_fee\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_end\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attendee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_attendees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claps\",\"type\":\"uint256[]\"}],\"name\":\"clap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clapper\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_attendees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claps\",\"type\":\"uint256[]\"}],\"name\":\"clapFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttendees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_attendee\",\"type\":\"address\"}],\"name\":\"registerFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bytes5\",\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyEvent","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"32","ConstructorArguments":"00000000000000000000000000000000000000000000000000d529ae9e860000000000000000000000000000000000000000000000000000000000005f10f810","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1c0b0a2b398e52b3dbaedb711ab137c5d8d99b4a1e81a9c4b126594d241e6dfe"}]}