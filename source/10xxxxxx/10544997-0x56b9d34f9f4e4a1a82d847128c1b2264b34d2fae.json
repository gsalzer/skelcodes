{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nlibrary AddressSet {\r\n    \r\n    struct Set {\r\n        mapping(address => uint) keyPointers;\r\n        address[] keyList;\r\n    }\r\n\r\n    /**\r\n     * @notice insert a key. \r\n     * @dev duplicate keys are not permitted.\r\n     * @param self storage pointer to a Set. \r\n     * @param key value to insert.\r\n     */    \r\n    function insert(Set storage self, address key) internal {\r\n        require(!exists(self, key), \"AddressSet: key already exists in the set.\");\r\n        self.keyPointers[key] = self.keyList.length;\r\n        self.keyList.push(key);\r\n    }\r\n\r\n    /**\r\n     * @notice remove a key.\r\n     * @dev key to remove must exist. \r\n     * @param self storage pointer to a Set.\r\n     * @param key value to remove.\r\n     */    \r\n    function remove(Set storage self, address key) internal {\r\n        require(exists(self, key), \"AddressSet: key does not exist in the set.\");\r\n        uint last = count(self) - 1;\r\n        uint rowToReplace = self.keyPointers[key];\r\n        if(rowToReplace != last) {\r\n            address keyToMove = self.keyList[last];\r\n            self.keyPointers[keyToMove] = rowToReplace;\r\n            self.keyList[rowToReplace] = keyToMove;\r\n        }\r\n        delete self.keyPointers[key];\r\n        self.keyList.pop;\r\n    }\r\n\r\n    /**\r\n     * @notice count the keys.\r\n     * @param self storage pointer to a Set. \r\n     */       \r\n    function count(Set storage self) internal view returns(uint) {\r\n        return(self.keyList.length);\r\n    }\r\n\r\n    /**\r\n     * @notice check if a key is in the Set.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to check. \r\n     * @return bool true: Set member, false: not a Set member.\r\n     */  \r\n    function exists(Set storage self, address key) internal view returns(bool) {\r\n        if(self.keyList.length == 0) return false;\r\n        return self.keyList[self.keyPointers[key]] == key;\r\n    }\r\n\r\n    /**\r\n     * @notice fetch a key by row (enumerate).\r\n     * @param self storage pointer to a Set.\r\n     * @param index row to enumerate. Must be < count() - 1.\r\n     */      \r\n    function keyAtIndex(Set storage self, uint index) internal view returns(address) {\r\n        return self.keyList[index];\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nlibrary Bytes32Set {\r\n    \r\n    struct Set {\r\n        mapping(bytes32 => uint) keyPointers;\r\n        bytes32[] keyList;\r\n    }\r\n    \r\n    /**\r\n     * @notice insert a key. \r\n     * @dev duplicate keys are not permitted.\r\n     * @param self storage pointer to a Set. \r\n     * @param key value to insert.\r\n     */\r\n    function insert(Set storage self, bytes32 key) internal {\r\n        require(!exists(self, key), \"Bytes32Set: key already exists in the set.\");\r\n        self.keyPointers[key] = self.keyList.length;\r\n        self.keyList.push(key);\r\n    }\r\n\r\n    /**\r\n     * @notice remove a key.\r\n     * @dev key to remove must exist. \r\n     * @param self storage pointer to a Set.\r\n     * @param key value to remove.\r\n     */\r\n    function remove(Set storage self, bytes32 key) internal {\r\n        require(exists(self, key), \"Bytes32Set: key does not exist in the set.\");\r\n        uint last = count(self) - 1;\r\n        uint rowToReplace = self.keyPointers[key];\r\n        if(rowToReplace != last) {\r\n            bytes32 keyToMove = self.keyList[last];\r\n            self.keyPointers[keyToMove] = rowToReplace;\r\n            self.keyList[rowToReplace] = keyToMove;\r\n        }\r\n        delete self.keyPointers[key];\r\n        self.keyList.pop();\r\n    }\r\n\r\n    /**\r\n     * @notice count the keys.\r\n     * @param self storage pointer to a Set. \r\n     */    \r\n    function count(Set storage self) internal view returns(uint) {\r\n        return(self.keyList.length);\r\n    }\r\n    \r\n    /**\r\n     * @notice check if a key is in the Set.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to check. \r\n     * @return bool true: Set member, false: not a Set member.\r\n     */\r\n    function exists(Set storage self, bytes32 key) internal view returns(bool) {\r\n        if(self.keyList.length == 0) return false;\r\n        return self.keyList[self.keyPointers[key]] == key;\r\n    }\r\n\r\n    /**\r\n     * @notice fetch a key by row (enumerate).\r\n     * @param self storage pointer to a Set.\r\n     * @param index row to enumerate. Must be < count() - 1.\r\n     */    \r\n    function keyAtIndex(Set storage self, uint index) internal view returns(bytes32) {\r\n        return self.keyList[index];\r\n    }\r\n}\r\n\r\nlibrary FIFOSet {\r\n    \r\n    using SafeMath for uint;\r\n    using Bytes32Set for Bytes32Set.Set;\r\n    \r\n    bytes32 constant NULL = bytes32(0);\r\n    \r\n    struct FIFO {\r\n        bytes32 firstKey;\r\n        bytes32 lastKey;\r\n        mapping(bytes32 => KeyStruct) keyStructs;\r\n        Bytes32Set.Set keySet;\r\n    }\r\n\r\n    struct KeyStruct {\r\n            bytes32 nextKey;\r\n            bytes32 previousKey;\r\n    }\r\n\r\n    function count(FIFO storage self) internal view returns(uint) {\r\n        return self.keySet.count();\r\n    }\r\n    \r\n    function first(FIFO storage self) internal view returns(bytes32) {\r\n        return self.firstKey;\r\n    }\r\n    \r\n    function last(FIFO storage self) internal view returns(bytes32) {\r\n        return self.lastKey;\r\n    }\r\n    \r\n    function exists(FIFO storage self, bytes32 key) internal view returns(bool) {\r\n        return self.keySet.exists(key);\r\n    }\r\n    \r\n    function isFirst(FIFO storage self, bytes32 key) internal view returns(bool) {\r\n        return key==self.firstKey;\r\n    }\r\n    \r\n    function isLast(FIFO storage self, bytes32 key) internal view returns(bool) {\r\n        return key==self.lastKey;\r\n    }    \r\n    \r\n    function previous(FIFO storage self, bytes32 key) internal view returns(bytes32) {\r\n        require(exists(self, key), \"FIFOSet: key not found\") ;\r\n        return self.keyStructs[key].previousKey;\r\n    }\r\n    \r\n    function next(FIFO storage self, bytes32 key) internal view returns(bytes32) {\r\n        require(exists(self, key), \"FIFOSet: key not found\");\r\n        return self.keyStructs[key].nextKey;\r\n    }\r\n    \r\n    function append(FIFO storage self, bytes32 key) internal {\r\n        require(key != NULL, \"FIFOSet: key cannot be zero\");\r\n        require(!exists(self, key), \"FIFOSet: duplicate key\"); \r\n        bytes32 lastKey = self.lastKey;\r\n        KeyStruct storage k = self.keyStructs[key];\r\n        KeyStruct storage l = self.keyStructs[lastKey];\r\n        if(lastKey==NULL) {                \r\n            self.firstKey = key;\r\n        } else {\r\n            l.nextKey = key;\r\n        }\r\n        k.previousKey = lastKey;\r\n        self.keySet.insert(key);\r\n        self.lastKey = key;\r\n    }\r\n\r\n    function remove(FIFO storage self, bytes32 key) internal {\r\n        require(exists(self, key), \"FIFOSet: key not found\");\r\n        KeyStruct storage k = self.keyStructs[key];\r\n        bytes32 keyBefore = k.previousKey;\r\n        bytes32 keyAfter = k.nextKey;\r\n        bytes32 firstKey = first(self);\r\n        bytes32 lastKey = last(self);\r\n        KeyStruct storage p = self.keyStructs[keyBefore];\r\n        KeyStruct storage n = self.keyStructs[keyAfter];\r\n        \r\n        if(count(self) == 1) {\r\n            self.firstKey = NULL;\r\n            self.lastKey = NULL;\r\n        } else {\r\n            if(key == firstKey) {\r\n                n.previousKey = NULL;\r\n                self.firstKey = keyAfter;  \r\n            } else \r\n            if(key == lastKey) {\r\n                p.nextKey = NULL;\r\n                self.lastKey = keyBefore;\r\n            } else {\r\n                p.nextKey = keyAfter;\r\n                n.previousKey = keyBefore;\r\n            }\r\n        }\r\n        self.keySet.remove(key);\r\n        delete self.keyStructs[key];\r\n    }\r\n}\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface Maker {\r\n    function read() external view returns(uint);\r\n}\r\n\r\ncontract HodlDex is Ownable {\r\n    \r\n    using Address for address payable;                              // OpenZeppelin address utility\r\n    using SafeMath for uint;                                        // OpenZeppelin safeMath utility\r\n    using Bytes32Set for Bytes32Set.Set;                            // Unordered key sets\r\n    using AddressSet for AddressSet.Set;                            // Unordered address sets\r\n    using FIFOSet for FIFOSet.FIFO;                                 // FIFO key sets\r\n    \r\n    Maker maker = Maker(0x729D19f657BD0614b4985Cf1D82531c67569197B);// EthUsd price Oracle\r\n\r\n    bytes32 constant NULL = bytes32(0); \r\n    uint constant HODL_PRECISION = 10 ** 10;                        // HODL token decimal places\r\n    uint constant USD_PRECISION = 10 ** 18;                         // Precision for HODL:USD\r\n    uint constant TOTAL_SUPPLY = 20000000 * (10**10);               // Total supply - initially goes to the reserve, which is address(this)\r\n    uint constant SLEEP_TIME = 30 days;                             // Grace period before time-based accrual kicks in\r\n    uint constant DAILY_ACCRUAL_RATE_DECAY = 999999838576236000;    // Rate of decay applied daily reduces daily accrual APR to about 5% after 30 years\r\n    uint constant USD_TXN_ADJUSTMENT = 10**14;                      // $0.0001 with 18 decimal places of precision - 1/100th of a cent\r\n    \r\n    uint public BIRTHDAY;                                           // Now time when the contract was deployed\r\n    uint public minOrderUsd = 50 * 10 ** 18;                        // Minimum order size is $50 in USD precision\r\n    uint public maxOrderUsd = 500 * 10 ** 18;                       // Maximum order size is $500 is USD precision\r\n    uint public maxThresholdUsd = 10 * 10 ** 18;                    // Order limits removed when HODL_USD exceeds $10\r\n    uint public maxDistributionUsd = 250 * 10 ** 18;                // Maximum distribution value\r\n    uint public accrualDaysProcessed;                               // Days of stateful accrual applied\r\n    uint public distributionNext;                                   // Next distribution to process cursor\r\n    uint public entropyCounter;                                     // Tally of unique order IDs and distributions generated \r\n    uint public distributionDelay = 1 days;                         // Reserve sale distribution delay\r\n\r\n    IERC20 token;                                                   // The HODL ERC20 tradable token \r\n \r\n    /**************************************************************************************\r\n     * @dev The following values are inspected through the rates() function\r\n     **************************************************************************************/\r\n\r\n    uint private HODL_USD;                                          // HODL:USD exchange rate last recorded\r\n    uint private DAILY_ACCRUAL_RATE = 1001900837677230000;          // Initial daily accrual is 0.19% (100.19% multiplier) which is about 100% APR     \r\n    \r\n    struct User {\r\n        FIFOSet.FIFO sellOrderIdFifo;                               // User sell orders in no particular order\r\n        FIFOSet.FIFO buyOrderIdFifo;                                // User buy orders in no particular order\r\n        uint balanceEth;\r\n        uint balanceHodl;\r\n    }   \r\n    struct SellOrder {\r\n        address seller;\r\n        uint volumeHodl;\r\n        uint askUsd;\r\n    }    \r\n    struct BuyOrder {\r\n        address buyer;\r\n        uint bidEth;\r\n    }\r\n    struct Distribution {\r\n        uint amountEth;\r\n        uint timeStamp;\r\n    }\r\n    \r\n    mapping(address => User) userStruct;\r\n    mapping(bytes32 => SellOrder) public sellOrder;\r\n    mapping(bytes32 => BuyOrder) public buyOrder; \r\n\r\n    FIFOSet.FIFO sellOrderIdFifo;                                   // SELL orders in order of declaration\r\n    FIFOSet.FIFO buyOrderIdFifo;                                    // BUY orders in order of declaration\r\n    AddressSet.Set hodlerAddrSet;                                   // Users with a HODL balance > 0 in no particular order\r\n    Distribution[] public distribution;                             // Pending distributions in order of declaration\r\n    \r\n    modifier ifRunning {\r\n        require(isRunning(), \"Contact is not initialized.\");\r\n        _;\r\n    }\r\n    \r\n    // Deferred pseudo-random reserve sale proceeds distribution\r\n    modifier distribute {\r\n        uint distroEth;\r\n        if(distribution.length > distributionNext) {\r\n            Distribution storage d = distribution[distributionNext];\r\n            if(d.timeStamp.add(distributionDelay) < now) {\r\n                uint entropy = uint(keccak256(abi.encodePacked(entropyCounter, HODL_USD, maker.read(), blockhash(block.number))));\r\n                uint luckyWinnerRow = entropy % hodlerAddrSet.count();\r\n                address winnerAddr = hodlerAddrSet.keyAtIndex(luckyWinnerRow);\r\n                User storage w = userStruct[winnerAddr];\r\n                if(convertEthToUsd(d.amountEth) > maxDistributionUsd) {\r\n                    distroEth = convertUsdToEth(maxDistributionUsd);\r\n                    d.amountEth = d.amountEth.sub(distroEth);\r\n                } else {\r\n                    distroEth = d.amountEth;\r\n                    delete distribution[distributionNext];\r\n                    distributionNext = distributionNext.add(1);\r\n                }\r\n                w.balanceEth = w.balanceEth.add(distroEth);\r\n                entropyCounter++;\r\n                emit DistributionAwarded(msg.sender, distributionNext, winnerAddr, distroEth);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier accrueByTime {\r\n        _accrueByTime();\r\n        _;\r\n    }\r\n    \r\n    event DistributionAwarded(address processor, uint indexed index, address indexed recipient, uint amount);\r\n    event Deployed(address admin);\r\n    event HodlTIssued(address indexed user, uint amount);\r\n    event HodlTRedeemed(address indexed user, uint amount);\r\n    event SellHodlC(address indexed seller, uint quantityHodl, uint lowGas);\r\n    event SellOrderFilled(address indexed buyer, bytes32 indexed orderId, address indexed seller, uint txnEth, uint txnHodl);\r\n    event SellOrderOpened(bytes32 indexed orderId, address indexed seller, uint quantityHodl, uint askUsd);\r\n    event BuyHodlC(address indexed buyer, uint amountEth, uint lowGas);\r\n    event BuyOrderFilled(address indexed seller, bytes32 indexed orderId, address indexed buyer, uint txnEth, uint txnHodl);\r\n    event BuyOrderRefunded(address indexed seller, bytes32 indexed orderId, uint refundedEth);\r\n    event BuyFromReserve(address indexed buyer, uint txnEth, uint txnHodl);\r\n    event BuyOrderOpened(bytes32 indexed orderedId, address indexed buyer, uint amountEth);\r\n    event SellOrderCancelled(address indexed userAddr, bytes32 indexed orderId);\r\n    event BuyOrderCancelled(address indexed userAddr, bytes32 indexed orderId);\r\n    event UserDepositEth(address indexed user, uint amountEth);\r\n    event UserWithdrawEth(address indexed user, uint amountEth);\r\n    event UserInitialized(address admin, address indexed user, uint hodlCR, uint ethCR);\r\n    event UserUninitialized(address admin, address indexed user, uint hodlDB, uint ethDB);\r\n    event PriceSet(address admin, uint hodlUsd);\r\n    event TokenSet(address admin, address hodlToken);\r\n    event MakerSet(address admin, address maker);\r\n    \r\n    constructor() public {\r\n        userStruct[address(this)].balanceHodl = TOTAL_SUPPLY;\r\n        BIRTHDAY = now;\r\n        emit Deployed(msg.sender);\r\n    }\r\n\r\n    function keyGen() private returns(bytes32 key) {\r\n        entropyCounter++;\r\n        return keccak256(abi.encodePacked(address(this), msg.sender, entropyCounter));\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Anyone can nudge the time-based accrual forward\r\n     **************************************************************************************/ \r\n\r\n    function poke() external distribute ifRunning {\r\n        _accrueByTime();\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * 1:1 Convertability to HODLT ERC20\r\n     **************************************************************************************/    \r\n\r\n    function hodlTIssue(uint amount) external distribute accrueByTime ifRunning {\r\n        User storage u = userStruct[msg.sender];\r\n        User storage t = userStruct[address(token)];\r\n        u.balanceHodl = u.balanceHodl.sub(amount);\r\n        t.balanceHodl = t.balanceHodl.add(amount);\r\n        _pruneHodler(msg.sender);\r\n        token.transfer(msg.sender, amount);\r\n        emit HodlTIssued(msg.sender, amount);\r\n    }\r\n\r\n    function hodlTRedeem(uint amount) external distribute accrueByTime ifRunning {\r\n        User storage u = userStruct[msg.sender];\r\n        User storage t = userStruct[address(token)];\r\n        u.balanceHodl = u.balanceHodl.add(amount);\r\n        t.balanceHodl = t.balanceHodl.sub(amount);\r\n        _makeHodler(msg.sender);\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        emit HodlTRedeemed(msg.sender, amount);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Sell HodlC to buy orders, or if no buy orders open a sell order.\r\n     * Selectable low gas protects against future EVM price changes.\r\n     * Completes as much as possible (gas) and return unprocessed Hodl.\r\n     **************************************************************************************/ \r\n\r\n    function sellHodlC(uint quantityHodl, uint lowGas) external accrueByTime distribute ifRunning returns(bytes32 orderId) {\r\n        emit SellHodlC(msg.sender, quantityHodl, lowGas);\r\n        uint orderUsd = convertHodlToUsd(quantityHodl); \r\n        uint orderLimit = orderLimit();\r\n        require(orderUsd >= minOrderUsd, \"Sell order is less than minimum USD value\");\r\n        require(orderUsd <= orderLimit || orderLimit == 0, \"Order exceeds USD limit\");\r\n        quantityHodl = _fillBuyOrders(quantityHodl, lowGas);\r\n        orderId = _openSellOrder(quantityHodl);\r\n        _pruneHodler(msg.sender);\r\n    }\r\n\r\n    function _fillBuyOrders(uint quantityHodl, uint lowGas) private returns(uint remainingHodl) {\r\n        User storage u = userStruct[msg.sender];\r\n        address buyerAddr;\r\n        bytes32 buyId;\r\n        uint orderHodl;\r\n        uint orderEth;\r\n        uint txnEth;\r\n        uint txnHodl;\r\n\r\n        while(buyOrderIdFifo.count() > 0 && quantityHodl > 0) { //\r\n            if(gasleft() < lowGas) return 0;\r\n            buyId = buyOrderIdFifo.first();\r\n            BuyOrder storage o = buyOrder[buyId]; \r\n            buyerAddr = o.buyer;\r\n            User storage b = userStruct[o.buyer];\r\n            \r\n            orderEth = o.bidEth;\r\n            orderHodl = convertEthToHodl(orderEth);\r\n            if(orderHodl == 0) {\r\n                // Order is now too small to fill. Refund eth and prune.\r\n                if(orderEth > 0) {\r\n                    b.balanceEth = b.balanceEth.add(orderEth);\r\n                    emit BuyOrderRefunded(msg.sender, buyId, orderEth); \r\n                }\r\n                delete buyOrder[buyId];\r\n                buyOrderIdFifo.remove(buyId);\r\n                b.buyOrderIdFifo.remove(buyId);                   \r\n            } else {\r\n                txnEth  = convertHodlToEth(quantityHodl);\r\n                txnHodl = quantityHodl;\r\n                if(orderEth < txnEth) {\r\n                    txnEth = orderEth;\r\n                    txnHodl = orderHodl;\r\n                }\r\n                u.balanceHodl = u.balanceHodl.sub(txnHodl, \"Insufficient Hodl for computed order volume\");\r\n                b.balanceHodl = b.balanceHodl.add(txnHodl);\r\n                u.balanceEth = u.balanceEth.add(txnEth);\r\n                o.bidEth = o.bidEth.sub(txnEth, \"500 - Insufficient ETH for computed order volume\");\r\n                quantityHodl = quantityHodl.sub(txnHodl, \"500 - Insufficient order Hodl remaining to fill order\");  \r\n                _makeHodler(buyerAddr);\r\n                _accrueByTransaction();\r\n                emit BuyOrderFilled(msg.sender, buyId, o.buyer, txnEth, txnHodl);\r\n            }          \r\n        }\r\n        remainingHodl = quantityHodl;\r\n    }\r\n\r\n    function _openSellOrder(uint quantityHodl) private returns(bytes32 orderId) {\r\n        User storage u = userStruct[msg.sender];\r\n        // Do not allow low gas to result in small sell orders or sell orders to exist while buy orders exist\r\n        if(convertHodlToUsd(quantityHodl) > minOrderUsd && buyOrderIdFifo.count() == 0) { \r\n            orderId = keyGen();\r\n            (uint askUsd, /*uint accrualRate*/) = rates();\r\n            SellOrder storage o = sellOrder[orderId];\r\n            sellOrderIdFifo.append(orderId);\r\n            u.sellOrderIdFifo.append(orderId);           \r\n            o.seller = msg.sender;\r\n            o.volumeHodl = quantityHodl;\r\n            o.askUsd = askUsd;\r\n            u.balanceHodl = u.balanceHodl.sub(quantityHodl, \"Insufficient Hodl to open sell order\");\r\n            emit SellOrderOpened(orderId, msg.sender, quantityHodl, askUsd);\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Buy HodlC from sell orders, or if no sell orders, from reserve. Lastly, open a \r\n     * buy order is the reserve is sold out.\r\n     * Selectable low gas protects against future EVM price changes.\r\n     * Completes as much as possible (gas) and returns unspent Eth.\r\n     **************************************************************************************/ \r\n\r\n    function buyHodlC(uint amountEth, uint lowGas) external accrueByTime distribute ifRunning returns(bytes32 orderId) {\r\n        emit BuyHodlC(msg.sender, amountEth, lowGas);\r\n        uint orderLimit = orderLimit();         \r\n        uint orderUsd = convertEthToUsd(amountEth);\r\n        require(orderUsd >= minOrderUsd, \"Buy order is less than minimum USD value\");\r\n        require(orderUsd <= orderLimit || orderLimit == 0, \"Order exceeds USD limit\");\r\n        amountEth = _fillSellOrders(amountEth, lowGas);\r\n        amountEth = _buyFromReserve(amountEth);\r\n        orderId = _openBuyOrder(amountEth);\r\n        _makeHodler(msg.sender);\r\n    }\r\n\r\n    function _fillSellOrders(uint amountEth, uint lowGas) private returns(uint remainingEth) {\r\n        User storage u = userStruct[msg.sender];\r\n        address sellerAddr;\r\n        bytes32 sellId;\r\n        uint orderEth;\r\n        uint orderHodl;\r\n        uint txnEth;\r\n        uint txnHodl; \r\n\r\n        while(sellOrderIdFifo.count() > 0 && amountEth > 0) {\r\n            if(gasleft() < lowGas) return 0;\r\n            sellId = sellOrderIdFifo.first();\r\n            SellOrder storage o = sellOrder[sellId];\r\n            sellerAddr = o.seller;\r\n            User storage s = userStruct[sellerAddr];\r\n            \r\n            orderHodl = o.volumeHodl; \r\n            orderEth = convertHodlToEth(orderHodl);\r\n            txnEth = amountEth;\r\n            txnHodl = convertEthToHodl(txnEth);\r\n            if(orderEth < txnEth) {\r\n                txnEth = orderEth;\r\n                txnHodl = orderHodl;\r\n            }\r\n            u.balanceEth = u.balanceEth.sub(txnEth, \"Insufficient funds to buy from sell order\");\r\n            s.balanceEth = s.balanceEth.add(txnEth);\r\n            u.balanceHodl = u.balanceHodl.add(txnHodl);\r\n            o.volumeHodl = o.volumeHodl.sub(txnHodl, \"500 - order has insufficient Hodl for computed volume\");\r\n            amountEth = amountEth.sub(txnEth, \"500 - overspent buy order\"); \r\n            _accrueByTransaction();\r\n            emit SellOrderFilled(msg.sender, sellId, o.seller, txnEth, txnHodl);\r\n            if(o.volumeHodl == 0) {\r\n                delete sellOrder[sellId];\r\n                sellOrderIdFifo.remove(sellId);\r\n                s.sellOrderIdFifo.remove(sellId);\r\n                _pruneHodler(sellerAddr); \r\n            }      \r\n        }\r\n        remainingEth = amountEth;\r\n    }\r\n    \r\n    function _buyFromReserve(uint amountEth) private returns(uint remainingEth) {\r\n        uint txnHodl;\r\n        uint txnEth;\r\n        if(amountEth > 0) {\r\n            Distribution memory d;\r\n            User storage u = userStruct[msg.sender];\r\n            User storage r = userStruct[address(this)];\r\n            txnHodl = (convertEthToHodl(amountEth) <= r.balanceHodl) ? convertEthToHodl(amountEth) : r.balanceHodl;\r\n            if(txnHodl > 0) {\r\n                txnEth = convertHodlToEth(txnHodl);\r\n                r.balanceHodl = r.balanceHodl.sub(txnHodl, \"500 - reserve has insufficient Hodl for computed volume\");\r\n                u.balanceHodl = u.balanceHodl.add(txnHodl);\r\n                u.balanceEth = u.balanceEth.sub(txnEth, \"Insufficient funds to buy from reserve\");            \r\n                d.amountEth = txnEth;\r\n                d.timeStamp = now;\r\n                distribution.push(d);\r\n                amountEth = amountEth.sub(txnEth, \"500 - buy order has insufficient ETH to complete reserve purchase\");\r\n                _accrueByTransaction();    \r\n                emit BuyFromReserve(msg.sender, txnEth, txnHodl);\r\n            }\r\n        }\r\n        remainingEth = amountEth;\r\n    }\r\n\r\n    function _openBuyOrder(uint amountEth) private returns(bytes32 orderId) {\r\n        User storage u = userStruct[msg.sender];\r\n        // do not allow low gas to open a small buy order or buy orders to exist while sell orders exist\r\n        if(convertEthToUsd(amountEth) > minOrderUsd && sellOrderIdFifo.count() == 0) {\r\n            orderId = keyGen();\r\n            BuyOrder storage o = buyOrder[orderId];\r\n            buyOrderIdFifo.append(orderId);\r\n            u.buyOrderIdFifo.append(orderId);\r\n            u.balanceEth = u.balanceEth.sub(amountEth, \"Insufficient funds to open buy order\");\r\n            o.bidEth = amountEth;\r\n            o.buyer = msg.sender;\r\n            emit BuyOrderOpened(orderId, msg.sender, amountEth);\r\n        }\r\n    }\r\n    \r\n    /**************************************************************************************\r\n     * Cancel orders\r\n     **************************************************************************************/ \r\n\r\n    function cancelSell(bytes32 orderId) external accrueByTime distribute ifRunning {\r\n        SellOrder storage o = sellOrder[orderId];\r\n        User storage u = userStruct[o.seller];\r\n        require(o.seller == msg.sender, \"Sender is not the seller.\");\r\n        u.balanceHodl = u.balanceHodl.add(o.volumeHodl);\r\n        u.sellOrderIdFifo.remove(orderId);\r\n        sellOrderIdFifo.remove(orderId);\r\n        emit SellOrderCancelled(msg.sender, orderId);\r\n    }\r\n    function cancelBuy(bytes32 orderId) external distribute accrueByTime ifRunning {\r\n        BuyOrder storage o = buyOrder[orderId];\r\n        User storage u = userStruct[o.buyer];\r\n        require(o.buyer == msg.sender, \"Sender is not the buyer.\");\r\n        u.balanceEth = u.balanceEth.add(o.bidEth);\r\n        u.buyOrderIdFifo.remove(orderId);\r\n        buyOrderIdFifo.remove(orderId);\r\n        emit BuyOrderCancelled(msg.sender, orderId);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Prices and quotes\r\n     **************************************************************************************/    \r\n    \r\n    function convertEthToUsd(uint amtEth) public view returns(uint inUsd) {\r\n        inUsd = amtEth.mul(maker.read()).div(USD_PRECISION);\r\n    }\r\n    function convertUsdToEth(uint amtUsd) public view returns(uint inEth) {\r\n        inEth = amtUsd.mul(USD_PRECISION).div(convertEthToUsd(USD_PRECISION));\r\n    }\r\n    function convertHodlToUsd(uint amtHodl) public view returns(uint inUsd) {\r\n        (uint _hodlUsd, /*uint _accrualRate*/) = rates();\r\n        inUsd = amtHodl.mul(_hodlUsd).div(HODL_PRECISION);\r\n    }\r\n    function convertUsdToHodl(uint amtUsd) public view returns(uint inHodl) {\r\n         (uint _hodlUsd, /*uint _accrualRate*/) = rates();\r\n        inHodl = amtUsd.mul(HODL_PRECISION).div(_hodlUsd);\r\n    }\r\n    function convertEthToHodl(uint amtEth) public view returns(uint inHodl) {\r\n        uint inUsd = convertEthToUsd(amtEth);\r\n        inHodl = convertUsdToHodl(inUsd);\r\n    }\r\n    function convertHodlToEth(uint amtHodl) public view returns(uint inEth) { \r\n        uint inUsd = convertHodlToUsd(amtHodl);\r\n        inEth = convertUsdToEth(inUsd);\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Eth accounts\r\n     **************************************************************************************/ \r\n\r\n    function depositEth() external accrueByTime distribute ifRunning payable {\r\n        require(msg.value > 0, \"You must send Eth to this function\");\r\n        User storage u = userStruct[msg.sender];\r\n        u.balanceEth = u.balanceEth.add(msg.value);\r\n        emit UserDepositEth(msg.sender, msg.value);\r\n    }   \r\n    function withdrawEth(uint amount) external accrueByTime distribute ifRunning {\r\n        User storage u = userStruct[msg.sender];\r\n        u.balanceEth = u.balanceEth.sub(amount);\r\n        emit UserWithdrawEth(msg.sender, amount);  \r\n        msg.sender.sendValue(amount); \r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Accrual and rate decay over time\r\n     **************************************************************************************/ \r\n\r\n    // Moves forward in 1-day steps to prevent overflow\r\n    function rates() public view returns(uint hodlUsd, uint dailyAccrualRate) {\r\n        hodlUsd = HODL_USD;\r\n        dailyAccrualRate = DAILY_ACCRUAL_RATE;\r\n        uint startTime = BIRTHDAY.add(SLEEP_TIME);\r\n        if(now > startTime) {\r\n            uint daysFromStart = (now.sub(startTime)) / 1 days;\r\n            uint daysUnprocessed = daysFromStart.sub(accrualDaysProcessed);\r\n            if(daysUnprocessed > 0) {\r\n                hodlUsd = HODL_USD.mul(DAILY_ACCRUAL_RATE).div(USD_PRECISION);\r\n                dailyAccrualRate = DAILY_ACCRUAL_RATE.mul(DAILY_ACCRUAL_RATE_DECAY).div(USD_PRECISION);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************************************************************************\r\n     * Stateful activity-based and time-based rate adjustments\r\n     **************************************************************************************/\r\n\r\n    function _accrueByTransaction() private {\r\n        HODL_USD = HODL_USD.add(USD_TXN_ADJUSTMENT);\r\n    }    \r\n    function _accrueByTime() private returns(uint hodlUsdNow, uint dailyAccrualRateNow) {\r\n        (hodlUsdNow, dailyAccrualRateNow) = rates();\r\n        if(hodlUsdNow != HODL_USD || dailyAccrualRateNow != DAILY_ACCRUAL_RATE) { \r\n            HODL_USD = hodlUsdNow;\r\n            DAILY_ACCRUAL_RATE = dailyAccrualRateNow; \r\n            accrualDaysProcessed = accrualDaysProcessed.add(1);  \r\n        } \r\n    }\r\n    \r\n    /**************************************************************************************\r\n     * Add and remove from hodlerAddrSet based on total HODLC owned/controlled\r\n     **************************************************************************************/\r\n\r\n    function _makeHodler(address user) private {\r\n        User storage u = userStruct[user];\r\n        if(convertHodlToUsd(u.balanceHodl) >= minOrderUsd) {\r\n            if(!hodlerAddrSet.exists(user)) hodlerAddrSet.insert(user);   \r\n        }\r\n    }    \r\n    function _pruneHodler(address user) private {\r\n        User storage u = userStruct[user];\r\n        if(convertHodlToUsd(u.balanceHodl) < minOrderUsd) {\r\n            if(hodlerAddrSet.exists(user)) hodlerAddrSet.remove(user);\r\n        }\r\n    }\r\n    \r\n    /**************************************************************************************\r\n     * View functions to enumerate the state\r\n     **************************************************************************************/\r\n    \r\n    // Courtesy function \r\n    function contractBalanceEth() public view returns(uint ineth) { return address(this).balance; }\r\n\r\n    // Distribution queue\r\n    function distributionsLength() public view returns(uint row) { return distribution.length; }\r\n    \r\n    // Hodlers in no particular order\r\n    function hodlerCount() public view returns(uint count) { return hodlerAddrSet.count(); }\r\n    function hodlerAtIndex(uint index) public view returns(address userAddr) { return hodlerAddrSet.keyAtIndex(index); }    \r\n    \r\n    // Open orders, FIFO\r\n    function sellOrderCount() public view returns(uint count) { return sellOrderIdFifo.count(); }\r\n    function sellOrderFirst() public view returns(bytes32 orderId) { return sellOrderIdFifo.first(); }\r\n    function sellOrderLast() public view returns(bytes32 orderId) { return sellOrderIdFifo.last(); }  \r\n    function sellOrderIterate(bytes32 orderId) public view returns(bytes32 idBefore, bytes32 idAfter) { return (sellOrderIdFifo.previous(orderId), sellOrderIdFifo.next(orderId)); }\r\n    function buyOrderCount() public view returns(uint count) { return buyOrderIdFifo.count(); }\r\n    function buyOrderFirst() public view returns(bytes32 orderId) { return buyOrderIdFifo.first(); }\r\n    function buyOrderLast() public view returns(bytes32 orderId) { return buyOrderIdFifo.last(); }    \r\n    function buyOrderIterate(bytes32 orderId) public view returns(bytes32 ifBefore, bytes32 idAfter) { return(buyOrderIdFifo.previous(orderId), buyOrderIdFifo.next(orderId)); }\r\n\r\n    // open orders by user, FIFO\r\n    function userSellOrderCount(address userAddr) public view returns(uint count) { return userStruct[userAddr].sellOrderIdFifo.count(); }\r\n    function userSellOrderFirst(address userAddr) public view returns(bytes32 orderId) { return userStruct[userAddr].sellOrderIdFifo.first(); }\r\n    function userSellOrderLast(address userAddr) public view returns(bytes32 orderId) { return userStruct[userAddr].sellOrderIdFifo.last(); }  \r\n    function userSellOrderIterate(address userAddr, bytes32 orderId) public view  returns(bytes32 idBefore, bytes32 idAfter) { return(userStruct[userAddr].sellOrderIdFifo.previous(orderId), userStruct[userAddr].sellOrderIdFifo.next(orderId)); }\r\n    function userBuyOrderCount(address userAddr) public view returns(uint count) { return userStruct[userAddr].buyOrderIdFifo.count(); }\r\n    function userBuyOrderFirst(address userAddr) public view returns(bytes32 orderId) { return userStruct[userAddr].buyOrderIdFifo.first(); }\r\n    function userBuyOrderLast(address userAddr) public view returns(bytes32 orderId) { return userStruct[userAddr].buyOrderIdFifo.last(); }\r\n    function userBuyOrderIdFifo(address userAddr, bytes32 orderId) public view  returns(bytes32 idBefore, bytes32 idAfter) { return(userStruct[userAddr].buyOrderIdFifo.previous(orderId), userStruct[userAddr].buyOrderIdFifo.next(orderId)); }\r\n     \r\n    function user(address userAddr) public view returns(uint balanceEth, uint balanceHodl) {\r\n        User storage u = userStruct[userAddr];\r\n        return(u.balanceEth, u.balanceHodl);\r\n    }\r\n    function isAccruing() public view returns(bool accruing) {\r\n        return now > BIRTHDAY.add(SLEEP_TIME);\r\n    }\r\n    function isRunning() public view returns(bool running) {\r\n        return owner() == address(0);\r\n    }\r\n    function orderLimit() public view returns(uint limitUsd) {\r\n        // get selling price in USD\r\n        (uint askUsd, /*uint accrualRate*/) = rates();\r\n        return (askUsd > maxThresholdUsd) ? 0 : maxOrderUsd;\r\n    }\r\n    function makerAddr() public view returns(address) {\r\n        return address(maker);\r\n    }\r\n    function hodlTAddr() public view returns(address) {\r\n        return address(token);\r\n    }\r\n    \r\n    /**************************************************************************************\r\n     * Initialization functions that support migration cannot be used after trading starts\r\n     **************************************************************************************/  \r\n\r\n    function initUser(address userAddr, uint hodl) external onlyOwner payable {\r\n        User storage u = userStruct[userAddr];\r\n        User storage r = userStruct[address(this)];\r\n        u.balanceEth  = u.balanceEth.add(msg.value);\r\n        u.balanceHodl = u.balanceHodl.add(hodl);\r\n        r.balanceHodl = r.balanceHodl.sub(hodl);\r\n        _makeHodler(userAddr);\r\n        emit UserInitialized(msg.sender, userAddr, hodl, msg.value);\r\n    }\r\n    function initResetUser(address userAddr) external onlyOwner {\r\n        User storage u = userStruct[userAddr];\r\n        User storage r = userStruct[address(this)];\r\n        r.balanceHodl = r.balanceHodl.add(u.balanceHodl);\r\n        if(u.balanceEth > 0) msg.sender.transfer(u.balanceEth);\r\n        emit UserUninitialized(msg.sender, userAddr, u.balanceHodl, u.balanceEth);\r\n        delete userStruct[userAddr];\r\n        _pruneHodler(userAddr);\r\n    }\r\n    function initSetHodlTAddress(IERC20 hodlToken) external onlyOwner {\r\n        /// @dev Transfer the total supply of these tokens to this contract during migration\r\n        token = IERC20(hodlToken);\r\n        emit TokenSet(msg.sender, address(token));\r\n    }\r\n    function initSetHodlUsd(uint price) external onlyOwner {\r\n        HODL_USD = price;\r\n        emit PriceSet(msg.sender, price);\r\n    }\r\n    function initSetMaker(address _maker) external onlyOwner {\r\n        maker = Maker(_maker);\r\n        emit MakerSet(msg.sender, _maker);\r\n    }\r\n    function renounceOwnership() public override onlyOwner {\r\n        require(token.balanceOf(address(this)) == TOTAL_SUPPLY, \"Assign the HoldT supply to this contract before trading starts\");\r\n        Ownable.renounceOwnership();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnHodl\",\"type\":\"uint256\"}],\"name\":\"BuyFromReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowGas\",\"type\":\"uint256\"}],\"name\":\"BuyHodlC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"BuyOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnHodl\",\"type\":\"uint256\"}],\"name\":\"BuyOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderedId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"BuyOrderOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedEth\",\"type\":\"uint256\"}],\"name\":\"BuyOrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributionAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"MakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hodlUsd\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityHodl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowGas\",\"type\":\"uint256\"}],\"name\":\"SellHodlC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"SellOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnHodl\",\"type\":\"uint256\"}],\"name\":\"SellOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityHodl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askUsd\",\"type\":\"uint256\"}],\"name\":\"SellOrderOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hodlToken\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"UserDepositEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hodlCR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethCR\",\"type\":\"uint256\"}],\"name\":\"UserInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hodlDB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethDB\",\"type\":\"uint256\"}],\"name\":\"UserUninitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIRTHDAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualDaysProcessed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowGas\",\"type\":\"uint256\"}],\"name\":\"buyHodlC\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"buyOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOrderFirst\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"buyOrderIterate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ifBefore\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"idAfter\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOrderLast\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ineth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtEth\",\"type\":\"uint256\"}],\"name\":\"convertEthToHodl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inHodl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtEth\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtHodl\",\"type\":\"uint256\"}],\"name\":\"convertHodlToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtHodl\",\"type\":\"uint256\"}],\"name\":\"convertHodlToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtUsd\",\"type\":\"uint256\"}],\"name\":\"convertUsdToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtUsd\",\"type\":\"uint256\"}],\"name\":\"convertUsdToHodl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inHodl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"row\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropyCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlTAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hodlTIssue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hodlTRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hodlerAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"initResetUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"hodlToken\",\"type\":\"address\"}],\"name\":\"initSetHodlTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"initSetHodlUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"initSetMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hodl\",\"type\":\"uint256\"}],\"name\":\"initUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccruing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"accruing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDistributionUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOrderUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxThresholdUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOrderUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limitUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hodlUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAccrualRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantityHodl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowGas\",\"type\":\"uint256\"}],\"name\":\"sellHodlC\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sellOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeHodl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrderFirst\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"sellOrderIterate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idBefore\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"idAfter\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOrderLast\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceHodl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userBuyOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userBuyOrderFirst\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"userBuyOrderIdFifo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idBefore\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"idAfter\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userBuyOrderLast\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userSellOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userSellOrderFirst\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"userSellOrderIterate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idBefore\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"idAfter\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userSellOrderLast\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HodlDex","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79694aa4d1d0a87f083e18c227af8c99a7024083b34b5be57d06a5a91e1162a4"}]}