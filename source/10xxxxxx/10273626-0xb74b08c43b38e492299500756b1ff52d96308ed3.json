{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ©️ 2020 Curio AG (Company Number FL-0002.594.728-9)\r\n * Incorporated and registered in Liechtenstein.\r\n *\r\n * Copyright ©️ 2020 Curio Capital AG (Company Number CHE-211.446.654)\r\n * Incorporated and registered in Zug, Switzerland.\r\n */\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * As of v2.5.0, only `address` sets are supported.\r\n *\r\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\r\n *\r\n * _Available since v2.5.0._\r\n *\r\n * @author Alberto Cuesta Cañada\r\n */\r\nlibrary EnumerableSet {\r\n\r\n    struct AddressSet {\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (address => uint256) index;\r\n        address[] values;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)){\r\n            set.index[value] = set.values.push(value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (contains(set, value)){\r\n            uint256 toDeleteIndex = set.index[value] - 1;\r\n            uint256 lastIndex = set.values.length - 1;\r\n\r\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n            if (lastIndex != toDeleteIndex) {\r\n                address lastValue = set.values[lastIndex];\r\n\r\n                // Move the last value to the index where the deleted value is\r\n                set.values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            }\r\n\r\n            // Delete the index entry for the deleted value\r\n            delete set.index[value];\r\n\r\n            // Delete the old entry for the moved value\r\n            set.values.pop();\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all values in the set. O(N).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     * WARNING: This function may run out of gas on large sets: use {length} and\r\n     * {get} instead in these cases.\r\n     */\r\n    function enumerate(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory output = new address[](set.values.length);\r\n        for (uint256 i; i < set.values.length; i++){\r\n            output[i] = set.values[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements on the set. O(1).\r\n     */\r\n    function length(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set.values.length;\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function get(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return set.values[index];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @galtproject/whitelisted-tokensale/contracts/traits/Administrated.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract Administrated is Initializable, Ownable {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  event AddAdmin(address indexed admin);\r\n  event RemoveAdmin(address indexed admin);\r\n\r\n  EnumerableSet.AddressSet internal admins;\r\n\r\n  modifier onlyAdmin() {\r\n    require(isAdmin(msg.sender), \"Administrated: Msg sender is not admin\");\r\n    _;\r\n  }\r\n  constructor() public {\r\n  }\r\n\r\n  function addAdmin(address _admin) external onlyOwner {\r\n    admins.add(_admin);\r\n    emit AddAdmin(_admin);\r\n  }\r\n\r\n  function removeAdmin(address _admin) external onlyOwner {\r\n    admins.remove(_admin);\r\n    emit RemoveAdmin(_admin);\r\n  }\r\n\r\n  function isAdmin(address _admin) public view returns (bool) {\r\n    return admins.contains(_admin);\r\n  }\r\n\r\n  function getAdminList() external view returns (address[] memory) {\r\n    return admins.enumerate();\r\n  }\r\n\r\n  function getAdminCount() external view returns (uint256) {\r\n    return admins.length();\r\n  }\r\n}\r\n\r\n// File: @galtproject/whitelisted-tokensale/contracts/traits/Pausable.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Administrated {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by an admin (`account`).\r\n   */\r\n  event Paused(address admin);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by an admin (`account`).\r\n   */\r\n  event Unpaused(address admin);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n   * to the deployer.\r\n   */\r\n  constructor () internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused, \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused, \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by a pauser to pause, triggers stopped state.\r\n   */\r\n  function pause() public onlyAdmin whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Called by a pauser to unpause, returns to normal state.\r\n   */\r\n  function unpause() public onlyAdmin whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: @galtproject/whitelisted-tokensale/contracts/traits/Managed.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract Managed is Administrated {\r\n\r\n  event AddManager(address indexed manager, address indexed admin);\r\n  event RemoveManager(address indexed manager, address indexed admin);\r\n\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  EnumerableSet.AddressSet internal managers;\r\n\r\n  modifier onlyAdminOrManager() {\r\n    require(isAdmin(msg.sender) || isManager(msg.sender), \"Managered: Msg sender is not admin or manager\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(isManager(msg.sender), \"Managered: Msg sender is not manager\");\r\n    _;\r\n  }\r\n\r\n  function addManager(address _manager) external onlyAdmin {\r\n    managers.add(_manager);\r\n    emit AddManager(_manager, msg.sender);\r\n  }\r\n\r\n  function removeManager(address _manager) external onlyAdmin {\r\n    managers.remove(_manager);\r\n    emit RemoveManager(_manager, msg.sender);\r\n  }\r\n\r\n  function isManager(address _manager) public view returns (bool) {\r\n    return managers.contains(_manager);\r\n  }\r\n\r\n  function getManagerList() external view returns (address[] memory) {\r\n    return managers.enumerate();\r\n  }\r\n\r\n  function getManagerCount() external view returns (uint256) {\r\n    return managers.length();\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ICarToken.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface ICarToken {\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function mint(address account, uint256 amount) external;\r\n\r\n  function burn(address account, uint256 amount) external;\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ICarTokenController.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface ICarTokenController {\r\n  event SetToken(address indexed token);\r\n  event AddNewInvestor(bytes32 indexed key, address indexed addr);\r\n  event SetInvestorActive(bytes32 indexed key, bool active);\r\n  event MigrateBalance(address indexed sender, address indexed from, address indexed to);\r\n  event ChangeInvestorAddress(address indexed sender, bytes32 indexed key, address indexed oldAddr, address newAddr);\r\n  event MintTokens(address indexed sender, address indexed addr, uint256 amount);\r\n\r\n  function requireInvestorsAreActive(address _investor1, address _investor2) external view;\r\n}\r\n\r\n// File: contracts/CarTokenController.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract CarTokenController is ICarTokenController, Managed, Pausable {\r\n\r\n  ICarToken public token;\r\n\r\n  struct Investor {\r\n    address addr;\r\n    bool active;\r\n  }\r\n\r\n  mapping(bytes32 => Investor) public investors;\r\n  mapping(address => bytes32) public keyOfInvestor;\r\n\r\n  constructor () public {}\r\n\r\n  function initialize(address _owner) public initializer {\r\n    Ownable.initialize(_owner);\r\n  }\r\n\r\n  function setToken(ICarToken _token) external onlyOwner {\r\n    token = _token;\r\n\r\n    emit SetToken(address(_token));\r\n  }\r\n\r\n  function addNewInvestors(bytes32[] calldata _keys, address[] calldata _addrs) external onlyAdminOrManager {\r\n    uint256 len = _keys.length;\r\n    require(len == _addrs.length, \"Lengths of keys and address does not match\");\r\n\r\n    for (uint256 i = 0; i < len; i++) {\r\n      _setInvestorAddress(_keys[i], _addrs[i]);\r\n\r\n      emit AddNewInvestor(_keys[i], _addrs[i]);\r\n    }\r\n  }\r\n\r\n  function setInvestorActive(bytes32 _key, bool _active) external onlyAdminOrManager {\r\n    require(investors[_key].addr != address(0), \"Investor does not exists\");\r\n    investors[_key].active = _active;\r\n\r\n    emit SetInvestorActive(_key, _active);\r\n  }\r\n\r\n  function migrateBalance(address _from, address _to) public onlyAdmin {\r\n    _migrateBalance(_from, _to);\r\n  }\r\n\r\n  function changeInvestorAddress(bytes32 _investorKey, address _newAddr) external onlyAdmin {\r\n    _changeInvestorAddress(_investorKey, _newAddr);\r\n  }\r\n\r\n  function changeInvestorAddressAndMigrateBalance(bytes32 _investorKey, address _newAddr) external onlyAdmin {\r\n    address oldAddress = investors[_investorKey].addr;\r\n    _changeInvestorAddress(_investorKey, _newAddr);\r\n    _migrateBalance(oldAddress, _newAddr);\r\n  }\r\n\r\n  function changeMyAddress(bytes32 _investorKey, address _newAddr) external whenNotPaused {\r\n    require(investors[_investorKey].addr == msg.sender, \"Investor address and msg.sender does not match\");\r\n\r\n    _changeInvestorAddress(_investorKey, _newAddr);\r\n  }\r\n\r\n  function changeMyAddressAndMigrateBalance(bytes32 _investorKey, address _newAddr) external whenNotPaused {\r\n    require(investors[_investorKey].addr == msg.sender, \"Investor address and msg.sender does not match\");\r\n\r\n    address oldAddress = investors[_investorKey].addr;\r\n    _changeInvestorAddress(_investorKey, _newAddr);\r\n    _migrateBalance(oldAddress, _newAddr);\r\n  }\r\n\r\n  function mintTokens(address _addr, uint256 _amount) external onlyAdmin {\r\n    token.mint(_addr, _amount);\r\n\r\n    emit MintTokens(msg.sender, _addr, _amount);\r\n  }\r\n\r\n  function isInvestorAddressActive(address _addr) public view returns (bool) {\r\n    return investors[keyOfInvestor[_addr]].active;\r\n  }\r\n\r\n  function requireInvestorsAreActive(address _investor1, address _investor2) public whenNotPaused view {\r\n    require(\r\n      isInvestorAddressActive(_investor1) && isInvestorAddressActive(_investor2),\r\n      \"The address has no Car token transfer permission\"\r\n    );\r\n  }\r\n\r\n  function _migrateBalance(address _from, address _to) internal {\r\n    require(isInvestorAddressActive(_to), \"Recipient investor does not active\");\r\n\r\n    uint256 fromBalance = token.balanceOf(_from);\r\n    token.burn(_from, fromBalance);\r\n    token.mint(_to, fromBalance);\r\n\r\n    emit MigrateBalance(msg.sender, _from, _to);\r\n  }\r\n\r\n  function _changeInvestorAddress(bytes32 _investorKey, address _newAddr) internal {\r\n    address oldAddress = investors[_investorKey].addr;\r\n    require(oldAddress != _newAddr, \"Old address and new address the same\");\r\n\r\n    keyOfInvestor[investors[_investorKey].addr] = bytes32(0);\r\n    investors[_investorKey] = Investor(address(0), false);\r\n\r\n    _setInvestorAddress(_investorKey, _newAddr);\r\n\r\n    emit ChangeInvestorAddress(msg.sender, _investorKey, oldAddress, _newAddr);\r\n  }\r\n\r\n  function _setInvestorAddress(bytes32 _key, address _addr) internal {\r\n    require(investors[_key].addr == address(0), \"Investor already exists\");\r\n    require(keyOfInvestor[_addr] == bytes32(0), \"Address already claimed\");\r\n\r\n    investors[_key] = Investor(_addr, true);\r\n    keyOfInvestor[_addr] = _key;\r\n  }\r\n\r\n  function checkTransfer(address from, address to, uint256 amount) public view returns(bool success, string memory error) {\r\n    if (from == address(0)) {\r\n      return (false, \"ERC20: transfer from the zero address\");\r\n    }\r\n    if (to == address(0)) {\r\n      return (false, \"ERC20: transfer to the zero address\");\r\n    }\r\n    if (token.balanceOf(from) < amount) {\r\n      return (false, \"ERC20: transfer amount exceeds balance\");\r\n    }\r\n    if (!isInvestorAddressActive(from) || !isInvestorAddressActive(to)) {\r\n      return (false, \"The address has no Car token transfer permission\");\r\n    }\r\n    if (paused()) {\r\n      return (false, \"Pausable: paused\");\r\n    }\r\n    return (true, \"\");\r\n  }\r\n\r\n  function checkTransferFrom(\r\n    address sender,\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  )\r\n    external\r\n    view\r\n    returns (bool success, string memory error)\r\n  {\r\n    (bool success, string memory error) = checkTransfer(from, to, amount);\r\n    if (!success) {\r\n      return (success, error);\r\n    }\r\n    if (token.allowance(from, sender) < amount) {\r\n      return (false, \"ERC20: transfer amount exceeds allowance\");\r\n    }\r\n    return (true, \"\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"ChangeInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MigrateBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetInvestorActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addNewInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeInvestorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeInvestorAddressAndMigrateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeMyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_investorKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeMyAddressAndMigrateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isInvestorAddressActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyOfInvestor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investor2\",\"type\":\"address\"}],\"name\":\"requireInvestorsAreActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setInvestorActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ICarToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ICarToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CarTokenController","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b1249e1115c47481a2703c818844294e092678b99fa40d041c3c71fea028fdff"}]}