{"status":"1","message":"OK","result":[{"SourceCode":"// https://uniflower.netlify.app/\r\npragma solidity ^0.4.26;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TOKEN {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StaticFlower is Ownable {\r\n    modifier onlyTokenHolders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    event onDistribute(address indexed customerAddress, uint256 price);\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingSTAT,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 statEarned,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 statReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(address indexed customerAddress, uint256 statWithdrawn);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\r\n    string public name = \"Static Flower\";\r\n    string public symbol = \"STAF\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 internal entryFee_ = 10; // 10%\r\n    uint256 internal transferFee_ = 1;\r\n    uint256 internal exitFee_ = 10; // 10%\r\n    uint256 internal referralFee_ = 20; // 2% of the 10% fee\r\n    uint256 internal constant magnitude = 2**64;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal invested_;\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    uint256 public stakingRequirement = 1e18; // 1 FLOWER\r\n    uint256 public totalHolder = 0;\r\n    uint256 public totalDonation = 0;\r\n    TOKEN erc20;\r\n\r\n    constructor() public {\r\n        erc20 = TOKEN(address(0xb4D6e7c25ae21F4E841C0802928C1df66086c368));\r\n    }\r\n\r\n    function checkAndTransferSTAT(uint256 _amount) private {\r\n        require(\r\n            erc20.transferFrom(msg.sender, address(this), _amount) == true,\r\n            \"transfer must succeed\"\r\n        );\r\n    }\r\n\r\n    function distribute(uint256 _amount) public returns (uint256) {\r\n        require(_amount > 0, \"must be a positive value\");\r\n        checkAndTransferSTAT(_amount);\r\n        totalDonation += _amount;\r\n        profitPerShare_ = SafeMath.add(\r\n            profitPerShare_,\r\n            (_amount * magnitude) / tokenSupply_\r\n        );\r\n        emit onDistribute(msg.sender, _amount);\r\n    }\r\n\r\n    function buy(uint256 _amount, address _referredBy)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        checkAndTransferSTAT(_amount);\r\n        return purchaseTokens(_referredBy, msg.sender, _amount);\r\n    }\r\n\r\n    function buyFor(\r\n        uint256 _amount,\r\n        address _customerAddress,\r\n        address _referredBy\r\n    ) public returns (uint256) {\r\n        checkAndTransferSTAT(_amount);\r\n        return purchaseTokens(_referredBy, _customerAddress, _amount);\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    function reinvest() public onlyDivis {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(0x0, _customerAddress, _dividends);\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() external {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() public onlyDivis {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        erc20.transfer(_customerAddress, _dividends);\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) public onlyTokenHolders {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        uint256 _dividends = SafeMath.div(\r\n            SafeMath.mul(_amountOfTokens, exitFee_),\r\n            100\r\n        );\r\n        uint256 _taxedSTAT = SafeMath.sub(_amountOfTokens, _dividends);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n\r\n        int256 _updatedPayouts = (int256)(\r\n            profitPerShare_ * _amountOfTokens + (_taxedSTAT * magnitude)\r\n        );\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(\r\n                profitPerShare_,\r\n                (_dividends * magnitude) / tokenSupply_\r\n            );\r\n        }\r\n\r\n        emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n        emit onTokenSell(_customerAddress, _amountOfTokens, _taxedSTAT, now);\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        external\r\n        onlyTokenHolders\r\n        returns (bool)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        if (myDividends(true) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = SafeMath.div(\r\n            SafeMath.mul(_amountOfTokens, transferFee_),\r\n            100\r\n        );\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = _tokenFee;\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_toAddress],\r\n            _taxedTokens\r\n        );\r\n\r\n        payoutsTo_[_customerAddress] -= (int256)(\r\n            profitPerShare_ * _amountOfTokens\r\n        );\r\n        payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);\r\n\r\n        profitPerShare_ = SafeMath.add(\r\n            profitPerShare_,\r\n            (_dividends * magnitude) / tokenSupply_\r\n        );\r\n\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setName(string _name) public onlyOwner {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol) public onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function totalPowerBalance() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return\r\n            _includeReferralBonus\r\n                ? dividendsOf(_customerAddress) +\r\n                    referralBalance_[_customerAddress]\r\n                : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (uint256)(\r\n                (int256)(\r\n                    profitPerShare_ * tokenBalanceLedger_[_customerAddress]\r\n                ) - payoutsTo_[_customerAddress]\r\n            ) / magnitude;\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        uint256 _stat = 1e18;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, exitFee_), 100);\r\n        uint256 _taxedSTAT = SafeMath.sub(_stat, _dividends);\r\n\r\n        return _taxedSTAT;\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        uint256 _stat = 1e18;\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, entryFee_), 100);\r\n        uint256 _taxedSTAT = SafeMath.add(_stat, _dividends);\r\n\r\n        return _taxedSTAT;\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _powerToSpend)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(\r\n            SafeMath.mul(_powerToSpend, entryFee_),\r\n            100\r\n        );\r\n        uint256 _amountOfTokens = SafeMath.sub(_powerToSpend, _dividends);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculatePowerReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _dividends = SafeMath.div(\r\n            SafeMath.mul(_tokensToSell, exitFee_),\r\n            100\r\n        );\r\n        uint256 _taxedSTAT = SafeMath.sub(_tokensToSell, _dividends);\r\n\r\n        return _taxedSTAT;\r\n    }\r\n\r\n    function getInvested() public view returns (uint256) {\r\n        return invested_[msg.sender];\r\n    }\r\n\r\n    function purchaseTokens(\r\n        address _referredBy,\r\n        address _customerAddress,\r\n        uint256 _incomingSTAT\r\n    ) internal returns (uint256) {\r\n        if (getInvested() == 0) {\r\n            totalHolder++;\r\n        }\r\n\r\n        invested_[msg.sender] += _incomingSTAT;\r\n\r\n        uint256 _undividedDividends = SafeMath.div(\r\n            SafeMath.mul(_incomingSTAT, entryFee_),\r\n            100\r\n        );\r\n\r\n        uint256 _referralBonus = SafeMath.div(\r\n            SafeMath.mul(_undividedDividends, referralFee_),\r\n            100\r\n        );\r\n\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _amountOfTokens = SafeMath.sub(\r\n            _incomingSTAT,\r\n            _undividedDividends\r\n        );\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(\r\n            _amountOfTokens > 0 &&\r\n                SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_\r\n        );\r\n\r\n        if (\r\n            _referredBy != address(0) &&\r\n            _referredBy != _customerAddress &&\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ) {\r\n            referralBalance_[_referredBy] = SafeMath.add(\r\n                referralBalance_[_referredBy],\r\n                _referralBonus\r\n            );\r\n        } else {\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ += ((_dividends * magnitude) / tokenSupply_);\r\n            _fee =\r\n                _fee -\r\n                (_fee -\r\n                    (_amountOfTokens *\r\n                        ((_dividends * magnitude) / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n\r\n        int256 _updatedPayouts = (int256)(\r\n            profitPerShare_ * _amountOfTokens - _fee\r\n        );\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(address(0), msg.sender, _amountOfTokens);\r\n        emit onTokenPurchase(\r\n            _customerAddress,\r\n            _incomingSTAT,\r\n            _amountOfTokens,\r\n            _referredBy,\r\n            now\r\n        );\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function multiData()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            // [0] Total FLOWER in contract\r\n            totalPowerBalance(),\r\n            // [1] Total STAF supply\r\n            totalSupply(),\r\n            // [2] User STAF balance\r\n            balanceOf(msg.sender),\r\n            // [3] User FLOWER balance\r\n            erc20.balanceOf(msg.sender),\r\n            // [4] User divs\r\n            dividendsOf(msg.sender),\r\n            // [5] Buy price\r\n            buyPrice(),\r\n            // [6] Sell price\r\n            sellPrice()\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_powerToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPowerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculatePowerReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingSTAT\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"statEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"statReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"statWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StaticFlower","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ac3bd6cb570fbfb254351da30125f927820323fce375b61c8d4767131ffa594f"}]}