{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\ncontract Betnomi_Staking {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    //address TokenContractAddress = address(0xAc7873699c0fBcac99d6c46A846505A60e6d8949); //testnet\r\n    address TokenContractAddress = address(0xDDf4391Cf47dA6B0A26Ee94D900faf70FbE9C655); //mainnet\r\n    TokenContract token; \r\n    address payable _owner;\r\n    \r\n    struct Variables {\r\n        uint256         minInvestment;\r\n        uint256         APY;\r\n        uint256         ClaimTime;\r\n        uint256         totalInvested;\r\n        uint256         totalInterest;\r\n    }\r\n    Variables public vars;\r\n    mapping(address => uint256) public investment;\r\n    mapping(address => uint256) public interest;\r\n    mapping(address => uint256) public lastInterestTime;\r\n    mapping(address => uint256) public totalearnedInterest;\r\n    \r\n    event Invested(address _address,uint256 Amount);\r\n    event WithdrawInvestment(address _address,uint256 Amount);\r\n    event WithdrawInterest(address _address,uint256 Amount);\r\n    \r\n    constructor () public //creation settings\r\n    {\r\n        _owner              = msg.sender;\r\n        token               = TokenContract(TokenContractAddress);\r\n        \r\n        vars.APY            = 2600;         //X% * 100 \r\n        vars.minInvestment  = (10**16);    \r\n        vars.ClaimTime      = 24*60*60;     //seconds\r\n    }\r\n    \r\n    function stake(uint256 amount) public {\r\n        require(amount>=vars.minInvestment,'not min Investment');\r\n        \r\n        //Check if the contract is allowed to send token on user behalf\r\n        uint256 allowance = token.allowance(msg.sender,address(this));\r\n        require (allowance>=amount,'allowance error');\r\n\r\n        require(token.transferFrom(msg.sender,address(this),amount),'transfer Token Error');\r\n        \r\n        if (lastInterestTime[msg.sender] == 0)\r\n            lastInterestTime[msg.sender] = now;\r\n        else{\r\n            interest[msg.sender] = interest[msg.sender].add(calculateInterest(msg.sender));\r\n            lastInterestTime[msg.sender] = now;\r\n        }\r\n            \r\n        investment[msg.sender] = investment[msg.sender].add(amount);\r\n        vars.totalInvested = vars.totalInvested.add(amount);\r\n        emit Invested(msg.sender,amount);\r\n    }\r\n    function Unstake(uint256 amount) public {\r\n        require(lastInterestTime[msg.sender]!=0);\r\n        require(lastInterestTime[msg.sender]<now);\r\n        require(amount<=investment[msg.sender],'not enough fund');\r\n        \r\n        require(token.transfer(msg.sender, amount),'transfer Token Error');\r\n        \r\n        //accumulate current Interest and set new time\r\n        interest[msg.sender] = interest[msg.sender].add(calculateInterest(msg.sender));\r\n        lastInterestTime[msg.sender] = now;\r\n        \r\n        investment[msg.sender] = investment[msg.sender].sub(amount);\r\n        vars.totalInvested = vars.totalInvested.sub(amount);\r\n        emit WithdrawInvestment(msg.sender,amount);\r\n    }\r\n    function claimRewards() public {\r\n        require(lastInterestTime[msg.sender]!=0);\r\n        require(lastInterestTime[msg.sender]<now);\r\n        uint256 currentInterest = calculateInterest(msg.sender);\r\n        \r\n        require(token.transfer(msg.sender, interest[msg.sender]+currentInterest),'transfer Token Error');\r\n        emit WithdrawInterest(msg.sender,interest[msg.sender]+currentInterest);\r\n        vars.totalInterest = vars.totalInterest.add(interest[msg.sender]+currentInterest);\r\n        totalearnedInterest[msg.sender] = totalearnedInterest[msg.sender].add(interest[msg.sender]+currentInterest);\r\n        \r\n        interest[msg.sender] = 0;\r\n        lastInterestTime[msg.sender] = now;\r\n        \r\n    }\r\n    //interest from last withdrawTime\r\n    function calculateInterest(address account) public view returns(uint256){\r\n        require(lastInterestTime[account]!=0);\r\n        require(lastInterestTime[account]<now);\r\n        uint256 stakingDuration = now.sub(lastInterestTime[account]);  //in seconds\r\n        \r\n        return investment[account].mul(stakingDuration).mul(vars.APY).div(365*24*60*60*10000);\r\n        \r\n    }\r\n    function getContractBalance() public view returns(uint256 _contractBalance) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    //Setters\r\n    function setAPY(uint256 _APY) public onlyOwner {\r\n        vars.APY = _APY;\r\n    }\r\n    function setminInvestment(uint256 _min) public onlyOwner {\r\n        vars.minInvestment = _min;\r\n    }\r\n    function setClaimTime(uint256 _ClaimTime) public onlyOwner {\r\n        vars.ClaimTime = _ClaimTime;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender==_owner,'Not Owner');\r\n        _;\r\n    }\r\n    function getOwner() public view returns(address ) {\r\n        return _owner;\r\n    }\r\n    //Protect the pool in case of hacking\r\n    function kill() onlyOwner public {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_owner, balance);\r\n        selfdestruct(_owner);\r\n    }\r\n    function transferFund(uint256 amount) onlyOwner public {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(amount<=balance,'exceed contract balance');\r\n        token.transfer(_owner, amount);\r\n    }\r\n    function transferOwnership(address payable _newOwner) onlyOwner external {\r\n        require(_newOwner != address(0) && _newOwner != _owner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenContract\r\n{\r\n    function transferFrom(address, address, uint256) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe maths\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawInvestment\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInterestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ClaimTime\",\"type\":\"uint256\"}],\"name\":\"setClaimTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setminInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalearnedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Betnomi_Staking","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://90e5ab99b59e5c7ec73b99c4523ee12c0a4b3baf1985033cb4d3983222d20259"}]}