{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract ERC20Detailed {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract MultisigVaultERC20 {\r\n\r\n    struct Approval {\r\n        uint256 nonce;\r\n        uint256 coincieded;\r\n        address[] coinciedeParties;\r\n    }\r\n\r\n    uint8 private participantsAmount;\r\n    uint8 private signatureMinThreshold;\r\n    uint32 private nonce;\r\n    address public currencyAddress;\r\n\r\n    mapping(address => bool) public parties;\r\n\r\n    mapping(\r\n        // Destination\r\n        address => mapping(\r\n            // Amount\r\n            uint256 => Approval\r\n        )\r\n    ) public approvals;\r\n\r\n    mapping(uint256 => bool) public finished;\r\n\r\n    event ConfirmationReceived(address indexed from, address indexed destination, address currency, uint256 amount);\r\n    event ConsensusAchived(address indexed destination, address currency, uint256 amount);\r\n\r\n    /**\r\n      * @dev Construcor.\r\n      *\r\n      * Requirements:\r\n      * - `_signatureMinThreshold` .\r\n      * - `_parties`.\r\n      */\r\n    constructor(\r\n        uint8 _signatureMinThreshold,\r\n        address[] memory _parties,\r\n        address _currencyAddress\r\n    ) public {\r\n        require(_parties.length > 0 && _parties.length <= 10);\r\n        require(_signatureMinThreshold > 0 && _signatureMinThreshold <= _parties.length);\r\n\r\n        signatureMinThreshold = _signatureMinThreshold;\r\n        currencyAddress = _currencyAddress;\r\n\r\n        for (uint256 i = 0; i < _parties.length; i++) parties[_parties[i]] = true;\r\n    }\r\n\r\n    function getNonce(\r\n        address _destination,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        Approval storage approval = approvals[_destination][_amount];\r\n\r\n        return approval.nonce;\r\n    }\r\n\r\n    function partyCoincieded(\r\n        address _destination,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        address _partyAddress\r\n    ) public view returns (bool) {\r\n        if ( finished[_nonce] ) {\r\n          return true;\r\n        } else {\r\n          Approval storage approval = approvals[_destination][_amount];\r\n\r\n          for (uint i=0; i<approval.coinciedeParties.length; i++) {\r\n             if (approval.coinciedeParties[i] == _partyAddress) return true;\r\n          }\r\n\r\n          return false;\r\n        }\r\n    }\r\n\r\n\r\n    function approve(\r\n        address _destination,\r\n        uint256 _amount\r\n    ) public returns (bool) {\r\n        require(parties[msg.sender]); // isMember\r\n        require(token().balanceOf(address(this)) >= _amount); // isSufficientBalance\r\n\r\n        Approval storage approval = approvals[_destination][_amount]; // Create new project\r\n\r\n        bool coinciedeParties = false;\r\n        for (uint i=0; i<approval.coinciedeParties.length; i++) {\r\n           if (approval.coinciedeParties[i] == msg.sender) coinciedeParties = true;\r\n        }\r\n\r\n        require(!coinciedeParties);\r\n\r\n        if (approval.coincieded == 0) {\r\n            nonce += 1;\r\n            approval.nonce = nonce;\r\n        }\r\n\r\n        approval.coinciedeParties.push(msg.sender);\r\n        approval.coincieded += 1;\r\n\r\n        emit ConfirmationReceived(msg.sender, _destination, currencyAddress, _amount);\r\n\r\n        if ( approval.coincieded >= signatureMinThreshold ) {\r\n            token().transfer(_destination, _amount); // Release funds\r\n\r\n            finished[approval.nonce] = true;\r\n            delete approvals[_destination][_amount];\r\n\r\n            emit ConsensusAchived(_destination, currencyAddress, _amount);\r\n        }\r\n\r\n       return false;\r\n    }\r\n\r\n    function token() public view returns (ERC20Detailed) {\r\n        return ERC20Detailed(currencyAddress);\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return token().symbol();\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return token().decimals();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_signatureMinThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_parties\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConfirmationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConsensusAchived\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coincieded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partyAddress\",\"type\":\"address\"}],\"name\":\"partyCoincieded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultisigVaultERC20","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fdae25d2454746132ba20fd9ae52f9b3efd955aa000000000000000000000000cb9017ad4afd002053cd6b31e283451f71a8f0ec","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://22e1ef749c1065febd585cf2d3da4b2010918caff790d51368c4423df4e3f72f"}]}