{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ReviewStorage\r\n * @dev The ReviewStorage contract has an  .\r\n */\r\ncontract ReviewStorage {\r\n\r\n    mapping (string => bool) internal  clientReviews;\r\n    string[] public indexReview;\r\n\r\n    event NewReviewHash(string _reviewHash, uint256 _createdTime);\r\n\r\n    /**\r\n     * @dev Returns whether this hash exists or not.\r\n     * @param _hashReview Verifiable hash.\r\n     */\r\n    function getExistingReview(string _hashReview) public view returns(bool) {\r\n        if (clientReviews[_hashReview] == true) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns hash by index.\r\n    * @param _index  Verifiable index.\r\n    */\r\n    function getReviewHash(uint256 _index) public view returns(string) {\r\n        require(_index < indexReview.length, \"Index hasn't exist\");\r\n        return indexReview[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of saved hashes.\r\n    */\r\n    function totalHashes() public view returns(uint256) {\r\n        return indexReview.length;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ReviewContract\r\n * @dev The ReviewContract contract has an   .\r\n */\r\ncontract ReviewContract is Ownable, ReviewStorage {\r\n\r\n    /**\r\n    * @dev The ReviewContract constructor\r\n    */\r\n    constructor () public { }\r\n\r\n\r\n    /**\r\n     * @dev Saves the hash to storage if it doesn't already exist\r\n     * @param _reviewHash  Verifiable hash.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function addNewReviewHash(string  _reviewHash) public onlyOwner {\r\n        require(!getExistingReview(_reviewHash), \"Index hasn't exist\");\r\n        clientReviews[_reviewHash] = true;\r\n        indexReview.push(string(_reviewHash));\r\n        emit NewReviewHash(_reviewHash, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Fullback call\r\n     */\r\n    function () public payable {\r\n        revert(\"Contract cannot be funded\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexReview\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reviewHash\",\"type\":\"string\"}],\"name\":\"addNewReviewHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hashReview\",\"type\":\"string\"}],\"name\":\"getExistingReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReviewHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reviewHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_createdTime\",\"type\":\"uint256\"}],\"name\":\"NewReviewHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReviewContract","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7217079aacb56d36090bb4ab7d1cf07729ef43adc85c82f691fdedf97bd9f610"}]}