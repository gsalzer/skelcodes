{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n  }\r\nlibrary SafeMath {\r\n     /**\r\n      * @dev Returns the addition of two unsigned integers, reverting on\r\n      * overflow.\r\n      *\r\n      * Counterpart to Solidity's `+` operator.\r\n      *\r\n      * Requirements:\r\n      * - Addition cannot overflow.\r\n      */\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         uint256 c = a + b;\r\n         require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n         return c;\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the subtraction of two unsigned integers, reverting on\r\n      * overflow (when the result is negative).\r\n      *\r\n      * Counterpart to Solidity's `-` operator.\r\n      *\r\n      * Requirements:\r\n      * - Subtraction cannot overflow.\r\n      */\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return sub(a, b, \"SafeMath: subtraction overflow\");\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n      * overflow (when the result is negative).\r\n      *\r\n      * Counterpart to Solidity's `-` operator.\r\n      *\r\n      * Requirements:\r\n      * - Subtraction cannot overflow.\r\n      */\r\n     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n         require(b <= a, errorMessage);\r\n         uint256 c = a - b;\r\n\r\n         return c;\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the multiplication of two unsigned integers, reverting on\r\n      * overflow.\r\n      *\r\n      * Counterpart to Solidity's `*` operator.\r\n      *\r\n      * Requirements:\r\n      * - Multiplication cannot overflow.\r\n      */\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n         // benefit is lost if 'b' is also tested.\r\n         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n         if (a == 0) {\r\n             return 0;\r\n         }\r\n\r\n         uint256 c = a * b;\r\n         require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n         return c;\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the integer division of two unsigned integers. Reverts on\r\n      * division by zero. The result is rounded towards zero.\r\n      *\r\n      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n      * uses an invalid opcode to revert (consuming all remaining gas).\r\n      *\r\n      * Requirements:\r\n      * - The divisor cannot be zero.\r\n      */\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return div(a, b, \"SafeMath: division by zero\");\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n      * division by zero. The result is rounded towards zero.\r\n      *\r\n      * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n      * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n      * uses an invalid opcode to revert (consuming all remaining gas).\r\n      *\r\n      * Requirements:\r\n      * - The divisor cannot be zero.\r\n      */\r\n     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n         // Solidity only automatically asserts when dividing by 0\r\n         require(b > 0, errorMessage);\r\n         uint256 c = a / b;\r\n         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n         return c;\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n      * Reverts when dividing by zero.\r\n      *\r\n      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n      * invalid opcode to revert (consuming all remaining gas).\r\n      *\r\n      * Requirements:\r\n      * - The divisor cannot be zero.\r\n      */\r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return mod(a, b, \"SafeMath: modulo by zero\");\r\n     }\r\n\r\n     /**\r\n      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n      * Reverts with custom message when dividing by zero.\r\n      *\r\n      * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n      * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n      * invalid opcode to revert (consuming all remaining gas).\r\n      *\r\n      * Requirements:\r\n      * - The divisor cannot be zero.\r\n      */\r\n     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n         require(b != 0, errorMessage);\r\n         return a % b;\r\n     }\r\n }\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\ninterface IUniswapFactory {\r\n    function getExchange(IERC20 token)  external view returns (UniswapExchangeInterface exchange);\r\n}\r\ninterface UniswapExchangeInterface {\r\n    // // Address of ERC20 token sold on this exchange\r\n    // function tokenAddress() external view returns (address token);\r\n    // // Address of Uniswap Factory\r\n    // function factoryAddress() external view returns (address factory);\r\n    // // Provide Liquidity\r\n    // function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    // function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    // function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    // function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // // Trade ETH to ERC20\r\n    // function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    // function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    // function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // // Trade ERC20 to ETH\r\n    // function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    // function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    // function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // // Trade ERC20 to ERC20\r\n    // function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    // function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    // function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    // function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // // Trade ERC20 to Custom Pool\r\n    // function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    // function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    // function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // // ERC20 comaptibility for liquidity tokens\r\n    // bytes32 public name;\r\n    // bytes32 public symbol;\r\n    // uint256 public decimals;\r\n    // function transfer(address _to, uint256 _value) external returns (bool);\r\n    // function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    // function approve(address _spender, uint256 _value) external returns (bool);\r\n    // function allowance(address _owner, address _spender) external view returns (uint256);\r\n    // function balanceOf(address _owner) external view returns (uint256);\r\n    // function totalSupply() external view returns (uint256);\r\n    // // Never use\r\n    // function setup(address token_addr) external;\r\n}\r\ninterface ILiquidityPool {\r\n    event Withdraw(address indexed account, uint amount, uint writeAmount);\r\n    event Provide (address indexed account, uint amount, uint writeAmount);\r\n    function totalBalance() external view returns (uint amount);\r\n    function lock(uint amount) external;\r\n    function unlock(uint amount) external;\r\n    function send(address payable account, uint amount) external;\r\n}\r\ninterface IERCLiquidityPool is ILiquidityPool {\r\n    function token() external view returns(IERC20);\r\n}\r\ninterface ERC20Incorrect { // for the future\r\n  function balanceOf(address who) external view returns (uint);\r\n  function transfer(address to, uint value) external;\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function transferFrom(address from, address to, uint value) external;\r\n  function approve(address spender, uint value) external;\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ninterface SpreadLock {\r\n  function highSpreadLockEnabled() external returns (bool);\r\n}\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n  \r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n  \r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\ncontract ERC20 is Context, IERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n  \r\n  mapping (address => uint256) private _balances;\r\n  \r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  \r\n  uint256 private _totalSupply;\r\n  \r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n  \r\n  /**\r\n  * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n  * a default value of 18.\r\n  *\r\n  * To select a different value for {decimals}, use {_setupDecimals}.\r\n  *\r\n  * All three of these values are immutable: they can only be set once during\r\n  * construction.\r\n  */\r\n  constructor (string memory name, string memory symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = 18;\r\n  }\r\n  \r\n  /**\r\n  * @dev Returns the name of the token.\r\n  */\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n  \r\n  /**\r\n  * @dev Returns the symbol of the token, usually a shorter version of the\r\n  * name.\r\n  */\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n  \r\n  /**\r\n  * @dev Returns the number of decimals used to get its user representation.\r\n  * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n  * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n  *\r\n  * Tokens usually opt for a value of 18, imitating the relationship between\r\n  * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n  * called.\r\n  *\r\n  * NOTE: This information is only used for _display_ purposes: it in\r\n  * no way affects any of the arithmetic of the contract, including\r\n  * {IERC20-balanceOf} and {IERC20-transfer}.\r\n  */\r\n  function decimals() public view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-totalSupply}.\r\n  */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-balanceOf}.\r\n  */\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-transfer}.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `recipient` cannot be the zero address.\r\n  * - the caller must have a balance of at least `amount`.\r\n  */\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-allowance}.\r\n  */\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-approve}.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `spender` cannot be the zero address.\r\n  */\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev See {IERC20-transferFrom}.\r\n  *\r\n  * Emits an {Approval} event indicating the updated allowance. This is not\r\n  * required by the EIP. See the note at the beginning of {ERC20};\r\n  *\r\n  * Requirements:\r\n  * - `sender` and `recipient` cannot be the zero address.\r\n  * - `sender` must have a balance of at least `amount`.\r\n  * - the caller must have allowance for ``sender``'s tokens of at least\r\n  * `amount`.\r\n  */\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n  *\r\n  * This is an alternative to {approve} that can be used as a mitigation for\r\n  * problems described in {IERC20-approve}.\r\n  *\r\n  * Emits an {Approval} event indicating the updated allowance.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `spender` cannot be the zero address.\r\n  */\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n  *\r\n  * This is an alternative to {approve} that can be used as a mitigation for\r\n  * problems described in {IERC20-approve}.\r\n  *\r\n  * Emits an {Approval} event indicating the updated allowance.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `spender` cannot be the zero address.\r\n  * - `spender` must have allowance for the caller of at least\r\n  * `subtractedValue`.\r\n  */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n  *\r\n  * This is internal function is equivalent to {transfer}, and can be used to\r\n  * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n  *\r\n  * Emits a {Transfer} event.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `sender` cannot be the zero address.\r\n  * - `recipient` cannot be the zero address.\r\n  * - `sender` must have a balance of at least `amount`.\r\n  */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    \r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n    \r\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n  \r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n  * the total supply.\r\n  *\r\n  * Emits a {Transfer} event with `from` set to the zero address.\r\n  *\r\n  * Requirements\r\n  *\r\n  * - `to` cannot be the zero address.\r\n  */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n    \r\n    _beforeTokenTransfer(address(0), account, amount);\r\n    \r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n  \r\n  /**\r\n  * @dev Destroys `amount` tokens from `account`, reducing the\r\n  * total supply.\r\n  *\r\n  * Emits a {Transfer} event with `to` set to the zero address.\r\n  *\r\n  * Requirements\r\n  *\r\n  * - `account` cannot be the zero address.\r\n  * - `account` must have at least `amount` tokens.\r\n  */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n    \r\n    _beforeTokenTransfer(account, address(0), amount);\r\n    \r\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n  \r\n  /**\r\n  * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n  *\r\n  * This is internal function is equivalent to `approve`, and can be used to\r\n  * e.g. set automatic allowances for certain subsystems, etc.\r\n  *\r\n  * Emits an {Approval} event.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `owner` cannot be the zero address.\r\n  * - `spender` cannot be the zero address.\r\n  */\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    \r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n  \r\n  /**\r\n  * @dev Sets {decimals} to a value other than the default one of 18.\r\n  *\r\n  * WARNING: This function should only be called from the constructor. Most\r\n  * applications that interact with token contracts will not expect\r\n  * {decimals} to ever change, and may work incorrectly if it does.\r\n  */\r\n  function _setupDecimals(uint8 decimals_) internal {\r\n    _decimals = decimals_;\r\n  }\r\n  \r\n  /**\r\n  * @dev Hook that is called before any transfer of tokens. This includes\r\n  * minting and burning.\r\n  *\r\n  * Calling conditions:\r\n  *\r\n  * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n  * will be to transferred to `to`.\r\n  * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n  * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n  * - `from` and `to` are never both zero.\r\n  *\r\n  * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n  */\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract HegicETHPool is ILiquidityPool, Ownable, ERC20(\"Hegic ETH LP Token\", \"writeETH\"){\r\n    using SafeMath for uint256;\r\n    uint public lockedAmount;\r\n    mapping(address => uint) private lastProvideBlock;\r\n\r\n    /*\r\n     * @nonce Send premiums to the liquidity pool\r\n     **/\r\n    receive() external payable {}\r\n\r\n    /*\r\n     * @nonce Returns the available amount in ETH for withdrawals\r\n     * @return balance Unlocked amount\r\n     */\r\n    function availableBalance() public view returns (uint balance) {\r\n        balance = totalBalance().sub(lockedAmount);\r\n    }\r\n\r\n    /*\r\n     * @nonce Returns the ETH total balance provided to the pool\r\n     * @return balance Pool balance\r\n     */\r\n    function totalBalance() public override view returns (uint balance) {\r\n        balance = address(this).balance;\r\n    }\r\n\r\n    /*\r\n     * @nonce A provider supplies ETH to the pool and receives writeETH tokens\r\n     * @param minMint Low limit tokens that should be received\r\n     * @return mint Received tokens amount\r\n     */\r\n    function provide(uint minMint) public payable returns (uint mint) {\r\n        mint = provide();\r\n        require(mint >= minMint, \"Pool: Mint limit is too large\");\r\n    }\r\n\r\n    /*\r\n     * @nonce A provider supplies ETH to the pool and receives writeETH tokens\r\n     * @return mint Tokens amount received\r\n     */\r\n    function provide() public payable returns (uint mint) {\r\n        lastProvideBlock[msg.sender] = block.number;\r\n        require(!SpreadLock(owner()).highSpreadLockEnabled(), \"Pool: Locked\");\r\n        if(totalSupply().mul(totalBalance()) == 0)\r\n            mint = msg.value.mul(1000);\r\n        else\r\n            mint = msg.value.mul(totalSupply()).div(totalBalance().sub(msg.value));\r\n        require(mint > 0, \"Pool: Amount is too small\");\r\n        emit Provide(msg.sender, msg.value, mint);\r\n        _mint(msg.sender, mint);\r\n    }\r\n\r\n    /*\r\n     * @nonce Provider burns writeETH and receives ETH back from the pool\r\n     * @param amount ETH amount to receive\r\n     * @param maxBurn Upper limit tokens that can be burned\r\n     * @return burn Tokens amount burnt\r\n     */\r\n    function withdraw(uint amount, uint maxBurn) public returns (uint burn) {\r\n        burn = withdraw(amount);\r\n        require(burn <= maxBurn, \"Pool: Burn limit is too small\");\r\n    }\r\n\r\n    /*\r\n     * @nonce Provider burns writeETH and receives ETH back from the pool\r\n     * @param amount ETH amount to receive\r\n     * @return burn Tokens amount burnt\r\n     */\r\n    function withdraw(uint amount) public returns (uint burn) {\r\n        require(\r\n            lastProvideBlock[msg.sender] != block.number,\r\n            \"Pool: Provide & Withdraw in one block\"\r\n        );\r\n        require(amount <= availableBalance(), \"Pool: Insufficient unlocked funds\");\r\n        burn = amount.mul(totalSupply()).div(totalBalance());\r\n        require(burn <= balanceOf(msg.sender), \"Pool: Amount is too large\");\r\n        require(burn > 0, \"Pool: Amount is too small\");\r\n        _burn(msg.sender, burn);\r\n        emit Withdraw(msg.sender, amount, burn);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /*\r\n     * @nonce Returns a share of the privider in ETH\r\n     * @param account User address\r\n     * @return A share of the provider in ETH\r\n     */\r\n    function shareOf(address account) public view returns (uint share){\r\n        if(totalBalance() > 0) share = totalBalance()\r\n            .mul(balanceOf(account))\r\n            .div(totalSupply());\r\n    }\r\n\r\n    /*\r\n     * @nonce calls by HegicCallOptions to lock funds\r\n     * @param amount Funds that should be locked\r\n     */\r\n    function lock(uint amount) public override onlyOwner {\r\n        require(\r\n            lockedAmount.add(amount).mul(10).div(totalBalance()) < 8,\r\n            \"Pool: Insufficient unlocked funds\" );\r\n        lockedAmount = lockedAmount.add(amount);\r\n    }\r\n\r\n    /*\r\n     * @nonce calls by HegicCallOptions to unlock funds\r\n     * @param amount Funds that should be unlocked\r\n     */\r\n    function unlock(uint amount) public override onlyOwner {\r\n        require(lockedAmount >= amount, \"Pool: Insufficient locked funds\");\r\n        lockedAmount = lockedAmount.sub(amount);\r\n    }\r\n\r\n    /*\r\n     * @nonce calls by HegicCallOptions to send funds to the provider after an option is closed\r\n     * @param to Provider\r\n     * @param amount Funds that should be sent\r\n     */\r\n    function send(address payable to, uint amount) public override onlyOwner {\r\n        require(lockedAmount >= amount, \"Pool: Insufficient locked funds\");\r\n        lockedAmount -= amount;\r\n        to.transfer(amount);\r\n    }\r\n  }\r\ncontract HegicERCPool is IERCLiquidityPool, Ownable, ERC20(\"Hegic DAI LP Token\", \"writeDAI\"){\r\n      using SafeMath for uint256;\r\n      uint public lockedAmount;\r\n      mapping(address => uint) private lastProvideBlock;\r\n      IERC20 public override token;\r\n\r\n      /*\r\n       * @return _token DAI Address\r\n       */\r\n      constructor(IERC20 _token) public {\r\n          token = _token;\r\n      }\r\n\r\n      /*\r\n       * @nonce Returns the available amount in DAI for withdrawals\r\n       * @return balance Unlocked amount\r\n       */\r\n      function availableBalance() public view returns (uint balance) {\r\n          balance = totalBalance().sub(lockedAmount);\r\n      }\r\n\r\n      /*\r\n       * @nonce Returns the DAI total balance provided to the pool\r\n       * @return balance Pool balance\r\n       */\r\n      function totalBalance() public override view returns (uint balance) {\r\n           balance = token.balanceOf(address(this));\r\n      }\r\n\r\n      /*\r\n       * @nonce A provider supplies DAI to the pool and receives writeDAI tokens\r\n       * @param amount Amount provided\r\n       * @param minMint Low limit tokens that should be received\r\n       * @return mint Received tokens amount\r\n       */\r\n      function provide(uint amount, uint minMint) public returns (uint mint) {\r\n          mint = provide(amount);\r\n          require(mint >= minMint, \"Pool: Mint limit is too large\");\r\n      }\r\n\r\n      /*\r\n       * @nonce A provider supplies DAI to the pool and receives writeDAI tokens\r\n       * @param amount Provided tokens\r\n       * @return mint Tokens amount received\r\n       */\r\n      function provide(uint amount) public returns (uint mint) {\r\n          lastProvideBlock[msg.sender] = block.number;\r\n          require(!SpreadLock(owner()).highSpreadLockEnabled(), \"Pool: Locked\");\r\n          if(totalSupply().mul(totalBalance()) == 0)\r\n              mint = amount.mul(1000);\r\n          else\r\n              mint = amount.mul(totalSupply()).div(totalBalance());\r\n\r\n          require(mint > 0, \"Pool: Amount is too small\");\r\n          emit Provide(msg.sender, amount, mint);\r\n          require(\r\n              token.transferFrom(msg.sender, address(this), amount),\r\n              \"Insufficient funds\"\r\n          );\r\n          _mint(msg.sender, mint);\r\n      }\r\n\r\n      /*\r\n       * @nonce Provider burns writeDAI and receives DAI back from the pool\r\n       * @param amount DAI amount to receive\r\n       * @param maxBurn Upper limit tokens that can be burned\r\n       * @return burn Tokens amount burnt\r\n       */\r\n      function withdraw(uint amount, uint maxBurn) public returns (uint burn) {\r\n          burn = withdraw(amount);\r\n          require(burn <= maxBurn, \"Pool: Burn limit is too small\");\r\n      }\r\n\r\n      /*\r\n       * @nonce Provider burns writeDAI and receives DAI back from the pool\r\n       * @param amount DAI amount to receive\r\n       * @return mint Tokens amount burnt\r\n       */\r\n      function withdraw(uint amount) public returns (uint burn) {\r\n          require(\r\n              lastProvideBlock[msg.sender] != block.number,\r\n              \"Pool: Provide & Withdraw in one block\"\r\n          );\r\n          require(amount <= availableBalance(), \"Pool: Insufficient unlocked funds\");\r\n          burn = amount.mul(totalSupply()).div(totalBalance());\r\n          require(burn <= balanceOf(msg.sender), \"Pool: Amount is too large\");\r\n          require(burn > 0, \"Pool: Amount is too small\");\r\n          _burn(msg.sender, burn);\r\n          emit Withdraw(msg.sender, amount, burn);\r\n          require(\r\n              token.transfer(msg.sender, amount),\r\n              \"Insufficient funds\"\r\n          );\r\n      }\r\n\r\n      /*\r\n       * @nonce Returns a share of the provider in DAI\r\n       * @param account User address\r\n       * @return A share of the provider in DAI\r\n       */\r\n      function shareOf(address user) public view returns (uint share){\r\n          if(totalBalance() > 0)\r\n              share = totalBalance().mul(balanceOf(user)).div(totalSupply());\r\n      }\r\n\r\n      /*\r\n       * @nonce calls by HegicPutOptions to lock funds\r\n       * @param amount Funds that should be locked\r\n       */\r\n      function lock(uint amount) public override onlyOwner {\r\n          require(\r\n              lockedAmount.add(amount).mul(10).div( totalBalance() ) < 8,\r\n              \"Pool: Insufficient unlocked funds\"\r\n          );\r\n          lockedAmount = lockedAmount.add(amount);\r\n      }\r\n\r\n      /*\r\n       * @nonce calls by HegicPutOptions to unlock funds\r\n       * @param amount Funds that should be unlocked\r\n       */\r\n      function unlock(uint amount) public override onlyOwner {\r\n          require(lockedAmount >= amount, \"Pool: Insufficient locked funds\");\r\n          lockedAmount = lockedAmount.sub(amount);\r\n      }\r\n\r\n      /*\r\n       * @nonce calls by HegicPutOptions to send funds to the provider after an option is closed\r\n       * @param to Provider\r\n       * @param amount Funds that should be sent\r\n       */\r\n      function send(address payable to, uint amount) public override onlyOwner {\r\n          require(lockedAmount >= amount, \"Pool: Insufficient locked funds\");\r\n          lockedAmount -= amount;\r\n          require(\r\n              token.transfer(to, amount),\r\n              \"Insufficient funds\"\r\n          );\r\n      }\r\n  }\r\nabstract contract HegicOptions is Ownable, SpreadLock {\r\n      using SafeMath for uint;\r\n\r\n      Option[] public options;\r\n      uint public impliedVolRate = 18000;\r\n      uint public maxSpread = 95;//%\r\n      uint constant priceDecimals = 1e8;\r\n      uint constant activationTime = 15 minutes;\r\n      AggregatorInterface public priceProvider;\r\n      IUniswapFactory public exchanges;\r\n      IERC20 token;\r\n      ILiquidityPool public pool;\r\n      OptionType private optionType;\r\n      bool public override highSpreadLockEnabled;\r\n\r\n      event Create (uint indexed id, address indexed account, uint settlementFee, uint totalFee);\r\n      event Exercise (uint indexed id, uint exchangeAmount);\r\n      event Expire (uint indexed id);\r\n      enum State { Active, Exercised, Expired }\r\n      enum OptionType { Put, Call }\r\n      struct Option {\r\n          State state;\r\n          address payable holder;\r\n          uint strikeAmount;\r\n          uint amount;\r\n          uint expiration;\r\n          uint activation;\r\n      }\r\n\r\n      /**\r\n       * @param DAI The address of the DAI token\r\n       * @param pp The address of the ChainLink ETH/USD price feed contract\r\n       * @param ex The address of the Uniswap Factory\r\n       * @param _type Put or call contract type\r\n       */\r\n      constructor(IERC20 DAI, AggregatorInterface pp, IUniswapFactory ex, OptionType _type) public {\r\n          token = DAI;\r\n          priceProvider = pp;\r\n          exchanges = ex;\r\n          optionType = _type;\r\n      }\r\n\r\n      /**\r\n       * @notice Used to adjust prices\r\n       * @param value New IVRate value\r\n       */\r\n      function setImpliedVolRate(uint value) public onlyOwner {\r\n          require(value >= 10000, \"ImpliedVolRate limit is too small\");\r\n          impliedVolRate = value;\r\n      }\r\n\r\n      /**\r\n       * @notice Used to adjust the spread limit\r\n       * @param value New maxSpread value\r\n       */\r\n      function setMaxSpread(uint value) public onlyOwner {\r\n          require(value <= 95, \"Spread limit is too large\");\r\n          maxSpread = value;\r\n      }\r\n\r\n      /**\r\n       * @notice Used to get actual option's prices\r\n       * @param period Option period in seconds (1 days <= period <= 8 weeks)\r\n       * @param amount Option amount\r\n       * @param strike Strike price of the option\r\n       * @return total Total price needs to be paid\r\n       * @return settlementFee Amount to be distributed between the HEGIC token holders\r\n       * @return strikeFee Amount that covers the price difference in the ITM options\r\n       * @return slippageFee Compensates the slippage during the exercising process\r\n       * @return periodFee Option period fee\r\n       */\r\n      function fees(\r\n          uint period,\r\n          uint amount,\r\n          uint strike\r\n      )\r\n          public\r\n          view\r\n          returns (\r\n              uint total,\r\n              uint settlementFee,\r\n              uint strikeFee,\r\n              uint slippageFee,\r\n              uint periodFee\r\n          )\r\n      {\r\n          uint currentPrice = uint(priceProvider.latestAnswer());\r\n          settlementFee = getSettlementFee(amount);\r\n          periodFee = getPeriodFee(amount, period, strike, currentPrice);\r\n          slippageFee = getSlippageFee(amount);\r\n          strikeFee = getStrikeFee(amount, strike, currentPrice);\r\n          total = periodFee.add(slippageFee).add(strikeFee);\r\n      }\r\n      /**\r\n       * @notice Creates ATM option\r\n       * @param period Option period in seconds (1 days <= period <= 8 weeks)\r\n       * @param amount Option amount\r\n       * @return optionID Created option's ID\r\n       */\r\n      function createATM(uint period, uint amount) public payable returns (uint optionID) {\r\n          return create(period, amount, uint(priceProvider.latestAnswer()));\r\n      }\r\n\r\n      /**\r\n       * @notice Creates a new option\r\n       * @param period Option period in sconds (1 days <= period <= 8 weeks)\r\n       * @param amount Option amount\r\n       * @param strike Strike price of an option\r\n       * @return optionID Created option's ID\r\n       */\r\n      function create(uint period, uint amount, uint strike) public payable returns (uint optionID) {\r\n          (uint total, uint settlementFee,,,) = fees(period, amount, strike);\r\n          uint strikeAmount = strike.mul(amount) / priceDecimals;\r\n\r\n          require(strikeAmount > 0,\"Amount is too small\");\r\n          require(settlementFee < total,  \"Premium is too small\");\r\n          require(period >= 1 days,\"Period is too short\");\r\n          require(period <= 8 weeks,\"Period is too long\");\r\n          require(msg.value == total, \"Wrong value\");\r\n          payable( owner() ).transfer(settlementFee);\r\n\r\n          optionID = options.length;\r\n          options.push(\r\n              Option(\r\n                  State.Active,\r\n                  msg.sender,\r\n                  strikeAmount,\r\n                  amount,\r\n                  now + period,\r\n                  now + activationTime\r\n              )\r\n          );\r\n\r\n          sendPremium(total.sub(settlementFee));\r\n          lockFunds(options[optionID]);\r\n          emit Create(optionID, msg.sender, settlementFee, total);\r\n      }\r\n\r\n      /**\r\n       * @notice Exercise your active option\r\n       * @param optionID ID of your option\r\n       */\r\n      function exercise(uint optionID) public payable {\r\n          Option storage option = options[optionID];\r\n\r\n          require(option.expiration >= now, 'Option has expired');\r\n          require(option.activation <= now, 'Option has not been activated yet');\r\n          require(option.holder == msg.sender, \"Wrong msg.sender\");\r\n          require(option.state == State.Active, \"Wrong state\");\r\n\r\n          option.state = State.Exercised;\r\n          swapFunds(option);\r\n\r\n          uint amount = exchange();\r\n          emit Exercise(optionID, amount);\r\n      }\r\n\r\n      /**\r\n       * @notice Unlock array of options\r\n       * @param optionIDs array of options\r\n       */\r\n      function unlockAll(uint[] memory optionIDs) public {\r\n          for(uint i; i < optionIDs.length; unlock(optionIDs[i++])){}\r\n      }\r\n\r\n      /**\r\n       * @notice Unlock funds locked in the expired options\r\n       * @param optionID ID of the option\r\n       */\r\n      function unlock(uint optionID) public {\r\n          Option storage option = options[optionID];\r\n          require(option.expiration < now, \"Option has not expired yet\");\r\n          require(option.state == State.Active, \"Option is not active\");\r\n          option.state = State.Expired;\r\n          unlockFunds(option);\r\n          emit Expire(optionID);\r\n      }\r\n\r\n      /**\r\n       * @notice Counts settlementFee\r\n       * @param amount Option amount\r\n       * @return fee Settlment fee amount\r\n       */\r\n      function getSettlementFee(uint amount) internal pure returns (uint fee) {\r\n          fee = amount / 100;\r\n      }\r\n\r\n      /**\r\n       * @notice Counts periodFee\r\n       * @param amount Option amount\r\n       * @param period Option period in seconds (1 days <= period <= 8 weeks)\r\n       * @param strike Strike price of the option\r\n       * @param currentPrice Current ETH price\r\n       * @return fee Period fee amount\r\n       */\r\n      function getPeriodFee(\r\n          uint amount,\r\n          uint period,\r\n          uint strike,\r\n          uint currentPrice\r\n      )\r\n          internal\r\n          view\r\n          returns (uint fee)\r\n      {\r\n          if(optionType == OptionType.Put)\r\n              fee = amount.mul(sqrt(period / 10)).mul(impliedVolRate)\r\n                  .mul(strike).div(currentPrice).div(1e8);\r\n          else\r\n              fee = amount.mul(sqrt(period / 10)).mul(impliedVolRate)\r\n                  .mul(currentPrice).div(strike).div(1e8);\r\n      }\r\n\r\n      /**\r\n       * @notice Calculates slippageFee\r\n       * @param amount Option amount\r\n       * @return fee Slippage fee amount\r\n       */\r\n      function getSlippageFee(uint amount) internal pure returns (uint fee){\r\n          if(amount > 10 ether) fee = amount.mul(amount) / 1e22;\r\n      }\r\n\r\n      /**\r\n       * @notice Counts strikeFee\r\n       * @param amount Option amount\r\n       * @param strike Strike price of the option\r\n       * @param currentPrice Current ether price\r\n       * @return fee Strike fee amount\r\n       */\r\n      function getStrikeFee(\r\n          uint amount,\r\n          uint strike,\r\n          uint currentPrice\r\n      )\r\n          internal\r\n          view\r\n          returns (uint fee)\r\n      {\r\n          if(strike > currentPrice && optionType == OptionType.Put)\r\n              fee = (strike - currentPrice).mul(amount).div(currentPrice);\r\n          if(strike < currentPrice && optionType == OptionType.Call)\r\n              fee = (currentPrice - strike).mul(amount).div(currentPrice);\r\n      }\r\n\r\n      function exchange() public virtual returns (uint exchangedAmount);\r\n      function sendPremium(uint amount) internal virtual;\r\n      function lockFunds(Option memory option)  internal virtual;\r\n      function swapFunds(Option memory option)  internal virtual;\r\n      function unlockFunds(Option memory option) internal virtual;\r\n\r\n      /**\r\n       * @return res Square root of the number\r\n       */\r\n      function sqrt(uint x) private pure returns (uint res) {\r\n          res = x;\r\n          uint z = (x + 1) / 2;\r\n          while (z < res) (res, z) = (z, (x / z + z) / 2);\r\n      }\r\n}\r\ncontract HegicCallOptions is HegicOptions {\r\n    /**\r\n     * @param DAI The address of the DAI token\r\n     * @param priceProvider The address of the ChainLink ETH/USD price feed contract\r\n     * @param uniswap The address of the Uniswap Factory\r\n     */\r\n    constructor(\r\n        IERC20 DAI,\r\n        AggregatorInterface priceProvider,\r\n        IUniswapFactory uniswap\r\n    )\r\n        public\r\n        HegicOptions(DAI, priceProvider, uniswap, HegicOptions.OptionType.Call)\r\n    {\r\n        pool = new HegicETHPool();\r\n        approve();\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the Uniswap pool to swap the assets\r\n     */\r\n    function approve() public {\r\n        token.approve(address(exchanges.getExchange(token)), uint(-1));\r\n    }\r\n\r\n    /**\r\n     * @notice Swap a specific amount of DAI tokens for ETH and send it to the ETH liquidity pool\r\n     * @return exchangedAmount An amount to receive from the Uniswap pool\r\n     */\r\n    function exchange() public override returns (uint exchangedAmount) {\r\n        return exchange( token.balanceOf(address(this)) );\r\n    }\r\n\r\n    /**\r\n     * @notice Swap a specific amount of DAI tokens for ETH and send it to the ETH liquidity pool\r\n     * @param amount A specific amount to swap\r\n     * @return exchangedAmount An amount that was received from the Uniswap pool\r\n     */\r\n    function exchange(uint amount) public returns (uint exchangedAmount) {\r\n      UniswapExchangeInterface ex = exchanges.getExchange(token);\r\n      uint exShare =  ex.getTokenToEthInputPrice(\r\n          uint(priceProvider.latestAnswer()).mul(1e10)\r\n      );\r\n      if(exShare > maxSpread.mul(0.01 ether)){\r\n          highSpreadLockEnabled = false;\r\n          exchangedAmount = ex.tokenToEthTransferInput(\r\n              amount,\r\n              1,\r\n              now + 1 minutes,\r\n              address(pool)\r\n          );\r\n      } else {\r\n          highSpreadLockEnabled = true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes the premiums between the liquidity providers\r\n     * @param amount Premiums amount that will be sent to the pool\r\n     */\r\n    function sendPremium(uint amount) override internal {\r\n        payable(address(pool)).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Locks the amount required for an option\r\n     * @param option A specific option contract\r\n     */\r\n    function lockFunds(Option memory option) override internal {\r\n        pool.lock(option.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Receives DAI tokens from the user and sends ETH from the pool\r\n     * @param option A specific option contract\r\n     */\r\n    function swapFunds(Option memory option) override internal {\r\n        require(msg.value == 0, \"Wrong msg.value\");\r\n        require(\r\n            token.transferFrom(option.holder, address(this), option.strikeAmount),\r\n            \"Insufficient funds\"\r\n        );\r\n        pool.send(option.holder, option.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Locks the amount required for an option contract\r\n     * @param option A specific option contract\r\n     */\r\n    function unlockFunds(Option memory option) override internal {\r\n        pool.unlock(option.amount);\r\n    }\r\n}\r\ncontract HegicPutOptions is HegicOptions {\r\n    /**\r\n     * @param DAI The address of the DAI token\r\n     * @param priceProvider The address of the ChainLink ETH/USD price feed contract\r\n     * @param uniswap The address of the Uniswap Factory\r\n     */\r\n    constructor(\r\n        IERC20 DAI,\r\n        AggregatorInterface priceProvider,\r\n        IUniswapFactory uniswap\r\n    )\r\n        public\r\n        HegicOptions(DAI, priceProvider, uniswap, HegicOptions.OptionType.Put)\r\n    {\r\n        pool = new HegicERCPool(DAI);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps ETH for DAI tokens and sends to the DAI liquidity pool\r\n     * @return exchangedAmount Amount that is received from the Uniswap pool\r\n     */\r\n    function exchange() public override returns (uint) {\r\n        return exchange(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap a specific amount of ETH for DAI tokens and send it to the DAI liquidity pool\r\n     * @param amount A specific amount to swap\r\n     * @return exchangedAmount An amount to receive from the Uniswap pool\r\n     */\r\n    function exchange(uint amount) public returns (uint exchangedAmount) {\r\n        UniswapExchangeInterface ex = exchanges.getExchange(token);\r\n        uint exShare = ex.getEthToTokenInputPrice(1 ether);\r\n        if(exShare > maxSpread.mul(uint(priceProvider.latestAnswer())).mul(1e8)) {\r\n            highSpreadLockEnabled = false;\r\n            exchangedAmount = ex.ethToTokenTransferInput {value: amount} (\r\n                1,\r\n                now + 1 minutes,\r\n                address(pool)\r\n            );\r\n        } else {\r\n            highSpreadLockEnabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Distributes the premiums between the liquidity providers\r\n     */\r\n    function sendPremium(uint) override internal {\r\n        exchange();\r\n    }\r\n\r\n    /**\r\n     * @notice Locks the amount required for an option\r\n     * @param option A specific option contract\r\n     */\r\n    function lockFunds(Option memory option) override internal {\r\n        pool.lock(option.strikeAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Receives ETH from the user and sends DAI tokens from the pool\r\n     * @param option A specific option contract\r\n     */\r\n    function swapFunds(Option memory option) override internal {\r\n        require(option.amount == msg.value, \"Wrong msg.value\");\r\n        pool.send(option.holder, option.strikeAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Locks the amount required for an option contract\r\n     * @param option A specific option contract\r\n     */\r\n    function unlockFunds(Option memory option) override internal {\r\n        pool.unlock(option.strikeAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"DAI\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorInterface\",\"name\":\"priceProvider\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapFactory\",\"name\":\"uniswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"Exercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Expire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createATM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highSpreadLockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impliedVolRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSpread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"options\",\"outputs\":[{\"internalType\":\"enum HegicOptions.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strikeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ILiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setImpliedVolRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxSpread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"optionIDs\",\"type\":\"uint256[]\"}],\"name\":\"unlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HegicCallOptions","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000f79d6afbb6da890132f9d7c355e3015f15f3406f000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ddcf13eccecfb214793de4b36e6e313a129671951a4ec6ab9bd257d43c96b469"}]}