{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >= 0.5.1;\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ninterface IBSpare {\r\n    function requestSpare(uint amount) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract BMining {\r\n    using SafeMath for uint;\r\n    \r\n    uint public constant CONTRACT_DURATION = 6500 * 365;\r\n    uint public constant INCOME_NUMERATOR  = 136;\r\n    uint public constant INCOME_DENOMINATOR  = 100;\r\n    \r\n    uint public startBlock;\r\n    uint public endBlock;\r\n    address public BETH;\r\n    address public owner;\r\n    address public admin;\r\n    address public BSpare;\r\n\r\n    struct Data {\r\n        uint stakes;\r\n        uint lastAuditBlock;\r\n        uint rewards;\r\n        bool used;\r\n    }\r\n    \r\n    mapping (address => Data) users;\r\n    Data public global;\r\n    uint public sparedReward;\r\n    uint public mintedReward;\r\n    uint public totalIncome;\r\n    uint public userCount;\r\n    \r\n    receive() external payable {\r\n        if(msg.sender != BSpare) {\r\n            totalIncome += msg.value;\r\n        }\r\n    }\r\n    \r\n    constructor(address _BETH) public {\r\n        BETH = _BETH;\r\n        owner = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    function setupAdmin(address _admin) public {\r\n        require(msg.sender == owner, \"REQUIRE OWNER\");\r\n        admin = _admin;\r\n    }\r\n    \r\n    function setupSpare(address _spare) public {\r\n        require(msg.sender == owner, \"REQUIRE OWNER\");\r\n        BSpare = _spare;\r\n    }\r\n    \r\n    function turnOn() public returns (bool) {\r\n        require(BSpare != address(0), \"SETUP Spare FIRST\");\r\n        require(msg.sender == admin, \"REQUIRE ADMIN\");\r\n        require(startBlock == 0, \"ALREADY TURN ON\");\r\n        startBlock = block.number;\r\n        endBlock = startBlock.add(CONTRACT_DURATION);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function isOn() view public returns (bool) {\r\n        return endBlock > 0;\r\n    }\r\n    \r\n    function stake(uint amount) external {\r\n        require(endBlock == 0 || block.number < endBlock, \"ALREADY END\");\r\n        Data storage data = users[msg.sender];\r\n        _audit(msg.sender);\r\n        TransferHelper.safeTransferFrom(BETH, msg.sender, address(this), amount);\r\n        data.stakes = data.stakes.add(amount);\r\n        global.stakes = global.stakes.add(amount);\r\n        if(!data.used) {\r\n            userCount = userCount.add(1);\r\n            data.used = true;\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint amount) external {\r\n        require(users[msg.sender].stakes >= amount, \"INSUFFCIENT WITHDRAW AMOUNT\");\r\n        _audit(msg.sender);\r\n        \r\n        TransferHelper.safeTransfer(BETH, msg.sender, amount);\r\n        users[msg.sender].stakes = users[msg.sender].stakes.sub(amount);\r\n        global.stakes = global.stakes.sub(amount);\r\n    }\r\n    \r\n    function mintReward() public returns(uint) {\r\n        _audit(msg.sender);\r\n        return _transferReward();\r\n    }\r\n    \r\n    function queryStakeInfo() public view returns(uint stakeAmount, uint lastAuditBlock, uint rewards, uint blockNumber) {\r\n        Data memory data = users[msg.sender];\r\n        stakeAmount = data.stakes;\r\n        lastAuditBlock = data.lastAuditBlock;\r\n        rewards = data.rewards.add(_getReward(data));\r\n        blockNumber = block.number;\r\n    }\r\n    \r\n    function queryGlobalInfo() public view returns (uint, uint, uint, uint, uint, uint) {\r\n        return (totalIncome, global.rewards.add(_getReward(global)), global.stakes, userCount, endBlock, INCOME_NUMERATOR);\r\n    }\r\n    \r\n    function queryAmountToExtract() view public returns (uint){\r\n        uint globalReward = _getReward(global) + global.rewards;\r\n        require(globalReward >= mintedReward, \"UNKNOWN ERROR\");\r\n        if(address(this).balance > sparedReward.add(globalReward).sub(mintedReward)) {\r\n            return address(this).balance.sub(sparedReward.add(globalReward).sub(mintedReward));\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    function extractToSpare() public {\r\n        require(msg.sender == admin, \"REQUIRE ADMIN\");\r\n        uint amount = queryAmountToExtract();\r\n        if(amount > 0) {\r\n            TransferHelper.safeTransferETH(BSpare, amount);\r\n            sparedReward = 0;\r\n        }\r\n    }\r\n    \r\n    // private method\r\n    function _audit(address user) private {\r\n        Data storage data = users[user];\r\n        data.rewards = data.rewards.add(_getReward(data));\r\n        data.lastAuditBlock = Math.min(block.number, endBlock);\r\n        \r\n        _auditGlobal();\r\n    }\r\n    \r\n    function _auditGlobal() private {\r\n        global.rewards = global.rewards.add(_getReward(global));\r\n        global.lastAuditBlock = Math.min(block.number, endBlock);\r\n    }\r\n    \r\n    function _transferReward() private returns(uint rewards){\r\n        Data storage data = users[msg.sender];\r\n        require(data.rewards > 0, \"INSUFFCIENT STAKE REWARDS\");\r\n        if(address(this).balance < data.rewards) {\r\n            sparedReward = sparedReward.add(data.rewards.sub(address(this).balance));\r\n            IBSpare(BSpare).requestSpare(data.rewards.sub(address(this).balance));\r\n        }\r\n        \r\n        mintedReward = mintedReward.add(data.rewards);\r\n        require(address(this).balance >= data.rewards, \"NOT ENOUGH BALANCE NOW\");\r\n        \r\n        TransferHelper.safeTransferETH(msg.sender, data.rewards);\r\n        rewards = data.rewards;\r\n        data.rewards = 0;\r\n    }\r\n    \r\n    function _getReward (Data memory data) private view returns(uint reward) {\r\n        if(!isOn()) {\r\n            return 0;\r\n        } \r\n        uint auditBlock = Math.min(block.number, endBlock);\r\n        uint stakeDuration = data.lastAuditBlock > startBlock ? auditBlock.sub(data.lastAuditBlock) : auditBlock.sub(startBlock);\r\n        reward = data.stakes.mul(stakeDuration).mul(INCOME_NUMERATOR) / INCOME_DENOMINATOR / CONTRACT_DURATION;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BSpare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCOME_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCOME_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractToSpare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuditBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryAmountToExtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryGlobalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAuditBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setupAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spare\",\"type\":\"address\"}],\"name\":\"setupSpare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sparedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BMining","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bfddb9cc8b693b6cd668a834ec8e983cfd196168","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://45d8c2bb95dfa8e047fbd3ae92af1568767a4fd9a82671947a55568357d51c4f"}]}