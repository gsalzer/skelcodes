{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary LibAddressList {\r\n\r\n    struct List {\r\n        // max limit of address added to list\r\n        uint256 limit;\r\n        address[] addressList;\r\n        mapping (address => bool) addresses;\r\n    }\r\n\r\n    /// @dev Get if an addresses is in list\r\n    function has(List storage list, address _address) internal view returns (bool) {\r\n        return list.addresses[_address];\r\n    }\r\n\r\n    /// @dev Get all addresses in list\r\n    function all(List storage list) internal view returns (address[] memory) {\r\n        return list.addressList;\r\n    }\r\n\r\n    /// @dev add Address into list\r\n    /// @param list Storage of list\r\n    /// @param _address Address to add\r\n    function add(List storage list, address _address) internal {\r\n        require(!list.addresses[_address], \"duplicated\");\r\n        require(list.addressList.length < list.limit, \"full\");\r\n\r\n        list.addresses[_address] = true;\r\n        list.addressList.push(_address);\r\n    }\r\n\r\n    /// @dev remove Address from list\r\n    /// @param list Storage of list\r\n    /// @param _address Address to add\r\n    function remove(List storage list, address _address) internal {\r\n        require(list.addresses[_address], \"not exist\");\r\n\r\n        delete list.addresses[_address];\r\n        for (uint i = 0; i < list.addressList.length; i++){\r\n            if(list.addressList[i] == _address) {\r\n                list.addressList[i] = list.addressList[list.addressList.length - 1];\r\n                list.addressList.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary LibMathUnsigned {\r\n    uint256 private constant _WAD = 10**18;\r\n    uint256 private constant _UINT256_MAX = 2**255 - 1;\r\n\r\n    function WAD() internal pure returns (uint256) {\r\n        return _WAD;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Unaddition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Unsubtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Unmultiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"Undivision by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), _WAD / 2) / _WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, _WAD), y / 2) / y;\r\n    }\r\n\r\n    function wfrac(uint256 x, uint256 y, uint256 z) internal pure returns (uint256 r) {\r\n        r = mul(x, y) / z;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function toInt256(uint256 x) internal pure returns (int256) {\r\n        require(x <= _UINT256_MAX, \"uint256 overflow\");\r\n        return int256(x);\r\n    }\r\n\r\n    function mod(uint256 x, uint256 m) internal pure returns (uint256) {\r\n        require(m != 0, \"mod by zero\");\r\n        return x % m;\r\n    }\r\n\r\n    function ceil(uint256 x, uint256 m) internal pure returns (uint256) {\r\n        require(m > 0, \"ceil need m > 0\");\r\n        return (sub(add(x, m), 1) / m) * m;\r\n    }\r\n}\r\n\r\n// see https://github.com/makerdao/median/blob/master/src/median.sol\r\ninterface IMakerMedianFeeder {\r\n    function peek() external view returns (uint256, bool);\r\n\r\n    function read() external view returns (uint256);\r\n\r\n    function age() external view returns (uint32);\r\n}\r\n\r\ncontract MakerMedianAdapter is Ownable {\r\n    using LibMathUnsigned for uint256;\r\n    using LibAddressList for LibAddressList.List;\r\n\r\n    IMakerMedianFeeder public feeder;\r\n    uint256 public decimals;\r\n    uint256 public converter;\r\n    LibAddressList.List private whitelist;\r\n\r\n    event AddWhitelisted(address indexed guy);\r\n    event RemoveWhitelisted(address indexed guy);\r\n\r\n    constructor(address _feeder, uint256 _decimals, uint256 _limit) public {\r\n        feeder = IMakerMedianFeeder(_feeder);\r\n        setDecimals(_decimals);\r\n        whitelist.limit = _limit;\r\n    }\r\n\r\n    function setDecimals(uint256 _decimals) public onlyOwner {\r\n        require(_decimals <= 18, \"unsupported decimals\");\r\n        decimals = _decimals;\r\n        converter = 10 ** (18 - _decimals);\r\n    }\r\n\r\n    function addWhitelisted(address guy) public onlyOwner {\r\n        whitelist.add(guy);\r\n        emit AddWhitelisted(guy);\r\n    }\r\n\r\n    function removeWhitelisted(address guy) public onlyOwner {\r\n        whitelist.remove(guy);\r\n        emit RemoveWhitelisted(guy);\r\n    }\r\n\r\n    function isWhitelisted(address guy) public view returns (bool) {\r\n        return whitelist.has(guy);\r\n    }\r\n\r\n    function allWhitelisted() public view returns (address[] memory) {\r\n        return whitelist.all();\r\n    }\r\n\r\n    function price() public view returns (uint256 newPrice, uint256 newTimestamp) {\r\n        require(whitelist.has(msg.sender), \"not whitelisted\");\r\n        newPrice = feeder.read().mul(converter);\r\n        newTimestamp = uint256(feeder.age());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"AddWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"RemoveWhitelisted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeder\",\"outputs\":[{\"internalType\":\"contract IMakerMedianFeeder\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MakerMedianAdapter","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"00000000000000000000000064de91f5a373cd4c28de3600cb34c7c6ce410c850000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://27baebfdebf21e20657270be3377002b3e7b03d31c9b895083d86f1a8be51b0a"}]}