{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICurve {\r\n    function get_virtual_price() external returns (uint256 out);\r\n\r\n    function underlying_coins(int128 tokenId) external view returns (address token);\r\n\r\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit) external view returns (uint256 amount);\r\n\r\n    function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external view returns (uint256 buyTokenAmt);\r\n\r\n    // Used when there's an underlying token. Example:- cdai, cusdc, etc. If not then\r\n    function get_dy_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\r\n\r\n    function exchange(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\r\n\r\n    // Used when there's an underlying token. Example:- cdai, cusdc, etc.\r\n    function exchange_underlying(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_amounts) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\r\n}\r\n\r\ninterface ICurveZap {\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external returns (uint256 amount);\r\n\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount) external;\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n\r\ncontract CurveHelpers is Helpers {\r\n    /**\r\n     * @dev Return Curve Swap Address\r\n     */\r\n    function getCurveSwapAddr() internal pure returns (address) {\r\n        return 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Curve Token Address\r\n     */\r\n    function getCurveTokenAddr() internal pure returns (address) {\r\n        return 0xC25a3A3b969415c80451098fa907EC722572917F;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Curve Zap Address\r\n     */\r\n    function getCurveZapAddr() internal pure returns (address) {\r\n        return 0xFCBa3E75865d2d561BE8D220616520c171F12851;\r\n    }\r\n\r\n    function getTokenI(address token) internal pure returns (int128 i) {\r\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\r\n            // DAI Token\r\n            i = 0;\r\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n            // USDC Token\r\n            i = 1;\r\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\r\n            // USDT Token\r\n            i = 2;\r\n        } else if (token == address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51)) {\r\n            // sUSD Token\r\n            i = 3;\r\n        } else {\r\n            revert(\"token-not-found.\");\r\n        }\r\n    }\r\n\r\n    function getTokenAddr(ICurve curve, uint256 i) internal view returns (address token) {\r\n        token = curve.underlying_coins(int128(i));\r\n        require(token != address(0), \"token-not-found.\");\r\n    }\r\n\r\n    function getTokenDecimals(address buy, address sell) internal view returns(uint _buyDec, uint _sellDec){\r\n        _buyDec = buy == getAddressETH() ? 18 : TokenInterface(buy).decimals();\r\n        _sellDec = sell == getAddressETH() ? 18 : TokenInterface(sell).decimals();\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18(TokenInterface(sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(TokenInterface(buyAddr).decimals(), buyAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getDepositUnitAmt(\r\n        address token,\r\n        uint depositAmt,\r\n        uint curveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _depositAmt = convertTo18(TokenInterface(token).decimals(), depositAmt);\r\n        uint _curveAmt = convertTo18(TokenInterface(getCurveTokenAddr()).decimals(), curveAmt);\r\n        unitAmt = wdiv(_curveAmt, _depositAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getWithdrawtUnitAmt(\r\n        address token,\r\n        uint withdrawAmt,\r\n        uint curveAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _withdrawAmt = convertTo18(TokenInterface(token).decimals(), withdrawAmt);\r\n        uint _curveAmt = convertTo18(TokenInterface(getCurveTokenAddr()).decimals(), curveAmt);\r\n        unitAmt = wdiv(_curveAmt, _withdrawAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is CurveHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage) public view returns (uint buyAmt, uint unitAmt) {\r\n        buyAmt = ICurve(getCurveSwapAddr()).get_dy(getTokenI(sellAddr), getTokenI(buyAddr), sellAmt);\r\n        unitAmt = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, buyAmt, slippage);\r\n    }\r\n\r\n    function getDepositAmount(address token, uint depositAmt, uint slippage) public view returns (uint curveAmt, uint unitAmt) {\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = depositAmt;\r\n        curveAmt = ICurve(getCurveSwapAddr()).calc_token_amount(amts, true);\r\n        unitAmt = getDepositUnitAmt(token, depositAmt, curveAmt, slippage);\r\n    }\r\n\r\n\r\n    function getWithdrawAmount(address token, uint withdrawAmt, uint slippage) public view returns (uint curveAmt, uint unitAmt) {\r\n        uint[4] memory amts;\r\n        amts[uint(getTokenI(token))] = withdrawAmt;\r\n        curveAmt = ICurve(getCurveSwapAddr()).calc_token_amount(amts, false);\r\n        unitAmt = getWithdrawtUnitAmt(token, withdrawAmt, curveAmt, slippage);\r\n    }\r\n\r\n    function getPosition(\r\n        address user\r\n    ) public view returns (\r\n        uint userBal,\r\n        uint totalSupply,\r\n        uint userShare,\r\n        uint poolDaiBal,\r\n        uint poolUsdcBal,\r\n        uint poolUsdtBal,\r\n        uint poolSusdBal\r\n    ) {\r\n        TokenInterface curveToken = TokenInterface(getCurveTokenAddr());\r\n        userBal = curveToken.balanceOf(user);\r\n        totalSupply = curveToken.totalSupply();\r\n        userShare = wdiv(userBal, totalSupply);\r\n        ICurve curveContract = ICurve(getCurveSwapAddr());\r\n        poolDaiBal = TokenInterface(curveContract.underlying_coins(0)).balanceOf(getCurveSwapAddr());\r\n        poolUsdcBal = TokenInterface(curveContract.underlying_coins(1)).balanceOf(getCurveSwapAddr());\r\n        poolUsdtBal = TokenInterface(curveContract.underlying_coins(2)).balanceOf(getCurveSwapAddr());\r\n        poolSusdBal = TokenInterface(curveContract.underlying_coins(3)).balanceOf(getCurveSwapAddr());\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCurveResolver is Resolver {\r\n    string public constant name = \"Curve-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDaiBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUsdcBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUsdtBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSusdBal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCurveResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e91947cf814e4f9e41f4d4cf4edb182b964786985b53fc83934c939805fa9e0"}]}