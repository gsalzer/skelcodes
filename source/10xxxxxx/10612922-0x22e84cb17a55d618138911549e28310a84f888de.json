{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n.########.........########..##.......##.....##..######.\r\n.##...............##.....##.##.......##.....##.##....##\r\n.##...............##.....##.##.......##.....##.##......\r\n.######...#######.########..##.......##.....##..######.\r\n.##...............##........##.......##.....##.......##\r\n.##...............##........##.......##.....##.##....##\r\n.########.........##........########..#######...######.\r\n\r\n*/\r\npragma solidity 0.5.11;\r\n\r\ncontract eeplus {\r\n     address public ownerWallet;\r\n      uint public currUserID = 0;\r\n      uint public pool1currUserID = 0;\r\n      uint public pool2currUserID = 0;\r\n      uint public pool3currUserID = 0;\r\n      uint public pool4currUserID = 0;\r\n      uint public pool5currUserID = 0;\r\n      uint public pool6currUserID = 0; \r\n      \r\n      uint public pool1activeUserID = 0;\r\n      uint public pool2activeUserID = 0;\r\n      uint public pool3activeUserID = 0;\r\n      uint public pool4activeUserID = 0;\r\n      uint public pool5activeUserID = 0;\r\n      uint public pool6activeUserID = 0; \r\n      \r\n       \r\n     \r\n      struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n       uint referredUsers;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n    \r\n     struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received; \r\n    }\r\n    \r\n     mapping (address => UserStruct) public users;\r\n     mapping (uint => address) public userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool1users;\r\n     mapping (uint => address) public pool1userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool2users;\r\n     mapping (uint => address) public pool2userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool3users;\r\n     mapping (uint => address) public pool3userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool4users;\r\n     mapping (uint => address) public pool4userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool5users;\r\n     mapping (uint => address) public pool5userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool6users;\r\n     mapping (uint => address) public pool6userList; \r\n     \r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    \r\n   uint REGESTRATION_FESS=0.05 ether;\r\n   uint pool1_price=0.025 ether;\r\n   uint pool2_price=0.05 ether ;\r\n   uint pool3_price=0.1 ether;\r\n   uint pool4_price=0.2 ether;\r\n   uint pool5_price=0.8 ether;\r\n   uint pool6_price=1.6 ether; \r\n   \r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event getMoneyForSplEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event regPoolEntry(address indexed _user,uint _level,   uint _time);\r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n    event getReInvestPoolPayment(address indexed _user, uint _level, uint _time);\r\n   \r\n    UserStruct[] public requests;\r\n    uint public totalEarned = 0;\r\n     \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n\r\n \r\n       \r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referredUsers:0\r\n           \r\n        });\r\n        \r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n       \r\n       \r\n        PoolUserStruct memory pooluserStruct;\r\n        \r\n        pool1currUserID++;\r\n\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n        pool1activeUserID=pool1currUserID;\r\n        pool1users[msg.sender] = pooluserStruct;\r\n        pool1userList[pool1currUserID]=msg.sender;\r\n      \r\n        \r\n        pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n        pool2activeUserID=pool2currUserID;\r\n        pool2users[msg.sender] = pooluserStruct;\r\n        pool2userList[pool2currUserID]=msg.sender;\r\n       \r\n       \r\n        pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n        pool3activeUserID=pool3currUserID;\r\n        pool3users[msg.sender] = pooluserStruct;\r\n        pool3userList[pool3currUserID]=msg.sender;\r\n       \r\n       \r\n        pool4currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n        pool4activeUserID=pool4currUserID;\r\n       pool4users[msg.sender] = pooluserStruct;\r\n       pool4userList[pool4currUserID]=msg.sender;\r\n\r\n        \r\n        pool5currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n        pool5activeUserID=pool5currUserID;\r\n        pool5users[msg.sender] = pooluserStruct;\r\n        pool5userList[pool5currUserID]=msg.sender;\r\n       \r\n       \r\n        pool6currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n        pool6activeUserID=pool6currUserID;\r\n        pool6users[msg.sender] = pooluserStruct;\r\n        pool6userList[pool6currUserID]=msg.sender;\r\n       \r\n      \r\n       \r\n       \r\n      }\r\n     \r\n    function regUser(uint _referrerID) public payable {\r\n       \r\n        require(!users[msg.sender].isExist, \"User Exists\");\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referral ID');\r\n        require(msg.value == REGESTRATION_FESS, 'Incorrect Value');\r\n       \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referredUsers:0\r\n        });\r\n   \r\n    \r\n       users[msg.sender] = userStruct;\r\n       userList[currUserID]=msg.sender;\r\n       \r\n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\r\n        \r\n       payReferral(1,msg.sender);\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function payReferral(uint _level, address _user) internal {\r\n        address referer;\r\n       \r\n        referer = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        uint level_price_local=0;\r\n      if(users[userList[users[_user].referrerID]].referredUsers  % 4 == 0 ) \r\n      {\r\n          \r\n          level_price_local=0.05 ether; \r\n          sent = address(uint160(referer)).send(level_price_local); \r\n       \r\n       \r\n             if (sent) {\r\n                totalEarned += level_price_local;\r\n                emit getMoneyForSplEvent(referer, msg.sender, _level, now);\r\n                 \r\n               \r\n            }\r\n      }\r\n      else\r\n      {\r\n           level_price_local=0.025 ether;\r\n          \r\n          sent = address(uint160(referer)).send(level_price_local); \r\n       \r\n       \r\n         \r\n\r\n            if (sent) {\r\n                totalEarned += level_price_local;\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n                 \r\n               \r\n            }\r\n      }\r\n       \r\n       \r\n       \r\n         \r\n     }\r\n     \r\n     function reInvest( address _user, uint _level) internal {\r\n         \r\nif(_level==1)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool1Currentuser=pool1userList[pool1activeUserID];\r\npool1currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool1currUserID,\r\npayment_received:0\r\n});\r\npool1users[_user] = userStruct;\r\npool1userList[pool1currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\nelse if(_level==2)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool2Currentuser=pool2userList[pool2activeUserID];\r\npool2currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool2currUserID,\r\npayment_received:0\r\n});\r\npool2users[_user] = userStruct;\r\npool2userList[pool2currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\nelse if(_level==3)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool3Currentuser=pool3userList[pool3activeUserID];\r\npool3currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool3currUserID,\r\npayment_received:0\r\n});\r\npool3users[_user] = userStruct;\r\npool3userList[pool3currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\nelse if(_level==4)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool4Currentuser=pool4userList[pool4activeUserID];\r\npool4currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool4currUserID,\r\npayment_received:0\r\n});\r\npool4users[_user] = userStruct;\r\npool4userList[pool4currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\nelse if(_level==5)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool5Currentuser=pool5userList[pool5activeUserID];\r\npool5currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool5currUserID,\r\npayment_received:0\r\n});\r\npool5users[_user] = userStruct;\r\npool5userList[pool5currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\nelse if(_level==6)\r\n{\r\nPoolUserStruct memory userStruct;\r\naddress pool6Currentuser=pool6userList[pool6activeUserID];\r\npool6currUserID++;\r\nuserStruct = PoolUserStruct({\r\nisExist:true,\r\nid:pool6currUserID,\r\npayment_received:0\r\n});\r\npool6users[_user] = userStruct;\r\npool6userList[pool6currUserID]=_user;\r\nemit getReInvestPoolPayment(_user, _level, now);\r\n}\r\n      \r\n         \r\n     }\r\n\r\n    function buyPool1() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool1users[msg.sender].isExist, \"Already in AutoPool\");\r\n      \r\n        require(msg.value == pool1_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool1Currentuser=pool1userList[pool1activeUserID];\r\n        \r\n        pool1currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool1users[msg.sender] = userStruct;\r\n       pool1userList[pool1currUserID]=msg.sender;\r\n       bool sent = false;\r\n      \r\n       uint poolshare = pool1_price;\r\n        \r\n            sent = address(uint160(pool1Currentuser)).send(poolshare);\r\n\r\n        if (sent) {\r\n            totalEarned += poolshare;\r\n            pool1users[pool1Currentuser].payment_received+=1;\r\n            if(pool1users[pool1Currentuser].payment_received>=3)\r\n            {\r\n                pool1activeUserID+=1;\r\n                reInvest(pool1Currentuser,1);\r\n\r\n            }\r\n            emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\r\n        }\r\n       emit regPoolEntry(msg.sender, 1, now);\r\n    }\r\n\r\n\r\n    function buyPool2() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool2users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool2_price, 'Incorrect Value');\r\n         \r\n        PoolUserStruct memory userStruct;\r\n        address pool2Currentuser=pool2userList[pool2activeUserID];\r\n        \r\n        pool2currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n       pool2users[msg.sender] = userStruct;\r\n       pool2userList[pool2currUserID]=msg.sender;\r\n       \r\n       \r\n       \r\n       bool sent = false;\r\n       \r\n       uint poolshare = pool2_price;\r\n     \r\n            sent = address(uint160(pool2Currentuser)).send(poolshare);\r\n\r\n            if (sent) {\r\n                totalEarned += poolshare;\r\n                pool2users[pool2Currentuser].payment_received+=1;\r\n                if(pool2users[pool2Currentuser].payment_received>=3)\r\n                {\r\n                    pool2activeUserID+=1;\r\n                    \r\n                reInvest(pool2Currentuser,2);\r\n                }\r\n                emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\r\n            }\r\n            emit regPoolEntry(msg.sender,2,  now);\r\n    }\r\n    \r\n    function buyPool3() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool3users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool3_price, 'Incorrect Value');\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool3Currentuser=pool3userList[pool3activeUserID];\r\n        \r\n        pool3currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n       pool3users[msg.sender] = userStruct;\r\n       pool3userList[pool3currUserID]=msg.sender;\r\n       bool sent = false;\r\n       uint poolshare = pool3_price;\r\n      \r\n            sent = address(uint160(pool3Currentuser)).send(poolshare);\r\n\r\n            if (sent) {\r\n                totalEarned += poolshare;\r\n                pool3users[pool3Currentuser].payment_received+=1;\r\n                if(pool3users[pool3Currentuser].payment_received>=3)\r\n                {\r\n                    pool3activeUserID+=1;\r\n                    \r\n                reInvest(pool3Currentuser,3);\r\n                }\r\n                emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,3,  now);\r\n    }\r\n\r\n    function buyPool4() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool4users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool4_price, 'Incorrect Value');\r\n      \r\n        PoolUserStruct memory userStruct;\r\n        address pool4Currentuser=pool4userList[pool4activeUserID];\r\n        \r\n        pool4currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n       pool4users[msg.sender] = userStruct;\r\n       pool4userList[pool4currUserID]=msg.sender;\r\n       bool sent = false;\r\n      \r\n       uint poolshare = pool4_price ;\r\n      \r\n            sent = address(uint160(pool4Currentuser)).send(poolshare);\r\n\r\n            if (sent) {\r\n                totalEarned += poolshare;\r\n                pool4users[pool4Currentuser].payment_received+=1;\r\n                if(pool4users[pool4Currentuser].payment_received>=3)\r\n                {\r\n                    pool4activeUserID+=1;\r\n                    \r\n                reInvest(pool4Currentuser,4);\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,4, now);\r\n    }\r\n\r\n    function buyPool5() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool5users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool5_price, 'Incorrect Value');\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool5Currentuser=pool5userList[pool5activeUserID];\r\n        \r\n        pool5currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n       pool5users[msg.sender] = userStruct;\r\n       pool5userList[pool5currUserID]=msg.sender;\r\n       bool sent = false;\r\n       \r\n       uint poolshare = pool5_price ;\r\n     \r\n            sent = address(uint160(pool5Currentuser)).send(poolshare);\r\n\r\n            if (sent) {\r\n                totalEarned += poolshare;\r\n                pool5users[pool5Currentuser].payment_received+=1;\r\n                if(pool5users[pool5Currentuser].payment_received>=3)\r\n                {\r\n                    pool5activeUserID+=1;\r\n                reInvest(pool5Currentuser,5);\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,5,  now);\r\n    }\r\n    \r\n    function buyPool6() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(!pool6users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool6_price, 'Incorrect Value');\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool6Currentuser=pool6userList[pool6activeUserID];\r\n        \r\n        pool6currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n       pool6users[msg.sender] = userStruct;\r\n       pool6userList[pool6currUserID]=msg.sender;\r\n       bool sent = false;\r\n      \r\n       uint poolshare = pool6_price;\r\n     \r\n            sent = address(uint160(pool6Currentuser)).send(poolshare);\r\n\r\n            if (sent) {\r\n                totalEarned += poolshare;\r\n                pool6users[pool6Currentuser].payment_received+=1;\r\n                if(pool6users[pool6Currentuser].payment_received>=3)\r\n                {\r\n                    pool6activeUserID+=1;\r\n                    \r\n                reInvest(pool6Currentuser,6);\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,6,  now);\r\n    }\r\n    \r\n     \r\n    function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n    }\r\n    \r\n    function sendBalance() private\r\n    {\r\n         if (!address(uint160(ownerWallet)).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    }\r\n   \r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool5users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool4\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool4userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool6users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool4users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool6userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool6\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool5userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool5\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForSplEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getReInvestPoolPayment\",\"type\":\"event\"}]","ContractName":"eeplus","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://29e0076d7b31b0161939d7eac0cc66afd977c8f456774ac9ad0335569baa979d"}]}