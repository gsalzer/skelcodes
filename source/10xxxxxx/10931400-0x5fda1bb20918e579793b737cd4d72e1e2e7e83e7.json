{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newowner;\r\n    address public admin;\r\n    address public dev;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNewOwner {\r\n        require(msg.sender == newowner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newowner = _newOwner;\r\n    }\r\n    \r\n    function takeOwnership() public onlyNewOwner {\r\n        owner = newowner;\r\n    }    \r\n    \r\n    function setAdmin(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setDev(address _dev) public onlyOwner {\r\n        dev = _dev;\r\n    }\r\n    \r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDev {\r\n        require(msg.sender == dev || msg.sender == admin || msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract ContractConn{\r\n    function transfer(address _to, uint _value) virtual public;\r\n    function transferFrom(address _from, address _to, uint _value) virtual public;\r\n    function balanceOf(address who) virtual public view returns (uint);\r\n    function burn(uint256 _value) virtual public returns(bool);\r\n}\r\n\r\ncontract Pledge is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    struct PledgeInfo {\r\n        uint256 id;\r\n        address pledgeor;\r\n        string  coinType;\r\n        uint256 amount;\r\n        uint256 pledgeTime;\r\n        uint256 pledgeBlock;\r\n        uint256 ExpireBlock;\r\n        bool    isValid;\r\n    }\r\n    \r\n    ContractConn public zild;\r\n    \r\n    uint256 public pledgeBlock = 90000;\r\n    uint256 public pledgeBlockChange = 0;\r\n    uint256 public changePledgeTime;\r\n    bool    public needChangeTime = false; \r\n\tuint256 public burnCount = 0;\r\n    uint256 public totalPledge;\r\n    \r\n    mapping(address => PledgeInfo[]) public zild_pledge;\r\n    mapping(address => uint256) public user_pledge_amount;\r\n\r\n    event SetPledgeBlock(uint256 pblock,address indexed who,uint256 time);\r\n    event EffectPledgeBlock(uint256 pblock,address indexed who,uint256 time);\r\n    event WithdrawZILD(address indexed to,uint256 pamount,uint256 time);\r\n    event NeedBurnPledge(address indexed to,uint256 pleid,uint256 pamount);\r\n    event BurnPledge(address  indexed from,uint256 pleid,uint256 pamount);\r\n    event PledgeZILD(address indexed from,uint256 pleid,uint256 pamount,uint256 bblock,uint256 eblock,uint256 time);\r\n    \r\n    constructor(address _zild) public {\r\n        zild = ContractConn(_zild);\r\n    }\r\n\r\n    function setpledgeblock(uint256 _block) public onlyAdmin {\r\n        require(_block > 0,\"Pledge: New pledge time must be greater than 0\");\r\n        pledgeBlockChange = _block;\r\n        changePledgeTime = block.number;\r\n        needChangeTime = true;\r\n        emit SetPledgeBlock(_block,msg.sender,now);\r\n    }\r\n\r\n    function effectblockchange() public onlyAdmin {\r\n        require(needChangeTime,\"Pledge: No new deposit time are set\");\r\n        uint256 currentTime = block.number;\r\n        uint256 effectTime = changePledgeTime.add(pledgeBlock);\r\n        if (currentTime < effectTime) return;\r\n        pledgeBlock = pledgeBlockChange;\r\n        needChangeTime = false;\r\n        emit EffectPledgeBlock(pledgeBlockChange,msg.sender,now);\r\n    }\r\n    \r\n\r\n    function burn(uint256 _amount) public onlyAdmin returns(bool) {\r\n        require(_amount > 0 || _amount < burnCount, \"pledgeBurnï¼šThe amount exceeds the amount that should be burned\");\r\n        zild.burn(_amount);\r\n        burnCount = burnCount.sub(_amount);\r\n        emit BurnPledge(address(msg.sender),_amount,now);\r\n        return true;\r\n    }\r\n\r\n    function pledgeZILD(uint256 _amount) public returns(uint256){\r\n        zild.transferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 length = zild_pledge[msg.sender].length;\r\n        zild_pledge[msg.sender].push(\r\n            PledgeInfo({\r\n                id: length,\r\n                pledgeor: msg.sender,\r\n                coinType: \"zild\",\r\n                amount: _amount,\r\n                pledgeTime: now,\r\n                pledgeBlock: block.number,\r\n                ExpireBlock: block.number.add(pledgeBlock),\r\n                isValid: true\r\n            })\r\n        );\r\n        user_pledge_amount[msg.sender] = user_pledge_amount[msg.sender].add(_amount); \r\n        totalPledge = totalPledge.add(_amount);\r\n        emit PledgeZILD(msg.sender,length,_amount,block.number,block.number.add(pledgeBlock),now);\r\n        return length;\r\n    }\r\n\r\n    function invalidPledge(address _user, uint256 _id) public onlyDev {\r\n        require(zild_pledge[_user].length > _id);\r\n        zild_pledge[_user][_id].isValid = false;\r\n    }\r\n    \r\n    function validPledge(address _user, uint256 _id) public onlyAdmin{\r\n        require(zild_pledge[_user].length > _id);\r\n        zild_pledge[_user][_id].isValid = true;\r\n    }\r\n    \r\n    function pledgeCount(address _user)  view public returns(uint256) {\r\n        require(msg.sender == _user || msg.sender == owner, \"Pledge: Only check your own pledge records\");\r\n        return zild_pledge[_user].length;\r\n    }\r\n \r\n     function pledgeAmount(address _user)  view public returns(uint256) {\r\n        require(msg.sender == _user || msg.sender == owner, \"Pledge: Only check your own pledge records\");\r\n        return user_pledge_amount[_user];\r\n    }\r\n    \r\n    function clearInvalidOrder(address _user, uint256 _pledgeId) public onlyAdmin{\r\n        PledgeInfo memory pledgeInfo = zild_pledge[address(_user)][_pledgeId];\r\n        if(!pledgeInfo.isValid) {\r\n            burnCount = burnCount.add(pledgeInfo.amount);\r\n            user_pledge_amount[_user] = user_pledge_amount[_user].sub(pledgeInfo.amount); \r\n            totalPledge = totalPledge.sub(pledgeInfo.amount);\r\n            zild_pledge[address(_user)][_pledgeId].amount = 0;\r\n            emit NeedBurnPledge(_user,_pledgeId,pledgeInfo.amount);\r\n        }\r\n    }\r\n \r\n    function withdrawZILD(uint256 _pledgeId) public returns(bool){\r\n        PledgeInfo memory info = zild_pledge[msg.sender][_pledgeId]; \r\n        require(block.number > info.ExpireBlock, \"The withdrawal block has not arrived!\");\r\n        require(info.isValid, \"The withdrawal pledge has been breached!\");\r\n        zild.transfer(msg.sender,info.amount);\r\n        user_pledge_amount[msg.sender] = user_pledge_amount[msg.sender].sub(info.amount); \r\n        totalPledge = totalPledge.sub(info.amount);\r\n        zild_pledge[msg.sender][_pledgeId].amount = 0;\r\n        emit WithdrawZILD(msg.sender,zild_pledge[msg.sender][_pledgeId].amount,now);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pleid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pamount\",\"type\":\"uint256\"}],\"name\":\"BurnPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pblock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EffectPledgeBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pleid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pamount\",\"type\":\"uint256\"}],\"name\":\"NeedBurnPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pleid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eblock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PledgeZILD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pblock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetPledgeBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawZILD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changePledgeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pledgeId\",\"type\":\"uint256\"}],\"name\":\"clearInvalidOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectblockchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"invalidPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needChangeTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pledgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeBlockChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pledgeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledgeZILD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setpledgeblock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_pledge_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"validPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pledgeId\",\"type\":\"uint256\"}],\"name\":\"withdrawZILD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zild\",\"outputs\":[{\"internalType\":\"contract ContractConn\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zild_pledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pledgeor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"coinType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ExpireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Pledge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000006699d34aa3013605d468d2755a2fe59a16b12b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://073729acf233c319d4ce87b80e523bb41a520c3a8c0132f6977a52107076ab7c"}]}