{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ExchangeRates {\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 public constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    uint256 public constant WETH_DECIMALS = 18;\r\n    \r\n    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    uint256 public constant USDC_DECIMALS = 6;\r\n    \r\n    address public constant WETH_USDC_UNISWAP_POOL = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\r\n    \r\n    uint256 public constant WETH_USDC_ADDED_PRECISION = 4;\r\n    \r\n    function calculateExchangeRateFor(\r\n        IERC20 token1, \r\n        IERC20 token2, \r\n        address pool, \r\n        uint256 decimals1, \r\n        uint256 decimals2, \r\n        uint256 addedDecimals) \r\n    public view returns(uint256) {\r\n        \r\n        uint256 token1Pooled = token1.balanceOf(pool);\r\n        uint256 token2Pooled = token2.balanceOf(pool);\r\n        \r\n        uint256 precision = (decimals1 - decimals2) + addedDecimals;\r\n        \r\n        uint256 price = token2Pooled.mul(10 ** precision).div(token1Pooled);\r\n        return price;\r\n    }\r\n    \r\n    function calculateUsdForToken(address token, address pool, uint256 tokenDecimals, uint256 precision) public view returns(uint256) {\r\n        uint256 usdEtherPrice = calculateExchangeRateFor({\r\n            token1: WETH, \r\n            token2: USDC, \r\n            pool: WETH_USDC_UNISWAP_POOL, \r\n            decimals1: WETH_DECIMALS, \r\n            decimals2: USDC_DECIMALS, \r\n            addedDecimals: WETH_USDC_ADDED_PRECISION\r\n        });\r\n        \r\n        IERC20 tokenErc20 = IERC20(token);\r\n        uint256 etherTokenPrice = calculateExchangeRateFor({\r\n            token1: tokenErc20, \r\n            token2: WETH, \r\n            pool: pool, \r\n            decimals1: tokenDecimals, \r\n            decimals2: WETH_DECIMALS, \r\n            addedDecimals: precision\r\n        });\r\n        \r\n        return usdEtherPrice.mul(10 ** 10).div(etherTokenPrice);\r\n    }\r\n    \r\n    function getUsdEtherPrice() public view returns(uint256) {\r\n        return calculateExchangeRateFor(WETH, USDC, WETH_USDC_UNISWAP_POOL, WETH_DECIMALS, USDC_DECIMALS, WETH_USDC_ADDED_PRECISION);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_USDC_ADDED_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_USDC_UNISWAP_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedDecimals\",\"type\":\"uint256\"}],\"name\":\"calculateExchangeRateFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"calculateUsdForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdEtherPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExchangeRates","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://39e89aa38cd65ac7fd8e82813470319e96edc9aaec61b7fa19eb69eb1ea68a65"}]}