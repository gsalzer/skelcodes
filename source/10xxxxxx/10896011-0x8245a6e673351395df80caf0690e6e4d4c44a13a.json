{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IPowerKeeper {\r\n    function usePower(address master) external returns (uint256);\r\n    function power(address master) external view returns (uint256);\r\n    function totalPower() external view returns (uint256);\r\n    event PowerGained(address indexed master, uint256 amount);\r\n    event PowerUsed(address indexed master, uint256 amount);\r\n}\r\n\r\ninterface IMilker {\r\n    function bandits(uint256 percent) external returns (uint256, uint256, uint256);\r\n    function sheriffsVaultCommission() external returns (uint256);\r\n    function sheriffsPotDistribution() external returns (uint256);\r\n    function isWhitelisted(address holder) external view returns (bool);\r\n    function getPeriod() external view returns (uint256);\r\n}\r\n\r\n\r\ncontract Milk is Ownable, IMilker {\r\n    using SafeMath for uint256;\r\n\r\n    // Token details.\r\n    string public constant name = \"Cowboy.Finance\";\r\n    string public constant symbol = \"MILK\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Token supply limitations.\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant MAX_TOKENS = 15 * 10**6;\r\n    uint256 private constant MAX_SUPPLY = MAX_TOKENS * 10**decimals;\r\n    uint256 private constant TOTAL_UNITS = MAX_UINT256 - (MAX_UINT256 % MAX_SUPPLY);\r\n\r\n    // Tokenomics parameters.\r\n    uint256 private constant INITIAL_PRODUCTION = 25_000 * 10**decimals;\r\n    uint256 private constant PERIOD_LENGTH = 6 hours;\r\n    uint256 private constant REDUCING_PERIODS = 28;\r\n    uint256 private constant REDUCING_FACTOR = 10;\r\n\r\n    // Hardcoded address to collect 5% dev team share.\r\n    address private constant DEV_TEAM_ADDRESS = 0xFFCF83437a1Eb718933f39ebE75aD96335BC1BE4;\r\n\r\n    // Address of StableV2 contracts staking COW, COW:WETH and MILK:WETH tokens.\r\n    IPowerKeeper private _stableCow;    // COW\r\n    IPowerKeeper private _stableCowLP;  // UniswapV2 Pair COW:WETH\r\n    IPowerKeeper private _stableMilkLP; // UniswapV2 Pair MILK:WETH\r\n\r\n    // Address of controller contract from which base refase functions can be called.\r\n    address private _controller;\r\n\r\n    // Token holders balances \"in hand\", balances in vaults, and spending allowances.\r\n    mapping(address => uint256) private _balances; // in units\r\n    mapping(address => uint256) private _vaults;   // in units\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n\r\n    // Whitelisted balances are stored separately.\r\n    mapping(address => uint256) private _whitelistedBalances; // in units\r\n    mapping(address => bool) private _whitelist;\r\n\r\n    // Token current state.\r\n    uint256 private _startTime = MAX_UINT256;\r\n    uint256 private _distributed;\r\n    uint256 private _totalSupply;\r\n\r\n    // Token supply (divided to several parts).\r\n    uint256 private _supplyInBalances;\r\n    uint256 private _supplyWhitelisted;\r\n    uint256 private _supplyInSheriffsPot;\r\n    uint256 private _supplyInSheriffsVault;\r\n\r\n    // Values needed to convert between units and tokens (divided to several parts).\r\n    uint256 private _maxBalancesSupply = MAX_SUPPLY;\r\n    uint256 private _maxWhitelistedSupply = MAX_SUPPLY;\r\n    uint256 private _maxSheriffsVaultSupply = MAX_SUPPLY;\r\n    uint256 private _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\r\n    uint256 private _unitsPerTokenWhitelisted = TOTAL_UNITS.div(_maxWhitelistedSupply);\r\n    uint256 private _unitsPerTokenInSheriffsVault = TOTAL_UNITS.div(_maxSheriffsVaultSupply);\r\n\r\n    // Contract configuration events\r\n    event StartTimeSetUp(uint256 indexed startTime);\r\n    event StableCowSetUp(address indexed stableCow);\r\n    event StableCowLPSetUp(address indexed stableCowLP);\r\n    event StableMilkLPSetUp(address indexed stableMilkLP);\r\n    event ControllerSetUp(address indexed controller);\r\n    event AddedToWhitelist(address indexed holder);\r\n    event RemovedFromWhitelist(address indexed holder);\r\n\r\n    // ERC20 token related events\r\n    event Mint(address indexed to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Tokenomics mechanics events\r\n    event Bandits(uint256 percent, uint256 totalAmount, uint256 arrestedAmount, uint256 burntAmount);\r\n    event SheriffsVaultCommission(uint256 amount);\r\n    event SheriffsPotDistribution(uint256 amount);\r\n    event SheriffsVaultDeposit(address indexed holder, uint256 amount);\r\n    event SheriffsVaultWithdraw(address indexed holder, uint256 amount);\r\n\r\n\r\n    modifier validRecipient(address account) {\r\n        require(account != address(0x0), \"Milk: unable to send tokens to zero address\");\r\n        require(account != address(this), \"Milk: unable to send tokens to the token contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(_controller == _msgSender(), \"Milk: caller is not the controller\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        _whitelist[DEV_TEAM_ADDRESS] = true;\r\n        emit AddedToWhitelist(DEV_TEAM_ADDRESS);\r\n    }\r\n\r\n    function setStartTime(uint256 startTime) external onlyOwner {\r\n        _startTime = startTime;\r\n        emit StartTimeSetUp(startTime);\r\n    }\r\n\r\n    function setStableCow(address stableCow) external onlyOwner {\r\n        _stableCow = IPowerKeeper(stableCow);\r\n        emit StableCowSetUp(stableCow);\r\n    }\r\n\r\n    function setStableCowLP(address stableCowLP) external onlyOwner {\r\n        _stableCowLP = IPowerKeeper(stableCowLP);\r\n        emit StableCowLPSetUp(stableCowLP);\r\n    }\r\n\r\n    function setStableMilkLP(address stableMilkLP) external onlyOwner {\r\n        _stableMilkLP = IPowerKeeper(stableMilkLP);\r\n        emit StableMilkLPSetUp(stableMilkLP);\r\n    }\r\n\r\n    function setController(address controller) external onlyOwner {\r\n        _controller = controller;\r\n        emit ControllerSetUp(controller);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Whitelist management\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function addToWhitelist(address holder) external onlyOwner {\r\n        require(address(_stableCow) != address(0), \"Milk: StableV2 contract staking COW tokens is not set up\");\r\n        require(!_whitelist[holder], \"Milk: already whitelisted\");\r\n        require(_stableCow.power(holder) == 0, \"Milk: unable to whitelist COW tokens staker\");\r\n        _whitelist[holder] = true;\r\n        uint256 tokens = _balances[holder].div(_unitsPerTokenInBalances);\r\n        if (tokens > 0) {\r\n            _whitelistedBalances[holder] = tokens.mul(_unitsPerTokenWhitelisted);\r\n            _balances[holder] = 0;\r\n            _supplyInBalances = _supplyInBalances.sub(tokens);\r\n            _supplyWhitelisted = _supplyWhitelisted.add(tokens);\r\n        }\r\n        emit AddedToWhitelist(holder);\r\n    }\r\n\r\n    function removeFromWhitelist(address holder) external onlyOwner {\r\n        require(address(_stableCow) != address(0), \"Milk: StableV2 contract staking COW tokens is not set up\");\r\n        require(_whitelist[holder], \"Milk: not whitelisted\");\r\n        _whitelist[holder] = false;\r\n        uint256 tokens = _whitelistedBalances[holder].div(_unitsPerTokenWhitelisted);\r\n        if (tokens > 0) {\r\n            _balances[holder] = tokens.mul(_unitsPerTokenInBalances);\r\n            _whitelistedBalances[holder] = 0;\r\n            _supplyInBalances = _supplyInBalances.add(tokens);\r\n            _supplyWhitelisted = _supplyWhitelisted.sub(tokens);\r\n        }\r\n        emit RemovedFromWhitelist(holder);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Bandits are coming!\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function bandits(uint256 percent) external override onlyController returns (\r\n        uint256 banditsAmount,\r\n        uint256 arrestedAmount,\r\n        uint256 burntAmount\r\n    ) {\r\n        uint256 undistributedAmount = getProductedAmount().sub(_distributed);\r\n        // how many MILK has to be redistributed?\r\n        uint256 banditsTotalAmount = _supplyInBalances.mul(percent).div(100);\r\n        uint256 undistributedBanditsTotalAmount = undistributedAmount.mul(percent).div(100);\r\n        // share for sheriffs pot - 90%\r\n        uint256 banditsToPotAmount = banditsTotalAmount.mul(90).div(100);\r\n        uint256 undistributedBanditsToPotAmount = undistributedBanditsTotalAmount.mul(90).div(100);\r\n        // share to burn - 10%\r\n        uint256 banditsBurnAmount = banditsTotalAmount.sub(banditsToPotAmount);\r\n        uint256 undistributedBanditsBurnAmount = undistributedBanditsTotalAmount.sub(undistributedBanditsToPotAmount);\r\n\r\n        // calc new total supply based on burn\r\n        _totalSupply = _totalSupply.sub(banditsBurnAmount);\r\n        // calc new supply in pot\r\n        _supplyInSheriffsPot = _supplyInSheriffsPot.add(banditsToPotAmount).add(undistributedBanditsToPotAmount);\r\n        // calc new total supply in balances - ignoring burn here\r\n        _supplyInBalances = _supplyInBalances.sub(banditsTotalAmount);\r\n\r\n        // calc new max supply\r\n        _maxBalancesSupply = _maxBalancesSupply.sub(_maxBalancesSupply.mul(percent).div(100));\r\n        // recalc units per milk for regular balances\r\n        _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\r\n\r\n        _distributed = _distributed.add(undistributedBanditsBurnAmount).add(undistributedBanditsToPotAmount);\r\n\r\n        banditsAmount = banditsTotalAmount.add(undistributedBanditsTotalAmount);\r\n        arrestedAmount = banditsToPotAmount.add(undistributedBanditsToPotAmount);\r\n        burntAmount = banditsBurnAmount.add(undistributedBanditsBurnAmount);\r\n\r\n        emit Bandits(percent, banditsAmount, arrestedAmount, burntAmount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Sheriff's Vault commission\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function sheriffsVaultCommission() external override onlyController returns (uint256 commission) {\r\n        commission = _supplyInSheriffsVault.div(100);\r\n        _supplyInSheriffsVault = _supplyInSheriffsVault.sub(commission);\r\n        _supplyInSheriffsPot = _supplyInSheriffsPot.add(commission);\r\n        _maxSheriffsVaultSupply = _maxSheriffsVaultSupply.sub(_maxSheriffsVaultSupply.div(100));\r\n        _unitsPerTokenInSheriffsVault = TOTAL_UNITS.div(_maxSheriffsVaultSupply);\r\n        emit SheriffsVaultCommission(commission);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Sheriff's Pot distribution\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function sheriffsPotDistribution() external override onlyController returns (uint256 amount) {\r\n        amount = _supplyInSheriffsPot;\r\n        if (amount > 0 && _supplyInBalances > 0) {\r\n            uint256 maxBalancesSupplyDelta = _maxBalancesSupply.mul(amount).div(_supplyInBalances);\r\n            _supplyInBalances = _supplyInBalances.add(amount);\r\n            _supplyInSheriffsPot = 0;\r\n            _maxBalancesSupply = _maxBalancesSupply.add(maxBalancesSupplyDelta);\r\n            _unitsPerTokenInBalances = TOTAL_UNITS.div(_maxBalancesSupply);\r\n        }\r\n        emit SheriffsPotDistribution(amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Sheriff's Vault\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function putToSheriffsVault(uint256 amount) external {\r\n        address holder = msg.sender;\r\n        require(!_whitelist[holder], \"Milk: whitelisted holders cannot use Sheriff's Vault\");\r\n        _updateBalance(holder);\r\n        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\r\n        _balances[holder] = _balances[holder].sub(unitsInBalances);\r\n        _vaults[holder] = _vaults[holder].add(unitsInSheriffsVault);\r\n        _supplyInBalances = _supplyInBalances.sub(amount);\r\n        _supplyInSheriffsVault = _supplyInSheriffsVault.add(amount);\r\n        emit SheriffsVaultDeposit(holder, amount);\r\n    }\r\n\r\n    function takeFromSheriffsVault(uint256 amount) external {\r\n        address holder = msg.sender;\r\n        require(!_whitelist[holder], \"Milk: whitelisted holders cannot use Sheriff's Vault\");\r\n        _updateBalance(holder);\r\n        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\r\n        _balances[holder] = _balances[holder].add(unitsInBalances);\r\n        _vaults[holder] = _vaults[holder].sub(unitsInSheriffsVault);\r\n        _supplyInBalances = _supplyInBalances.add(amount);\r\n        _supplyInSheriffsVault = _supplyInSheriffsVault.sub(amount);\r\n        emit SheriffsVaultWithdraw(holder, amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Token] Minting token\r\n    // NOTE: Function mint() will be blocked when rewards\r\n    // for stacking COWs to StableV1 are distributed.\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function mint(address recipient, uint256 value) public validRecipient(recipient) onlyOwner returns (bool) {\r\n        if (isWhitelisted(recipient)) {\r\n            uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\r\n            _whitelistedBalances[recipient] = _whitelistedBalances[recipient].add(wunits);\r\n            _supplyWhitelisted = _supplyWhitelisted.add(value);\r\n        } else {\r\n            uint256 units = value.mul(_unitsPerTokenInBalances);\r\n            _balances[recipient] = _balances[recipient].add(units);\r\n            _supplyInBalances = _supplyInBalances.add(value);\r\n        }\r\n        _totalSupply = _totalSupply.add(value);\r\n        emit Mint(recipient, value);\r\n        emit Transfer(0x0000000000000000000000000000000000000000, recipient, value);\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Token] Transferring token\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function transfer(address to, uint256 value) public validRecipient(to) returns (bool) {\r\n        address from = msg.sender;\r\n        _updateBalance(from);\r\n        uint256 units = value.mul(_unitsPerTokenInBalances);\r\n        uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\r\n        if (isWhitelisted(from) && isWhitelisted(to)) {\r\n            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\r\n            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\r\n        } else if (isWhitelisted(from)) {\r\n            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\r\n            _balances[to] = _balances[to].add(units);\r\n            _supplyInBalances = _supplyInBalances.add(value);\r\n            _supplyWhitelisted = _supplyWhitelisted.sub(value);\r\n        } else if (isWhitelisted(to)) {\r\n            _balances[from] = _balances[from].sub(units);\r\n            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\r\n            _supplyInBalances = _supplyInBalances.sub(value);\r\n            _supplyWhitelisted = _supplyWhitelisted.add(value);\r\n        } else {\r\n            _balances[from] = _balances[from].sub(units);\r\n            _balances[to] = _balances[to].add(units);\r\n        }\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public validRecipient(to) returns (bool) {\r\n        _updateBalance(from);\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\r\n        uint256 units = value.mul(_unitsPerTokenInBalances);\r\n        uint256 wunits = value.mul(_unitsPerTokenWhitelisted);\r\n        if (isWhitelisted(from) && isWhitelisted(to)) {\r\n            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\r\n            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\r\n        } else if (isWhitelisted(from)) {\r\n            _whitelistedBalances[from] = _whitelistedBalances[from].sub(wunits);\r\n            _balances[to] = _balances[to].add(units);\r\n            _supplyInBalances = _supplyInBalances.add(value);\r\n            _supplyWhitelisted = _supplyWhitelisted.sub(value);\r\n        } else if (isWhitelisted(to)) {\r\n            _balances[from] = _balances[from].sub(units);\r\n            _whitelistedBalances[to] = _whitelistedBalances[to].add(wunits);\r\n            _supplyInBalances = _supplyInBalances.sub(value);\r\n            _supplyWhitelisted = _supplyWhitelisted.add(value);\r\n        } else {\r\n            _balances[from] = _balances[from].sub(units);\r\n            _balances[to] = _balances[to].add(units);\r\n        }\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Contract getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function isWhitelisted(address holder) public view override returns (bool) {\r\n        return _whitelist[holder];\r\n    }\r\n\r\n    function getPeriod() public view override returns (uint256) {\r\n        if (block.timestamp <= _startTime) {\r\n            return 0;\r\n        }\r\n        return block.timestamp.sub(_startTime).div(PERIOD_LENGTH);\r\n    }\r\n\r\n    function getPeriodPart() public view returns (uint256) {\r\n        if (block.timestamp <= _startTime) {\r\n            return 0;\r\n        }\r\n        uint256 durationFromPeriodStart = block.timestamp\r\n            .sub(_startTime.add(getPeriod().mul(PERIOD_LENGTH)));\r\n        return durationFromPeriodStart.mul(10**18).div(PERIOD_LENGTH);\r\n    }\r\n\r\n    function getProductionAmount() public view returns(uint256) {\r\n        uint256 reducings = getPeriod().div(REDUCING_PERIODS);\r\n        uint256 production = INITIAL_PRODUCTION;\r\n        for (uint256 i = 0; i < reducings; i++) {\r\n            production = production.sub(production.div(REDUCING_FACTOR));\r\n        }\r\n        return production;\r\n    }\r\n\r\n    function getProductedAmount() public view returns(uint256) {\r\n        uint256 period = getPeriod();\r\n        uint256 reducings = period.div(REDUCING_PERIODS);\r\n        uint256 productionAmount = INITIAL_PRODUCTION;\r\n        uint256 productedAmount = 0;\r\n        for (uint256 i = 0; i < reducings; i++) {\r\n            productedAmount = productedAmount.add(productionAmount.mul(REDUCING_PERIODS));\r\n            productionAmount = productionAmount.sub(productionAmount.div(REDUCING_FACTOR));\r\n        }\r\n        productedAmount = productedAmount.add(productionAmount.mul(period.sub(reducings.mul(REDUCING_PERIODS))));\r\n        productedAmount = productedAmount.add(productionAmount.mul(getPeriodPart()).div(10**18));\r\n        return productedAmount;\r\n    }\r\n\r\n    function getDistributedAmount() public view returns(uint256) {\r\n        return _distributed;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply.add(getProductedAmount()).sub(_distributed);\r\n    }\r\n\r\n    function holdersSupply() public view returns (uint256) {\r\n        return _supplyInBalances;\r\n    }\r\n\r\n    function whitelistedSupply() public view returns (uint256) {\r\n        return _supplyWhitelisted;\r\n    }\r\n\r\n    function sheriffsPotSupply() public view returns (uint256) {\r\n        return _supplyInSheriffsPot;\r\n    }\r\n\r\n    function sheriffsVaultSupply() public view returns (uint256) {\r\n        return _supplyInSheriffsVault;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n\r\n        // Calculate total amount of undistributed MILK tokens and divide it to shares\r\n        uint256 undistributed = getProductedAmount().sub(_distributed);\r\n        uint256 undistributedCow = undistributed.div(5); // 20%\r\n        uint256 undistributedCowLP = (undistributed.sub(undistributedCow)).div(2); // 40%\r\n        uint256 undistributedMilkLP = (undistributed.sub(undistributedCow)).sub(undistributedCowLP); // 40%\r\n\r\n        // Calculate holder's amounts of undistributed MILK tokens\r\n        if (address(_stableCow) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableCow.power(account), _stableCow.totalPower());\r\n            undistributedCow = totalPower > 0 ? undistributedCow.mul(power).div(totalPower) : 0;\r\n        } else {\r\n            undistributedCow = 0;\r\n        }\r\n        if (address(_stableCowLP) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableCowLP.power(account), _stableCowLP.totalPower());\r\n            undistributedCowLP = totalPower > 0 ? undistributedCowLP.mul(power).div(totalPower) : 0;\r\n        } else {\r\n            undistributedCowLP = 0;\r\n        }\r\n        if (address(_stableMilkLP) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableMilkLP.power(account), _stableMilkLP.totalPower());\r\n            undistributedMilkLP = totalPower > 0 ? undistributedMilkLP.mul(power).div(totalPower) : 0;\r\n        } else {\r\n            undistributedMilkLP = 0;\r\n        }\r\n\r\n        // Substruct 5% from each amount to transfer to the developers team\r\n        uint256 devTeamFee = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).div(20);\r\n\r\n        // Calculate final MILK tokens amount to transfer to the holder\r\n        undistributed = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).sub(devTeamFee);\r\n\r\n        // Calculate whitelisted MILK tokens if any\r\n        uint256 whitelisted = _whitelistedBalances[account].div(_unitsPerTokenWhitelisted);\r\n\r\n        return (_balances[account].div(_unitsPerTokenInBalances)).add(undistributed).add(whitelisted);\r\n    }\r\n\r\n    function vaultOf(address account) public view returns (uint256) {\r\n        return _vaults[account].div(_unitsPerTokenInSheriffsVault);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Internal functions\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function _updateBalance(address holder) private {\r\n\r\n        // Calculate total amount of undistributed MILK tokens and divide it to shares\r\n        uint256 undistributed = getProductedAmount().sub(_distributed);\r\n        uint256 undistributedCow = undistributed.div(5); // 20%\r\n        uint256 undistributedCowLP = (undistributed.sub(undistributedCow)).div(2); // 40%\r\n        uint256 undistributedMilkLP = (undistributed.sub(undistributedCow)).sub(undistributedCowLP); // 40%\r\n\r\n        // Calculate holder's amounts of undistributed MILK tokens\r\n        if (address(_stableCow) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableCow.power(holder), _stableCow.totalPower());\r\n            if (power > 0) {\r\n                power = _stableCow.usePower(holder);\r\n                undistributedCow = totalPower > 0 ? undistributedCow.mul(power).div(totalPower) : 0;\r\n            }\r\n        } else {\r\n            undistributedCow = 0;\r\n        }\r\n        if (address(_stableCowLP) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableCowLP.power(holder), _stableCowLP.totalPower());\r\n            if (power > 0) {\r\n                power = _stableCowLP.usePower(holder);\r\n                undistributedCowLP = totalPower > 0 ? undistributedCowLP.mul(power).div(totalPower) : 0;\r\n            }\r\n        } else {\r\n            undistributedCowLP = 0;\r\n        }\r\n        if (address(_stableMilkLP) != address(0)) {\r\n            (uint256 power, uint256 totalPower) = (_stableMilkLP.power(holder), _stableMilkLP.totalPower());\r\n            if (power > 0) {\r\n                power = _stableMilkLP.usePower(holder);\r\n                undistributedMilkLP = totalPower > 0 ? undistributedMilkLP.mul(power).div(totalPower) : 0;\r\n            }\r\n        } else {\r\n            undistributedMilkLP = 0;\r\n        }\r\n\r\n        // Substruct 5% from each amount to transfer to the developers team\r\n        uint256 devTeamFee = (undistributedCow.add(undistributedCowLP).add(undistributedMilkLP)).div(20);\r\n\r\n        // Calculate final MILK tokens amount to transfer to the holder\r\n        uint256 tokens = undistributedCow.add(undistributedCowLP).add(undistributedMilkLP).sub(devTeamFee);\r\n\r\n        // Transfer all MILK tokens farmed by the holder and not yet distributed\r\n        _balances[holder] = _balances[holder].add(tokens.mul(_unitsPerTokenInBalances));\r\n        _balances[DEV_TEAM_ADDRESS] = _balances[DEV_TEAM_ADDRESS].add(devTeamFee.mul(_unitsPerTokenWhitelisted));\r\n        _distributed = _distributed.add(tokens).add(devTeamFee);\r\n        _totalSupply = _totalSupply.add(tokens).add(devTeamFee);\r\n        if (isWhitelisted(holder)) {\r\n            _supplyWhitelisted = _supplyWhitelisted.add(tokens);\r\n        } else {\r\n            _supplyInBalances = _supplyInBalances.add(tokens);\r\n        }\r\n        if (isWhitelisted(DEV_TEAM_ADDRESS)) {\r\n            _supplyWhitelisted = _supplyWhitelisted.add(devTeamFee);\r\n        } else {\r\n            _supplyInBalances = _supplyInBalances.add(devTeamFee);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"name\":\"Bandits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsPotDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableCowLP\",\"type\":\"address\"}],\"name\":\"StableCowLPSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableCow\",\"type\":\"address\"}],\"name\":\"StableCowSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableMilkLP\",\"type\":\"address\"}],\"name\":\"StableMilkLPSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StartTimeSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"bandits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"banditsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"putToSheriffsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableCow\",\"type\":\"address\"}],\"name\":\"setStableCow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableCowLP\",\"type\":\"address\"}],\"name\":\"setStableCowLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableMilkLP\",\"type\":\"address\"}],\"name\":\"setStableMilkLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsPotDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsPotSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsVaultCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsVaultSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeFromSheriffsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vaultOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Milk","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://489353161615a7f4e193de1a5516b4c1e47fbc4de64596bae49450d105e0673a"}]}