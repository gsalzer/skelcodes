{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface ILendingPoolCore {\r\n    function getReserveAvailableLiquidity(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentLiquidityRate(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentVariableBorrowRate(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface ICToken {\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function comptroller() external view returns (address);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n}\r\n\r\ninterface IUSR {\r\n\r\n    function totalUnderlying() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlyingToken() external view returns (address);\r\n}\r\n\r\ninterface IDFProtocolView {\r\n\r\n    function getColStatus() external view returns (address[] memory, uint[] memory);\r\n}\r\n\r\ninterface IComptroller {\r\n    function compSpeeds(address _cToken) external view returns (uint256);\r\n\r\n    function getCompAddress() external view returns (address);\r\n}\r\n\r\ninterface IDToken {\r\n    function token() external view returns (address);\r\n\r\n    function getBaseData()\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function getHandlerInfo()\r\n        external\r\n        returns (\r\n            address[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        );\r\n\r\n    function swapModel() external view returns (address);\r\n}\r\n\r\ninterface ISwapModel {\r\n    function getSwapAmount(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IDTokenController {\r\n    function getDToken(address _token) external view returns (address);\r\n}\r\n\r\ninterface IHandler {\r\n    function dTokenController() external view returns (address);\r\n\r\n    function cTokens(address _token) external view returns (address);\r\n\r\n    function aaveLendingPoolCore() external view returns (address);\r\n\r\n    function USR() external view returns (address);\r\n}\r\n\r\ncontract DTokenCommonData {\r\n    using SafeMath for uint256;\r\n    bool private initialized;\r\n    address public owner;\r\n    uint256 constant ONE = 1e18;\r\n    uint256 constant doubleScale = 1e36;\r\n    uint256 constant BlocksPerDay = 4 * 60 * 24;\r\n    uint256 constant DaysPerYear = 365;\r\n\r\n    mapping(address => bytes4) public handlers;\r\n\r\n    constructor() public {\r\n        initialize();\r\n    }\r\n\r\n    function initialize() public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        owner = msg.sender;\r\n        initialized = true;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n, uint256 base) public pure returns (uint256 z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                \r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setHandler(address _handler, bytes4 _sig) external {\r\n        require(msg.sender == owner, \"setHandler: Permission denied!\");\r\n        handlers[_handler] = _sig;\r\n    }\r\n\r\n    function setHandlers(address[] calldata _handlers, bytes4[] calldata _sigs)\r\n        external\r\n    {\r\n        require(msg.sender == owner, \"setHandlers: Permission denied!\");\r\n        require(\r\n            _handlers.length == _sigs.length && _handlers.length > 0,\r\n            \"setHandlers: handlers & indexs should not have 0 or different lengths\"\r\n        );\r\n        for (uint256 i = 0; i < _handlers.length; i++)\r\n            handlers[_handlers[i]] = _sigs[i];\r\n    }\r\n\r\n    function getDTokenApys(address[] calldata _dTokens)\r\n        external\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory _apys = new uint256[](_dTokens.length);\r\n        for (uint256 i = 0; i < _dTokens.length; i++)\r\n            _apys[i] = getDTokenApy(_dTokens[i]);\r\n        return _apys;\r\n    }\r\n\r\n    struct DTokenApyLocalVars {\r\n        uint256 tokenBalance;\r\n        uint256[] balances;\r\n        uint256[] supplyApys;\r\n        uint256[] borrowApys;\r\n        uint256[] otherSupplyApys;\r\n    }\r\n\r\n    function getDTokenApy(address _dToken) public returns (uint256) {\r\n        DTokenDataLocalVars memory _dTokenApy;\r\n        (\r\n            _dTokenApy.tokenBalance,\r\n            ,\r\n            ,\r\n            _dTokenApy.balances,\r\n            ,\r\n            _dTokenApy.supplyApys,\r\n            ,\r\n            _dTokenApy.otherSupplyApys\r\n        ) = getDTokenData(_dToken);\r\n        if (_dTokenApy.tokenBalance == 0) return 0;\r\n        uint256 _apy;\r\n        for (uint256 i = 0; i < _dTokenApy.balances.length; i++)\r\n            _apy = _dTokenApy.supplyApys[i]\r\n                .add(_dTokenApy.otherSupplyApys[i])\r\n                .mul(_dTokenApy.balances[i])\r\n                .div(_dTokenApy.tokenBalance)\r\n                .add(_apy);\r\n\r\n        return _apy;\r\n    }\r\n\r\n    struct DTokenDataLocalVars {\r\n        address token;\r\n        uint256 tokenBalance;\r\n        address[] handlers;\r\n        uint256[] balances;\r\n        uint256[] cashs;\r\n        uint256[] supplyApys;\r\n        uint256[] borrowApys;\r\n        uint256[] otherSupplyApys;\r\n    }\r\n\r\n    function getDTokenData(address _dToken)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            address[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        DTokenDataLocalVars memory _dTokenData;\r\n        (, , , , uint256 _tokenBalance) = IDToken(_dToken).getBaseData();\r\n        _dTokenData.token = IDToken(_dToken).token();\r\n        (_dTokenData.handlers, _dTokenData.balances, ) = IDToken(_dToken)\r\n            .getHandlerInfo();\r\n        _dTokenData.cashs = new uint256[](_dTokenData.handlers.length);\r\n        _dTokenData.supplyApys = new uint256[](_dTokenData.handlers.length);\r\n        _dTokenData.borrowApys = new uint256[](_dTokenData.handlers.length);\r\n        _dTokenData.otherSupplyApys = new uint256[](\r\n            _dTokenData.handlers.length\r\n        );\r\n        for (uint256 i = 0; i < _dTokenData.handlers.length; i++)\r\n            (\r\n                _dTokenData.cashs[i],\r\n                _dTokenData.supplyApys[i],\r\n                _dTokenData.borrowApys[i],\r\n                _dTokenData.otherSupplyApys[i]\r\n            ) = getHandlerData(_dTokenData.handlers[i], _dTokenData.token);\r\n\r\n        return (\r\n            _tokenBalance,\r\n            IERC20(_dToken).totalSupply(),\r\n            _dTokenData.handlers,\r\n            _dTokenData.balances,\r\n            _dTokenData.cashs,\r\n            _dTokenData.supplyApys,\r\n            _dTokenData.borrowApys,\r\n            _dTokenData.otherSupplyApys\r\n        );\r\n    }\r\n\r\n    function getHandlerData(address _handler, address _token)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (, bytes memory _data) = address(this).call(\r\n            abi.encodeWithSelector(handlers[_handler], _handler, _token)\r\n        );\r\n        (\r\n            uint256 _cash,\r\n            uint256 _supplyApy,\r\n            uint256 _borrowApy,\r\n            uint256 _otherSupplyApy\r\n        ) = abi.decode(_data, (uint256, uint256, uint256, uint256));\r\n        return (_cash, _supplyApy, _borrowApy, _otherSupplyApy);\r\n    }\r\n\r\n    function InternalData(address _handler, address _token)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (IERC20(_token).balanceOf(_handler), 0, 0, 0);\r\n    }\r\n\r\n    function CompoundData(address _handler, address _token)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        ICToken _cToken = ICToken(IHandler(_handler).cTokens(_token));\r\n        return (\r\n            _cToken.getCash(),\r\n            rpow(\r\n                (_cToken.supplyRatePerBlock() * BlocksPerDay + ONE),\r\n                DaysPerYear,\r\n                ONE\r\n            ) - ONE,\r\n            rpow(\r\n                (_cToken.borrowRatePerBlock() * BlocksPerDay + ONE),\r\n                DaysPerYear,\r\n                ONE\r\n            ) - ONE,\r\n            getCompApy(_handler, _token)\r\n        );\r\n    }\r\n\r\n    function AaveData(address _handler, address _token)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        ILendingPoolCore lendingPoolCore = ILendingPoolCore(\r\n            IHandler(_handler).aaveLendingPoolCore()\r\n        );\r\n        return (\r\n            lendingPoolCore.getReserveAvailableLiquidity(_token),\r\n            lendingPoolCore.getReserveCurrentLiquidityRate(_token) / 10**9,\r\n            lendingPoolCore.getReserveCurrentVariableBorrowRate(_token) / 10**9,\r\n            0\r\n        );\r\n    }\r\n\r\n    function USRData(address _handler, address _token)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        _token;\r\n        return (\r\n            IUSR(IHandler(_handler).USR()).totalUnderlying(),\r\n            getUSRInterestRate(_handler),\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getCompApy(address _handler, address _token)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        address _cToken = IHandler(_handler).cTokens(_token);\r\n        IComptroller _comptroller = IComptroller(\r\n            ICToken(_cToken).comptroller()\r\n        );\r\n        IDToken _dToken = IDToken(\r\n            IDTokenController(IHandler(_handler).dTokenController()).getDToken(\r\n                _token\r\n            )\r\n        );\r\n        uint256 _tokenAmount = ISwapModel(_dToken.swapModel()).getSwapAmount(\r\n            _comptroller.getCompAddress(),\r\n            _dToken.token(),\r\n            ONE\r\n        );\r\n        _tokenAmount = _comptroller.compSpeeds(_cToken).mul(_tokenAmount).div(\r\n            ONE\r\n        );\r\n\r\n        uint256 _tokenTotalAmountDoubleScale = IERC20(_cToken)\r\n            .totalSupply()\r\n            .mul(ICToken(_cToken).exchangeRateCurrent());\r\n        if (_tokenTotalAmountDoubleScale == 0) return 0;\r\n\r\n        uint256 _compApy = _tokenAmount.mul(doubleScale).div(\r\n            _tokenTotalAmountDoubleScale\r\n        );\r\n        return rpow((_compApy * 45 * 6 * 24 + ONE), DaysPerYear, ONE) - ONE;\r\n    }\r\n\r\n    function getUSRInterestRate(address _handler) public returns(uint256) {\r\n\r\n        uint256 _principal = IUSR(IHandler(_handler).USR()).totalUnderlying();\r\n\r\n        return _principal > 0 ? getUSDxAnnualInterest(_handler).mul(ONE).div(_principal) : 0;\r\n    }\r\n\r\n    function getUSDxAnnualInterest(address _handler) public returns(uint256) {\r\n\r\n        IDTokenController _dTokenController = IDTokenController(IHandler(_handler).dTokenController());\r\n\r\n        (address[] memory _tokens, uint256[] memory _amounts) = IDFProtocolView(0x097Dd22173f0e382daE42baAEb9bDBC9fdf3396F).getColStatus();\r\n        address _dToken;\r\n        uint256 _decimals;\r\n        uint256 _annualInterest;\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            _dToken = _dTokenController.getDToken(_tokens[i]);\r\n            if (_dToken == address(0))\r\n                continue;\r\n\r\n            _decimals = uint256(IERC20(_tokens[i]).decimals());\r\n            _amounts[i] = _decimals > 18 ? _amounts[i] / 10 ** (_decimals - 18) : _amounts[i] * 10 ** (18 - _decimals);\r\n            _annualInterest = _annualInterest.add(_amounts[i].mul(getDTokenApy(_dToken)).div(ONE));\r\n\t\t}\r\n\r\n        return _annualInterest;\r\n    }\r\n\r\n    function test(address _handler) public returns (\r\n            uint256,\r\n            address[] memory,\r\n            address[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        ) {\r\n\r\n        IDTokenController _dTokenController = IDTokenController(IHandler(_handler).dTokenController());\r\n\r\n        (address[] memory _tokens, uint256[] memory _amounts) = IDFProtocolView(0x097Dd22173f0e382daE42baAEb9bDBC9fdf3396F).getColStatus();\r\n\t\taddress[] memory _dTokens = new address[](_tokens.length);\r\n        uint256[] memory _decimals = new uint[](_tokens.length);\r\n        uint256 _annualInterest;\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            _dTokens[i] = _dTokenController.getDToken(_tokens[i]);\r\n            if (_dTokens[i] == address(0))\r\n                continue;\r\n\r\n            _decimals[i] = uint256(IERC20(_tokens[i]).decimals());\r\n            _amounts[i] = _decimals[i] > 18 ? _amounts[i] / 10 ** (_decimals[i] - 18) : _amounts[i] * 10 ** (18 - _decimals[i]);\r\n            _annualInterest = _annualInterest.add(_amounts[i].mul(getDTokenApy(_dTokens[i])).div(ONE));\r\n\t\t}\r\n\r\n        return (_annualInterest, _tokens, _dTokens, _decimals, _amounts);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"AaveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"CompoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"InternalData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"USRData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCompApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"getDTokenApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dTokens\",\"type\":\"address[]\"}],\"name\":\"getDTokenApys\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"getDTokenData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getHandlerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"getUSDxAnnualInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"getUSRInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"handlers\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"setHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_handlers\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"}],\"name\":\"setHandlers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DTokenCommonData","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0f16771b13c196d70f018343d8f8eb9075fa59f9bbf126173d5cac6b8d5aa1ef"}]}