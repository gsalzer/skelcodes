{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.4;\r\n\r\ncontract managed\r\n{\r\n    /*\r\n        1) Allows the manager to pause the contract\r\n        2) change fee in the future\r\n    */\r\n\r\n    address payable public manager;\r\n\r\n    constructor() public\r\n\t{\r\n\t    manager = msg.sender;\r\n\t}\r\n\r\n    modifier onlyManager()\r\n    {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n\r\n    function setManager(address payable newmanager) external onlyManager\r\n    {\r\n        /*\r\n            Allows the current manager to set a new manager\r\n        */\r\n        \r\n        require(newmanager.balance > 0);\r\n        manager = newmanager;\r\n    }\r\n\r\n}\r\n\r\ncontract digitalNotary is managed\r\n{\r\n\r\n    bool public contractactive;\r\n\r\n    uint public registrationfee;\r\n\r\n    uint public changeownerfee;\r\n\r\n    /*\r\n        A mapping of File Hash with current owner.\r\n        mapping(filehash => currentowner address)\r\n     */\r\n    mapping(bytes32 => address) FileHashCurrentOwnerMap;\r\n\r\n    //Event is generated when ownership is registered and transferred\r\n    event OwnershipEvent(bytes32 indexed filehash, address indexed filehashowner, uint eventtime);\r\n\r\n    constructor() public\r\n    {\r\n\r\n        contractactive = true;\r\n\r\n        registrationfee = 5000000000000000; //0.005 ETH\r\n\r\n        changeownerfee = 25000000000000000; //0.025 ETH\r\n\r\n    }\r\n\r\n    function setContractSwitch() external onlyManager\r\n    {\r\n        /*\r\n            Switch that controls whether the contract is paused\r\n        */\r\n        \r\n        contractactive = contractactive == true ? false : true;\r\n    }\r\n\r\n    function setRegistrationFee(uint newfee) external onlyManager\r\n    {\r\n        /*\r\n            Changes the File hash registration fee, that is paid to the manager\r\n        */\r\n        \r\n        require(newfee > 0, \"Registration Fee should be > 0\");\r\n\r\n        registrationfee = newfee;\r\n    }\r\n\r\n    function setChangeOwnerFee(uint newfee) external onlyManager\r\n    {\r\n        /*\r\n            Changes the transfer ownership fee, that is paid to the manager\r\n        */\r\n\r\n        require(newfee > 0, \"Change Ownership fee > 0\");\r\n\r\n        changeownerfee = newfee;\r\n    }\r\n\r\n\r\n    function getFileHashExists(bytes32 filehash) public view returns(bool)\r\n    {\r\n        /*\r\n            Gets whether the file hash has already been registered\r\n        */\r\n        \r\n        return FileHashCurrentOwnerMap[filehash] != address(0);\r\n    }\r\n\r\n    function getFileHashCurrentOwner(bytes32 filehash) public view returns(address)\r\n    {\r\n        /*\r\n            Gets the current owner of file hash if exists\r\n        */\r\n        \r\n        require(getFileHashExists(filehash) == true, \"File hash not registered\");\r\n\r\n        return FileHashCurrentOwnerMap[filehash];\r\n    }\r\n\r\n\r\n    function RegisterFileHash(bytes32 filehash) external payable\r\n    {\r\n        /*\r\n            Register the file Hash\r\n        */\r\n\r\n        require(contractactive == true, \"Contract not active\");\r\n        require(getFileHashExists(filehash) == false, \"File Hash already registered\");\r\n        require(msg.value == registrationfee, \"Registration Fee incorrect\");\r\n\r\n        //Add Filehash to Map\r\n        FileHashCurrentOwnerMap[filehash] = msg.sender;\r\n\r\n        //The registrationfee gets paid to manager\r\n        manager.transfer(msg.value);\r\n\r\n        emit OwnershipEvent(filehash, msg.sender, now);\r\n\r\n    }\r\n\r\n     function transferOwnership(bytes32 filehash, address newowner) external payable\r\n    {\r\n        /*\r\n            Change ownership of the file hash from the most recent owner to the new owner\r\n        */\r\n\r\n        require(contractactive == true, \"Contract not active\");\r\n        require(newowner != address(0), \"New Owner can not be address(0)\");\r\n        require(getFileHashCurrentOwner(filehash) == msg.sender,\"Msg Sender Not current owner\");\r\n        require(msg.value == changeownerfee, \"Change Owner Fee incorrect\");\r\n\r\n\r\n        //Ownership transferred\r\n        FileHashCurrentOwnerMap[filehash] = newowner;\r\n\r\n        //The changeownerfee gets paid to manager\r\n        manager.transfer(msg.value);\r\n\r\n        emit OwnershipEvent(filehash, newowner, now);\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"filehash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"filehashowner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventtime\",\"type\":\"uint256\"}],\"name\":\"OwnershipEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"filehash\",\"type\":\"bytes32\"}],\"name\":\"RegisterFileHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeownerfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"filehash\",\"type\":\"bytes32\"}],\"name\":\"getFileHashCurrentOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"filehash\",\"type\":\"bytes32\"}],\"name\":\"getFileHashExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newfee\",\"type\":\"uint256\"}],\"name\":\"setChangeOwnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setContractSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newmanager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newfee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"filehash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"digitalNotary","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6691f4cf5863bc357fa233b422c982ebab21058e1f1378828304d9a03ab788f4"}]}