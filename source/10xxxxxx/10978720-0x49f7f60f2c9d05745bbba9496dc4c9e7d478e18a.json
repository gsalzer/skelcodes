{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n//SPDX-License-Identifier: UNLICENSED\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ninterface IUNIv2 {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n    external \r\n    payable \r\n    returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract TE is IERC20 {\r\n    \r\n    using SafeMath for uint;\r\n    IUNIv2 uniswap = IUNIv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    uint public RATE;\r\n    uint public DENOMINATOR;\r\n    uint public tokensBought;\r\n    bool public isStopped = false;\r\n    bool public canRefund = false;\r\n    bool public devClaimed = false;\r\n    bool public moonMissionStarted = false;\r\n    uint public canRefundTime;\r\n    uint public tokensForUniswap = 50 ether;\r\n    \r\n    address payable owner;\r\n    uint256 public ethAmount = 1 ether;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => uint) bought;\r\n\r\n    modifier onlyWhenRunning {\r\n        require(!isStopped);\r\n        _;\r\n    }\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; \r\n        symbol = \"TE\";\r\n        name = \"TheExperiment\";\r\n        decimals = 18;\r\n        _totalSupply = 150 ether;\r\n        balances[address(this)] = _totalSupply;\r\n         RATE = 2;         // 2 TE per ETH\r\n        DENOMINATOR = 1;    // 1 ETH = 2 TE\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n    \r\n    \r\n    receive() external payable {\r\n        \r\n        buyTokens();\r\n    }\r\n    function pauseUnpausePresale(bool _isStopped) external onlyOwner{\r\n        isStopped = _isStopped;\r\n    }\r\n    function claimDev() external onlyOwner {\r\n       require(!devClaimed);\r\n       uint256 amount = address(this).balance * 20 / 100;\r\n       owner.transfer(amount);\r\n       devClaimed = true;\r\n    }\r\n    function superDuperEmergencyAllowUsersToGetTheirETHbackFromTheContractAfterTwoHours() external onlyOwner {\r\n        canRefund = true;\r\n        canRefundTime = block.timestamp + 10 minutes; \r\n    } \r\n    \r\n    function refundCaller() external {\r\n        require(canRefund == true);\r\n        require(block.timestamp >= canRefundTime);\r\n        require(address(this).balance >= ethAmount);\r\n        if (bought[msg.sender] == ethAmount){\r\n           msg.sender.transfer(ethAmount);\r\n           bought[msg.sender] = 0;\r\n        }\r\n    }\r\n    \r\n\r\n    function buyTokens() onlyWhenRunning public payable {\r\n        require(msg.value == ethAmount, \"You did not sent exactly 1 ETH\");\r\n        require(tokensBought < 100 ether, \"Hard cap reached\");\r\n        require(bought[msg.sender] == 0 , \"You already bought\");\r\n        uint tokens = msg.value.mul(RATE).div(DENOMINATOR);\r\n        require(balances[address(this)] >= tokens);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        bought[msg.sender] = bought[msg.sender].add(msg.value);\r\n        tokensBought = tokensBought.add(tokens);\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n    }\r\n    \r\n    function isUserBoughtInPresale(address user) external view returns(bool){\r\n        if (bought[user] == ethAmount)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    \r\n    function totalSupply() public override view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n   \r\n    function balanceOf(address tokenOwner) public override view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n   \r\n    function transfer(address to, uint tokens) public override returns (bool success) {\r\n        require(tokens > 0, \"You can't transfer 0 tokens\");\r\n        require(balances[msg.sender] >= tokens, \"Not enough tokens\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    function approve(address spender, uint tokens) public override returns (bool success) {\r\n        require(spender != address(0));\r\n        require(tokens > 0, \"You can't approve 0 tokens\");\r\n        \r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\r\n        require(from != address(0));\r\n        require(tokens > 0, \"You can't transfer 0 tokens\");\r\n        require(balances[from] >= tokens, \"Not enough tokens\");\r\n        require(allowed[from][msg.sender] >= tokens);\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n   \r\n    function allowance(address tokenOwner, address spender) public override view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        \r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function moonMissionStart() external onlyOwner {\r\n        require(devClaimed == true);\r\n        require(!moonMissionStarted);\r\n        uint256 ETH = address(this).balance;\r\n        uint tokensToBurn = balanceOf(address(this)).sub(tokensForUniswap);\r\n\r\n        this.approve(address(uniswap), tokensForUniswap);\r\n        uniswap.addLiquidityETH\r\n        { value: ETH }\r\n        (\r\n            address(this),\r\n            tokensForUniswap,\r\n            tokensForUniswap,\r\n            ETH,\r\n            address(0),\r\n            block.timestamp + 5 minutes\r\n        );\r\n        if (tokensToBurn > 0) {\r\n          balances[address(this)] = balances[address(this)].sub(tokensToBurn);\r\n          emit Transfer(address(this), address(0), tokensToBurn);\r\n        }\r\n        if(!isStopped)\r\n            isStopped = true;\r\n            \r\n        moonMissionStarted = true;\r\n   }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRefundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserBoughtInPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonMissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonMissionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStopped\",\"type\":\"bool\"}],\"name\":\"pauseUnpausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superDuperEmergencyAllowUsersToGetTheirETHbackFromTheContractAfterTwoHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TE","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b8e164310ad6db5513984a9f30f98ca355b3771d2fbf2043888f831d85dad489"}]}