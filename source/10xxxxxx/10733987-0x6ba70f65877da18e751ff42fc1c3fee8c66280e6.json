{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IYFVRewards {\r\n    function stakingPower(address account) external view returns (uint256);\r\n}\r\n\r\ncontract YFVVIPVote {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public governance;\r\n\r\n    uint8 public constant MAX_VOTERS_PER_ITEM = 200;\r\n\r\n    mapping(address => mapping(uint256 => uint8)) public numVoters; // poolAddress -> votingItem (periodFinish) -> numVoters (the number of voters in this round)\r\n    mapping(address => mapping(uint256 => address[MAX_VOTERS_PER_ITEM])) public voters; // poolAddress -> votingItem (periodFinish) -> voters (array)\r\n    mapping(address => mapping(uint256 => mapping(address => bool))) public isInTopVoters; // poolAddress -> votingItem (periodFinish) -> isInTopVoters (map: voter -> in_top (true/false))\r\n    mapping(address => mapping(uint256 => mapping(address => uint32))) public voter2VotingValue; // poolAddress -> votingItem (periodFinish) -> voter2VotingValue (map: voter -> voting value)\r\n\r\n    mapping(address => mapping(uint256 => uint32)) public votingValueMinimums; // poolAddress -> votingItem (proposalId) -> votingValueMin\r\n    mapping(address => mapping(uint256 => uint32)) public votingValueMaximums; // poolAddress -> votingItem (proposalId) -> votingValueMax\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public votingStarttimes; // poolAddress -> votingItem (proposalId) -> voting's starttime\r\n    mapping(address => mapping(uint256 => uint256)) public votingEndtimes; // poolAddress -> votingItem (proposalId) -> voting's endtime\r\n\r\n    event Voted(address poolAddress, address indexed user, uint256 votingItem, uint32 votingValue);\r\n\r\n    constructor () public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function setVotingConfig(address poolAddress, uint256 votingItem, uint32 minValue, uint32 maxValue, uint256 starttime, uint256 endtime) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(minValue < maxValue, \"Invalid voting range\");\r\n        require(starttime < endtime, \"Invalid time range\");\r\n        require(endtime > block.timestamp, \"Endtime has passed\");\r\n        votingValueMinimums[poolAddress][votingItem] = minValue;\r\n        votingValueMaximums[poolAddress][votingItem] = maxValue;\r\n        votingStarttimes[poolAddress][votingItem] = starttime;\r\n        votingEndtimes[poolAddress][votingItem] = endtime;\r\n    }\r\n\r\n    function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {\r\n        if (block.timestamp < votingStarttimes[poolAddress][votingItem]) return false; // vote is not open yet\r\n        if (block.timestamp > votingEndtimes[poolAddress][votingItem]) return false; // vote is closed\r\n        if (voter2VotingValue[poolAddress][votingItem][account] > 0) return false; // already voted\r\n\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        // hasn't any staking power\r\n        if (rewards.stakingPower(account) == 0) return false;\r\n\r\n        // number of voters is under limit still\r\n        if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) return true;\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true;\r\n            // there is some voters has lower staking power\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function averageVotingValue(address poolAddress, uint256 votingItem) public view returns (uint32) {\r\n        if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes\r\n        uint256 totalStakingPower = 0;\r\n        uint256 totalWeightVotingValue = 0;\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            address voter = voters[poolAddress][votingItem][i];\r\n            totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));\r\n            totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));\r\n        }\r\n        return (uint32) (totalWeightVotingValue.div(totalStakingPower));\r\n    }\r\n\r\n    function averageVotingValueByBits(address poolAddress, uint256 votingItem, uint8 leftBitRange, uint8 rightBitRange) public view returns (uint32) {\r\n        uint32 avgVotingValue = averageVotingValue(poolAddress, votingItem);\r\n        if (avgVotingValue == 0) return 0;\r\n        uint32 bitmask = (uint32(1) << (leftBitRange - rightBitRange)) - 1;\r\n        uint32 votingValueByBits = (avgVotingValue >> rightBitRange) & bitmask;\r\n        return votingValueByBits;\r\n    }\r\n\r\n    function verifyOfflineVote(address poolAddress, uint256 votingItem, uint32 votingValue, address voter, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\r\n        bytes32 signatureHash = keccak256(abi.encodePacked(voter, poolAddress, votingItem, votingValue));\r\n        return voter == ecrecover(signatureHash, v, r, s);\r\n    }\r\n\r\n    function vote(address poolAddress, uint256 votingItem, uint32 votingValue) public {\r\n        require(block.timestamp >= votingStarttimes[poolAddress][votingItem], \"voting is not open yet\");\r\n        require(block.timestamp <= votingEndtimes[poolAddress][votingItem], \"voting is closed\");\r\n        if (votingValueMinimums[poolAddress][votingItem] > 0 || votingValueMaximums[poolAddress][votingItem] > 0) {\r\n            require(votingValue >= votingValueMinimums[poolAddress][votingItem], \"votingValue is smaller than minimum accepted value\");\r\n            require(votingValue <= votingValueMaximums[poolAddress][votingItem], \"votingValue is greater than maximum accepted value\");\r\n        }\r\n\r\n        if (!isInTopVoters[poolAddress][votingItem][msg.sender]) {\r\n            require(isVotable(poolAddress, msg.sender, votingItem), \"This account is not votable\");\r\n            uint8 voterIndex = MAX_VOTERS_PER_ITEM;\r\n            if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) {\r\n                voterIndex = numVoters[poolAddress][votingItem];\r\n            } else {\r\n                IYFVRewards rewards = IYFVRewards(poolAddress);\r\n                uint256 minStakingPower = rewards.stakingPower(msg.sender);\r\n                for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n                    if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {\r\n                        voterIndex = i;\r\n                        minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);\r\n                    }\r\n                }\r\n            }\r\n            if (voterIndex < MAX_VOTERS_PER_ITEM) {\r\n                if (voterIndex < numVoters[poolAddress][votingItem]) {\r\n                    // remove lower power previous voter\r\n                    isInTopVoters[poolAddress][votingItem][voters[poolAddress][votingItem][voterIndex]] = false;\r\n                } else {\r\n                    ++numVoters[poolAddress][votingItem];\r\n                }\r\n                isInTopVoters[poolAddress][votingItem][msg.sender] = true;\r\n                voters[poolAddress][votingItem][voterIndex] = msg.sender;\r\n            }\r\n        }\r\n        voter2VotingValue[poolAddress][votingItem][msg.sender] = votingValue;\r\n        emit Voted(poolAddress, msg.sender, votingItem, votingValue);\r\n    }\r\n\r\n    // Contract may be destroyed to earn back gas fee\r\n    function kill() external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        selfdestruct(governance);\r\n    }\r\n\r\n    event EmergencyERC20Drain(address token, address governance, uint256 amount);\r\n\r\n    // governance can drain tokens that are sent here by mistake\r\n    function emergencyERC20Drain(ERC20 token, uint amount) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        emit EmergencyERC20Drain(address(token), governance, amount);\r\n        token.transfer(governance, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyERC20Drain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"votingValue\",\"type\":\"uint32\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTERS_PER_ITEM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"averageVotingValue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"leftBitRange\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rightBitRange\",\"type\":\"uint8\"}],\"name\":\"averageVotingValueByBits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInTopVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"isVotable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVoters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"setVotingConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"votingValue\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifyOfflineVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"votingValue\",\"type\":\"uint32\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voter2VotingValue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingEndtimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingStarttimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingValueMaximums\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingValueMinimums\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YFVVIPVote","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://525d323be723ec4dcd8eb8efab9052f46dcddd5db43094ec4370dcc35b740bd1"}]}