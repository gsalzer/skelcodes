{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface iERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\ninterface iROUTER {\r\n    function isPool(address) external view returns(bool);\r\n}\r\ninterface iPOOL {\r\n    function TOKEN() external view returns(address);\r\n    function transferTo(address, uint) external returns (bool);\r\n}\r\ninterface iUTILS {\r\n    function calcShare(uint part, uint total, uint amount) external pure returns (uint share);\r\n    function getPoolShare(address token, uint units) external view returns(uint baseAmt);\r\n}\r\ninterface iBASE {\r\n    function changeIncentiveAddress(address) external returns(bool);\r\n    function changeDAO(address) external returns(bool);\r\n}\r\n\r\n// SafeMath\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint)   {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Dao_Vether {\r\n\r\n    using SafeMath for uint;\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    address public DEPLOYER;\r\n\r\n    address public BASE;\r\n\r\n    uint256 public totalWeight;\r\n    uint public one = 10**18;\r\n    uint public coolOffPeriod = 1 * 2;\r\n    uint public blocksPerDay = 5760;\r\n    uint public daysToEarnFactor = 10;\r\n    uint public FUNDS_CAP = one * 50000;\r\n\r\n    address public proposedDao;\r\n    bool public proposedDaoChange;\r\n    uint public daoChangeStart;\r\n    bool public daoHasMoved;\r\n    address public DAO;\r\n\r\n    address public proposedRouter;\r\n    bool public proposedRouterChange;\r\n    uint public routerChangeStart;\r\n    bool public routerHasMoved;\r\n    iROUTER private _ROUTER;\r\n\r\n    address public proposedUtils;\r\n    bool public proposedUtilsChange;\r\n    uint public utilsChangeStart;\r\n    bool public utilsHasMoved;\r\n    iUTILS private _UTILS;\r\n\r\n    address[] public arrayMembers;\r\n    mapping(address => bool) public isMember; // Is Member\r\n    mapping(address => mapping(address => uint256)) public mapMemberPool_Balance; // Member's balance in pool\r\n    mapping(address => uint256) public mapMember_Weight; // Value of weight\r\n    mapping(address => mapping(address => uint256)) public mapMemberPool_Weight; // Value of weight for pool\r\n    mapping(address => uint256) public mapMember_Block;\r\n\r\n    mapping(address => uint256) public mapAddress_Votes; \r\n    mapping(address => mapping(address => uint256)) public mapAddressMember_Votes; \r\n\r\n    uint public ID;\r\n    mapping(uint256 => string) public mapID_Type;\r\n    mapping(uint256 => uint256) public mapID_Value;\r\n    mapping(uint256 => uint256) public mapID_Votes; \r\n    mapping(uint256 => uint256) public mapID_Start; \r\n    mapping(uint256 => mapping(address => uint256)) public mapIDMember_Votes; \r\n\r\n    event MemberLocks(address indexed member,address indexed pool,uint256 amount);\r\n    event MemberUnlocks(address indexed member,address indexed pool,uint256 balance);\r\n    event MemberRegisters(address indexed member,address indexed pool,uint256 amount);\r\n\r\n    event NewVote(address indexed member,address indexed proposedAddress, uint voteWeight, uint totalVotes, string proposalType);\r\n    event ProposalFinalising(address indexed member,address indexed proposedAddress, uint timeFinalised, string proposalType);\r\n    event NewAddress(address indexed member,address indexed newAddress, uint votesCast, uint totalWeight, string proposalType);\r\n\r\n    event NewVoteParam(address indexed member,uint indexed ID, uint voteWeight, uint totalVotes, string proposalType);\r\n    event ParamProposalFinalising(address indexed member,uint indexed ID, uint timeFinalised, string proposalType);\r\n    event NewParam(address indexed member,uint indexed ID, uint votesCast, uint totalWeight, string proposalType);\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    // Only Deployer can execute\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == DEPLOYER, \"DeployerErr\");\r\n        _;\r\n    }\r\n\r\n    constructor () public payable {\r\n        BASE = 0x4Ba6dDd7b89ed838FEd25d208D4f644106E34279;\r\n        DEPLOYER = msg.sender;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    function setGenesisAddresses(address _router, address _utils) public onlyDeployer {\r\n        _ROUTER = iROUTER(_router);\r\n        _UTILS = iUTILS(_utils);\r\n    }\r\n    function setGenesisFactors(uint _coolOff, uint _blocksPerDay, uint _daysToEarn) public onlyDeployer {\r\n        coolOffPeriod = _coolOff;\r\n        blocksPerDay = _blocksPerDay;\r\n        daysToEarnFactor = _daysToEarn;\r\n    }\r\n    function setCap(uint _fundsCap) public onlyDeployer {\r\n        FUNDS_CAP = _fundsCap;\r\n    }\r\n\r\n    function purgeDeployer() public onlyDeployer {\r\n        DEPLOYER = address(0);\r\n    }\r\n\r\n    //============================== USER - LOCK/UNLOCK ================================//\r\n    // Member locks some LP tokens\r\n    function lock(address pool, uint256 amount) public nonReentrant {\r\n        require(_ROUTER.isPool(pool) == true, \"Must be listed\");\r\n        require(amount > 0, \"Must get some\");\r\n        if (!isMember[msg.sender]) {\r\n            mapMember_Block[msg.sender] = block.number;\r\n            arrayMembers.push(msg.sender);\r\n            isMember[msg.sender] = true;\r\n        }\r\n        require(iPOOL(pool).transferTo(address(this), amount),\"Must transfer\"); // Uni/Bal LP tokens return bool\r\n        mapMemberPool_Balance[msg.sender][pool] = mapMemberPool_Balance[msg.sender][pool].add(amount); // Record total pool balance for member\r\n        registerWeight(msg.sender, pool); // Register weight\r\n        emit MemberLocks(msg.sender, pool, amount);\r\n    }\r\n\r\n    // Member unlocks all from a pool\r\n    function unlock(address pool) public nonReentrant {\r\n        uint256 balance = mapMemberPool_Balance[msg.sender][pool];\r\n        require(balance > 0, \"Must have a balance to weight\");\r\n        reduceWeight(pool, msg.sender);\r\n        if(mapMember_Weight[msg.sender] == 0 && iERC20(BASE).balanceOf(address(this)) > 0){\r\n            harvest();\r\n        }\r\n        require(iERC20(pool).transfer(msg.sender, balance), \"Must transfer\"); // Then transfer\r\n        emit MemberUnlocks(msg.sender, pool, balance);\r\n    }\r\n\r\n    // Member registers weight in a single pool\r\n    function registerWeight(address member, address pool) internal {\r\n        uint weight = updateWeight(pool, member);\r\n        emit MemberRegisters(member, pool, weight);\r\n    }\r\n\r\n    function updateWeight(address pool, address member) public returns(uint){\r\n        if(mapMemberPool_Weight[member][pool] > 0){\r\n            totalWeight = totalWeight.sub(mapMemberPool_Weight[member][pool]); // Remove previous weights\r\n            mapMember_Weight[member] = mapMember_Weight[member].sub(mapMemberPool_Weight[member][pool]);\r\n            mapMemberPool_Weight[member][pool] = 0;\r\n        }\r\n        uint weight = _UTILS.getPoolShare(iPOOL(pool).TOKEN(), mapMemberPool_Balance[msg.sender][pool] );\r\n        mapMemberPool_Weight[member][pool] = weight;\r\n        mapMember_Weight[member] += weight;\r\n        totalWeight += weight;\r\n        return weight;\r\n    }\r\n    function reduceWeight(address pool, address member) internal {\r\n        uint weight = mapMemberPool_Weight[member][pool];\r\n        mapMemberPool_Balance[member][pool] = 0; // Zero out balance\r\n        mapMemberPool_Weight[member][pool] = 0; // Zero out weight\r\n        totalWeight = totalWeight.sub(weight); // Remove that weight\r\n        mapMember_Weight[member] = mapMember_Weight[member].sub(weight); // Reduce weight\r\n    }\r\n\r\n    //============================== GOVERNANCE ================================//\r\n\r\n\r\n    // Member votes new Router\r\n    function voteAddressChange(address newAddress, string memory typeStr) public nonReentrant returns (uint voteWeight) {\r\n        bytes memory _type = bytes(typeStr);\r\n        require(sha256(_type) == sha256('DAO') || sha256(_type) == sha256('ROUTER') || sha256(_type) == sha256('UTILS'));\r\n        voteWeight = countVotes(newAddress);\r\n        updateAddressChange(newAddress, _type);\r\n        emit NewVote(msg.sender, newAddress, voteWeight, mapAddress_Votes[newAddress], string(_type));\r\n    }\r\n\r\n    function updateAddressChange(address _newAddress, bytes memory _type) internal {\r\n        if(hasQuorum(_newAddress)){\r\n            if(sha256(_type) == sha256('DAO')){\r\n                updateDao(_newAddress);\r\n            } else if (sha256(_type) == sha256('ROUTER')) {\r\n                updateRouter(_newAddress);\r\n            } else if (sha256(_type) == sha256('UTILS')){\r\n                updateUtils(_newAddress);\r\n            }\r\n            emit ProposalFinalising(msg.sender, _newAddress, now+coolOffPeriod, string(_type));\r\n        }\r\n    }\r\n\r\n    function moveAddress(string memory _typeStr) public nonReentrant {\r\n        bytes memory _type = bytes(_typeStr);\r\n        if(sha256(_type) == sha256('DAO')){\r\n            moveDao();\r\n        } else if (sha256(_type) == sha256('ROUTER')) {\r\n            moveRouter();\r\n        } else if (sha256(_type) == sha256('UTILS')){\r\n            moveUtils();\r\n        }\r\n    }\r\n\r\n    function updateDao(address _address) internal {\r\n        proposedDao = _address;\r\n        proposedDaoChange = true;\r\n        daoChangeStart = now;\r\n    }\r\n    function moveDao() internal {\r\n        require(proposedDao != address(0), \"No DAO proposed\");\r\n        require((now - daoChangeStart) > coolOffPeriod, \"Must be pass cool off\");\r\n        if(!hasQuorum(proposedDao)){\r\n            proposedDaoChange = false;\r\n        }\r\n        if(proposedDaoChange){\r\n            uint reserve = iERC20(BASE).balanceOf(address(this));\r\n            iERC20(BASE).transfer(proposedDao, reserve);\r\n            daoHasMoved = true;\r\n            DAO = proposedDao;\r\n            emit NewAddress(msg.sender, proposedDao, mapAddress_Votes[proposedDao], totalWeight, 'DAO');\r\n            mapAddress_Votes[proposedDao] = 0;\r\n            proposedDao = address(0);\r\n            proposedDaoChange = false;\r\n        }\r\n    }\r\n\r\n    function updateRouter(address _address) internal {\r\n        proposedRouter = _address;\r\n        proposedRouterChange = true;\r\n        routerChangeStart = now;\r\n        routerHasMoved = false;\r\n    }\r\n    function moveRouter() internal {\r\n        require(proposedRouter != address(0), \"No router proposed\");\r\n        require((now - routerChangeStart) > coolOffPeriod, \"Must be pass cool off\");\r\n        if(!hasQuorum(proposedRouter)){\r\n            proposedRouterChange = false;\r\n        }\r\n        if(proposedRouterChange){\r\n            _ROUTER = iROUTER(proposedRouter);\r\n            routerHasMoved = true;\r\n            emit NewAddress(msg.sender, proposedRouter, mapAddress_Votes[proposedRouter], totalWeight, 'ROUTER');\r\n            mapAddress_Votes[proposedRouter] = 0;\r\n            proposedRouter = address(0);\r\n            proposedRouterChange = false;\r\n        }\r\n    }\r\n\r\n    function updateUtils(address _address) internal {\r\n        proposedUtils = _address;\r\n        proposedUtilsChange = true;\r\n        utilsChangeStart = now;\r\n        utilsHasMoved = false;\r\n    }\r\n    function moveUtils() internal {\r\n        require(proposedUtils != address(0), \"No utils proposed\");\r\n        require((now - routerChangeStart) > coolOffPeriod, \"Must be pass cool off\");\r\n        if(!hasQuorum(proposedUtils)){\r\n            proposedUtilsChange = false;\r\n        }\r\n        if(proposedUtilsChange){\r\n            _UTILS = iUTILS(proposedUtils);\r\n            utilsHasMoved = true;\r\n            emit NewAddress(msg.sender, proposedUtils, mapAddress_Votes[proposedUtils], totalWeight, 'UTILS');\r\n            mapAddress_Votes[proposedUtils] = 0;\r\n            proposedUtils = address(0);\r\n            proposedUtilsChange = false;\r\n        }\r\n    }\r\n\r\n    //============================== GOVERNANCE ================================//\r\n\r\n    function newProposal(uint value, string memory typeStr) public {\r\n        bytes memory _type = bytes(typeStr);\r\n        require(sha256(_type) == sha256('FUNDS') || sha256(_type) == sha256('DAYS') || sha256(_type) == sha256('COOL'));\r\n        mapID_Type[ID] = typeStr;\r\n        mapID_Value[ID] = value;\r\n        voteIDChange(ID);\r\n        ID +=1;\r\n    }\r\n\r\n    function voteIDChange(uint _ID) public nonReentrant returns (uint voteWeight) {\r\n        voteWeight = countVotesID(_ID);\r\n        updateIDChange(_ID);\r\n        emit NewVoteParam(msg.sender, _ID, voteWeight, mapID_Votes[_ID], mapID_Type[_ID]);\r\n    }\r\n\r\n    function updateIDChange(uint _ID) internal {\r\n        if(hasQuorumID(_ID)){\r\n            mapID_Start[_ID] = now;\r\n            emit ParamProposalFinalising(msg.sender, ID, now+coolOffPeriod, mapID_Type[ID]);\r\n        }\r\n    }\r\n\r\n    function executeID(uint _ID) public nonReentrant {\r\n        bytes memory _type = bytes(mapID_Type[_ID]);\r\n        if(sha256(_type) == sha256('FUNDS')){\r\n            FUNDS_CAP = mapID_Value[_ID];\r\n        } else if (sha256(_type) == sha256('DAYS')) {\r\n            daysToEarnFactor = mapID_Value[_ID];\r\n        } else if (sha256(_type) == sha256('COOL')){\r\n            coolOffPeriod = mapID_Value[_ID];\r\n        }\r\n        emit NewParam(msg.sender, ID, mapID_Votes[_ID], totalWeight, mapID_Type[_ID]);\r\n    }\r\n\r\n    //============================== CONSENSUS ================================//\r\n\r\n    function countVotes(address _address) internal returns (uint voteWeight){\r\n        mapAddress_Votes[_address] = mapAddress_Votes[_address].sub(mapAddressMember_Votes[_address][msg.sender]);\r\n        voteWeight = mapMember_Weight[msg.sender];\r\n        mapAddress_Votes[_address] += voteWeight;\r\n        mapAddressMember_Votes[_address][msg.sender] = voteWeight;\r\n        return voteWeight;\r\n    }\r\n\r\n    function hasQuorum(address _address) public view returns(bool){\r\n        uint votes = mapAddress_Votes[_address];\r\n        uint consensus = totalWeight.div(2);\r\n        if(votes > consensus){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function countVotesID(uint _ID) internal returns (uint voteWeight){\r\n        mapID_Votes[_ID] = mapID_Votes[_ID].sub(mapIDMember_Votes[_ID][msg.sender]);\r\n        voteWeight = mapMember_Weight[msg.sender];\r\n        mapID_Votes[_ID] += voteWeight;\r\n        mapIDMember_Votes[_ID][msg.sender] = voteWeight;\r\n        return voteWeight;\r\n    }\r\n\r\n    function hasQuorumID(uint _ID) public view returns(bool){\r\n        uint votes = mapID_Votes[_ID];\r\n        uint consensus = totalWeight.div(2);\r\n        if(votes > consensus){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // //============================== _ROUTER ================================//\r\n\r\n    function ROUTER() public view returns(iROUTER){\r\n        if(daoHasMoved){\r\n            return Dao_Vether(DAO).ROUTER();\r\n        } else {\r\n            return _ROUTER;\r\n        }\r\n    }\r\n\r\n    function UTILS() public view returns(iUTILS){\r\n        if(daoHasMoved){\r\n            return Dao_Vether(DAO).UTILS();\r\n        } else {\r\n            return _UTILS;\r\n        }\r\n    }\r\n\r\n    //============================== REWARDS ================================//\r\n    // Rewards\r\n    function harvest() public nonReentrant {\r\n        uint reward = calcCurrentReward(msg.sender);\r\n        mapMember_Block[msg.sender] = block.number;\r\n        iERC20(BASE).transfer(msg.sender, reward);\r\n    }\r\n\r\n    function calcCurrentReward(address member) public view returns(uint){\r\n        uint blocksSinceClaim = block.number.sub(mapMember_Block[member]);\r\n        uint share = calcReward(member);\r\n        uint reward = share.mul(blocksSinceClaim).div(blocksPerDay);\r\n        uint reserve = iERC20(BASE).balanceOf(address(this));\r\n        if(reward >= reserve) {\r\n            reward = reserve;\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function calcReward(address member) public view returns(uint){\r\n        uint weight = mapMember_Weight[member];\r\n        uint reserve = iERC20(BASE).balanceOf(address(this)).div(daysToEarnFactor);\r\n        return _UTILS.calcShare(weight, totalWeight, reserve);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MemberLocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MemberRegisters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"MemberUnlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesCast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"NewAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesCast\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"NewParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"NewVoteParam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeFinalised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"ParamProposalFinalising\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeFinalised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"ProposalFinalising\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDS_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract iROUTER\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILS\",\"outputs\":[{\"internalType\":\"contract iUTILS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"calcCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolOffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoChangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoHasMoved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysToEarnFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"executeID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasQuorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"hasQuorumID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddressMember_Votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddress_Votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapIDMember_Votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapID_Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapID_Type\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapID_Value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapID_Votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberPool_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberPool_Weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMember_Block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMember_Weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_typeStr\",\"type\":\"string\"}],\"name\":\"moveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"newProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedDaoChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedRouterChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedUtilsChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerChangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerHasMoved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundsCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utils\",\"type\":\"address\"}],\"name\":\"setGenesisAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coolOff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daysToEarn\",\"type\":\"uint256\"}],\"name\":\"setGenesisFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"updateWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilsChangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilsHasMoved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"voteAddressChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"voteIDChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Dao_Vether","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dbdf2840829161025e5ee48245df7fc8cf6351dd42ead0123f1c8f6178a87ccf"}]}