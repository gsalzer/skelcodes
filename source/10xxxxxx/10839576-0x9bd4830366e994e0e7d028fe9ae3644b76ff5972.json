{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Sunflower {\r\n    \r\n    using SafeMath for uint;\r\n\r\n\tuint40 constant CHECK_CYCLE = 2592000;\r\n\tuint40 constant GAMBLING_POOL_CYCLE = 259200;\r\n\tuint40 constant RELEASE_CYCLE = 86400;\r\n\t\r\n   \r\n    uint gambling_pool;\r\n\tuint40 gambling_pool_time;\r\n\taddress[100] gambling_pool_address;\r\n\tuint8 gambling_pool_address_pos;\r\n\t\r\n\tstruct InvestParam {\r\n        uint8 releaseRate;\r\n        \r\n        uint8 outMultiple;\r\n\t\t}\r\n    \r\n\tmapping(uint => InvestParam) investParams;\r\n\t\r\n\tuint total_deposit;\r\n\t\r\n    struct User {\r\n        address upline;\r\n\t\t\r\n        uint referrals;\r\n\t\t\r\n        uint payouts;\r\n\t\t\r\n        uint invite_bonus;\r\n\t\tuint level_bonus;\r\n\t\t\r\n        uint deposit_amount;\r\n\t\t\r\n        uint release_num;\r\n\t\t\r\n        uint40 deposit_time;\r\n\t\t\r\n        uint total_deposits;\r\n\t\t\r\n\t\tuint total_invite_deposits;\r\n\r\n\t\tuint8 level;\r\n\t\t\r\n\t\tuint8 check_level;\r\n\t\t\r\n\t\tuint40 check_time;\r\n\t\t\r\n\t\tuint check_invite_deposits;\r\n\t\t\r\n\t\tuint total_payouts;\r\n    }\r\n\t\r\n    mapping(address => User) users;\r\n\tuint8[] ref_bonuses;\r\n\tuint8[] ref_nums;\r\n\tuint[] levels_invite_deposits;\r\n\tuint[] levels_check_invite_deposits;\r\n\tuint8[] levels_bonus;\r\n\tmapping(uint8 => address[]) levels_users;\r\n\t\r\n\taddress[3] operate_address = [0xac2b4501284261ff009f22AfcC7F4997bA77ecB2,0xc9a02f9a161a51Fa48039684d6DFC933f4ACE55C,0xbd4FA6AF1e6fE6b211414948346420694fFab8cD];\r\n\tuint[3] operate_bonuses;\r\n    \r\n\tevent Upline(address indexed addr, address indexed upline);\r\n\tevent InvitePayout(address indexed addr, address indexed from, uint amount);\r\n\tevent NewDeposit(address indexed addr, uint amount);\r\n\tevent LevelPayout(address indexed addr, address indexed from, uint amount);\r\n\t\r\n\tconstructor() public {\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(3);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(1);\r\n        ref_bonuses.push(2);\r\n        ref_bonuses.push(3);\r\n        ref_bonuses.push(5);\r\n\t\t\r\n\t\tref_nums.push(1);\r\n        ref_nums.push(3);\r\n        ref_nums.push(3);\r\n        ref_nums.push(5);\r\n        ref_nums.push(5);\r\n        ref_nums.push(5);\r\n        ref_nums.push(5);\r\n        ref_nums.push(5);\r\n        ref_nums.push(8);\r\n        ref_nums.push(8);\r\n        ref_nums.push(8);\r\n        ref_nums.push(8);\r\n        ref_nums.push(10);\r\n        ref_nums.push(10);\r\n        ref_nums.push(10);\r\n\t\t\r\n\t\tlevels_bonus.push(15);\r\n        levels_bonus.push(20);\r\n        levels_bonus.push(25);\r\n\r\n        gambling_pool_time = uint40(now);\r\n\t\t\r\n\t\tlevels_invite_deposits.push(500 ether);\r\n        levels_invite_deposits.push(5000 ether);\r\n        levels_invite_deposits.push(50000 ether);\r\n\t\t\r\n\t\tlevels_check_invite_deposits.push(50 ether);\r\n        levels_check_invite_deposits.push(500 ether);\r\n        levels_check_invite_deposits.push(2000 ether);\r\n\t\t\r\n\t\tinvestParams[0.5 ether].releaseRate = 5;\r\n\t\tinvestParams[0.5 ether].outMultiple = 15;\r\n\t\tinvestParams[1 ether].releaseRate = 6;\r\n\t\tinvestParams[1 ether].outMultiple = 18;\r\n\t\tinvestParams[3 ether].releaseRate = 7;\r\n\t\tinvestParams[3 ether].outMultiple = 20;\r\n\t\tinvestParams[5 ether].releaseRate = 8;\r\n\t\tinvestParams[5 ether].outMultiple = 22;\r\n\t\tinvestParams[10 ether].releaseRate = 9;\r\n\t\tinvestParams[10 ether].outMultiple = 24;\r\n\t\tinvestParams[30 ether].releaseRate = 10;\r\n\t\tinvestParams[30 ether].outMultiple = 26; \r\n    }\r\n\t\r\n\tfunction getGamblingPoolAddress() public constant returns (address[100]){\r\n\t\treturn gambling_pool_address;\r\n\t}\r\n\t\r\n\tfunction getGamblingPoolAddressPos() public constant returns (uint8){\r\n\t\treturn gambling_pool_address_pos;\r\n\t}\r\n\t\r\n\tfunction getLevelsUsers(uint8 index) public constant returns (address[]){\r\n\t\treturn levels_users[index];\r\n\t}\r\n\t\r\n\tfunction getOperateBonuses() public constant returns (uint[3]){\r\n\t\treturn operate_bonuses;\r\n\t}\r\n\t\r\n\tfunction getSFC() public constant returns (uint){\r\n\t\treturn users[msg.sender].total_deposits;\r\n\t}\r\n\r\n\tfunction getUser() public constant returns (address, uint, uint, uint, uint, uint, uint, uint40, uint, uint8, uint8, uint40, uint, uint){\r\n\t\treturn (users[msg.sender].upline, users[msg.sender].referrals, users[msg.sender].payouts, \r\n\t\tusers[msg.sender].invite_bonus, users[msg.sender].level_bonus, users[msg.sender].deposit_amount, users[msg.sender].release_num, \r\n\t\tusers[msg.sender].deposit_time, users[msg.sender].total_invite_deposits, \r\n\t\tusers[msg.sender].level, users[msg.sender].check_level, \r\n\t\tusers[msg.sender].check_time, users[msg.sender].check_invite_deposits, users[msg.sender].total_payouts );\r\n\t}\r\n\t\r\n\tfunction getInfo() public constant returns (uint, uint, uint40){\r\n\t\treturn (total_deposit, gambling_pool, gambling_pool_time);\r\n\t}\r\n\t\r\n    function _setUpline(address _addr, address _upline) private {\r\n\r\n\t\trequire(users[_upline].deposit_amount > 0);\r\n\t\tusers[_addr].upline = _upline;\r\n        users[_upline].referrals++;\r\n\r\n\t\tif(users[_upline].referrals >= 10)\r\n\t\t{\r\n\t\t\tfor(uint8 g=(uint8)(levels_invite_deposits.length); g>0; g--)\r\n\t\t\t{\r\n\t\t\t\tif(users[_upline].total_invite_deposits >= levels_invite_deposits[g-1] && users[_upline].level < g)\r\n\t\t\t\t{\r\n\t\t\t\t\tlevels_users[g].push(_upline);\r\n\t\t\t\t\tif(users[_upline].level > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(uint k=0; k<levels_users[users[_upline].level].length; k++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(levels_users[users[_upline].level][k] == _upline && levels_users[users[_upline].level].length>1)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlevels_users[users[_upline].level][k] = levels_users[users[_upline].level][levels_users[users[_upline].level].length - 1];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete levels_users[users[_upline].level][levels_users[users[_upline].level].length - 1];\r\n\t\t\t\t\t\tlevels_users[users[_upline].level].length--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tusers[_upline].level = g;\r\n\t\t\t\t\tusers[_upline].check_time = uint40(now);\r\n\t\t\t\t\tusers[_upline].check_level = g;\r\n\t\t\t\t\tusers[_upline].check_invite_deposits = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n        emit Upline(_addr, _upline);\r\n    }\r\n\t\r\n\tfunction _levels_bonus(address _addr, uint _amount) private {\r\n\t\tuint[3] memory _levels_num;\r\n\t\tfor(uint8 m=1; m<=3; m++)\r\n\t\t{\r\n\t\t\tfor(uint8 n=0; n<levels_users[m].length; n++)\r\n\t\t\t{\r\n\t\t\t\tUser storage _user1 = users[levels_users[m][n]];\r\n\t\t\t\tif(now >= _user1.check_time + CHECK_CYCLE)\r\n\t\t\t\t{\r\n\t\t\t\t\t_user1.check_level = 0;\r\n\t\t\t\t\tfor(uint8 s= (uint8)(levels_check_invite_deposits.length); s>0; s--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(_user1.check_invite_deposits >= levels_check_invite_deposits[s-1])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_user1.check_level = s > _user1.level ? _user1.level : s;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuint40 _old_time = _user1.check_time;\r\n\t\t\t\t\t_user1.check_time = _user1.check_time + (uint40)(now.sub(_user1.check_time).div(CHECK_CYCLE).mul(CHECK_CYCLE));\r\n\t\t\t\t\t_user1.check_invite_deposits = 0;\r\n\t\t\t\t\tif(_user1.check_time - _old_time > CHECK_CYCLE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_user1.check_level = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(_user1.check_level > 0 && _user1.deposit_time > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t_levels_num[_user1.check_level-1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint[3] memory _levels_bonus_num;\r\n\t\tfor(m=0; m<3; m++)\r\n\t\t{\r\n\t\t\tif(_levels_num[m] != 0)\r\n\t\t\t{\r\n\t\t\t\t_levels_bonus_num[m] = _amount.mul(levels_bonus[m]).div(1000).div(_levels_num[m]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(m=1; m<=3; m++)\r\n\t\t{\r\n\t\t\tfor(n=0; n<levels_users[m].length; n++)\r\n\t\t\t{\r\n\t\t\t\tUser storage _user2 = users[levels_users[m][n]];\r\n\t\t\t\tif(_user2.check_level > 0 && _user2.deposit_time > 0)\r\n\t\t\t\t{\t\r\n\t\t\t\t\t_user2.level_bonus =_user2.level_bonus.add(_levels_bonus_num[_user2.check_level-1]);\r\n\t\t\t\t\t\r\n\t\t\t\t\temit LevelPayout(levels_users[m][n], _addr, _levels_bonus_num[_user2.check_level-1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _gambling_pool_bonus(address _addr, uint _amount) private {\r\n\t\tif(now >= gambling_pool_time + GAMBLING_POOL_CYCLE)\r\n\t\t{\r\n\t\t\tif(gambling_pool > 0)\r\n\t\t\t{\r\n\t\t\t\tuint _total_deposit = 0;\r\n\t\t\t\tfor(uint16 i=0; i<gambling_pool_address.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(gambling_pool_address[i] != address(0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_total_deposit = _total_deposit.add(users[gambling_pool_address[i]].deposit_amount);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\taddress _first_address;\r\n\t\t\t\tuint _remaining = gambling_pool;\r\n\t\t\t\tuint _bonus;\r\n\t\t\t\tfor(uint16 j=0; j<gambling_pool_address.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(gambling_pool_address[j] != address(0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    if(_first_address == address(0))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_first_address = gambling_pool_address[j];\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_bonus = users[gambling_pool_address[j]].deposit_amount.mul(gambling_pool).div(_total_deposit);\r\n\t\t\t\t\t\t_remaining = _remaining.sub(_bonus);\r\n\t\t\t\t\t\tgambling_pool_address[j].transfer(_bonus);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(_first_address != address(0))\r\n\t\t\t\t{\r\n\t\t\t\t\t_first_address.transfer(_remaining);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgambling_pool_time = uint40(now);\r\n\t\t\tgambling_pool = 0;\r\n\t\t\tgambling_pool_address_pos = 0;\r\n\t\t\tfor(uint16 k=0; k<gambling_pool_address.length; k++)\r\n\t\t\t{\r\n\t\t\t\tgambling_pool_address[k] = address(0);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tgambling_pool_time =  uint40((uint(gambling_pool_time)).add(_amount.div(0.1 ether).mul(3600).div(10)));\r\n\t\t\tif(gambling_pool_time > uint40(now))\r\n\t\t\t{\r\n\t\t\t\tgambling_pool_time = uint40(now);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(gambling_pool < 1000 ether)\r\n\t\t{\r\n\t\t\tgambling_pool = gambling_pool.add(_amount.div(100));\r\n\t\t\tgambling_pool = gambling_pool > 1000 ether ? 1000 ether : gambling_pool;\r\n\t\t}\r\n\t\tgambling_pool_address[gambling_pool_address_pos] = _addr;\r\n\t\tgambling_pool_address_pos ++;\r\n\t\tif(gambling_pool_address_pos == gambling_pool_address.length)\r\n\t\t{\r\n\t\t\tgambling_pool_address_pos = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _deposit(address _addr, uint _amount) private {\r\n\t\trequire(users[_addr].deposit_time == 0);\r\n\t\trequire(_amount >= users[_addr].deposit_amount);\r\n\t\tif(total_deposit < 20000 ether)\r\n\t\t{\r\n\t\t\trequire(_amount == 0.5 ether || _amount == 1 ether || _amount == 3 ether || _amount == 5 ether);\r\n\t\t}else\r\n\t\t{\r\n\t\t\tif(total_deposit < 50000 ether)\r\n\t\t\t{\r\n\t\t\t\trequire(_amount == 0.5 ether || _amount == 1 ether || _amount == 3 ether || _amount == 5 ether || (_amount >= 10 ether && _amount <= 29 ether && _amount % 1 ether == 0));\r\n\t\t\t}else{\r\n\t\t\t\trequire(_amount == 0.5 ether || _amount == 1 ether || _amount == 3 ether || _amount == 5 ether || (_amount >= 10 ether && _amount <= 49 ether && _amount % 1 ether == 0));\r\n\t\t\t}\r\n\t\t}\r\n        users[_addr].deposit_amount = _amount;\r\n        users[_addr].deposit_time = uint40(now);\r\n        users[_addr].total_deposits = users[_addr].total_deposits.add(_amount.mul(100).div(1 ether));\r\n\t\ttotal_deposit = total_deposit.add(_amount);\r\n        emit NewDeposit(_addr, _amount);\r\n\t\t\r\n\t\toperate_bonuses[0] = operate_bonuses[0].add(_amount.div(100));\r\n\t\toperate_bonuses[1] = operate_bonuses[1].add(_amount.div(100));\r\n\t\toperate_bonuses[2] = operate_bonuses[2].add(_amount.div(100));\r\n\r\n\t\taddress _upline = _addr;\r\n        for(uint8 i=0; i < ref_bonuses.length; i++)\r\n\t\t{\r\n\t\t\t_upline = users[_upline].upline;\r\n\t\t    \r\n\t\t\tif(_upline == address(0)) break;\r\n\t\t\tif(users[_upline].deposit_time > 0 && users[_upline].referrals >= ref_nums[i])\r\n\t\t\t{\r\n\t\t\t\tuint _upline_amount = users[_upline].deposit_amount > _amount? _amount:users[_upline].deposit_amount;\r\n\t\t\t\tusers[_upline].invite_bonus = users[_upline].invite_bonus.add(_upline_amount.mul(ref_bonuses[i]).div(100));\r\n\t\t\t\temit InvitePayout(_upline, _addr, _upline_amount.mul(ref_bonuses[i]).div(100));\r\n\t\t\t}\r\n\r\n\t\t\tif(users[_upline].check_time != 0)\r\n\t\t\t{\r\n\t\t\t\tif(uint40(now) < users[_upline].check_time + CHECK_CYCLE)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(uint40(now) >= users[_upline].check_time)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tuint8 _current_check_level = 0;\r\n\t\t\t\t\t\tusers[_upline].check_invite_deposits += _amount;\r\n\t\t\t\t\t\tfor(uint8 j= (uint8)(levels_check_invite_deposits.length); j>0; j--)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(users[_upline].check_invite_deposits >= levels_check_invite_deposits[j-1])\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t_current_check_level = j > users[_upline].level ? users[_upline].level : j;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(_current_check_level > users[_upline].check_level)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tusers[_upline].check_time = uint40(now);\r\n\t\t\t\t\t\t\tusers[_upline].check_level = _current_check_level;\r\n\t\t\t\t\t\t\tusers[_upline].check_invite_deposits = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(_current_check_level == users[_upline].level)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tusers[_upline].check_time = users[_upline].check_time + CHECK_CYCLE;\r\n\t\t\t\t\t\t\tusers[_upline].check_level = users[_upline].level;\r\n\t\t\t\t\t\t\tusers[_upline].check_invite_deposits = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tusers[_upline].check_level = 0;\r\n\t\t\t\t\tfor(uint8 p = (uint8)(levels_check_invite_deposits.length); p > 0; p--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(users[_upline].check_invite_deposits >= levels_check_invite_deposits[p-1])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tusers[_upline].check_level = p > users[_upline].level ? users[_upline].level : p;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuint40 _old_time = users[_upline].check_time;\r\n\t\t\t\t\tusers[_upline].check_time = users[_upline].check_time + (uint40)(now.sub(users[_upline].check_time).div(CHECK_CYCLE).mul(CHECK_CYCLE));\r\n\t\t\t\t\tusers[_upline].check_invite_deposits = _amount;\r\n\t\t\t\t\tif(users[_upline].check_time - _old_time > CHECK_CYCLE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tusers[_upline].check_level = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tusers[_upline].total_invite_deposits = users[_upline].total_invite_deposits.add(_amount);\r\n\t\t\t\t\r\n\t\t\tif(users[_upline].referrals >= 10)\r\n\t\t\t{\r\n\t\t\t\tfor(uint8 g=(uint8)(levels_invite_deposits.length); g>0; g--)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(users[_upline].total_invite_deposits >= levels_invite_deposits[g-1] && users[_upline].level < g)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlevels_users[g].push(_upline);\r\n\t\t\t\t\t\tif(users[_upline].level > 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(uint k=0; k<levels_users[users[_upline].level].length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(levels_users[users[_upline].level][k] == _upline && levels_users[users[_upline].level].length>1)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlevels_users[users[_upline].level][k] = levels_users[users[_upline].level][levels_users[users[_upline].level].length - 1];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete levels_users[users[_upline].level][levels_users[users[_upline].level].length - 1];\r\n\t\t\t\t\t\t\tlevels_users[users[_upline].level].length--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tusers[_upline].level = g;\r\n\t\t\t\t\t\tusers[_upline].check_time = uint40(now);\r\n\t\t\t\t\t\tusers[_upline].check_level = g;\r\n\t\t\t\t\t\tusers[_upline].check_invite_deposits = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t_levels_bonus(_addr, _amount);\r\n\r\n\t\t_gambling_pool_bonus(_addr, _amount);\r\n    }\r\n\t\r\n\tfunction deposit(address _upline) payable public{\r\n\t\tif(_upline != address(0) && users[msg.sender].upline == address(0) && users[msg.sender].deposit_amount == 0)\r\n\t\t{\r\n\t\t\t_setUpline(msg.sender, _upline);\r\n\t\t}\r\n        \r\n        _deposit(msg.sender, msg.value);\r\n    }\r\n\t\r\n\tfunction user_benefit() public{\r\n\t\trequire(users[msg.sender].deposit_time > 0);\r\n\t    InvestParam memory _investParam;\r\n\t\tif(users[msg.sender].deposit_amount <= 5 ether)\r\n\t\t{\r\n\t\t\t_investParam = investParams[users[msg.sender].deposit_amount];\r\n\t\t}else if(users[msg.sender].deposit_amount <= 29 ether)\r\n\t\t{\r\n\t\t\t_investParam = investParams[10 ether];\r\n\t\t}else{\r\n\t\t\t_investParam = investParams[30 ether];\r\n\t\t}\r\n\t\tuint _maxPayout = users[msg.sender].deposit_amount.mul(_investParam.outMultiple).div(10);\r\n\t\tuint _releaseNum = (now - users[msg.sender].deposit_time).div(RELEASE_CYCLE);\r\n\t\tuint _currentReleaseNum = _releaseNum - users[msg.sender].release_num;\r\n\t\tuint _releasePayout = users[msg.sender].deposit_amount.mul(_investParam.releaseRate).div(1000).mul(_currentReleaseNum);\r\n\t\tuint _currentPayout = _releasePayout.add(users[msg.sender].invite_bonus);\r\n\t\t\r\n\t\tif(_currentPayout > 0)\r\n\t\t{\r\n\t\t\tif(users[msg.sender].payouts.add(_currentPayout) >= _maxPayout)\r\n\t\t\t{\r\n\t\t\t\t_currentPayout = _maxPayout.sub(users[msg.sender].payouts);\r\n\t\t\t\tusers[msg.sender].release_num = 0;\r\n\t\t\t\tusers[msg.sender].payouts = 0;\r\n\t\t\t\tusers[msg.sender].invite_bonus = 0;\r\n\t\t\t\tusers[msg.sender].deposit_time = 0;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tusers[msg.sender].release_num = _releaseNum;\r\n\t\t\t\tusers[msg.sender].payouts = users[msg.sender].payouts.add(_currentPayout);\r\n\t\t\t\tusers[msg.sender].invite_bonus = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(users[msg.sender].level_bonus > 0)\r\n\t\t{\r\n\t\t\t_currentPayout = _currentPayout.add(users[msg.sender].level_bonus);\r\n\t\t\tusers[msg.sender].level_bonus = 0;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\trequire(_currentPayout > 0);\r\n\t\tusers[msg.sender].total_payouts = users[msg.sender].total_payouts.add(_currentPayout);\r\n\t\tuint _contractSum = address(this).balance.sub(gambling_pool).sub(operate_bonuses[0]).sub(operate_bonuses[1]).sub(operate_bonuses[2]);\r\n\t\trequire(_contractSum >= _currentPayout);\r\n\t\tmsg.sender.transfer(_currentPayout);\r\n\t}\r\n\t\r\n\tfunction operate_benefit() public{\r\n\t\trequire(msg.sender == operate_address[0] || msg.sender == operate_address[1] || msg.sender == operate_address[2]);\r\n\t    uint8 index;\r\n\t\tif(msg.sender == operate_address[0])\r\n\t\t{\r\n\t\t\tindex = 0;\r\n\t\t}else if(msg.sender == operate_address[1])\r\n\t\t{\r\n\t\t\tindex = 1;\r\n\t\t}\r\n\t\telse if(msg.sender == operate_address[2])\r\n\t\t{\r\n\t\t\tindex = 2;\r\n\t\t}else{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(operate_bonuses[index] > 0)\r\n\t\t{\r\n\t\t\tmsg.sender.transfer(operate_bonuses[index]);\r\n\t\t\toperate_bonuses[index] = 0;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction pledge_sfc(uint _amount) public{\r\n\t\trequire(total_deposit >= 500000 ether);\r\n\t\trequire(_amount % 10000 == 0 && users[msg.sender].total_deposits >= _amount && _amount > 0);\r\n\t\tusers[msg.sender].total_deposits = users[msg.sender].total_deposits.sub(_amount);\r\n\t\tuint _contractSum = address(this).balance.sub(gambling_pool).sub(operate_bonuses[0]).sub(operate_bonuses[1]).sub(operate_bonuses[2]);\r\n\t\trequire(_contractSum >= _amount.div(10000).mul(1 ether));\r\n\t\tmsg.sender.transfer(_amount.div(10000).mul(1 ether));\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getGamblingPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGamblingPoolAddressPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledge_sfc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"user_benefit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"operate_benefit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSFC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getLevelsUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperateBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvitePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LevelPayout\",\"type\":\"event\"}]","ContractName":"Sunflower","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c79413afe6cb4aae56f46703efd4381cc4dbfd872415db39a82da21b31d22193"}]}