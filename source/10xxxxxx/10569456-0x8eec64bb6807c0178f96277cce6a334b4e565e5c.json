{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // `balances` is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n      // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    /// @notice Constructor to create a Reputation\r\n    constructor(\r\n    ) public\r\n    {\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n  ////////////////\r\n  // Query balance and totalSupply in History\r\n  ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n      /// @param _owner The address from which the balance will be retrieved\r\n      /// @param _blockNumber The block number when the balance is queried\r\n      /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\r\n      /// @param _blockNumber The block number when the totalSupply is queried\r\n      /// @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns `_amount` reputation from `_owner`\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n      ///  `totalSupplyHistory`\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/DAOToken.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply().add(_amount) <= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION & NO WARRANTY\r\n\r\nREFERENCE & RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/Avatar.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-call-value\r\n        (success, returnValue) = _contract.call.value(_value)(_data);\r\n        emit GenericCall(_contract, _data, _value, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: @daostack/arc/contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: @daostack/arc/contracts/controller/ControllerInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    returns(bool, bytes memory);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n\r\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint256 globalConstraintsPre count.\r\n     * @return uint256 globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\r\n}\r\n\r\n// File: ../contracts/dao/schemes/SchemeGuard.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/* @dev abstract contract for ensuring that schemes have been registered properly\r\n * Allows setting zero Avatar in situations where the Avatar hasn't been created yet\r\n */\r\ncontract SchemeGuard is Ownable {\r\n    Avatar avatar;\r\n    ControllerInterface internal controller = ControllerInterface(0);\r\n\r\n    /** @dev Constructor. only sets controller if given avatar is not null.\r\n     * @param _avatar The avatar of the DAO.\r\n     */\r\n    constructor(Avatar _avatar) public {\r\n        avatar = _avatar;\r\n\r\n        if (avatar != Avatar(0)) {\r\n            controller = ControllerInterface(avatar.owner());\r\n        }\r\n    }\r\n\r\n    /** @dev modifier to check if caller is avatar\r\n     */\r\n    modifier onlyAvatar() {\r\n        require(address(avatar) == msg.sender, \"only Avatar can call this method\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if scheme is registered\r\n     */\r\n    modifier onlyRegistered() {\r\n        require(isRegistered(), \"Scheme is not registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if scheme is not registered\r\n     */\r\n    modifier onlyNotRegistered() {\r\n        require(!isRegistered(), \"Scheme is registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev modifier to check if call is a scheme that is registered\r\n     */\r\n    modifier onlyRegisteredCaller() {\r\n        require(isRegistered(msg.sender), \"Calling scheme is not registered\");\r\n        _;\r\n    }\r\n\r\n    /** @dev Function to set a new avatar and controller for scheme\r\n     * can only be done by owner of scheme\r\n     */\r\n    function setAvatar(Avatar _avatar) public onlyOwner {\r\n        avatar = _avatar;\r\n        controller = ControllerInterface(avatar.owner());\r\n    }\r\n\r\n    /** @dev function to see if an avatar has been set and if this scheme is registered\r\n     * @return true if scheme is registered\r\n     */\r\n    function isRegistered() public view returns (bool) {\r\n        return isRegistered(address(this));\r\n    }\r\n\r\n    /** @dev function to see if an avatar has been set and if this scheme is registered\r\n     * @return true if scheme is registered\r\n     */\r\n    function isRegistered(address scheme) public view returns (bool) {\r\n        require(avatar != Avatar(0), \"Avatar is not set\");\r\n\r\n        if (!(controller.isSchemeRegistered(scheme, address(avatar)))) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: ../contracts/identity/IdentityAdminRole.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Contract managing the identity admin role\r\n */\r\ncontract IdentityAdminRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event IdentityAdminAdded(address indexed account);\r\n    event IdentityAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private IdentityAdmins;\r\n\r\n    /* @dev constructor. Adds caller as an admin\r\n     */\r\n    constructor() internal {\r\n        _addIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /* @dev Modifier to check if caller is an admin\r\n     */\r\n    modifier onlyIdentityAdmin() {\r\n        require(isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if account is identity admin\r\n     * @param account Account to check\r\n     * @return Boolean indicating if account is identity admin\r\n     */\r\n    function isIdentityAdmin(address account) public view returns (bool) {\r\n        return IdentityAdmins.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a identity admin account. Is only callable by owner.\r\n     * @param account Address to be added\r\n     * @return true if successful\r\n     */\r\n    function addIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _addIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a identity admin account. Is only callable by owner.\r\n     * @param account Address to be removed\r\n     * @return true if successful\r\n     */\r\n    function removeIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _removeIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to renounce their role\r\n     */\r\n    function renounceIdentityAdmin() public {\r\n        _removeIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of addIdentityAdmin\r\n     */\r\n    function _addIdentityAdmin(address account) internal {\r\n        IdentityAdmins.add(account);\r\n        emit IdentityAdminAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of removeIdentityAdmin\r\n     */\r\n    function _removeIdentityAdmin(address account) internal {\r\n        IdentityAdmins.remove(account);\r\n        emit IdentityAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: ../contracts/identity/Identity.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* @title Identity contract responsible for whitelisting\r\n * and keeping track of amount of whitelisted users\r\n */\r\ncontract Identity is IdentityAdminRole, SchemeGuard, Pausable {\r\n    using Roles for Roles.Role;\r\n    using SafeMath for uint256;\r\n\r\n    Roles.Role private blacklist;\r\n    Roles.Role private whitelist;\r\n    Roles.Role private contracts;\r\n\r\n    uint256 public whitelistedCount = 0;\r\n    uint256 public whitelistedContracts = 0;\r\n    uint256 public authenticationPeriod = 14;\r\n\r\n    mapping(address => uint256) public dateAuthenticated;\r\n    mapping(address => uint256) public dateAdded;\r\n\r\n    mapping(address => string) public addrToDID;\r\n    mapping(bytes32 => address) public didHashToAddress;\r\n\r\n    event BlacklistAdded(address indexed account);\r\n    event BlacklistRemoved(address indexed account);\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    event ContractAdded(address indexed account);\r\n    event ContractRemoved(address indexed account);\r\n\r\n    constructor() public SchemeGuard(Avatar(0)) {}\r\n\r\n    /* @dev Sets a new value for authenticationPeriod.\r\n     * Can only be called by Identity Administrators.\r\n     * @param period new value for authenticationPeriod\r\n     */\r\n    function setAuthenticationPeriod(uint256 period) public onlyOwner whenNotPaused {\r\n        authenticationPeriod = period;\r\n    }\r\n\r\n    /* @dev Sets the authentication date of `account`\r\n     * to the current time.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to change its auth date\r\n     */\r\n    function authenticate(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        dateAuthenticated[account] = now;\r\n    }\r\n\r\n    /* @dev Adds an address as whitelisted.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to add as whitelisted\r\n     */\r\n    function addWhitelisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Adds an address as whitelisted under a specific ID\r\n     * @param account The address to add\r\n     * @param did the ID to add account under\r\n     */\r\n    function addWhitelistedWithDID(address account, string memory did)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _addWhitelistedWithDID(account, did);\r\n    }\r\n\r\n    /* @dev Removes an address as whitelisted.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to remove as whitelisted\r\n     */\r\n    function removeWhitelisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Renounces message sender from whitelisted\r\n     */\r\n    function renounceWhitelisted() public whenNotPaused {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    /* @dev Returns true if given address has been added to whitelist\r\n     * @param account the address to check\r\n     * @return a bool indicating weather the address is present in whitelist\r\n     */\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        uint256 daysSinceAuthentication = (now.sub(dateAuthenticated[account])) / 1 days;\r\n        return\r\n            (daysSinceAuthentication <= authenticationPeriod) && whitelist.has(account);\r\n    }\r\n\r\n    /* @dev Function that gives the date the given user was added\r\n     * @param account The address to check\r\n     * @return The date the address was added\r\n     */\r\n    function lastAuthenticated(address account) public view returns (uint256) {\r\n        return dateAuthenticated[account];\r\n    }\r\n\r\n    // /**\r\n    //  *\r\n    //  * @dev Function to transfer whitelisted privilege to another address\r\n    //  * relocates did of sender to give address\r\n    //  * @param account The address to transfer to\r\n    //  */\r\n    // function transferAccount(address account) public whenNotPaused {\r\n    //     ERC20 token = avatar.nativeToken();\r\n    //     require(!isBlacklisted(account), \"Cannot transfer to blacklisted\");\r\n    //     require(token.balanceOf(account) == 0, \"Account is already in use\");\r\n    //     require(isWhitelisted(msg.sender), \"Requester need to be whitelisted\");\r\n\r\n    //     require(\r\n    //         keccak256(bytes(addrToDID[account])) == keccak256(bytes(\"\")),\r\n    //         \"address already has DID\"\r\n    //     );\r\n\r\n    //     string memory did = addrToDID[msg.sender];\r\n    //     bytes32 pHash = keccak256(bytes(did));\r\n\r\n    //     uint256 balance = token.balanceOf(msg.sender);\r\n    //     token.transferFrom(msg.sender, account, balance);\r\n    //     _removeWhitelisted(msg.sender);\r\n    //     _addWhitelisted(account);\r\n    //     addrToDID[account] = did;\r\n    //     didHashToAddress[pHash] = account;\r\n    // }\r\n\r\n    /* @dev Adds an address to blacklist.\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to add as blacklisted\r\n     */\r\n    function addBlacklisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        blacklist.add(account);\r\n        emit BlacklistAdded(account);\r\n    }\r\n\r\n    /* @dev Removes an address from blacklist\r\n     * Can only be called by Identity Administrators.\r\n     * @param account address to remove as blacklisted\r\n     */\r\n    function removeBlacklisted(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        blacklist.remove(account);\r\n        emit BlacklistRemoved(account);\r\n    }\r\n\r\n    /* @dev Function to add a Contract to list of contracts\r\n     * @param account The address to add\r\n     */\r\n    function addContract(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        require(isContract(account), \"Given address is not a contract\");\r\n        contracts.add(account);\r\n        _addWhitelisted(account);\r\n\r\n        emit ContractAdded(account);\r\n    }\r\n\r\n    /* @dev Function to remove a Contract from list of contracts\r\n     * @param account The address to add\r\n     */\r\n    function removeContract(address account)\r\n        public\r\n        onlyRegistered\r\n        onlyIdentityAdmin\r\n        whenNotPaused\r\n    {\r\n        contracts.remove(account);\r\n        _removeWhitelisted(account);\r\n\r\n        emit ContractRemoved(account);\r\n    }\r\n\r\n    /* @dev Function to check if given contract is on list of contracts.\r\n     * @param address to check\r\n     * @return a bool indicating if address is on list of contracts\r\n     */\r\n    function isDAOContract(address account) public view returns (bool) {\r\n        return contracts.has(account);\r\n    }\r\n\r\n    /* @dev Internal function to add to whitelisted\r\n     * @param account the address to add\r\n     */\r\n    function _addWhitelisted(address account) internal {\r\n        whitelist.add(account);\r\n\r\n        whitelistedCount += 1;\r\n        dateAdded[account] = now;\r\n        dateAuthenticated[account] = now;\r\n\r\n        if (isContract(account)) {\r\n            whitelistedContracts += 1;\r\n        }\r\n\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    /* @dev Internal whitelisting with did function.\r\n     * @param account the address to add\r\n     * @param did the id to register account under\r\n     */\r\n    function _addWhitelistedWithDID(address account, string memory did) internal {\r\n        bytes32 pHash = keccak256(bytes(did));\r\n        require(didHashToAddress[pHash] == address(0), \"DID already registered\");\r\n\r\n        addrToDID[account] = did;\r\n        didHashToAddress[pHash] = account;\r\n\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    /* @dev Internal function to remove from whitelisted\r\n     * @param account the address to add\r\n     */\r\n    function _removeWhitelisted(address account) internal {\r\n        whitelist.remove(account);\r\n\r\n        whitelistedCount -= 1;\r\n        delete dateAuthenticated[account];\r\n\r\n        if (isContract(account)) {\r\n            whitelistedContracts -= 1;\r\n        }\r\n\r\n        string memory did = addrToDID[account];\r\n        bytes32 pHash = keccak256(bytes(did));\r\n\r\n        delete dateAuthenticated[account];\r\n        delete addrToDID[account];\r\n        delete didHashToAddress[pHash];\r\n\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n\r\n    /* @dev Returns true if given address has been added to the blacklist\r\n     * @param account the address to check\r\n     * @return a bool indicating weather the address is present in the blacklist\r\n     */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklist.has(account);\r\n    }\r\n\r\n    /* @dev Function to see if given address is a contract\r\n     * @return true if address is a contract\r\n     */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n// File: ../contracts/identity/IdentityGuard.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/* @title The IdentityGuard contract\r\n * @dev Contract containing an identity and\r\n * modifiers to ensure proper access\r\n */\r\ncontract IdentityGuard is Ownable {\r\n    Identity public identity;\r\n\r\n    /* @dev Constructor. Checks if identity is a zero address\r\n     * @param _identity The identity contract.\r\n     */\r\n    constructor(Identity _identity) public {\r\n        require(_identity != Identity(0), \"Supplied identity is null\");\r\n        identity = _identity;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be not blacklisted\r\n     */\r\n    modifier onlyNotBlacklisted() {\r\n        require(!identity.isBlacklisted(msg.sender), \"Caller is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be not blacklisted\r\n     * @param _account The address to be checked\r\n     */\r\n    modifier requireNotBlacklisted(address _account) {\r\n        require(!identity.isBlacklisted(_account), \"Receiver is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be whitelisted\r\n     */\r\n    modifier onlyWhitelisted() {\r\n        require(identity.isWhitelisted(msg.sender), \"is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be whitelisted\r\n     * @param _account the given address\r\n     */\r\n    modifier requireWhitelisted(address _account) {\r\n        require(identity.isWhitelisted(_account), \"is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to be an approved DAO contract\r\n     */\r\n    modifier onlyDAOContract() {\r\n        require(identity.isDAOContract(msg.sender), \"is not whitelisted contract\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the given address to be whitelisted\r\n     * @param _account the given address\r\n     */\r\n    modifier requireDAOContract(address _contract) {\r\n        require(identity.isDAOContract(_contract), \"is not whitelisted contract\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires the sender to have been whitelisted\r\n     * before or on the given date\r\n     * @param date The time sender must have been added before\r\n     */\r\n    modifier onlyAddedBefore(uint256 date) {\r\n        require(\r\n            identity.lastAuthenticated(msg.sender) <= date,\r\n            \"Was not added within period\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* @dev Modifier that requires sender to be an identity admin\r\n     */\r\n    modifier onlyIdentityAdmin() {\r\n        require(identity.isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Allows owner to set a new identity contract if\r\n     * the given identity contract has been registered as a scheme\r\n     */\r\n    function setIdentity(Identity _identity) public onlyOwner {\r\n        require(_identity.isRegistered(), \"Identity is not registered\");\r\n        identity = _identity;\r\n    }\r\n}\r\n\r\n// File: ../contracts/dao/schemes/FeeFormula.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Fee formula abstract contract\r\n */\r\ncontract AbstractFees is SchemeGuard {\r\n    constructor() public SchemeGuard(Avatar(0)) {}\r\n\r\n    function getTxFees(\r\n        uint256 _value,\r\n        address _sender,\r\n        address _recipient\r\n    ) public view returns (uint256, bool);\r\n}\r\n\r\n/**\r\n * @title Fee formula contract\r\n * contract that provides a function to calculate\r\n * fees as a percentage of any given value\r\n */\r\ncontract FeeFormula is AbstractFees {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public percentage;\r\n    bool public constant senderPays = false;\r\n\r\n    /**\r\n     * @dev Constructor. Requires the given percentage parameter\r\n     * to be less than 100.\r\n     * @param _percentage the percentage to calculate fees of\r\n     */\r\n    constructor(uint256 _percentage) public {\r\n        require(_percentage < 100, \"Percentage should be <100\");\r\n        percentage = _percentage;\r\n    }\r\n\r\n    /**  @dev calculates the fee of given value.\r\n     * @param _value the value of the transaction to calculate fees from\r\n     * @param _sender address sending.\r\n     *  @param _recipient address receiving.\r\n     * @return the transactional fee for given value\r\n     */\r\n    function getTxFees(\r\n        uint256 _value,\r\n        address _sender,\r\n        address _recipient\r\n    ) public view returns (uint256, bool) {\r\n        return (_value.mul(percentage).div(100), senderPays);\r\n    }\r\n}\r\n\r\n// File: ../contracts/dao/schemes/FormulaHolder.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n/* @title Contract in charge of setting registered fee formula schemes to contract\r\n */\r\ncontract FormulaHolder is Ownable {\r\n    AbstractFees public formula;\r\n\r\n    /* @dev Constructor. Requires that given formula is a valid contract.\r\n     * @param _formula The fee formula contract.\r\n     */\r\n    constructor(AbstractFees _formula) public {\r\n        require(_formula != AbstractFees(0), \"Supplied formula is null\");\r\n        formula = _formula;\r\n    }\r\n\r\n    /* @dev Sets the given fee formula contract. Is only callable by owner.\r\n     * Reverts if formula has not been registered by DAO.\r\n     * @param _formula the new fee formula scheme\r\n     */\r\n    function setFormula(AbstractFees _formula) public onlyOwner {\r\n        _formula.isRegistered();\r\n        formula = _formula;\r\n    }\r\n}\r\n\r\n// File: ../contracts/token/ERC677/ERC677.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n/* @title ERC677 interface\r\n */\r\ninterface ERC677 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: ../contracts/token/ERC677/ERC677Receiver.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n/* @title ERC677Receiver interface\r\n */\r\ninterface ERC677Receiver {\r\n    function onTokenTransfer(\r\n        address _from,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n// File: ../contracts/token/ERC677Token.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/* @title ERC677Token contract.\r\n */\r\ncontract ERC677Token is ERC677, DAOToken, ERC20Pausable {\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap\r\n    ) public DAOToken(_name, _symbol, _cap) {}\r\n\r\n    /**\r\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @param _data The extra data to be passed to the receiving contract.\r\n     * @return true if transfer is successful\r\n     */\r\n    function _transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) internal whenNotPaused returns (bool) {\r\n        bool res = super.transfer(_to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n\r\n        if (isContract(_to)) {\r\n            require(contractFallback(_to, _value, _data), \"Contract fallback failed\");\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /* @dev Contract fallback function. Is called if transferAndCall is called\r\n     * to a contract\r\n     */\r\n    function contractFallback(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        ERC677Receiver receiver = ERC677Receiver(_to);\r\n        require(\r\n            receiver.onTokenTransfer(msg.sender, _value, _data),\r\n            \"Contract Fallback failed\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /* @dev Function to check if given address is a contract\r\n     * @param _addr Address to check\r\n     * @return true if given address is a contract\r\n     */\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: ../contracts/token/ERC677BridgeToken.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\ncontract ERC677BridgeToken is ERC677Token, MinterRole {\r\n    address public bridgeContract;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap\r\n    ) public ERC677Token(_name, _symbol, _cap) {}\r\n\r\n    function setBridgeContract(address _bridgeContract) public onlyMinter {\r\n        require(\r\n            _bridgeContract != address(0) && isContract(_bridgeContract),\r\n            \"Invalid bridge contract\"\r\n        );\r\n        bridgeContract = _bridgeContract;\r\n    }\r\n}\r\n\r\n// File: ../contracts/token/GoodDollar.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The GoodDollar ERC677 token contract\r\n */\r\ncontract GoodDollar is ERC677BridgeToken, IdentityGuard, FormulaHolder {\r\n    address feeRecipient;\r\n\r\n    // Overrides hard-coded decimal in DAOToken\r\n    uint256 public constant decimals = 2;\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param _name The name of the token\r\n     * @param _symbol The symbol of the token\r\n     * @param _cap the cap of the token. no cap if 0\r\n     * @param _formula the fee formula contract\r\n     * @param _identity the identity contract\r\n     * @param _feeRecipient the address that receives transaction fees\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _cap,\r\n        AbstractFees _formula,\r\n        Identity _identity,\r\n        address _feeRecipient\r\n    )\r\n        public\r\n        ERC677BridgeToken(_name, _symbol, _cap)\r\n        IdentityGuard(_identity)\r\n        FormulaHolder(_formula)\r\n    {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Processes fees from given value and sends\r\n     * remainder to given address\r\n     * @param to the address to be sent to\r\n     * @param value the value to be processed and then\r\n     * transferred\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        uint256 bruttoValue = processFees(msg.sender, to, value);\r\n        return super.transfer(to, bruttoValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified\r\n     * amount of tokens on behalf of msg.sender\r\n     * @param spender The address which will spend the funds\r\n     * @param value The amount of tokens to be spent\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from The address which you want to send tokens from\r\n     * @param to The address which you want to transfer to\r\n     * @param value the amount of tokens to be transferred\r\n     * @return a boolean that indicates if the operation was successful\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public returns (bool) {\r\n        uint256 bruttoValue = processFees(from, to, value);\r\n        return super.transferFrom(from, to, bruttoValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Processes transfer fees and calls ERC677Token transferAndCall function\r\n     * @param to address to transfer to\r\n     * @param value the amount to transfer\r\n     * @param data The data to pass to transferAndCall\r\n     * @return a bool indicating if transfer function succeeded\r\n     */\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bool) {\r\n        uint256 bruttoValue = processFees(msg.sender, to, value);\r\n        return super._transferAndCall(to, bruttoValue, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Minting function\r\n     * @param to the address that will receive the minted tokens\r\n     * @param value the amount of tokens to mint\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function mint(address to, uint256 value)\r\n        public\r\n        onlyMinter\r\n        requireNotBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        if (cap > 0) {\r\n            require(totalSupply().add(value) <= cap, \"Cannot increase supply beyond cap\");\r\n        }\r\n        super._mint(to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public onlyNotBlacklisted {\r\n        super.burn(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value)\r\n        public\r\n        onlyNotBlacklisted\r\n        requireNotBlacklisted(from)\r\n    {\r\n        super.burnFrom(from, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allows a spender\r\n     * @param spender The address which will spend the funds\r\n     * @param addedValue The amount of tokens to increase the allowance by\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender\r\n     * @param spender The address which will spend the funds\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by\r\n     * @return a boolean that indicated if the operation was successful\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current transaction fees\r\n     * @return an uint256 that represents\r\n     * the current transaction fees\r\n     */\r\n    function getFees(uint256 value) public view returns (uint256, bool) {\r\n        return formula.getTxFees(value, address(0), address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current transaction fees\r\n     * @return an uint256 that represents\r\n     * the current transaction fees\r\n     */\r\n    function getFees(\r\n        uint256 value,\r\n        address sender,\r\n        address recipient\r\n    ) public view returns (uint256, bool) {\r\n        return formula.getTxFees(value, sender, recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address that receives the transactional fees.\r\n     * can only be called by owner\r\n     * @param _feeRecipient The new address to receive transactional fees\r\n     */\r\n    function setFeeRecipient(address _feeRecipient) public onlyOwner {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Sends transactional fees to feeRecipient address from given address\r\n     * @param account The account that sends the fees\r\n     * @param value The amount to subtract fees from\r\n     * @return an uint256 that represents the given value minus the transactional fees\r\n     */\r\n    function processFees(\r\n        address account,\r\n        address recipient,\r\n        uint256 value\r\n    ) internal returns (uint256) {\r\n        (uint256 txFees, bool senderPays) = getFees(value, account, recipient);\r\n        if (txFees > 0 && !identity.isDAOContract(msg.sender)) {\r\n            require(\r\n                senderPays == false || value.add(txFees) <= balanceOf(account),\r\n                \"Not enough balance to pay TX fee\"\r\n            );\r\n            if (account == msg.sender) {\r\n                super.transfer(feeRecipient, txFees);\r\n            } else {\r\n                super.transferFrom(account, feeRecipient, txFees);\r\n            }\r\n\r\n            return senderPays ? value : value.sub(txFees);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n\r\n// File: ../contracts/DSMath.sol\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BancorFormula.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\ncontract BancorFormula {\r\n    using SafeMath for uint256;\r\n\r\n    uint16 public version = 6;\r\n\r\n    uint256 private constant ONE = 1;\r\n    uint32 private constant MAX_RATIO = 1000000;\r\n    uint8 private constant MIN_PRECISION = 32;\r\n    uint8 private constant MAX_PRECISION = 127;\r\n\r\n    /**\r\n     * Auto-generated via 'PrintIntScalingFactors.py'\r\n     */\r\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\r\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\r\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\r\n\r\n    /**\r\n     * Auto-generated via 'PrintLn2ScalingFactors.py'\r\n     */\r\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\r\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\r\n\r\n    /**\r\n     * Auto-generated via 'PrintFunctionOptimalLog.py' and 'PrintFunctionOptimalExp.py'\r\n     */\r\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\r\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\r\n\r\n    /**\r\n     * Auto-generated via 'PrintFunctionConstructor.py'\r\n     */\r\n    uint256[128] private maxExpArray;\r\n\r\n    constructor() public {\r\n        //  maxExpArray[  0] = 0x6bffffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  1] = 0x67ffffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  2] = 0x637fffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  3] = 0x5f6fffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  4] = 0x5b77ffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  5] = 0x57b3ffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  6] = 0x5419ffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  7] = 0x50a2ffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  8] = 0x4d517fffffffffffffffffffffffffffff;\r\n        //  maxExpArray[  9] = 0x4a233fffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 10] = 0x47165fffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 11] = 0x4429afffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 12] = 0x415bc7ffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 13] = 0x3eab73ffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 14] = 0x3c1771ffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 15] = 0x399e96ffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 16] = 0x373fc47fffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 17] = 0x34f9e8ffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 18] = 0x32cbfd5fffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 19] = 0x30b5057fffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 20] = 0x2eb40f9fffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 21] = 0x2cc8340fffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 22] = 0x2af09481ffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 23] = 0x292c5bddffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 24] = 0x277abdcdffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 25] = 0x25daf6657fffffffffffffffffffffffff;\r\n        //  maxExpArray[ 26] = 0x244c49c65fffffffffffffffffffffffff;\r\n        //  maxExpArray[ 27] = 0x22ce03cd5fffffffffffffffffffffffff;\r\n        //  maxExpArray[ 28] = 0x215f77c047ffffffffffffffffffffffff;\r\n        //  maxExpArray[ 29] = 0x1fffffffffffffffffffffffffffffffff;\r\n        //  maxExpArray[ 30] = 0x1eaefdbdabffffffffffffffffffffffff;\r\n        //  maxExpArray[ 31] = 0x1d6bd8b2ebffffffffffffffffffffffff;\r\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\r\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\r\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\r\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\r\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\r\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\r\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\r\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\r\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\r\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\r\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\r\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\r\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\r\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\r\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\r\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\r\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\r\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\r\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\r\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\r\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\r\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\r\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\r\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\r\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\r\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\r\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\r\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\r\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\r\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\r\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\r\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\r\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\r\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\r\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\r\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\r\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\r\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\r\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\r\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\r\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\r\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\r\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\r\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\r\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\r\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\r\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\r\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\r\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\r\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\r\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\r\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\r\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\r\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\r\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\r\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\r\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\r\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\r\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\r\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\r\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\r\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\r\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\r\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\r\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\r\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\r\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\r\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\r\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\r\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\r\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\r\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\r\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\r\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\r\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\r\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\r\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\r\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\r\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\r\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\r\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\r\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\r\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\r\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\r\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\r\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\r\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\r\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\r\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\r\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\r\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\r\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\r\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\r\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\r\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\r\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\r\n    }\r\n\r\n    /**\r\n     * @dev given a token supply, reserve balance, ratio and a deposit amount (in the reserve token),\r\n     * calculates the return for a given conversion (in the main token)\r\n     *\r\n     * Formula:\r\n     * Return = _supply * ((1 + _depositAmount / _reserveBalance) ^ (_reserveRatio / 1000000) - 1)\r\n     *\r\n     * @param _supply              token total supply\r\n     * @param _reserveBalance      total reserve balance\r\n     * @param _reserveRatio        reserve ratio, represented in ppm, 1-1000000\r\n     * @param _depositAmount       deposit amount, in reserve token\r\n     *\r\n     * @return purchase return amount\r\n     */\r\n    function calculatePurchaseReturn(\r\n        uint256 _supply,\r\n        uint256 _reserveBalance,\r\n        uint32 _reserveRatio,\r\n        uint256 _depositAmount\r\n    ) public view returns (uint256) {\r\n        // validate input\r\n        require(\r\n            _supply > 0 &&\r\n                _reserveBalance > 0 &&\r\n                _reserveRatio > 0 &&\r\n                _reserveRatio <= MAX_RATIO\r\n        );\r\n\r\n        // special case for 0 deposit amount\r\n        if (_depositAmount == 0) return 0;\r\n\r\n        // special case if the ratio = 100%\r\n        if (_reserveRatio == MAX_RATIO)\r\n            return _supply.mul(_depositAmount) / _reserveBalance;\r\n\r\n        uint256 result;\r\n        uint8 precision;\r\n        uint256 baseN = _depositAmount.add(_reserveBalance);\r\n        (result, precision) = power(baseN, _reserveBalance, _reserveRatio, MAX_RATIO);\r\n        uint256 temp = _supply.mul(result) >> precision;\r\n        return temp - _supply;\r\n    }\r\n\r\n    /**\r\n     * @dev given a token supply, reserve balance, ratio and a sell amount (in the main token),\r\n     * calculates the return for a given conversion (in the reserve token)\r\n     *\r\n     * Formula:\r\n     * Return = _reserveBalance * (1 - (1 - _sellAmount / _supply) ^ (1000000 / _reserveRatio))\r\n     *\r\n     * @param _supply              token total supply\r\n     * @param _reserveBalance      total reserve\r\n     * @param _reserveRatio        constant reserve Ratio, represented in ppm, 1-1000000\r\n     * @param _sellAmount          sell amount, in the token itself\r\n     *\r\n     * @return sale return amount\r\n     */\r\n    function calculateSaleReturn(\r\n        uint256 _supply,\r\n        uint256 _reserveBalance,\r\n        uint32 _reserveRatio,\r\n        uint256 _sellAmount\r\n    ) public view returns (uint256) {\r\n        // validate input\r\n        require(\r\n            _supply > 0 &&\r\n                _reserveBalance > 0 &&\r\n                _reserveRatio > 0 &&\r\n                _reserveRatio <= MAX_RATIO &&\r\n                _sellAmount <= _supply\r\n        );\r\n\r\n        // special case for 0 sell amount\r\n        if (_sellAmount == 0) return 0;\r\n\r\n        // special case for selling the entire supply\r\n        if (_sellAmount == _supply) return _reserveBalance;\r\n\r\n        // special case if the ratio = 100%\r\n        if (_reserveRatio == MAX_RATIO) return _reserveBalance.mul(_sellAmount) / _supply;\r\n\r\n        uint256 result;\r\n        uint8 precision;\r\n        uint256 baseD = _supply - _sellAmount;\r\n        (result, precision) = power(_supply, baseD, MAX_RATIO, _reserveRatio);\r\n        uint256 temp1 = _reserveBalance.mul(result);\r\n        uint256 temp2 = _reserveBalance << precision;\r\n        return (temp1 - temp2) / result;\r\n    }\r\n\r\n    /**\r\n     * @dev given two reserve balances/ratios and a sell amount (in the first reserve token),\r\n     * calculates the return for a conversion from the first reserve token to the second reserve token (in the second reserve token)\r\n     * note that prior to version 4, you should use 'calculateCrossConnectorReturn' instead\r\n     *\r\n     * Formula:\r\n     * Return = _toReserveBalance * (1 - (_fromReserveBalance / (_fromReserveBalance + _amount)) ^ (_fromReserveRatio / _toReserveRatio))\r\n     *\r\n     * @param _fromReserveBalance      input reserve balance\r\n     * @param _fromReserveRatio        input reserve ratio, represented in ppm, 1-1000000\r\n     * @param _toReserveBalance        output reserve balance\r\n     * @param _toReserveRatio          output reserve ratio, represented in ppm, 1-1000000\r\n     * @param _amount                  input reserve amount\r\n     *\r\n     * @return second reserve amount\r\n     */\r\n    function calculateCrossReserveReturn(\r\n        uint256 _fromReserveBalance,\r\n        uint32 _fromReserveRatio,\r\n        uint256 _toReserveBalance,\r\n        uint32 _toReserveRatio,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        // validate input\r\n        require(\r\n            _fromReserveBalance > 0 &&\r\n                _fromReserveRatio > 0 &&\r\n                _fromReserveRatio <= MAX_RATIO &&\r\n                _toReserveBalance > 0 &&\r\n                _toReserveRatio > 0 &&\r\n                _toReserveRatio <= MAX_RATIO\r\n        );\r\n\r\n        // special case for equal ratios\r\n        if (_fromReserveRatio == _toReserveRatio)\r\n            return _toReserveBalance.mul(_amount) / _fromReserveBalance.add(_amount);\r\n\r\n        uint256 result;\r\n        uint8 precision;\r\n        uint256 baseN = _fromReserveBalance.add(_amount);\r\n        (result, precision) = power(\r\n            baseN,\r\n            _fromReserveBalance,\r\n            _fromReserveRatio,\r\n            _toReserveRatio\r\n        );\r\n        uint256 temp1 = _toReserveBalance.mul(result);\r\n        uint256 temp2 = _toReserveBalance << precision;\r\n        return (temp1 - temp2) / result;\r\n    }\r\n\r\n    /**\r\n     * @dev given a smart token supply, reserve balance, total ratio and an amount of requested smart tokens,\r\n     * calculates the amount of reserve tokens required for purchasing the given amount of smart tokens\r\n     *\r\n     * Formula:\r\n     * Return = _reserveBalance * (((_supply + _amount) / _supply) ^ (MAX_RATIO / _totalRatio) - 1)\r\n     *\r\n     * @param _supply              smart token supply\r\n     * @param _reserveBalance      reserve token balance\r\n     * @param _totalRatio          total ratio, represented in ppm, 2-2000000\r\n     * @param _amount              requested amount of smart tokens\r\n     *\r\n     * @return amount of reserve tokens\r\n     */\r\n    function calculateFundCost(\r\n        uint256 _supply,\r\n        uint256 _reserveBalance,\r\n        uint32 _totalRatio,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        // validate input\r\n        require(\r\n            _supply > 0 &&\r\n                _reserveBalance > 0 &&\r\n                _totalRatio > 1 &&\r\n                _totalRatio <= MAX_RATIO * 2\r\n        );\r\n\r\n        // special case for 0 amount\r\n        if (_amount == 0) return 0;\r\n\r\n        // special case if the total ratio = 100%\r\n        if (_totalRatio == MAX_RATIO)\r\n            return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\r\n\r\n        uint256 result;\r\n        uint8 precision;\r\n        uint256 baseN = _supply.add(_amount);\r\n        (result, precision) = power(baseN, _supply, MAX_RATIO, _totalRatio);\r\n        uint256 temp = ((_reserveBalance.mul(result) - 1) >> precision) + 1;\r\n        return temp - _reserveBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev given a smart token supply, reserve balance, total ratio and an amount of smart tokens to liquidate,\r\n     * calculates the amount of reserve tokens received for selling the given amount of smart tokens\r\n     *\r\n     * Formula:\r\n     * Return = _reserveBalance * (1 - ((_supply - _amount) / _supply) ^ (MAX_RATIO / _totalRatio))\r\n     *\r\n     * @param _supply              smart token supply\r\n     * @param _reserveBalance      reserve token balance\r\n     * @param _totalRatio          total ratio, represented in ppm, 2-2000000\r\n     * @param _amount              amount of smart tokens to liquidate\r\n     *\r\n     * @return amount of reserve tokens\r\n     */\r\n    function calculateLiquidateReturn(\r\n        uint256 _supply,\r\n        uint256 _reserveBalance,\r\n        uint32 _totalRatio,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        // validate input\r\n        require(\r\n            _supply > 0 &&\r\n                _reserveBalance > 0 &&\r\n                _totalRatio > 1 &&\r\n                _totalRatio <= MAX_RATIO * 2 &&\r\n                _amount <= _supply\r\n        );\r\n\r\n        // special case for 0 amount\r\n        if (_amount == 0) return 0;\r\n\r\n        // special case for liquidating the entire supply\r\n        if (_amount == _supply) return _reserveBalance;\r\n\r\n        // special case if the total ratio = 100%\r\n        if (_totalRatio == MAX_RATIO) return _amount.mul(_reserveBalance) / _supply;\r\n\r\n        uint256 result;\r\n        uint8 precision;\r\n        uint256 baseD = _supply - _amount;\r\n        (result, precision) = power(_supply, baseD, MAX_RATIO, _totalRatio);\r\n        uint256 temp1 = _reserveBalance.mul(result);\r\n        uint256 temp2 = _reserveBalance << precision;\r\n        return (temp1 - temp2) / result;\r\n    }\r\n\r\n    /**\r\n     * @dev General Description:\r\n     *     Determine a value of precision.\r\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\r\n     *     Return the result along with the precision used.\r\n     *\r\n     * Detailed Description:\r\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\r\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\r\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\r\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\r\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\r\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\r\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\r\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\r\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\r\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\r\n     */\r\n    function power(\r\n        uint256 _baseN,\r\n        uint256 _baseD,\r\n        uint32 _expN,\r\n        uint32 _expD\r\n    ) internal view returns (uint256, uint8) {\r\n        require(_baseN < MAX_NUM);\r\n\r\n        uint256 baseLog;\r\n        uint256 base = (_baseN * FIXED_1) / _baseD;\r\n        if (base < OPT_LOG_MAX_VAL) {\r\n            baseLog = optimalLog(base);\r\n        } else {\r\n            baseLog = generalLog(base);\r\n        }\r\n\r\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\r\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\r\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\r\n        } else {\r\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\r\n            return (\r\n                generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision),\r\n                precision\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev computes log(x / FIXED_1) * FIXED_1.\r\n     * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\r\n     */\r\n    function generalLog(uint256 x) internal pure returns (uint256) {\r\n        uint256 res = 0;\r\n\r\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\r\n        if (x >= FIXED_2) {\r\n            uint8 count = floorLog2(x / FIXED_1);\r\n            x >>= count; // now x < 2\r\n            res = count * FIXED_1;\r\n        }\r\n\r\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\r\n        if (x > FIXED_1) {\r\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\r\n                x = (x * x) / FIXED_1; // now 1 < x < 4\r\n                if (x >= FIXED_2) {\r\n                    x >>= 1; // now 1 < x < 2\r\n                    res += ONE << (i - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\r\n    }\r\n\r\n    /**\r\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\r\n     */\r\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\r\n        uint8 res = 0;\r\n\r\n        if (_n < 256) {\r\n            // At most 8 iterations\r\n            while (_n > 1) {\r\n                _n >>= 1;\r\n                res += 1;\r\n            }\r\n        } else {\r\n            // Exactly 8 iterations\r\n            for (uint8 s = 128; s > 0; s >>= 1) {\r\n                if (_n >= (ONE << s)) {\r\n                    _n >>= s;\r\n                    res |= s;\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\r\n     * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\r\n     * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\r\n     */\r\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\r\n        uint8 lo = MIN_PRECISION;\r\n        uint8 hi = MAX_PRECISION;\r\n\r\n        while (lo + 1 < hi) {\r\n            uint8 mid = (lo + hi) / 2;\r\n            if (maxExpArray[mid] >= _x) lo = mid;\r\n            else hi = mid;\r\n        }\r\n\r\n        if (maxExpArray[hi] >= _x) return hi;\r\n        if (maxExpArray[lo] >= _x) return lo;\r\n\r\n        require(false);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev this function can be auto-generated by the script 'PrintFunctionGeneralExp.py'.\r\n     * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\r\n     * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\r\n     * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\r\n     * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\r\n     */\r\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\r\n        uint256 xi = _x;\r\n        uint256 res = 0;\r\n\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\r\n        xi = (xi * _x) >> _precision;\r\n        res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\r\n\r\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision); // divide by 33! and then add x^1 / 1! + x^0 / 0!\r\n    }\r\n\r\n    /**\r\n     * @dev computes log(x / FIXED_1) * FIXED_1\r\n     * Input range: FIXED_1 <= x <= LOG_EXP_MAX_VAL - 1\r\n     * Auto-generated via 'PrintFunctionOptimalLog.py'\r\n     * Detailed description:\r\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\r\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\r\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\r\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\r\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\r\n     */\r\n    function optimalLog(uint256 x) internal pure returns (uint256) {\r\n        uint256 res = 0;\r\n\r\n        uint256 y;\r\n        uint256 z;\r\n        uint256 w;\r\n\r\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\r\n            res += 0x40000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\r\n        } // add 1 / 2^1\r\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\r\n            res += 0x20000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\r\n        } // add 1 / 2^2\r\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\r\n            res += 0x10000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\r\n        } // add 1 / 2^3\r\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\r\n            res += 0x08000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\r\n        } // add 1 / 2^4\r\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\r\n            res += 0x04000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\r\n        } // add 1 / 2^5\r\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\r\n            res += 0x02000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\r\n        } // add 1 / 2^6\r\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\r\n            res += 0x01000000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\r\n        } // add 1 / 2^7\r\n        if (x >= 0x808040155aabbbe9451521693554f733) {\r\n            res += 0x00800000000000000000000000000000;\r\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\r\n        } // add 1 / 2^8\r\n\r\n        z = y = x - FIXED_1;\r\n        w = (y * y) / FIXED_1;\r\n        res +=\r\n            (z * (0x100000000000000000000000000000000 - y)) /\r\n            0x100000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\r\n        res +=\r\n            (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\r\n            0x200000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\r\n        res +=\r\n            (z * (0x099999999999999999999999999999999 - y)) /\r\n            0x300000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\r\n        res +=\r\n            (z * (0x092492492492492492492492492492492 - y)) /\r\n            0x400000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\r\n        res +=\r\n            (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\r\n            0x500000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\r\n        res +=\r\n            (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\r\n            0x600000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\r\n        res +=\r\n            (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\r\n            0x700000000000000000000000000000000;\r\n        z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\r\n        res +=\r\n            (z * (0x088888888888888888888888888888888 - y)) /\r\n            0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\r\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\r\n     * auto-generated via 'PrintFunctionOptimalExp.py'\r\n     * Detailed description:\r\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\r\n     * - The exponentiation of each binary exponent is given (pre-calculated)\r\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\r\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\r\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\r\n     */\r\n    function optimalExp(uint256 x) internal pure returns (uint256) {\r\n        uint256 res = 0;\r\n\r\n        uint256 y;\r\n        uint256 z;\r\n\r\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\r\n        z = (z * y) / FIXED_1;\r\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\r\n        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\r\n\r\n        if ((x & 0x010000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\r\n                0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\r\n        if ((x & 0x020000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\r\n                0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\r\n        if ((x & 0x040000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\r\n                0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\r\n        if ((x & 0x080000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\r\n                0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\r\n        if ((x & 0x100000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\r\n                0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\r\n        if ((x & 0x200000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x00960aadc109e7a3bf4578099615711d7) /\r\n                0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\r\n        if ((x & 0x400000000000000000000000000000000) != 0)\r\n            res =\r\n                (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\r\n                0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev deprecated, backward compatibility\r\n     */\r\n    function calculateCrossConnectorReturn(\r\n        uint256 _fromConnectorBalance,\r\n        uint32 _fromConnectorWeight,\r\n        uint256 _toConnectorBalance,\r\n        uint32 _toConnectorWeight,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        return\r\n            calculateCrossReserveReturn(\r\n                _fromConnectorBalance,\r\n                _fromConnectorWeight,\r\n                _toConnectorBalance,\r\n                _toConnectorWeight,\r\n                _amount\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts/GoodMarketMaker.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@title Dynamic reserve ratio market maker\r\n*/\r\ncontract GoodMarketMaker is BancorFormula, DSMath, SchemeGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // For calculate the return value on buy and sell\r\n    BancorFormula bancor;\r\n\r\n    // Entity that holds a reserve token\r\n    struct ReserveToken {\r\n        // Determines the reserve token balance\r\n        // that the reserve contract holds\r\n        uint256 reserveSupply;\r\n        // Determines the current ratio between\r\n        // the reserve token and the GD token\r\n        uint32 reserveRatio;\r\n        // How many GD tokens have been minted\r\n        // against that reserve token\r\n        uint256 gdSupply;\r\n    }\r\n\r\n    // The map which holds the reserve token entities\r\n    mapping(address => ReserveToken) public reserveTokens;\r\n\r\n    // Emits when a change has occurred in a\r\n    // reserve balance, i.e. buy / sell will\r\n    // change the balance\r\n    event BalancesUpdated(\r\n        // The account who initiated the action\r\n        address indexed caller,\r\n        // The address of the reserve token\r\n        address indexed reserveToken,\r\n        // The incoming amount\r\n        uint256 amount,\r\n        // The return value\r\n        uint256 returnAmount,\r\n        // The updated total supply\r\n        uint256 totalSupply,\r\n        // The updated reserve balance\r\n        uint256 reserveBalance\r\n    );\r\n\r\n    // Emits when the ratio changed. The caller should be the Avatar by definition\r\n    event ReserveRatioUpdated(address indexed caller, uint256 nom, uint256 denom);\r\n\r\n    // Emits when new tokens should be minted\r\n    // as a result of incoming interest.\r\n    // That event will be emitted after the\r\n    // reserve entity has been updated\r\n    event InterestMinted(\r\n        // The account who initiated the action\r\n        address indexed caller,\r\n        // The address of the reserve token\r\n        address indexed reserveToken,\r\n        // How much new reserve tokens been\r\n        // added to the reserve balance\r\n        uint256 addInterest,\r\n        // The GD supply in the reserve entity\r\n        // before the new minted GD tokens were\r\n        // added to the supply\r\n        uint256 oldSupply,\r\n        // The number of the new minted GD tokens\r\n        uint256 mint\r\n    );\r\n\r\n    // Emits when new tokens should be minted\r\n    // as a result of a reserve ratio expansion\r\n    // change. This change should have occurred\r\n    // on a regular basis. That event will be\r\n    // emitted after the reserve entity has been\r\n    // updated\r\n    event UBIExpansionMinted(\r\n        // The account who initiated the action\r\n        address indexed caller,\r\n        // The address of the reserve token\r\n        address indexed reserveToken,\r\n        // The reserve ratio before the expansion\r\n        uint256 oldReserveRatio,\r\n        // The GD supply in the reserve entity\r\n        // before the new minted GD tokens were\r\n        // added to the supply\r\n        uint256 oldSupply,\r\n        // The number of the new minted GD tokens\r\n        uint256 mint\r\n    );\r\n\r\n    // Defines the daily change in the reserve ratio in RAY precision.\r\n    // In the current release, only global ratio expansion is supported.\r\n    // That will be a part of each reserve token entity in the future.\r\n    uint256 public reserveRatioDailyExpansion;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _avatar The avatar of the DAO\r\n     * @param _nom The numerator to calculate the global `reserveRatioDailyExpansion` from\r\n     * @param _denom The denominator to calculate the global `reserveRatioDailyExpansion` from\r\n     */\r\n    constructor(\r\n        Avatar _avatar,\r\n        uint256 _nom,\r\n        uint256 _denom\r\n    ) public SchemeGuard(_avatar) {\r\n        reserveRatioDailyExpansion = rdiv(_nom, _denom);\r\n    }\r\n\r\n    modifier onlyActiveToken(ERC20 _token) {\r\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\r\n        require(rtoken.gdSupply > 0, \"Reserve token not initialized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the DAO to change the daily expansion rate\r\n     * it is calculated by _nom/_denom with e27 precision. Emits\r\n     * `ReserveRatioUpdated` event after the ratio has changed.\r\n     * Only Avatar can call this method.\r\n     * @param _nom The numerator to calculate the global `reserveRatioDailyExpansion` from\r\n     * @param _denom The denominator to calculate the global `reserveRatioDailyExpansion` from\r\n     */\r\n    function setReserveRatioDailyExpansion(uint256 _nom, uint256 _denom)\r\n        public\r\n        onlyAvatar\r\n    {\r\n        require(_denom > 0, \"denominator must be above 0\");\r\n        reserveRatioDailyExpansion = rdiv(_nom, _denom);\r\n        emit ReserveRatioUpdated(msg.sender, _nom, _denom);\r\n    }\r\n\r\n    // NOTICE: In the current release, if there is a wish to add another reserve token,\r\n    //  `end` method in the reserve contract should be called first. Then, the DAO have\r\n    //  to deploy a new reserve contract that will own the market maker. A scheme for\r\n    // updating the new reserve must be deployed too.\r\n\r\n    /**\r\n     * @dev Initialize a reserve token entity with the given parameters\r\n     * @param _token The reserve token\r\n     * @param _gdSupply Initial supply of GD to set the price\r\n     * @param _tokenSupply Initial supply of reserve token to set the price\r\n     * @param _reserveRatio The starting reserve ratio\r\n     */\r\n    function initializeToken(\r\n        ERC20 _token,\r\n        uint256 _gdSupply,\r\n        uint256 _tokenSupply,\r\n        uint32 _reserveRatio\r\n    ) public onlyOwner {\r\n        reserveTokens[address(_token)] = ReserveToken({\r\n            gdSupply: _gdSupply,\r\n            reserveSupply: _tokenSupply,\r\n            reserveRatio: _reserveRatio\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates how much to decrease the reserve ratio for _token by\r\n     * the `reserveRatioDailyExpansion`\r\n     * @param _token The reserve token to calculate the reserve ratio for\r\n     * @return The new reserve ratio\r\n     */\r\n    function calculateNewReserveRatio(ERC20 _token)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint32)\r\n    {\r\n        ReserveToken memory reserveToken = reserveTokens[address(_token)];\r\n        uint32 ratio = reserveToken.reserveRatio;\r\n        if (ratio == 0) {\r\n            ratio = 1e6;\r\n        }\r\n        return\r\n            uint32(\r\n                rmul(\r\n                    uint256(ratio).mul(1e21), // expand to e27 precision\r\n                    reserveRatioDailyExpansion\r\n                )\r\n                    .div(1e21) // return to e6 precision\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the reserve ratio for _token by the `reserveRatioDailyExpansion`\r\n     * @param _token The token to change the reserve ratio for\r\n     * @return The new reserve ratio\r\n     */\r\n    function expandReserveRatio(ERC20 _token)\r\n        public\r\n        onlyOwner\r\n        onlyActiveToken(_token)\r\n        returns (uint32)\r\n    {\r\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\r\n        uint32 ratio = reserveToken.reserveRatio;\r\n        if (ratio == 0) {\r\n            ratio = 1e6;\r\n        }\r\n        reserveToken.reserveRatio = calculateNewReserveRatio(_token);\r\n        return reserveToken.reserveRatio;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the buy return in GD according to the given _tokenAmount\r\n     * @param _token The reserve token buying with\r\n     * @param _tokenAmount The amount of reserve token buying with\r\n     * @return Number of GD that should be given in exchange as calculated by the bonding curve\r\n     */\r\n    function buyReturn(ERC20 _token, uint256 _tokenAmount)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\r\n        return\r\n            calculatePurchaseReturn(\r\n                rtoken.gdSupply,\r\n                rtoken.reserveSupply,\r\n                rtoken.reserveRatio,\r\n                _tokenAmount\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the sell return in _token according to the given _gdAmount\r\n     * @param _token The desired reserve token to have\r\n     * @param _gdAmount The amount of GD that are sold\r\n     * @return Number of tokens that should be given in exchange as calculated by the bonding curve\r\n     */\r\n    function sellReturn(ERC20 _token, uint256 _gdAmount)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\r\n        return\r\n            calculateSaleReturn(\r\n                rtoken.gdSupply,\r\n                rtoken.reserveSupply,\r\n                rtoken.reserveRatio,\r\n                _gdAmount\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the _token bonding curve params. Emits `BalancesUpdated` with the\r\n     * new reserve token information.\r\n     * @param _token The reserve token buying with\r\n     * @param _tokenAmount The amount of reserve token buying with\r\n     * @return (gdReturn) Number of GD that will be given in exchange as calculated by the bonding curve\r\n     */\r\n    function buy(ERC20 _token, uint256 _tokenAmount)\r\n        public\r\n        onlyOwner\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        uint256 gdReturn = buyReturn(_token, _tokenAmount);\r\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\r\n        rtoken.gdSupply = rtoken.gdSupply.add(gdReturn);\r\n        rtoken.reserveSupply = rtoken.reserveSupply.add(_tokenAmount);\r\n        emit BalancesUpdated(\r\n            msg.sender,\r\n            address(_token),\r\n            _tokenAmount,\r\n            gdReturn,\r\n            rtoken.gdSupply,\r\n            rtoken.reserveSupply\r\n        );\r\n        return gdReturn;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the _token bonding curve params. Emits `BalancesUpdated` with the\r\n     * new reserve token information.\r\n     * @param _token The desired reserve token to have\r\n     * @param _gdAmount The amount of GD that are sold\r\n     * @return Number of tokens that will be given in exchange as calculated by the bonding curve\r\n     */\r\n    function sell(ERC20 _token, uint256 _gdAmount)\r\n        public\r\n        onlyOwner\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\r\n        require(rtoken.gdSupply > _gdAmount, \"GD amount is higher than the total supply\");\r\n        uint256 tokenReturn = sellReturn(_token, _gdAmount);\r\n        rtoken.gdSupply = rtoken.gdSupply.sub(_gdAmount);\r\n        rtoken.reserveSupply = rtoken.reserveSupply.sub(tokenReturn);\r\n        emit BalancesUpdated(\r\n            msg.sender,\r\n            address(_token),\r\n            _gdAmount,\r\n            tokenReturn,\r\n            rtoken.gdSupply,\r\n            rtoken.reserveSupply\r\n        );\r\n        return tokenReturn;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the sell return with contribution in _token and update the bonding curve params.\r\n     * Emits `BalancesUpdated` with the new reserve token information.\r\n     * @param _token The desired reserve token to have\r\n     * @param _gdAmount The amount of GD that are sold\r\n     * @param _contributionGdAmount The number of GD tokens that will not be traded for the reserve token\r\n     * @return Number of tokens that will be given in exchange as calculated by the bonding curve\r\n     */\r\n    function sellWithContribution(\r\n        ERC20 _token,\r\n        uint256 _gdAmount,\r\n        uint256 _contributionGdAmount\r\n    ) public onlyOwner onlyActiveToken(_token) returns (uint256) {\r\n        require(\r\n            _gdAmount >= _contributionGdAmount,\r\n            \"GD amount is lower than the contribution amount\"\r\n        );\r\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\r\n        require(rtoken.gdSupply > _gdAmount, \"GD amount is higher than the total supply\");\r\n\r\n        // Deduces the convertible amount of GD tokens by the given contribution amount\r\n        uint256 amountAfterContribution = _gdAmount.sub(_contributionGdAmount);\r\n\r\n        // The return value after the deduction\r\n        uint256 tokenReturn = sellReturn(_token, amountAfterContribution);\r\n        rtoken.gdSupply = rtoken.gdSupply.sub(_gdAmount);\r\n        rtoken.reserveSupply = rtoken.reserveSupply.sub(tokenReturn);\r\n        emit BalancesUpdated(\r\n            msg.sender,\r\n            address(_token),\r\n            _contributionGdAmount,\r\n            tokenReturn,\r\n            rtoken.gdSupply,\r\n            rtoken.reserveSupply\r\n        );\r\n        return tokenReturn;\r\n    }\r\n\r\n    /**\r\n     * @dev Current price of GD in `token`. currently only cDAI is supported.\r\n     * @param _token The desired reserve token to have\r\n     * @return price of GD\r\n     */\r\n    function currentPrice(ERC20 _token)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\r\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\r\n        return\r\n            calculateSaleReturn(\r\n                rtoken.gdSupply,\r\n                rtoken.reserveSupply,\r\n                rtoken.reserveRatio,\r\n                (10**uint256(gooddollar.decimals()))\r\n            );\r\n    }\r\n\r\n    //TODO: need real calculation and tests\r\n    /**\r\n     * @dev Calculates how much G$ to mint based on added token supply (from interest)\r\n     * and on current reserve ratio, in order to keep G$ price the same at the bonding curve\r\n     * formula to calculate the gd to mint: gd to mint =\r\n     * addreservebalance * (gdsupply / (reservebalance * reserveratio))\r\n     * @param _token the reserve token\r\n     * @param _addTokenSupply amount of token added to supply\r\n     * @return how much to mint in order to keep price in bonding curve the same\r\n     */\r\n    function calculateMintInterest(ERC20 _token, uint256 _addTokenSupply)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\r\n        uint256 decimalsDiff = uint256(27).sub(uint256(gooddollar.decimals()));\r\n        //resulting amount is in RAY precision\r\n        //we divide by decimalsdiff to get precision in GD (2 decimals)\r\n        return rdiv(_addTokenSupply, currentPrice(_token)).div(10**decimalsDiff);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates bonding curve based on _addTokenSupply and new minted amount\r\n     * @param _token The reserve token\r\n     * @param _addTokenSupply Amount of token added to supply\r\n     * @return How much to mint in order to keep price in bonding curve the same\r\n     */\r\n    function mintInterest(ERC20 _token, uint256 _addTokenSupply)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        if (_addTokenSupply == 0) {\r\n            return 0;\r\n        }\r\n        uint256 toMint = calculateMintInterest(_token, _addTokenSupply);\r\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\r\n        uint256 gdSupply = reserveToken.gdSupply;\r\n        uint256 reserveBalance = reserveToken.reserveSupply;\r\n        reserveToken.gdSupply = gdSupply.add(toMint);\r\n        reserveToken.reserveSupply = reserveBalance.add(_addTokenSupply);\r\n        emit InterestMinted(\r\n            msg.sender,\r\n            address(_token),\r\n            _addTokenSupply,\r\n            gdSupply,\r\n            toMint\r\n        );\r\n        return toMint;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate how much G$ to mint based on expansion change (new reserve\r\n     * ratio), in order to keep G$ price the same at the bonding curve. the\r\n     * formula to calculate the gd to mint: gd to mint =\r\n     * (reservebalance / (newreserveratio * currentprice)) - gdsupply\r\n     * @param _token The reserve token\r\n     * @return How much to mint in order to keep price in bonding curve the same\r\n     */\r\n    function calculateMintExpansion(ERC20 _token)\r\n        public\r\n        view\r\n        onlyActiveToken(_token)\r\n        returns (uint256)\r\n    {\r\n        ReserveToken memory reserveToken = reserveTokens[address(_token)];\r\n        uint32 newReserveRatio = calculateNewReserveRatio(_token); // new reserve ratio\r\n        uint256 reserveDecimalsDiff = uint256(\r\n            uint256(27).sub(ERC20Detailed(address(_token)).decimals())\r\n        ); // //result is in RAY precision\r\n        uint256 denom = rmul(\r\n            uint256(newReserveRatio).mul(1e21),\r\n            currentPrice(_token).mul(10**reserveDecimalsDiff)\r\n        ); // (newreserveratio * currentprice) in RAY precision\r\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\r\n        uint256 gdDecimalsDiff = uint256(27).sub(uint256(gooddollar.decimals()));\r\n        uint256 toMint = rdiv(\r\n            reserveToken.reserveSupply.mul(10**reserveDecimalsDiff), // reservebalance in RAY precision\r\n            denom\r\n        )\r\n            .div(10**gdDecimalsDiff); // return to gd precision\r\n        return toMint.sub(reserveToken.gdSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates bonding curve based on expansion change and new minted amount\r\n     * @param _token The reserve token\r\n     * @return How much to mint in order to keep price in bonding curve the same\r\n     */\r\n    function mintExpansion(ERC20 _token) public onlyOwner returns (uint256) {\r\n        uint256 toMint = calculateMintExpansion(_token);\r\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\r\n        uint256 gdSupply = reserveToken.gdSupply;\r\n        uint256 ratio = reserveToken.reserveRatio;\r\n        reserveToken.gdSupply = gdSupply.add(toMint);\r\n        expandReserveRatio(_token);\r\n        emit UBIExpansionMinted(msg.sender, address(_token), ratio, gdSupply, toMint);\r\n        return toMint;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: ../contracts/dao/schemes/FeelessScheme.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract for letting scheme add itself to identity\r\n * to allow transferring GoodDollar without paying fees\r\n * and transfer ownership to Avatar\r\n */\r\ncontract FeelessScheme is SchemeGuard, IdentityGuard {\r\n    /* @dev Constructor\r\n     * @param _identity The identity contract\r\n     * @param _avatar The avatar of the DAO\r\n     */\r\n    constructor(Identity _identity, Avatar _avatar)\r\n        public\r\n        SchemeGuard(_avatar)\r\n        IdentityGuard(_identity)\r\n    {}\r\n\r\n    /* @dev Internal function to add contract to identity.\r\n     * Can only be called if scheme is registered.\r\n     */\r\n    function addRights() internal onlyRegistered {\r\n        controller.genericCall(\r\n            address(identity),\r\n            abi.encodeWithSignature(\"addContract(address)\", address(this)),\r\n            avatar,\r\n            0\r\n        );\r\n        transferOwnership(address(avatar));\r\n    }\r\n\r\n    /* @dev Internal function to remove contract from identity.\r\n     * Can only be called if scheme is registered.\r\n     */\r\n    function removeRights() internal onlyRegistered {\r\n        controller.genericCall(\r\n            address(identity),\r\n            abi.encodeWithSignature(\"removeContract(address)\", address(this)),\r\n            avatar,\r\n            0\r\n        );\r\n    }\r\n}\r\n\r\n// File: ../contracts/dao/schemes/ActivePeriod.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n/* @title Abstract contract responsible for ensuring a scheme is only usable within a set period\r\n */\r\ncontract ActivePeriod {\r\n    uint256 public periodStart;\r\n    uint256 public periodEnd;\r\n\r\n    bool public isActive;\r\n\r\n    Avatar avatar;\r\n\r\n    event SchemeStarted(address indexed by, uint256 time);\r\n    event SchemeEnded(address indexed by, uint256 time);\r\n\r\n    /* @dev modifier that requires scheme to be active\r\n     */\r\n    modifier requireActive() {\r\n        require(isActive, \"is not active\");\r\n        _;\r\n    }\r\n\r\n    /* @dev modifier that requires scheme to not be active\r\n     */\r\n    modifier requireNotActive() {\r\n        require(!isActive, \"cannot start twice\");\r\n        _;\r\n    }\r\n\r\n    /* @dev modifier that requires current time to be after period start and before period end\r\n     */\r\n    modifier requireInPeriod() {\r\n        require(now >= periodStart && now < periodEnd, \"not in period\");\r\n        _;\r\n    }\r\n\r\n    /* @dev modifier that requires current time to be after period end\r\n     */\r\n    modifier requirePeriodEnd() {\r\n        require(now >= periodEnd, \"period has not ended\");\r\n        _;\r\n    }\r\n\r\n    /* @dev Constructor. requires end period to be larger than start period\r\n     * Sets local period parameters and sets isActive to false\r\n     * @param _periodStart The time from when the contract can be started\r\n     * @param _periodEnd The time from when the contract can be ended\r\n     * @param _avatar DAO avatar\r\n     */\r\n    constructor(\r\n        uint256 _periodStart,\r\n        uint256 _periodEnd,\r\n        Avatar _avatar\r\n    ) public {\r\n        require(_periodStart < _periodEnd, \"start cannot be after nor equal to end\");\r\n\r\n        periodStart = _periodStart;\r\n        periodEnd = _periodEnd;\r\n        avatar = _avatar;\r\n\r\n        isActive = false;\r\n    }\r\n\r\n    /* @dev Function to start scheme. Must be inactive and within period.\r\n     * Sets isActive to true and emits event with address that started and\r\n     * current time.\r\n     */\r\n    function start() public requireInPeriod requireNotActive {\r\n        isActive = true;\r\n        emit SchemeStarted(msg.sender, now);\r\n    }\r\n\r\n    /* @dev Function to end scheme. Must be after assigned period end.\r\n     * Calls internal function internalEnd, passing along the avatar\r\n     * @param _avatar the avatar of the dao\r\n     */\r\n    function end() public requirePeriodEnd {\r\n        return internalEnd(avatar);\r\n    }\r\n\r\n    /* @dev internal end function. Must be active to run.\r\n     * Sets contract to inactive, emits an event with caller and\r\n     * current time, and self-destructs the contract, transferring any\r\n     * eth in the contract to the avatar address\r\n     * @param _avatar the avatar of the dao\r\n     */\r\n    function internalEnd(Avatar _avatar) internal requireActive {\r\n        isActive = false;\r\n        emit SchemeEnded(msg.sender, now);\r\n        selfdestruct(address(_avatar));\r\n    }\r\n}\r\n\r\n// File: contracts/GoodReserveCDai.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface cERC20 {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 mintAmount) external returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function balanceOf(address addr) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ContributionCalc {\r\n    function calculateContribution(\r\n        GoodMarketMaker _marketMaker,\r\n        GoodReserveCDai _reserve,\r\n        address _contributer,\r\n        ERC20 _token,\r\n        uint256 _gdAmount\r\n    ) external view returns (uint256);\r\n}\r\n\r\n/**\r\n@title Reserve based on cDAI and dynamic reserve ratio market maker\r\n*/\r\ncontract GoodReserveCDai is DSMath, FeelessScheme, ActivePeriod {\r\n    using SafeMath for uint256;\r\n\r\n    // DAI token address\r\n    ERC20 public dai;\r\n\r\n    // cDAI token address\r\n    cERC20 public cDai;\r\n\r\n    // The address of the market maker contract\r\n    // which makes the calculations and holds\r\n    // the token and accounts info\r\n    GoodMarketMaker public marketMaker;\r\n\r\n    // The fund manager receives the minted tokens\r\n    // when executing `mintInterestAndUBI`\r\n    address public fundManager;\r\n\r\n    // The block interval defines the number of\r\n    // blocks that shall be passed before the\r\n    // next execution of `mintInterestAndUBI`\r\n    uint256 public blockInterval;\r\n\r\n    // The last block number which\r\n    // `mintInterestAndUBI` has been executed in\r\n    uint256 public lastMinted;\r\n\r\n    // The contribution contract is responsible\r\n    // for calculates the contribution amount\r\n    // when selling GD\r\n    ContributionCalc public contribution;\r\n\r\n    modifier onlyFundManager {\r\n        require(msg.sender == fundManager, \"Only FundManager can call this method\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCDai(ERC20 token) {\r\n        require(address(token) == address(cDai), \"Only cDAI is supported\");\r\n        _;\r\n    }\r\n\r\n    // Emits when GD tokens are purchased\r\n    event TokenPurchased(\r\n        // The initiate of the action\r\n        address indexed caller,\r\n        // The convertible token address\r\n        // which the GD tokens were\r\n        // purchased with\r\n        address indexed reserveToken,\r\n        // Reserve tokens amount\r\n        uint256 reserveAmount,\r\n        // Minimal GD return that was\r\n        // permitted by the caller\r\n        uint256 minReturn,\r\n        // Actual return after the\r\n        // conversion\r\n        uint256 actualReturn\r\n    );\r\n\r\n    // Emits when GD tokens are sold\r\n    event TokenSold(\r\n        // The initiate of the action\r\n        address indexed caller,\r\n        // The convertible token address\r\n        // which the GD tokens were\r\n        // sold to\r\n        address indexed reserveToken,\r\n        // GD tokens amount\r\n        uint256 gdAmount,\r\n        // The amount of GD tokens that\r\n        // was contributed during the\r\n        // conversion\r\n        uint256 contributionAmount,\r\n        // Minimal reserve tokens return\r\n        // that was permitted by the caller\r\n        uint256 minReturn,\r\n        // Actual return after the\r\n        // conversion\r\n        uint256 actualReturn\r\n    );\r\n\r\n    // Emits when the contribution contract\r\n    // address is updated\r\n    event ContributionAddressUpdated(\r\n        // The initiate of the action\r\n        address indexed caller,\r\n        // Previous contribution\r\n        // contract address\r\n        address prevAddress,\r\n        // The updated contribution\r\n        // contract address\r\n        address newAddress\r\n    );\r\n\r\n    // Emits when new GD tokens minted\r\n    event UBIMinted(\r\n        //epoch of UBI\r\n        uint256 indexed day,\r\n        //the token paid as interest\r\n        address indexed interestToken,\r\n        //wei amount of interest paid in interestToken\r\n        uint256 interestReceived,\r\n        // Amount of GD tokens that was\r\n        // added to the supply as a result\r\n        // of `mintInterest`\r\n        uint256 gdInterestMinted,\r\n        // Amount of GD tokens that was\r\n        // added to the supply as a result\r\n        // of `mintExpansion`\r\n        uint256 gdExpansionMinted,\r\n        // Amount of GD tokens that was\r\n        // minted to the `interestCollector`\r\n        uint256 gdInterestTransferred,\r\n        // Amount of GD tokens that was\r\n        // minted to the `ubiCollector`\r\n        uint256 gdUbiTransferred\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _dai The address of DAI\r\n     * @param _cDai The address of cDAI\r\n     * @param _fundManager The address of the fund manager contract\r\n     * @param _avatar The avatar of the DAO\r\n     * @param _identity The identity contract\r\n     * @param _marketMaker The address of the market maker contract\r\n     * @param _contribution The address of the contribution contract\r\n     * @param _blockInterval How many blocks should be passed before the next execution of `mintInterestAndUBI`\r\n     */\r\n    constructor(\r\n        ERC20 _dai,\r\n        cERC20 _cDai,\r\n        address _fundManager,\r\n        Avatar _avatar,\r\n        Identity _identity,\r\n        address _marketMaker,\r\n        ContributionCalc _contribution,\r\n        uint256 _blockInterval\r\n    ) public FeelessScheme(_identity, _avatar) ActivePeriod(now, now * 2, _avatar) {\r\n        dai = _dai;\r\n        cDai = _cDai;\r\n        fundManager = _fundManager;\r\n        marketMaker = GoodMarketMaker(_marketMaker);\r\n        blockInterval = _blockInterval;\r\n        lastMinted = block.number.div(blockInterval);\r\n        contribution = _contribution;\r\n    }\r\n\r\n    /**\r\n     * @dev Start function. Adds this contract to identity as a feeless scheme.\r\n     * Can only be called if scheme is registered\r\n     */\r\n    function start() public onlyRegistered {\r\n        addRights();\r\n\r\n        // Adds the reserve as a minter of the GD token\r\n        controller.genericCall(\r\n            address(avatar.nativeToken()),\r\n            abi.encodeWithSignature(\"addMinter(address)\", address(this)),\r\n            avatar,\r\n            0\r\n        );\r\n        super.start();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the DAO to change the market maker contract\r\n     * @param _marketMaker address of the new contract\r\n     */\r\n    function setMarketMaker(address _marketMaker) public onlyAvatar {\r\n        marketMaker = GoodMarketMaker(_marketMaker);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the DAO to change the fund manager contract\r\n     * @param _fundManager address of the new contract\r\n     */\r\n    function setFundManager(address _fundManager) public onlyAvatar {\r\n        fundManager = _fundManager;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the DAO to change the block interval\r\n     * @param _blockInterval the new value\r\n     */\r\n    function setBlockInterval(uint256 _blockInterval) public onlyAvatar {\r\n        blockInterval = _blockInterval;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the DAO to change the contribution formula contract\r\n     * @param _contribution address of the new contribution contract\r\n     */\r\n    function setContributionAddress(address _contribution) public onlyAvatar {\r\n        address prevAddress = address(contribution);\r\n        contribution = ContributionCalc(_contribution);\r\n        emit ContributionAddressUpdated(msg.sender, prevAddress, _contribution);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts `buyWith` tokens to GD tokens and updates the bonding curve params.\r\n     * `buy` occurs only if the GD return is above the given minimum. It is possible\r\n     * to buy only with cDAI and when the contract is set to active. MUST call to\r\n     * `buyWith` `approve` prior this action to allow this contract to accomplish the\r\n     * conversion.\r\n     * @param _buyWith The tokens that should be converted to GD tokens\r\n     * @param _tokenAmount The amount of `buyWith` tokens that should be converted to GD tokens\r\n     * @param _minReturn The minimum allowed return in GD tokens\r\n     * @return (gdReturn) How much GD tokens were transferred\r\n     */\r\n    function buy(\r\n        ERC20 _buyWith,\r\n        uint256 _tokenAmount,\r\n        uint256 _minReturn\r\n    ) public requireActive onlyCDai(_buyWith) returns (uint256) {\r\n        require(\r\n            _buyWith.allowance(msg.sender, address(this)) >= _tokenAmount,\r\n            \"You need to approve cDAI transfer first\"\r\n        );\r\n        require(\r\n            _buyWith.transferFrom(msg.sender, address(this), _tokenAmount) == true,\r\n            \"transferFrom failed, make sure you approved cDAI transfer\"\r\n        );\r\n        uint256 gdReturn = marketMaker.buy(_buyWith, _tokenAmount);\r\n        require(gdReturn >= _minReturn, \"GD return must be above the minReturn\");\r\n        ERC20Mintable(address(avatar.nativeToken())).mint(msg.sender, gdReturn);\r\n        emit TokenPurchased(\r\n            msg.sender,\r\n            address(_buyWith),\r\n            _tokenAmount,\r\n            _minReturn,\r\n            gdReturn\r\n        );\r\n        return gdReturn;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts GD tokens to `sellTo` tokens and update the bonding curve params.\r\n     * `sell` occurs only if the token return is above the given minimum. Notice that\r\n     * there is a contribution amount from the given GD that remains in the reserve.\r\n     * It is only possible to sell to cDAI and only when the contract is set to\r\n     * active. MUST be called to G$ `approve` prior to this action to allow this\r\n     * contract to accomplish the conversion.\r\n     * @param _sellTo The tokens that will be received after the conversion\r\n     * @param _gdAmount The amount of GD tokens that should be converted to `_sellTo` tokens\r\n     * @param _minReturn The minimum allowed `sellTo` tokens return\r\n     * @return (tokenReturn) How much `sellTo` tokens were transferred\r\n     */\r\n    function sell(\r\n        ERC20 _sellTo,\r\n        uint256 _gdAmount,\r\n        uint256 _minReturn\r\n    ) public requireActive onlyCDai(_sellTo) returns (uint256) {\r\n        ERC20Burnable(address(avatar.nativeToken())).burnFrom(msg.sender, _gdAmount);\r\n        uint256 contributionAmount = contribution.calculateContribution(\r\n            marketMaker,\r\n            this,\r\n            msg.sender,\r\n            _sellTo,\r\n            _gdAmount\r\n        );\r\n        uint256 tokenReturn = marketMaker.sellWithContribution(\r\n            _sellTo,\r\n            _gdAmount,\r\n            contributionAmount\r\n        );\r\n        require(tokenReturn >= _minReturn, \"Token return must be above the minReturn\");\r\n        require(_sellTo.transfer(msg.sender, tokenReturn) == true, \"Transfer failed\");\r\n        emit TokenSold(\r\n            msg.sender,\r\n            address(_sellTo),\r\n            _gdAmount,\r\n            contributionAmount,\r\n            _minReturn,\r\n            tokenReturn\r\n        );\r\n        return tokenReturn;\r\n    }\r\n\r\n    /**\r\n     * @dev Current price of GD in `token`. currently only cDAI is supported.\r\n     * @param _token The desired reserve token to have\r\n     * @return price of GD\r\n     */\r\n    function currentPrice(ERC20 _token) public view returns (uint256) {\r\n        return marketMaker.currentPrice(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if enough blocks have passed so it would be possible to\r\n     * execute `mintInterestAndUBI` according to the length of `blockInterval`\r\n     * @return (bool) True if enough blocks have passed\r\n     */\r\n    function canMint() public view returns (bool) {\r\n        return block.number.div(blockInterval) > lastMinted;\r\n    }\r\n\r\n    /**\r\n     * @dev Anyone can call this to trigger calculations.\r\n     * Reserve sends UBI to Avatar DAO and returns interest to FundManager.\r\n     * @param _interestToken The token that was transfered to the reserve\r\n     * @param _transfered How much was transfered to the reserve for UBI in `_interestToken`\r\n     * @param _interest Out of total transfered how much is the interest (in `_interestToken`)\r\n     * that needs to be paid back (some interest might be donated)\r\n     * @return (gdInterest, gdUBI) How much GD interest was minted and how much GD UBI was minted\r\n     */\r\n    function mintInterestAndUBI(\r\n        ERC20 _interestToken,\r\n        uint256 _transfered,\r\n        uint256 _interest\r\n    )\r\n        public\r\n        requireActive\r\n        onlyCDai(_interestToken)\r\n        onlyFundManager\r\n        returns (uint256, uint256)\r\n    {\r\n        require(canMint(), \"Need to wait for the next interval\");\r\n        uint256 price = currentPrice(_interestToken);\r\n        uint256 gdInterestToMint = marketMaker.mintInterest(_interestToken, _transfered);\r\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\r\n        uint256 precisionLoss = uint256(27).sub(uint256(gooddollar.decimals()));\r\n        uint256 gdInterest = rdiv(_interest, price).div(10**precisionLoss);\r\n        uint256 gdExpansionToMint = marketMaker.mintExpansion(_interestToken);\r\n        uint256 gdUBI = gdInterestToMint.sub(gdInterest);\r\n        gdUBI = gdUBI.add(gdExpansionToMint);\r\n        uint256 toMint = gdUBI.add(gdInterest);\r\n        ERC20Mintable(address(avatar.nativeToken())).mint(fundManager, toMint);\r\n        lastMinted = block.number.div(blockInterval);\r\n        emit UBIMinted(\r\n            lastMinted,\r\n            address(_interestToken),\r\n            _transfered,\r\n            gdInterestToMint,\r\n            gdExpansionToMint,\r\n            gdInterest,\r\n            gdUBI\r\n        );\r\n        return (gdInterest, gdUBI);\r\n    }\r\n\r\n    /**\r\n     * @dev Making the contract inactive after it has transferred the cDAI funds to `_avatar`\r\n     * and has transferred the market maker ownership to `_avatar`. Inactive means that\r\n     * buy / sell / mintInterestAndUBI actions will no longer be active. Only the Avatar can\r\n     * executes this method\r\n     */\r\n    function end() public onlyAvatar {\r\n        // remaining cDAI tokens in the current reserve contract\r\n        uint256 remainingReserve = cDai.balanceOf(address(this));\r\n        if (remainingReserve > 0) {\r\n            require(\r\n                cDai.transfer(address(avatar), remainingReserve),\r\n                \"cdai transfer failed\"\r\n            );\r\n        }\r\n        require(cDai.balanceOf(address(this)) == 0, \"Funds transfer has failed\");\r\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\r\n        marketMaker.transferOwnership(address(avatar));\r\n        gooddollar.renounceMinter();\r\n        super.internalEnd(avatar);\r\n    }\r\n\r\n    /**\r\n     * @dev method to recover any stuck erc20 tokens (ie compound COMP)\r\n     * @param _token the ERC20 token to recover\r\n     */\r\n    function recover(ERC20 _token) public onlyAvatar {\r\n        require(\r\n            _token.transfer(address(avatar), _token.balanceOf(address(this))),\r\n            \"recover transfer failed\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/ContributionCalculation.sol\r\n\r\npragma solidity >0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* @title Contribution calculation for selling gd tokens\r\n */\r\ncontract ContributionCalculation is DSMath {\r\n    using SafeMath for uint256;\r\n\r\n    Avatar avatar;\r\n    // The contribution ratio, declares how much\r\n    // to contribute from the given amount\r\n    uint256 public sellContributionRatio;\r\n\r\n    // Emits when the contribution ratio is updated\r\n    event SellContributionRatioUpdated(\r\n        address indexed caller,\r\n        uint256 nom,\r\n        uint256 denom\r\n    );\r\n\r\n    /** @dev modifier to check if caller is avatar\r\n     */\r\n    modifier onlyAvatar() {\r\n        require(address(avatar) == msg.sender, \"only Avatar can call this method\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _avatar The avatar of the DAO\r\n     * @param _nom The numerator to calculate the contribution ratio from\r\n     * @param _denom The denominator to calculate the contribution ratio from\r\n     */\r\n    constructor(\r\n        Avatar _avatar,\r\n        uint256 _nom,\r\n        uint256 _denom\r\n    ) public {\r\n        sellContributionRatio = rdiv(_nom, _denom);\r\n        avatar = _avatar;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow the DAO to change the sell contribution rate\r\n     * it is calculated by _nom/_denom with e27 precision. Emits\r\n     * that the contribution ratio was updated.\r\n     * @param _nom the nominator\r\n     * @param _denom the denominator\r\n     */\r\n    function setContributionRatio(uint256 _nom, uint256 _denom) external onlyAvatar {\r\n        require(_denom > 0, \"denominator must be above 0\");\r\n        sellContributionRatio = rdiv(_nom, _denom);\r\n        emit SellContributionRatioUpdated(msg.sender, _nom, _denom);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the amount after contribution during the sell action. There is a\r\n     * `sellContributionRatio` percent contribution\r\n     * @param _marketMaker The market maker address\r\n     * @param _reserve The reserve address\r\n     * @param _contributer The contributer address\r\n     * @param _token The token to convert from\r\n     * @param _gdAmount The total GD amount to contribute from\r\n     * @return (contributionAmount) The contribution amount for sell\r\n     */\r\n    function calculateContribution(\r\n        GoodMarketMaker _marketMaker,\r\n        GoodReserveCDai _reserve,\r\n        address _contributer,\r\n        ERC20 _token,\r\n        uint256 _gdAmount\r\n    ) external view returns (uint256) {\r\n        uint256 decimalsDiff = uint256(27).sub(2); // 2 gooddollar decimals\r\n        uint256 contributionAmount = rmul(\r\n            _gdAmount.mul(10**decimalsDiff), // expand to e27 precision\r\n            sellContributionRatio\r\n        )\r\n            .div(10**decimalsDiff); // return to e2 precision\r\n        require(_gdAmount > contributionAmount, \"Calculation error\");\r\n        return contributionAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denom\",\"type\":\"uint256\"}],\"name\":\"SellContributionRatioUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GoodMarketMaker\",\"name\":\"_marketMaker\",\"type\":\"address\"},{\"internalType\":\"contract GoodReserveCDai\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contributer\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gdAmount\",\"type\":\"uint256\"}],\"name\":\"calculateContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellContributionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setContributionRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ContributionCalculation","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ecfd1afb601c406ff0e13c3485f2d75699b6817000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7d4ee9b7e5c28b315bbf66ba91d109cc01f1adaa9fff8e909ec05dc50ce77ea0"}]}