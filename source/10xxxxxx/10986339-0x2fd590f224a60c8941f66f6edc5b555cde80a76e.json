{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\n\n\n// SPDX-License-Identifier: UNLICENSED\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;}\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;}\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {return 0;}\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;}\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");}\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;}\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");}\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;}\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Uniswap {\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function WETH() external pure returns (address);\n}\n\ninterface Pool {\n    function primary() external view returns (address);\n}\n\ncontract Poolable {\n    address payable public POOLADDRESS;\n\n    function primary() private view returns (address) {\n        return Pool(POOLADDRESS).primary();\n    }\n\n    modifier onlyPrimary() {\n        require(msg.sender == primary(), \"Caller is not primary\");\n        _;\n    }\n}\n\ncontract Staker is Poolable {\n    using SafeMath for uint256;\n\n    uint constant internal DECIMAL = 10**18;\n    uint constant public INF = 33136721748;\n\n    uint private _rewardValue = 10**18;\n\n    mapping (address => uint256) public  timePooled;\n    mapping (address => uint256) private internalTime;\n    mapping (address => uint256) private LPTokenBalance;\n    mapping (address => uint256) private rewards;\n    mapping (address => uint256) private referralEarned;\n\n    address          public creator;\n    address          public fomoAddress;\n\n    address constant public UNIROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant public FACTORY           = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    address          public WETHAddress       = Uniswap(UNIROUTER).WETH();\n\n    bool private _unchangeable = false;\n    bool private _tokenAddressGiven = false;\n\n    constructor (address payable _POOLADDRESS) public {\n       POOLADDRESS = _POOLADDRESS;\n       creator = msg.sender;\n    }\n\n    receive() external payable {\n       if(msg.sender != UNIROUTER) {\n           stake(address(0));\n       }\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    //If true, no changes can be made\n    function unchangeable() public view returns (bool){\n        return _unchangeable;\n    }\n\n    function rewardValue() public view returns (uint){\n        return _rewardValue;\n    }\n\n    //THE ONLY ADMIN FUNCTIONS vvvv\n    //After this is called, no changes can be made\n    function makeUnchangeable() public onlyPrimary {\n        _unchangeable = true;\n    }\n\n    //Can only be called once to set token address\n    function setTokenAddress(address input) public onlyPrimary{\n        require(!_tokenAddressGiven, \"Function was already called\");\n        _tokenAddressGiven = true;\n        fomoAddress = input;\n    }\n\n    //Set reward value that has high APY, can't be called if makeUnchangeable() was called\n    function updateRewardValue(uint input) public onlyPrimary {\n        require(!unchangeable(), \"makeUnchangeable() function was already called\");\n        _rewardValue = input;\n    }\n    //THE ONLY ADMIN FUNCTIONS ^^^^\n\n\n    function stake(address payable ref) public payable {\n        // Default referrer to creator if not given\n        if (ref == address(0)) {\n            ref = payable(creator);\n        }\n        referralEarned[ref] = referralEarned[ref] + ((address(this).balance/10)*DECIMAL)/price();\n\n        sendValue(POOLADDRESS, address(this).balance/2);\n\n        address poolAddress = Uniswap(FACTORY).getPair(fomoAddress, WETHAddress);\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\n        uint tokenAmount = IERC20(fomoAddress).balanceOf(poolAddress); //token in uniswap\n\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\n        IERC20(fomoAddress).mint(address(this), toMint);\n\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\n\n        uint amountTokenDesired = IERC20(fomoAddress).balanceOf(address(this)); // should equal to toMint\n        IERC20(fomoAddress).approve(UNIROUTER, amountTokenDesired ); //allow pool to get tokens\n\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(fomoAddress, amountTokenDesired, 1, 1, address(this), INF);\n\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\n\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\n        timePooled[msg.sender] = now;\n        internalTime[msg.sender] = now;\n\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].add(poolTokenGot);\n    }\n\n    function withdrawLPTokens(uint amount) public {\n        require(timePooled[msg.sender] + 3 days <= now, \"It has not been 3 days since you staked yet\");\n\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].sub(amount);\n\n        address poolAddress = Uniswap(FACTORY).getPair(fomoAddress, WETHAddress);\n        IERC20(poolAddress).transfer(msg.sender, amount);\n\n        internalTime[msg.sender] = now;\n    }\n\n    function withdrawRewardTokens(uint amount) public {\n        require(timePooled[msg.sender] + 3 days <= now, \"It has not been 3 days since you staked yet\");\n\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\n        internalTime[msg.sender] = now;\n\n        uint removeAmount = ethtimeCalc(amount)/2;\n        rewards[msg.sender] = rewards[msg.sender].sub(removeAmount);\n\n        IERC20(fomoAddress).mint(msg.sender, amount);\n    }\n\n    function withdrawReferralEarned(uint amount) public{\n        require(timePooled[msg.sender] != 0, \"You have to stake at least a little bit to withdraw referral rewards\");\n        require(timePooled[msg.sender] + 3 days <= now, \"It has not been 3 days since you staked yet\");\n\n        referralEarned[msg.sender] = referralEarned[msg.sender].sub(amount);\n        IERC20(fomoAddress).mint(msg.sender, amount);\n    }\n\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint){\n        return (viewPooledEthAmount(who).mul( now.sub(internalTime[who]) ));\n    }\n\n    function viewRewardTokenAmount(address who) public view returns (uint){\n        return earnCalc( rewards[who].add(viewRecentRewardTokenAmount(who))*2 );\n    }\n\n    function viewLPTokenAmount(address who) public view returns (uint){\n        return LPTokenBalance[who];\n    }\n\n    function viewPooledEthAmount(address who) public view returns (uint){\n\n        address poolAddress = Uniswap(FACTORY).getPair(fomoAddress, WETHAddress);\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\n\n        return (ethAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\n    }\n\n    function viewPooledTokenAmount(address who) public view returns (uint){\n\n        address poolAddress = Uniswap(FACTORY).getPair(fomoAddress, WETHAddress);\n        uint tokenAmount = IERC20(fomoAddress).balanceOf(poolAddress); //token in uniswap\n\n        return (tokenAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\n    }\n\n    function viewReferralEarned(address who) public view returns (uint){\n        return referralEarned[who];\n    }\n\n    function price() public view returns (uint){\n\n        address poolAddress = Uniswap(FACTORY).getPair(fomoAddress, WETHAddress);\n\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\n        uint tokenAmount = IERC20(fomoAddress).balanceOf(poolAddress); //token in uniswap\n\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\n    }\n\n    function earnCalc(uint ethTime) public view returns(uint){\n        return ( rewardValue().mul(ethTime)  ) / ( 31557600 * DECIMAL );\n    }\n\n    function ethtimeCalc(uint fomo) internal view returns(uint){\n        return ( fomo.mul(31557600 * DECIMAL) ).div( rewardValue() );\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_POOLADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethTime\",\"type\":\"uint256\"}],\"name\":\"earnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fomoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnchangeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timePooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unchangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"updateRewardValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewLPTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewReferralEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReferralEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"000000000000000000000000c7ce8777adf061e7de4052c31246d92968e34ea3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}