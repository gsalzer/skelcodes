{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * @Symbol: TTM\r\n * @Name: To the Moon\r\n * @Decimals: 18\r\n * @Total Supply: 2020\r\n * 1% burn to fuel our rockets.\r\n * We are just trying to go to the Moon.\r\n *\r\n * Only 2020 TTM will be created.\r\n * Each time that TTM is transferred, 1% of the transfer is burned.\r\n * There will never be more TTM created.\r\n * No developer fund\r\n * No private sale whales\r\n * Liquidity burned forever\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.7.0;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a);\r\n      return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a);\r\n      uint256 c = a - b;\r\n      return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20  {\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals = 18;\r\n    uint256 private _totalSupply;\r\n    uint256 oneHundredPercent = 100;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\r\n        _totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        balances[msg.sender] = _totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address holder) public view override returns (uint256) {\r\n        return balances[holder];\r\n    }\r\n\r\n    function allowance(address holder, address spender) public view override returns (uint256) {\r\n        return allowed[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool success) {\r\n        allowed[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferBurnAmount(uint256 amount) private view returns (uint256)  {\r\n        uint256 roundAmount = amount.ceil(oneHundredPercent);\r\n        uint256 onePercent = roundAmount.mul(oneHundredPercent).div(10000);\r\n        return onePercent;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool success) {\r\n      require(amount <= balances[msg.sender]);\r\n      require(to != address(0));\r\n\r\n      uint256 tokensToBurn = transferBurnAmount(amount);\r\n      uint256 tokensToTransfer = amount.sub(tokensToBurn);\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(amount);\r\n      balances[to] = balances[to].add(tokensToTransfer);\r\n\r\n      _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n      emit Transfer(msg.sender, to, tokensToTransfer);\r\n      emit Transfer(msg.sender, address(0), tokensToBurn);\r\n      return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool success) {\r\n      require(amount <= balances[from]);\r\n      require(amount <= allowed[from][msg.sender]);\r\n      require(to != address(0));\r\n\r\n      balances[from] = balances[from].sub(amount);\r\n\r\n      uint256 tokensToBurn = transferBurnAmount(amount);\r\n      uint256 tokensToTransfer = amount.sub(tokensToBurn);\r\n\r\n      balances[to] = balances[to].add(tokensToTransfer);\r\n      _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n      allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\r\n      emit Transfer(from, to, tokensToTransfer);\r\n      emit Transfer(from, address(0), tokensToBurn);\r\n\r\n      return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) public returns (bool success) {\r\n        require(amount <= balances[msg.sender]);     \r\n        balances[msg.sender] -= amount;           \r\n        _totalSupply -= amount;                    \r\n        emit Burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address from, uint256 amount) public returns (bool success) {\r\n        require(amount <= balances[from]);                \r\n        require(amount <= allowed[from][msg.sender]);    \r\n        balances[from] -= amount;                         \r\n        allowed[from][msg.sender] -= amount;             \r\n        _totalSupply -= amount;                             \r\n        emit Burn(from, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TTMToken is ERC20 {\r\n    constructor()\r\n    ERC20(2020, 'To the Moon', 'TTM')\r\n    public {\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TTMToken","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ed446b8fb2eea436d188e76bfaae1d2d46be0a421c9f181d9e03043ef9f26d1c"}]}