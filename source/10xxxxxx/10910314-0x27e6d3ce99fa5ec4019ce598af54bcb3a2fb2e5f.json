{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-07\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPooledStaking.sol\r\n\r\n/*\r\n    Copyright (C) 2020 NexusMutual.io\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/\r\n*/\r\n\r\npragma solidity ^0.6.10;\r\n\r\ninterface IPooledStaking {\r\n  function stakerContractStake(address staker, address contractAddress) external view returns (uint);\r\n  function stakerContractPendingUnstakeTotal(address staker, address contractAddress) external view returns (uint);\r\n}\r\n\r\n// File: contracts/interfaces/INXMMaster.sol\r\n\r\n/*\r\n    Copyright (C) 2020 NexusMutual.io\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/\r\n*/\r\n\r\npragma solidity ^0.6.10;\r\n\r\ninterface INXMMaster {\r\n  function getLatestAddress(bytes2 _contractName) external view returns (address payable contractAddress);\r\n}\r\n\r\n// File: contracts/CommunityStakingIncentives.sol\r\n\r\n/*\r\n    Copyright (C) 2020 NexusMutual.io\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/\r\n*/\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CommunityStakingIncentives is ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint;\r\n\r\n  INXMMaster public master;\r\n  uint public roundDuration;\r\n  uint public roundsStartTime;\r\n  uint public constant rewardRateScale = 1e18;\r\n\r\n  /**\r\n  * @dev Add rewards as a sponsor for a particular contract.\r\n  * @param _roundDuration Duration of a reward round in seconds.\r\n  * @param _roundsStartTime Timestamp in seconds at which rounds start. Needs to be in the future.\r\n  * @param masterAddress NexusMutual Master contract address.\r\n  */\r\n  constructor(uint _roundDuration, uint _roundsStartTime, address masterAddress) public {\r\n\r\n    require(_roundDuration > 0, \"_roundDuration needs to be greater than 0\");\r\n    require(_roundsStartTime >= now, \"_roundsStartTime needs to be in the future\");\r\n    roundDuration = _roundDuration;\r\n    roundsStartTime = _roundsStartTime;\r\n    master = INXMMaster(masterAddress);\r\n  }\r\n\r\n  struct RewardPool {\r\n    uint amount;\r\n    // rate nextRate and nextRateStartRound  may not be up to date. use _getRates to get the up to date values.\r\n    uint rate;\r\n    uint nextRate;\r\n    uint nextRateStartRound;\r\n    mapping(address => uint) lastRoundClaimed;\r\n  }\r\n\r\n  // stakedContractAddress => sponsorAddress => tokenAddress => RewardPool\r\n  mapping (address => mapping (address => mapping (address => RewardPool))) rewardPools;\r\n\r\n  event Deposited (\r\n    address indexed stakedContract,\r\n    address indexed sponsor,\r\n    address tokenAddress,\r\n    uint amount\r\n  );\r\n\r\n  event Withdrawn (\r\n    address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress,\r\n    uint amount\r\n  );\r\n\r\n  event Claimed (\r\n    address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress,\r\n    uint amount,\r\n    address receiver,\r\n    uint roundNumber\r\n  );\r\n\r\n  /**\r\n  * @dev set the reward ratio as a sponsor for a particular contract and ERC20 token.\r\n  * @param stakedContract Contract the staker has a stake on.\r\n  * @param tokenAddress Address of the ERC20 token of the reward funds.\r\n  * @param rate Rate between the NXM stake and the reward amount. (Scaled by 1e18)\r\n  */\r\n  function setRewardRate(address stakedContract, address tokenAddress, uint rate) public {\r\n\r\n    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\r\n\r\n    uint currentRound = getCurrentRound();\r\n    uint currentRate;\r\n    (currentRate, , ) = _getRates(pool, currentRound);\r\n    if (currentRate == 0) {\r\n      // set the rate for the current round\r\n      pool.rate = rate;\r\n      pool.nextRate = 0;\r\n      pool.nextRateStartRound = 0;\r\n    } else {\r\n      // set the rate for the next round\r\n      if (pool.rate != currentRate) {\r\n        pool.rate = pool.nextRate;\r\n      }\r\n      pool.nextRate = rate;\r\n      pool.nextRateStartRound = currentRound + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Add rewards as a sponsor for a particular contract.\r\n  * @param stakedContract Contract the staker has a stake on.\r\n  * @param tokenAddress Address of the ERC20 token of the reward funds.\r\n  * @param amount Amount of rewards to be deposited.\r\n  */\r\n  function depositRewards(address stakedContract, address tokenAddress, uint amount) public {\r\n\r\n    IERC20 erc20 = IERC20(tokenAddress);\r\n    erc20.safeTransferFrom(msg.sender, address(this), amount);\r\n    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\r\n    pool.amount = pool.amount.add(amount);\r\n    emit Deposited(stakedContract, msg.sender, tokenAddress, amount);\r\n  }\r\n\r\n  /**\r\n  * @dev Add rewards as a sponsor for a particular contract.\r\n  * @param stakedContract Contract the staker has a stake on.\r\n  * @param tokenAddress Address of the ERC20 token of the reward funds.\r\n  * @param amount Amount of rewards to be deposited.\r\n  * @param rate Rate between the NXM stake and the reward amount. (Scaled by 1e18)\r\n  */\r\n  function depositRewardsAndSetRate(address stakedContract, address tokenAddress, uint amount, uint rate) external {\r\n    depositRewards(stakedContract, tokenAddress, amount);\r\n    setRewardRate(stakedContract, tokenAddress, rate);\r\n  }\r\n\r\n  /**\r\n  * @dev Calls claimReward for each separate (stakedContract, sponsor, token) tuple specified.\r\n  * @param stakedContracts Contracts the staker has a stake on.\r\n  * @param sponsors Sponsors to claim rewards from.\r\n  * @param tokenAddresses Addresses of the ERC20 token of the reward funds.\r\n  * @return tokensRewarded Tokens rewarded by each sponsor.\r\n  */\r\n  function claimRewards(\r\n    address[] calldata stakedContracts,\r\n    address[] calldata sponsors,\r\n    address[] calldata tokenAddresses\r\n  ) external nonReentrant returns (uint[] memory tokensRewarded) {\r\n\r\n    require(stakedContracts.length == sponsors.length, \"stakedContracts.length != sponsors.length\");\r\n    require(stakedContracts.length == tokenAddresses.length, \"stakedContracts.length != tokenAddresses.length\");\r\n\r\n    tokensRewarded = new uint[](stakedContracts.length);\r\n    for (uint i = 0; i < stakedContracts.length; i++) {\r\n      tokensRewarded[i] = claimReward(stakedContracts[i], sponsors[i], tokenAddresses[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims reward as a NexusMutual staker.\r\n  * @param stakedContract contract the staker has a stake on.\r\n  * @param sponsor Sponsor providing the reward funds.\r\n  * @param tokenAddress address of the ERC20 token of the reward funds.\r\n  * @return rewardAmount amount rewarded\r\n  */\r\n  function claimReward(\r\n    address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress\r\n  ) internal returns (uint rewardAmount) {\r\n\r\n    uint currentRound = getCurrentRound();\r\n    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\r\n    uint lastRoundClaimed = pool.lastRoundClaimed[msg.sender];\r\n    require(currentRound > lastRoundClaimed, \"Already claimed this reward for this round\");\r\n\r\n    if (pool.nextRateStartRound != 0 && pool.nextRateStartRound <= currentRound) {\r\n      pool.rate = pool.nextRate;\r\n      pool.nextRateStartRound = 0;\r\n      pool.nextRate = 0;\r\n    }\r\n\r\n    IPooledStaking pooledStaking = IPooledStaking(master.getLatestAddress(\"PS\"));\r\n    uint stake = pooledStaking.stakerContractStake(msg.sender, stakedContract);\r\n    uint pendingUnstake = pooledStaking.stakerContractPendingUnstakeTotal(msg.sender, stakedContract);\r\n    uint netStake = stake >= pendingUnstake ? stake.sub(pendingUnstake) : 0;\r\n    rewardAmount = netStake.mul(pool.rate).div(rewardRateScale);\r\n    uint rewardsAvailable = pool.amount;\r\n    if (rewardAmount > rewardsAvailable) {\r\n      rewardAmount = rewardsAvailable;\r\n    }\r\n    require(rewardAmount > 0, \"rewardAmount needs to be greater than 0\");\r\n\r\n    pool.lastRoundClaimed[msg.sender] = currentRound;\r\n    pool.amount = rewardsAvailable.sub(rewardAmount);\r\n\r\n    IERC20 erc20 = IERC20(tokenAddress);\r\n    erc20.safeTransfer(msg.sender, rewardAmount);\r\n    emit Claimed(stakedContract, sponsor, tokenAddress, rewardAmount, msg.sender, currentRound);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw reward funds as a Sponsor for a particular staked contract.\r\n  * @param stakedContract Contract the staker has a stake on.\r\n  * @param tokenAddress Address of the ERC20 token of the reward funds.\r\n  * @param amount Amount of reward funds to be withdrawn.\r\n  */\r\n  function withdrawRewards(address stakedContract, address tokenAddress, uint amount) external nonReentrant {\r\n    IERC20 erc20 = IERC20(tokenAddress);\r\n    RewardPool storage pool = rewardPools[stakedContract][msg.sender][tokenAddress];\r\n    require(pool.amount >= amount, \"Not enough tokens to withdraw\");\r\n    require(pool.rate == 0, \"Reward rate is not 0\");\r\n\r\n    pool.amount = pool.amount.sub(amount);\r\n    erc20.safeTransfer(msg.sender, amount);\r\n    emit Withdrawn(stakedContract, msg.sender, tokenAddress, amount);\r\n  }\r\n\r\n  /**\r\n  @dev Fetch the amount of available rewards for a staker for the current round from a particular reward pool.\r\n  * @param staker whose rewards are counted.\r\n  * @param stakedContract contract the staker has a stake on.\r\n  * @param sponsor Sponsor providing the reward funds.\r\n  * @param tokenAddress address of the ERC20 token of the reward funds.\r\n  * @return rewardAmount amount of reward tokens available for this particular staker.\r\n  */\r\n  function getAvailableStakerReward(\r\n    address staker,\r\n    address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress\r\n  ) public view returns (uint rewardAmount) {\r\n\r\n    uint currentRound = getCurrentRound();\r\n    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\r\n    uint lastRoundClaimed = pool.lastRoundClaimed[staker];\r\n    if (lastRoundClaimed >= currentRound) {\r\n      return 0;\r\n    }\r\n    uint rate;\r\n    (rate, , ) = _getRates(pool, currentRound);\r\n    IPooledStaking pooledStaking = IPooledStaking(master.getLatestAddress(\"PS\"));\r\n    uint stake = pooledStaking.stakerContractStake(staker, stakedContract);\r\n    uint pendingUnstake = pooledStaking.stakerContractPendingUnstakeTotal(staker, stakedContract);\r\n    uint netStake = stake >= pendingUnstake ? stake.sub(pendingUnstake) : 0;\r\n    rewardAmount = netStake.mul(rate).div(rewardRateScale);\r\n    uint rewardsAvailable = pool.amount;\r\n    if (rewardAmount > rewardsAvailable) {\r\n      rewardAmount = rewardsAvailable;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Calls claimReward for each separate (stakedContract, sponsor, token) tuple specified.\r\n  * @param stakedContracts Contracts the staker has a stake on.\r\n  * @param sponsors Sponsors to claim rewards from.\r\n  * @param tokenAddresses Addresses of the ERC20 token of the reward funds.\r\n  * @return tokensRewarded Tokens rewarded by each sponsor.\r\n  */\r\n  function getAvailableStakerRewards(\r\n    address staker,\r\n    address[] calldata stakedContracts,\r\n    address[] calldata sponsors,\r\n    address[] calldata tokenAddresses\r\n  ) external view returns (uint[] memory tokensRewarded) {\r\n    require(stakedContracts.length == sponsors.length, \"stakedContracts.length != sponsors.length\");\r\n    require(stakedContracts.length == tokenAddresses.length, \"stakedContracts.length != tokenAddresses.length\");\r\n\r\n    tokensRewarded = new uint[](stakedContracts.length);\r\n    for (uint i = 0; i < stakedContracts.length; i++) {\r\n      tokensRewarded[i] = getAvailableStakerReward(staker, stakedContracts[i], sponsors[i], tokenAddresses[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  @dev Fetch RewardPool information\r\n  * @param stakedContract contract a staker has a stake on.\r\n  * @param sponsor Sponsor providing the reward funds.\r\n  * @param tokenAddress address of the ERC20 token of the reward funds.\r\n  * @return amount total available token amount of the RewardPool\r\n  * @return rate rate to NXM of the RewardPool.\r\n  * @return nextRateStartRound round number for which the next rate applies. if 0, no nextRate is set.\r\n  * @return nextRate rate for the next round of the RewardPool. if nextRateStartRound is 0 this value is not relevant.\r\n  */\r\n  function getRewardPool(\r\n      address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress\r\n  ) public view returns (uint amount, uint rate, uint nextRateStartRound, uint nextRate) {\r\n    RewardPool storage pool = rewardPools[stakedContract][sponsor][tokenAddress];\r\n    (rate, nextRateStartRound, nextRate) = _getRates(pool, getCurrentRound());\r\n    amount = pool.amount;\r\n  }\r\n\r\n\r\n  /**\r\n  @dev Fetch information for multiple RewardPools\r\n  * @param stakedContracts contract a staker has a stake on.\r\n  * @param sponsors Sponsor providing the reward funds.\r\n  * @param tokenAddresses address of the ERC20 token of the reward funds.\r\n  * @return amount total available token amount of the RewardPool\r\n  * @return rate rate to NXM of the RewardPool.\r\n  * @return nextRateStartRound round number for which the next rate applies. if 0, no nextRate is set.\r\n  * @return nextRate rate for the next round of the RewardPool. if nextRateStartRound is 0 this value is not relevant.\r\n  */\r\n  function getRewardPools(\r\n    address[] calldata stakedContracts,\r\n    address[] calldata sponsors,\r\n    address[] calldata tokenAddresses\r\n  ) external view returns (\r\n    uint[] memory amount,\r\n    uint[] memory rate,\r\n    uint[] memory nextRateStartRound,\r\n    uint[] memory nextRate\r\n  ) {\r\n    require(stakedContracts.length == sponsors.length, \"stakedContracts.length != sponsors.length\");\r\n    require(stakedContracts.length == tokenAddresses.length, \"stakedContracts.length != tokenAddresses.length\");\r\n\r\n    amount = new uint[](stakedContracts.length);\r\n    rate = new uint[](stakedContracts.length);\r\n    nextRateStartRound = new uint[](stakedContracts.length);\r\n    nextRate = new uint[](stakedContracts.length);\r\n\r\n    for (uint i = 0; i < stakedContracts.length; i++) {\r\n      RewardPool storage pool = rewardPools[stakedContracts[i]][sponsors[i]][tokenAddresses[i]];\r\n      (rate[i], nextRateStartRound[i], nextRate[i]) = _getRates(pool, getCurrentRound());\r\n      amount[i] = pool.amount;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Fetch the current round number.\r\n  */\r\n  function getCurrentRound() public view returns (uint) {\r\n    require(roundsStartTime <= now, \"Rounds haven't started yet\");\r\n    return (now - roundsStartTime) / roundDuration + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev Fetch the last round in which a staker fetched his reward from a particular RewardPool.\r\n  * @param stakedContract contract a staker has a stake on.\r\n  * @param sponsor Sponsor providing the reward funds.\r\n  * @param tokenAddress address of the ERC20 token of the reward funds.\r\n  */\r\n  function getLastRoundClaimed(\r\n    address stakedContract,\r\n    address sponsor,\r\n    address tokenAddress,\r\n    address staker\r\n  ) external view returns (uint) {\r\n    return rewardPools[stakedContract][sponsor][tokenAddress].lastRoundClaimed[staker];\r\n  }\r\n\r\n  function _getRates(RewardPool storage pool, uint currentRound) internal view returns (uint rate, uint nextRateStartRound, uint nextRate) {\r\n    bool needsUpdate = pool.nextRateStartRound != 0 && pool.nextRateStartRound <= currentRound;\r\n    if (needsUpdate) {\r\n      return (pool.nextRate, 0, 0);\r\n    }\r\n    return (pool.rate, pool.nextRateStartRound, pool.nextRate);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundsStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakedContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sponsors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensRewarded\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"depositRewardsAndSetRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getAvailableStakerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"stakedContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sponsors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getAvailableStakerRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensRewarded\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastRoundClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRateStartRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakedContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sponsors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getRewardPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextRateStartRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextRate\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"contract INXMMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundsStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommunityStakingIncentives","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000005f71a61000000000000000000000000001bfd82675dbcc7762c84019ca518e701c0cd07e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8af71a1960903027785775fce06ff77871a26c7e80981501ae71f2081149990e"}]}