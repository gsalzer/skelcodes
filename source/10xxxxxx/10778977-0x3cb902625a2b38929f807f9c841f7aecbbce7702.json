{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/market/GitHubMarket.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IMarketBehavior {\r\n    function authenticate(\r\n        address _prop,\r\n        string calldata _args1,\r\n        string calldata _args2,\r\n        string calldata _args3,\r\n        string calldata _args4,\r\n        string calldata _args5,\r\n        address market,\r\n        address account\r\n    )\r\n        external\r\n        returns (\r\n            // solium-disable-next-line indentation\r\n            bool\r\n        );\r\n\r\n    function schema() external view returns (string memory);\r\n\r\n    function getId(address _metrics) external view returns (string memory);\r\n\r\n    function getMetrics(string calldata _id) external view returns (address);\r\n}\r\n\r\ninterface IMarket {\r\n    function authenticate(\r\n        address _prop,\r\n        string calldata _args1,\r\n        string calldata _args2,\r\n        string calldata _args3,\r\n        string calldata _args4,\r\n        string calldata _args5\r\n    )\r\n        external\r\n        returns (\r\n            // solium-disable-next-line indentation\r\n            bool\r\n        );\r\n\r\n    function authenticatedCallback(address _property, bytes32 _idHash)\r\n        external\r\n        returns (address);\r\n\r\n    function deauthenticate(address _metrics) external;\r\n\r\n    function schema() external view returns (string memory);\r\n\r\n    function behavior() external view returns (address);\r\n\r\n    function enabled() external view returns (bool);\r\n\r\n    function votingEndBlockNumber() external view returns (uint256);\r\n\r\n    function toEnable() external;\r\n}\r\n\r\ncontract GitHubMarket is IMarketBehavior, Ownable, Pausable {\r\n    address private khaos;\r\n    address private associatedMarket;\r\n    address private operator;\r\n    bool public priorApproval = true;\r\n\r\n    mapping(address => string) private repositories;\r\n    mapping(bytes32 => address) private metrics;\r\n    mapping(bytes32 => address) private properties;\r\n    mapping(bytes32 => address) private markets;\r\n    mapping(bytes32 => bool) private pendingAuthentication;\r\n    mapping(string => bool) private publicSignatures;\r\n    event Registered(address _metrics, string _repository);\r\n    event Authenticated(string _repository, uint256 _status, string message);\r\n    event Query(\r\n        string githubRepository,\r\n        string publicSignature,\r\n        address account\r\n    );\r\n\r\n    /*\r\n    _githubRepository: ex)\r\n                        personal repository: Akira-Taniguchi/cloud_lib\r\n                        organization repository: dev-protocol/protocol\r\n    _publicSignature: signature string(created by Khaos)\r\n    */\r\n    function authenticate(\r\n        address _prop,\r\n        string memory _githubRepository,\r\n        string memory _publicSignature,\r\n        string memory,\r\n        string memory,\r\n        string memory,\r\n        address _dest,\r\n        address account\r\n    ) external override whenNotPaused returns (bool) {\r\n        require(\r\n            msg.sender == address(0) || msg.sender == associatedMarket,\r\n            \"Invalid sender\"\r\n        );\r\n\r\n        if (priorApproval) {\r\n            require(\r\n                publicSignatures[_publicSignature],\r\n                \"it has not been approved\"\r\n            );\r\n        }\r\n        bytes32 key = createKey(_githubRepository);\r\n        emit Query(_githubRepository, _publicSignature, account);\r\n        properties[key] = _prop;\r\n        markets[key] = _dest;\r\n        pendingAuthentication[key] = true;\r\n        return true;\r\n    }\r\n\r\n    function khaosCallback(\r\n        string memory _githubRepository,\r\n        uint256 _status,\r\n        string memory _message\r\n    ) external whenNotPaused {\r\n        require(msg.sender == khaos, \"illegal access\");\r\n        require(_status == 0, _message);\r\n        bytes32 key = createKey(_githubRepository);\r\n        require(pendingAuthentication[key], \"not while pending\");\r\n        emit Authenticated(_githubRepository, _status, _message);\r\n        register(key, _githubRepository, markets[key], properties[key]);\r\n    }\r\n\r\n    function register(\r\n        bytes32 _key,\r\n        string memory _repository,\r\n        address _market,\r\n        address _property\r\n    ) private {\r\n        address _metrics = IMarket(_market).authenticatedCallback(\r\n            _property,\r\n            _key\r\n        );\r\n        repositories[_metrics] = _repository;\r\n        metrics[_key] = _metrics;\r\n        emit Registered(_metrics, _repository);\r\n    }\r\n\r\n    function createKey(string memory _repository)\r\n        private\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_repository));\r\n    }\r\n\r\n    function getId(address _metrics)\r\n        external\r\n        override\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return repositories[_metrics];\r\n    }\r\n\r\n    function getMetrics(string memory _repository)\r\n        external\r\n        override\r\n        view\r\n        returns (address)\r\n    {\r\n        return metrics[createKey(_repository)];\r\n    }\r\n\r\n    function setPriorApprovalMode(bool _value) external onlyOwner {\r\n        priorApproval = _value;\r\n    }\r\n\r\n    function addPublicSignaturee(string memory _publicSignature) external {\r\n        require(\r\n            msg.sender == owner() || msg.sender == operator,\r\n            \"Invalid sender\"\r\n        );\r\n        publicSignatures[_publicSignature] = true;\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOwner {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setKhaos(address _khaos) external onlyOwner {\r\n        khaos = _khaos;\r\n    }\r\n\r\n    function setAssociatedMarket(address _associatedMarket) external onlyOwner {\r\n        associatedMarket = _associatedMarket;\r\n    }\r\n\r\n    function schema() external override view returns (string memory) {\r\n        return\r\n            '[\"GitHub Repository (e.g, your/awesome-repos)\", \"Khaos Public Signature\"]';\r\n    }\r\n\r\n    function pause() external whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_repository\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Authenticated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"githubRepository\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"publicSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Query\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_metrics\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_repository\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_publicSignature\",\"type\":\"string\"}],\"name\":\"addPublicSignaturee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prop\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_githubRepository\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_publicSignature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authenticate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metrics\",\"type\":\"address\"}],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_repository\",\"type\":\"string\"}],\"name\":\"getMetrics\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_githubRepository\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"khaosCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedMarket\",\"type\":\"address\"}],\"name\":\"setAssociatedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_khaos\",\"type\":\"address\"}],\"name\":\"setKhaos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPriorApprovalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GitHubMarket","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e514daa15dbcb56464b5f2bdaa5d83fe262de472d304794e803136c98be2fdba"}]}