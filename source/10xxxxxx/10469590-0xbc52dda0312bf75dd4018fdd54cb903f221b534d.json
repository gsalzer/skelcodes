{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n  \r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n   \r\n    modifier onlyOwner() {\r\n\r\n        require(msg.sender == owner);\r\n        _;\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        \r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        assert(b <= a);\r\n        return a - b;\r\n\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title tokenRecipient\r\n */\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n/**\r\n * @title TokenERC20\r\n */\r\ncontract TokenERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address _owner) view public returns(uint256) {\r\n      \r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public returns(uint256) {\r\n        \r\n        return allowed[_owner][_spender];\r\n\r\n    }\r\n\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n       \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer( _from, _to, _value);\r\n\r\n    }\r\n\r\n  \r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n      \r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n       \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n       \r\n        // Avoid the front-running attack\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\r\n       \r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    \r\n    function burn(uint256 _value) public returns(bool) {\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\r\n       \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_from, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferMultiple(address[] _to, uint256[] _value) returns(bool) {\r\n        \r\n        require(_to.length == _value.length);\r\n        uint256 i = 0;\r\n        while (i < _to.length) {\r\n           _transfer(msg.sender, _to[i], _value[i]);\r\n           i += 1;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title RICToken\r\n */\r\ncontract RICToken is TokenERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"RICToken\";\r\n    string public constant symbol = \"RIC\";\r\n    uint8 public constant decimals = 6;\r\n\r\n    event Mint(address indexed _to, uint256 _amount);\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner{\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract RICMiner is  RICToken{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    struct Customer{\r\n       uint256 minerAmount; \r\n       address customerAddr;\r\n       address customerEquity;\r\n       bool flag;  \r\n       uint256 buyGoods;\r\n    }\r\n\r\n    struct Good{\r\n       string goodId;\r\n       uint256 price; \r\n       string desc;\r\n       uint256 power;\r\n       address belong;\r\n    }\r\n\r\n    event Records(address user,uint256 value);\r\n    event AddGood(address sender,bool isScuccess,string message);\r\n    event BuyGood(address sender,bool isSuccess,string message);\r\n    event ActiveMiner(address sender,bool isSuccess,string message);\r\n    event Transfer(address _from,address to,uint256);\r\n    \r\n    mapping (string=>Customer) customer;\r\n    mapping (string=>Good) good;\r\n    string[] goods;\r\n    string[] minerAmount; \r\n    address[] purchasedOfUser; \r\n    address[] activationMiner; \r\n\r\n    uint256  private rew; \r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    function () public payable {\r\n\r\n        require(msg.sender != 0x0);\r\n        require(msg.value != 0 ether);\r\n        emit Records(msg.sender,msg.value);\r\n\r\n    }\r\n\r\n    function enter() public  payable{\r\n\r\n        require(msg.sender != 0x0);\r\n        require(msg.value != 0 ether);\r\n        emit Records(msg.sender,msg.value);\r\n\r\n    }\r\n\r\n    function transferETH()public onlyOwner{\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n    function  destroy()  public onlyOwner {\r\n\r\n        selfdestruct(owner);\r\n\r\n    }\r\n\r\n    function getContractBalance() public constant returns (uint256) {\r\n       \r\n        return address(this).balance;\r\n\r\n     }\r\n\r\n     function setRew(uint256 _value) public onlyOwner {\r\n\r\n        rew  = _value*10**5;\r\n\r\n     }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n  \r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;                 \r\n        _transfer(address(this), msg.sender, amount);      \r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        address myAddress = address(this);\r\n        require(myAddress.balance >= amount * sellPrice);   \r\n        _transfer(msg.sender, address(this), amount);      \r\n        msg.sender.transfer(amount * sellPrice);           \r\n    }\r\n\r\n    function createData(string _minerId,string _desc,uint256 _price,address _belong,uint256 _power)public  onlyOwner returns(bool){\r\n\r\n        if(!isGoodAlreadyAdd(_minerId)){\r\n\r\n            good[_minerId].goodId = _minerId;\r\n            good[_minerId].price = _price;\r\n            good[_minerId].desc = _desc;\r\n            good[_minerId].power = _power;\r\n            good[_minerId].belong = _belong;\r\n            goods.push(_minerId);\r\n            emit AddGood(msg.sender,true,\"Miner added successfully\");\r\n            return true;\r\n\r\n        }else{\r\n\r\n            emit AddGood(msg.sender,false,\"The miner has been added!!!\");\r\n            return false;\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function isGoodAlreadyAdd(string _minerId) internal returns(bool){\r\n        \r\n       for(uint256 i= 0;i < goods.length;i++){\r\n            \r\n            if(keccak256(goods[i]) == keccak256(_minerId)){\r\n                \r\n                return true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    function buyGood(string _minerId,address _user,uint256 _amount,address _customerEquity) public onlyOwner{\r\n\r\n         if(isGoodAlreadyAdd(_minerId)){\r\n\r\n            if( _amount != 0 ){\r\n                \r\n                purchasedOfUser.push(_user);\r\n                customer[_minerId].minerAmount = _amount;\r\n                customer[_minerId].customerAddr = _user;\r\n                customer[_minerId].flag = false;\r\n                customer[_minerId].customerEquity = _customerEquity;\r\n                emit BuyGood(customer[_minerId].customerAddr,true,\"Successful purchase of miner\");\r\n                return;         \r\n\r\n            }else{\r\n\r\n                emit BuyGood(customer[_minerId].customerAddr,false,\"Insufficient balance, failed to purchase miner!!!\");\r\n                return;\r\n\r\n            }\r\n\r\n        }else{\r\n\r\n            emit BuyGood(customer[_minerId].customerAddr,false,\"The miner is not released\");\r\n            return;\r\n\r\n        }\r\n\r\n    }\r\n\r\n  \r\n    function activeMiner(string _minerId,address _user,bool _flag)public  onlyOwner{\r\n     \r\n            customer[_minerId].flag = _flag;\r\n            activationMiner.push(_user);\r\n            minerAmount.push(_minerId);\r\n            emit ActiveMiner(_user,true,\"Miner activated\");\r\n            return;\r\n\r\n    }\r\n\r\n    function getMiner() public view returns(address[]){\r\n        \r\n        return purchasedOfUser;\r\n\r\n    }\r\n\r\n    function getActiveMiner() public view returns(address[]){\r\n        \r\n        return activationMiner; \r\n\r\n    }\r\n\r\n    function getPersonPower(address _user,string _minerId) public view returns(uint256){\r\n\r\n        uint256 minerIdPower;\r\n        if(customer[_minerId].customerAddr  == _user && customer[_minerId].flag  == true){\r\n\r\n            minerIdPower += good[_minerId].power;\r\n            return minerIdPower;\r\n\r\n        }\r\n         \r\n    }\r\n\r\n    function getPersonPPP(address user) public view returns(uint256){\r\n\r\n        uint256 person;\r\n\r\n        for(uint256 i = 0;i < minerAmount.length;i++){\r\n           \r\n           if( customer[minerAmount[i]].customerAddr == user ){\r\n\r\n             person += good[minerAmount[i]].power;\r\n\r\n           }\r\n\r\n        }\r\n\r\n        return person;\r\n\r\n    }\r\n\r\n    function getTotalPower() public view returns(uint256){\r\n\r\n        uint256 allPower;\r\n        for(uint256 i = 0;i < minerAmount.length;i++){\r\n            uint256 pre = getPersonPower(customer[minerAmount[i]].customerAddr,minerAmount[i]);\r\n            allPower += pre;\r\n        }\r\n\r\n        return allPower;\r\n\r\n    }\r\n\r\n    function minerReward(string _minerId)public onlyOwner {\r\n            \r\n        _transfer(owner,customer[_minerId].customerEquity,rew);\r\n        emit Transfer(owner,customer[_minerId].customerEquity,rew);\r\n                      \r\n    }             \r\n                          \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getActiveMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerId\",\"type\":\"string\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_customerEquity\",\"type\":\"address\"}],\"name\":\"buyGood\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerId\",\"type\":\"string\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"activeMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"getPersonPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerId\",\"type\":\"string\"}],\"name\":\"minerReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPersonPPP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minerId\",\"type\":\"string\"},{\"name\":\"_desc\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_belong\",\"type\":\"address\"},{\"name\":\"_power\",\"type\":\"uint256\"}],\"name\":\"createData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Records\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isScuccess\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"AddGood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"BuyGood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ActiveMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RICMiner","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://35341a65b390d53aab43c3a2ef3c3932b173f8f0af894bdb3d68f881e40b04b9"}]}