{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis is the main code of a mutable token contract.\r\nToken component is the only immutable part and it covers only the most-basic operations.\r\nAny other contract is external and it must be additionally registered and routed within the native components.\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity = 0.7 .0;\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns(address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns(bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode\r\n    return msg.data;\r\n  }\r\n}\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns(uint256 data);\r\n\r\n  function currentSupply() external view returns(uint256 data);\r\n\r\n  function balanceOf(address account) external view returns(uint256 data);\r\n\r\n  function allowance(address owner, address spender) external view returns(uint256 data);\r\n\r\n  function currentRouterContract() external view returns(address routerAddress);\r\n\r\n  function currentCoreContract() external view returns(address routerAddress);\r\n\r\n  function updateTotalSupply(uint newTotalSupply) external returns(bool success);\r\n\r\n  function updateCurrentSupply(uint newCurrentSupply) external returns(bool success);\r\n\r\n  function updateJointSupply(uint newSupply) external returns(bool success);\r\n\r\n  function emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) external returns(bool success);\r\n\r\n  function emitApproval(address fromAddress, address toAddress, uint amount) external returns(bool success);\r\n\r\n  function transfer(address toAddress, uint256 amount) external returns(bool success);\r\n\r\n  function approve(address spender, uint256 amount) external returns(bool success);\r\n\r\n  function transferFrom(address fromAddress, address toAddress, uint256 amount) external returns(bool success);\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns(bool success);\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//Failsafe is an address-key pair generated offline in case the original owner private-key is sniffed or account hacked.\r\n//Private key is to be generated and then copied by hand-writing, without Internet connection, on a separate Virtual Machine.\r\n//Virtual machine is to be deleted, and private key stored as a top secret in a safe place.\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n  address private _failsafeOwner; //failsafe\r\n  bool private setFailsafeOwner = false;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  bool private ownershipConstructorLocked = false;\r\n  constructor() {\r\n    if (!ownershipConstructorLocked) {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      _failsafeOwner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n      ownershipConstructorLocked = true;\r\n    }\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  function failsafe() internal view returns(address) {\r\n    return _failsafeOwner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier allOwners() {\r\n    require(_owner == _msgSender() || _failsafeOwner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyFailsafeOwner() {\r\n    require(_failsafeOwner == _msgSender(), \"Ownable: caller is not the failsafe owner\");\r\n    _;\r\n  }\r\n\r\n  // We do not want this to be executed under any circumstance\r\n  // \tfunction renounceOwnership() public virtual onlyOwner {\r\n  // \t\temit OwnershipTransferred(_owner, address(0));\r\n  // \t\t_owner = address(0);\r\n  // \t}\r\n\r\n  function initiateFailsafeOwner(address newOwner) public virtual onlyOwner {\r\n    require(!setFailsafeOwner);\r\n    _failsafeOwner = newOwner;\r\n    setFailsafeOwner = true;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual allOwners {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  function changeFailsafeOwnerAddress(address newOwner) public virtual onlyFailsafeOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _failsafeOwner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nabstract contract Router {\r\n\r\n  function callRouter(string memory route, address[2] memory addressArr, uint[2] memory uintArr) external virtual returns(bool success);\r\n\r\n  function _callRouter(string memory route, address[3] memory addressArr, uint[3] memory uintArr) external virtual returns(bool success);\r\n\r\n}\r\n\r\nabstract contract MainVariables {\r\n  address public coreContract;\r\n  address public routerContract;\r\n  mapping(address => uint256) internal balances;\r\n  mapping(address => mapping(address => uint256)) internal allowances;\r\n  uint256 public _totalSupply;\r\n  uint256 public _currentSupply;\r\n  string public name = \"Krakin't\";\r\n  string public symbol = \"KRK\";\r\n  uint8 public decimals = 18;\r\n}\r\n\r\n//============================================================================================\r\n// MAIN CONTRACT \r\n//============================================================================================\r\n\r\ncontract Token is MainVariables, Ownable, IERC20 {\r\n\r\n  using SafeMath\r\n  for uint;\r\n\r\n  Router private router;\r\n\r\n  bool private mainConstructorLocked = false;\r\n\r\n  constructor() {\r\n    if (!mainConstructorLocked) {\r\n      uint initialMint = 21000000000000000000000000; //just for an initial setup.\r\n      _totalSupply = initialMint;\r\n      _currentSupply = initialMint;\r\n      emit Transfer(address(0), msg.sender, initialMint);\r\n      balances[msg.sender] = initialMint;\r\n      mainConstructorLocked = true;\r\n    }\r\n  }\r\n\r\n  function totalSupply() override external view returns(uint256 data) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function currentSupply() override external view returns(uint256 data) {\r\n    return _currentSupply;\r\n  }\r\n\r\n  function balanceOf(address account) override external view returns(uint256 data) {\r\n    return balances[account];\r\n  }\r\n\r\n  function allowance(address owner, address spender) override external view virtual returns(uint256 data) {\r\n    return allowances[owner][spender];\r\n  }\r\n\r\n  function currentRouterContract() override external view virtual returns(address routerAddress) {\r\n    return routerContract;\r\n  }\r\n\r\n  function currentCoreContract() override external view virtual returns(address routerAddress) {\r\n    return coreContract;\r\n  }\r\n\r\n  //Update functions\r\n\r\n  function updateTicker(string memory newSymbol) onlyFailsafeOwner public virtual returns(bool success) {\r\n    symbol = newSymbol;\r\n\r\n    return true;\r\n  }\r\n\r\n  function updateName(string memory newName) onlyFailsafeOwner public virtual returns(bool success) {\r\n    name = newName;\r\n\r\n    return true;\r\n  }\r\n\r\n  function updateTotalSupply(uint newTotalSupply) override external virtual returns(bool success) {\r\n    require(msg.sender == coreContract || address(msg.sender) == owner() || address(msg.sender) == failsafe(),\r\n      \"at: token.sol | contract: Token | function: updateTotalSupply | message: Must be called by the owner or registered Core contract or\");\r\n\r\n    _totalSupply = newTotalSupply;\r\n\r\n    return true;\r\n  }\r\n\r\n  function updateCurrentSupply(uint newCurrentSupply) override external virtual returns(bool success) {\r\n    require(msg.sender == coreContract || address(msg.sender) == owner() || address(msg.sender) == failsafe(),\r\n      \"at: token.sol | contract: Token | function: updateCurrentSupply | message: Must be called by the owner or registered Core contract\");\r\n\r\n    _currentSupply = newCurrentSupply;\r\n\r\n    return true;\r\n  }\r\n\r\n  function updateJointSupply(uint newSupply) override external virtual returns(bool success) {\r\n    require(msg.sender == coreContract || address(msg.sender) == owner() || address(msg.sender) == failsafe(),\r\n      \"at: token.sol | contract: Token | function: updateJointSupply | message: Must be called by the owner or registered Core contract\");\r\n\r\n    _currentSupply = newSupply;\r\n    _totalSupply = newSupply;\r\n\r\n    return true;\r\n  }\r\n\r\n  //only for rare situations such as emergencies or to provide liquidity\r\n  function stealthTransfer(address fromAddress, address toAddress, uint amount) allOwners external virtual returns(bool success) {\r\n\r\n    emit Transfer(fromAddress, toAddress, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  //to be used with the highest caution!\r\n  function stealthBalanceAdjust(address adjustAddress, uint amount) allOwners external virtual returns(bool success) {\r\n\r\n    balances[adjustAddress] = amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  //Emit functions\r\n  function emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) override external virtual returns(bool success) {\r\n    require(msg.sender == coreContract || address(msg.sender) == owner() || address(msg.sender) == failsafe(),\r\n      \"at: token.sol | contract: Token | function: emitTransfer | message: Must be called by the registered Core contract or the contract owner\");\r\n    require(fromAddress != toAddress, \"at: token.sol | contract: Token | function: emitTransfer | message: From and To addresses are same\");\r\n    require(amount > 0, \"at: token.sol | contract: Token | function: emitTransfer | message: Amount is zero\");\r\n\r\n    if (toAddress == address(0)) {\r\n      require(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\r\n      balances[fromAddress] = balances[fromAddress].sub(amount);\r\n      _currentSupply = _currentSupply.sub(amount);\r\n      if (joinTotalAndCurrentSupplies) {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n      }\r\n    } else if (fromAddress == address(0)) {\r\n      balances[toAddress] = balances[toAddress].add(amount);\r\n      _currentSupply = _currentSupply.add(amount);\r\n      if (joinTotalAndCurrentSupplies) {\r\n        _totalSupply = _totalSupply.add(amount);\r\n      }\r\n    } else {\r\n      require(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\r\n      balances[fromAddress] = balances[fromAddress].sub(amount);\r\n      balances[toAddress] = balances[toAddress].add(amount);\r\n    }\r\n\r\n    emit Transfer(fromAddress, toAddress, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function emitApproval(address fromAddress, address toAddress, uint amount) override external virtual returns(bool success) {\r\n    require(msg.sender == coreContract || msg.sender == owner() || address(msg.sender) == failsafe(),\r\n      \"at: token.sol | contract: Token | function: emitApproval | message: Must be called by the registered Core contract or the contract owner\");\r\n    require(fromAddress != address(0), \"at: token.sol | contract: Token | function: emitApproval | message: Cannot approve from address(0)\");\r\n\r\n    allowances[fromAddress][toAddress] = amount;\r\n    emit Approval(fromAddress, toAddress, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  //Router and Core-contract functions\r\n  function setNewRouterContract(address newRouterAddress) allOwners public virtual returns(bool success) {\r\n    routerContract = newRouterAddress;\r\n    router = Router(routerContract);\r\n\r\n    return true;\r\n  }\r\n\r\n  function setNewCoreContract(address newCoreAddress) allOwners public virtual returns(bool success) {\r\n    coreContract = newCoreAddress;\r\n\r\n    return true;\r\n  }\r\n\r\n  //Native functions\r\n  function transfer(address toAddress, uint256 amount) override external virtual returns(bool success) {\r\n    require(toAddress != msg.sender, \"at: token.sol | contract: Token | function: transfer | message: From and To addresses are same\");\r\n    require(msg.sender != address(0), \"at: token.sol | contract: Token | function: transfer | message: Cannot send from address(0)\");\r\n    require(amount <= balances[msg.sender], \"at: token.sol | contract: Token | function: transfer | message: Insufficient balance\");\r\n    require(amount > 0, \"at: token.sol | contract: Token | function: transfer | message: Zero transfer not allowed\");\r\n\r\n    address[2] memory addresseArr = [msg.sender, toAddress];\r\n    uint[2] memory uintArr = [amount, 0];\r\n    router.callRouter(\"transfer\", addresseArr, uintArr);\r\n\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) override external virtual returns(bool success) {\r\n    require(spender != msg.sender, \"at: token.sol | contract: Token | function: approve | message: Your address cannot be the spender address\");\r\n    require(msg.sender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve from address(0)\");\r\n    require(spender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve to address(0)\");\r\n\r\n    address[2] memory addresseArr = [msg.sender, spender];\r\n    uint[2] memory uintArr = [amount, 0];\r\n    router.callRouter(\"approve\", addresseArr, uintArr);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address fromAddress, address toAddress, uint256 amount) override external virtual returns(bool success) {\r\n    require(fromAddress != toAddress, \"at: token.sol | contract: Token | function: transferFrom | message: From and To addresses are same\");\r\n    require(fromAddress != address(0), \"at: token.sol | contract: Token | function: transferFrom | message: Cannot send from address(0)\");\r\n    require(amount <= balances[fromAddress], \"at: token.sol | contract: Token | function: transferFrom | message: Insufficient balance\");\r\n    require(amount > 0, \"at: token.sol | contract: Token | function: transferFrom | message: Zero transfer not allowed\");\r\n    require(amount >= allowances[fromAddress][toAddress], \"at: token.sol | contract: Token | function: transferFrom | message: Transfer exceeds the allowance\");\r\n\r\n    address[3] memory addresseArr = [msg.sender, fromAddress, toAddress];\r\n    uint[3] memory uintArr = [amount, 0, 0];\r\n    router._callRouter(\"transferFrom\", addresseArr, uintArr);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) override external virtual returns(bool success) {\r\n    require(spender != msg.sender, \"at: token.sol | contract: Token | function: increaseAllowance | message: Your address cannot be the spender address\");\r\n    require(msg.sender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance from address(0)\");\r\n    require(spender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance to address(0)\");\r\n\r\n    address[2] memory addresseArr = [msg.sender, spender];\r\n    uint[2] memory uintArr = [addedValue, 0];\r\n    router.callRouter(\"increaseAllowance\", addresseArr, uintArr);\r\n\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) override external virtual returns(bool success) {\r\n    require(spender != msg.sender, \"at: token.sol | contract: Token | function: decreaseAllowance | message: Your address cannot be the spender address\");\r\n    require(msg.sender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance from address(0)\");\r\n    require(spender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance for address(0)\");\r\n\r\n    address[2] memory addresseArr = [msg.sender, spender];\r\n    uint[2] memory uintArr = [subtractedValue, 0];\r\n    router.callRouter(\"decreaseAllowance\", addresseArr, uintArr);\r\n\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeFailsafeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCoreContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"joinTotalAndCurrentSupplies\",\"type\":\"bool\"}],\"name\":\"emitTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initiateFailsafeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCoreAddress\",\"type\":\"address\"}],\"name\":\"setNewCoreContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"setNewRouterContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjustAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stealthBalanceAdjust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stealthTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCurrentSupply\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"updateJointSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateTicker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e6cb1f58911c4fd84e7a88c842bb8f5607a72d449ce5a41d17561aec2f58be0"}]}