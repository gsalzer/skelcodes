{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface DharmaTradeBotV1Interface {\r\n  struct LimitOrderArguments {\r\n    address account;\r\n    address assetToSupply;        // Ether = address(0)\r\n    address assetToReceive;       // Ether = address(0)\r\n    uint256 maximumAmountToSupply;\r\n    uint256 maximumPriceToAccept; // represented as a mantissa (n * 10^18)\r\n    uint256 expiration;\r\n    bytes32 salt;\r\n  }\r\n\r\n  struct LimitOrderExecutionArguments {\r\n    uint256 amountToSupply; // will be lower than maximum for partial fills\r\n    bytes signatures;\r\n    address tradeTarget;\r\n    bytes tradeData;\r\n  }\r\n\r\n  function processLimitOrder(\r\n    LimitOrderArguments calldata args,\r\n    LimitOrderExecutionArguments calldata executionArgs\r\n  ) external returns (uint256 amountReceived);\r\n}\r\n\r\n\r\ninterface TradeBotCommanderV1Interface {\r\n    // events\r\n    event AddedAccount(address account);\r\n    event RemovedAccount(address account);\r\n    event Call(address target, uint256 amount, bytes data, bool ok, bytes returnData);\r\n    \r\n    // callable by accounts\r\n    function processLimitOrder(\r\n        DharmaTradeBotV1Interface.LimitOrderArguments calldata args,\r\n        DharmaTradeBotV1Interface.LimitOrderExecutionArguments calldata executionArgs\r\n    ) external returns (bool ok, uint256 amountReceived);\r\n\r\n    // only callable by owner\r\n    function addAccount(address account) external;\r\n    function removeAccount(address account) external;\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external returns (bool ok, bytes memory returnData);\r\n\r\n    // view functions\r\n    function getAccounts() external view returns (address[] memory);\r\n    function getTradeBot() external view returns (address tradeBot);\r\n}\r\n\r\n\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\ncontract TradeBotCommanderV1Staging is TradeBotCommanderV1Interface, TwoStepOwnable {\r\n    // Track all authorized accounts.\r\n    address[] private _accounts;\r\n\r\n    // Indexes start at 1, as 0 signifies non-inclusion\r\n    mapping (address => uint256) private _accountIndexes;\r\n    \r\n    DharmaTradeBotV1Interface private immutable _TRADE_BOT;\r\n    \r\n    bool public constant isStaging = true;\r\n\r\n    constructor(address tradeBot, address[] memory initialAccounts) public {\r\n        _TRADE_BOT = DharmaTradeBotV1Interface(tradeBot);\r\n        for (uint256 i; i < initialAccounts.length; i++) {\r\n            address account = initialAccounts[i];\r\n            _addAccount(account);\r\n        }\r\n    }\r\n    \r\n    function processLimitOrder(\r\n        DharmaTradeBotV1Interface.LimitOrderArguments calldata args,\r\n        DharmaTradeBotV1Interface.LimitOrderExecutionArguments calldata executionArgs\r\n    ) external override returns (bool ok, uint256 amountReceived) {\r\n        require(\r\n            _accountIndexes[msg.sender] != 0,\r\n            \"Only authorized accounts may trigger limit orders.\"\r\n        );\r\n        \r\n        amountReceived = _TRADE_BOT.processLimitOrder(\r\n            args, executionArgs\r\n        );\r\n\r\n        ok = true;\r\n    }\r\n\r\n    function addAccount(address account) external override onlyOwner {\r\n        _addAccount(account);\r\n    }\r\n\r\n    function removeAccount(address account) external override onlyOwner {\r\n        _removeAccount(account);\r\n    }\r\n\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external override onlyOwner returns (bool ok, bytes memory returnData) {\r\n        // Call the specified target and supply the specified amount and data.\r\n        (ok, returnData) = target.call{value: amount}(data);\r\n\r\n        emit Call(target, amount, data, ok, returnData);\r\n    }\r\n\r\n    function getAccounts() external view override returns (address[] memory) {\r\n        return _accounts;\r\n    }\r\n\r\n    function getTradeBot() external view override returns (address tradeBot) {\r\n        return address(_TRADE_BOT);\r\n    }\r\n\r\n    function _addAccount(address account) internal {\r\n        require(\r\n            _accountIndexes[account] == 0,\r\n            \"Account matching the provided account already exists.\"\r\n        );\r\n        _accounts.push(account);\r\n        _accountIndexes[account] = _accounts.length;\r\n\r\n        emit AddedAccount(account);\r\n    }\r\n    \r\n    function _removeAccount(address account) internal {\r\n        uint256 removedAccountIndex = _accountIndexes[account];\r\n        require(\r\n            removedAccountIndex != 0,\r\n            \"No account found matching the provided account.\"\r\n        );\r\n\r\n        // swap account to remove with the last one then pop from the array.\r\n        address lastAccount = _accounts[_accounts.length - 1];\r\n        _accounts[removedAccountIndex - 1] = lastAccount;\r\n        _accountIndexes[lastAccount] = removedAccountIndex;\r\n        _accounts.pop();\r\n        delete _accountIndexes[account];\r\n\r\n        emit RemovedAccount(account); \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeBot\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialAccounts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAny\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tradeBot\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStaging\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToSupply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmountToSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumPriceToAccept\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct DharmaTradeBotV1Interface.LimitOrderArguments\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountToSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tradeTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"internalType\":\"struct DharmaTradeBotV1Interface.LimitOrderExecutionArguments\",\"name\":\"executionArgs\",\"type\":\"tuple\"}],\"name\":\"processLimitOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TradeBotCommanderV1Staging","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f36f2da9f935a7802a4f1af43a3740a73219a9e00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000c07805842753858fb350674af61ffc9bab319afa000000000000000000000000dfb98aaf1a5c33d959053e9c5357d13f8dc50c7200000000000000000000000099763d7e2291866a4c736c2b1a4db4afe404e40600000000000000000000000059af95ed2fd8baf3c6edb419c6cb2e6abd021616000000000000000000000000da0444b680cbb465378831450f67b21adc5593b3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6882ec7f090f7260a3d85d0a4279513386b83cc29509c5d67f15b01b4947f0ce"}]}