{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Pool {\r\n    using SafeMath for uint256;\r\n    \r\n    string public name;\r\n    uint256 public totalStaked;\r\n\r\n    uint256 public poolStart;\r\n    uint256 public poolEnd;\r\n    uint256 public rewardPerBlock;\r\n\r\n    IERC20 public rewardToken;\r\n    IERC20 public stakeToken;\r\n\r\n    address private CONSTRUCTOR_ADDRESS;\r\n    address private TEAM_POOL;\r\n\r\n    mapping (address => uint256) private STAKED_AMOUNT;\r\n    mapping (address => uint256) private CUMULATED_REWARD;\r\n    mapping (address => uint256) private UPDATED_BLOCK;\r\n    mapping (address => bool) private IS_REGISTED;\r\n    address[] private PARTICIPANT_LIST;\r\n\r\n    constructor (\r\n        string memory _name,\r\n        uint256 _poolStart,\r\n        uint256 _poolEnd,\r\n        uint256 _rewardPerBlock,\r\n        address _rewardToken, \r\n        address _stakeToken,\r\n        address _teamPool\r\n    ) public {\r\n        rewardToken = IERC20(_rewardToken);\r\n        stakeToken = IERC20(_stakeToken);\r\n        name = _name;\r\n        poolStart = _poolStart;\r\n        poolEnd = _poolEnd;\r\n        rewardPerBlock = _rewardPerBlock;\r\n        CONSTRUCTOR_ADDRESS = msg.sender;\r\n        TEAM_POOL = _teamPool;\r\n    }\r\n\r\n    function stake (uint256 amount) external {\r\n        _registAddress(msg.sender);\r\n        _updateReward(msg.sender);\r\n        stakeToken.transferFrom(msg.sender, address(this), amount);\r\n        STAKED_AMOUNT[msg.sender] = STAKED_AMOUNT[msg.sender].add(amount);\r\n        totalStaked = totalStaked.add(amount);\r\n    }\r\n\r\n    function unstake (uint256 amount) external {\r\n        _updateReward(msg.sender);\r\n        require (amount <= STAKED_AMOUNT[msg.sender], \"Unstake amount should be less than staked amount\");\r\n        _withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function claimAllReward () external{\r\n        _updateReward(msg.sender);\r\n        require(CUMULATED_REWARD[msg.sender] > 0, \"Nothing to claim\");\r\n        rewardToken.transfer(msg.sender, CUMULATED_REWARD[msg.sender]);\r\n        CUMULATED_REWARD[msg.sender] = 0;\r\n    }\r\n\r\n    function claimAndUnstakeAll () external {\r\n        _updateReward(msg.sender);\r\n        if(CUMULATED_REWARD[msg.sender] > 0){\r\n            rewardToken.transfer(msg.sender, CUMULATED_REWARD[msg.sender]);\r\n        }\r\n        _withdraw(msg.sender, STAKED_AMOUNT[msg.sender]);\r\n    }\r\n\r\n\r\n    function inquiryDeposit (address host) external view returns (uint256) {\r\n        return STAKED_AMOUNT[host];\r\n    }\r\n    function inquiryRemainReward (address host) external view returns (uint256) {\r\n        return CUMULATED_REWARD[host];\r\n    }\r\n    function inquiryExpectedReward (address host) external view returns (uint256) {\r\n        return _calculateEarn(\r\n            _max(0, _elapsedBlock(UPDATED_BLOCK[host])), \r\n            STAKED_AMOUNT[host]\r\n        ).add(CUMULATED_REWARD[host]);\r\n    }\r\n\r\n\r\n\r\n    function _registAddress (address host) internal {\r\n        if(IS_REGISTED[host]){return;}\r\n        IS_REGISTED[host] = true;\r\n        PARTICIPANT_LIST.push(host);\r\n    }\r\n\r\n    function _withdraw (address host, uint256 amount) internal {\r\n        stakeToken.transfer(host, amount);\r\n        STAKED_AMOUNT[host] = STAKED_AMOUNT[host].sub(amount);\r\n        totalStaked = totalStaked.sub(amount);\r\n    }\r\n\r\n    function _updateAllReward () internal {\r\n        for(uint256 i=0; i<PARTICIPANT_LIST.length; i++){\r\n            _updateReward(PARTICIPANT_LIST[i]);\r\n        }\r\n    }\r\n\r\n    function _updateReward (address host) internal {\r\n        uint256 elapsed = _elapsedBlock(UPDATED_BLOCK[host]);\r\n        if(elapsed <= 0){return;}\r\n        UPDATED_BLOCK[host] = block.number;\r\n        uint256 baseEarned = _calculateEarn(elapsed, STAKED_AMOUNT[host]).add(CUMULATED_REWARD[host]);\r\n        CUMULATED_REWARD[host] = baseEarned.mul(95).div(100);\r\n        CUMULATED_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100);\r\n    }\r\n\r\n    function _elapsedBlock (uint256 updated) internal view returns (uint256) {\r\n        uint256 open = _max(updated, poolStart);\r\n        uint256 close = _min(block.number, poolEnd);\r\n        return open >= close ? 0 : close - open;\r\n    }\r\n\r\n    function _calculateEarn (uint256 elapsed, uint256 staked) internal view returns (uint256) {\r\n        if(staked == 0){return 0;}\r\n        return elapsed.mul(staked).mul(rewardPerBlock).div(totalStaked);\r\n    }\r\n\r\n\r\n    function changeRewardRate (uint256 rate) external {\r\n        require(CONSTRUCTOR_ADDRESS == msg.sender, \"Only constructor can do this\");\r\n        _updateAllReward();\r\n        rewardPerBlock = rate;\r\n    }\r\n\r\n\r\n    function _max(uint a, uint b) private pure returns (uint) {\r\n        return a > b ? a : b;\r\n    }\r\n    function _min(uint a, uint b) private pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_poolStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAllReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAndUnstakeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"inquiryDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"inquiryExpectedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"inquiryRemainReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000a5ebbe0000000000000000000000000000000000000000000000000000000000a8bef500000000000000000000000000000000000000000000001b1ae4d6e2ef5000000000000000000000000000007113b73c813733dade1558a93a1894e0ae06f0f600000000000000000000000093a4b45a190d2903a18496d323ba4e363d30e99b000000000000000000000000ac5fe54094a5e6b2b67fc4b5a113f68753227349000000000000000000000000000000000000000000000000000000000000000b725f726564775f706f6f6c000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://70ef135b06e2354f210612ceb0f832d039cfbb635cc57e94e8fb6f27a567f158"}]}