{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n *             ╔═╗┌─┐┌─┐┬┌─┐┬┌─┐┬   ┌─────────────────────────┐ ╦ ╦┌─┐┌┐ ╔═╗┬┌┬┐┌─┐\r\n *             ║ ║├┤ ├┤ ││  │├─┤│   │ KOL Community Foundation│ │ ║║║├┤ ├┴┐╚═╗│ │ ├┤\r\n *             ╚═╝└  └  ┴└─┘┴┴ ┴┴─┘ └─┬─────────────────────┬─┘ ╚╩╝└─┘└─┘╚═╝┴ ┴ └─┘\r\n *   ┌────────────────────────────────┘                     └──────────────────────────────┐\r\n *   │    ┌─────────────────────────────────────────────────────────────────────────────┐  │\r\n *   └────┤ Dev:Jack Koe ├─────────────┤ Special for: KOL  ├───────────────┤ 20200513   ├──┘\r\n *        └─────────────────────────────────────────────────────────────────────────────┘\r\n */\r\n\r\n library SafeMath {\r\n   function mul(uint a, uint b) internal pure  returns (uint) {\r\n     uint c = a * b;\r\n     require(a == 0 || c / a == b);\r\n     return c;\r\n   }\r\n   function div(uint a, uint b) internal pure returns (uint) {\r\n     require(b > 0);\r\n     uint c = a / b;\r\n     require(a == b * c + a % b);\r\n     return c;\r\n   }\r\n   function sub(uint a, uint b) internal pure returns (uint) {\r\n     require(b <= a);\r\n     return a - b;\r\n   }\r\n   function add(uint a, uint b) internal pure returns (uint) {\r\n     uint c = a + b;\r\n     require(c >= a);\r\n     return c;\r\n   }\r\n   function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n     return a >= b ? a : b;\r\n   }\r\n   function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n     return a < b ? a : b;\r\n   }\r\n   function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n     return a >= b ? a : b;\r\n   }\r\n   function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n     return a < b ? a : b;\r\n   }\r\n }\r\n\r\n /**\r\n  * title KOL Promotion contract\r\n  * dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract ERC20Basic {\r\n   uint public totalSupply;\r\n   function balanceOf(address who) public constant returns (uint);\r\n   function transfer(address to, uint value) public;\r\n   event Transfer(address indexed from, address indexed to, uint value);\r\n }\r\n\r\n contract ERC20 is ERC20Basic {\r\n   function allowance(address owner, address spender) public constant returns (uint);\r\n   function transferFrom(address from, address to, uint value) public;\r\n   function approve(address spender, uint value) public;\r\n   event Approval(address indexed owner, address indexed spender, uint value);\r\n }\r\n\r\n /**\r\n  * title KOL Promotion contract\r\n  * dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract BasicToken is ERC20Basic {\r\n\r\n   using SafeMath for uint;\r\n\r\n   mapping(address => uint) balances;\r\n\r\n   function transfer(address _to, uint _value) public{\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value);\r\n   }\r\n\r\n   function balanceOf(address _owner) public constant returns (uint balance) {\r\n     return balances[_owner];\r\n   }\r\n }\r\n\r\n /**\r\n  * title KOL Promotion contract\r\n  * dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract StandardToken is BasicToken, ERC20 {\r\n   mapping (address => mapping (address => uint)) allowed;\r\n   uint256 public userSupplyed;\r\n\r\n   function transferFrom(address _from, address _to, uint _value) public {\r\n     balances[_to] = balances[_to].add(_value);\r\n     balances[_from] = balances[_from].sub(_value);\r\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     emit Transfer(_from, _to, _value);\r\n   }\r\n\r\n   function approve(address _spender, uint _value) public{\r\n     require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n     allowed[msg.sender][_spender] = _value;\r\n     emit Approval(msg.sender, _spender, _value);\r\n   }\r\n\r\n   function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n }\r\n contract KOL is StandardToken {\r\n }\r\n\r\n /**\r\n  * title KOL Promotion contract\r\n  * dev visit: https://github.com/jackoelv/KOL/\r\n */\r\n\r\n contract Ownable {\r\n     address public owner;\r\n\r\n     constructor() public{\r\n         owner = msg.sender;\r\n     }\r\n\r\n     modifier onlyOwner {\r\n         require(msg.sender == owner);\r\n         _;\r\n     }\r\n     function transferOwnership(address newOwner) onlyOwner public{\r\n         if (newOwner != address(0)) {\r\n             owner = newOwner;\r\n         }\r\n     }\r\n }\r\n /**\r\n  * title KOL Promotion contract\r\n  * dev visit: https://github.com/jackoelv/KOL/\r\n */\r\ncontract KOLPro is Ownable{\r\n  using SafeMath for uint256;\r\n  string public name = \"KOL Promotion\";\r\n  KOL public kol;\r\n  address public draw;\r\n  address private receiver;\r\n\r\n  uint256 public begin;\r\n  uint256 public end;\r\n\r\n  uint256 public iCode;\r\n  uint256 public every = 1 days;\r\n  uint256 public totalRegister;\r\n  uint256 public totalBalance;\r\n\r\n  uint8 public  userLevel1 = 20;\r\n  uint8 public  userLevel2 = 10;\r\n  uint8 public maxlevel = 9;\r\n\r\n  uint16 public  comLevel1Users = 100;\r\n  uint16 public  comLevel2Users = 200;\r\n  uint16 public  comLevel3Users = 300;\r\n\r\n  uint256 public  comLevel1Amount = 30000 * (10 ** 18);\r\n  uint256 public  comLevel2Amount = 50000 * (10 ** 18);\r\n  uint256 public  comLevel3Amount = 100000 * (10 ** 18);\r\n\r\n  uint8 public constant comLevel1 = 3;\r\n  uint8 public constant comLevel2 = 5;\r\n  uint8 public constant comLevel3 = 10;\r\n  uint8 public constant inviteLevel1 = 2;\r\n  uint8 public constant inviteLevel2 = 3;\r\n  uint8 public constant inviteLevel3 = 5;\r\n\r\n\r\n  uint8 public constant fee = 5;\r\n  bool public going = true;\r\n\r\n\r\n  struct lock{\r\n    uint256 begin;\r\n    uint256 amount;\r\n    uint256 end;\r\n    bool withDrawed;\r\n  }\r\n\r\n  struct teamRate{\r\n    uint8 rate;\r\n    uint256 changeTime;\r\n\r\n  }\r\n\r\n  struct dayTeamBonus{\r\n    uint256 theDayLastSecond;\r\n    uint256 theDayTeamBonus;\r\n    uint256 totalTeamBonus;\r\n    uint8 theDayRate;\r\n  }\r\n  struct dayInviteBonus{\r\n    uint256 theDayLastSecond;\r\n    uint256 theDayInviteBonus;\r\n    uint256 totalInviteBonus;\r\n  }\r\n\r\n\r\n\r\n  mapping (address => dayTeamBonus[]) public LockTeamBonus;\r\n  mapping (address => dayInviteBonus[]) public LockInviteBonus;\r\n\r\n\r\n  mapping (address => address[]) public InviteList;\r\n  mapping (address => address[]) public ChildAddrs;\r\n  mapping (address => teamRate[]) public TeamRateList;\r\n  mapping (address => lock[]) public LockHistory;\r\n  mapping (address => uint256) public LockBalance;\r\n\r\n  mapping (uint256 => uint256) public ClosePrice;\r\n  mapping (address => uint256) public TotalUsers;\r\n  mapping (address => uint256) public TotalLockingAmount;\r\n  mapping (uint256 => address) public InviteCode;\r\n  mapping (address => uint256) public RInviteCode;\r\n\r\n  mapping (address => uint8) public isLevelN;\r\n  mapping (uint8 => uint8) public levelRate;\r\n  mapping (address => bool) public USDTOrCoin;\r\n\r\n  //GAS优化\r\n\r\n  event Registed(address _user,uint256 inviteCode);\r\n  event Joined(address _user,uint256 _theTime,uint256 _amount,bool _usdtOrCoin);\r\n  event GradeChanged(address _user,uint8 _oldLevel,uint8 _newLevel);\r\n\r\n  modifier onlyContract {\r\n      require(msg.sender == draw);\r\n      _;\r\n  }\r\n  constructor(address _tokenAddress,address _receiver,uint256 _begin,uint256 _end) public {\r\n    kol = KOL(_tokenAddress);\r\n    receiver = _receiver;\r\n    begin = _begin;\r\n    end = _end;\r\n    InviteCode[0] = owner;\r\n    levelRate[0] = 0;\r\n    levelRate[1] = comLevel1;\r\n    levelRate[2] = comLevel2;\r\n    levelRate[3] = comLevel3;\r\n  }\r\n\r\n  function register(uint256 _fInviteCode) public {\r\n    require(going);\r\n    require(now <= end);\r\n    require(RInviteCode[msg.sender] == 0);\r\n    uint256 random = uint256(keccak256(now, msg.sender)) % 100;\r\n    uint256 _myInviteCode = iCode.add(random);\r\n    iCode = iCode.add(random);\r\n\r\n    require(InviteCode[_myInviteCode] == address(0));\r\n    require(InviteCode[_fInviteCode] != address(0));\r\n    InviteCode[_myInviteCode] = msg.sender;\r\n    RInviteCode[msg.sender] = _myInviteCode;\r\n    emit Registed(msg.sender,iCode);\r\n    totalRegister ++;\r\n    address father = InviteCode[_fInviteCode];\r\n    ChildAddrs[father].push(msg.sender);\r\n    if (InviteList[msg.sender].length < 9){\r\n      InviteList[msg.sender].push(father);\r\n    }\r\n    for (uint i = 0 ; i < InviteList[father].length; i++){\r\n      if (InviteList[msg.sender].length < 9){\r\n        InviteList[msg.sender].push(InviteList[father][i]);\r\n      }else{\r\n        break;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  /**\r\n   * title 转入KOL进行持仓生息\r\n   * _usdtOrCoin, true:金本位; false:币本位\r\n   * dev visit: https://github.com/jackoelv/KOL/\r\n  */\r\n  function join(uint256 _amount,bool _usdtOrCoin) payable  public {\r\n    require(going);\r\n    require(now <= end);\r\n    if (LockBalance[msg.sender] == 0) USDTOrCoin[msg.sender] = _usdtOrCoin;\r\n    kol.transferFrom(msg.sender,draw,_amount);\r\n    LockHistory[msg.sender].push(lock(now,_amount,0,false));\r\n    uint256 oldBalance = LockBalance[msg.sender];\r\n    LockBalance[msg.sender] = LockBalance[msg.sender].add(_amount);\r\n    totalBalance = totalBalance.add(_amount);\r\n    emit Joined(msg.sender,now,_amount,_usdtOrCoin);\r\n\r\n    uint256 amount3;//amount*3/1000以后\r\n\r\n    for (uint i = 0; i<InviteList[msg.sender].length; i++){\r\n      if (i == maxlevel) break;\r\n      if (LockHistory[msg.sender].length == 1){\r\n        //给上面的人数+1\r\n        TotalUsers[InviteList[msg.sender][i]] += 1;\r\n      }else{\r\n        if (oldBalance == 0) TotalUsers[InviteList[msg.sender][i]] += 1;\r\n      }\r\n      //给上面的加入团队总金额\r\n\r\n      TotalLockingAmount[InviteList[msg.sender][i]] = TotalLockingAmount[InviteList[msg.sender][i]].add(_amount);\r\n      queryAndSetLevelN(InviteList[msg.sender][i]);\r\n\r\n      amount3 = calcuDiffAmount(msg.sender,InviteList[msg.sender][i],_amount);\r\n\r\n\r\n      if (i<2){\r\n        setTopInviteBonus(InviteList[msg.sender][i],amount3,i);\r\n      }\r\n\r\n      if (i < maxlevel){\r\n        setTopTeamBonus(InviteList[msg.sender][i],amount3);\r\n      }\r\n    }\r\n  }\r\n  function calcuDiffAmount(address _selfAddr,address _topAddr,uint256 _amount) public view returns(uint256){\r\n    //计算网体收益加速额。\r\n    uint256 topDayLockBalance = queryLockBalance(_topAddr,now);\r\n    uint256 selfDayLockBalance = queryLockBalance(_selfAddr,now);\r\n    uint256 minAmount;\r\n\r\n    if (topDayLockBalance >= selfDayLockBalance){\r\n      minAmount = _amount;\r\n    }else{\r\n        if(LockHistory[_selfAddr].length > 1){\r\n            uint256 previous = LockHistory[_selfAddr].length - 2;\r\n            uint256 theTime = LockHistory[_selfAddr][previous].begin;\r\n            uint256 previousLockBalance = queryLockBalance(_selfAddr,theTime);\r\n            if (topDayLockBalance > previousLockBalance){\r\n              //_amount + previousLockBalance 一定是大于topDayLockBalance的；\r\n              minAmount = topDayLockBalance - previousLockBalance;\r\n            }\r\n        }else{\r\n          minAmount = topDayLockBalance;\r\n        }\r\n    }\r\n    return minAmount.mul(3).div(1000);\r\n  }\r\n  function setTopTeamBonus(address _topAddr,uint256 _minAmount) private {\r\n    uint8 newRate = levelRate[isLevelN[_topAddr]];\r\n    dayTeamBonus memory theDayTB =dayTeamBonus(0,0,0,0);\r\n    uint256 tomorrowLastSecond =getYestodayLastSecond(now) +  every;\r\n\r\n    if (LockTeamBonus[_topAddr].length == 0){\r\n      theDayTB.theDayLastSecond = tomorrowLastSecond;\r\n      theDayTB.theDayTeamBonus = _minAmount;\r\n      theDayTB.totalTeamBonus = _minAmount * newRate / 100;\r\n      theDayTB.theDayRate = newRate;\r\n      LockTeamBonus[_topAddr].push(theDayTB);\r\n    }else{\r\n      uint256 last = LockTeamBonus[_topAddr].length -1;\r\n      theDayTB = LockTeamBonus[_topAddr][last];\r\n\r\n      uint256 lastingDays = (tomorrowLastSecond - theDayTB.theDayLastSecond) / every;\r\n\r\n      theDayTB.totalTeamBonus = lastingDays * theDayTB.theDayTeamBonus * theDayTB.theDayRate/100;//这里不好解决啊\r\n      theDayTB.totalTeamBonus += _minAmount * newRate / 100;\r\n      theDayTB.theDayTeamBonus += _minAmount;\r\n      theDayTB.theDayRate = newRate;\r\n        //必然就都是明天。\r\n      if(theDayTB.theDayLastSecond < tomorrowLastSecond){\r\n        theDayTB.theDayLastSecond = tomorrowLastSecond;\r\n        LockTeamBonus[_topAddr].push(theDayTB);\r\n      }else{\r\n        LockTeamBonus[_topAddr][last]=theDayTB;\r\n      }\r\n    }\r\n  }\r\n  function setTopInviteBonus(address _topAddr,uint256 _minAmount,uint256 _index) private {\r\n    uint8 inviteRate;\r\n    if (_index == 0){\r\n      inviteRate = userLevel1;\r\n    }else if(_index ==1){\r\n      inviteRate = userLevel2;\r\n    }else{\r\n      return;\r\n    }\r\n    uint256 tomorrowLastSecond = getYestodayLastSecond(now) + every;\r\n    if (LockInviteBonus[_topAddr].length == 0){\r\n      LockInviteBonus[_topAddr].push(dayInviteBonus(tomorrowLastSecond,\r\n                                            _minAmount * inviteRate/100,\r\n                                            _minAmount * inviteRate/100));\r\n    }else{\r\n      uint256 last = LockInviteBonus[_topAddr].length -1;\r\n\r\n      uint256 lastDayLastSecond = LockInviteBonus[_topAddr][last].theDayLastSecond;\r\n      uint256 lastDayInviteBonus = LockInviteBonus[_topAddr][last].theDayInviteBonus;\r\n      uint256 lastDayInviteTotalBonus = LockInviteBonus[_topAddr][last].totalInviteBonus;\r\n\r\n      uint256 lastingDays = (tomorrowLastSecond - lastDayLastSecond) / every;\r\n      uint256 newDayInviteBonus = _minAmount* inviteRate / 100 + lastDayInviteBonus;\r\n      uint256 newDayInviteTotalBonus = (lastingDays * lastDayInviteBonus) + _minAmount * inviteRate /100 + lastDayInviteTotalBonus;\r\n        //必然就都是明天。\r\n      if(lastDayLastSecond < tomorrowLastSecond){\r\n        LockInviteBonus[_topAddr].push(dayInviteBonus(tomorrowLastSecond,\r\n                                              newDayInviteBonus,\r\n                                              newDayInviteTotalBonus));\r\n      }else{\r\n        LockInviteBonus[_topAddr][last].theDayInviteBonus = newDayInviteBonus;\r\n        LockInviteBonus[_topAddr][last].totalInviteBonus = newDayInviteTotalBonus;\r\n      }\r\n\r\n    }\r\n  }\r\n  /**\r\n   * title 查询并设置用户的身份级别\r\n   * dev visit: https://github.com/jackoelv/KOL/\r\n  */\r\n  function queryAndSetLevelN(address _addr) private{\r\n    if ((TotalUsers[_addr] >= comLevel3Users) &&\r\n              (TotalLockingAmount[_addr] >= comLevel3Amount) &&\r\n              ChildAddrs[_addr].length>=inviteLevel3){\r\n      if (isLevelN[_addr]!=3){\r\n        emit GradeChanged(_addr,isLevelN[_addr],3);\r\n        isLevelN[_addr] = 3;\r\n        TeamRateList[_addr].push(teamRate(3,now));\r\n      }\r\n    }else if((TotalUsers[_addr] >= comLevel2Users) &&\r\n              (TotalLockingAmount[_addr] >= comLevel2Amount) &&\r\n              ChildAddrs[_addr].length>=inviteLevel2){\r\n      if (isLevelN[_addr]!=2){\r\n        emit GradeChanged(_addr,isLevelN[_addr],2);\r\n        isLevelN[_addr] = 2;\r\n        TeamRateList[_addr].push(teamRate(2,now));\r\n      }\r\n    }else if((TotalUsers[_addr] >= comLevel1Users) &&\r\n              (TotalLockingAmount[_addr] >= comLevel1Amount) &&\r\n              ChildAddrs[_addr].length>=inviteLevel1){\r\n      if (isLevelN[_addr]!=1){\r\n        emit GradeChanged(_addr,isLevelN[_addr],1);\r\n        isLevelN[_addr] = 1;\r\n        TeamRateList[_addr].push(teamRate(1,now));\r\n      }\r\n    }else{\r\n      if (isLevelN[_addr]!=0){\r\n        emit GradeChanged(_addr,isLevelN[_addr],0);\r\n        isLevelN[_addr] = 0;\r\n        TeamRateList[_addr].push(teamRate(0,now));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * title 查询指定时间用户的有效锁仓余额\r\n   * dev visit: https://github.com/jackoelv/KOL/\r\n  */\r\n  function queryLockBalance(address _addr,uint256 _queryTime) public view returns(uint256) {\r\n    require(_queryTime <= end);\r\n    uint256 dayLockBalance;\r\n    for (uint j = 0; j<LockHistory[_addr].length; j++){\r\n      if (LockHistory[_addr][j].withDrawed){\r\n        //如果是已经提现的资金，那就要求计算日期是在起止时间内的。\r\n        if ((_queryTime >= LockHistory[_addr][j].begin) && (_queryTime <= LockHistory[_addr][j].end)){\r\n            dayLockBalance += LockHistory[_addr][j].amount;\r\n        }\r\n      }else{\r\n        if (_queryTime >= LockHistory[_addr][j].begin ){\r\n          //这个就要计入到当天的收益\r\n          dayLockBalance += LockHistory[_addr][j].amount;\r\n        }\r\n      }\r\n    }\r\n    return dayLockBalance;\r\n  }\r\n\r\n  /**\r\n   * title 根据给定时间计算出昨天的最后一秒\r\n   * dev visit: https://github.com/jackoelv/KOL/\r\n  */\r\n  function getYestodayLastSecond(uint256 _queryTime) public view returns(uint256){\r\n    require(_queryTime <= (end + every));\r\n    return (_queryTime.sub(_queryTime.sub(begin) % every) - 1);\r\n  }\r\n\r\n\r\n  function clearLock(address _addr) onlyContract public{\r\n    for (uint i =0;i<LockHistory[_addr].length;i++){\r\n      LockHistory[_addr][i].end = now;\r\n      LockHistory[_addr][i].withDrawed = true;\r\n    }\r\n    LockBalance[_addr] = 0;\r\n  }\r\n  function pushInvite(address _addr,\r\n                      uint256 _theDayLastSecond,\r\n                      uint256 _theDayInviteBonus,\r\n                      uint256 _totalInviteBonus) onlyContract public{\r\n    LockInviteBonus[_addr].push(dayInviteBonus(_theDayLastSecond,\r\n                                              _theDayInviteBonus,\r\n                                              _totalInviteBonus));\r\n  }\r\n  function setLastInvite(address _addr,\r\n                      uint256 _theDayInviteBonus,\r\n                      uint256 _totalInviteBonus) onlyContract public{\r\n    require(LockInviteBonus[_addr].length > 0);\r\n    uint256 last = LockInviteBonus[_addr].length -1;\r\n    LockInviteBonus[_addr][last].theDayInviteBonus = _theDayInviteBonus;\r\n    LockInviteBonus[_addr][last].totalInviteBonus = _totalInviteBonus;\r\n  }\r\n  function pushTeam(address _addr,\r\n                      uint256 _theDayLastSecond,\r\n                      uint256 _theDayTeamBonus,\r\n                      uint256 _totalTeamBonus,\r\n                      uint8 _theDayRate) onlyContract public{\r\n    LockTeamBonus[_addr].push(dayTeamBonus(_theDayLastSecond,\r\n                                              _theDayTeamBonus,\r\n                                              _totalTeamBonus,\r\n                                              _theDayRate));\r\n  }\r\n  function setLastTeam(address _addr,\r\n                      uint256 _theDayTeamBonus,\r\n                      uint256 _totalTeamBonus,\r\n                      uint8 _theDayRate) onlyContract public{\r\n    require(LockTeamBonus[_addr].length > 0);\r\n    uint256 last = LockTeamBonus[_addr].length - 1;\r\n    LockTeamBonus[_addr][last].theDayTeamBonus = _theDayTeamBonus;\r\n    LockTeamBonus[_addr][last].totalTeamBonus = _totalTeamBonus;\r\n    LockTeamBonus[_addr][last].theDayRate = _theDayRate;\r\n\r\n  }\r\n  function subTotalUsers(address _addr) onlyContract public{\r\n    TotalUsers[_addr] = TotalUsers[_addr].sub(1);\r\n  }\r\n  function subTotalLockingAmount(address _addr,uint256 _amount) onlyContract public{\r\n    TotalLockingAmount[_addr] = TotalLockingAmount[_addr].sub(_amount);\r\n  }\r\n  function subTotalBalance(uint256 _amount) onlyContract public{\r\n    totalBalance=totalBalance.sub(_amount);\r\n  }\r\n  function qsLevel(address _addr) onlyContract public{\r\n    queryAndSetLevelN(_addr);\r\n  }\r\n  function setInviteTeam(address _addr) onlyContract public{\r\n    uint256 yestodayLastSecond = getYestodayLastSecond(now);\r\n    uint256 last;\r\n    if (LockInviteBonus[_addr].length > 0){\r\n      last = LockInviteBonus[_addr].length - 1;\r\n      LockInviteBonus[_addr][last].theDayInviteBonus = 0;\r\n      LockInviteBonus[_addr][last].totalInviteBonus = 0;\r\n    }\r\n    if (LockInviteBonus[_addr].length > 0){\r\n      last = LockTeamBonus[_addr].length - 1;\r\n      LockTeamBonus[_addr][last].theDayTeamBonus = 0;\r\n      LockTeamBonus[_addr][last].totalTeamBonus = 0;\r\n      LockTeamBonus[_addr][last].theDayRate = 0;\r\n    }\r\n  }\r\n  /**\r\n   * title 录入KOL的收盘价\r\n   * dev visit: https://github.com/jackoelv/KOL/\r\n  */\r\n  function putClosePrice(uint256 price,uint256 _queryTime) onlyOwner public{\r\n    //录入的价格为4位小数\r\n    require(_queryTime <= (end + 2*every));\r\n    uint256 yestodayLastSecond = getYestodayLastSecond(_queryTime);\r\n    ClosePrice[yestodayLastSecond] = price;\r\n  }\r\n\r\n  function setReceiver(address _receiver) onlyOwner public{\r\n    receiver = _receiver;\r\n  }\r\n  function draw() onlyOwner public{\r\n    receiver.send(address(this).balance);\r\n  }\r\n  function setContract(address _addr) onlyOwner public{\r\n    draw = _addr;\r\n  }\r\n  function setGoing(bool _going) onlyOwner public{\r\n    going = _going;\r\n  }\r\n  function setEnd(uint256 _end) onlyOwner public{\r\n    end = _end;\r\n  }\r\n\r\n  function getLockLen(address _addr) public view returns(uint256) {\r\n    return(LockHistory[_addr].length);\r\n  }\r\n  function getFathersLength(address _addr) public view returns(uint256){\r\n    return InviteList[_addr].length;\r\n  }\r\n  function getLockTeamBonusLen(address _addr) public view returns(uint256){\r\n    return(LockTeamBonus[_addr].length);\r\n  }\r\n  function getLockInviteBonusLen(address _addr) public view returns(uint256){\r\n    return(LockInviteBonus[_addr].length);\r\n  }\r\n  function getChildsLen(address _addr) public view returns(uint256){\r\n  return(ChildAddrs[_addr].length);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLevelN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"subTotalUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_queryTime\",\"type\":\"uint256\"}],\"name\":\"queryLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel2Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kol\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel3Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_theDayInviteBonus\",\"type\":\"uint256\"},{\"name\":\"_totalInviteBonus\",\"type\":\"uint256\"}],\"name\":\"setLastInvite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_theDayLastSecond\",\"type\":\"uint256\"},{\"name\":\"_theDayTeamBonus\",\"type\":\"uint256\"},{\"name\":\"_totalTeamBonus\",\"type\":\"uint256\"},{\"name\":\"_theDayRate\",\"type\":\"uint8\"}],\"name\":\"pushTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"begin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TotalLockingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel2Users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockHistory\",\"outputs\":[{\"name\":\"begin\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"withDrawed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_selfAddr\",\"type\":\"address\"},{\"name\":\"_topAddr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcuDiffAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockTeamBonusLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel1Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClosePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_theDayLastSecond\",\"type\":\"uint256\"},{\"name\":\"_theDayInviteBonus\",\"type\":\"uint256\"},{\"name\":\"_totalInviteBonus\",\"type\":\"uint256\"}],\"name\":\"pushInvite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"USDTOrCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockInviteBonusLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InviteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userLevel2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"every\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_going\",\"type\":\"bool\"}],\"name\":\"setGoing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"_queryTime\",\"type\":\"uint256\"}],\"name\":\"putClosePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_theDayTeamBonus\",\"type\":\"uint256\"},{\"name\":\"_totalTeamBonus\",\"type\":\"uint256\"},{\"name\":\"_theDayRate\",\"type\":\"uint8\"}],\"name\":\"setLastTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TeamRateList\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint8\"},{\"name\":\"changeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockTeamBonus\",\"outputs\":[{\"name\":\"theDayLastSecond\",\"type\":\"uint256\"},{\"name\":\"theDayTeamBonus\",\"type\":\"uint256\"},{\"name\":\"totalTeamBonus\",\"type\":\"uint256\"},{\"name\":\"theDayRate\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subTotalBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel3Users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel1Users\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RInviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"clearLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteLevel2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getChildsLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inviteLevel3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setInviteTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_queryTime\",\"type\":\"uint256\"}],\"name\":\"getYestodayLastSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxlevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InviteCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_usdtOrCoin\",\"type\":\"bool\"}],\"name\":\"join\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"qsLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subTotalLockingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getFathersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"going\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TotalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockInviteBonus\",\"outputs\":[{\"name\":\"theDayLastSecond\",\"type\":\"uint256\"},{\"name\":\"theDayInviteBonus\",\"type\":\"uint256\"},{\"name\":\"totalInviteBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fInviteCode\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChildAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_begin\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inviteCode\",\"type\":\"uint256\"}],\"name\":\"Registed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_theTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usdtOrCoin\",\"type\":\"bool\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_newLevel\",\"type\":\"uint8\"}],\"name\":\"GradeChanged\",\"type\":\"event\"}]","ContractName":"KOLPro","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000946e36c2887025c389ef85ea5f9150e0bed4d6900000000000000000000000068bf941e428bcd731d678799ba9da20e52244383000000000000000000000000000000000000000000000000000000005eb8250000000000000000000000000000000000000000000000000000000000618bec80","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bad5330fcda8376edcc9008d84276d46757360ce065de422be58ecd1e4cc2c17"}]}