{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/sol6/IERC20.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 digits);\r\n\r\n    function totalSupply() external view returns (uint256 supply);\r\n}\r\n\r\n\r\n// to support backward compatible contract name -- so function signature remains same\r\nabstract contract ERC20 is IERC20 {\r\n\r\n}\r\n\r\n// File: contracts/sol6/IKyberFeeHandler.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IKyberFeeHandler {\r\n    event RewardPaid(address indexed staker, uint256 indexed epoch, IERC20 indexed token, uint256 amount);\r\n    event RebatePaid(address indexed rebateWallet, IERC20 indexed token, uint256 amount);\r\n    event PlatformFeePaid(address indexed platformWallet, IERC20 indexed token, uint256 amount);\r\n    event KncBurned(uint256 kncTWei, IERC20 indexed token, uint256 amount);\r\n\r\n    function handleFees(\r\n        IERC20 token,\r\n        address[] calldata eligibleWallets,\r\n        uint256[] calldata rebatePercentages,\r\n        address platformWallet,\r\n        uint256 platformFee,\r\n        uint256 networkFee\r\n    ) external payable;\r\n\r\n    function claimReserveRebate(address rebateWallet) external returns (uint256);\r\n\r\n    function claimPlatformFee(address platformWallet) external returns (uint256);\r\n\r\n    function claimStakerReward(\r\n        address staker,\r\n        uint256 epoch\r\n    ) external returns(uint amount);\r\n}\r\n\r\n// File: contracts/sol6/RewardsClaimer.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ncontract RewardsClaimer {\r\n    function claimRewardStakersEpochs(\r\n        IKyberFeeHandler[] calldata feeHandlers,\r\n        uint256[] calldata epochs,\r\n        address[] calldata stakers\r\n    ) external {\r\n        for (uint i = 0; i < feeHandlers.length; i++) {\r\n            for (uint j = 0; j < epochs.length; j++) {\r\n                for (uint k = 0; k < stakers.length; k++) {\r\n                    feeHandlers[i].claimStakerReward(stakers[k], epochs[j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimRewardStakerEpochs(\r\n        IKyberFeeHandler[] calldata feeHandlers,\r\n        uint256[] calldata epochs,\r\n        address staker\r\n    ) external {\r\n        for (uint i = 0; i < feeHandlers.length; i++) {\r\n            for (uint j = 0; j < epochs.length; j++) {\r\n                feeHandlers[i].claimStakerReward(staker, epochs[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimRewardStakersEpoch(\r\n        IKyberFeeHandler[] calldata feeHandlers,\r\n        uint256 epoch,\r\n        address[] calldata stakers\r\n    ) external {\r\n        for (uint i = 0; i < feeHandlers.length; i++) {\r\n            for (uint j = 0; j < stakers.length; j++) {\r\n                feeHandlers[i].claimStakerReward(stakers[j], epoch);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IKyberFeeHandler[]\",\"name\":\"feeHandlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimRewardStakerEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberFeeHandler[]\",\"name\":\"feeHandlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"claimRewardStakersEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberFeeHandler[]\",\"name\":\"feeHandlers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"claimRewardStakersEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardsClaimer","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79c115fb0aec527dfcdbfab0b1bdd30e4e972db8d5adacb14ce0aea8cf54b4b5"}]}