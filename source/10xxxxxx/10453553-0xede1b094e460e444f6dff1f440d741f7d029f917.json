{"status":"1","message":"OK","result":[{"SourceCode":"/* Libertas Liquidity vault */\r\npragma solidity ^0.5.13;\r\n\r\ncontract LiquidityVault {\r\n    \r\n    /* Uniswap Pool */\r\n    ERC20 constant liquidityToken = ERC20(0x6eF67eE504A60De5F558B5302bDbA9F5dA11DFAd);\r\n    \r\n    address blobby = msg.sender;\r\n    uint256 public lastTradingFeeDistribution;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;  \r\n    \r\n\r\n    /* Call to begin unlocking */\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == blobby);\r\n        migrationLock = now;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n     /* Moves liquidity to new location, assuming the 14 days lockup has passed -preventing abuse. */\r\n    function processMigration() external {\r\n        require(msg.sender == blobby);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(migrationRecipient, liquidityBalance);\r\n    }   \r\n}\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastTradingFeeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityVault","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ce064ef0c203fbf70ad891afb4f8a7dd14a59bbf11afad7af79350a3bc93ebd3"}]}