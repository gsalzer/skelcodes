{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16; \r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface tokenInterface\r\n{\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function burn(uint amount) external returns(bool);\r\n}\r\n\r\ninterface dividendInterface \r\n{\r\n   function directDistribute(address _token, uint _amount) external returns(bool);\r\n   function addToRegular(address _token, uint _amount) external returns(bool);\r\n   function withdrawMyDividend(address _token, bool _reInvest) external returns (bool);\r\n   function distributedTotalAmountTillNow_E(address _token) external view returns(uint);\r\n   function distributedTotalAmountTillNow_T(address _token) external view returns(uint);\r\n   function resetUserDatas(address _token, address _user) external returns(bool);\r\n}\r\n\r\n\r\n\r\ncontract UTOPIA_Staking is owned \r\n{\r\n    using SafeMath for uint256;\r\n\r\n    bool public safeGuard;\r\n    \r\n    mapping(address => bool) public authorisedToken;\r\n    mapping(address => uint8) public burnMethod;\r\n    uint public unStakeBurnCut; // 0% default\r\n    uint public deflateBurnCutIn = 1000000; // 1% default\r\n    uint public deflateBurnCutOut = 1000000; // 1% defualt\r\n\r\n\r\n    // token => user => stakedAmount\r\n    mapping(address => mapping(address => uint)) public userStakedAmount;\r\n    mapping(address => mapping(address => bool)) public blackListedUser;\r\n\r\n    // token => totalStakedAmount\r\n    mapping(address => uint) public totalStakedAmount;\r\n\r\n    address public dividendContract;\r\n\r\n\r\n    function setAuthorisedToken(address _token, bool _authorise, uint8 _burnMethod ) public onlyOwner returns(bool)\r\n    {\r\n        authorisedToken[_token] = _authorise;\r\n        burnMethod[_token] = _burnMethod;\r\n        return true;\r\n    }\r\n\r\n    function setDividendContract(address _dividendContract) public onlyOwner returns(bool)\r\n    {\r\n        dividendContract = _dividendContract;\r\n        return true;\r\n    }\r\n\r\n    function setUnStakeBurnCut(uint _unStakeBurnCut) public onlyOwner returns(bool)\r\n    {\r\n        unStakeBurnCut = _unStakeBurnCut;\r\n        return true;\r\n    }    \r\n\r\n    function setDeflateBurnCutIn(uint _deflateBurnCutIn) public onlyOwner returns(bool)\r\n    {\r\n        deflateBurnCutIn = _deflateBurnCutIn;\r\n        return true;\r\n    }    \r\n\r\n    function setDeflateBurnCutOut(uint _deflateBurnCutOut) public onlyOwner returns(bool)\r\n    {\r\n        deflateBurnCutOut = _deflateBurnCutOut;\r\n        return true;\r\n    }  \r\n\r\n    function setUserToBlackList(address _token, address _user) public onlyOwner returns(bool)\r\n    {\r\n        blackListedUser[_token][_user] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeUserFromBlackList(address _token, address _user) public onlyOwner returns(bool)\r\n    {\r\n        blackListedUser[_token][_user] = false;\r\n        return true;\r\n    }\r\n    event stakeMyTokenEv(address token, address user, uint amount,uint remaining, uint InBurnCut );\r\n    function stakeMyToken(address _token, uint _amount) public returns(bool)\r\n    {\r\n        require(!safeGuard, \"Paused by admin\");\r\n        require(authorisedToken[_token] , \"token not authorised\");\r\n        require(tokenInterface(_token).transferFrom(msg.sender, address(this), _amount),\"token transfer failed\");\r\n\r\n        uint usrAmount = userStakedAmount[_token][msg.sender];\r\n        require(dividendInterface(dividendContract).withdrawMyDividend(_token,false), \"withdraw fail\");\r\n\r\n        uint burnCut = _amount * deflateBurnCutIn / 100000000;\r\n        uint remaining = _amount - burnCut;\r\n        if(burnCut > 0) \r\n        {\r\n            if(burnMethod[_token] == 1 ) require(tokenInterface(_token).transfer(address(0), burnCut ), \"token in burn failed\");\r\n            else if(burnMethod[_token] == 2 ) require(tokenInterface(_token).burn(burnCut), \"token in burn failed\");\r\n            else if(burnMethod[_token] == 3) \r\n            {\r\n                require(tokenInterface(_token).transfer(dividendContract, burnCut),\"token transfer failed\" );\r\n                require(dividendInterface(dividendContract).directDistribute(_token,burnCut), \"stake update fail\");\r\n            } \r\n            else if(burnMethod[_token] == 4) \r\n            {\r\n                require(tokenInterface(_token).transfer(dividendContract, burnCut),\"token transfer failed\" );\r\n                require(dividendInterface(dividendContract).addToRegular(_token,burnCut), \"stake update fail\");                \r\n            }           \r\n        }\r\n\r\n        userStakedAmount[_token][msg.sender] = usrAmount.add(remaining);\r\n        totalStakedAmount[_token] = totalStakedAmount[_token].add(remaining);\r\n\r\n\r\n        emit stakeMyTokenEv(_token, msg.sender,_amount, remaining, burnCut);\r\n        return true;\r\n    }\r\n\r\n    event reInvestMyTokenEv(address token, address user, uint amount,uint remaining, uint InBurnCut );\r\n    function reInvestMyToken(address _token, uint _amount) public returns(bool)\r\n    {\r\n        require(authorisedToken[_token] , \"token not authorised\");\r\n        require(msg.sender == dividendContract, \"Invalid caller\");\r\n\r\n        uint usrAmount = userStakedAmount[_token][tx.origin];\r\n        //require(dividendInterface(dividendContract).withdrawMyDividend(_token), \"withdraw fail\");\r\n\r\n        uint burnCut = _amount * deflateBurnCutIn / 100000000;\r\n        uint remaining = _amount - burnCut;\r\n        if(burnCut > 0) \r\n        {\r\n            if(burnMethod[_token] == 1 ) require(tokenInterface(_token).transfer(address(0), burnCut ), \"token in burn failed\");\r\n            else if(burnMethod[_token] == 2 ) require(tokenInterface(_token).burn(burnCut), \"token in burn failed\");\r\n            else if(burnMethod[_token] == 3) \r\n            {\r\n                require(tokenInterface(_token).transfer(dividendContract, burnCut),\"token transfer failed\" );\r\n                require(dividendInterface(dividendContract).directDistribute(_token,burnCut), \"stake update fail\");\r\n            } \r\n            else if(burnMethod[_token] == 4) \r\n            {\r\n                require(tokenInterface(_token).transfer(dividendContract, burnCut),\"token transfer failed\" );\r\n                require(dividendInterface(dividendContract).addToRegular(_token,burnCut), \"stake update fail\");                \r\n            }           \r\n        }\r\n\r\n        userStakedAmount[_token][tx.origin] = usrAmount.add(remaining);\r\n        totalStakedAmount[_token] = totalStakedAmount[_token].add(remaining);\r\n\r\n\r\n        emit stakeMyTokenEv(_token, tx.origin,_amount, remaining, burnCut);\r\n        return true;\r\n    }\r\n\r\n\r\n    event unStakeMyTokenEv(address token, address user, uint amount,uint remaining, uint unStakeAndOutBurnCut );\r\n    function unStakeMyToken(address _token, uint _amount) public returns(bool)\r\n    {\r\n        require(!safeGuard, \"Paused by admin\");\r\n        require(authorisedToken[_token] , \"token not authorised\");\r\n        require(!blackListedUser[_token][msg.sender], \"this user is not allowed\");\r\n        uint usrAmount = userStakedAmount[_token][msg.sender];\r\n        require(usrAmount >= _amount && _amount > 0 ,\"Not enough token\");\r\n        if(usrAmount > 0 ) require(dividendInterface(dividendContract).withdrawMyDividend(_token, false), \"withdraw fail\");\r\n\r\n        userStakedAmount[_token][msg.sender] = usrAmount.sub(_amount);\r\n        totalStakedAmount[_token] = totalStakedAmount[_token].sub(_amount);\r\n\r\n\r\n\r\n        uint burnCut = _amount * (deflateBurnCutOut + unStakeBurnCut)/ 100000000;\r\n        uint remaining = _amount - burnCut;\r\n        if(burnCut > 0) \r\n        {\r\n            if(burnMethod[_token] == 1) require(tokenInterface(_token).transfer(address(0), burnCut ), \"token our and unStake burn failed\");\r\n            else if(burnMethod[_token] == 2) require(tokenInterface(_token).burn(burnCut), \"token our and unStake burn failed\");\r\n            else if(burnMethod[_token] == 3) \r\n            {\r\n                require(tokenInterface(_token).transfer(dividendContract, burnCut),\"token transfer failed\" );\r\n                require(dividendInterface(dividendContract).directDistribute(_token,burnCut), \"stake update fail\");\r\n            }\r\n        }\r\n\r\n        if(burnMethod[_token] == 0) require(tokenInterface(_token).transfer(msg.sender, _amount ), \"token transfer failed 1\");\r\n        else require(tokenInterface(_token).transfer(msg.sender, remaining ), \"token transfer failed 2\");\r\n        emit unStakeMyTokenEv(_token, msg.sender,_amount, remaining, burnCut);\r\n        return true;\r\n    }\r\n\r\n\r\n    event unStakeBlackListedEv(address tokenaddress, address _user, address _owner, uint amount);\r\n    function unStakeBlackListed(address _token,address _user) public onlyOwner returns(bool)\r\n    {\r\n        require(authorisedToken[_token] , \"token not authorised\");\r\n        uint usrAmount = userStakedAmount[_token][_user];\r\n        require(usrAmount > 0 , \"not stake amount found\");\r\n        require(dividendInterface(dividendContract).resetUserDatas(_token,_user), \"withdraw fail\");\r\n\r\n        userStakedAmount[_token][_user] = 0;\r\n        totalStakedAmount[_token] = totalStakedAmount[_token].sub(usrAmount);\r\n        require(tokenInterface(_token).transfer(owner, usrAmount ), \"token transfer failed 2\");\r\n        emit unStakeBlackListedEv(_token,_user, owner,usrAmount);\r\n        return true;\r\n    }\r\n\r\n    function emergencyWithdrawEth(uint _amount) public onlyOwner returns (bool)\r\n    {\r\n        owner.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function emergencyWithdrawToken(address _token, uint _amount) public onlyOwner returns (bool)\r\n    {\r\n        require(tokenInterface(_token).transfer(owner, _amount ), \"token transfer failed\");\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeSafeGuardStatus() public onlyOwner returns(bool)\r\n    {\r\n        safeGuard = !safeGuard;\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"InBurnCut\",\"type\":\"uint256\"}],\"name\":\"reInvestMyTokenEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"InBurnCut\",\"type\":\"uint256\"}],\"name\":\"stakeMyTokenEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStakeBlackListedEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakeAndOutBurnCut\",\"type\":\"uint256\"}],\"name\":\"unStakeMyTokenEv\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnMethod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeGuardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deflateBurnCutIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deflateBurnCutOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reInvestMyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUserFromBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorise\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_burnMethod\",\"type\":\"uint8\"}],\"name\":\"setAuthorisedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deflateBurnCutIn\",\"type\":\"uint256\"}],\"name\":\"setDeflateBurnCutIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deflateBurnCutOut\",\"type\":\"uint256\"}],\"name\":\"setDeflateBurnCutOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividendContract\",\"type\":\"address\"}],\"name\":\"setDividendContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unStakeBurnCut\",\"type\":\"uint256\"}],\"name\":\"setUnStakeBurnCut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setUserToBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unStakeBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unStakeBurnCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStakeMyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UTOPIA_Staking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fe548a351a51a292867946612ae6eb1be5b0fab48714d6e21a0729f5c574b6d2"}]}