{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\n\r\ninterface DharmaGasReserveInterface {\r\n    // events\r\n    event EtherReceived(address sender, uint256 amount);\r\n    event Pulled(address indexed gasAccount, uint256 amount);\r\n    event AddedGasAccount(address gasAccount);\r\n    event RemovedGasAccount(address gasAccount);\r\n    event NewPullAmount(uint256 pullAmount);\r\n    event NewRateLimit(uint256 interval);\r\n    event Call(address target, uint256 amount, bytes data, bool ok, bytes returnData);\r\n\r\n    // only callable by designated \"gas accounts\"\r\n    function pullGas() external;\r\n\r\n    // only callable by owner\r\n    function addGasAccount(address gasAccount) external;\r\n    function removeGasAccount(address gasAccount) external;\r\n    function setPullAmount(uint256 amount) external;\r\n    function setRateLimit(uint256 interval) external;\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external returns (bool ok, bytes memory returnData);\r\n\r\n    // view functions\r\n    function getGasAccounts() external view returns (address[] memory);\r\n    function getPullAmount() external view returns (uint256);\r\n    function getRateLimit() external view returns (uint256);\r\n    function getLastPullTime(address gasAccount) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\ncontract DharmaGasReserveStaging is DharmaGasReserveInterface, TwoStepOwnable {\r\n    // Track all authorized gas accounts.\r\n    address[] private _gasAccounts;\r\n\r\n    // Indexes start at 1, as 0 signifies non-inclusion\r\n    mapping (address => uint256) private _gasAccountIndexes;\r\n    \r\n    mapping (address => uint256) private _lastPullTime;\r\n    \r\n    uint256 private _pullAmount;\r\n    uint256 private _rateLimit;\r\n\r\n    constructor(address[] memory initialGasAccounts) public {\r\n        _setPullAmount(3 ether);\r\n        _setRateLimit(2 hours);\r\n        for (uint256 i; i < initialGasAccounts.length; i++) {\r\n            address gasAccount = initialGasAccounts[i];\r\n            _addGasAccount(gasAccount);\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        if (msg.value > 0) {\r\n            emit EtherReceived(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function pullGas() external {\r\n        require(\r\n            _gasAccountIndexes[msg.sender] != 0,\r\n            \"Only authorized gas accounts may pull from this contract.\"\r\n        );\r\n        \r\n        require(\r\n            msg.sender.balance < _pullAmount,\r\n            \"Gas account balance is not yet below the pull amount.\"\r\n        );\r\n\r\n        require(\r\n            now > _lastPullTime[msg.sender] + _rateLimit,\r\n            \"Gas account is currently rate-limited.\"\r\n        );\r\n        _lastPullTime[msg.sender] = now;\r\n\r\n        uint256 pullAmount = _pullAmount;\r\n        \r\n        require(\r\n            address(this).balance >= pullAmount,\r\n            \"Insufficient funds held by the reserve.\"\r\n        );\r\n        \r\n        (bool ok, ) = msg.sender.call.value(pullAmount)(\"\");\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n\r\n        emit Pulled(msg.sender, pullAmount);\r\n    }\r\n\r\n    function addGasAccount(address gasAccount) external onlyOwner {\r\n        _addGasAccount(gasAccount);\r\n    }\r\n\r\n    function removeGasAccount(address gasAccount) external onlyOwner {\r\n        _removeGasAccount(gasAccount);\r\n    }\r\n\r\n    function setPullAmount(uint256 amount) external onlyOwner {\r\n        _setPullAmount(amount);\r\n    }\r\n\r\n    function setRateLimit(uint256 interval) external onlyOwner {\r\n        _setRateLimit(interval);\r\n    }\r\n\r\n    function callAny(\r\n        address payable target, uint256 amount, bytes calldata data\r\n    ) external onlyOwner returns (bool ok, bytes memory returnData) {\r\n        // Call the specified target and supply the specified data.\r\n        (ok, returnData) = target.call.value(amount)(data);\r\n\r\n        emit Call(target, amount, data, ok, returnData);\r\n    }\r\n\r\n    function getGasAccounts() external view returns (address[] memory) {\r\n        return _gasAccounts;\r\n    }\r\n\r\n    function getPullAmount() external view returns (uint256) {\r\n        return  _pullAmount;\r\n    }\r\n\r\n    function getRateLimit() external view returns (uint256) {\r\n        return _rateLimit;\r\n    }\r\n\r\n    function getLastPullTime(address gasAccount) external view returns (uint256) {\r\n        return _lastPullTime[gasAccount];\r\n    }\r\n\r\n    function _addGasAccount(address gasAccount) internal {\r\n        require(\r\n            _gasAccountIndexes[gasAccount] == 0,\r\n            \"Gas account matching the provided account already exists.\"\r\n        );\r\n        _gasAccounts.push(gasAccount);\r\n        _gasAccountIndexes[gasAccount] = _gasAccounts.length;\r\n\r\n        emit AddedGasAccount(gasAccount);\r\n    }\r\n    \r\n    function _removeGasAccount(address gasAccount) internal {\r\n        uint256 removedGasAccountIndex = _gasAccountIndexes[gasAccount];\r\n        require(\r\n            removedGasAccountIndex != 0,\r\n            \"No gas account found matching the provided account.\"\r\n        );\r\n\r\n        // swap account to remove with the last one then pop from the array.\r\n        address lastGasAccount = _gasAccounts[_gasAccounts.length - 1];\r\n        _gasAccounts[removedGasAccountIndex - 1] = lastGasAccount;\r\n        _gasAccountIndexes[lastGasAccount] = removedGasAccountIndex;\r\n        _gasAccounts.pop();\r\n        delete _gasAccountIndexes[gasAccount];\r\n\r\n        emit RemovedGasAccount(gasAccount); \r\n    }\r\n    \r\n    function _setPullAmount(uint256 amount) internal {\r\n        _pullAmount = amount;\r\n\r\n        emit NewPullAmount(amount);\r\n    }\r\n    \r\n    function _setRateLimit(uint256 interval) internal {\r\n        _rateLimit = interval;\r\n\r\n        emit NewRateLimit(interval);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialGasAccounts\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"AddedGasAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pullAmount\",\"type\":\"uint256\"}],\"name\":\"NewPullAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"NewRateLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"RemovedGasAccount\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"addGasAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callAny\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"getLastPullTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPullAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasAccount\",\"type\":\"address\"}],\"name\":\"removeGasAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPullAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DharmaGasReserveStaging","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000c07805842753858fb350674af61ffc9bab319afa000000000000000000000000dfb98aaf1a5c33d959053e9c5357d13f8dc50c7200000000000000000000000099763d7e2291866a4c736c2b1a4db4afe404e40600000000000000000000000059af95ed2fd8baf3c6edb419c6cb2e6abd021616000000000000000000000000da0444b680cbb465378831450f67b21adc5593b30000000000000000000000004029443284a4a374dd927bf4f3d44f8e3581123e000000000000000000000000f1b26b30594e7496a4ef538f44d9990f53b401b3000000000000000000000000cab8d964462eff2a52075ac9ea5ed75eb6cd8703000000000000000000000000952e4119c955fcb1c4c97970213b72fc32054a3a000000000000000000000000ac372fe8400633e22ecc75539fa02a6994395d2500000000000000000000000098e11e43beaee83ffccf8823a2d06481ede08103000000000000000000000000e03d70bd9f585e5e7daf32c6c88707ca720f931f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6648deca00ed4dfccd836008973e3eaf994c1b8c95d53f32c37fd1678e6168c0"}]}