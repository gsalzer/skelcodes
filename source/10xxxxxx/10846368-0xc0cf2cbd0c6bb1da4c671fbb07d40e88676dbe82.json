{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IUniswapV2ERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router2.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Router2 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Factory.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// File: contracts/PickleMigrator.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n// Migrate from SUSHISWAP to UNISWAP for the PICKLES\r\ncontract PickleMigrator {\r\n    IUniswapV2Factory factory = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n    IUniswapV2Router2 router = IUniswapV2Router2(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(\r\n        0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\r\n    );\r\n\r\n    IUniswapV2Router2 sushiswapRouter = IUniswapV2Router2(\r\n        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\r\n    );\r\n\r\n    function migrateToUniswapWithPermit(\r\n        address token0,\r\n        address token1,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        address pair = sushiswapFactory.getPair(token0, token1);\r\n\r\n        // Permit\r\n        IUniswapV2ERC20(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        migrateToUniswap(token0, token1, value);\r\n    }\r\n\r\n    function migrateToUniswap(\r\n        address token0,\r\n        address token1,\r\n        uint256 value\r\n    ) public {\r\n        // Removes liquidity from sushiswap\r\n        address sushiPair = sushiswapFactory.getPair(token0, token1);\r\n        IUniswapV2ERC20(sushiPair).transferFrom(msg.sender, address(this), value);\r\n        IUniswapV2ERC20(sushiPair).approve(address(sushiswapRouter), value);\r\n        sushiswapRouter.removeLiquidity(\r\n            token0,\r\n            token1,\r\n            value,\r\n            0,\r\n            0,\r\n            address(this),\r\n            now + 60\r\n        );\r\n\r\n        // Adds liquidity to Uniswap\r\n        uint256 bal0 = IUniswapV2ERC20(token0).balanceOf(address(this));\r\n        uint256 bal1 = IUniswapV2ERC20(token1).balanceOf(address(this));\r\n        IUniswapV2ERC20(token0).approve(address(router), bal0);\r\n        IUniswapV2ERC20(token1).approve(address(router), bal1);\r\n        router.addLiquidity(\r\n            token0,\r\n            token1,\r\n            bal0,\r\n            bal1,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            now + 60\r\n        );\r\n\r\n        // Refund sender any remaining tokens\r\n        IUniswapV2ERC20(token0).transfer(\r\n            msg.sender,\r\n            IUniswapV2ERC20(token0).balanceOf(address(this))\r\n        );\r\n        IUniswapV2ERC20(token1).transfer(\r\n            msg.sender,\r\n            IUniswapV2ERC20(token1).balanceOf(address(this))\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrateToUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"migrateToUniswapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PickleMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5e7cb103672a59c13a6f0befc7e907dad3da696e44c12393cc5202351aece2f7"}]}