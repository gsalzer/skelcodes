{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// Interface necessary to interact with CHI\r\nabstract contract IFreeUpTo {\r\n\tfunction freeUpTo(uint256 _value) public virtual returns (uint256 _freed);\r\n}\r\n\r\n// Minimum required ERC20 interface\r\nabstract contract IERC20 {\r\n    function totalSupply() public virtual view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public virtual returns (bool ok);\r\n    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool ok);\r\n    function balanceOf(address _owner) public virtual returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\r\n    function allowance(address _owner, address _spender) public virtual view returns (uint256 amt);\r\n}\r\n\r\n// A simple contract wallet that burns CHI when it can (from itself).\r\ncontract GasWallet {\r\n    \r\n    event Spawned(address _this);       // Emitted on construction\r\n    event UserChanged(address _user);   // User is changed to new address\r\n    \r\n    // Maximum ERC-20 allowance\r\n    uint256 public constant MAX_ALLOWANCE = (2 ** 256) - 1;\r\n    \r\n    // In emergencies, can be disabled and only the excape functions will work\r\n    bool public enabled = true;\r\n    \r\n    // Admin doesn't change\r\n    // Escaped funds go to admin\r\n    address payable constant admin = 0xBb4068bac37ef5975210fA0cf03C0984f2D1542c;\r\n    \r\n    // User can call authorized methods and can be changed by the user or the admin\r\n    address payable user = 0xA916B82Ff122591cC88AaC0D64cE30A8e3e16081;\r\n    \r\n    // Gas token (CHI) doesn't change\r\n    IFreeUpTo constant chi = IFreeUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    \r\n    // Burn CHI gas tokens, if possible\r\n    modifier discount {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeUpTo((gasSpent + 14154) / 41947);\r\n    }\r\n    \r\n    // Allow the user or the admin to call the function\r\n    modifier auth {\r\n        require(msg.sender == admin || msg.sender == user, \"auth\");\r\n        _;\r\n    }\r\n    \r\n    // Require the contract is enabled\r\n    modifier notDisabled {\r\n        require(enabled, \"disabled\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        emit Spawned(address(this));\r\n        emit UserChanged(user);\r\n    }\r\n    \r\n    // Set an ERC-20 approval for _spender to spend _amount of _token.\r\n    // If _amount is 0, an \"unlimited\" approval will be set.\r\n    // To remove an allowance, use revokeTokenApproval\r\n    function setTokenApproval(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) public discount auth notDisabled {\r\n        if (_amount == 0) {\r\n            _amount = MAX_ALLOWANCE;\r\n        }\r\n        IERC20 token = IERC20(_token);\r\n        token.approve(_spender, _amount);\r\n    }\r\n    \r\n    // Remove allowance for _spender to spend _token from this\r\n    function revokeTokenApproval(address _token, address _spender) public discount auth notDisabled {\r\n        IERC20 token = IERC20(_token);\r\n        token.approve(_spender, 0);\r\n    }\r\n    \r\n    // Change the user to a new address\r\n    function setUser(address payable _user) public auth notDisabled {\r\n        emit UserChanged(_user);\r\n        user = _user;\r\n    }\r\n\r\n    // Send the full contracts balance of any ERC-20 token back to the admin    \r\n    function escapeToken(address _token) public auth {\r\n        IERC20 token = IERC20(_token);\r\n        token.transfer(admin, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    // Send the admin all ETH in the contract\r\n    function escapeEther() public auth {\r\n        admin.transfer(address(this).balance);\r\n    }\r\n    \r\n    // Disable further proxy transactions (cannot be re-enabled)\r\n    // Funds can still be escaped once disabled\r\n    function disable() public auth notDisabled {\r\n        enabled = false;\r\n    }\r\n    \r\n    // Deploy a contract (discount costs with CHI)\r\n    function deploy(bytes memory _code) public discount auth notDisabled returns(address _contract) {\r\n        assembly {\r\n            _contract := create(0, add(_code, 32), mload(_code))\r\n        }\r\n    }\r\n    \r\n    // Execute a transaction from the gas wallet\r\n    // _target: the target address to call\r\n    // _value: the wei value to include with the transaction\r\n    // _data: calldata to include with the transaction\r\n    function execute(\r\n        address _target,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) payable public discount auth notDisabled returns (bytes memory){\r\n        require(address(this).balance >= _value, \"bad_value\");\r\n        (bool ok, bytes memory ret) = _target.call{value: _value}(_data);\r\n        require(ok, \"tx_revert\");\r\n        return ret;\r\n    }\r\n    \r\n    // Allow the contract to receive ether if it is not disabled\r\n    receive() external payable notDisabled {}\r\n    \r\n    // Fallback does not allow missing functions\r\n    fallback() external payable {\r\n        revert(\"no_calldata\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_this\",\"type\":\"address\"}],\"name\":\"Spawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"UserChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_ALLOWANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escapeEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeTokenApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GasWallet","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5d8778af214ee576b52ae3926d8b1abc0d131fe554437ca62e40515b6eeae4c2"}]}