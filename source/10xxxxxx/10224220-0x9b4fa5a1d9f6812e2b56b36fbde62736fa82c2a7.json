{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// This contract is taken from openzepplin-sdk\r\n// https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/contracts/Initializable.sol\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// @author Patrick McCorry\r\n// @title DataShard\r\n// @notice Stores data for a given epoch / interval.\r\n// @dev Storage contract.\r\n//      Associates msg.sender with a list of bytes32 (hash) -> uint (timestamp).\r\ncontract DataShard is Initializable, Ownable {\r\n   uint public creationBlock;\r\n\r\n   // Smart Contract Address => ID-based data storage\r\n   mapping (bytes32 => uint) records;\r\n\r\n   // @param _blockNo Provided by the DataRegistry\r\n   function initialize(address _newOwner) initializer onlyOwner public {\r\n       creationBlock = block.number;\r\n       _transferOwnership(_newOwner);\r\n   }\r\n\r\n   // @dev Destory contract (and all its entries)\r\n   function kill() public onlyOwner {\r\n       selfdestruct(payable(owner()));\r\n   }\r\n\r\n   // @returns Creation time (blocknumber) for this dataShard\r\n   function getCreationBlock() public view returns (uint) {\r\n       return creationBlock;\r\n   }\r\n\r\n   // @param _sc Smart contract address\r\n   // @param _id Unique identifier for record\r\n   // @returns A record (timestamp) or \"0\" if no record was found.\r\n   function fetchRecord(bytes32 _id) public view returns (uint) {\r\n       return records[_id];\r\n   }\r\n\r\n   // @param _sc Smart contract address\r\n   // @param _id Unique identifier for record\r\n   // @param _timestamp A timestamp\r\n   // @dev Only stores a record if it is NOT set. e.g. does not replace/update.\r\n   function setRecord(bytes32 _id, uint _timestamp) external onlyOwner {\r\n      // No need to re-set it if it already exists. We only want the lowest timestamp.\r\n      // e.g. if job is sent twice, we keep the earliest timestamp.\r\n      if(records[_id] == 0) {\r\n         records[_id] = _timestamp;\r\n      }\r\n   }\r\n}\r\n// @author Patrick McCorry\r\n// @title DataShard\r\n// @notice Manages the creation and destruction of data shards. Helps us be Ethereum Enviromentally Friendly.\r\n// @dev In practice, we only need 2 dataShards for it to work well.\r\ncontract DataRegistry is Initializable {\r\n\r\n   // Shard ID => Address for DataShard\r\n   mapping (uint => address) public dataShards;\r\n   uint public interval; // Approximately 6000 blocks a day\r\n   uint constant TOTAL_SHARDS = 2; // Total number of data shards in rotation\r\n\r\n   // @returns Number of blocks for an interval.\r\n   function getInterval() public view returns (uint) {\r\n      return interval;\r\n   }\r\n\r\n   // @returns Number of shards in rotation.\r\n   function getTotalShards() public pure returns (uint) {\r\n      return TOTAL_SHARDS;\r\n   }\r\n\r\n   // @dev Values for interval and total_shards is hard-coded in the contract. Can be passed as constructor, but not big deal.\r\n   function initialize(uint _interval) initializer internal {\r\n      interval = _interval;\r\n\r\n      // We must initialize ALL shards to ensure we have a .kill() function when\r\n      // calling resetDataShard(). Otherwise it will always fail due to a revert.\r\n      for(uint i=0; i<TOTAL_SHARDS; i++) {\r\n         DataShard ds = new DataShard();\r\n         ds.initialize(address(this));\r\n         dataShards[i] = address(ds);\r\n      }\r\n   }\r\n\r\n   // @returns Instance of the DataShard\r\n   // @dev Call this function periodically to delete/create data shards.\r\n   function resetDataShard() public returns (DataShard) {\r\n      // We need to do full loop before deleting an old shard!\r\n      if(block.number - DataShard(dataShards[0]).getCreationBlock() >= interval) {\r\n          address toDelete = dataShards[1];\r\n          dataShards[1] = dataShards[0];\r\n          DataShard ds = new DataShard();\r\n          ds.initialize(address(this));\r\n          dataShards[0] = address(ds);\r\n          DataShard(toDelete).kill();\r\n      }\r\n   }\r\n\r\n   // @dev Returns the latest / most recently created data shard.\r\n   function getLatestDataShard() public view returns (address) {\r\n      return dataShards[0];\r\n   }\r\n\r\n   // @param _dataShard Index of data shard\r\n   // @param _sc Smart contract that recorded the log\r\n   // @param _id Unique identifier for the record\r\n   // @returns Record data (timestamp)\r\n   function fetchRecord(uint _dataShard, bytes32 _id) public view returns (uint) {\r\n       // Confirm the data shard exists so we can fetch data\r\n      if(dataShards[_dataShard] != address(0)) {\r\n          DataShard rc = DataShard(dataShards[_dataShard]);\r\n          return rc.fetchRecord(_id);\r\n      }\r\n   }\r\n   // @param _id Unique identifier for the record\r\n   // @param _timestamp A timestamp\r\n   // @dev We have integrated with the relay contract; so only relay can call it.\r\n   function setRecord(bytes32 _id, uint _timestamp) internal  {\r\n      // Fetch Index\r\n      address dataShardAddr = getLatestDataShard();\r\n      // Fetch the DataShard for this day. (It may reset it under the hood)\r\n      DataShard rc = DataShard(dataShardAddr);\r\n      // Update record!\r\n      rc.setRecord(_id, _timestamp);\r\n   }\r\n}\r\n\r\n// @author Patrick McCorry & Chris Buckland (anydot)\r\n// @title Relay\r\n// @notice Relay tx data structure\r\ncontract RelayTxStruct {\r\n\r\n    // @dev The relay transaction\r\n    struct RelayTx {\r\n        address to; // Address for external contract\r\n        address payable from; // Address for the user who hired the relayer\r\n        bytes data; // Call data that we need to send. Includes function call name, etc.\r\n        uint deadline; // Expiry block number for appointment\r\n        uint compensation; // How much should the operator compensation the user by?\r\n        uint gasLimit; // How much gas is allocated to this function call?\r\n        uint chainId; // ChainID\r\n        address relay; // The relay contract!\r\n    }\r\n\r\n    // @return Relay tx hash (bytes32)\r\n    // @dev Pack the encoding when computing the ID.\r\n    function computeRelayTxId(RelayTx memory self) public pure returns (bytes32) {\r\n      return keccak256(abi.encode(self.to, self.from, self.data, self.deadline, self.compensation, self.gasLimit, self.chainId, self.relay));\r\n    }\r\n}\r\n\r\n// @author anydot (Patrick & Chris)\r\n// @title Payment Deposit: Accept payments from customers\r\ncontract PaymentDeposit is Initializable, Ownable {\r\n\r\n    mapping(address => uint) public depositors;\r\n    uint public uniqueDepositors; \r\n\r\n    // We index the sender so that it's easy to look up all deposits\r\n    // from a given sender.\r\n    event Deposit(address indexed sender, uint amount, uint indexed index);\r\n\r\n    // We index the sender so that it's easy to look up all withdraws\r\n    // from a given sender.\r\n    event Withdraw(address indexed sender, uint amount);\r\n    \r\n    // Two-step deployment process. \r\n    function initialize(address _newOwner) internal initializer onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * Supply a deposit for a specified recipient.\r\n     * Caution: The recipient must be an externally owned account as all jobs sent to \r\n     * any.sender must be signed and associated with a positive balance in this contract. \r\n     */\r\n    function depositFor(address recipient) public payable { \r\n        require(msg.value > 0, \"No value provided to depositFor.\");\r\n        uint index = getDepositorIndex(recipient);\r\n        emit Deposit(recipient, msg.value, index);\r\n    }\r\n\r\n    /** \r\n     * Sets the depositors index if necessary.\r\n     */\r\n    function getDepositorIndex(address _depositor) internal returns(uint) {\r\n        if(depositors[_depositor] == 0) {\r\n            uniqueDepositors = uniqueDepositors + 1;\r\n            depositors[_depositor] = uniqueDepositors;\r\n        }\r\n\r\n        return depositors[_depositor];\r\n    }\r\n\r\n    /*\r\n     * It is only intended for external users who want to deposit via a wallet.\r\n     */ \r\n    receive() external payable {\r\n        require(msg.value > 0, \"No value provided to fallback.\");\r\n        require(tx.origin == msg.sender, \"Only EOA can deposit directly.\");\r\n        uint index = getDepositorIndex(msg.sender);\r\n        emit Deposit(msg.sender, msg.value, index);\r\n    }\r\n\r\n    /**\r\n     * Move funds out of the contract\r\n     */\r\n    function withdraw(address payable recipient, uint amount) onlyOwner public {\r\n        recipient.transfer(amount);\r\n        emit Withdraw(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * Move funds out of the contract\r\n     * Depositor is the OWNER of the funds being withdrawn. \r\n     * Recipient is the RECEIVER of the funds. \r\n     */\r\n    function withdrawFor(address payable depositor, address payable recipient, uint amount) onlyOwner public {\r\n        require(depositors[depositor]>0, \"Depositor has never deposited funds.\");\r\n        recipient.transfer(amount);\r\n        emit Withdraw(depositor, amount);\r\n    }\r\n\r\n    /**\r\n     * Use admin privileges to migrate a user's deposits to another deposit contract\r\n     */\r\n    function migrate(address payable recipient, uint amount, PaymentDeposit otherDeposit) onlyOwner public {\r\n        require(address(this).balance >= amount, \"Not enough balance to migrate.\");\r\n        otherDeposit.depositFor.value(amount)(recipient);\r\n        emit Withdraw(recipient, amount);\r\n    }\r\n}\r\n\r\n// @author PISA Research (Patrick & Chris)\r\n// @title Relay: Executing relay transactions\r\n// @notice This contract only handles executing relay transactions.\r\n//         It does not have logic to handle the security deposit or proving fraud.\r\n// @dev The operator must supply gast refund this contract as it ms relayers the cost of submitting jobs.\r\ncontract Relay is DataRegistry, RelayTxStruct, PaymentDeposit {\r\n    mapping(address => bool) public relayers;\r\n\r\n    event RelayExecuted(bytes32 indexed relayTxId, bool success, address indexed from, address indexed to, uint gasUsed, uint gasPrice);\r\n    event RelayerInstalled(address relayer);\r\n    event RelayerUninstalled(address relayer);\r\n    event OutOfCoins();\r\n\r\n    // @param _newOwner Owner can install relayers\r\n    // @dev Behind the scenes, the DataRegistry is creating two shards via an internal constructor.\r\n    function initialize(address _newOwner, uint _shardInterval) public initializer onlyOwner {\r\n        PaymentDeposit.initialize(_newOwner);\r\n        DataRegistry.initialize(_shardInterval);\r\n    }\r\n\r\n    // @param _relayTx A relay tx containing the job to execute\r\n    // @param _gasRefund Whether the relayer requires a gas refund\r\n    // @dev Only authorised relayer can execute relay jobs and they are refunded gas at the end of the call.\r\n    //      Critically, if the relay job fails, we can simply catch exception and continue to record the log.\r\n    function execute(RelayTx memory _relayTx, bool _gasRefund) public {\r\n        uint gasStarted = gasleft();\r\n\r\n        // The msg.sender check protects against two problems:\r\n        // - Replay attacks across chains (chainid in transaction)\r\n        // - Re-entrancy attacks back into .execute() (signer required)\r\n        require(relayers[msg.sender], \"Relayer must call this function.\");\r\n        require(_relayTx.relay == address(this), \"Relay tx MUST be for this relay contract.\");\r\n\r\n        bytes32 relayTxId = computeRelayTxId(_relayTx);\r\n\r\n        // Only record log if a compensation is required\r\n        if(_relayTx.compensation != 0) {\r\n            // Record a log of executing the job, Each shard only records the first job since the first job has the\r\n            // earliest timestamp.\r\n            setRecord(relayTxId, block.number);\r\n        }\r\n\r\n        // We do not require the customer to sign the relay tx.\r\n        // Why? If relayer submits wrong relay tx, it wont have the correct RelayTxId.\r\n        // So the RelayTxId won't be recorded and the customer can easily prove\r\n        // the correct relay tx was never submitted for execution.\r\n\r\n        // In the worst case, the contract will only send 63/64 of the transaction's\r\n        // remaining gas due to https://eips.ethereum.org/EIPS/eip-150\r\n        // But this is problematic as outlined in https://eips.ethereum.org/EIPS/eip-1930\r\n        // so to fix... we need to make sure we supply 64/63 * gasLimit.\r\n        // Assumption: Underlying contract called did not have a minimum gas required check\r\n        // We add 1000 to cover the cost of calculating new gas limit - this should be a lot more than\r\n        // is required - measuring shows cost of 58\r\n        require(gasleft() > (_relayTx.gasLimit + _relayTx.gasLimit / 63) + 1000, \"Not enough gas supplied.\");\r\n\r\n        // execute the actual call\r\n        (bool success,) = _relayTx.to.call.gas(_relayTx.gasLimit)(_relayTx.data);\r\n\r\n        // we add some gas using hard coded opcode pricing for computation that we could measure\r\n        uint gasUsed = gasStarted - gasleft() + // execute cost\r\n                            (msg.data.length * 16) + // data input cost (add 1 for gasRefund bool)\r\n                            2355 + // cost of RelayExecuted event - 375 + 375 + 375 + (160 * 8)\r\n                            21000; // transaction cost\r\n\r\n        if(_gasRefund) {\r\n            gasUsed += (9000 + 1000); // refund cost, send + change for calculations\r\n            if(!msg.sender.send(gasUsed*tx.gasprice)) {\r\n                // Notify admin we need to provide more refund to this contract\r\n                emit OutOfCoins();\r\n            }\r\n        }\r\n\r\n        emit RelayExecuted(relayTxId, success, _relayTx.from, _relayTx.to, gasUsed, tx.gasprice);\r\n    }\r\n\r\n    // @param _relayer New relayer address\r\n    // @dev Only the owner can install a new relayer\r\n    function installRelayer(address _relayer) onlyOwner public {\r\n        require(!relayers[_relayer], \"Relayer is already installed.\");\r\n        require(_relayer != address(this), \"The relay contract cannot be installed as a relayer.\");\r\n\r\n        relayers[_relayer] = true;\r\n        emit RelayerInstalled(_relayer);\r\n    }\r\n\r\n    // @param _relayer New relayer address\r\n    // @dev Only the owner can uninstall a new relayer\r\n    function uninstallRelayer(address _relayer) onlyOwner public {\r\n        require(relayers[_relayer], \"Relayer must be installed.\");\r\n\r\n        relayers[_relayer] = false;\r\n        emit RelayerUninstalled(_relayer);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OutOfCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"relayTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"RelayExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerUninstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"internalType\":\"struct RelayTxStruct.RelayTx\",\"name\":\"self\",\"type\":\"tuple\"}],\"name\":\"computeRelayTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataShards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"internalType\":\"struct RelayTxStruct.RelayTx\",\"name\":\"_relayTx\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_gasRefund\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataShard\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"fetchRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDataShard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shardInterval\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"installRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract PaymentDeposit\",\"name\":\"otherDeposit\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDataShard\",\"outputs\":[{\"internalType\":\"contract DataShard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"uninstallRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Relay","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f3869b928adfa627e3d3d43ad5f9d15bba906945fc21b2651dc7cd4e68a3be4"}]}