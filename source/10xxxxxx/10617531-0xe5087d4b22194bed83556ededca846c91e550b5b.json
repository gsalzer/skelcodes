{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.4;\r\n\r\n// Safe Math\r\nlibrary SafeMath {\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint)   {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Math {\r\n    using SafeMath for uint;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function calcPart(uint bp, uint total) public pure returns (uint part){\r\n        // 10,000 basis points = 100.00%\r\n        require((bp <= 10000) && (bp > 0), \"Must be correct BP\");\r\n        return calcShare(bp, 10000, total);\r\n    }\r\n\r\n    function calcShare(uint part, uint total, uint amount) public pure returns (uint share){\r\n        // share = amount * part/total\r\n        return(amount.mul(part)).div(total);\r\n    }\r\n\r\n    function  calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){\r\n        // y = (x * X * Y )/(x + X)^2\r\n        uint numerator = x.mul(X.mul(Y));\r\n        uint denominator = (x.add(X)).mul(x.add(X));\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n    function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){\r\n        // y = (x * x * Y) / (x + X)^2\r\n        uint numerator = x.mul(x.mul(Y));\r\n        uint denominator = (x.add(X)).mul(x.add(X));\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n    function calcStakeUnits(uint a, uint A, uint v, uint V) public pure returns (uint units){\r\n        // units = ((V + A) * (v * A + V * a))/(4 * V * A)\r\n        // (part1 * (part2 + part3)) / part4\r\n        uint part1 = V.add(A);\r\n        uint part2 = v.mul(A);\r\n        uint part3 = V.mul(a);\r\n        uint numerator = part1.mul((part2.add(part3)));\r\n        uint part4 = 4 * (V.mul(A));\r\n        return numerator.div(part4);\r\n    }\r\n\r\n    function calcAsymmetricShare(uint s, uint T, uint A) public pure returns (uint share){\r\n        // share = (s * A * (2 * T^2 - 2 * T * s + s^2))/T^3\r\n        // (part1 * (part2 - part3 + part4)) / part5\r\n        uint part1 = s.mul(A);\r\n        uint part2 = T.mul(T).mul(2);\r\n        uint part3 = T.mul(s).mul(2);\r\n        uint part4 = s.mul(s);\r\n        uint numerator = part1.mul(part2.sub(part3).add(part4));\r\n        uint part5 = T.mul(T).mul(T);\r\n        return numerator.div(part5);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"calcAsymmetricShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"calcPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"V\",\"type\":\"uint256\"}],\"name\":\"calcStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"name\":\"calcSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"name\":\"calcSwapOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Math","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c976503faf4727b2c904f4d516d6eb41526d680e3e9e6e5eac5b32be1865a64"}]}