{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n//  functions needed from the v1 contract\r\ncontract V1Token {\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {}\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public {}\r\n}\r\n\r\n//  functions needed from v2 contract\r\ncontract V2Token {\r\n    function upgradeV1Token(uint256 tokenId, address v1Address, bool isControlToken, address to, \r\n        uint256 platformFirstPercentageForToken, uint256 platformSecondPercentageForToken, bool hasTokenHadFirstSale,\r\n        address payable[] calldata uniqueTokenCreatorsForToken) external {}\r\n}\r\n\r\n// Copyright (C) 2020 Asynchronous Art, Inc.\r\n// GNU General Public License v3.0\r\n\r\ncontract TokenUpgrader {\r\n    event TokenUpgraded(\r\n        uint256 tokenId,\r\n        address v1TokenAddress,\r\n        address v2TokenAddress\r\n    );\r\n\r\n    // the address of the v1 token\r\n    V1Token public v1TokenAddress;\r\n    // the address of the v2 token\r\n    V2Token public v2TokenAddress;\r\n    // the admin address of who can setup descriptors for the tokens\r\n    address public adminAddress;\r\n\r\n    mapping(uint256 => bool) public isTokenReadyForUpgrade;\r\n    mapping(uint256 => bool) public isControlTokenMapping;\r\n    mapping(uint256 => bool) public hasTokenHadFirstSale;\r\n    mapping(uint256 => uint256) public platformFirstPercentageForToken;\r\n    mapping(uint256 => uint256) public platformSecondPercentageForToken;\r\n    mapping(uint256 => address payable[]) public uniqueTokenCreatorMapping;\r\n\r\n    constructor(V1Token _v1TokenAddress) public {\r\n        adminAddress = msg.sender;\r\n\r\n        v1TokenAddress = _v1TokenAddress;\r\n    }\r\n\r\n    // modifier for only allowing the admin to call\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    function setupV2Address(V2Token _v2TokenAddress) public onlyAdmin {\r\n        require(address(v2TokenAddress) == address(0), \"V2 address has already been initialized.\");\r\n        \r\n        v2TokenAddress = _v2TokenAddress;\r\n    }\r\n\r\n    function prepareTokenForUpgrade(uint256 tokenId, bool isControlToken, uint256 platformFirstSalePercentage,\r\n        uint256 platformSecondSalePercentage, bool hasHadFirstSale, address payable[] memory uniqueTokenCreators) public onlyAdmin {\r\n        isTokenReadyForUpgrade[tokenId] = true;\r\n\r\n        isControlTokenMapping[tokenId] = isControlToken;\r\n\r\n        hasTokenHadFirstSale[tokenId] = hasHadFirstSale;\r\n\r\n        uniqueTokenCreatorMapping[tokenId] = uniqueTokenCreators;\r\n\r\n        platformFirstPercentageForToken[tokenId] = platformFirstSalePercentage;\r\n\r\n        platformSecondPercentageForToken[tokenId] = platformSecondSalePercentage;\r\n    }\r\n\r\n    function upgradeTokenList(uint256[] memory tokenIds, address tokenOwner) public {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            upgradeToken(tokenIds[i], tokenOwner);\r\n        }\r\n    }\r\n\r\n    function upgradeToken(uint256 tokenId, address tokenOwner) public {\r\n        // token must be ready to be upgraded\r\n        require(isTokenReadyForUpgrade[tokenId], \"Token not ready for upgrade.\");\r\n\r\n        // require the caller of this function to be the token owner or approved to transfer all of the owner's tokens\r\n        require((tokenOwner == msg.sender) || v1TokenAddress.isApprovedForAll(tokenOwner, msg.sender), \"Not owner or approved.\");\r\n\r\n        // transfer the v1 token to be owned by this contract (effectively burning it since this contract can't send it back out)\r\n        v1TokenAddress.transferFrom(tokenOwner, address(this), tokenId);\r\n\r\n        // call upgradeV1Token on the v2 contract -- this will mint the same token and send to the original owner\r\n        v2TokenAddress.upgradeV1Token(tokenId, address(v1TokenAddress), isControlTokenMapping[tokenId], \r\n            tokenOwner, platformFirstPercentageForToken[tokenId], platformSecondPercentageForToken[tokenId],\r\n            hasTokenHadFirstSale[tokenId], uniqueTokenCreatorMapping[tokenId]);\r\n\r\n        // emit an upgrade event\r\n        emit TokenUpgraded(tokenId, address(v1TokenAddress), address(v2TokenAddress));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract V1Token\",\"name\":\"_v1TokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v1TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2TokenAddress\",\"type\":\"address\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasTokenHadFirstSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isControlTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenReadyForUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFirstPercentageForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformSecondPercentageForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isControlToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"platformFirstSalePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformSecondSalePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasHadFirstSale\",\"type\":\"bool\"},{\"internalType\":\"address payable[]\",\"name\":\"uniqueTokenCreators\",\"type\":\"address[]\"}],\"name\":\"prepareTokenForUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract V2Token\",\"name\":\"_v2TokenAddress\",\"type\":\"address\"}],\"name\":\"setupV2Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueTokenCreatorMapping\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"upgradeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"upgradeTokenList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1TokenAddress\",\"outputs\":[{\"internalType\":\"contract V1Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v2TokenAddress\",\"outputs\":[{\"internalType\":\"contract V2Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenUpgrader","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006c424c25e9f1fff9642cb5b7750b0db7312c29ad","EVMVersion":"petersburg","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://618d0c327b122283abb1e3698e551b5048c3a42ea136543595457e9b423b6c98"}]}