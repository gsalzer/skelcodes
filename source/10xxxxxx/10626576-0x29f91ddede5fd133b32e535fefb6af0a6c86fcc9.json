{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract AopxCoin {\r\n\r\n    address[] private stakedUsers;\r\n    using SafeMath for uint256;\r\n\tuint256 constant private INITIAL_SUPPLY = 100000000e18;\r\n\tuint256 constant private TX_FEE = 8; // 8% per tx\r\n\tuint256 constant private POOL_FEE = 65; //8% per tx, 80% to pool\r\n    uint256 constant private BURN_FEE = 25; //8% per tx, 10% to burn\r\n\tuint256 constant private DEV_FEE = 10;  // 8% per tx, 10% to dev\r\n\tuint256 constant private SAHRE_COLLECT = 50;  // 50% every collect\r\n\tuint256 constant private MIN_STAKE_AMOUNT = 10000e18; // 10,000 Tokens Needed\r\n\tmapping(uint256=>uint256) private SHARE_DIVIDENDS;//share per pool: [7,15,30] pool_7day_20%  pool_15day_30%  pool_30day_50% \r\n    mapping(address => User) private  users;\r\n   \r\n   \r\n\tstring constant public name = \"AopxCoin\";\r\n\tstring constant public symbol = \"Aopx\";\r\n\tuint8 constant  public decimals = 18;\r\n    bool  private isDividending = false;\r\n    \r\n\tstruct Product {\r\n\t\tuint256 staked;\r\n\t\tuint256 unstakeTime;\r\n\t}\r\n\t\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tuint256 totalStaked;\r\n\t\tuint256 dividends;\r\n\t\tuint256 collectTime;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tmapping(uint256=>Product) pools;\r\n\t}\r\n\t\r\n\tstruct PoolInfo{\r\n\t    uint256 totalStaked;\r\n\t    uint256 dividends;\r\n\t    uint256 pricePerToken;\r\n\t}\r\n\t\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalStaked;\r\n\t\tmapping(address => User) users;\r\n\t    mapping(uint256=>PoolInfo)  pools;//[7,15,30]\r\n\t\taddress dev;\r\n\t\taddress eater;\r\n\t\taddress owner;\r\n\t\taddress manager;\r\n\t\taddress p1;\r\n\t\taddress p2;\r\n\t}\r\n\tInfo public info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\t\r\n\tevent Stake(address indexed owner, uint256 tokens);\r\n\tevent Unstake(address indexed owner, uint256 tokens);\r\n\tevent Collect(address indexed owner, uint256 tokens);\r\n\tevent Tax(uint256 tokens);\r\n\tevent Burn(uint256 tokens);\r\n\t\r\n\r\n\tconstructor() public {\r\n\t    info.owner=msg.sender;\r\n\t    info.eater=address(0x0);\r\n\t\tinfo.dev = address(0x3450E1D5727AA85fe63283ddFE5f2B552ce9F1B1);\r\n\t\tinfo.manager = address(0x584f298694EeB2a786d22658e85c87A01700b8F0);\r\n\t\tinfo.p1=address(0xEe0d33c6cDb332b3472c59D04A48e48b354e07E5);\r\n\t\tinfo.p2=address(0x6b722E08FbFCC60e5c499aaCFe06Ceaf92303729);\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\tinfo.users[info.p1].balance = 80000000e18;\r\n\t\tinfo.users[info.p2].balance = 20000000e18;\r\n\t\tSHARE_DIVIDENDS[7]=20;\r\n\t\tSHARE_DIVIDENDS[15]=30;\r\n\t\tSHARE_DIVIDENDS[30]=50;\r\n\t\temit Transfer(address(0x0), info.p1, 80000000e18);\r\n\t\temit Transfer(address(0x0), info.p2, 20000000e18);\r\n\t}\r\n\r\n\tfunction stakeCount() public  view returns (uint256 stakeCount) {\r\n\t\treturn stakedUsers.length;\r\n\t}\r\n\tfunction stakedUser(uint256 index) public  view returns (address stakeUser) {\r\n\t\treturn stakedUsers[index];\r\n\t}\r\n\tfunction stake(uint256 _tokens,uint256 dayType) external {\r\n\t\t_stake(_tokens,dayType);\r\n\t}\r\n\tfunction unstake(uint256 _tokens,uint256 dayType) external {\r\n\t\t_unstake(_tokens,dayType);\r\n\t}\r\n\tfunction collect() external returns (uint256) {\r\n\t    uint256 _dividends =info.users[msg.sender].dividends;\r\n      \trequire(_dividends >= 0,\"no dividends!\");\r\n\t\trequire(info.users[msg.sender].collectTime < now);\r\n\t\tinfo.users[msg.sender].dividends =\tinfo.users[msg.sender].dividends.sub(_dividends.mul(SAHRE_COLLECT).div(100));\r\n\t\tinfo.users[msg.sender].balance  = \tinfo.users[msg.sender].balance.add(_dividends.mul(SAHRE_COLLECT).div(100));\r\n\t\tinfo.users[msg.sender].collectTime = now + 1 days;\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\temit Collect(msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\tfunction dividend() external  {\r\n\t   require(msg.sender == info.manager, \"Caller is not dev\");\r\n\t   require(!isDividending,\"sorry,dividending\");\r\n\t   uint256 ss=stakedUsers.length;\r\n\t   \tfor (uint256 i = 0; i < ss; i++) {\r\n\t   \t     address user=stakedUsers[i];\r\n\t   \t     \r\n\t\t     uint256 _dividends = dividendsOf(user).sub(info.users[user].dividends);\r\n\t         if(_dividends > 0){\r\n\t                info.users[user].dividends += _dividends;\r\n\t         }else{\r\n\t             continue;\r\n\t         }\r\n\t\t}\r\n\t   \r\n\t   if(info.pools[7].totalStaked>0){\r\n\t     info.pools[7].dividends=0;\r\n\t   }\r\n\t   if(info.pools[15].totalStaked>0){\r\n\t     info.pools[15].dividends=0;\r\n\t    }\r\n\t   if(info.pools[30].totalStaked>0){\r\n\t     info.pools[30].dividends=0;\r\n\t     }\r\n\t}\r\n    function changeDev(address _user) external {\r\n\t\t  require(msg.sender == info.owner, \"Caller is not owner\");\r\n\t\t  info.dev=_user;\r\n\t}\r\n\tfunction changeManage(address _user) external {\r\n\t\t  require(msg.sender == info.owner, \"Caller is not owner\");\r\n\t\t  info.manager=_user;\r\n\t}\r\n\tfunction dividendByIndex(uint256[] calldata indexs,bool finshed) external returns (uint256) {\r\n\t   require(msg.sender == info.manager||msg.sender == info.owner, \"Caller is not owner\");\r\n\t   uint256 length=indexs.length;\r\n\t   \r\n\t   for (uint256 i = 0; i < length; i++) {\r\n\t       address user=stakedUsers[indexs[i]];\r\n\t\t    uint256 _dividends = dividendsOf(stakedUsers[indexs[i]]).sub(info.users[user].dividends);\r\n\t         if(_dividends > 0){\r\n\t                info.users[user].dividends =info.users[user].dividends.add(_dividends);\r\n\t         }\r\n\t\t}\r\n       \r\n       if(finshed){\r\n\t   if(info.pools[7].totalStaked>0){\r\n\t     info.pools[7].dividends=0;\r\n\t   }\r\n\t   if(info.pools[15].totalStaked>0){\r\n\t     info.pools[15].dividends=0;\r\n\t    }\r\n\t   if(info.pools[30].totalStaked>0){\r\n\t     info.pools[30].dividends=0;\r\n\t     }\r\n       }\r\n\t}\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\tfunction totalBurn() public view returns (uint256) {\r\n\t\treturn info.users[info.eater].balance;\r\n\t}\r\n    function totalDividends() public view returns (uint256) {\r\n\t\treturn info.pools[7].dividends.add(info.pools[15].dividends).add(info.pools[30].dividends);\r\n\t}\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance - stakedOf(_user,0);\r\n\t}\r\n\tfunction stakedOf(address _user,uint256 dayType) public view returns (uint256) {\r\n\t    \r\n\t  \trequire(dayType==0|| dayType==7||dayType==15||dayType==30,\"product daytype not support\");\r\n\t\r\n\t\tif(dayType==7){\r\n\t\t    return info.users[_user].pools[7].staked;\r\n\t\t}\r\n\t\tif(dayType==15){\r\n\t\t return   info.users[_user].pools[15].staked;\r\n\t\t}\r\n\t\tif(dayType==30){\r\n\t\t   return info.users[_user].pools[30].staked;\r\n\t\t}\r\n\t    return info.users[_user].totalStaked;\r\n\t}\r\n\tfunction collectTimeOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].collectTime;\r\n\t}\r\n\tfunction stakedOfPool() public view returns (uint256,uint256,uint256) {\r\n\t    return (info.pools[7].totalStaked,info.pools[15].totalStaked,info.pools[30].totalStaked);\r\n\t}\r\n\tfunction dividendsOfPool() public view returns (uint256,uint256,uint256) {\r\n\t\treturn (info.pools[7].dividends,info.pools[15].dividends,info.pools[30].dividends);\r\n\t}\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t\tuint256 _7Amount =0;   \r\n     \tuint256 _15Amount = 0;  \r\n\t\tuint256 _30Amount =0; \r\n\t\tif(info.pools[7].totalStaked>0){\r\n\t\t    _7Amount=(info.users[_user].pools[7].staked.mul(info.pools[7].dividends).div(info.pools[7].totalStaked));\r\n\t\t}\r\n\t\tif(info.pools[15].totalStaked>0){\r\n\t\t    _15Amount=info.users[_user].pools[15].staked.mul(info.pools[15].dividends).div(info.pools[15].totalStaked);\r\n\t\t}\r\n\t\t\r\n\t\tif(info.pools[30].totalStaked>0){\r\n\t\t    _30Amount=  info.users[_user].pools[30].staked.mul(info.pools[30].dividends).div(info.pools[30].totalStaked);\r\n\t\t}\r\n\t\t\r\n\t    uint256 amount= _7Amount.add(_15Amount).add(_30Amount).add(info.users[_user].dividends);\r\n\t    \r\n\t    return amount;\r\n\t}\r\n\tfunction allInfo(address _user) public view returns (uint256 tokenTotalSupply,uint256 tokenTotalStaked,uint256 tokenTotalDividends,uint256 tokenTotalBurn,uint256 userStake7,uint256 userStake15,uint256 userStake30,uint256 userDividendsTotal,uint256 userDividends,uint256 userUnstakeTime7,uint256 userUnstakeTime15,uint256 userUnstakeTime30,uint256 collectTime) {\r\n\t\taddress user=_user;\r\n\t\treturn (totalSupply(),info.totalStaked,totalDividends(),totalBurn(),stakedOf(user,7),stakedOf(user,15),stakedOf(user,30),dividendsOf(user),info.users[user].dividends,info.users[user].pools[7].unstakeTime,info.users[user].pools[15].unstakeTime,info.users[user].pools[30].unstakeTime, collectTimeOf(user));\r\n\t}\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t\r\n\t\tinfo.users[_from].balance = info.users[_from].balance.sub(_tokens);\r\n\t\t\r\n\t\tuint256 _taxAmount = _tokens.mul(TX_FEE).div(100);\r\n\t\tuint256 _poolAmount = _taxAmount.mul(POOL_FEE).div(100);\r\n\t\tuint256 _burnAmount = _taxAmount.mul(BURN_FEE).div(100);\r\n\t\tuint256 _devAmount = _taxAmount.mul(DEV_FEE).div(100);\r\n\t\tuint256 _realAmount = _tokens.sub(_taxAmount);\r\n\r\n        \r\n        info.users[_to].balance =info.users[_to].balance.add(_realAmount);\r\n        info.users[info.dev].balance =info.users[info.dev].balance.add(_devAmount);\r\n        info.users[info.eater].balance=info.users[info.eater].balance.add(_burnAmount);\r\n        \r\n        info.pools[7].dividends = info.pools[7].dividends.add(_poolAmount.mul(SHARE_DIVIDENDS[7]).div(100));\r\n        info.pools[15].dividends =  info.pools[15].dividends.add(_poolAmount.mul(SHARE_DIVIDENDS[15]).div(100));\r\n        info.pools[30].dividends=info.pools[30].dividends.add(_poolAmount.mul(SHARE_DIVIDENDS[30]).div(100));\r\n        \r\n        emit Transfer(_from, info.dev, _devAmount);\r\n        emit Transfer(_from, info.eater, _burnAmount);\r\n        emit Transfer(_from, _to, _realAmount);\r\n        \r\n        emit Tax(_taxAmount);\r\n        emit Burn(_burnAmount);\r\n        \r\n        return _realAmount;\r\n    }\r\n    function _stake(uint256 _amount,uint256 dayType) internal {\r\n      \r\n        require(dayType==7||dayType==15||dayType==30,\"product daytype not support\");\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\trequire(stakedOf(msg.sender,dayType).add(_amount) >= MIN_STAKE_AMOUNT,\"min stake amount:50,000\");\r\n\t\t\r\n\r\n\t\tinfo.users[msg.sender].pools[dayType].unstakeTime = now + dayType*86400;\r\n\t\tinfo.totalStaked = info.totalStaked.add(_amount);\r\n\t\tinfo.pools[dayType].totalStaked =info.pools[dayType].totalStaked.add(_amount);\r\n\t\tinfo.users[msg.sender].totalStaked= info.users[msg.sender].totalStaked.add(_amount);\r\n\t\tinfo.users[msg.sender].pools[dayType].staked = info.users[msg.sender].pools[dayType].staked.add(_amount);\r\n\t\t\r\n\t    _addStakedUser(msg.sender);\r\n\t\temit Transfer(msg.sender, address(this), _amount);\r\n\t\temit Stake(msg.sender, _amount);\r\n\t}\r\n\tfunction _unstake(uint256 _amount,uint256 dayType) internal {\r\n\t   \trequire(dayType==7||dayType==15||dayType==30,\"product daytype not support\");\r\n\t    require(info.users[msg.sender].pools[dayType].unstakeTime < now,\"unstakeTime not arrive\");\r\n\t\trequire(stakedOf(msg.sender,dayType) >= _amount);\r\n\t\t\r\n\t\tinfo.totalStaked = info.totalStaked.sub(_amount);\r\n\t\tinfo.pools[dayType].totalStaked =info.pools[dayType].totalStaked.sub(_amount);\r\n\t\tinfo.users[msg.sender].pools[dayType].staked =\tinfo.users[msg.sender].pools[dayType].staked.sub(_amount);\r\n\t\tinfo.users[msg.sender].totalStaked =info.users[msg.sender].totalStaked.sub(_amount);\r\n\t\t\r\n\t\temit Unstake(msg.sender, _amount);\r\n\t}\r\n\tfunction _addStakedUser(address _address) internal {\r\n\t     \r\n\t     uint256 length=stakedUsers.length;\r\n\t     bool exist=false;\r\n\t     \r\n             for (uint256 i = 0; i < length; i++) {\r\n\t      \t    if(stakedUsers[i] == _address){\r\n\t      \t       exist=true;\r\n\t      \t       break;\r\n\t      \t    }\r\n\t      \t}\r\n\t      \r\n\t      if(!exist){\r\n\t           stakedUsers.push(_address);\r\n\t      }\r\n\t      \t\r\n\t  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotalBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStake7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStake15\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStake30\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividendsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeTime7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeTime15\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeTime30\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"changeManage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"collectTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"finshed\",\"type\":\"bool\"}],\"name\":\"dividendByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayType\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayType\",\"type\":\"uint256\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakedUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakeUser\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayType\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AopxCoin","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5164ad9ff4c591f65c274c71125d62d41232d2875a0696c208e86f85bbd7b389"}]}