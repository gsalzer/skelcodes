{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CTokenInterface {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ListInterface {\r\n    function accounts() external view returns (uint64);\r\n    function accountID(address) external view returns (uint64);\r\n    function accountAddr(uint64) external view returns (address);\r\n}\r\n\r\ncontract Helpers {\r\n\r\n    struct CompData {\r\n        uint balanceOfUser;\r\n        uint borrowBalanceStoredUser;\r\n    }\r\n    struct data {\r\n        address user;\r\n        CompData[] tokensData;\r\n    }\r\n    \r\n     struct datas {\r\n        CompData[] tokensData;\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is Helpers {\r\n    \r\n    function getDSAWallets(uint len) public view returns(address[] memory) {\r\n        address[] memory wallets = new address[](len);\r\n        ListInterface list = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\r\n        uint _len = len == 0 ? uint(list.accounts()) : len;\r\n        for (uint i = 0; i < _len; i++) {\r\n            wallets[i] = list.accountAddr(uint64(i+1));\r\n        }\r\n        return wallets;\r\n    }\r\n\r\n    function getPosition(\r\n        address[] calldata owners,\r\n        address[] calldata cAddress\r\n    )\r\n        external\r\n        view\r\n        returns (datas[] memory)\r\n    {\r\n        datas[] memory _data = new datas[](cAddress.length);\r\n        for (uint i = 0; i < cAddress.length; i++) {\r\n            CompData[] memory tokensData = new CompData[](owners.length);\r\n            CTokenInterface cToken = CTokenInterface(cAddress[i]);\r\n            for (uint j = 0; j < owners.length; j++) {\r\n                address _owner = owners[j];\r\n                tokensData[j] = CompData(\r\n                    cToken.balanceOf(_owner),\r\n                    cToken.borrowBalanceStored(_owner)\r\n                );\r\n            }\r\n            _data[i] = datas(\r\n                tokensData\r\n            );\r\n        }\r\n        return _data;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getDSAWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"tokensData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.datas[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://53fdf77bcad2b857ea243373c546035a86061890e3b93258cc73032c4f0a61b6"}]}