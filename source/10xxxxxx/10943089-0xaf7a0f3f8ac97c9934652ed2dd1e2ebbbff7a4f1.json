{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n// ------------------------------------------------------------------------\r\n// Interface that the crowdsale uses (taken from token)\r\n// ------------------------------------------------------------------------\r\ncontract IERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) view public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Math library\r\n// ------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Safe transfer function contract to provide mo\r\n// ------------------------------------------------------------------------\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Create the safe transfer function contract to provide mo\r\n    // ------------------------------------------------------------------------\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n    \r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Allows action restrictions\r\n// ------------------------------------------------------------------------\r\ncontract Ownable {\r\n  address payable internal _owner;\r\n  address payable internal _potentialNewOwner;\r\n \r\n  event OwnershipTransferred(address payable indexed from, address payable indexed to, uint date);\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    _potentialNewOwner = newOwner;\r\n  }\r\n  function acceptOwnership() external {\r\n    require(msg.sender == _potentialNewOwner);\r\n    emit OwnershipTransferred(_owner, _potentialNewOwner, now);\r\n    _owner = _potentialNewOwner;\r\n  }\r\n  function getOwner() view external returns(address){\r\n      return _owner;\r\n  }\r\n  function getPotentialNewOwner() view external returns(address){\r\n      return _potentialNewOwner;\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Create non ReentrancyGuard contract for buy tokens (concurrency)\r\n// ------------------------------------------------------------------------\r\ncontract ReentrancyGuard {\r\n    \r\n    uint256 private _guardCounter;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor to start counter\r\n    // ------------------------------------------------------------------------\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Set the nonReentrant modifier to stop re-entry of function\r\n    // ------------------------------------------------------------------------\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n    \r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Create recoverable tokens\r\n// ------------------------------------------------------------------------\r\ncontract RecoverableToken is Ownable {\r\n  event RecoveredTokens(address token, address owner, uint256 tokens, uint time);\r\n  \r\n  function recoverAllTokens(IERC20 token) public onlyOwner {\r\n    uint256 tokens = tokensToBeReturned(token);\r\n    require(token.transfer(_owner, tokens) == true);\r\n    emit RecoveredTokens(address(token), _owner,  tokens, now);\r\n  }\r\n  \r\n  function recoverTokens(IERC20 token, uint256 amount) public onlyOwner {\r\n    require(token.transfer(_owner, amount) == true);\r\n    emit RecoveredTokens(address(token), _owner,  amount, now);\r\n  }\r\n  \r\n  function tokensToBeReturned(IERC20 token) public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Crowdsale wrapper contract\r\n// ------------------------------------------------------------------------\r\ncontract Crowdsale is ReentrancyGuard, Ownable, RecoverableToken {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private _token;\r\n    address payable private _wallet;\r\n    // 1 wei will give you 1 unit\r\n    uint256 private _rate;\r\n    uint256 private _weiRaised;\r\n    \r\n    mapping(address => bool) public whitelistedAddresses;\r\n\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event WalletUpdate(address indexed updatedBy, uint256 date, address newWallet);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor to allow total rate at which tokens are given to wei\r\n    // To set the wallet that the funds are sent token\r\n    // The token that is to be sent (address)\r\n    // ------------------------------------------------------------------------\r\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\r\n        require(rate > 0);\r\n        require(wallet != address(0));\r\n        require(address(token) != address(0));\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allows the contract to be payable and tokens to be returned\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the token that the wrapper is mapped to\r\n    // ------------------------------------------------------------------------\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the admin wallet funds are sent to\r\n    // ------------------------------------------------------------------------\r\n    function wallet() public view returns (address) {\r\n        return _wallet;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the rate of wei to token\r\n    // ------------------------------------------------------------------------\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns how much wei has been raised using this wrapper\r\n    // ------------------------------------------------------------------------\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Sets the rate of wei to token\r\n    // ------------------------------------------------------------------------\r\n    function setRate(uint256 newRate) public onlyOwner{\r\n         _rate = newRate;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Adds/removes addresses from the whitelist to allow buy. This updates if already existing. (owner only)\r\n    // ------------------------------------------------------------------------\r\n    function updateWhitelistAddressStates(address[] memory addressesToUpdate, bool newState) public onlyOwner{\r\n        for(uint i = 0;i<addressesToUpdate.length;i++){\r\n            whitelistedAddresses[addressesToUpdate[i]] = newState;\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Update the wallet to recieve funds (owner only)\r\n    // ------------------------------------------------------------------------\r\n    function updateCollectionWallet(address payable newWallet) public onlyOwner{\r\n        _wallet = newWallet;\r\n        emit WalletUpdate(msg.sender, now, newWallet);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Instead of sending wei to contract we can also pay this fundtion\r\n    // We can also send tokens to another users account this way\r\n    // ------------------------------------------------------------------------\r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        // Ensure only KYC verified accounts can buy tokens\r\n        require(whitelistedAddresses[beneficiary] == true, \"Beneficiary address has not been verified\");\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        //Calculate token amount to sent\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        //Update total raised\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n        //Send tokens to beneficiary\r\n        _processPurchase(beneficiary, tokens);\r\n        //Update the event log\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n        //Forwad the funds to admin\r\n        _forwardFunds();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Require purchase isn't burn address and amount is greater than 0\r\n    // ------------------------------------------------------------------------\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal pure {\r\n        require(beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Safe transfer the tokens to user\r\n    // ------------------------------------------------------------------------\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Wrapper for the above method\r\n    // ------------------------------------------------------------------------\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get amount of tokens for wei sent\r\n    // ------------------------------------------------------------------------\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Sends funds paid to the contract to the admin account\r\n    // ------------------------------------------------------------------------\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecoveredTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdate\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPotentialNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokensToBeReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateCollectionWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToUpdate\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"updateWhitelistAddressStates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000005c9d8ed10c263f1bb02404145e7ce49cec0d87f00000000000000000000000004fd5b9b5dcc9a5d5931d007ba4ae573e760d9b64","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://deee2cc027a645ea392bd2f662de39ac7cc4ad7ed842e104eff88081a655bc0e"}]}