{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Mul Overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Div by 0\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface UniswapExchangeInterface {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\nstruct FullPoolInfo {\r\n    string logo;\r\n    string name;\r\n    UniswapExchangeInterface lpToken;           // Address of LP token contract.\r\n    uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n    uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\r\n    uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    IERC20 token0;\r\n    IERC20 token1;\r\n    string token0name;\r\n    string token1name;\r\n    string token0symbol;\r\n    string token1symbol;\r\n    uint256 token0decimals;\r\n    uint256 token1decimals;\r\n}\r\n\r\ninterface IMasterChef {\r\n    function poolLength() external view returns (uint256);\r\n    function poolInfo(uint256 nr) external view returns (address, uint256, uint256, uint256);\r\n}\r\n\r\ncontract Kitchen is Ownable {\r\n    IMasterChef masterChef = IMasterChef(0xFF281cEF43111A83f09C656734Fa03E6375d432A);\r\n    \r\n    mapping(uint256 => string) public logos;\r\n    mapping(uint256 => string) public names;\r\n    \r\n    constructor() public {\r\n        logos[0] = '🐢'; names[0] = 'Tether Turtle';\r\n        logos[1] = '🐌'; names[1] = 'Circle Snail';\r\n        logos[2] = '🦆'; names[2] = 'Donald DAI';\r\n        logos[3] = '🦍'; names[3] = 'Spartan Dollar';\r\n        logos[4] = '🍄'; names[4] = 'Compound Truffle';\r\n        logos[5] = '🐗'; names[5] = 'Aave Boar';\r\n        logos[6] = '🐍'; names[6] = 'Synthetic Snake';\r\n        logos[7] = '🦑'; names[7] = 'Umami Squid';\r\n        logos[8] = '🐸'; names[8] = 'Toadie Marine';\r\n        logos[9] = '🦖'; names[9] = 'Band-osaurus';\r\n        logos[10] = '🐥'; names[10] = 'Ample Chicks';\r\n        logos[11] = '🐋'; names[11] = 'YFI Whale';\r\n        logos[12] = '🍣'; names[12] = 'Sushi Party!';\r\n        logos[13] = '🦏'; names[13] = 'REN Rhino';\r\n        logos[14] = '🐂'; names[14] = 'BASED Bull';\r\n        logos[15] = '🦈'; names[15] = 'SRM Shark';\r\n        logos[16] = '🍠'; names[16] = 'YAMv2 Yam';\r\n        logos[17] = '🐊'; names[17] = 'CRV Crocodile';\r\n    }\r\n    \r\n    function setPoolInfo(uint256 pid, string memory logo, string memory name) public onlyOwner {\r\n        logos[pid] = logo;\r\n        names[pid] = name;\r\n    }\r\n\r\n    function getPoolsInfo() public view returns(FullPoolInfo[] memory) {\r\n        uint256 poolLength = masterChef.poolLength();\r\n        FullPoolInfo[] memory pools = new FullPoolInfo[](poolLength);\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            (address lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = masterChef.poolInfo(i);\r\n            UniswapExchangeInterface uniV2 = UniswapExchangeInterface(lpToken);\r\n            pools[i].lpToken = uniV2;\r\n            pools[i].allocPoint = allocPoint;\r\n            pools[i].lastRewardBlock = lastRewardBlock;\r\n            pools[i].accSushiPerShare = accSushiPerShare;\r\n            \r\n            IERC20 token0 = IERC20(uniV2.token0());\r\n            pools[i].token0 = token0;\r\n            IERC20 token1 = IERC20(uniV2.token1());\r\n            pools[i].token1 = token1;\r\n            \r\n            pools[i].token0name = token0.name();\r\n            pools[i].token0symbol = token0.symbol();\r\n            pools[i].token0decimals = token0.decimals();\r\n            \r\n            pools[i].token1name = token1.name();\r\n            pools[i].token1symbol = token1.symbol();\r\n            pools[i].token1decimals = token1.decimals();\r\n            \r\n            pools[i].logo = logos[i];\r\n            pools[i].name = names[i];\r\n        }\r\n        return pools;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPoolsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract UniswapExchangeInterface\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token0symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct FullPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"logos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Kitchen","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fb2179e1fd12f228ae1506c05d09d42294b352363bd9d2ab66cb5ef9ff9a2cc9"}]}