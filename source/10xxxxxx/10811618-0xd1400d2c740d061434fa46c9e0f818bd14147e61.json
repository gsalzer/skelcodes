{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n██╗     ███████╗██╗  ██╗                         \r\n██║     ██╔════╝╚██╗██╔╝                         \r\n██║     █████╗   ╚███╔╝                          \r\n██║     ██╔══╝   ██╔██╗                          \r\n███████╗███████╗██╔╝ ██╗                         \r\n╚══════╝╚══════╝╚═╝  ╚═╝                         \r\n ██████╗ ██╗   ██╗██╗██╗     ██████╗             \r\n██╔════╝ ██║   ██║██║██║     ██╔══██╗            \r\n██║  ███╗██║   ██║██║██║     ██║  ██║            \r\n██║   ██║██║   ██║██║██║     ██║  ██║            \r\n╚██████╔╝╚██████╔╝██║███████╗██████╔╝            \r\n ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝             \r\n██╗      ██████╗  ██████╗██╗  ██╗███████╗██████╗ \r\n██║     ██╔═══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗\r\n██║     ██║   ██║██║     █████╔╝ █████╗  ██████╔╝\r\n██║     ██║   ██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗\r\n███████╗╚██████╔╝╚██████╗██║  ██╗███████╗██║  ██║\r\n╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝\r\nDEAR MSG.SENDER(S):\r\n\r\n/ LXGL is a project in beta.\r\n// Please audit & use at your own risk.\r\n/// Entry into LXGL shall not create an attorney/client relationship.\r\n//// Likewise, LXGL should not be construed as legal advice or replacement for professional counsel.\r\n///// STEAL THIS C0D3SL4W \r\n\r\n~presented by LexDAO | Raid Guild LLC\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IERC20 { // brief interface for erc20 token txs\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IWETH { // brief interface for canonical ether token wrapper contract \r\n    function deposit() payable external;\r\n    \r\n    function transfer(address dst, uint wad) external returns (bool);\r\n}\r\n\r\nlibrary Address { // helper for address type / openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 { // wrapper around erc20 token txs for non-standard contracts / openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n   function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: erc20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath { // wrapper over solidity arithmetic for unit under/overflow checks\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Context { // describes current contract execution context (metaTX support) / openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract LexGuildLocker is Context { // splittable digital deal lockers w/ embedded arbitration tailored for guild work\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /** <$> LXGL <$> **/\r\n    address public lexDAO;\r\n    address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference\r\n    uint256 public lockerCount;\r\n    uint256 public MAX_DURATION; // time limit on token lockup - default 63113904 (2-year)\r\n    uint256 public resolutionRate;\r\n    mapping(uint256 => Locker) public lockers; \r\n\r\n    struct Locker {  \r\n        address client; \r\n        address[] provider;\r\n        address resolver;\r\n        address token;\r\n        uint8 confirmed;\r\n        uint8 locked;\r\n        uint256[] batch;\r\n        uint256 cap;\r\n        uint256 released;\r\n        uint256 termination;\r\n        bytes32 details; \r\n    }\r\n    \r\n    event RegisterLocker(address indexed client, address[] indexed provider, address indexed resolver, address token, uint256[] batch, uint256 cap, uint256 index, uint256 termination, bytes32 details);\t\r\n    event ConfirmLocker(uint256 indexed index, uint256 indexed sum);  \r\n    event Release(uint256 indexed index, uint256[] indexed milestone); \r\n    event Withdraw(uint256 indexed index, uint256 indexed remainder);\r\n    event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);\r\n    event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); \r\n    event UpdateLockerSettings(address indexed lexDAO, uint256 indexed MAX_DURATION, uint256 indexed resolutionRate, bytes32 details);\r\n    \r\n    constructor (address _lexDAO, uint256 _MAX_DURATION, uint256 _resolutionRate) public {\r\n        lexDAO = _lexDAO;\r\n        MAX_DURATION = _MAX_DURATION;\r\n        resolutionRate = _resolutionRate;\r\n    }\r\n\r\n    /***************\r\n    LOCKER FUNCTIONS\r\n    ***************/\r\n    function registerLocker( // register locker for token deposit & client deal confirmation\r\n        address client,\r\n        address[] calldata provider,\r\n        address resolver,\r\n        address token,\r\n        uint256[] calldata batch, \r\n        uint256 cap,\r\n        uint256 milestones,\r\n        uint256 termination, // exact termination date in seconds since epoch\r\n        bytes32 details) external returns (uint256) {\r\n        uint256 sum;\r\n        for (uint256 i = 0; i < provider.length; i++) {\r\n            sum = sum.add(batch[i]);\r\n        }\r\n        \r\n        require(sum.mul(milestones) == cap, \"deposit != milestones\");\r\n        require(termination <= now.add(MAX_DURATION), \"duration maxed\");\r\n        \r\n        lockerCount = lockerCount + 1;\r\n        uint256 index = lockerCount;\r\n        \r\n        lockers[index] = Locker( \r\n            client, \r\n            provider,\r\n            resolver,\r\n            token,\r\n            0,\r\n            0,\r\n            batch,\r\n            cap,\r\n            0,\r\n            termination,\r\n            details);\r\n\r\n        emit RegisterLocker(client, provider, resolver, token, batch, cap, index, termination, details); \r\n        return index;\r\n    }\r\n    \r\n    function confirmLocker(uint256 index) payable external { // client confirms deposit of cap & locks in deal\r\n        Locker storage locker = lockers[index];\r\n        \r\n        require(locker.confirmed == 0, \"confirmed\");\r\n        require(_msgSender() == locker.client, \"!client\");\r\n        \r\n        uint256 sum = locker.cap;\r\n        \r\n        if (locker.token == wETH && msg.value > 0) {\r\n            require(msg.value == sum, \"!ETH\");\r\n            IWETH(wETH).deposit();\r\n            (bool success, ) = wETH.call.value(msg.value)(\"\");\r\n            require(success, \"!transfer\");\r\n            IWETH(wETH).transfer(address(this), msg.value);\r\n        } else {\r\n            IERC20(locker.token).safeTransferFrom(msg.sender, address(this), sum);\r\n        }\r\n        \r\n        locker.confirmed = 1;\r\n        \r\n        emit ConfirmLocker(index, sum); \r\n    }\r\n\r\n    function release(uint256 index) external { // client transfers locker milestone batch to provider(s) \r\n    \tLocker storage locker = lockers[index];\r\n\t    \r\n\t    require(locker.locked == 0, \"locked\");\r\n\t    require(locker.confirmed == 1, \"!confirmed\");\r\n\t    require(locker.cap > locker.released, \"released\");\r\n    \trequire(_msgSender() == locker.client, \"!client\"); \r\n        \r\n        uint256[] memory milestone = locker.batch;\r\n        \r\n        for (uint256 i = 0; i < locker.provider.length; i++) {\r\n            IERC20(locker.token).safeTransfer(locker.provider[i], milestone[i]);\r\n            locker.released = locker.released.add(milestone[i]);\r\n        }\r\n\r\n\t    emit Release(index, milestone); \r\n    }\r\n    \r\n    function withdraw(uint256 index) external { // withdraw locker remainder to client if termination time passes & no lock\r\n    \tLocker storage locker = lockers[index];\r\n        \r\n        require(locker.locked == 0, \"locked\");\r\n        require(locker.confirmed == 1, \"!confirmed\");\r\n        require(locker.cap > locker.released, \"released\");\r\n        require(now > locker.termination, \"!terminated\");\r\n        \r\n        uint256 remainder = locker.cap.sub(locker.released); \r\n        \r\n        IERC20(locker.token).safeTransfer(locker.client, remainder);\r\n        \r\n        locker.released = locker.released.add(remainder); \r\n        \r\n\t    emit Withdraw(index, remainder); \r\n    }\r\n    \r\n    /************\r\n    ADR FUNCTIONS\r\n    ************/\r\n    function lock(uint256 index, bytes32 details) external { // client or main (0) provider can lock remainder for resolution during locker period / update request details\r\n        Locker storage locker = lockers[index]; \r\n        \r\n        require(locker.confirmed == 1, \"!confirmed\");\r\n        require(locker.cap > locker.released, \"released\");\r\n        require(now < locker.termination, \"terminated\"); \r\n        require(_msgSender() == locker.client || _msgSender() == locker.provider[0], \"!party\"); \r\n\r\n\t    locker.locked = 1; \r\n\t    \r\n\t    emit Lock(_msgSender(), index, details);\r\n    }\r\n    \r\n    function resolve(uint256 index, uint256 clientAward, uint256[] calldata providerAward, bytes32 details) external { // resolver splits locked deposit remainder between client & provider(s)\r\n        Locker storage locker = lockers[index];\r\n        \r\n        uint256 remainder = locker.cap.sub(locker.released); \r\n\t    uint256 resolutionFee = remainder.div(resolutionRate); // calculate dispute resolution fee\r\n\t    \r\n\t    require(locker.locked == 1, \"!locked\"); \r\n\t    require(locker.cap > locker.released, \"released\");\r\n\t    require(_msgSender() == locker.resolver, \"!resolver\");\r\n\t    require(_msgSender() != locker.client, \"resolver == client\");\r\n\t    \r\n\t    for (uint256 i = 0; i < locker.provider.length; i++) {\r\n            require(msg.sender != locker.provider[i], \"resolver == provider\");\r\n            require(clientAward.add(providerAward[i]) == remainder.sub(resolutionFee), \"resolution != remainder\");\r\n            IERC20(locker.token).safeTransfer(locker.provider[i], providerAward[i]);\r\n        }\r\n  \r\n        IERC20(locker.token).safeTransfer(locker.client, clientAward);\r\n        IERC20(locker.token).safeTransfer(locker.resolver, resolutionFee);\r\n\t    \r\n\t    locker.released = locker.released.add(remainder); \r\n\t    \r\n\t    emit Resolve(_msgSender(), clientAward, providerAward, index, resolutionFee, details);\r\n    }\r\n    \r\n    /**************\r\n    LEXDAO FUNCTION\r\n    **************/\r\n    function updateLockerSettings(address _lexDAO, uint256 _MAX_DURATION, uint256 _resolutionRate, bytes32 details) external { \r\n        require(_msgSender() == lexDAO, \"!lexDAO\");\r\n        \r\n        lexDAO = _lexDAO;\r\n        MAX_DURATION = _MAX_DURATION;\r\n        resolutionRate = _resolutionRate;\r\n\t    \r\n\t    emit UpdateLockerSettings(lexDAO, MAX_DURATION, resolutionRate, details);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lexDAO\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resolutionRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"ConfirmLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"provider\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"batch\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"RegisterLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"milestone\",\"type\":\"uint256[]\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"clientAward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"providerAward\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolutionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"Resolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lexDAO\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MAX_DURATION\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"resolutionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"UpdateLockerSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"confirmLocker\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lexDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"confirmed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"locked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"provider\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"batch\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestones\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"registerLocker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolutionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"providerAward\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lexDAO\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resolutionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"details\",\"type\":\"bytes32\"}],\"name\":\"updateLockerSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexGuildLocker","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000057e820d740d5aaaffa3c6de08c5c98d990db00d0000000000000000000000000000000000000000000000000000000003c30ab00000000000000000000000000000000000000000000000000000000000000014","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f37d4bcbf3b58353b126dc55ec88a09f79200e58e85022e3c7ceee2ad71d1e22"}]}