{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function burn(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\ncontract Bonded is OwnableUpgradeSafe {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint public TGE;\r\n    uint public constant month = 30 days;\r\n    uint constant decimals = 18;\r\n    uint constant decMul = uint(10) ** decimals;\r\n    \r\n    address public advisorsAddress;\r\n    address public foundationAddress;\r\n    address public ecosystemAddress;\r\n    address public reserveAddress;\r\n    address public marketingAddress;\r\n    address public employeesAddress;\r\n    \r\n    uint public constant SEED_POOL        = 50000000 * decMul;\r\n    uint public constant ADVISORS_POOL    = 4800000 * decMul;\r\n    uint public constant FOUNDATION_POOL  = 12000000 * decMul;\r\n    uint public constant ECOSYSTEM_POOL   = 12000000 * decMul;\r\n    uint public constant RESERVE_POOL     = 6000000 * decMul;\r\n    uint public constant MARKETING_POOL   = 4800000 * decMul;\r\n    uint public constant EMPLOYEES_POOL   = 8400000 * decMul;\r\n    \r\n    uint public currentSeedPool         = SEED_POOL;\r\n    uint public currentAdvisorsPool     = ADVISORS_POOL;\r\n    uint public currentFoundationPool   = FOUNDATION_POOL;\r\n    uint public currentEcosystemPool    = ECOSYSTEM_POOL;\r\n    uint public currentReservePool      = RESERVE_POOL;\r\n    uint public currentMarketingPool    = MARKETING_POOL;\r\n    uint public currentEmployeesPool    = EMPLOYEES_POOL;\r\n\r\n    IERC20 public token;\r\n    \r\n    mapping(address => uint) public seedWhitelist;\r\n\r\n    constructor(address _advisorsAddress,\r\n                address _foundationAddress,\r\n                address _ecosystemAddress,\r\n                address _reserveAddress,\r\n                address _marketingAddress,\r\n                address _employeesAddress) public {\r\n        __Ownable_init_unchained();\r\n\r\n        advisorsAddress = _advisorsAddress;\r\n        foundationAddress = _foundationAddress;\r\n        ecosystemAddress = _ecosystemAddress;\r\n        reserveAddress = _reserveAddress;\r\n        marketingAddress = _marketingAddress;\r\n        employeesAddress = _employeesAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the Plutus ERC-20 token contract address\r\n     */\r\n    function setTokenContract(address _tokenAddress) public onlyOwner {\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the current TGE from where the vesting period will be counted. Can be used only if TGE is zero.\r\n     */\r\n    function setTGE() public onlyOwner {\r\n        require(TGE == 0, \"TGE has already been set\");\r\n        TGE = now;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets each address from `addresses` as the key and each balance\r\n     * from `balances` to the privateWhitelist. Can be used only by an owner.\r\n     */\r\n    function addToWhitelist(address[] memory addresses, uint[] memory balances) public onlyOwner {\r\n        require(addresses.length == balances.length, \"Invalid request length\");\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            seedWhitelist[addresses[i]] = balances[i];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev claim seed tokens from the contract balance.\r\n     * `amount` means how many tokens must be claimed.\r\n     * Can be used only by an owner or by any whitelisted person\r\n     */\r\n    function claimSeedTokens(uint amount) public {\r\n        require(seedWhitelist[msg.sender] > 0 || msg.sender == owner(), \"Sender is not whitelisted\");\r\n        require(seedWhitelist[msg.sender] >= amount || msg.sender == owner(), \"Exceeded token amount\");\r\n        require(currentSeedPool >= amount, \"Exceeded seedpool\");\r\n        \r\n        currentSeedPool = currentSeedPool.sub(amount);\r\n        \r\n        // Bridge fees are not taken off for contract owner\r\n        if (msg.sender == owner()) {\r\n            token.transfer(msg.sender, amount);\r\n            return;\r\n        }\r\n        \r\n        seedWhitelist[msg.sender] = seedWhitelist[msg.sender].sub(amount);\r\n        \r\n        uint amountToBurn = amount.mul(getCurrentFee()).div(1000);\r\n\r\n        if (amountToBurn > 0) {\r\n            token.burn(amountToBurn);\r\n        }\r\n        \r\n        token.transfer(msg.sender, amount.sub(amountToBurn));\r\n    }\r\n    \r\n    /**\r\n     * @dev claim advisors tokens from the contract balance.\r\n     * Can be used only by an owner or from advisorsAddress.\r\n     * Tokens will be send to sender address.\r\n     */\r\n    function claimAdvisorsTokens() public {\r\n        require(msg.sender == advisorsAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        //6 months of vestiong period\r\n        require(now >= TGE + 6*month, \"Vesting period\");\r\n        \r\n        uint amount = 0;\r\n        if (currentAdvisorsPool == ADVISORS_POOL) {\r\n            currentAdvisorsPool -= ADVISORS_POOL.div(4);\r\n            amount += ADVISORS_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 12*month && currentAdvisorsPool == ADVISORS_POOL.sub(ADVISORS_POOL.div(4))) {\r\n            currentAdvisorsPool -= ADVISORS_POOL.div(4);\r\n            amount += ADVISORS_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 18*month && currentAdvisorsPool == ADVISORS_POOL.sub(ADVISORS_POOL.div(2))) {\r\n            currentAdvisorsPool -= ADVISORS_POOL.div(4);\r\n            amount += ADVISORS_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 24*month && currentAdvisorsPool == ADVISORS_POOL.sub(ADVISORS_POOL.mul(3).div(4))) {    \r\n            currentAdvisorsPool -= ADVISORS_POOL.div(4);\r\n            amount += ADVISORS_POOL.div(4);\r\n        }\r\n        \r\n        // 25% each 6 months\r\n        require(amount > 0, \"nothing to claim\");\r\n        \r\n        uint amountToBurn = amount.mul(getCurrentFee()).div(1000);\r\n\r\n        if (amountToBurn > 0) {\r\n            token.burn(amountToBurn);\r\n        }\r\n        \r\n        token.transfer(advisorsAddress, amount.sub(amountToBurn));\r\n    }\r\n    \r\n    /**\r\n     * @dev claim foundation tokens from the contract balance.\r\n     * Can be used only by an owner or from foundationAddress.\r\n     * Tokens will be send to foundationAddress.\r\n     */\r\n    function claimFoundationTokens() public {\r\n        require(msg.sender == foundationAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        // 2.5 years of vestiong period\r\n        require(now >= TGE + 30*month, \"Vesting period\");\r\n                \r\n        uint amount = 0;\r\n        if (now >= TGE + 30*month && currentFoundationPool == FOUNDATION_POOL) {\r\n            currentFoundationPool -= FOUNDATION_POOL.div(4);\r\n            amount += FOUNDATION_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 36*month && currentFoundationPool == FOUNDATION_POOL.sub(FOUNDATION_POOL.div(4))) {\r\n            currentFoundationPool -= FOUNDATION_POOL.div(4);\r\n            amount += FOUNDATION_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 42*month && currentFoundationPool == FOUNDATION_POOL.sub(FOUNDATION_POOL.div(2))) {\r\n            currentFoundationPool -= FOUNDATION_POOL.div(4);\r\n            amount += FOUNDATION_POOL.div(4);\r\n        }\r\n\r\n        if (now >= TGE + 48*month && currentFoundationPool == FOUNDATION_POOL.sub(FOUNDATION_POOL.mul(3).div(4))) {\r\n            currentFoundationPool -= FOUNDATION_POOL.div(4);\r\n            amount += FOUNDATION_POOL.div(4);\r\n        }\r\n        \r\n        // 25% each 6 months\r\n        require(amount > 0, \"nothing to claim\");\r\n       \r\n        // No sense to burn because 2.5 years vestiong period\r\n        token.transfer(foundationAddress, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev claim ecosystem tokens from the contract balance.\r\n     * Can be used only by an owner or from ecosystemAddress.\r\n     * Tokens will be send to ecosystemAddress.\r\n     */\r\n    function claimEcosystemTokens() public {\r\n        require(msg.sender == ecosystemAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        //6 months of vestiong period\r\n        require(now >= TGE + 6*month, \"Vesting period\");\r\n        \r\n        uint monthPassed = ((now.sub(TGE)).div(month)).sub(5);\r\n        \r\n        // Avoid overflow when releasing 2% each month\r\n        if (monthPassed > 50) {\r\n            monthPassed = 50;\r\n        }\r\n\r\n        uint amount = currentEcosystemPool.sub(ECOSYSTEM_POOL.sub((ECOSYSTEM_POOL.mul(monthPassed*2)).div(100)));\r\n        require(amount > 0, \"nothing to claim\");\r\n        \r\n        currentEcosystemPool = currentEcosystemPool.sub(amount);\r\n        \r\n        uint amountToBurn = amount.mul(getCurrentFee()).div(1000);\r\n\r\n        if (amountToBurn > 0) {\r\n            token.burn(amountToBurn);\r\n        }\r\n        \r\n        token.transfer(ecosystemAddress, amount.sub(amountToBurn));\r\n    }\r\n    \r\n    /**\r\n     * @dev claim reserve tokens from the contract balance.\r\n     * Can be used only by an owner or from reserveAddress.\r\n     * Tokens will be send to reserveAddress.\r\n     */\r\n    function claimReserveTokens() public {\r\n        require(msg.sender == reserveAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        //6 months of vestiong period\r\n        require(now >= TGE + 6*month, \"Vesting period\");\r\n        \r\n        uint monthPassed = now.sub(TGE).div(month).sub(5);\r\n        \r\n        // Avoid overflow when releasing 5% each month\r\n        if (monthPassed > 20) {\r\n            monthPassed = 20;\r\n        }\r\n        \r\n        uint amount = currentReservePool.sub(RESERVE_POOL.sub((RESERVE_POOL.mul(monthPassed*5)).div(100)));\r\n\r\n        currentReservePool = currentReservePool.sub(amount);\r\n        require(amount > 0, \"nothing to claim\");\r\n        \r\n        uint amountToBurn = amount.mul(getCurrentFee()).div(1000);\r\n\r\n        if (amountToBurn > 0) {\r\n            token.burn(amountToBurn);\r\n        }\r\n        \r\n        token.transfer(reserveAddress, amount.sub(amountToBurn));\r\n    }\r\n    \r\n    /**\r\n     * @dev claim marketing tokens from the contract balance.\r\n     * Can be used only by an owner or from marketingAddress.\r\n     * Tokens will be send to marketingAddress.\r\n     */\r\n    function claimMarketingTokens() public {\r\n        require(msg.sender == marketingAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        // no vestiong period\r\n        uint monthPassed = (now.sub(TGE)).div(month).add(1);\r\n        \r\n        // Avoid overflow when releasing 10% each month\r\n        if (monthPassed > 10) {\r\n            monthPassed = 10;\r\n        }\r\n        \r\n        uint amount = currentMarketingPool.sub(MARKETING_POOL.sub(MARKETING_POOL.mul(monthPassed*10).div(100)));\r\n        require(amount > 0, \"nothing to claim\");\r\n\r\n        currentMarketingPool = currentMarketingPool.sub(amount);\r\n        \r\n        uint amountToBurn = amount.mul(getCurrentFee()).div(1000);\r\n\r\n        if (amountToBurn > 0) {\r\n            token.burn(amountToBurn);\r\n        }\r\n        \r\n        token.transfer(marketingAddress, amount.sub(amountToBurn));\r\n    }\r\n\r\n    /**\r\n     * @dev claim employee tokens from the contract balance.\r\n     * Can be used only by an owner or from employeesAddress\r\n     */\r\n    function claimEmployeeTokens() public {\r\n        require(msg.sender == employeesAddress || msg.sender == owner(), \"Unauthorised sender\");\r\n        require(TGE > 0, \"TGE must be set\");\r\n\r\n        // 1.5 years of vesting period\r\n        require(now >= TGE + 18 * month, \"Vesting period\");\r\n\r\n        // Get the total months passed after the vesting period of 1.5 years\r\n        uint monthPassed = (now.sub(TGE)).div(month).sub(18).add(1);\r\n\r\n        // Avoid overflow when releasing 10% each month\r\n        // If more than 10 months passed without token claim then 100% tokens can be claimed at once.\r\n        if (monthPassed > 10) {\r\n            monthPassed = 10;\r\n        }\r\n\r\n        uint amount = currentEmployeesPool.sub(EMPLOYEES_POOL.sub(EMPLOYEES_POOL.mul(monthPassed*10).div(100)));\r\n        require(amount > 0, \"nothing to claim\");\r\n\r\n        currentEmployeesPool = currentEmployeesPool.sub(amount);\r\n\r\n        //18 month of vesting period, no need to check fee        \r\n        token.transfer(employeesAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev getCurrentFee calculate current fee according to TGE and returns it.\r\n     * NOTE: divide result by 1000 to calculate current percent.\r\n     */\r\n    function getCurrentFee() public view returns (uint) {\r\n        if (now >= TGE + 9 * month) {\r\n            return 0;\r\n        }\r\n        if (now >= TGE + 8 * month) {\r\n            return 92;\r\n        }\r\n        if (now >= TGE + 7 * month) {\r\n           return 115;\r\n        }\r\n        if (now >= TGE + 6 * month) {\r\n            return 144;\r\n        }\r\n        if (now >= TGE + 5 * month) {\r\n            return 180;\r\n        }\r\n        if (now >= TGE + 4 * month) {\r\n            return 225;\r\n        }\r\n        if (now >= TGE + 3 * month) {\r\n            return 282;\r\n        }\r\n        if (now >= TGE + 2 * month) {\r\n            return 352;\r\n        }\r\n        if (now >= TGE + 1 * month) {\r\n            return 440;\r\n        }\r\n\r\n        return 550;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_advisorsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_employeesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADVISORS_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ECOSYSTEM_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMPLOYEES_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDATION_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdvisorsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEcosystemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmployeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFoundationTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMarketingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimSeedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAdvisorsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEcosystemPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEmployeesPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFoundationPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMarketingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReservePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"employeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seedWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bonded","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006aa8f653880a94583232de390bd4be03483886b80000000000000000000000008ab11fd2522d28cb9b0c50e78cb5623d3e676f92000000000000000000000000c7b1abd4e968eade01023011b495b995fafb68d10000000000000000000000005ae5bfdbab296d758806deda16f4f699366c651d000000000000000000000000ffde9f42f1eac6354a8c050e07f804d47a12dd9c000000000000000000000000ce5f3160c9606aaca6ae6c1581057f161d7d0508","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4a31ce0fdbd0a9a82911a33db1848213a8c5f3d00a6440b3697965ffa637ae0c"}]}