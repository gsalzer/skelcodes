{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16; \r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface UTOPIAInterface\r\n{\r\n    function userStakedAmount(address _token,address user) external view returns (uint) ;\r\n    function totalStakedAmount(address _token) external view returns(uint);\r\n    function authorisedToken(address _token) external view returns(bool);\r\n    function updateUserData(address _token, address user, uint d_T, uint d_E, uint s_A, uint t_T, uint t_E) external returns(bool);\r\n}\r\n\r\ninterface tokenInterface\r\n{\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract UTOPIA_Dividend is owned \r\n{\r\n    using SafeMath for uint256;\r\n\r\n    struct userData\r\n    {\r\n        uint distCount_T;\r\n        uint distCount_Direct;\r\n        uint distCount_E;\r\n        uint totalWhenWithdrawn_T;\r\n        uint totalWhenWithdrawn_Direct;\r\n        uint totalWhenWithdrawn_E;\r\n    }\r\n\r\n    // All first address in mapping is token \r\n    //  => user \r\n    mapping(address => mapping(address => userData)) public userDatas;\r\n\r\n    mapping (address => uint) public lastDistributionTime;  // last time when distributed\r\n    mapping (address => uint) public distributionInterval;  // Next distribution after this seconds\r\n\r\n    mapping (address => uint) public totalDepositedDividend_T; // total deposited dividend for all time for token\r\n    mapping (address => uint) public totalDepositedDividend_Direct; // total direct dividend for all time for token\r\n    mapping (address => uint) public totalDepositedDividend_E; // total deposited dividend for all time for ether\r\n    mapping (address => uint) public totalWithdrawnByUser_T; // sum of all withdrawn amount withdrawn by user in current distribution\r\n    mapping (address => uint) public totalWithdrawnByUser_E; // sum of all withdrawn amount withdrawn by user in current distribution\r\n\r\n    mapping (address => uint) public distributedTotalAmountTillNow_T; // total amount of contract when last distribution done\r\n    mapping (address => uint) public distributedTotalAmountTillNow_E; // total amount of contract when last distribution done\r\n    mapping (address => uint) public distributedTotalAmountTillNow_Direct;\r\n\r\n    mapping (address => uint) public totalDistributionCount_T;\r\n    mapping (address => uint) public totalDistributionCount_Direct;\r\n    mapping (address => uint) public totalDistributionCount_E;\r\n\r\n    uint public distributionPercent;\r\n\r\n    address public stakingContractAddress;\r\n\r\n    function adjustDistributionTime(address token, uint _delayInSeconds, bool _increase) public onlyOwner returns(bool)\r\n    {\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(token), \"Invalid token\");\r\n        if(_increase)\r\n        {\r\n            lastDistributionTime[token] += _delayInSeconds;\r\n        }\r\n        else\r\n        {\r\n            lastDistributionTime[token] -= _delayInSeconds;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function setdistributionInterval(address token, uint _distributionInterval ) public onlyOwner returns(bool)\r\n    {\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(token), \"Invalid token\");\r\n        distributionInterval[token] = _distributionInterval;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setStakingContractAddress(address _stakingContractAddress, uint _distributionPercent ) public onlyOwner returns(bool)\r\n    {\r\n        stakingContractAddress = _stakingContractAddress;\r\n        distributionPercent = _distributionPercent;\r\n        return true;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        \r\n    }\r\n\r\n\r\n    event depositDividendEv(address token, address depositor, uint amount_E, uint amount_T);\r\n    function depositDividend(address token, uint tokenAmount) public payable returns(bool)\r\n    {\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(token), \"Invalid token\");\r\n        if(msg.value > 0) totalDepositedDividend_E[token] = totalDepositedDividend_E[token].add(msg.value);\r\n        if(tokenAmount > 0 ) \r\n        {\r\n            require(tokenInterface(token).transferFrom(msg.sender, address(this), tokenAmount),\"token transfer failed\");\r\n            totalDepositedDividend_T[token] = totalDepositedDividend_T[token].add(tokenAmount);\r\n        }\r\n        emit depositDividendEv(token, msg.sender, msg.value, tokenAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    event distributeDividendEv(address token, address user, uint amount_E, uint amount_T);\r\n    function distributeDividend(address token) public onlyOwner returns(bool)\r\n    {\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(token), \"Invalid token\");\r\n        require(lastDistributionTime[token] + distributionInterval[token] <= now, \"please wait some more time\" );\r\n        uint amount_E = ( totalDepositedDividend_E[token]-distributedTotalAmountTillNow_E[token]) * distributionPercent / 100000000;\r\n        uint amount_T = ( totalDepositedDividend_T[token]-distributedTotalAmountTillNow_T[token]) * distributionPercent / 100000000;\r\n        require(amount_E > 0 || amount_T > 0 , \"no amount to distribute next\");\r\n        if(amount_E > 0)\r\n        {\r\n            distributedTotalAmountTillNow_E[token] += amount_E;\r\n            totalDistributionCount_E[token]++;\r\n        }\r\n        if(amount_T > 0)\r\n        {\r\n            distributedTotalAmountTillNow_T[token] += amount_T;\r\n            totalDistributionCount_T[token]++;\r\n        }\r\n        lastDistributionTime[token] = now;\r\n        emit distributeDividendEv(token,msg.sender, amount_E, amount_T);\r\n        return true;\r\n    }\r\n\r\n    function directDistribute(address _token, uint _amount) public returns(bool)\r\n    {\r\n        require(msg.sender == stakingContractAddress || msg.sender == owner, \"Invalid caller\");\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(_token), \"Invalid token\");\r\n        require(_amount > 0 , \"invalid amount to distribute direct\");\r\n\r\n        distributedTotalAmountTillNow_Direct[_token] += _amount;\r\n        totalDepositedDividend_Direct[_token] += _amount;\r\n        totalDistributionCount_Direct[_token]++;\r\n        return true;\r\n    }\r\n\r\n    event withdrawMyDividendEv(address token, address user, uint amount_E, uint amount_T);\r\n    // searchFrom = 0 means start searching from latest stake records of the user, and if >  0 then before latest\r\n    function withdrawMyDividend(address _token) public returns (bool)\r\n    {\r\n        require(UTOPIAInterface(stakingContractAddress).authorisedToken(_token), \"Invalid token\");\r\n\r\n        uint amount_E = distributedTotalAmountTillNow_E[_token].sub(userDatas[_token][tx.origin].totalWhenWithdrawn_E);\r\n        uint amount_T = distributedTotalAmountTillNow_T[_token].sub(userDatas[_token][tx.origin].totalWhenWithdrawn_T);\r\n        uint amount_Direct = distributedTotalAmountTillNow_Direct[_token].sub(userDatas[_token][tx.origin].totalWhenWithdrawn_Direct);\r\n        uint userStaked = UTOPIAInterface(stakingContractAddress).userStakedAmount(_token, tx.origin);\r\n\r\n        uint totalStaked = UTOPIAInterface(stakingContractAddress).totalStakedAmount(_token);\r\n        if(totalStaked > 0)\r\n        {\r\n            uint gain_E = amount_E * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n            uint gain_T = amount_T * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n            gain_T += amount_Direct * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n            userDatas[_token][tx.origin].distCount_T = totalDistributionCount_T[_token];\r\n            userDatas[_token][tx.origin].distCount_Direct = totalDistributionCount_Direct[_token];\r\n            userDatas[_token][tx.origin].distCount_E = totalDistributionCount_E[_token];\r\n            userDatas[_token][tx.origin].totalWhenWithdrawn_T = distributedTotalAmountTillNow_T[_token];\r\n            userDatas[_token][tx.origin].totalWhenWithdrawn_Direct = distributedTotalAmountTillNow_Direct[_token];\r\n            userDatas[_token][tx.origin].totalWhenWithdrawn_E = distributedTotalAmountTillNow_E[_token];\r\n\r\n            if(gain_E > 0) tx.origin.transfer(gain_E);\r\n            if(gain_T > 0) require(tokenInterface(_token).transfer(tx.origin, gain_T ), \"token transfer failed\");\r\n            emit withdrawMyDividendEv(_token,tx.origin,gain_E, gain_T);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function viewMyWithdrawable(address _token, address _user) public view returns(uint amount_E,uint amount_T, uint amount_Direct)\r\n    {\r\n        uint userStaked = UTOPIAInterface(stakingContractAddress).userStakedAmount(_token, _user);\r\n        amount_E = distributedTotalAmountTillNow_E[_token].sub(userDatas[_token][_user].totalWhenWithdrawn_E);\r\n        amount_T = distributedTotalAmountTillNow_T[_token].sub(userDatas[_token][_user].totalWhenWithdrawn_T);\r\n        amount_Direct= distributedTotalAmountTillNow_Direct[_token].sub(userDatas[_token][_user].totalWhenWithdrawn_Direct);\r\n\r\n        uint totalStaked = UTOPIAInterface(stakingContractAddress).totalStakedAmount(_token);\r\n        amount_E = amount_E * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n        amount_T = amount_T * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n        amount_Direct = amount_Direct * ((userStaked * 100000000 / totalStaked) / 1000000);\r\n        return (amount_E,amount_T, amount_Direct);\r\n    }\r\n\r\n    function currentDepositedAmount(address _token) public view returns(uint amount_E, uint amount_T)\r\n    {\r\n        return (totalDepositedDividend_E[_token] - distributedTotalAmountTillNow_E[_token],totalDepositedDividend_T[_token] - distributedTotalAmountTillNow_T[_token]);\r\n    }\r\n\r\n    function viewDistributionAmount(address _token) public view returns (uint amount_E, uint amount_T)\r\n    {\r\n        return (totalDepositedDividend_E[_token] - distributedTotalAmountTillNow_E[_token],totalDepositedDividend_T[_token] - distributedTotalAmountTillNow_T[_token] );\r\n    }    \r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"}],\"name\":\"depositDividendEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"}],\"name\":\"distributeDividendEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"}],\"name\":\"withdrawMyDividendEv\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delayInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"}],\"name\":\"adjustDistributionTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"currentDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directDistribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributeDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributedTotalAmountTillNow_Direct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributedTotalAmountTillNow_E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributedTotalAmountTillNow_T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDistributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_distributionPercent\",\"type\":\"uint256\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_distributionInterval\",\"type\":\"uint256\"}],\"name\":\"setdistributionInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedDividend_Direct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedDividend_E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedDividend_T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDistributionCount_Direct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDistributionCount_E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDistributionCount_T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawnByUser_E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawnByUser_T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDatas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distCount_T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distCount_Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distCount_E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWhenWithdrawn_T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWhenWithdrawn_Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWhenWithdrawn_E\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"viewDistributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewMyWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_E\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_Direct\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawMyDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UTOPIA_Dividend","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4499663cb2f1d6871ef7bd69f2e98d5aff9a151d6fe017a225ee6a77333faa1c"}]}