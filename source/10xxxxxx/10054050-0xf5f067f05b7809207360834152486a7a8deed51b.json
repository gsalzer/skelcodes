{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20contract.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// ----------------------------------------------------------------------------\\r\\n// ERC Token Standard #20 Interface\\r\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\r\\n// ----------------------------------------------------------------------------\\r\\nabstract contract ERC20Interface {\\r\\n    function totalSupply() public virtual view returns (uint);\\r\\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\\r\\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\\r\\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\\r\\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\r\\n}\"},\"Owned.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n// ----------------------------------------------------------------------------\\r\\n// Owned contract\\r\\n// ----------------------------------------------------------------------------\\r\\ncontract Owned {\\r\\n    address payable public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\r\\n        owner = _newOwner;\\r\\n        emit OwnershipTransferred(msg.sender, _newOwner);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n *\\r\\n*/\\r\\n \\r\\nlibrary SafeMath {\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  \\r\\n  function ceil(uint a, uint m) internal pure returns (uint r) {\\r\\n    return (a + m - 1) / m * m;\\r\\n  }\\r\\n}\"},\"Token.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// \\u0027Maverick\\u0027 token contract\\r\\n\\r\\n// Symbol      : Maverick\\r\\n// Name        : MAV\\r\\n// Total supply: 21,000,000,000 (21 billion)\\r\\n// Decimals    : 2\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./ERC20contract.sol\\u0027;\\r\\nimport \\u0027./Owned.sol\\u0027;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\\r\\n// token transfers\\r\\n// ----------------------------------------------------------------------------\\r\\ncontract Token is ERC20Interface, Owned {\\r\\n    using SafeMath for uint256;\\r\\n    string public symbol = \\\"MAV\\\";\\r\\n    string public  name = \\\"Maverick\\\";\\r\\n    uint256 public decimals = 2;\\r\\n    uint256 _totalSupply = 21e9* 10 ** (decimals); \\r\\n    uint256 soldTokens;\\r\\n    \\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Constructor\\r\\n    // ------------------------------------------------------------------------\\r\\n    constructor() public {\\r\\n        owner = 0x93aD29093C3EdE3fa10188cee35d07dfe91A65b9;\\r\\n        balances[address(this)] = totalSupply();\\r\\n        \\r\\n        emit Transfer(address(0),address(this), totalSupply());\\r\\n    }\\r\\n    \\r\\n    receive() external payable{\\r\\n        // receive ethers\\r\\n        require(msg.value \\u003e= 0.01 ether);\\r\\n        uint tokens = getTokenAmount(msg.value);\\r\\n        _transfer(msg.sender, tokens);\\r\\n        // send received funds to the owner\\r\\n        owner.transfer(msg.value);\\r\\n    }\\r\\n    \\r\\n    function getTokenAmount(uint256 amount) internal pure returns(uint256){\\r\\n        return (amount*200000)/1e18;\\r\\n    }\\r\\n    \\r\\n    /** ERC20Interface function\\u0027s implementation **/\\r\\n    \\r\\n    function totalSupply() public override view returns (uint256){\\r\\n       return _totalSupply; \\r\\n    }\\r\\n    \\r\\n    function totalTokensSold() public view returns(uint256){\\r\\n        return soldTokens;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Get the token balance for account `tokenOwner`\\r\\n    // ------------------------------------------------------------------------\\r\\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Transfer the balance from token owner\\u0027s account to `to` account\\r\\n    // - Owner\\u0027s account must have sufficient balance to transfer\\r\\n    // - 0 value transfers are allowed\\r\\n    // ------------------------------------------------------------------------\\r\\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\\r\\n        // prevent transfer to 0x0, use burn instead\\r\\n        require(address(to) != address(0));\\r\\n        require(balances[msg.sender] \\u003e= tokens );\\r\\n        require(balances[to] + tokens \\u003e= balances[to]);\\r\\n            \\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        emit Transfer(msg.sender,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\\r\\n    // from the token owner\\u0027s account\\r\\n    // ------------------------------------------------------------------------\\r\\n    function approve(address spender, uint256 tokens) public override returns (bool success){\\r\\n        allowed[msg.sender][spender] = tokens;\\r\\n        emit Approval(msg.sender,spender,tokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Transfer `tokens` from the `from` account to the `to` account\\r\\n    // \\r\\n    // The calling account must already have sufficient tokens approve(...)-d\\r\\n    // for spending from the `from` account and\\r\\n    // - From account must have sufficient balance to transfer\\r\\n    // - Spender must have sufficient allowance to transfer\\r\\n    // - 0 value transfers are allowed\\r\\n    // ------------------------------------------------------------------------\\r\\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\\r\\n        require(tokens \\u003c= allowed[from][msg.sender]); //check allowance\\r\\n        require(balances[from] \\u003e= tokens);\\r\\n            \\r\\n        balances[from] = balances[from].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\r\\n        emit Transfer(from,to,tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function donations(address to, uint256 tokens) public onlyOwner {\\r\\n        _transfer(to, tokens);\\r\\n    }\\r\\n    \\r\\n    function _transfer(address to, uint256 tokens) internal {\\r\\n        // prevent transfer to 0x0, use burn instead\\r\\n        require(address(to) != address(0));\\r\\n        require(balances[address(this)] \\u003e= tokens );\\r\\n        require(balances[to] + tokens \\u003e= balances[to]);\\r\\n            \\r\\n        balances[address(this)] = balances[address(this)].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        soldTokens += tokens;\\r\\n        emit Transfer(address(this),to,tokens);\\r\\n    }\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Returns the amount of tokens approved by the owner that can be\\r\\n    // transferred to the spender\\u0027s account\\r\\n    // ------------------------------------------------------------------------\\r\\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\\r\\n        return allowed[tokenOwner][spender];\\r\\n    }\\r\\n    \\r\\n    // ------------------------------------------------------------------------\\r\\n    // Burn the ``value` amount of tokens from the `account`\\r\\n    // ------------------------------------------------------------------------\\r\\n    function burnTokens(uint256 value) public onlyOwner {\\r\\n        _burn(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(uint256 value) internal {\\r\\n        require(_totalSupply - soldTokens \\u003e= value); // burn only unsold tokens\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        balances[address(this)] = balances[address(this)].sub(value);\\r\\n        emit Transfer(address(this), address(0), value);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Token","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://274ea75b9d504a1bc3cf7cda97b39afd77da214bed446e60fb0b58397696f2c8"}]}