{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ValSafeMath.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n/**\r\n * Forked subset of Openzeppelin SafeMath allowing custom underflow/overflow messages\r\n * Useful for debugging, replaceable with standard SafeMath\r\n */\r\nlibrary ValSafeMath {\r\n    function add(uint256 a, uint256 b, string memory overflowMessage) internal pure returns (uint256 result) {\r\n        result = a + b;\r\n        require(result >= a, overflowMessage);\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory underflowMessage) internal pure returns (uint256 result) {\r\n        require(b <= a, underflowMessage);\r\n        result = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b, string memory overflowMessage) internal pure returns (uint256 result) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        result = a * b;\r\n        require(result / a == b, overflowMessage);\r\n    }\r\n    function div(uint256 a, uint256 b, string memory divideByZeroMessage) internal pure returns (uint256 result) {\r\n        require(b > 0, divideByZeroMessage);\r\n        result = a / b;\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ILiquidator.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title Liquidator Interface\r\n * @dev Liquidate stake token for reward token\r\n */\r\ncontract ILiquidator {\r\n\r\n    /** @dev Get output token (token to get from liquidation exchange). */\r\n    function outputToken() internal view returns (IERC20);\r\n\r\n    /** @dev Get stake token (token to be liquidated). */\r\n    function stakeToken() internal view returns (IERC20);\r\n\r\n    /** @dev Address of staking pool. */\r\n    function pool() internal view returns (address);\r\n\r\n    /**\r\n     * @dev Transfer stake without liquidation\r\n     */\r\n    function reclaimStake(address _destination, uint256 _stake) external;\r\n\r\n    /**\r\n     * @dev Award stake tokens to stakers\r\n     * Transfer to the pool without creating a staking position\r\n     * Allows us to reward as staking or reward token\r\n     */\r\n    function returnStake(address _from, uint256 balance) external;\r\n\r\n    /**\r\n     * @dev Sells stake for underlying asset and pays to destination.\r\n     */\r\n    function reclaim(address _destination, int256 _debt) external;\r\n}\r\n\r\n// File: @trusttoken/registry/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] calldata _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/ALiquidatorUniswap.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Uniswap\r\n * This is nessesary since Uniswap is written in vyper.\r\n */\r\ninterface UniswapV1 {\r\n    function tokenToExchangeSwapInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, UniswapV1 exchangeAddress) external returns (uint256 tokensBought);\r\n    function tokenToExchangeTransferInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address recipient, UniswapV1 exchangeAddress) external returns (uint256 tokensBought);\r\n    function tokenToExchangeSwapOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, UniswapV1 exchangeAddress) external returns (uint256 tokensSold);\r\n    function tokenToExchangeTransferOutput(uint256 tokensBought, uint256 maxTokensSold, uint256 maxEthSold, uint256 deadline, address recipient, UniswapV1 exchangeAddress) external returns (uint256 tokensSold);\r\n}\r\n\r\n/**\r\n * @dev Uniswap Factory\r\n * This is nessesary since Uniswap is written in vyper.\r\n */\r\ninterface UniswapV1Factory {\r\n    function getExchange(IERC20 token) external returns (UniswapV1);\r\n}\r\n\r\n/**\r\n * @title Abstract Uniswap Liquidator\r\n * @dev Liquidate staked tokenns on uniswap.\r\n * This is because there are multiple instances of AirswapV2.\r\n * StakingOpportunityFactory does not create a Liquidator, rather this must be created\r\n * Outside of the factory.\r\n */\r\ncontract ALiquidatorUniswap is ILiquidator {\r\n    using ValSafeMath for uint256;\r\n\r\n    // owner, registry attributes\r\n    address public owner;\r\n    address public pendingOwner;\r\n    mapping (address => uint256) attributes;\r\n\r\n\r\n    // constants\r\n    bytes32 constant APPROVED_BENEFICIARY = \"approvedBeneficiary\";\r\n    uint256 constant LIQUIDATOR_CAN_RECEIVE     = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant LIQUIDATOR_CAN_RECEIVE_INV = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    // part of signature so that signing for airswap doesn't sign for all airswap instances\r\n    uint256 constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant MAX_UINT128 = 0xffffffffffffffffffffffffffffffff;\r\n    bytes2 EIP191_HEADER = 0x1901;\r\n\r\n    // internal variables implemented as storage by Liquidator\r\n    // these variables must be known at construction time\r\n    // Liquidator is the actual implementation of ALiquidator\r\n\r\n    /** @dev Get output token (token to get from liqudiation exchange). */\r\n    function outputToken() internal view returns (IERC20);\r\n    /** @dev Get stake token (token to be liquidated). */\r\n    function stakeToken() internal view returns (IERC20);\r\n    /** @dev Output token on uniswap. */\r\n    function outputUniswapV1() internal view returns (UniswapV1);\r\n    /** @dev Stake token on uniswap. */\r\n    function stakeUniswapV1() internal view returns (UniswapV1);\r\n    /** @dev Contract registry. */\r\n    function registry() internal view returns (Registry);\r\n    /** @dev Address of staking pool. */\r\n    function pool() internal view returns (address);\r\n\r\n    /**\r\n     * @dev implementation constructor needs to call initialize\r\n     * Here we approve transfers to uniswap for the staking and output token\r\n     */\r\n    function initialize() internal {\r\n        outputToken().approve(address(outputUniswapV1()), MAX_UINT);\r\n        stakeToken().approve(address(stakeUniswapV1()), MAX_UINT);\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Liquidated(uint256 indexed stakeAmount, uint256 indexed debtAmount);\r\n\r\n    modifier onlyRegistry {\r\n        require(msg.sender == address(registry()), \"only registry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"only pending owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Two flags are supported by this function:\r\n     * Supports APPROVED_BENEFICIARY\r\n     * Can sync by saying this contract is the registry or sync from registry directly.\r\n     */\r\n    function syncAttributeValue(address _account, bytes32 _attribute, uint256 _value) external onlyRegistry {\r\n        if (_attribute == APPROVED_BENEFICIARY) {\r\n            // approved beneficiary flag defines whether someone can receive\r\n            if (_value > 0) {\r\n                attributes[_account] |= LIQUIDATOR_CAN_RECEIVE;\r\n            } else {\r\n                attributes[_account] &= LIQUIDATOR_CAN_RECEIVE_INV;\r\n            }\r\n        }\r\n    }\r\n\r\n    struct UniswapState {\r\n        UniswapV1 uniswap;\r\n        uint256 etherBalance;\r\n        uint256 tokenBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate how much output we get for a stake input amount\r\n     * Much cheaper to do this logic ourselves locally than an external call\r\n     * Allows us to do this multiple times in one transaction\r\n     * See ./uniswap/uniswap_exchange.vy\r\n     */\r\n    function outputForUniswapV1Input(uint256 stakeInputAmount, UniswapState memory outputUniswapV1State, UniswapState memory stakeUniswapV1State) internal pure returns (uint256 outputAmount) {\r\n        uint256 inputAmountWithFee = 997 * stakeInputAmount;\r\n        inputAmountWithFee = 997 * (inputAmountWithFee * stakeUniswapV1State.etherBalance) / (stakeUniswapV1State.tokenBalance * 1000 + inputAmountWithFee);\r\n        outputAmount = (inputAmountWithFee * outputUniswapV1State.tokenBalance) / (outputUniswapV1State.etherBalance * 1000 + inputAmountWithFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Calcualte how much input we need to get a desired output\r\n     * Is able to let us know if there is slippage in uniswap exchange rate\r\n     * and continue with Airswap\r\n     * See./uniswap/uniswap_exchange.vy\r\n     */\r\n    function inputForUniswapV1Output(uint256 outputAmount, UniswapState memory outputUniswapV1State, UniswapState memory stakeUniswapV1State) internal pure returns (uint256 inputAmount) {\r\n        if (outputAmount >= outputUniswapV1State.tokenBalance) {\r\n            return MAX_UINT128;\r\n        }\r\n        uint256 ethNeeded = (outputUniswapV1State.etherBalance * outputAmount * 1000) / (997 * (outputUniswapV1State.tokenBalance - outputAmount)) + 1;\r\n        if (ethNeeded >= stakeUniswapV1State.etherBalance) {\r\n            return MAX_UINT128;\r\n        }\r\n        inputAmount = (stakeUniswapV1State.tokenBalance * ethNeeded * 1000) / (997 * (stakeUniswapV1State.etherBalance - ethNeeded)) + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer stake without liquidation\r\n     * requires LIQUIDATOR_CAN_RECEIVE flag (recipient must be registered)\r\n     */\r\n    function reclaimStake(address _destination, uint256 _stake) external onlyOwner {\r\n        require(attributes[_destination] & LIQUIDATOR_CAN_RECEIVE != 0, \"unregistered recipient\");\r\n        stakeToken().transferFrom(pool(), _destination, _stake);\r\n    }\r\n\r\n    /**\r\n     * @dev Award stake tokens to stakers.\r\n     * Transfer to the pool without creating a staking position.\r\n     * Allows us to reward as staking or reward token.\r\n     */\r\n    function returnStake(address _from, uint256 balance) external {\r\n        stakeToken().transferFrom(_from, pool(), balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Sells stake for underlying asset and pays to destination.\r\n     * Use airswap trades as long as they're better than uniswap.\r\n     * Contract won't slip Uniswap this way.\r\n     * If we reclaim more than we actually owe we award to stakers.\r\n     * Not possible to convert back into TrustTokens here.\r\n     */\r\n    function reclaim(address _destination, int256 _debt) external onlyOwner {\r\n        require(_debt > 0, \"Must reclaim positive amount\");\r\n        require(_debt < int256(MAX_UINT128), \"reclaim amount too large\");\r\n        require(attributes[_destination] & LIQUIDATOR_CAN_RECEIVE != 0, \"unregistered recipient\");\r\n\r\n        // get balance of stake pool\r\n        address stakePool = pool();\r\n        uint256 remainingStake = stakeToken().balanceOf(stakePool);\r\n\r\n        // withdraw to liquidator\r\n        require(stakeToken().transferFrom(stakePool, address(this), remainingStake),\r\n            \"liquidator not approved to transferFrom stakeToken\");\r\n\r\n        // load uniswap state for output and staked token\r\n        UniswapState memory outputUniswapV1State;\r\n        UniswapState memory stakeUniswapV1State;\r\n        outputUniswapV1State.uniswap = outputUniswapV1();\r\n        outputUniswapV1State.etherBalance = address(outputUniswapV1State.uniswap).balance;\r\n        outputUniswapV1State.tokenBalance = outputToken().balanceOf(address(outputUniswapV1State.uniswap));\r\n        stakeUniswapV1State.uniswap = stakeUniswapV1();\r\n        stakeUniswapV1State.etherBalance = address(stakeUniswapV1State.uniswap).balance;\r\n        stakeUniswapV1State.tokenBalance = stakeToken().balanceOf(address(stakeUniswapV1State.uniswap));\r\n\r\n        // calculate remaining debt\r\n        int256 remainingDebt = _debt;\r\n\r\n        // if we have remaining debt and stake, we use Uniswap\r\n        // we can use uniswap by specifying desired output or input\r\n        if (remainingDebt > 0) {\r\n            if (remainingStake > 0) {\r\n                if (outputForUniswapV1Input(remainingStake, outputUniswapV1State, stakeUniswapV1State) < uint256(remainingDebt)) {\r\n                    // liquidate all remaining stake :(\r\n                    uint256 outputAmount = stakeUniswapV1State.uniswap.tokenToExchangeSwapInput(remainingStake, 1, 1, block.timestamp, outputUniswapV1State.uniswap);\r\n                    emit Liquidated(remainingStake, outputAmount);\r\n\r\n                    // update remaining stake and debt\r\n                    remainingDebt -= int256(outputAmount);\r\n                    remainingStake = 0;\r\n\r\n                    // send output token to destination\r\n                    outputToken().transfer(_destination, uint256(_debt - remainingDebt));\r\n                } else {\r\n                    // finish liquidation via uniswap\r\n                    uint256 stakeSold = stakeUniswapV1State.uniswap.tokenToExchangeSwapOutput(uint256(remainingDebt), remainingStake, MAX_UINT, block.timestamp, outputUniswapV1State.uniswap);\r\n                    emit Liquidated(stakeSold, uint256(remainingDebt));\r\n                    remainingDebt = 0;\r\n                    remainingStake -= stakeSold;\r\n                    //\r\n                    outputToken().transfer(_destination, uint256(_debt));\r\n                }\r\n            }\r\n        } else {\r\n            // if we end up with a tiny amount of delta, transfer to the pool\r\n            if (remainingDebt < 0) {\r\n                outputToken().transfer(stakePool, uint256(-remainingDebt));\r\n            }\r\n\r\n            // transfer output token to destination\r\n            outputToken().transfer(_destination, uint256(_debt));\r\n        }\r\n\r\n        // if there is remaining stake, return remainder to pool\r\n        if (remainingStake > 0) {\r\n            stakeToken().transfer(stakePool, remainingStake);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @trusttoken/trusttokens/contracts/Liquidator.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Liquidator\r\n * @dev Implementation of ALiquidator\r\n**/\r\ncontract Liquidator is ALiquidatorUniswap {\r\n    address pool_;\r\n    Registry registry_;\r\n    IERC20 outputToken_;\r\n    IERC20 stakeToken_;\r\n    UniswapV1 outputUniswap_;\r\n    UniswapV1 stakeUniswap_;\r\n    bool initialized;\r\n\r\n    function configure(\r\n        address registryAddress,\r\n        address outputTokenAddress,\r\n        address stakeTokenAddress,\r\n        address outputUniswapAddress,\r\n        address stakeUniswapAddress\r\n    ) external {\r\n        require(!initialized, \"already initialized\");\r\n        require(registryAddress != address(0));\r\n        require(outputTokenAddress != address(0));\r\n        require(stakeTokenAddress != address(0));\r\n        require(outputUniswapAddress != address(0));\r\n        require(stakeUniswapAddress != address(0));\r\n        registry_ = Registry(registryAddress);\r\n        outputToken_ = IERC20(outputTokenAddress);\r\n        stakeToken_ = IERC20(stakeTokenAddress);\r\n        outputUniswap_ = UniswapV1(outputUniswapAddress);\r\n        stakeUniswap_ = UniswapV1(stakeUniswapAddress);\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n        initialized = true;\r\n        initialize();\r\n    }\r\n    function setPool(address _pool) external onlyOwner {\r\n        pool_ = _pool;\r\n    }\r\n    function pool() internal view returns (address) {\r\n        return pool_;\r\n    }\r\n    function outputToken() internal view returns (IERC20) {\r\n        return outputToken_;\r\n    }\r\n    function stakeToken() internal view returns (IERC20) {\r\n        return stakeToken_;\r\n    }\r\n    function registry() internal view returns (Registry) {\r\n        return registry_;\r\n    }\r\n    function outputUniswapV1() internal view returns (UniswapV1) {\r\n        return outputUniswap_;\r\n    }\r\n    function stakeUniswapV1() internal view returns (UniswapV1) {\r\n        return stakeUniswap_;\r\n    }\r\n}\r\n\r\n// File: contracts/LiquidatorReset.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ncontract LiquidatorReset is Liquidator {\r\n    function resetUniswap() external {\r\n        stakeUniswap_ = UniswapV1(0x8E047A3d6b49B92c648669943eEF3AB3009cBdB9);\r\n        stakeToken().approve(address(stakeUniswapV1()), MAX_UINT);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputUniswapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeUniswapAddress\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_debt\",\"type\":\"int256\"}],\"name\":\"reclaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"reclaimStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"returnStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidatorReset","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9b763cd562d1529210c3529985a7d3bac19cf175ded72efa6799aa4429bccc7f"}]}