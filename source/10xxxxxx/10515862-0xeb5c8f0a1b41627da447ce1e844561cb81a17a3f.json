{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n * GearProtocol's Reserve Vault\r\n \r\n * Smart contract to lockup GEAR Reserve fund indefinitely.\r\n\r\n * Official Website: \r\nhttps://GearProtocol.com\r\n \r\n */\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract GearReserveVault {\r\n   \r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 constant GearToken = ERC20(0xBD753A8D3bE45F4772145D75E28014a333B705Fb);\r\n    \r\n    address owner = msg.sender;\r\n    \r\n     \r\n    uint256 public LockPeriod;\r\n    address public UnlockRecipient;\r\n    \r\n    \r\n\r\n// When initiated, function allows 5% of GEAR token in this reserved contract to be unlocked after 1 month lockup period. \r\n\r\n\r\n    function startUnlock(address recipient) external {\r\n        require(msg.sender == owner);\r\n        LockPeriod = now + 30 days;\r\n        UnlockRecipient = recipient;\r\n    }\r\n    \r\n    \r\n// Transfer 5% of GEAR token in this reserved contract to Dev after 1 month lockup has passed\r\n\r\n\r\n    function Unlock() external {\r\n        require(msg.sender == owner);\r\n        require(UnlockRecipient != address(0));\r\n        require(now > LockPeriod);\r\n        \r\n        uint256 GearBalance = GearToken.balanceOf(address(this));\r\n\r\n          \r\n        uint256 FivePercent = GearBalance.mul(5).div(100);\r\n        \r\n        GearToken.transfer(UnlockRecipient, FivePercent);\r\n    }  \r\n  \r\n\r\n     function ResetRecipient() external {\r\n         require(msg.sender == owner);\r\n\r\n         UnlockRecipient = 0x0000000000000000000000000000000000000000;\r\n         \r\n    }\r\n\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[],\"name\":\"LockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ResetRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnlockRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GearReserveVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7e3e42804f5f2a9afb873aad99f614a50cf8ae0578bb94869e94f837f2d6e3c5"}]}