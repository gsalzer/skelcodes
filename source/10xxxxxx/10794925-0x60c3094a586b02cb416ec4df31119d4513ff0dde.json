{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\nabstract contract IERC20 {\r\n    function totalSupply() external virtual view returns (uint256);\r\n    function balanceOf(address tokenOwner) external virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) external virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external virtual returns (bool success);\r\n    function burnFrom(address account, uint256 amount) public virtual;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract BreePurchase{\r\n\r\n    address constant private SBREE_TOKEN_ADDRESS = 0x25377ddb16c79C93B0CBf46809C8dE8765f03FCd;\r\n    address constant private BREE_TOKEN_ADDRESS = 0x4639cd8cd52EC1CF2E496a606ce28D8AfB1C792F;\r\n    \r\n    event TOKENSPURCHASED(address indexed _purchaser, uint256 indexed _tokens);\r\n    \r\n    function purchase(address assetAddress, uint256 amountAsset) public{\r\n        require(assetAddress == SBREE_TOKEN_ADDRESS, \"NOT ACCEPTED: Unaccepted payment asset provided\");\r\n        require(IERC20(BREE_TOKEN_ADDRESS).balanceOf(address(this)) >= amountAsset, \"Balance: Insufficient liquidity\");\r\n        _purchase(assetAddress, amountAsset);\r\n    }\r\n    \r\n    function _purchase(address assetAddress, uint256 assetAmount) internal{\r\n        // burn the received tokens\r\n        IERC20(assetAddress).burnFrom(msg.sender, assetAmount);\r\n        \r\n        // send tokens to the purchaser\r\n        IERC20(BREE_TOKEN_ADDRESS).transfer(msg.sender, assetAmount);\r\n        \r\n        emit TOKENSPURCHASED(msg.sender, assetAmount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TOKENSPURCHASED\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAsset\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BreePurchase","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2947905e51facef71d90e7e3ff4afb276a34c65077e79dd8de105366feb04f65"}]}