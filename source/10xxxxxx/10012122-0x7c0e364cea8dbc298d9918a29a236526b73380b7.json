{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/base/Owned.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.7.0;\\n\\n/**\\n * @title Owned\\n * @notice Basic contract to define an owner.\\n * @author Julien Niset - <julien@argent.xyz>\\n */\\ncontract Owned {\\n\\n    // The owner\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _newOwner);\\n\\n    /**\\n     * @notice Throws if the sender is not the owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Must be owner\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Lets the owner transfer ownership of the contract to a new owner.\\n     * @param _newOwner The new owner.\\n     */\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Address must not be null\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(_newOwner);\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure_0.5/MakerRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.4;\\nimport \\\"../infrastructure/base/Owned.sol\\\";\\nimport \\\"../../lib/maker/MakerInterfaces.sol\\\";\\n\\n/**\\n * @title MakerRegistry\\n * @notice Simple registry containing a mapping between token collaterals and their corresponding Maker Join adapters.\\n * @author Olivier VDB - <olivier@argent.xyz>\\n */\\ncontract MakerRegistry is Owned {\\n\\n    VatLike public vat;\\n    address[] public tokens;\\n    mapping (address => Collateral) public collaterals;\\n    mapping (bytes32 => address) public collateralTokensByIlks;\\n\\n    struct Collateral {\\n        bool exists;\\n        uint128 index;\\n        JoinLike join;\\n        bytes32 ilk;\\n    }\\n\\n    event CollateralAdded(address indexed _token);\\n    event CollateralRemoved(address indexed _token);\\n\\n    constructor(VatLike _vat) public {\\n        vat = _vat;\\n    }\\n\\n    /**\\n     * @notice Adds a new token as possible CDP collateral.\\n     * @param _joinAdapter The Join Adapter for the token.\\n     */\\n    function addCollateral(JoinLike _joinAdapter) external onlyOwner {\\n        require(vat.wards(address(_joinAdapter)) == 1, \\\"MR: _joinAdapter not authorised in vat\\\");\\n        address token = address(_joinAdapter.gem());\\n        require(!collaterals[token].exists, \\\"MR: collateral already added\\\");\\n        collaterals[token].exists = true;\\n        collaterals[token].index = uint128(tokens.push(token) - 1);\\n        collaterals[token].join = _joinAdapter;\\n        bytes32 ilk = _joinAdapter.ilk();\\n        collaterals[token].ilk = ilk;\\n        collateralTokensByIlks[ilk] = token;\\n        emit CollateralAdded(token);\\n    }\\n\\n    /**\\n     * @notice Removes a token as possible CDP collateral.\\n     * @param _token The token to remove as collateral.\\n     */\\n    function removeCollateral(address _token) external onlyOwner {\\n        require(collaterals[_token].exists, \\\"MR: collateral does not exist\\\");\\n        delete collateralTokensByIlks[collaterals[_token].ilk];\\n\\n        address last = tokens[tokens.length - 1];\\n        if (_token != last) {\\n            uint128 targetIndex = collaterals[_token].index;\\n            tokens[targetIndex] = last;\\n            collaterals[last].index = targetIndex;\\n        }\\n        tokens.length --;\\n        delete collaterals[_token];\\n        emit CollateralRemoved(_token);\\n    }\\n\\n    /**\\n    * @notice Gets the list of supported collaterals.\\n    */\\n    function getCollateralTokens() external view returns (address[] memory _tokens) {\\n        _tokens = new address[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _tokens[i] = tokens[i];\\n        }\\n        return _tokens;\\n    }\\n\\n    /**\\n     * @notice Gets the ilk for a given token collateral.\\n     * @param _token The token collateral.\\n     */\\n    function getIlk(address _token) external view returns (bytes32 _ilk) {\\n        _ilk = collaterals[_token].ilk;\\n    }\\n\\n    /**\\n    * @notice Gets the join adapter and collateral token for a given ilk.\\n    */\\n    function getCollateral(bytes32 _ilk) external view returns (JoinLike _join, GemLike _token) {\\n        _token = GemLike(collateralTokensByIlks[_ilk]);\\n        _join = collaterals[address(_token)].join;\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/lib/maker/MakerInterfaces.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.4 <0.7.0;\\n\\ninterface GemLike {\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function approve(address, uint) external returns (bool success);\\n    function decimals() external view returns (uint);\\n    function transfer(address,uint) external returns (bool);\\n}\\n\\ninterface DSTokenLike {\\n    function mint(address,uint) external;\\n    function burn(address,uint) external;\\n}\\n\\ninterface VatLike {\\n    function can(address, address) external view returns (uint);\\n    function dai(address) external view returns (uint);\\n    function hope(address) external;\\n    function wards(address) external view returns (uint);\\n    function ilks(bytes32) external view returns (uint Art, uint rate, uint spot, uint line, uint dust);\\n    function urns(bytes32, address) external view returns (uint ink, uint art);\\n    function frob(bytes32, address, address, address, int, int) external;\\n    function slip(bytes32,address,int) external;\\n    function move(address,address,uint) external;\\n    function fold(bytes32,address,int) external;\\n    function suck(address,address,uint256) external;\\n    function flux(bytes32, address, address, uint) external;\\n    function fork(bytes32, address, address, int, int) external;\\n}\\n\\ninterface JoinLike {\\n    function ilk() external view returns (bytes32);\\n    function gem() external view returns (GemLike);\\n    function dai() external view returns (GemLike);\\n    function join(address, uint) external;\\n    function exit(address, uint) external;\\n    function vat() external returns (VatLike);\\n    function live() external returns (uint);\\n}\\n\\ninterface ManagerLike {\\n    function vat() external view returns (address);\\n    function urns(uint) external view returns (address);\\n    function open(bytes32, address) external returns (uint);\\n    function frob(uint, int, int) external;\\n    function give(uint, address) external;\\n    function move(uint, address, uint) external;\\n    function flux(uint, address, uint) external;\\n    function shift(uint, uint) external;\\n    function ilks(uint) external view returns (bytes32);\\n    function owns(uint) external view returns (address);\\n}\\n\\ninterface ScdMcdMigrationLike {\\n    function swapSaiToDai(uint) external;\\n    function swapDaiToSai(uint) external;\\n    function migrate(bytes32) external returns (uint);\\n    function saiJoin() external returns (JoinLike);\\n    function wethJoin() external returns (JoinLike);\\n    function daiJoin() external returns (JoinLike);\\n    function cdpManager() external returns (ManagerLike);\\n    function tub() external returns (SaiTubLike);\\n}\\n\\ninterface ValueLike {\\n    function peek() external returns (uint, bool);\\n}\\n\\ninterface SaiTubLike {\\n    function skr() external view returns (GemLike);\\n    function gem() external view returns (GemLike);\\n    function gov() external view returns (GemLike);\\n    function sai() external view returns (GemLike);\\n    function pep() external view returns (ValueLike);\\n    function bid(uint) external view returns (uint);\\n    function ink(bytes32) external view returns (uint);\\n    function tab(bytes32) external returns (uint);\\n    function rap(bytes32) external returns (uint);\\n    function shut(bytes32) external;\\n    function exit(uint) external;\\n}\\n\\ninterface VoxLike {\\n    function par() external returns (uint);\\n}\\n\\ninterface JugLike {\\n    function drip(bytes32) external;\\n}\\n\\ninterface PotLike {\\n    function chi() external view returns (uint);\\n    function pie(address) external view returns (uint);\\n    function drip() external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCollateral\",\"outputs\":[{\"name\":\"_join\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTokensByIlks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getIlk\",\"outputs\":[{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollateralTokens\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint128\"},{\"name\":\"join\",\"type\":\"address\"},{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_joinAdapter\",\"type\":\"address\"}],\"name\":\"addCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vat\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"MakerRegistry","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}