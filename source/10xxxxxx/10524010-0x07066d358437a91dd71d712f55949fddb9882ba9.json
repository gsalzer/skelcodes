{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\ncontract SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n    function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return (value*_quotient/1000000000000000000);\r\n    }\r\n}\r\n\r\ncontract DIFI is SafeMath {\r\n    string public constant name                         = \"DIFI\";                       // Name of the token\r\n    string public constant symbol                       = \"DI\";                           // Symbol of token\r\n    uint256 public constant decimals                    = 18;                               // Decimal of token\r\n    uint256 public constant _totalsupply                = 200000000 * 10 ** decimals;       // 200 million total supply\r\n    uint256 public constant _premined                   = 100000000 * 10 ** decimals;       // 100 million premined tokens\r\n    uint256 public _mined                               = 0;                                // Mined tokens\r\n    uint256 internal stakePer_                          = 100000000000000000;               // 0.2% Daily reward\r\n    address public owner                                = msg.sender;                       // Owner of smart contract\r\n    address public admin                                = 0x2ce288F5eC5CB5d674fCac0E59187A785351F011;// Admin of smart contract \r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) mintbalances;\r\n    mapping (address => uint256) mintingTime;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // Only owner can access the function\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Only admin can access the function\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != admin) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        balances[admin]        = _premined;\r\n        emit Transfer(0, admin, _premined);\r\n    }\r\n    \r\n    // Token minting function\r\n    function mint(uint256 _amount) public returns (bool success) {\r\n        address _customerAddress    = msg.sender;\r\n        require(_totalsupply > (SafeMath.add(_premined, _mined)));                                   // Total supply should be > premined token and mined token combined\r\n        require(mintingTime[_customerAddress] == 0);                                                \r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        mintbalances[_customerAddress]      = _amount;\r\n        mintingTime[_customerAddress]       = now;\r\n        return true;\r\n    }\r\n    \r\n    function mintTokensROI(address _customerAddress) public view returns(uint256){\r\n        uint256 timediff                    = SafeMath.sub(now, mintingTime[_customerAddress]);\r\n        uint256 dayscount                   = SafeMath.div(timediff, 86400); //86400 Sec for 1 Day\r\n        uint256 roiPercent                  = SafeMath.mul(dayscount, stakePer_);\r\n        uint256 roiTokens                   = SafeMath.percent(mintbalances[_customerAddress],roiPercent,100,18);\r\n        uint256 finalBalance                = roiTokens/1e18;\r\n        return finalBalance;\r\n    }\r\n    \r\n    function mintTokens(address _customerAddress) public view returns(uint256){\r\n        return mintbalances[_customerAddress];\r\n    }\r\n    \r\n    function mintTokensTime(address _customerAddress) public view returns(uint256){\r\n        return mintingTime[_customerAddress];\r\n    }\r\n    \r\n    function unmintTokens() public returns(bool success){\r\n        address _customerAddress    = msg.sender;\r\n        require(mintingTime[_customerAddress] > 0); \r\n        uint256 timediff                    = SafeMath.sub(now, mintingTime[_customerAddress]);\r\n        uint256 dayscount                   = SafeMath.div(timediff, 86400); //86400 Sec for 1 Day\r\n        uint256 roiPercent                  = SafeMath.mul(dayscount, stakePer_);\r\n        uint256 roiTokens                   = SafeMath.percent(mintbalances[_customerAddress],roiPercent,100,18);\r\n        balances[_customerAddress]          = SafeMath.add(balances[_customerAddress],roiTokens/1e18);\r\n        _mined                              = SafeMath.add(_mined, roiTokens/1e18);\r\n        mintbalances[_customerAddress]      = 0;\r\n        mintingTime[_customerAddress]       = 0;\r\n        return true;\r\n    }\r\n    \r\n    function changeStakePercent(uint256 stakePercent) onlyAdmin public {\r\n        stakePer_                           = stakePercent;\r\n    }\r\n    \r\n    // Show token balance of address owner\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        uint256 finalBalance = SafeMath.sub(balances[_owner],mintbalances[_owner]);\r\n        return finalBalance;\r\n    }\r\n    \r\n    // Token transfer function\r\n    // Token amount should be in 18 decimals (eg. 199 * 10 ** 18)\r\n    function transfer(address _to, uint256 _amount ) public {\r\n        uint256 finalBalance = SafeMath.sub(balances[msg.sender],mintbalances[msg.sender]);\r\n        require(finalBalance >= _amount && _amount >= 0);\r\n        balances[msg.sender]            = sub(balances[msg.sender], _amount);\r\n        balances[_to]                   = add(balances[_to], _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n    }\r\n    \r\n    // Total Supply of DochStar\r\n    function totalSupply() public pure returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    // Change Admin of this contract\r\n    function changeAdmin(address _newAdminAddress) external onlyOwner {\r\n        admin = _newAdminAddress;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unmintTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"mintTokensROI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_premined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakePercent\",\"type\":\"uint256\"}],\"name\":\"changeStakePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"mintTokensTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DIFI","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d091451c98ef910e80688fd272dd257a840059fbdf600232a842d40143f31d3"}]}