{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/utility/interfaces/ITokenHolder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterAnchor.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Converter Anchor interface\r\n*/\r\ncontract IConverterAnchor is IOwned, ITokenHolder {\r\n}\r\n\r\n// File: contracts/utility/interfaces/IWhitelist.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverter.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter interface\r\n*/\r\ncontract IConverter is IOwned {\r\n    function converterType() public pure returns (uint16);\r\n    function anchor() public view returns (IConverterAnchor) {this;}\r\n    function isActive() public view returns (bool);\r\n\r\n    function rateAndFee(IERC20Token _sourceToken, IERC20Token _targetToken, uint256 _amount) public view returns (uint256, uint256);\r\n    function convert(IERC20Token _sourceToken,\r\n                     IERC20Token _targetToken,\r\n                     uint256 _amount,\r\n                     address _trader,\r\n                     address _beneficiary) public payable returns (uint256);\r\n\r\n    function conversionWhitelist() public view returns (IWhitelist) {this;}\r\n    function conversionFee() public view returns (uint32) {this;}\r\n    function maxConversionFee() public view returns (uint32) {this;}\r\n    function reserveBalance(IERC20Token _reserveToken) public view returns (uint256);\r\n    function() external payable;\r\n\r\n    function transferAnchorOwnership(address _newOwner) public;\r\n    function acceptAnchorOwnership() public;\r\n    function setConversionFee(uint32 _conversionFee) public;\r\n    function setConversionWhitelist(IWhitelist _whitelist) public;\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n    function withdrawETH(address _to) public;\r\n    function addReserve(IERC20Token _token, uint32 _ratio) public;\r\n\r\n    // deprecated, backward compatibility\r\n    function token() public view returns (IConverterAnchor);\r\n    function transferTokenOwnership(address _newOwner) public;\r\n    function acceptTokenOwnership() public;\r\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\r\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\r\n    function connectorTokens(uint256 _index) public view returns (IERC20Token);\r\n    function connectorTokenCount() public view returns (uint16);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterUpgrader.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Converter Upgrader interface\r\n*/\r\ncontract IConverterUpgrader {\r\n    function upgrade(bytes32 _version) public;\r\n    function upgrade(uint16 _version) public;\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IConverterFactory.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/*\r\n    Converter Factory interface\r\n*/\r\ncontract IConverterFactory {\r\n    function createAnchor(uint16 _type, string _name, string _symbol, uint8 _decimals) public returns (IConverterAnchor);\r\n    function createConverter(uint16 _type, IConverterAnchor _anchor, IContractRegistry _registry, uint32 _maxConversionFee) public returns (IConverter);\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n// File: contracts/utility/ContractRegistryClient.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant CONVERTER_FACTORY = \"ConverterFactory\";\r\n    bytes32 internal constant CONVERSION_PATH_FINDER = \"ConversionPathFinder\";\r\n    bytes32 internal constant CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        _only(_contractName);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _only(bytes32 _contractName) internal view {\r\n        require(msg.sender == addressOf(_contractName), \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      *\r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(_registry) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry, \"ERR_ACCESS_DENIED\");\r\n\r\n        // get the new contract-registry\r\n        IContractRegistry newRegistry = IContractRegistry(addressOf(CONTRACT_REGISTRY));\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != address(registry) && newRegistry != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(newRegistry.addressOf(CONTRACT_REGISTRY) != address(0), \"ERR_INVALID_REGISTRY\");\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = newRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      *\r\n      * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\r\n    */\r\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) public ownerOnly {\r\n        // change the permission to update the contract-registry\r\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      *\r\n      * @param _contractName    contract name\r\n      *\r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\r\n\r\n// File: contracts/token/interfaces/IEtherToken.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/*\r\n    Ether Token interface\r\n*/\r\ncontract IEtherToken is IERC20Token {\r\n    function deposit() public payable;\r\n    function withdraw(uint256 _amount) public;\r\n    function depositTo(address _to) public payable;\r\n    function withdrawTo(address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/converter/ConverterUpgrader.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Converter Upgrader\r\n  *\r\n  * The converter upgrader contract allows upgrading an older converter contract (0.4 and up)\r\n  * to the latest version.\r\n  * To begin the upgrade process, simply execute the 'upgrade' function.\r\n  * At the end of the process, the ownership of the newly upgraded converter will be transferred\r\n  * back to the original owner and the original owner will need to execute the 'acceptOwnership' function.\r\n  *\r\n  * The address of the new converter is available in the ConverterUpgrade event.\r\n  *\r\n  * Note that for older converters that don't yet have the 'upgrade' function, ownership should first\r\n  * be transferred manually to the ConverterUpgrader contract using the 'transferOwnership' function\r\n  * and then the upgrader 'upgrade' function should be executed directly.\r\n*/\r\ncontract ConverterUpgrader is IConverterUpgrader, ContractRegistryClient {\r\n    address private constant ETH_RESERVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    IEtherToken public etherToken;\r\n\r\n    /**\r\n      * @dev triggered when the contract accept a converter ownership\r\n      *\r\n      * @param _converter   converter address\r\n      * @param _owner       new owner - local upgrader address\r\n    */\r\n    event ConverterOwned(address indexed _converter, address indexed _owner);\r\n\r\n    /**\r\n      * @dev triggered when the upgrading process is done\r\n      *\r\n      * @param _oldConverter    old converter address\r\n      * @param _newConverter    new converter address\r\n    */\r\n    event ConverterUpgrade(address indexed _oldConverter, address indexed _newConverter);\r\n\r\n    /**\r\n      * @dev initializes a new ConverterUpgrader instance\r\n      *\r\n      * @param _registry    address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry, IEtherToken _etherToken) ContractRegistryClient(_registry) public {\r\n        etherToken = _etherToken;\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      *\r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(bytes32 _version) public {\r\n        upgradeOld(IConverter(msg.sender), _version);\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      *\r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(uint16 _version) public {\r\n        upgradeOld(IConverter(msg.sender), bytes32(_version));\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      *\r\n      * @param _converter   old converter contract address\r\n      * @param _version     old converter version\r\n    */\r\n    function upgradeOld(IConverter _converter, bytes32 _version) public {\r\n        _version;\r\n        IConverter converter = IConverter(_converter);\r\n        address prevOwner = converter.owner();\r\n        acceptConverterOwnership(converter);\r\n        IConverter newConverter = createConverter(converter);\r\n        copyReserves(converter, newConverter);\r\n        copyConversionFee(converter, newConverter);\r\n        transferReserveBalances(converter, newConverter);\r\n        IConverterAnchor anchor = converter.token();\r\n\r\n        if (anchor.owner() == address(converter)) {\r\n            converter.transferTokenOwnership(newConverter);\r\n            newConverter.acceptAnchorOwnership();\r\n        }\r\n\r\n        converter.transferOwnership(prevOwner);\r\n        newConverter.transferOwnership(prevOwner);\r\n\r\n        emit ConverterUpgrade(address(converter), address(newConverter));\r\n    }\r\n\r\n    /**\r\n      * @dev the first step when upgrading a converter is to transfer the ownership to the local contract.\r\n      * the upgrader contract then needs to accept the ownership transfer before initiating\r\n      * the upgrade process.\r\n      * fires the ConverterOwned event upon success\r\n      *\r\n      * @param _oldConverter       converter to accept ownership of\r\n    */\r\n    function acceptConverterOwnership(IConverter _oldConverter) private {\r\n        _oldConverter.acceptOwnership();\r\n        emit ConverterOwned(_oldConverter, this);\r\n    }\r\n\r\n    /**\r\n      * @dev creates a new converter with same basic data as the original old converter\r\n      * the newly created converter will have no reserves at this step.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      *\r\n      * @return the new converter  new converter contract address\r\n    */\r\n    function createConverter(IConverter _oldConverter) private returns (IConverter) {\r\n        IConverterAnchor anchor = _oldConverter.token();\r\n        uint32 maxConversionFee = _oldConverter.maxConversionFee();\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        // determine new converter type\r\n        uint16 newType = 0;\r\n        // new converter - get the type from the converter itself\r\n        if (isV28OrHigherConverter(_oldConverter))\r\n            newType = _oldConverter.converterType();\r\n        // old converter - if it has 1 reserve token, the type is a liquid token, otherwise the type liquidity pool\r\n        else if (reserveTokenCount > 1)\r\n            newType = 1;\r\n\r\n        IConverterFactory converterFactory = IConverterFactory(addressOf(CONVERTER_FACTORY));\r\n        IConverter converter = converterFactory.createConverter(newType, anchor, registry, maxConversionFee);\r\n\r\n        converter.acceptOwnership();\r\n        return converter;\r\n    }\r\n\r\n    /**\r\n      * @dev copies the reserves from the old converter to the new one.\r\n      * note that this will not work for an unlimited number of reserves due to block gas limit constraints.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyReserves(IConverter _oldConverter, IConverter _newConverter)\r\n        private\r\n    {\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < reserveTokenCount; i++) {\r\n            address reserveAddress = _oldConverter.connectorTokens(i);\r\n            (, uint32 weight, , , ) = _oldConverter.connectors(reserveAddress);\r\n\r\n            // Ether reserve\r\n            if (reserveAddress == ETH_RESERVE_ADDRESS) {\r\n                _newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight);\r\n            }\r\n            // Ether reserve token\r\n            else if (reserveAddress == address(etherToken)) {\r\n                _newConverter.addReserve(IERC20Token(ETH_RESERVE_ADDRESS), weight);\r\n            }\r\n            // ERC20 reserve token\r\n            else {\r\n                _newConverter.addReserve(IERC20Token(reserveAddress), weight);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev copies the conversion fee from the old converter to the new one\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyConversionFee(IConverter _oldConverter, IConverter _newConverter) private {\r\n        uint32 conversionFee = _oldConverter.conversionFee();\r\n        _newConverter.setConversionFee(conversionFee);\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the balance of each reserve in the old converter to the new one.\r\n      * note that the function assumes that the new converter already has the exact same number of\r\n      * also, this will not work for an unlimited number of reserves due to block gas limit constraints.\r\n      *\r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function transferReserveBalances(IConverter _oldConverter, IConverter _newConverter)\r\n        private\r\n    {\r\n        uint256 reserveBalance;\r\n        uint16 reserveTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < reserveTokenCount; i++) {\r\n            address reserveAddress = _oldConverter.connectorTokens(i);\r\n            // Ether reserve\r\n            if (reserveAddress == ETH_RESERVE_ADDRESS) {\r\n                _oldConverter.withdrawETH(address(_newConverter));\r\n            }\r\n            // Ether reserve token\r\n            else if (reserveAddress == address(etherToken)) {\r\n                reserveBalance = etherToken.balanceOf(_oldConverter);\r\n                _oldConverter.withdrawTokens(etherToken, address(this), reserveBalance);\r\n                etherToken.withdrawTo(address(_newConverter), reserveBalance);\r\n            }\r\n            // ERC20 reserve token\r\n            else {\r\n                IERC20Token connector = IERC20Token(reserveAddress);\r\n                reserveBalance = connector.balanceOf(_oldConverter);\r\n                _oldConverter.withdrawTokens(connector, address(_newConverter), reserveBalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    bytes4 private constant IS_V28_OR_HIGHER_FUNC_SELECTOR = bytes4(keccak256(\"isV28OrHigher()\"));\r\n\r\n    // using assembly code to identify converter version\r\n    // can't rely on the version number since the function had a different signature in older converters\r\n    function isV28OrHigherConverter(IConverter _converter) internal view returns (bool) {\r\n        bool success;\r\n        uint256[1] memory ret;\r\n        bytes memory data = abi.encodeWithSelector(IS_V28_OR_HIGHER_FUNC_SELECTOR);\r\n\r\n        assembly {\r\n            success := staticcall(\r\n                5000,          // isV28OrHigher consumes 190 gas, but just for extra safety\r\n                _converter,    // destination address\r\n                add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\r\n                mload(data),   // input length (loaded from the first 32 bytes in the `data` array)\r\n                ret,           // output buffer\r\n                32             // output length\r\n            )\r\n        }\r\n\r\n        return success && ret[0] != 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgradeOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_etherToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_converter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ConverterOwned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldConverter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"ConverterUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"ConverterUpgrader","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce315","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a3ee625190dd05c3a5db3fca690713debdc603d045f96840d7a506264aaad443"}]}