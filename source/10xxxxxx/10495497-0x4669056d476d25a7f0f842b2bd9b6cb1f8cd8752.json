{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Initializable, Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract MinterRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isMinter(sender)) {\r\n            _addMinter(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\r\n    function initialize(address sender) public initializer {\r\n        MinterRole.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Initializable, Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 with pausable transfers and allowances.\r\n *\r\n * Useful if you want to stop trades until the end of a crowdsale, or have\r\n * an emergency switch for freezing all token transfers in the event of a large\r\n * bug.\r\n */\r\ncontract ERC20Pausable is Initializable, ERC20, Pausable {\r\n    function initialize(address sender) public initializer {\r\n        Pausable.initialize(sender);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\nlibrary BasisPoints {\r\n    using SafeMath for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n\r\ninterface ILidCertifiableToken {\r\n    function activateTransfers() external;\r\n    function activateTax() external;\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function addMinter(address account) external;\r\n    function renounceMinter() external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function isMinter(address account) external view returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\ninterface IStakeHandler {\r\n    function handleStake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\r\n    function handleUnstake(address staker, uint stakerDeltaValue, uint stakerFinalValue) external;\r\n}\r\n\r\n\r\ncontract LidStaking is Initializable, Ownable {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint256 constant internal DISTRIBUTION_MULTIPLIER = 2 ** 64;\r\n\r\n    uint public stakingTaxBP;\r\n    uint public unstakingTaxBP;\r\n    ILidCertifiableToken private lidToken;\r\n\r\n    mapping(address => uint) public stakeValue;\r\n    mapping(address => int) private stakerPayouts;\r\n\r\n    uint public totalDistributions;\r\n    uint public totalStaked;\r\n    uint public totalStakers;\r\n    uint private profitPerShare;\r\n    uint private emptyStakeTokens; //These are tokens given to the contract when there are no stakers.\r\n\r\n    IStakeHandler[] public stakeHandlers;\r\n    uint public startTime;\r\n\r\n    event OnDistribute(address sender, uint amountSent);\r\n    event OnStake(address sender, uint amount, uint tax);\r\n    event OnUnstake(address sender, uint amount, uint tax);\r\n    event OnReinvest(address sender, uint amount, uint tax);\r\n    event OnWithdraw(address sender, uint amount);\r\n\r\n    modifier onlyLidToken {\r\n        require(msg.sender == address(lidToken), \"Can only be called by LidToken contract.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStakingActive {\r\n        require(startTime != 0 && now > startTime, \"Staking not yet started.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _stakingTaxBP,\r\n        uint _ustakingTaxBP,\r\n        address owner,\r\n        ILidCertifiableToken _lidToken\r\n    ) public initializer {\r\n        Ownable.initialize(msg.sender);\r\n        stakingTaxBP = _stakingTaxBP;\r\n        unstakingTaxBP = _ustakingTaxBP;\r\n        lidToken = _lidToken;\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function stake(uint amount) public whenStakingActive {\r\n        require(amount >= 1e18, \"Must stake at least one LID.\");\r\n        require(lidToken.balanceOf(msg.sender) >= amount, \"Cannot stake more LID than you hold unstaked.\");\r\n        if (stakeValue[msg.sender] == 0) totalStakers = totalStakers.add(1);\r\n        uint tax = _addStake(amount);\r\n        require(lidToken.transferFrom(msg.sender, address(this), amount), \"Stake failed due to failed transfer.\");\r\n        emit OnStake(msg.sender, amount, tax);\r\n    }\r\n\r\n    function unstake(uint amount) public whenStakingActive {\r\n        require(amount >= 1e18, \"Must unstake at least one LID.\");\r\n        require(stakeValue[msg.sender] >= amount, \"Cannot unstake more LID than you have staked.\");\r\n        uint tax = findTaxAmount(amount, unstakingTaxBP);\r\n        uint earnings = amount.sub(tax);\r\n        if (stakeValue[msg.sender] == amount) totalStakers = totalStakers.sub(1);\r\n        totalStaked = totalStaked.sub(amount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount);\r\n        uint payout = profitPerShare.mul(amount).add(tax.mul(DISTRIBUTION_MULTIPLIER));\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] - uintToInt(payout);\r\n        for (uint i=0; i < stakeHandlers.length; i++) {\r\n            stakeHandlers[i].handleUnstake(msg.sender, amount, stakeValue[msg.sender]);\r\n        }\r\n        _increaseProfitPerShare(tax);\r\n        require(lidToken.transferFrom(address(this), msg.sender, earnings), \"Unstake failed due to failed transfer.\");\r\n        emit OnUnstake(msg.sender, amount, tax);\r\n    }\r\n\r\n    function withdraw(uint amount) public whenStakingActive {\r\n        require(dividendsOf(msg.sender) >= amount, \"Cannot withdraw more dividends than you have earned.\");\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(amount.mul(DISTRIBUTION_MULTIPLIER));\r\n        lidToken.transfer(msg.sender, amount);\r\n        emit OnWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    function reinvest(uint amount) public whenStakingActive {\r\n        require(dividendsOf(msg.sender) >= amount, \"Cannot reinvest more dividends than you have earned.\");\r\n        uint payout = amount.mul(DISTRIBUTION_MULTIPLIER);\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\r\n        uint tax = _addStake(amount);\r\n        emit OnReinvest(msg.sender, amount, tax);\r\n    }\r\n\r\n    function distribute(uint amount) public {\r\n        require(lidToken.balanceOf(msg.sender) >= amount, \"Cannot distribute more LID than you hold unstaked.\");\r\n        totalDistributions = totalDistributions.add(amount);\r\n        _increaseProfitPerShare(amount);\r\n        require(\r\n            lidToken.transferFrom(msg.sender, address(this), amount),\r\n            \"Distribution failed due to failed transfer.\"\r\n        );\r\n        emit OnDistribute(msg.sender, amount);\r\n    }\r\n\r\n    function handleTaxDistribution(uint amount) public onlyLidToken {\r\n        totalDistributions = totalDistributions.add(amount);\r\n        _increaseProfitPerShare(amount);\r\n        emit OnDistribute(msg.sender, amount);\r\n    }\r\n\r\n    function dividendsOf(address staker) public view returns (uint) {\r\n        return uint(uintToInt(profitPerShare.mul(stakeValue[staker])) - stakerPayouts[staker])\r\n            .div(DISTRIBUTION_MULTIPLIER);\r\n    }\r\n\r\n    function findTaxAmount(uint value, uint taxBP) public pure returns (uint) {\r\n        return value.mulBP(taxBP);\r\n    }\r\n\r\n    function numberStakeHandlersRegistered() public view returns (uint) {\r\n        return stakeHandlers.length;\r\n    }\r\n\r\n    function registerStakeHandler(IStakeHandler sc) public onlyOwner {\r\n        stakeHandlers.push(sc);\r\n    }\r\n\r\n    function unregisterStakeHandler(uint index) public onlyOwner {\r\n        IStakeHandler sc = stakeHandlers[stakeHandlers.length-1];\r\n        stakeHandlers.pop();\r\n        stakeHandlers[index] = sc;\r\n    }\r\n\r\n    function setStakingBP(uint valueBP) public onlyOwner {\r\n        require(valueBP < 10000, \"Tax connot be over 100% (10000 BP)\");\r\n        stakingTaxBP = valueBP;\r\n    }\r\n\r\n    function setUnstakingBP(uint valueBP) public onlyOwner {\r\n        require(valueBP < 10000, \"Tax connot be over 100% (10000 BP)\");\r\n        unstakingTaxBP = valueBP;\r\n    }\r\n\r\n    function setStartTime(uint _startTime) public onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function uintToInt(uint val) internal pure returns (int) {\r\n        if (val >= uint(-1).div(2)) {\r\n            require(false, \"Overflow. Cannot convert uint to int.\");\r\n        } else {\r\n            return int(val);\r\n        }\r\n    }\r\n\r\n    function _addStake(uint amount) internal returns (uint tax) {\r\n        tax = findTaxAmount(amount, stakingTaxBP);\r\n        uint stakeAmount = amount.sub(tax);\r\n        totalStaked = totalStaked.add(stakeAmount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].add(stakeAmount);\r\n        for (uint i=0; i < stakeHandlers.length; i++) {\r\n            stakeHandlers[i].handleStake(msg.sender, stakeAmount, stakeValue[msg.sender]);\r\n        }\r\n        uint payout = profitPerShare.mul(stakeAmount);\r\n        stakerPayouts[msg.sender] = stakerPayouts[msg.sender] + uintToInt(payout);\r\n        _increaseProfitPerShare(tax);\r\n    }\r\n\r\n    function _increaseProfitPerShare(uint amount) internal {\r\n        if (totalStaked != 0) {\r\n            if (emptyStakeTokens != 0) {\r\n                amount = amount.add(emptyStakeTokens);\r\n                emptyStakeTokens = 0;\r\n            }\r\n            profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked));\r\n        } else {\r\n            emptyStakeTokens = emptyStakeTokens.add(amount);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ncontract LidCertifiedPresaleTimer is Initializable, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public startTime;\r\n    uint public baseTimer;\r\n    uint public deltaTimer;\r\n\r\n    function initialize(\r\n        uint _startTime,\r\n        uint _baseTimer,\r\n        uint _deltaTimer,\r\n        address owner\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n        startTime = _startTime;\r\n        baseTimer = _baseTimer;\r\n        deltaTimer = _deltaTimer;\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function setStartTime(uint time) external onlyOwner {\r\n        startTime = time;\r\n    }\r\n\r\n    function isStarted() external view returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n    function getEndTime(uint bal) external view returns (uint) {\r\n        uint multiplier = 0;\r\n        if (bal <= 1000 ether) {\r\n            multiplier = bal.div(100 ether);\r\n        } else if (bal <= 10000 ether) {\r\n            multiplier = bal.div(1000 ether).add(9);\r\n        } else if (bal <= 100000 ether) {\r\n            multiplier = bal.div(10000 ether).add(19);\r\n        } else if (bal <= 1000000 ether) {\r\n            multiplier = bal.div(100000 ether).add(29);\r\n        } else if (bal <= 10000000 ether) {\r\n            multiplier = bal.div(1000000 ether).add(39);\r\n        } else if (bal <= 100000000 ether) {\r\n            multiplier = bal.div(10000000 ether).add(49);\r\n        }\r\n        return startTime.add(\r\n            baseTimer\r\n        ).add(\r\n            deltaTimer.mul(multiplier)\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract LidCertifiedPresale is Initializable, Ownable, ReentrancyGuard {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public maxBuyPerAddressBase;\r\n    uint public maxBuyPerAddressBP;\r\n    uint public maxBuyWithoutWhitelisting;\r\n\r\n    uint public redeemBP;\r\n    uint public redeemInterval;\r\n\r\n    uint public referralBP;\r\n\r\n    uint public uniswapEthBP;\r\n    address payable[] public etherPools;\r\n    uint[] public etherPoolBPs;\r\n\r\n    uint public uniswapTokenBP;\r\n    uint public presaleTokenBP;\r\n    address[] public tokenPools;\r\n    uint[] public tokenPoolBPs;\r\n\r\n    uint public startingPrice;\r\n    uint public multiplierPrice;\r\n\r\n    bool public hasSentToUniswap;\r\n    bool public hasIssuedTokens;\r\n    bool public hasSentEther;\r\n\r\n    uint private totalTokens;\r\n    uint private totalEth;\r\n    uint private finalEndTime;\r\n\r\n    ILidCertifiableToken private token;\r\n    IUniswapV2Router01 private uniswapRouter;\r\n    LidCertifiedPresaleTimer private timer;\r\n\r\n    mapping(address => uint) public depositAccounts;\r\n    mapping(address => uint) public accountEarnedLid;\r\n    mapping(address => uint) public accountClaimedLid;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint) public earnedReferrals;\r\n\r\n    modifier whenPresaleActive {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(!_isPresaleEnded(), \"Presale has ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPresaleFinished {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(_isPresaleEnded(), \"Presale has not yet ended.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _maxBuyPerAddressBase,\r\n        uint _maxBuyPerAddressBP,\r\n        uint _maxBuyWithoutWhitelisting,\r\n        uint _redeemBP,\r\n        uint _redeemInterval,\r\n        uint _referralBP,\r\n        uint _startingPrice,\r\n        uint _multiplierPrice,\r\n        address owner,\r\n        LidCertifiedPresaleTimer _timer,\r\n        ILidCertifiableToken _token\r\n    ) external initializer {\r\n        require(_token.isMinter(address(this)), \"Presale SC must be minter.\");\r\n        Ownable.initialize(msg.sender);\r\n        ReentrancyGuard.initialize();\r\n\r\n        token = _token;\r\n        timer = _timer;\r\n\r\n        maxBuyPerAddressBase = _maxBuyPerAddressBase;\r\n        maxBuyPerAddressBP = _maxBuyPerAddressBP;\r\n        maxBuyWithoutWhitelisting = _maxBuyWithoutWhitelisting;\r\n\r\n        redeemBP = _redeemBP;\r\n\r\n        referralBP = _referralBP;\r\n        redeemInterval = _redeemInterval;\r\n\r\n        startingPrice = _startingPrice;\r\n        multiplierPrice = _multiplierPrice;\r\n\r\n        uniswapRouter = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        deposit(address(0x0));\r\n    }\r\n\r\n    function setEtherPools(\r\n        address payable[] calldata _etherPools,\r\n        uint[] calldata _etherPoolBPs\r\n    ) external onlyOwner {\r\n        require(_etherPools.length == _etherPoolBPs.length, \"Must have exactly one etherPool addresses for each BP.\");\r\n        delete etherPools;\r\n        delete etherPoolBPs;\r\n        uniswapEthBP = 7500; //75%\r\n        for (uint i = 0; i < _etherPools.length; ++i) {\r\n            etherPools.push(_etherPools[i]);\r\n        }\r\n        uint totalEtherPoolsBP = uniswapEthBP;\r\n        for (uint i = 0; i < _etherPoolBPs.length; ++i) {\r\n            etherPoolBPs.push(_etherPoolBPs[i]);\r\n            totalEtherPoolsBP = totalEtherPoolsBP.add(_etherPoolBPs[i]);\r\n        }\r\n        require(totalEtherPoolsBP == 10000, \"Must allocate exactly 100% (10000 BP) of ether to pools\");\r\n    }\r\n\r\n    function setTokenPools(\r\n        address[] calldata _tokenPools,\r\n        uint[] calldata _tokenPoolBPs\r\n    ) external onlyOwner {\r\n        require(_tokenPools.length == _tokenPoolBPs.length, \"Must have exactly one tokenPool addresses for each BP.\");\r\n        delete tokenPools;\r\n        delete tokenPoolBPs;\r\n        uniswapTokenBP = 1600;\r\n        presaleTokenBP = 4000;\r\n        for (uint i = 0; i < _tokenPools.length; ++i) {\r\n            tokenPools.push(_tokenPools[i]);\r\n        }\r\n        uint totalTokenPoolBPs = uniswapTokenBP.add(presaleTokenBP);\r\n        for (uint i = 0; i < _tokenPoolBPs.length; ++i) {\r\n            tokenPoolBPs.push(_tokenPoolBPs[i]);\r\n            totalTokenPoolBPs = totalTokenPoolBPs.add(_tokenPoolBPs[i]);\r\n        }\r\n        require(totalTokenPoolBPs == 10000, \"Must allocate exactly 100% (10000 BP) of tokens to pools\");\r\n    }\r\n\r\n    function sendToUniswap() external whenPresaleFinished nonReentrant {\r\n        require(etherPools.length > 0, \"Must have set ether pools\");\r\n        require(tokenPools.length > 0, \"Must have set token pools\");\r\n        require(!hasSentToUniswap, \"Has already sent to Uniswap.\");\r\n        finalEndTime = now;\r\n        hasSentToUniswap = true;\r\n        totalTokens = token.totalSupply().divBP(presaleTokenBP);\r\n        uint uniswapTokens = totalTokens.mulBP(uniswapTokenBP);\r\n        totalEth = address(this).balance;\r\n        uint uniswapEth = totalEth.mulBP(uniswapEthBP);\r\n        token.mint(address(this), uniswapTokens);\r\n        token.activateTransfers();\r\n        token.approve(address(uniswapRouter), uniswapTokens);\r\n        uniswapRouter.addLiquidityETH.value(uniswapEth)(\r\n            address(token),\r\n            uniswapTokens,\r\n            uniswapTokens,\r\n            uniswapEth,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            now\r\n        );\r\n        token.activateTax();\r\n    }\r\n\r\n    function issueTokens() external whenPresaleFinished {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        require(!hasIssuedTokens, \"Has already issued tokens.\");\r\n        hasIssuedTokens = true;\r\n        for (uint i = 0; i < tokenPools.length; ++i) {\r\n            token.mint(\r\n                tokenPools[i],\r\n                totalTokens.mulBP(tokenPoolBPs[i])\r\n            );\r\n        }\r\n    }\r\n\r\n    function sendEther() external whenPresaleFinished nonReentrant {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        require(!hasSentEther, \"Has already sent ether.\");\r\n        hasSentEther = true;\r\n        for (uint i = 0; i < etherPools.length; ++i) {\r\n            etherPools[i].transfer(\r\n                totalEth.mulBP(etherPoolBPs[i])\r\n            );\r\n        }\r\n        //remove dust\r\n        if (address(this).balance > 0) {\r\n            etherPools[0].transfer(\r\n                address(this).balance\r\n            );\r\n        }\r\n    }\r\n\r\n    function setWhitelist(address account, bool value) external onlyOwner {\r\n        whitelist[account] = value;\r\n    }\r\n\r\n    function setWhitelistForAll(address[] calldata account, bool value) external onlyOwner {\r\n        for (uint i=0; i < account.length; i++) {\r\n            whitelist[account[i]] = value;\r\n        }\r\n    }\r\n\r\n    function redeem() external whenPresaleFinished {\r\n        require(hasSentToUniswap, \"Must have sent to Uniswap before any redeems.\");\r\n        uint claimable = calculateReedemable(msg.sender);\r\n        accountClaimedLid[msg.sender] = accountClaimedLid[msg.sender].add(claimable);\r\n        token.mint(msg.sender, claimable);\r\n    }\r\n\r\n    function deposit(address payable referrer) public payable whenPresaleActive nonReentrant {\r\n        if (whitelist[msg.sender]) {\r\n            require(\r\n                depositAccounts[msg.sender].add(msg.value) <=\r\n                getMaxWhitelistedDeposit(\r\n                    address(this).balance.sub(msg.value)\r\n                ),\r\n                \"Deposit exceeds max buy per address for whitelisted addresses.\"\r\n            );\r\n        } else {\r\n            require(\r\n                depositAccounts[msg.sender].add(msg.value) <= maxBuyWithoutWhitelisting,\r\n                \"Deposit exceeds max buy per address for non-whitelisted addresses.\"\r\n            );\r\n        }\r\n\r\n        require(msg.value > 0.01 ether, \"Must purchase at least 0.01 ether.\");\r\n\r\n        uint depositVal = msg.value.subBP(referralBP);\r\n        uint tokensToIssue = depositVal.div(calculateRate());\r\n        depositAccounts[msg.sender] = depositAccounts[msg.sender].add(depositVal);\r\n\r\n        accountEarnedLid[msg.sender] = accountEarnedLid[msg.sender].add(tokensToIssue);\r\n\r\n        if (referrer != address(0x0) && referrer != msg.sender) {\r\n            uint referralValue = msg.value.sub(depositVal);\r\n            earnedReferrals[referrer] = earnedReferrals[referrer].add(referralValue);\r\n            referrer.transfer(referralValue);\r\n        }\r\n    }\r\n\r\n    function calculateReedemable(address account) public view returns (uint) {\r\n        if (finalEndTime == 0) return 0;\r\n        uint earnedLid = accountEarnedLid[account];\r\n        uint claimedLid = accountClaimedLid[account];\r\n        uint cycles = finalEndTime.div(redeemInterval).add(1);\r\n        uint totalRedeemable = earnedLid.mulBP(redeemBP).mul(cycles);\r\n        uint claimable;\r\n        if (totalRedeemable >= earnedLid) {\r\n            claimable = earnedLid.sub(claimedLid);\r\n        } else {\r\n            claimable = totalRedeemable.sub(claimedLid);\r\n        }\r\n        return claimable;\r\n    }\r\n\r\n    function calculateRate() public view returns (uint) {\r\n        return token.totalSupply().mul(multiplierPrice).add(startingPrice);\r\n    }\r\n\r\n    function getMaxWhitelistedDeposit(uint atTotalDeposited) public view returns (uint) {\r\n        return atTotalDeposited.mulBP(maxBuyPerAddressBP).add(maxBuyPerAddressBase);\r\n    }\r\n\r\n    function _isPresaleEnded() internal view returns (bool) {\r\n        return (\r\n            (timer.isStarted() && (now > timer.getEndTime(address(this).balance)))\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LidToken is\r\n    Initializable,\r\n    ILidCertifiableToken,\r\n    ERC20Burnable,\r\n    ERC20Mintable,\r\n    ERC20Pausable,\r\n    ERC20Detailed,\r\n    Ownable {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public taxBP;\r\n    uint public daoTaxBP;\r\n    address private daoFund;\r\n    LidStaking private lidStaking;\r\n    LidCertifiedPresale private lidPresale;\r\n\r\n    bool public isTaxActive;\r\n    bool public isTransfersActive;\r\n\r\n\r\n    mapping(address => bool) private trustedContracts;\r\n    mapping(address => bool) public taxExempt;\r\n    mapping(address => bool) public fromOnlyTaxExempt;\r\n    mapping(address => bool) public toOnlyTaxExempt;\r\n\r\n    modifier onlyPresaleContract() {\r\n        require(msg.sender == address(lidPresale), \"Can only be called by presale sc.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        string calldata name, string calldata symbol, uint8 decimals,\r\n        address owner, uint _taxBP, uint _daoTaxBP,\r\n        address _daoFund,\r\n        LidStaking _lidStaking,\r\n        LidCertifiedPresale _lidPresale\r\n    ) external initializer {\r\n        taxBP = _taxBP;\r\n        daoTaxBP = _daoTaxBP;\r\n\r\n        Ownable.initialize(msg.sender);\r\n\r\n        ERC20Detailed.initialize(name, symbol, decimals);\r\n\r\n        ERC20Mintable.initialize(address(this));\r\n        _removeMinter(address(this));\r\n        _addMinter(owner);\r\n\r\n        ERC20Pausable.initialize(address(this));\r\n        _removePauser(address(this));\r\n        _addPauser(owner);\r\n\r\n        daoFund = _daoFund;\r\n        lidStaking = _lidStaking;\r\n        addTrustedContract(address(_lidStaking));\r\n        addTrustedContract(address(_lidPresale));\r\n        setTaxExemptStatus(address(_lidStaking), true);\r\n        setTaxExemptStatus(address(_lidPresale), true);\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function setFromOnlyTaxExemptStatus(address account, bool status) external onlyOwner {\r\n        fromOnlyTaxExempt[account] = status;\r\n    }\r\n\r\n    function setToOnlyTaxExemptStatus(address account, bool status) external onlyOwner {\r\n        fromOnlyTaxExempt[account] = status;\r\n    }\r\n\r\n    function removeTrustedContract(address contractAddress) external onlyOwner {\r\n        trustedContracts[contractAddress] = false;\r\n    }\r\n\r\n    function activateTransfers() external onlyPresaleContract {\r\n        isTransfersActive = true;\r\n    }\r\n\r\n    function setIsTaxActive(bool status) external onlyOwner {\r\n        isTaxActive = status;\r\n    }\r\n\r\n    function setIsTransfersActive(bool status) external onlyOwner {\r\n        isTransfersActive = status;\r\n    }\r\n\r\n    function activateTax() external onlyPresaleContract {\r\n        isTaxActive = true;\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        require(isTransfersActive, \"Transfers are currently locked.\");\r\n        (\r\n            isTaxActive &&\r\n            !taxExempt[msg.sender] && !taxExempt[recipient] &&\r\n            !toOnlyTaxExempt[recipient] && !fromOnlyTaxExempt[msg.sender]\r\n        ) ?\r\n            _transferWithTax(msg.sender, recipient, amount) :\r\n            _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        require(isTransfersActive, \"Transfers are currently locked.\");\r\n        (\r\n            isTaxActive &&\r\n            !taxExempt[sender] && !taxExempt[recipient] &&\r\n            !toOnlyTaxExempt[recipient] && !fromOnlyTaxExempt[sender]\r\n        ) ?\r\n            _transferWithTax(sender, recipient, amount) :\r\n            _transfer(sender, recipient, amount);\r\n        if (trustedContracts[msg.sender]) return true;\r\n        approve\r\n        (\r\n            msg.sender,\r\n            allowance(\r\n                sender,\r\n                msg.sender\r\n            ).sub(amount, \"Transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addTrustedContract(address contractAddress) public onlyOwner {\r\n        trustedContracts[contractAddress] = true;\r\n    }\r\n\r\n    function setTaxExemptStatus(address account, bool status) public onlyOwner {\r\n        taxExempt[account] = status;\r\n    }\r\n\r\n    function findTaxAmount(uint value) public view returns (uint tax, uint daoTax) {\r\n        tax = value.mulBP(taxBP);\r\n        daoTax = value.mulBP(daoTaxBP);\r\n    }\r\n\r\n    function _transferWithTax(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        (uint tax, uint daoTax) = findTaxAmount(amount);\r\n        uint tokensToTransfer = amount.sub(tax).sub(daoTax);\r\n\r\n        _transfer(sender, address(lidStaking), tax);\r\n        _transfer(sender, address(daoFund), daoTax);\r\n        _transfer(sender, recipient, tokensToTransfer);\r\n        lidStaking.handleTaxDistribution(tax);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addTrustedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoTaxBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findTaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoTax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromOnlyTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoTaxBP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"contract LidStaking\",\"name\":\"_lidStaking\",\"type\":\"address\"},{\"internalType\":\"contract LidCertifiedPresale\",\"name\":\"_lidPresale\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTaxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransfersActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeTrustedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setFromOnlyTaxExemptStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsTaxActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsTransfersActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTaxExemptStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setToOnlyTaxExemptStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toOnlyTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LidToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5013d3a6ee09864ceecd4dab2b7919b8474f8f959f1fe1e869db0825a8718a93"}]}