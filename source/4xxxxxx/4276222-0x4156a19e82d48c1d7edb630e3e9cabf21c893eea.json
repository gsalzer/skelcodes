{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n\t// EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n\t// METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    function multiowned(address[] _owners, uint _required)\r\n        validNumOwners(_owners.length)\r\n        multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        constant\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private constant returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n   \t// FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n\r\nlibrary FixedTimeBonuses {\r\n\r\n    struct Bonus {\r\n        uint endTime;\r\n        uint bonus;\r\n    }\r\n\r\n    struct Data {\r\n        Bonus[] bonuses;\r\n    }\r\n\r\n    /// @dev validates consistency of data structure\r\n    /// @param self data structure\r\n    /// @param shouldDecrease additionally check if bonuses are decreasing over time\r\n    function validate(Data storage self, bool shouldDecrease) constant {\r\n        uint length = self.bonuses.length;\r\n        require(length > 0);\r\n\r\n        Bonus storage last = self.bonuses[0];\r\n        for (uint i = 1; i < length; i++) {\r\n            Bonus storage current = self.bonuses[i];\r\n            require(current.endTime > last.endTime);\r\n            if (shouldDecrease)\r\n                require(current.bonus < last.bonus);\r\n            last = current;\r\n        }\r\n    }\r\n\r\n    /// @dev get ending time of the last bonus\r\n    /// @param self data structure\r\n    function getLastTime(Data storage self) constant returns (uint) {\r\n        return self.bonuses[self.bonuses.length - 1].endTime;\r\n    }\r\n\r\n    /// @dev validates consistency of data structure\r\n    /// @param self data structure\r\n    /// @param time time for which bonus must be computed (assuming time <= getLastTime())\r\n    function getBonus(Data storage self, uint time) constant returns (uint) {\r\n        // TODO binary search?\r\n        uint length = self.bonuses.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            if (self.bonuses[i].endTime >= time)\r\n                return self.bonuses[i].bonus;\r\n        }\r\n        assert(false);  // must be unreachable\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Contract which is owned by owners and operated by controller.\r\n *\r\n * @notice Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n * Controller is set up by owners or during construction.\r\n *\r\n * @dev controller check is performed by onlyController modifier.\r\n */\r\ncontract MultiownedControlled is multiowned {\r\n\r\n    event ControllerSet(address controller);\r\n    event ControllerRetired(address was);\r\n\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == m_controller);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MultiownedControlled(address[] _owners, uint _signaturesRequired, address _controller)\r\n        multiowned(_owners, _signaturesRequired)\r\n    {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @notice sets the controller\r\n    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @notice ability for controller to step down\r\n    function detachController() external onlyController {\r\n        address was = m_controller;\r\n        m_controller = address(0);\r\n        ControllerRetired(was);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice address of entity entitled to mint new tokens\r\n    address public m_controller;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title registry of funds sent by investors\r\ncontract FundsRegistry is MultiownedControlled, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {\r\n        // gathering funds\r\n        GATHERING,\r\n        // returning funds to investors\r\n        REFUNDING,\r\n        // funds can be pulled by owners\r\n        SUCCEEDED\r\n    }\r\n\r\n    event StateChanged(State _state);\r\n    event Invested(address indexed investor, uint256 amount);\r\n    event EtherSent(address indexed to, uint value);\r\n    event RefundSent(address indexed to, uint value);\r\n\r\n\r\n    modifier requiresState(State _state) {\r\n        require(m_state == _state);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function FundsRegistry(address[] _owners, uint _signaturesRequired, address _controller)\r\n        MultiownedControlled(_owners, _signaturesRequired, _controller)\r\n    {\r\n    }\r\n\r\n    /// @dev performs only allowed state transitions\r\n    function changeState(State _newState)\r\n        external\r\n        onlyController\r\n    {\r\n        assert(m_state != _newState);\r\n\r\n        if (State.GATHERING == m_state) {   assert(State.REFUNDING == _newState || State.SUCCEEDED == _newState); }\r\n        else assert(false);\r\n\r\n        m_state = _newState;\r\n        StateChanged(m_state);\r\n    }\r\n\r\n    /// @dev records an investment\r\n    function invested(address _investor)\r\n        external\r\n        payable\r\n        onlyController\r\n        requiresState(State.GATHERING)\r\n    {\r\n        uint256 amount = msg.value;\r\n        require(0 != amount);\r\n        assert(_investor != m_controller);\r\n\r\n        // register investor\r\n        if (0 == m_weiBalances[_investor])\r\n            m_investors.push(_investor);\r\n\r\n        // register payment\r\n        totalInvested = totalInvested.add(amount);\r\n        m_weiBalances[_investor] = m_weiBalances[_investor].add(amount);\r\n\r\n        Invested(_investor, amount);\r\n    }\r\n\r\n    /// @dev Send `value` of ether to address `to`\r\n    function sendEther(address to, uint value)\r\n        external\r\n        onlymanyowners(sha3(msg.data))\r\n        requiresState(State.SUCCEEDED)\r\n    {\r\n        require(0 != to);\r\n        require(value > 0 && this.balance >= value);\r\n        to.transfer(value);\r\n        EtherSent(to, value);\r\n    }\r\n\r\n    /// @notice withdraw accumulated balance, called by payee.\r\n    function withdrawPayments()\r\n        external\r\n        nonReentrant\r\n        requiresState(State.REFUNDING)\r\n    {\r\n        address payee = msg.sender;\r\n        uint256 payment = m_weiBalances[payee];\r\n\r\n        require(payment != 0);\r\n        require(this.balance >= payment);\r\n\r\n        totalInvested = totalInvested.sub(payment);\r\n        m_weiBalances[payee] = 0;\r\n\r\n        payee.transfer(payment);\r\n        RefundSent(payee, payment);\r\n    }\r\n\r\n    function getInvestorsCount() external constant returns (uint) { return m_investors.length; }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice total amount of investments in wei\r\n    uint256 public totalInvested;\r\n\r\n    /// @notice state of the registry\r\n    State public m_state = State.GATHERING;\r\n\r\n    /// @dev balances of investors in wei\r\n    mapping(address => uint256) public m_weiBalances;\r\n\r\n    /// @dev list of unique investors\r\n    address[] public m_investors;\r\n}\r\n\r\npragma solidity 0.4.15;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title StandardToken which circulation can be delayed and started by another contract.\r\n/// @dev To be used as a mixin contract.\r\n/// The contract is created in disabled state: circulation is disabled.\r\ncontract CirculatingToken is StandardToken {\r\n\r\n    event CirculationEnabled();\r\n\r\n    modifier requiresCirculation {\r\n        require(m_isCirculating);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function transfer(address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    function enableCirculation() internal returns (bool) {\r\n        if (m_isCirculating)\r\n            return false;\r\n\r\n        m_isCirculating = true;\r\n        CirculationEnabled();\r\n        return true;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice are the circulation started?\r\n    bool public m_isCirculating;\r\n}\r\n\r\n\r\n\r\n/// @title StandardToken which can be minted by another contract.\r\ncontract MintableMultiownedToken is MultiownedControlled, StandardToken {\r\n\r\n    /// @dev parameters of an extra token emission\r\n    struct EmissionInfo {\r\n        // tokens created\r\n        uint256 created;\r\n\r\n        // totalSupply at the moment of emission (excluding created tokens)\r\n        uint256 totalSupplyWas;\r\n    }\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Emission(uint256 tokensCreated, uint256 totalSupplyWas, uint256 time);\r\n    event Dividend(address indexed to, uint256 amount);\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MintableMultiownedToken(address[] _owners, uint _signaturesRequired, address _minter)\r\n        MultiownedControlled(_owners, _signaturesRequired, _minter)\r\n    {\r\n        dividendsPool = this;   // or any other special unforgeable value, actually\r\n\r\n        // emission #0 is a dummy: because of default value 0 in m_lastAccountEmission\r\n        m_emissions.push(EmissionInfo({created: 0, totalSupplyWas: 0}));\r\n    }\r\n\r\n    /// @notice Request dividends for current account.\r\n    function requestDividends() external {\r\n        payDividendsTo(msg.sender);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transfer to pay dividends\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(msg.sender);\r\n        payDividendsTo(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice hook on standard ERC20#transferFrom to pay dividends\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        payDividendsTo(_from);\r\n        payDividendsTo(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Disabled: this could be undesirable because sum of (balanceOf() for each token owner) != totalSupply\r\n    // (but: sum of (balances[owner] for each token owner) == totalSupply!).\r\n    //\r\n    // @notice hook on standard ERC20#balanceOf to take dividends into consideration\r\n    // function balanceOf(address _owner) constant returns (uint256) {\r\n    //     var (hasNewDividends, dividends) = calculateDividendsFor(_owner);\r\n    //     return hasNewDividends ? super.balanceOf(_owner).add(dividends) : super.balanceOf(_owner);\r\n    // }\r\n\r\n\r\n    /// @dev mints new tokens\r\n    function mint(address _to, uint256 _amount) external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        payDividendsTo(_to);\r\n        mintInternal(_to, _amount);\r\n    }\r\n\r\n    /// @dev disables mint(), irreversible!\r\n    function disableMinting() external onlyController {\r\n        require(m_externalMintingEnabled);\r\n        m_externalMintingEnabled = false;\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    /**\r\n     * @notice Starts new token emission\r\n     * @param _tokensCreated Amount of tokens to create\r\n     * @dev Dividends are not distributed immediately as it could require billions of gas,\r\n     * instead they are `pulled` by a holder from dividends pool account before any update to the holder account occurs.\r\n     */\r\n    function emissionInternal(uint256 _tokensCreated) internal {\r\n        require(0 != _tokensCreated);\r\n        require(_tokensCreated < totalSupply / 2);  // otherwise it looks like an error\r\n\r\n        uint256 totalSupplyWas = totalSupply;\r\n\r\n        m_emissions.push(EmissionInfo({created: _tokensCreated, totalSupplyWas: totalSupplyWas}));\r\n        mintInternal(dividendsPool, _tokensCreated);\r\n\r\n        Emission(_tokensCreated, totalSupplyWas, now);\r\n    }\r\n\r\n    function mintInternal(address _to, uint256 _amount) internal {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n    }\r\n\r\n    /// @dev adds dividends to the account _to\r\n    function payDividendsTo(address _to) internal {\r\n        var (hasNewDividends, dividends) = calculateDividendsFor(_to);\r\n        if (!hasNewDividends)\r\n            return;\r\n\r\n        if (0 != dividends) {\r\n            balances[dividendsPool] = balances[dividendsPool].sub(dividends);\r\n            balances[_to] = balances[_to].add(dividends);\r\n        }\r\n        m_lastAccountEmission[_to] = getLastEmissionNum();\r\n    }\r\n\r\n    /// @dev calculates dividends for the account _for\r\n    /// @return (true if state has to be updated, dividend amount (could be 0!))\r\n    function calculateDividendsFor(address _for) constant internal returns (bool hasNewDividends, uint dividends) {\r\n        assert(_for != dividendsPool);  // no dividends for the pool!\r\n\r\n        uint256 lastEmissionNum = getLastEmissionNum();\r\n        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\r\n        assert(lastAccountEmissionNum <= lastEmissionNum);\r\n        if (lastAccountEmissionNum == lastEmissionNum)\r\n            return (false, 0);\r\n\r\n        uint256 initialBalance = balances[_for];    // beware of recursion!\r\n        if (0 == initialBalance)\r\n            return (true, 0);\r\n\r\n        uint256 balance = initialBalance;\r\n        for (uint256 emissionToProcess = lastAccountEmissionNum + 1; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\r\n            EmissionInfo storage emission = m_emissions[emissionToProcess];\r\n            assert(0 != emission.created && 0 != emission.totalSupplyWas);\r\n\r\n            uint256 dividend = balance.mul(emission.created).div(emission.totalSupplyWas);\r\n            Dividend(_for, dividend);\r\n\r\n            balance = balance.add(dividend);\r\n        }\r\n\r\n        return (true, balance.sub(initialBalance));\r\n    }\r\n\r\n    function getLastEmissionNum() private constant returns (uint256) {\r\n        return m_emissions.length - 1;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice if this true then token is still externally mintable (but this flag does't affect emissions!)\r\n    bool public m_externalMintingEnabled = true;\r\n\r\n    /// @dev internal address of dividends in balances mapping.\r\n    address dividendsPool;\r\n\r\n    /// @notice record of issued dividend emissions\r\n    EmissionInfo[] public m_emissions;\r\n\r\n    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\r\n    mapping(address => uint256) m_lastAccountEmission;\r\n}\r\n\r\n\r\n/// @title Storiqa coin contract\r\ncontract STQToken is CirculatingToken, MintableMultiownedToken {\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function STQToken(address[] _owners)\r\n        MintableMultiownedToken(_owners, 2, /* minter: */ address(0))\r\n    {\r\n        require(3 == _owners.length);\r\n    }\r\n\r\n    /// @notice Allows token transfers\r\n    function startCirculation() external onlyController {\r\n        assert(enableCirculation());    // must be called once\r\n    }\r\n\r\n    /// @notice Starts new token emission\r\n    /// @param _tokensCreatedInSTQ Amount of STQ (not STQ-wei!) to create, like 30 000 or so\r\n    function emission(uint256 _tokensCreatedInSTQ) external onlymanyowners(sha3(msg.data)) {\r\n        emissionInternal(_tokensCreatedInSTQ.mul(uint256(10) ** uint256(decimals)));\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    string public constant name = 'Storiqa Token';\r\n    string public constant symbol = 'STQ';\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/// @title Storiqa ICO contract\r\ncontract STQCrowdsale is multiowned, ReentrancyGuard {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n    using FixedTimeBonuses for FixedTimeBonuses.Data;\r\n\r\n    uint internal constant MSK2UTC_DELTA = 3600 * 3;\r\n\r\n    enum IcoState { INIT, ICO, PAUSED, FAILED, SUCCEEDED }\r\n\r\n\r\n    event StateChanged(IcoState _state);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n\r\n    modifier requiresState(IcoState _state) {\r\n        require(m_state == _state);\r\n        _;\r\n    }\r\n\r\n    /// @dev triggers some state changes based on current time\r\n    /// note: function body could be skipped!\r\n    modifier timedStateChange() {\r\n        if (IcoState.INIT == m_state && getCurrentTime() >= getStartTime())\r\n            changeState(IcoState.ICO);\r\n\r\n        if (IcoState.ICO == m_state && getCurrentTime() > getEndTime()) {\r\n            finishICO();\r\n\r\n            if (msg.value > 0)\r\n                msg.sender.transfer(msg.value);\r\n            // note that execution of further (but not preceding!) modifiers and functions ends here\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev automatic check for unaccounted withdrawals\r\n    modifier fundsChecker() {\r\n        assert(m_state == IcoState.ICO);\r\n\r\n        uint atTheBeginning = m_funds.balance;\r\n        if (atTheBeginning < m_lastFundsAmount) {\r\n            changeState(IcoState.PAUSED);\r\n            if (msg.value > 0)\r\n                msg.sender.transfer(msg.value); // we cant throw (have to save state), so refunding this way\r\n            // note that execution of further (but not preceding!) modifiers and functions ends here\r\n        } else {\r\n            _;\r\n\r\n            if (m_funds.balance < atTheBeginning) {\r\n                changeState(IcoState.PAUSED);\r\n            } else {\r\n                m_lastFundsAmount = m_funds.balance;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function STQCrowdsale(address[] _owners, address _token, address _funds)\r\n        multiowned(_owners, 2)\r\n    {\r\n        require(3 == _owners.length);\r\n        require(address(0) != address(_token) && address(0) != address(_funds));\r\n\r\n        m_token = STQToken(_token);\r\n        m_funds = FundsRegistry(_funds);\r\n\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1505681999 + MSK2UTC_DELTA, bonus: 50}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1505768399 + MSK2UTC_DELTA, bonus: 25}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1505941199 + MSK2UTC_DELTA, bonus: 20}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1506200399 + MSK2UTC_DELTA, bonus: 15}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1506545999 + MSK2UTC_DELTA, bonus: 10}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1506891599 + MSK2UTC_DELTA, bonus: 5}));\r\n        m_bonuses.bonuses.push(FixedTimeBonuses.Bonus({endTime: 1508360399 + MSK2UTC_DELTA, bonus: 0}));\r\n        m_bonuses.validate(true);\r\n    }\r\n\r\n\r\n    // PUBLIC interface: payments\r\n\r\n    // fallback function as a shortcut\r\n    function() payable {\r\n        buy();  // only internal call here!\r\n    }\r\n\r\n    /// @notice ICO participation\r\n    /// @return number of STQ tokens bought (with all decimal symbols)\r\n    function buy()\r\n        public\r\n        payable\r\n        nonReentrant\r\n        timedStateChange\r\n        requiresState(IcoState.ICO)\r\n        fundsChecker\r\n        returns (uint)\r\n    {\r\n        address investor = msg.sender;\r\n        uint256 payment = msg.value;\r\n        require(payment >= c_MinInvestment);\r\n\r\n        uint startingInvariant = this.balance.add(m_funds.balance);\r\n\r\n        // checking for max cap\r\n        uint fundsAllowed = getMaximumFunds().sub(m_funds.totalInvested());\r\n        assert(0 != fundsAllowed);  // in this case state must not be IcoState.ICO\r\n        payment = fundsAllowed.min256(payment);\r\n        uint256 change = msg.value.sub(payment);\r\n\r\n        // issue tokens\r\n        uint stq = calcSTQAmount(payment);\r\n        m_token.mint(investor, stq);\r\n\r\n        // record payment\r\n        m_funds.invested.value(payment)(investor);\r\n        FundTransfer(investor, payment, true);\r\n\r\n        // check if ICO must be closed early\r\n        if (change > 0)\r\n        {\r\n            assert(getMaximumFunds() == m_funds.totalInvested());\r\n            finishICO();\r\n\r\n            // send change\r\n            investor.transfer(change);\r\n            assert(startingInvariant == this.balance.add(m_funds.balance).add(change));\r\n        }\r\n        else\r\n            assert(startingInvariant == this.balance.add(m_funds.balance));\r\n\r\n        return stq;\r\n    }\r\n\r\n\r\n    // PUBLIC interface: owners: maintenance\r\n\r\n    /// @notice pauses ICO\r\n    function pause()\r\n        external\r\n        timedStateChange\r\n        requiresState(IcoState.ICO)\r\n        onlyowner\r\n    {\r\n        changeState(IcoState.PAUSED);\r\n    }\r\n\r\n    /// @notice resume paused ICO\r\n    function unpause()\r\n        external\r\n        timedStateChange\r\n        requiresState(IcoState.PAUSED)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        changeState(IcoState.ICO);\r\n        checkTime();\r\n    }\r\n\r\n    /// @notice consider paused ICO as failed\r\n    function fail()\r\n        external\r\n        timedStateChange\r\n        requiresState(IcoState.PAUSED)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        changeState(IcoState.FAILED);\r\n    }\r\n\r\n    /// @notice In case we need to attach to existent token\r\n    function setToken(address _token)\r\n        external\r\n        timedStateChange\r\n        requiresState(IcoState.PAUSED)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        require(address(0) != _token);\r\n        m_token = STQToken(_token);\r\n    }\r\n\r\n    /// @notice In case we need to attach to existent funds\r\n    function setFundsRegistry(address _funds)\r\n        external\r\n        timedStateChange\r\n        requiresState(IcoState.PAUSED)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        require(address(0) != _funds);\r\n        m_funds = FundsRegistry(_funds);\r\n    }\r\n\r\n    /// @notice explicit trigger for timed state changes\r\n    function checkTime()\r\n        public\r\n        timedStateChange\r\n        onlyowner\r\n    {\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    function finishICO() private {\r\n        if (m_funds.totalInvested() < getMinFunds())\r\n            changeState(IcoState.FAILED);\r\n        else\r\n            changeState(IcoState.SUCCEEDED);\r\n    }\r\n\r\n    /// @dev performs only allowed state transitions\r\n    function changeState(IcoState _newState) private {\r\n        assert(m_state != _newState);\r\n\r\n        if (IcoState.INIT == m_state) {        assert(IcoState.ICO == _newState); }\r\n        else if (IcoState.ICO == m_state) {    assert(IcoState.PAUSED == _newState || IcoState.FAILED == _newState || IcoState.SUCCEEDED == _newState); }\r\n        else if (IcoState.PAUSED == m_state) { assert(IcoState.ICO == _newState || IcoState.FAILED == _newState); }\r\n        else assert(false);\r\n\r\n        m_state = _newState;\r\n        StateChanged(m_state);\r\n\r\n        // this should be tightly linked\r\n        if (IcoState.SUCCEEDED == m_state) {\r\n            onSuccess();\r\n        } else if (IcoState.FAILED == m_state) {\r\n            onFailure();\r\n        }\r\n    }\r\n\r\n    function onSuccess() private {\r\n        // mint tokens for owners\r\n        uint tokensPerOwner = m_token.totalSupply().mul(4).div(m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            m_token.mint(getOwner(i), tokensPerOwner);\r\n\r\n        m_funds.changeState(FundsRegistry.State.SUCCEEDED);\r\n        m_funds.detachController();\r\n\r\n        m_token.disableMinting();\r\n        m_token.startCirculation();\r\n        m_token.detachController();\r\n    }\r\n\r\n    function onFailure() private {\r\n        m_funds.changeState(FundsRegistry.State.REFUNDING);\r\n        m_funds.detachController();\r\n    }\r\n\r\n\r\n    /// @dev calculates amount of STQ to which payer of _wei is entitled\r\n    function calcSTQAmount(uint _wei) private constant returns (uint) {\r\n        uint stq = _wei.mul(c_STQperETH);\r\n\r\n        // apply bonus\r\n        stq = stq.mul(m_bonuses.getBonus(getCurrentTime()).add(100)).div(100);\r\n\r\n        return stq;\r\n    }\r\n\r\n    /// @dev start time of the ICO, inclusive\r\n    function getStartTime() private constant returns (uint) {\r\n        return c_startTime;\r\n    }\r\n\r\n    /// @dev end time of the ICO, inclusive\r\n    function getEndTime() private constant returns (uint) {\r\n        return m_bonuses.getLastTime();\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getCurrentTime() internal constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getMinFunds() internal constant returns (uint) {\r\n        return c_MinFunds;\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getMaximumFunds() internal constant returns (uint) {\r\n        return c_MaximumFunds;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice starting exchange rate of STQ\r\n    uint public constant c_STQperETH = 100;\r\n\r\n    /// @notice minimum investment\r\n    uint public constant c_MinInvestment = 10 finney;\r\n\r\n    /// @notice minimum investments to consider ICO as a success\r\n    uint public constant c_MinFunds = 5000 ether;\r\n\r\n    /// @notice maximum investments to be accepted during ICO\r\n    uint public constant c_MaximumFunds = 500000 ether;\r\n\r\n    /// @notice start time of the ICO\r\n    uint public constant c_startTime = 1505541600;\r\n\r\n    /// @notice timed bonuses\r\n    FixedTimeBonuses.Data m_bonuses;\r\n\r\n    /// @dev state of the ICO\r\n    IcoState public m_state = IcoState.INIT;\r\n\r\n    /// @dev contract responsible for token accounting\r\n    STQToken public m_token;\r\n\r\n    /// @dev contract responsible for investments accounting\r\n    FundsRegistry public m_funds;\r\n\r\n    /// @dev last recorded funds\r\n    uint256 public m_lastFundsAmount;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_MaximumFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_lastFundsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_funds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_STQperETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_MinFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fail\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_funds\",\"type\":\"address\"}],\"name\":\"setFundsRegistry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"c_MinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_funds\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"STQCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000002bd1f12269c1ff80042c8d354bba4c1ca52e2061000000000000000000000000e716209f5d62efa8ca4cacdda1284bfff8df9e420000000000000000000000000000000000000000000000000000000000000003000000000000000000000000dad209d09b0fec404da4204672372771bad3d6830000000000000000000000000eed5de3487aec55ba585212daedf35104c27baf00000000000000000000000006ba0d658578b014b5febdaf6992bfd41bd44483","Library":"FixedTimeBonuses:7f783eebaa2fb835670261556bba8696ffa41896","SwarmSource":"bzzr://6e4a056694ae33549edcf0afee5ea7b1a6916c2f98bbf48cead06e9d8d0050fc"}]}