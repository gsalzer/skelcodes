{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract SpeculateCoin {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    address public owner;\r\n    uint256 public transactions;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    function SpeculateCoin() {\r\n        balances[this] = 2100000000000000;\r\n        name = \"SpeculateCoin\";     \r\n        symbol = \"SPC\";\r\n        owner = msg.sender;\r\n        decimals = 8;\r\n        transactions = 124; //number of transactions for the moment of creating new contract\r\n        \r\n        //sending new version of SPC to those 8 users who already bought tokens on the moment of creating new contract (+10,000 bonus for the inconvenience)\r\n        balances[0x58d812Daa585aa0e97F8ecbEF7B5Ee90815eCf11] = 19271548800760 + 1000000000000;\r\n        balances[0x13b34604Ccc38B5d4b058dd6661C5Ec3b13EF045] = 9962341772151 + 1000000000000;\r\n        balances[0xf9f24301713ce954148B62e751127540D817eCcB] = 6378486241488 + 1000000000000;\r\n        balances[0x07A163111C7050FFfeBFcf6118e2D02579028F5B] = 3314087865252 + 1000000000000;\r\n        balances[0x9fDa619519D86e1045423c6ee45303020Aba7759] = 2500000000000 + 1000000000000;\r\n        balances[0x93Fe366Ecff57E994D1A5e3E563088030ea828e2] = 794985754985 + 1000000000000;\r\n        balances[0xbE2b70aB8316D4f81ED12672c4038c1341d21d5b] = 451389230252 + 1000000000000;\r\n        balances[0x1fb4b01DcBdbBc2fb7db6Ed3Dff81F32619B2142] = 100000000000 + 1000000000000;\r\n        balances[this] -= 19271548800760 + 9962341772151 + 6378486241488 + 3314087865252 + 2500000000000 + 794985754985 + 451389230252 + 100000000000 + 8000000000000;\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function() payable {\r\n        if(msg.value == 0) { return; }\r\n        uint256 price = 100 + (transactions * 100);\r\n        uint256 amount = msg.value / price;\r\n        if (amount < 100000000 || amount > 1000000000000 || balances[this] < amount) {\r\n            msg.sender.transfer(msg.value);\r\n            return; \r\n        }\r\n        owner.transfer(msg.value);\r\n        balances[msg.sender] += amount;     \r\n        balances[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n        transactions = transactions + 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SpeculateCoin","CompilerVersion":"v0.4.10+commit.f0d539ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e10269af1b884c7ddf81cc8d86985102b7f4ca61380b09238ea3a16d92a2f71"}]}