{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balance() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// penispenispenispenis\r\n// YOU get a penis, and YOU get a penis, and YOU get a penis!\r\ncontract Penis is ERC20Interface {\r\n    string public constant symbol = \"PNS\";\r\n    string public constant name = \"Penis\";\r\n    uint8 public constant decimals = 2;\r\n\r\n    uint256 _totalSupply = 0;\r\n    uint256 _airdropAmount = 8008135;\r\n    uint256 _cutoff = _airdropAmount * 80085;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) initialized;\r\n\r\n    // Penis accepts request to tip-touch another Penis\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function Penis() {\r\n        initialized[msg.sender] = true;\r\n        balances[msg.sender] = _airdropAmount * 8008;\r\n        _totalSupply = balances[msg.sender];\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // What's my girth?\r\n    function balance() constant returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    // What is the length of a particular Penis?\r\n    function balanceOf(address _address) constant returns (uint256) {\r\n        return getBalance(_address);\r\n    }\r\n\r\n    // Tenderly remove hand from Penis and place on another Penis\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        initialize(msg.sender);\r\n\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0) {\r\n            initialize(_to);\r\n            if (balances[_to] + _amount > balances[_to]) {\r\n\r\n                balances[msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n\r\n                Transfer(msg.sender, _to, _amount);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Perform the inevitable actions which cause release of that which each Penis\r\n    // is built to deliver. In EtherPenisLand there are only Penises, so this \r\n    // allows the transmission of one Penis's payload (or partial payload but that\r\n    // is not as much fun) INTO another Penis. This causes the Penisae to change \r\n    // form such that all may see the glory they each represent. Erections.\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        initialize(_from);\r\n\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0) {\r\n            initialize(_to);\r\n            if (balances[_to] + _amount > balances[_to]) {\r\n\r\n                balances[_from] -= _amount;\r\n                allowed[_from][msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n\r\n                Transfer(_from, _to, _amount);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow splooger to cause a payload release from your Penis, multiple times, up to \r\n    // the point at which no further release is possible..\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // internal privats\r\n    function initialize(address _address) internal returns (bool success) {\r\n        if (_totalSupply < _cutoff && !initialized[_address]) {\r\n            initialized[_address] = true;\r\n            balances[_address] = _airdropAmount;\r\n            _totalSupply += _airdropAmount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getBalance(address _address) internal returns (uint256) {\r\n        if (_totalSupply < _cutoff && !initialized[_address]) {\r\n            return balances[_address] + _airdropAmount;\r\n        }\r\n        else {\r\n            return balances[_address];\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Penis","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb506dbf3318c8a7f2647b040b7a7330818850ebcc989ed13f8f06059ddecb4f"}]}