{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\nLINK funds pool\r\n========================\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract LINKFund {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  \r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  \r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  \r\n  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\r\n  uint256 constant public min_required_amount = 100 ether;\r\n  \r\n  // The maximum amount of ETH that can be deposited into the contract.\r\n  uint256 public max_raised_amount = 300 ether;\r\n  \r\n  // The first block after which buy-in is allowed. Set in the contract constructor.\r\n  uint256 public min_buy_block;\r\n  \r\n  // The first block after which a refund is allowed. Set in the contract constructor.\r\n  uint256 public min_refund_block;\r\n  \r\n  // The crowdsale address. Address can be verified at: https://link.smartcontract.com/presales/0cc9afed-c33a-4264-bdf7-5f5c675c1e76\r\n  address constant public sale = 0xC8E23bA1f423812Eca868189072722D822fCAFC1;\r\n\r\n  address constant public creator = 0xDe81B20B6801d99EFEaEcEd48a11ba025180b8cc;\r\n  \r\n  // Constructor. \r\n  function LINKFund() {\r\n    // 4217557 + (60*60*24/25) because 1 block is mined every 25 seconds\r\n    min_buy_block = 4221013;\r\n    \r\n    // 4217557 + (60*60*24*60/25) if the devs refund the eth, 20 days\r\n    min_refund_block = 4286677;\r\n  }\r\n  \r\n  // Allows any user to withdraw his tokens.\r\n  // Takes the token's ERC20 address as argument as it is unknown at the time of contract deployment.\r\n  //When the devs will send the tokens, you will have to call this function and pass the ERC20 token address of LINK\r\n  function perform_withdraw(address tokenAddress) {\r\n    // Disallow withdraw if tokens haven't been bought yet.\r\n    if (!bought_tokens) throw;\r\n    \r\n    // Retrieve current token balance of contract.\r\n    ERC20 token = ERC20(tokenAddress);\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n      \r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    if (contract_token_balance == 0) throw;\r\n      \r\n    // Store the user's token balance in a temporary variable.\r\n    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      \r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value -= balances[msg.sender];\r\n      \r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    if(!token.transfer(msg.sender, tokens_to_withdraw)) throw;\r\n  }\r\n  \r\n  // Allows any user to get his eth refunded before the purchase is made or after approx. 20 days in case the devs refund the eth.\r\n  function refund_me() {\r\n    if (bought_tokens) {\r\n      // Only allow refunds when the tokens have been bought if the minimum refund block has been reached.\r\n      if (block.number < min_refund_block) throw;\r\n    }\r\n    \r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint256 eth_to_withdraw = balances[msg.sender];\r\n      \r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n      \r\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  \r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens() {\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    \r\n    // Throw if the contract balance is less than the minimum required amount\r\n    if (this.balance < min_required_amount) throw;\r\n    \r\n    // Throw if the minimum buy-in block hasn't been reached\r\n    if (block.number < min_buy_block) throw;\r\n    \r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    \r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n\r\n    // Transfer all the funds to the crowdsale address.\r\n    sale.transfer(contract_eth_value);\r\n  }\r\n\r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Throw if the balance is larger than the maximum allowed amount.\r\n    if (this.balance > max_raised_amount) throw;\r\n    \r\n    // Update records of deposited ETH to include the received amount but only if the buy-in hasn't been done yet.\r\n    // This will handle an eventual refund from the devs while disallowing buy-ins after the deadline.\r\n    if (!bought_tokens) {\r\n      //10% fee for the creator\r\n      uint256 fee = msg.value / 10;\r\n      balances[msg.sender] += msg.value - fee;\r\n      creator.transfer(fee);\r\n    }\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Delegate to the helper function.\r\n    default_helper();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_required_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"default_helper\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_buy_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_me\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_refund_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_raised_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"perform_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LINKFund","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e4d29a8afd39f451f4764a23f578af03dc5904830b7c6c23054f01a44b713861"}]}