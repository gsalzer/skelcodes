{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n//\r\n// CPYToken is a standard ERC20 token with additional functionality:\r\n// - tokenSaleContract receives the whole balance for distribution\r\n// - Tokens are only transferable by the tokenSaleContract until finalization\r\n// - Token holders can burn their tokens after finalization\r\n//\r\ncontract Token is StandardToken {\r\n\r\n    string  public constant name   = \"COPYTRACK Token\";\r\n    string  public constant symbol = \"CPY\";\r\n\r\n    uint8 public constant   decimals = 18;\r\n\r\n    uint256 constant EXA       = 10 ** 18;\r\n    uint256 public totalSupply = 100 * 10 ** 6 * EXA;\r\n\r\n    bool public finalized = false;\r\n\r\n    address public tokenSaleContract;\r\n\r\n    //\r\n    // EVENTS\r\n    //\r\n    event Finalized();\r\n\r\n    event Burnt(address indexed _from, uint256 _amount);\r\n\r\n\r\n    // Initialize the token with the tokenSaleContract and transfer the whole balance to it\r\n    function Token(address _tokenSaleContract)\r\n        public\r\n    {\r\n        // Make sure address is set\r\n        require(_tokenSaleContract != 0);\r\n\r\n        balances[_tokenSaleContract] = totalSupply;\r\n\r\n        tokenSaleContract = _tokenSaleContract;\r\n    }\r\n\r\n\r\n    // Implementation of the standard transfer method that takes the finalize flag into account\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        checkTransferAllowed(msg.sender);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    // Implementation of the standard transferFrom method that takes into account the finalize flag\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        checkTransferAllowed(msg.sender);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function checkTransferAllowed(address _sender)\r\n        private\r\n        view\r\n    {\r\n        if (finalized) {\r\n            // Every token holder should be allowed to transfer tokens once token was finalized\r\n            return;\r\n        }\r\n\r\n        // Only allow tokenSaleContract to transfer tokens before finalization\r\n        require(_sender == tokenSaleContract);\r\n    }\r\n\r\n\r\n    // Finalize method marks the point where token transfers are finally allowed for everybody\r\n    function finalize()\r\n        external\r\n        returns (bool success)\r\n    {\r\n        require(!finalized);\r\n        require(msg.sender == tokenSaleContract);\r\n\r\n        finalized = true;\r\n\r\n        Finalized();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Implement a burn function to permit msg.sender to reduce its balance which also reduces totalSupply\r\n    function burn(uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(finalized);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burnt(msg.sender, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TokenSaleConfig  {\r\n    uint public constant EXA = 10 ** 18;\r\n\r\n    uint256 public constant PUBLIC_START_TIME         = 1515542400; //Wed, 10 Jan 2018 00:00:00 +0000\r\n    uint256 public constant END_TIME                  = 1518220800; //Sat, 10 Feb 2018 00:00:00 +0000\r\n    uint256 public constant CONTRIBUTION_MIN          = 0.1 ether;\r\n    uint256 public constant CONTRIBUTION_MAX          = 2500.0 ether;\r\n\r\n    uint256 public constant COMPANY_ALLOCATION        = 40 * 10 ** 6 * EXA; //40 million;\r\n\r\n    Tranche[4] public tranches;\r\n\r\n    struct Tranche {\r\n        // How long this tranche will be active\r\n        uint untilToken;\r\n\r\n        // How many tokens per ether you will get while this tranche is active\r\n        uint tokensPerEther;\r\n    }\r\n\r\n    function TokenSaleConfig()\r\n        public\r\n    {\r\n        tranches[0] = Tranche({untilToken : 5000000 * EXA, tokensPerEther : 1554});\r\n        tranches[1] = Tranche({untilToken : 10000000 * EXA, tokensPerEther : 1178});\r\n        tranches[2] = Tranche({untilToken : 20000000 * EXA, tokensPerEther : 1000});\r\n        tranches[3] = Tranche({untilToken : 60000000, tokensPerEther : 740});\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenSale is TokenSaleConfig, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    Token  public  tokenContract;\r\n\r\n    // We keep track of whether the sale has been finalized, at which point\r\n    // no additional contributions will be permitted.\r\n    bool public finalized = false;\r\n\r\n    // lookup for max wei amount per user allowed\r\n    mapping (address => uint256) public contributors;\r\n\r\n    // the total amount of wei raised\r\n    uint256 public totalWeiRaised = 0;\r\n\r\n    // the total amount of token raised\r\n    uint256 public totalTokenSold = 0;\r\n\r\n    // address where funds are collected\r\n    address public fundingWalletAddress;\r\n\r\n    // address which manages the whitelist (KYC)\r\n    mapping (address => bool) public whitelistOperators;\r\n\r\n    // lookup addresses for whitelist\r\n    mapping (address => bool) public whitelist;\r\n\r\n\r\n    // early bird investments\r\n    address[] public earlyBirds;\r\n\r\n    mapping (address => uint256) public earlyBirdInvestments;\r\n\r\n\r\n    //\r\n    // MODIFIERS\r\n    //\r\n\r\n    // Throws if purchase would exceed the min max contribution.\r\n    // @param _contribute address\r\n    // @param _weiAmount the amount intended to spend\r\n    modifier withinContributionLimits(address _contributorAddress, uint256 _weiAmount) {\r\n        uint256 totalContributionAmount = contributors[_contributorAddress].add(_weiAmount);\r\n        require(_weiAmount >= CONTRIBUTION_MIN);\r\n        require(totalContributionAmount <= CONTRIBUTION_MAX);\r\n        _;\r\n    }\r\n\r\n    // Throws if called by any account not on the whitelist.\r\n    // @param _address Address which should execute the function\r\n    modifier onlyWhitelisted(address _address) {\r\n        require(whitelist[_address] == true);\r\n        _;\r\n    }\r\n\r\n    // Throws if called by any account not on the whitelistOperators list\r\n    modifier onlyWhitelistOperator()\r\n    {\r\n        require(whitelistOperators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    //Throws if sale is finalized or token sale end time has been reached\r\n    modifier onlyDuringSale() {\r\n        require(finalized == false);\r\n        require(currentTime() <= END_TIME);\r\n        _;\r\n    }\r\n\r\n    //Throws if sale is finalized\r\n    modifier onlyAfterFinalized() {\r\n        require(finalized);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // EVENTS\r\n    //\r\n    event LogWhitelistUpdated(address indexed _account);\r\n\r\n    event LogTokensPurchased(address indexed _account, uint256 _cost, uint256 _tokens, uint256 _totalTokenSold);\r\n\r\n    event UnsoldTokensBurnt(uint256 _amount);\r\n\r\n    event Finalized();\r\n\r\n    // Initialize a new TokenSale contract\r\n    // @param _fundingWalletAddress Address which all ether will be forwarded to\r\n    function TokenSale(address _fundingWalletAddress)\r\n        public\r\n    {\r\n        //make sure _fundingWalletAddress is set\r\n        require(_fundingWalletAddress != 0);\r\n\r\n        fundingWalletAddress = _fundingWalletAddress;\r\n    }\r\n\r\n    // Connect a token to the tokenSale\r\n    // @param _fundingWalletAddress Address which all ether will be forwarded to\r\n    function connectToken(Token _tokenContract)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(totalTokenSold == 0);\r\n        require(tokenContract == address(0));\r\n\r\n        //make sure token is untouched\r\n        require(_tokenContract.balanceOf(address(this)) == _tokenContract.totalSupply());\r\n\r\n        tokenContract = _tokenContract;\r\n\r\n        // sent tokens to company vault\r\n        tokenContract.transfer(fundingWalletAddress, COMPANY_ALLOCATION);\r\n        processEarlyBirds();\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        uint256 cost = buyTokens(msg.sender, msg.value);\r\n\r\n        // forward contribution to the fundingWalletAddress\r\n        fundingWalletAddress.transfer(cost);\r\n    }\r\n\r\n    // execution of the actual token purchase\r\n    function buyTokens(address contributorAddress, uint256 weiAmount)\r\n        onlyDuringSale\r\n        onlyWhitelisted(contributorAddress)\r\n        withinContributionLimits(contributorAddress, weiAmount)\r\n        private\r\n    returns (uint256 costs)\r\n    {\r\n        assert(tokenContract != address(0));\r\n\r\n        uint256 tokensLeft = getTokensLeft();\r\n\r\n        // make sure we still have tokens left for sale\r\n        require(tokensLeft > 0);\r\n\r\n        uint256 tokenAmount = calculateTokenAmount(weiAmount);\r\n        uint256 cost = weiAmount;\r\n        uint256 refund = 0;\r\n\r\n        // we sell till we dont have anything left\r\n        if (tokenAmount > tokensLeft) {\r\n            tokenAmount = tokensLeft;\r\n\r\n            // calculate actual cost for partial amount of tokens.\r\n            cost = tokenAmount / getCurrentTokensPerEther();\r\n\r\n            // calculate refund for contributor.\r\n            refund = weiAmount.sub(cost);\r\n        }\r\n\r\n        // transfer the tokens to the contributor address\r\n        tokenContract.transfer(contributorAddress, tokenAmount);\r\n\r\n        // keep track of the amount bought by the contributor\r\n        contributors[contributorAddress] = contributors[contributorAddress].add(cost);\r\n\r\n\r\n        //if we got a refund process it now\r\n        if (refund > 0) {\r\n            // transfer back everything that exceeded the amount of tokens left\r\n            contributorAddress.transfer(refund);\r\n        }\r\n\r\n        // increase stats\r\n        totalWeiRaised += cost;\r\n        totalTokenSold += tokenAmount;\r\n\r\n        LogTokensPurchased(contributorAddress, cost, tokenAmount, totalTokenSold);\r\n\r\n        // If all tokens available for sale have been sold out, finalize the sale automatically.\r\n        if (tokensLeft.sub(tokenAmount) == 0) {\r\n            finalizeInternal();\r\n        }\r\n\r\n\r\n        //return the actual cost of the sale\r\n        return cost;\r\n    }\r\n\r\n    // ask the connected token how many tokens we have left \r\n    function getTokensLeft()\r\n        public\r\n        view\r\n    returns (uint256 tokensLeft)\r\n    {\r\n        return tokenContract.balanceOf(this);\r\n    }\r\n\r\n    // calculate the current tokens per ether\r\n    function getCurrentTokensPerEther()\r\n        public\r\n        view\r\n    returns (uint256 tokensPerEther)\r\n    {\r\n        uint i;\r\n        uint defaultTokensPerEther = tranches[tranches.length - 1].tokensPerEther;\r\n\r\n        if (currentTime() >= PUBLIC_START_TIME) {\r\n            return defaultTokensPerEther;\r\n        }\r\n\r\n        for (i = 0; i < tranches.length; i++) {\r\n            if (totalTokenSold >= tranches[i].untilToken) {\r\n                continue;\r\n            }\r\n\r\n            //sell until the contract has nor more tokens\r\n            return tranches[i].tokensPerEther;\r\n        }\r\n\r\n        return defaultTokensPerEther;\r\n    }\r\n\r\n    // calculate the token amount for a give weiAmount\r\n    function calculateTokenAmount(uint256 weiAmount)\r\n        public\r\n        view\r\n    returns (uint256 tokens)\r\n    {\r\n        return weiAmount * getCurrentTokensPerEther();\r\n    }\r\n\r\n    //\r\n    // WHITELIST\r\n    //\r\n\r\n    // add a new whitelistOperator\r\n    function addWhitelistOperator(address _address)\r\n        public\r\n        onlyOwner\r\n    {\r\n        whitelistOperators[_address] = true;\r\n    }\r\n\r\n    // remove a whitelistOperator\r\n    function removeWhitelistOperator(address _address)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(whitelistOperators[_address]);\r\n\r\n        delete whitelistOperators[_address];\r\n    }\r\n\r\n\r\n    // Allows whitelistOperators to add an account to the whitelist.\r\n    // Only those accounts will be allowed to contribute during the sale.\r\n    function addToWhitelist(address _address)\r\n        public\r\n        onlyWhitelistOperator\r\n    {\r\n        require(_address != address(0));\r\n\r\n        whitelist[_address] = true;\r\n        LogWhitelistUpdated(_address);\r\n    }\r\n\r\n    // Allows whitelistOperators to remove an account from the whitelist.\r\n    function removeFromWhitelist(address _address)\r\n        public\r\n        onlyWhitelistOperator\r\n    {\r\n        require(_address != address(0));\r\n\r\n        delete whitelist[_address];\r\n    }\r\n\r\n    //returns the current time, needed for tests\r\n    function currentTime()\r\n        public\r\n        view\r\n        returns (uint256 _currentTime)\r\n    {\r\n        return now;\r\n    }\r\n\r\n\r\n    // Allows the owner to finalize the sale.\r\n    function finalize()\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        //allow only after the defined end_time\r\n        require(currentTime() > END_TIME);\r\n\r\n        return finalizeInternal();\r\n    }\r\n\r\n\r\n    // The internal one will be called if tokens are sold out or\r\n    // the end time for the sale is reached, in addition to being called\r\n    // from the public version of finalize().\r\n    function finalizeInternal() private returns (bool) {\r\n        require(!finalized);\r\n\r\n        finalized = true;\r\n\r\n        Finalized();\r\n\r\n        //also finalize the token contract\r\n        tokenContract.finalize();\r\n\r\n        return true;\r\n    }\r\n\r\n    // register an early bird investment\r\n    function addEarlyBird(address _address, uint256 weiAmount)\r\n        onlyOwner\r\n        withinContributionLimits(_address, weiAmount)\r\n        external\r\n    {\r\n        // only allowed as long as we dont have a connected token\r\n        require(tokenContract == address(0));\r\n\r\n        earlyBirds.push(_address);\r\n        earlyBirdInvestments[_address] = weiAmount;\r\n\r\n        // auto whitelist early bird;\r\n        whitelist[_address] = true;\r\n    }\r\n\r\n    // transfer the tokens bought by the early birds before contract creation\r\n    function processEarlyBirds()\r\n        private\r\n    {\r\n        for (uint256 i = 0; i < earlyBirds.length; i++)\r\n        {\r\n            address earlyBirdAddress = earlyBirds[i];\r\n            uint256 weiAmount = earlyBirdInvestments[earlyBirdAddress];\r\n\r\n            buyTokens(earlyBirdAddress, weiAmount);\r\n        }\r\n    }\r\n\r\n\r\n    // allows everyone to burn all unsold tokens in the sale contract after finalized.\r\n    function burnUnsoldTokens()\r\n        external\r\n        onlyAfterFinalized\r\n        returns (bool)\r\n    {\r\n        uint256 leftTokens = getTokensLeft();\r\n\r\n        require(leftTokens > 0);\r\n\r\n        // let'em burn\r\n        require(tokenContract.burn(leftTokens));\r\n\r\n        UnsoldTokensBurnt(leftTokens);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earlyBirds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelistOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"name\":\"untilToken\",\"type\":\"uint256\"},{\"name\":\"tokensPerEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"addEarlyBird\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokensPerEther\",\"outputs\":[{\"name\":\"tokensPerEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelistOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPANY_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyBirdInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"connectToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"tokensLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundingWalletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"LogWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalTokenSold\",\"type\":\"uint256\"}],\"name\":\"LogTokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnsoldTokensBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009df172fc167a8a567c208fc14e3435eb8043e2b7","Library":"","SwarmSource":"bzzr://4b33382d7f9993a7001fcc64f07f7c24c83fed1ec29682b960566af3e16821c1"}]}