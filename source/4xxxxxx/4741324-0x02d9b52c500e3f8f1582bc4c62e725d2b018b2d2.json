{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\ncontract Owned {\r\n\r\n   /** GitHub Repository https://github.com/VoiceOfCoins/VOCTOP25\r\n    */\r\n    \r\n    address internal _owner;\r\n    \r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with owner\r\n     */\r\n    function Owned() public {\r\n        \r\n        _owner = msg.sender;\r\n        \r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        \r\n        return _owner;\r\n        \r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        \r\n        require(msg.sender == _owner);\r\n        _;\r\n        \r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        \r\n        require(_newOwner != address(0));\r\n        _owner = _newOwner;\r\n        \r\n    }\r\n}\r\n\r\n\r\ncontract VOCTOP25 is Owned {\r\n    \r\n    // Internal variables of the token\r\n    string  internal _name;\r\n    string  internal _symbol;\r\n    uint8   internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256)  internal _balanceOf;\r\n    mapping (address => mapping (address => uint256)) internal _allowance;\r\n    mapping (address => bool) internal _frozenAccount;\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // This notifies clients about the amount minted\r\n    event Mint(address indexed _to, uint256 _value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n    // This notifies clients about approval for other address\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    // This notifies clients frozen accounts\r\n    event AccountFrozen(address indexed _account, bool _value);\r\n       \r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function VOCTOP25() public {\r\n        \r\n        //Set decimals\r\n        _decimals = 18;\r\n        \r\n        // Update total supply with the decimal amount\r\n        _totalSupply = 0 * 10 ** uint256(_decimals);\r\n        \r\n        // Give the creator all initial tokens\r\n        _balanceOf[msg.sender] = _totalSupply;\r\n        \r\n        // Set the name for display purposes\r\n        _name = \"Voice Of Coins TOP 25 Index Fund\";   \r\n        \r\n        // Set the symbol for display purposes\r\n        _symbol = \"VOC25\";   \r\n        \r\n    }\r\n      \r\n    /**\r\n     * Returns token's name\r\n     *\r\n     */\r\n    function name() public view returns (string) {\r\n        \r\n        return _name;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns token's symbol\r\n     *\r\n     */\r\n    function symbol() public view returns (string) {\r\n        \r\n        return _symbol;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns token's decimals\r\n     *\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        \r\n        return _decimals;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns token's total supply\r\n     *\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        \r\n        return _totalSupply;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns balance of the give address\r\n     * @param _tokenHolder Tokens holder address\r\n     */\r\n    function balanceOf(address _tokenHolder) public view returns (uint256) {\r\n        \r\n        return _balanceOf[_tokenHolder];\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        //Do actual transfer\r\n        bool transferResult = _transfer(msg.sender, _to, _value);  \r\n\r\n        return transferResult;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        // Check allowance if transfer not from own\r\n        if (msg.sender != _from) {\r\n            require(_allowance[_from][msg.sender] >= _value);     \r\n            _allowance[_from][msg.sender] -= _value;\r\n        }\r\n        \r\n        // Do actual transfer\r\n        bool transferResult = _transfer(_from, _to, _value); \r\n\r\n        return transferResult;\r\n    }\r\n    \r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *  \r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        //set value \r\n        _allowance[msg.sender][_spender] = _value;\r\n\r\n        //Notify Listeners\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns allowance for the given owner and spender\r\n     * @param _tokenOwner Tokens owner address\r\n     * @param _spender Spender address\r\n     */\r\n    function allowance(address _tokenOwner, address _spender) public view returns (uint256) {\r\n        \r\n        return _allowance[_tokenOwner][_spender];\r\n        \r\n    }\r\n    \r\n    /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n      \r\n        //check overflow\r\n        require(_allowance[msg.sender][_spender] + _addedValue >= _allowance[msg.sender][_spender]);\r\n\r\n        //upate value\r\n        _allowance[msg.sender][_spender] += _addedValue;\r\n\r\n        //Notify Listeners\r\n        Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    \r\n        //check if subtractedValue greater than available, if so set to zero\r\n        //otherwise decrease by subtractedValue\r\n        if (_subtractedValue > _allowance[msg.sender][_spender]) {\r\n\r\n            _allowance[msg.sender][_spender] = 0;\r\n\r\n        } else {\r\n\r\n            _allowance[msg.sender][_spender] -= _subtractedValue;\r\n\r\n        }\r\n\r\n        //Notify Listeners\r\n        Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @notice Destroy tokens from owener account, can be run only by owner\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        \r\n        //Check if FrozenFunds\r\n        require(!_frozenAccount[_owner]);\r\n        \r\n        // Check if the targeted balance is enough\r\n        require(_balanceOf[_owner] >= _value);\r\n        \r\n        // Subtract from the targeted balance and total supply\r\n        _balanceOf[_owner] -= _value;\r\n        _totalSupply -= _value;\r\n        \r\n        //Notify Listeners\r\n        Burn(_owner, _value);\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @notice Destroy tokens from other account, can be run only by owner\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\r\n        \r\n        // Save frozen state\r\n        bool bAccountFrozen = frozenAccount(_from);\r\n        \r\n        //Unfreeze account if was frozen\r\n        if (bAccountFrozen) {\r\n            //Allow transfers\r\n            freezeAccount(_from, false);\r\n        }\r\n        \r\n        // Transfer to owners account\r\n        _transfer(_from, _owner, _value);\r\n        \r\n        //Freeze again if was frozen before\r\n        if (bAccountFrozen) {\r\n            freezeAccount(_from, bAccountFrozen);\r\n        }\r\n        \r\n        // Burn from owners account\r\n        burn(_value);\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    /**\r\n    * @notice Create `mintedAmount` tokens and send it to `owner`, can be run only by owner\r\n    * @param _mintedAmount the amount of tokens it will receive\r\n    */\r\n    function mintToken(uint256 _mintedAmount) public onlyOwner {\r\n        \r\n        //Check if FrozenFunds\r\n        require(!_frozenAccount[_owner]);\r\n        \r\n        // Check for overflows\r\n        require(_balanceOf[_owner] + _mintedAmount >= _balanceOf[_owner]);\r\n        \r\n        // Check for overflows\r\n        require(_totalSupply + _mintedAmount >= _totalSupply);\r\n        \r\n        _balanceOf[_owner] += _mintedAmount;\r\n        _totalSupply += _mintedAmount;\r\n        \r\n        // Notify Listeners\r\n        Mint(_owner, _mintedAmount);\r\n        // Notify Listeners\r\n        Transfer(0, _owner, _mintedAmount);\r\n        \r\n    }\r\n    \r\n    /**\r\n    * @notice Freeze or unfreeze account, can be run only by owner\r\n    * @param _target Account\r\n    * @param _freeze True to freeze, False to unfreeze\r\n    */\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner returns (bool) {\r\n        \r\n        //set freeze value \r\n        _frozenAccount[_target] = _freeze;\r\n        \r\n        \r\n        //Notify Listeners\r\n        AccountFrozen(_target, _freeze);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Check if the address is frozen\r\n     * @param _account Address to be checked\r\n     */\r\n    function frozenAccount(address _account) public view returns (bool) {\r\n        \r\n        return _frozenAccount[_account];\r\n        \r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        \r\n        //Check if FrozenFunds\r\n        require(!_frozenAccount[_from]);\r\n        require(!_frozenAccount[_to]);\r\n        \r\n        // Check if the sender has enough\r\n        require(_balanceOf[_from] >= _value);\r\n        \r\n        // Check for overflows\r\n        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\r\n        \r\n        // Subtract from the sender\r\n        _balanceOf[_from] -= _value;\r\n        \r\n        // Add the same to the recipient\r\n        _balanceOf[_to] += _value;\r\n            \r\n        //Notify Listeners\r\n        Transfer(_from, _to, _value);    \r\n\r\n        return true;\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"AccountFrozen\",\"type\":\"event\"}]","ContractName":"VOCTOP25","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e45f8ee4ecdc067ecfba3bfea9640c5c7d8561cc7f019163d30feb21499a3b8f"}]}