{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// ERC20 token interface\r\n\r\ncontract InRiddimCrowdsale {\r\n\r\n    // InRiddim Crowdsale\r\n\r\n    function InRiddimCrowdsale(address _tokenManager, address _escrow) public {\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n        balanceOf[escrow] += 49000000000000000000000000; // Initialize Supply 49000000\r\n        totalSupply += 49000000000000000000000000;\r\n    }\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n\r\n    string public name = \"InRiddim\";\r\n    string public  symbol = \"IRDM\";\r\n    uint   public decimals = 18;\r\n\r\n    uint public constant PRICE = 400; // 400 IRDM per ETH\r\n    \r\n    //  price\r\n    // Cap is 127500 ETH\r\n    // 1 ETH = 400 IRDM tokens\r\n\r\n    uint public constant TOKEN_SUPPLY_LIMIT = PRICE * 250000 * (1 ether / 1 wei);\r\n    // CAP 100000000\r\n    \r\n    /*/\r\n     *  Token State\r\n    /*/\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager;\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn tokens.\r\n    address public crowdsaleManager;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public isSaler;\r\n\r\n    modifier onlyTokenManager() { \r\n        require(msg.sender == tokenManager); \r\n        _; \r\n    }\r\n    modifier onlyCrowdsaleManager() {\r\n        require(msg.sender == crowdsaleManager); \r\n        _; \r\n    }\r\n\r\n    modifier onlyEscrow() {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    /*/\r\n     *  Contract Events\r\n    /*/\r\n\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(_value > 0);\r\n        require(balanceOf[_from] > _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        require(balanceOf[msg.sender] - _value < balanceOf[msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n   // Transfer the balance from owner's account to another account\r\n    // only escrow can send token (to send token private sale)\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyEscrow\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n\r\n    function() payable public {\r\n        buy(msg.sender);\r\n    }\r\n    \r\n    function buy(address _buyer) payable public {\r\n        // Available only if presale is running.\r\n        require(currentPhase == Phase.Running);\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * PRICE;\r\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\r\n        balanceOf[_buyer] += newTokens;\r\n        totalSupply += newTokens;\r\n        LogBuy(_buyer, newTokens);\r\n    }\r\n    \r\n    function buyTokens(address _saler) payable public {\r\n        // Available only if presale is running.\r\n        require(isSaler[_saler] == true);\r\n        require(currentPhase == Phase.Running);\r\n\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * PRICE;\r\n        uint tokenForSaler = newTokens / 20;\r\n        \r\n        require(totalSupply + newTokens + tokenForSaler <= TOKEN_SUPPLY_LIMIT);\r\n        \r\n        balanceOf[_saler] += tokenForSaler;\r\n        balanceOf[msg.sender] += newTokens;\r\n\r\n        totalSupply += newTokens;\r\n        totalSupply += tokenForSaler;\r\n        \r\n        LogBuy(msg.sender, newTokens);\r\n    }\r\n\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public\r\n        onlyCrowdsaleManager\r\n    {\r\n        // Available only during migration phase\r\n        require(currentPhase == Phase.Migrating);\r\n\r\n        uint tokens = balanceOf[_owner];\r\n        require(tokens != 0);\r\n        balanceOf[_owner] = 0;\r\n        totalSupply -= tokens;\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if (totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n    }\r\n\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n    function setPresalePhase(Phase _nextPhase) public\r\n        onlyTokenManager\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        require(canSwitchPhase);\r\n        currentPhase = _nextPhase;\r\n        LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n\r\n    function withdrawEther() public\r\n        onlyTokenManager\r\n    {\r\n        require(escrow != 0x0);\r\n        // Available at any phase.\r\n        if (this.balance > 0) {\r\n            escrow.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n\r\n    function setCrowdsaleManager(address _mgr) public\r\n        onlyTokenManager\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentPhase != Phase.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    function addSaler(address _mgr) public\r\n        onlyTokenManager\r\n    {\r\n        require(currentPhase != Phase.Migrating);\r\n        isSaler[_mgr] = true;\r\n    }\r\n\r\n    function removeSaler(address _mgr) public\r\n        onlyTokenManager\r\n    {\r\n        require(currentPhase != Phase.Migrating);\r\n        isSaler[_mgr] = false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSaler\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"addSaler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saler\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"removeSaler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"LogPhaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"InRiddimCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000096c59d1e5bdf485aa081d5bc19f4b1ca2117c20b00000000000000000000000096c59d1e5bdf485aa081d5bc19f4b1ca2117c20b","Library":"","SwarmSource":"bzzr://5499914335e5cdaa762e310593cd0fa74e36bfb897719971159b66925942a792"}]}