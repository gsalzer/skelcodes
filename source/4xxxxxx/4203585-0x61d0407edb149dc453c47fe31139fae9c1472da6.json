{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.15;\r\n\r\n/**\r\n*library name : SafeMath\r\n*purpose : be the library for the smart contract for the swap between the godz and ether\r\n*goal : to achieve the secure basic math operations\r\n*/\r\nlibrary SafeMath {\r\n\r\n  /*function name : mul*/\r\n  /*purpose : be the funcion for safe multiplicate*/\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    /*assert(a == 0 || c / a == b);*/\r\n    return c;\r\n  }\r\n\r\n  /*function name : div*/\r\n  /*purpose : be the funcion for safe division*/\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /*function name : sub*/\r\n  /*purpose : be the funcion for safe substract*/\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    /*assert(b <= a);*/\r\n    return a - b;\r\n  }\r\n\r\n  /*function name : add*/\r\n  /*purpose : be the funcion for safe sum*/\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    /*assert(c >= a);*/\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n*contract name : tokenRecipient\r\n*/\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n/**\r\n*contract name : Token\r\n*/\r\ncontract Token {\r\n    /*using the secure math library for basic math operations*/\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables of the token */\r\n    string public standard = 'DSCS.GODZ.TOKEN';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) {\r\n        balanceOf[msg.sender] = initialSupply;                  /* Give the creator all initial tokens*/\r\n        totalSupply = initialSupply;                            /* Update total supply*/\r\n        name = tokenName;                                       /* Set the name for display purposes*/\r\n        symbol = tokenSymbol;                                   /* Set the symbol for display purposes*/\r\n        decimals = decimalUnits;                                /* Amount of decimals for display purposes*/\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if (_to == 0x0) revert();                               /* Prevent transfer to 0x0 address. Use burn() instead*/\r\n        if (balanceOf[msg.sender] < _value) revert();           /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); /* Check for overflows*/\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        /* Subtract from the sender*/\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                               /* Add the same to the recipient*/\r\n        Transfer(msg.sender, _to, _value);                      /* Notify anyone listening that this transfer took place*/\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins but transfer from the origin*/\r\n    function transferFromOrigin(address _to, uint256 _value)  returns (bool success) {\r\n        address origin = tx.origin;\r\n        if (origin == 0x0) revert();\r\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\r\n        if (balanceOf[origin] < _value) revert();                /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\r\n        balanceOf[origin] = balanceOf[origin].sub(_value);       /* Subtract from the sender*/\r\n        balanceOf[_to] = balanceOf[_to].add(_value);             /* Add the same to the recipient*/\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();                                /* Prevent transfer to 0x0 address.*/\r\n        if (balanceOf[_from] < _value) revert();                 /* Check if the sender has enough*/\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  /* Check for overflows*/\r\n        if (_value > allowance[_from][msg.sender]) revert();     /* Check allowance*/\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                              /* Subtract from the sender*/\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                                /* Add the same to the recipient*/\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromOrigin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000f8277896582678ac0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a474f445a494c4c494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004474f445a00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ceb4051e4d94c689094b1e58409625352a7595ab653cff1262c41ea5547fb2ed"}]}