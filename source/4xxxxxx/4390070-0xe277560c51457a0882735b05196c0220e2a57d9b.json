{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title NonZero\r\n */\r\ncontract NonZero {\r\n\r\n// Functions with this modifier fail if he \r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAmount(uint _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroValue() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract TripCoin is ERC20, Ownable, NonZero {\r\n\r\n    using SafeMath for uint;\r\n\r\n/////////////////////// TOKEN INFORMATION ///////////////////////\r\n    string public constant name = \"TripCoin\";\r\n    string public constant symbol = \"TRIP\";\r\n\r\n    uint8 public decimals = 3;\r\n    \r\n    // Mapping to keep user's balances\r\n    mapping (address => uint256) balances;\r\n    // Mapping to keep user's allowances\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n/////////////////////// VARIABLE INITIALIZATION ///////////////////////\r\n    \r\n    // Allocation for the TripCoin Team\r\n    uint256 public TripCoinTeamSupply;\r\n    // Reserve supply\r\n    uint256 public ReserveSupply;\r\n    // Amount of TripCoin for the presale\r\n    uint256 public presaleSupply;\r\n\r\n    uint256 public icoSupply;\r\n    // Community incentivisation supply\r\n    uint256 public incentivisingEffortsSupply;\r\n    // Crowdsale End Timestamp\r\n    uint256 public presaleStartsAt;\r\n    uint256 public presaleEndsAt;\r\n    uint256 public icoStartsAt;\r\n    uint256 public icoEndsAt;\r\n   \r\n    // TripCoin team address\r\n    address public TripCoinTeamAddress;\r\n    // Reserve address\r\n    address public ReserveAddress;\r\n    // Community incentivisation address\r\n    address public incentivisingEffortsAddress;\r\n\r\n    // Flag keeping track of presale status. Ensures functions can only be called once\r\n    bool public presaleFinalized = false;\r\n    // Flag keeping track of crowdsale status. Ensures functions can only be called once\r\n    bool public icoFinalized = false;\r\n    // Amount of wei currently raised\r\n    uint256 public weiRaised = 0;\r\n\r\n/////////////////////// EVENTS ///////////////////////\r\n\r\n    // Event called when crowdfund is done\r\n    event icoFinalized(uint tokensRemaining);\r\n    // Event called when presale is done\r\n    event PresaleFinalized(uint tokensRemaining);\r\n    // Emitted upon crowdfund being finalized\r\n    event AmountRaised(address beneficiary, uint amountRaised);\r\n    // Emmitted upon purchasing tokens\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n/////////////////////// MODIFIERS ///////////////////////\r\n\r\n \r\n\r\n    // Ensure only crowdfund can call the function\r\n    modifier onlypresale() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyico() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n/////////////////////// ERC20 FUNCTIONS ///////////////////////\r\n\r\n    // Transfer\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _amount);\r\n        addToBalance(_to, _amount);\r\n        decrementBalance(msg.sender, _amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Transfer from one address to another (need allowance to be called first)\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        require(allowance(_from, msg.sender) >= _amount);\r\n        decrementBalance(_from, _amount);\r\n        addToBalance(_to, _amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Approve another address a certain amount of TripCoin\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Get an address's TripCoin allowance\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Get the TripCoin balance of any address\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n/////////////////////// TOKEN FUNCTIONS ///////////////////////\r\n\r\n    // Constructor\r\n    function TripCoin() {\r\n        presaleStartsAt = 1509271200;                                          //Oct 29 2017,10 AM GMT\r\n        presaleEndsAt = 1509875999;                                          //Nov 05 2017,9:59:59 AM GMT\r\n        icoStartsAt = 1509876000;                                             //Nov 05 2017,10 AM GMT\r\n        icoEndsAt = 1511863200;                                               //Nov 28 2017,10 AM GMT\r\n           \r\n\r\n        totalSupply = 200000000000;                                                   // 100% - 200m\r\n        TripCoinTeamSupply = 20000000000;                                              // 10%\r\n        ReserveSupply = 60000000000;                                                // 30% \r\n        incentivisingEffortsSupply = 20000000000;                                    // 10% \r\n        presaleSupply = 60000000000;                                                // 30%\r\n        icoSupply = 40000000000;                                                    // 20%\r\n       \r\n       \r\n        TripCoinTeamAddress = 0xD7741E3819434a91F25b8C8e30Ba124D1EDe6B03;             // TripCoin Team Address\r\n        ReserveAddress = 0x51Ff33A5C5350E62F9a974108e4B93EDC5C26359;               // Reserve Address\r\n        incentivisingEffortsAddress = 0x4B8849c93b90Fe2446D8fc27FEc25Dc3386b1e75;   // Community incentivisation address\r\n\r\n        addToBalance(incentivisingEffortsAddress, incentivisingEffortsSupply);     \r\n        addToBalance(ReserveAddress, ReserveSupply); \r\n        addToBalance(owner, presaleSupply.add(icoSupply)); \r\n        \r\n        addToBalance(TripCoinTeamAddress, TripCoinTeamSupply); \r\n    }\r\n\r\n  \r\n\r\n    // Function for the presale to transfer tokens\r\n    function transferFromPresale(address _to, uint256 _amount) onlyOwner nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\r\n        require(balanceOf(owner) >= _amount);\r\n        decrementBalance(owner, _amount);\r\n        addToBalance(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n      // Function for the ico to transfer tokens\r\n    function transferFromIco(address _to, uint256 _amount) onlyOwner nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\r\n        require(balanceOf(owner) >= _amount);\r\n        decrementBalance(owner, _amount);\r\n        addToBalance(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n    function getRate() public constant returns (uint price) {\r\n        if (now > presaleStartsAt && now < presaleEndsAt ) {\r\n           return 1500; \r\n        } else if (now > icoStartsAt && now < icoEndsAt) {\r\n           return 1000; \r\n        } \r\n    }       \r\n    \r\n     function buyTokens(address _to) nonZeroAddress(_to) nonZeroValue payable {\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount * getRate();\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        \r\n        owner.transfer(msg.value);\r\n        TokenPurchase(_to, weiAmount, tokens);\r\n    }\r\n    \r\n     function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n   \r\n\r\n    \r\n\r\n    // Add to balance\r\n    function addToBalance(address _address, uint _amount) internal {\r\n    \tbalances[_address] = balances[_address].add(_amount);\r\n    }\r\n\r\n    // Remove from balance\r\n    function decrementBalance(address _address, uint _amount) internal {\r\n    \tbalances[_address] = balances[_address].sub(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TripCoinTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromIco\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingEffortsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TripCoinTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromPresale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisingEffortsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"icoFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensRemaining\",\"type\":\"uint256\"}],\"name\":\"PresaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"AmountRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TripCoin","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ea2595babf2d0c5a2d9ca981ba13249c5997b755ab35570b26c0283675c0fc5"}]}