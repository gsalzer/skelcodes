{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20 {\r\n      function totalSupply() constant returns (uint totalSupply);\r\n      function balanceOf(address _owner) constant returns (uint balance);\r\n      function transfer(address _to, uint _value) returns (bool success);\r\n      function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n      function approve(address _spender, uint _value) returns (bool success);\r\n      function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n }\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string name) { name; }\r\n    function symbol() public constant returns (string symbol) { symbol; }\r\n    function decimals() public constant returns (uint8 decimals) { decimals; }\r\n    function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; }\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n/*\r\n    EIP228 Token Changer interface\r\n*/\r\ncontract ITokenChanger {\r\n    function changeableTokenCount() public constant returns (uint16 count);\r\n    function changeableToken(uint16 _tokenIndex) public constant returns (address tokenAddress);\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public constant returns (uint256 amount);\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 amount);\r\n}\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public constant returns (address owner) { owner; }\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is ITokenHolder, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n\r\n\r\n/*\r\n    Bancor Changer interface\r\n*/\r\ncontract IBancorChanger is ITokenChanger {\r\n    function token() public constant returns (ISmartToken _token) { _token; }\r\n    function getReserveBalance(IERC20Token _reserveToken) public constant returns (uint256 balance);\r\n}\r\n\r\n/*\r\n    Ether Token interface\r\n*/\r\ncontract IEtherToken is ITokenHolder, IERC20Token {\r\n    function deposit() public payable;\r\n    function withdraw(uint256 _amount) public;\r\n}\r\n\r\n\r\ncontract MarginBanc {\r\n    \r\n    address public owner;\r\n    \r\n    IBancorChanger public tokenChanger; // bancor ETH <-> smart token changer\r\n    IEtherToken public etherToken;      // ether token\r\n    ERC20  public  bnt;\r\n    ISmartToken public smartToken;\r\n    \r\n    struct position {\r\n        uint openTime;\r\n        uint closeTime;\r\n        \r\n        \r\n        uint256 amountETH;\r\n        uint256 amountBNT;\r\n    }\r\n    \r\n    mapping (address => uint256) public positions;\r\n    \r\n    event LongClosed(address indexed by, uint256 amount);\r\n    \r\n    function MarginBanc() {\r\n        owner = msg.sender;\r\n        \r\n        tokenChanger = IBancorChanger(0xCA83bD8c4C7B1c0409B25FbD7e70B1ef57629fF4);\r\n        etherToken =  IEtherToken(0xD76b5c2A23ef78368d8E34288B5b65D616B746aE);\r\n        bnt = ERC20(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\r\n        smartToken = tokenChanger.token();\r\n        \r\n    }\r\n    \r\n\r\n    \r\n    /**\r\n     * Deposit ETH. Will buy bancor at 2x\r\n     **/\r\n    function long() payable returns (uint256 amount) {\r\n        \r\n        etherToken.deposit.value(msg.value)(); // deposit ETH in the reserve\r\n        assert(etherToken.approve(tokenChanger, 0)); // need to reset the allowance to 0 before setting a new one\r\n        assert(etherToken.approve(tokenChanger, msg.value)); // approve the changer to use the ETH amount for the purchase\r\n\r\n        ISmartToken smartToken = tokenChanger.token();\r\n        uint256 returnAmount = tokenChanger.change(etherToken, smartToken, msg.value, 1); // do the actual change using the current price\r\n        assert(smartToken.transfer(msg.sender, returnAmount)); // transfer the tokens to the sender\r\n        return returnAmount;\r\n    \r\n    }\r\n    \r\n    \r\n    function release() {\r\n        if(owner != msg.sender) {\r\n          revert();\r\n        }\r\n        selfdestruct(owner);\r\n  \r\n    }\r\n    \r\n    \r\n    function getBuyReturn(uint256 _amount) public constant returns (uint256 amount) {\r\n        return tokenChanger.getReturn(etherToken, smartToken, _amount); \r\n    }\r\n    \r\n    function getSellReturn(uint256 _amount) public constant returns (uint256 amount) {\r\n        return tokenChanger.getReturn(smartToken, etherToken, _amount); \r\n    }\r\n    \r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public constant returns (uint256 amount) {\r\n        return tokenChanger.getReturn(_fromToken, _toToken, _amount); \r\n    }\r\n    \r\n    /**\r\n     * Close a long position, this will:\r\n     * - sell the bancor for ETH\r\n     * - deduct interest, this will go to the house\r\n     * metamask 3.8.6\r\n     */\r\n     \r\n     function closeLong() returns (uint256) {\r\n         \r\n        //uint256 bal = getBNTBalance(msg.sender);\r\n        \r\n        //assert(bnt.approve(tokenChanger, 0)); // need to reset the allowance to 0 before setting a new one\r\n        //assert(bnt.approve(tokenChanger, bal)); // approve the changer to use the ETH amount for the purchase\r\n        \r\n       // ISmartToken smartToken = tokenChanger.token();\r\n         return tokenChanger.change(smartToken, etherToken, getBNTBalance(msg.sender), 1); // do the actual change using the current price\r\n        \r\n        // return returnAmount;\r\n         //LongClosed(msg.sender, returnAmount);\r\n        // \r\n         \r\n         //return returnAmount;\r\n         \r\n     }\r\n     \r\n     function moo() {\r\n         \r\n         tokenChanger.change(smartToken, etherToken, 877843110001289470, 1);\r\n         \r\n         \r\n     }\r\n     \r\n     function getReturn() constant returns (uint256) {\r\n         \r\n       // ISmartToken smartToken = tokenChanger.token();\r\n        return tokenChanger.getReturn(smartToken, etherToken, getBNTBalance(msg.sender));\r\n        \r\n     }\r\n     \r\n     function withdraw(uint256 returnAmount) {\r\n         etherToken.withdraw(returnAmount);\r\n     }\r\n     \r\n    \r\n     function getETHBalance(address a) constant returns (uint256 amount) {\r\n         return etherToken.balanceOf(a);\r\n     }\r\n     \r\n     \r\n     function getBNTBalance(address a) constant returns (uint256 amount) {\r\n         return bnt.balanceOf(a);\r\n     }\r\n     \r\n     /**\r\n      * Anybody can call margin call. by doing  \r\n      **/\r\n     function marginCall() {\r\n         \r\n     }\r\n     \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"long\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBuyReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeLong\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenChanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getETHBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bnt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getBNTBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"marginCall\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongClosed\",\"type\":\"event\"}]","ContractName":"MarginBanc","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f8fee0e6c5a45b219108ac01c233ae70daf4b001e1fac847fbeb98e2112c4349"}]}