{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Ballot {\r\n    using SafeMath for uint256;\r\n    EthearnalRepToken public tokenContract;\r\n\r\n    // Date when vote has started\r\n    uint256 public ballotStarted;\r\n\r\n    // Registry of votes\r\n    mapping(address => bool) public votesByAddress;\r\n\r\n    // Sum of weights of YES votes\r\n    uint256 public yesVoteSum = 0;\r\n\r\n    // Sum of weights of NO votes\r\n    uint256 public noVoteSum = 0;\r\n\r\n    // Length of `voters`\r\n    uint256 public votersLength = 0;\r\n\r\n    uint256 public initialQuorumPercent = 51;\r\n\r\n    VotingProxy public proxyVotingContract;\r\n\r\n    // Tells if voting process is active\r\n    bool public isVotingActive = false;\r\n\r\n    event FinishBallot(uint256 _time);\r\n    event Vote(address indexed sender, bytes vote);\r\n    \r\n    modifier onlyWhenBallotStarted {\r\n        require(ballotStarted != 0);\r\n        _;\r\n    }\r\n\r\n    function Ballot(address _tokenContract) {\r\n        tokenContract = EthearnalRepToken(_tokenContract);\r\n        proxyVotingContract = VotingProxy(msg.sender);\r\n        ballotStarted = getTime();\r\n        isVotingActive = true;\r\n    }\r\n    \r\n    function getQuorumPercent() public constant returns (uint256) {\r\n        require(isVotingActive);\r\n        // find number of full weeks alapsed since voting started\r\n        uint256 weeksNumber = getTime().sub(ballotStarted).div(1 weeks);\r\n        if(weeksNumber == 0) {\r\n            return initialQuorumPercent;\r\n        }\r\n        if (initialQuorumPercent < weeksNumber * 10) {\r\n            return 0;\r\n        } else {\r\n            return initialQuorumPercent.sub(weeksNumber * 10);\r\n        }\r\n    }\r\n\r\n    function vote(bytes _vote) public onlyWhenBallotStarted {\r\n        require(_vote.length > 0);\r\n        if (isDataYes(_vote)) {\r\n            processVote(true);\r\n        } else if (isDataNo(_vote)) {\r\n            processVote(false);\r\n        }\r\n        Vote(msg.sender, _vote);\r\n    }\r\n\r\n    function isDataYes(bytes data) public constant returns (bool) {\r\n        // compare data with \"YES\" string\r\n        return (\r\n            data.length == 3 &&\r\n            (data[0] == 0x59 || data[0] == 0x79) &&\r\n            (data[1] == 0x45 || data[1] == 0x65) &&\r\n            (data[2] == 0x53 || data[2] == 0x73)\r\n        );\r\n    }\r\n\r\n    // TESTED\r\n    function isDataNo(bytes data) public constant returns (bool) {\r\n        // compare data with \"NO\" string\r\n        return (\r\n            data.length == 2 &&\r\n            (data[0] == 0x4e || data[0] == 0x6e) &&\r\n            (data[1] == 0x4f || data[1] == 0x6f)\r\n        );\r\n    }\r\n    \r\n    function processVote(bool isYes) internal {\r\n        require(isVotingActive);\r\n        require(!votesByAddress[msg.sender]);\r\n        votersLength = votersLength.add(1);\r\n        uint256 voteWeight = tokenContract.balanceOf(msg.sender);\r\n        if (isYes) {\r\n            yesVoteSum = yesVoteSum.add(voteWeight);\r\n        } else {\r\n            noVoteSum = noVoteSum.add(voteWeight);\r\n        }\r\n        require(getTime().sub(tokenContract.lastMovement(msg.sender)) > 7 days);\r\n        uint256 quorumPercent = getQuorumPercent();\r\n        if (quorumPercent == 0) {\r\n            isVotingActive = false;\r\n        } else {\r\n            decide();\r\n        }\r\n        votesByAddress[msg.sender] = true;\r\n    }\r\n\r\n    function decide() internal {\r\n        uint256 quorumPercent = getQuorumPercent();\r\n        uint256 quorum = quorumPercent.mul(tokenContract.totalSupply()).div(100);\r\n        uint256 soFarVoted = yesVoteSum.add(noVoteSum);\r\n        if (soFarVoted >= quorum) {\r\n            uint256 percentYes = (100 * yesVoteSum).div(soFarVoted);\r\n            if (percentYes >= initialQuorumPercent) {\r\n                // does not matter if it would be greater than weiRaised\r\n                proxyVotingContract.proxyIncreaseWithdrawalChunk();\r\n                FinishBallot(now);\r\n                isVotingActive = false;\r\n            } else {\r\n                // do nothing, just deactivate voting\r\n                isVotingActive = false;\r\n                FinishBallot(now);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n    \r\n}\r\n\r\ncontract LockableToken is StandardToken, Ownable {\r\n    bool public isLocked = true;\r\n    mapping (address => uint256) public lastMovement;\r\n    event Burn(address _owner, uint256 _amount);\r\n\r\n\r\n    function unlock() public onlyOwner {\r\n        isLocked = false;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(!isLocked);\r\n        lastMovement[msg.sender] = getTime();\r\n        lastMovement[_to] = getTime();\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(!isLocked);\r\n        lastMovement[_from] = getTime();\r\n        lastMovement[_to] = getTime();\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(!isLocked);\r\n        super.approve(_spender, _value);\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public  returns (bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n    \r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n    }\r\n\r\n}\r\n\r\ncontract EthearnalRepToken is MintableToken, LockableToken {\r\n    string public constant name = 'Ethearnal Rep Token';\r\n    string public constant symbol = 'ERT';\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract MultiOwnable {\r\n    mapping (address => bool) public ownerRegistry;\r\n    address[] owners;\r\n    address public multiOwnableCreator = 0x0;\r\n\r\n    function MultiOwnable() public {\r\n        multiOwnableCreator = msg.sender;\r\n    }\r\n\r\n    function setupOwners(address[] _owners) public {\r\n        // Owners are allowed to be set up only one time\r\n        require(multiOwnableCreator == msg.sender);\r\n        require(owners.length == 0);\r\n        for(uint256 idx=0; idx < _owners.length; idx++) {\r\n            require(\r\n                !ownerRegistry[_owners[idx]] &&\r\n                _owners[idx] != 0x0 &&\r\n                _owners[idx] != address(this)\r\n            );\r\n            ownerRegistry[_owners[idx]] = true;\r\n        }\r\n        owners = _owners;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(ownerRegistry[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function getOwners() public constant returns (address[]) {\r\n        return owners;\r\n    }\r\n}\r\n\r\ncontract EthearnalRepTokenCrowdsale is MultiOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    /* *********************\r\n     * Variables & Constants\r\n     */\r\n\r\n    // Token Contract\r\n    EthearnalRepToken public token;\r\n\r\n    // Ethereum rate, how much USD does 1 ether cost\r\n    // The actual value is set by setEtherRateUsd\r\n    uint256 etherRateUsd = 1000;\r\n\r\n    // Token price in Usd, 1 token is 1.0 USD, 3 decimals. So, 1000 = $1.000\r\n    uint256 public tokenRateUsd = 1000;\r\n\r\n    // Mainsale Start Date February 28, 2018 3:00:00 PM\r\n    uint256 public constant saleStartDate = 1519830000;\r\n\r\n    // Mainsale End Date March 31, 2018 11:59:59 PM GMT\r\n    uint256 public constant saleEndDate = 1522540799;\r\n\r\n    // How many tokens generate for the team, ratio with 3 decimals digits\r\n    uint256 public constant teamTokenRatio = uint256(1 * 1000) / 3;\r\n\r\n    // Crowdsale State\r\n    enum State {\r\n        BeforeMainSale, // pre-sale finisehd, before main sale\r\n        MainSale, // main sale is active\r\n        MainSaleDone, // main sale done, ICO is not finalized\r\n        Finalized // the final state till the end of the world\r\n    }\r\n\r\n    // Hard cap for total sale\r\n    uint256 public saleCapUsd = 30 * (10**6);\r\n\r\n    // Money raised totally\r\n    uint256 public weiRaised = 0;\r\n\r\n    // This event means everything is finished and tokens\r\n    // are allowed to be used by their owners\r\n    bool public isFinalized = false;\r\n\r\n    // Wallet to send team tokens\r\n    address public teamTokenWallet = 0x0;\r\n\r\n    // money received from each customer\r\n    mapping(address => uint256) public raisedByAddress;\r\n\r\n    // whitelisted investors\r\n    mapping(address => bool) public whitelist;\r\n    // how many whitelisted investors\r\n    uint256 public whitelistedInvestorCounter;\r\n\r\n\r\n    // Extra money each address can spend each hour\r\n    uint256 hourLimitByAddressUsd = 1000;\r\n\r\n    // Wallet to store all raised money\r\n    Treasury public treasuryContract = Treasury(0x0);\r\n\r\n    /* *******\r\n     * Events\r\n     */\r\n    \r\n    event ChangeReturn(address indexed recipient, uint256 amount);\r\n    event TokenPurchase(address indexed buyer, uint256 weiAmount, uint256 tokenAmount);\r\n    /* **************\r\n     * Public methods\r\n     */\r\n\r\n    function EthearnalRepTokenCrowdsale(\r\n        address[] _owners,\r\n        address _treasuryContract,\r\n        address _teamTokenWallet\r\n    ) {\r\n        require(_owners.length > 1);\r\n        require(_treasuryContract != address(0));\r\n        require(_teamTokenWallet != address(0));\r\n        require(Treasury(_treasuryContract).votingProxyContract() != address(0));\r\n        require(Treasury(_treasuryContract).tokenContract() != address(0));\r\n        treasuryContract = Treasury(_treasuryContract);\r\n        teamTokenWallet = _teamTokenWallet;\r\n        setupOwners(_owners);\r\n    }\r\n\r\n    function() public payable {\r\n        if (whitelist[msg.sender]) {\r\n            buyForWhitelisted();\r\n        } else {\r\n            buyTokens();\r\n        }\r\n    }\r\n\r\n    function setTokenContract(address _token) public onlyOwner {\r\n        require(_token != address(0) && token == address(0));\r\n        require(EthearnalRepToken(_token).owner() == address(this));\r\n        require(EthearnalRepToken(_token).totalSupply() == 0);\r\n        require(EthearnalRepToken(_token).isLocked());\r\n        require(!EthearnalRepToken(_token).mintingFinished());\r\n        token = EthearnalRepToken(_token);\r\n    }\r\n\r\n    function buyForWhitelisted() public payable {\r\n        require(token != address(0));\r\n        address whitelistedInvestor = msg.sender;\r\n        require(whitelist[whitelistedInvestor]);\r\n        uint256 weiToBuy = msg.value;\r\n        require(weiToBuy > 0);\r\n        uint256 tokenAmount = getTokenAmountForEther(weiToBuy);\r\n        require(tokenAmount > 0);\r\n        weiRaised = weiRaised.add(weiToBuy);\r\n        raisedByAddress[whitelistedInvestor] = raisedByAddress[whitelistedInvestor].add(weiToBuy);\r\n        forwardFunds(weiToBuy);\r\n        assert(token.mint(whitelistedInvestor, tokenAmount));\r\n        TokenPurchase(whitelistedInvestor, weiToBuy, tokenAmount);\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(token != address(0));\r\n        address recipient = msg.sender;\r\n        State state = getCurrentState();\r\n        uint256 weiToBuy = msg.value;\r\n        require(\r\n            (state == State.MainSale) &&\r\n            (weiToBuy > 0)\r\n        );\r\n        weiToBuy = min(weiToBuy, getWeiAllowedFromAddress(recipient));\r\n        require(weiToBuy > 0);\r\n        weiToBuy = min(weiToBuy, convertUsdToEther(saleCapUsd).sub(weiRaised));\r\n        require(weiToBuy > 0);\r\n        uint256 tokenAmount = getTokenAmountForEther(weiToBuy);\r\n        require(tokenAmount > 0);\r\n        uint256 weiToReturn = msg.value.sub(weiToBuy);\r\n        weiRaised = weiRaised.add(weiToBuy);\r\n        raisedByAddress[recipient] = raisedByAddress[recipient].add(weiToBuy);\r\n        if (weiToReturn > 0) {\r\n            recipient.transfer(weiToReturn);\r\n            ChangeReturn(recipient, weiToReturn);\r\n        }\r\n        forwardFunds(weiToBuy);\r\n        require(token.mint(recipient, tokenAmount));\r\n        TokenPurchase(recipient, weiToBuy, tokenAmount);\r\n    }\r\n\r\n    // TEST\r\n    function finalizeByAdmin() public onlyOwner {\r\n        finalize();\r\n    }\r\n\r\n    /* ****************\r\n     * Internal methods\r\n     */\r\n\r\n    function forwardFunds(uint256 _weiToBuy) internal {\r\n        treasuryContract.transfer(_weiToBuy);\r\n    }\r\n\r\n    // TESTED\r\n    function convertUsdToEther(uint256 usdAmount) constant internal returns (uint256) {\r\n        return usdAmount.mul(1 ether).div(etherRateUsd);\r\n    }\r\n\r\n    // TESTED\r\n    function getTokenRateEther() public constant returns (uint256) {\r\n        // div(1000) because 3 decimals in tokenRateUsd\r\n        return convertUsdToEther(tokenRateUsd).div(1000);\r\n    }\r\n\r\n    // TESTED\r\n    function getTokenAmountForEther(uint256 weiAmount) constant internal returns (uint256) {\r\n        return weiAmount\r\n            .div(getTokenRateEther())\r\n            .mul(10 ** uint256(token.decimals()));\r\n    }\r\n\r\n    // TESTED\r\n    function isReadyToFinalize() internal returns (bool) {\r\n        return(\r\n            (weiRaised >= convertUsdToEther(saleCapUsd)) ||\r\n            (getCurrentState() == State.MainSaleDone)\r\n        );\r\n    }\r\n\r\n    // TESTED\r\n    function min(uint256 a, uint256 b) internal returns (uint256) {\r\n        return (a < b) ? a: b;\r\n    }\r\n\r\n    // TESTED\r\n    function max(uint256 a, uint256 b) internal returns (uint256) {\r\n        return (a > b) ? a: b;\r\n    }\r\n\r\n    // TESTED\r\n    function ceil(uint a, uint b) internal returns (uint) {\r\n        return ((a.add(b).sub(1)).div(b)).mul(b);\r\n    }\r\n\r\n    // TESTED\r\n    function getWeiAllowedFromAddress(address _sender) internal returns (uint256) {\r\n        uint256 secondsElapsed = getTime().sub(saleStartDate);\r\n        uint256 fullHours = ceil(secondsElapsed, 3600).div(3600);\r\n        fullHours = max(1, fullHours);\r\n        uint256 weiLimit = fullHours.mul(convertUsdToEther(hourLimitByAddressUsd));\r\n        return weiLimit.sub(raisedByAddress[_sender]);\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n\r\n    // TESTED\r\n    function getCurrentState() internal returns (State) {\r\n        return getStateForTime(getTime());\r\n    }\r\n\r\n    // TESTED\r\n    function getStateForTime(uint256 unixTime) internal returns (State) {\r\n        if (isFinalized) {\r\n            // This could be before end date of ICO\r\n            // if hard cap is reached\r\n            return State.Finalized;\r\n        }\r\n        if (unixTime < saleStartDate) {\r\n            return State.BeforeMainSale;\r\n        }\r\n        if (unixTime < saleEndDate) {\r\n            return State.MainSale;\r\n        }\r\n        return State.MainSaleDone;\r\n    }\r\n\r\n    // TESTED\r\n    function finalize() private {\r\n        if (!isFinalized) {\r\n            require(isReadyToFinalize());\r\n            isFinalized = true;\r\n            mintTeamTokens();\r\n            token.unlock();\r\n            treasuryContract.setCrowdsaleFinished();\r\n        }\r\n    }\r\n\r\n    // TESTED\r\n    function mintTeamTokens() private {\r\n        // div by 1000 because of 3 decimals digits in teamTokenRatio\r\n        uint256 tokenAmount = token.totalSupply().mul(teamTokenRatio).div(1000);\r\n        token.mint(teamTokenWallet, tokenAmount);\r\n    }\r\n\r\n\r\n    function whitelistInvestor(address _newInvestor) public onlyOwner {\r\n        if(!whitelist[_newInvestor]) {\r\n            whitelist[_newInvestor] = true;\r\n            whitelistedInvestorCounter++;\r\n        }\r\n    }\r\n    function whitelistInvestors(address[] _investors) external onlyOwner {\r\n        require(_investors.length <= 250);\r\n        for(uint8 i=0; i<_investors.length;i++) {\r\n            address newInvestor = _investors[i];\r\n            if(!whitelist[newInvestor]) {\r\n                whitelist[newInvestor] = true;\r\n                whitelistedInvestorCounter++;\r\n            }\r\n        }\r\n    }\r\n    function blacklistInvestor(address _investor) public onlyOwner {\r\n        if(whitelist[_investor]) {\r\n            delete whitelist[_investor];\r\n            if(whitelistedInvestorCounter != 0) {\r\n                whitelistedInvestorCounter--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            _to.transfer(this.balance);\r\n            return;\r\n        }\r\n    \r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n}\r\n\r\ncontract RefundInvestorsBallot {\r\n\r\n    using SafeMath for uint256;\r\n    EthearnalRepToken public tokenContract;\r\n\r\n    // Date when vote has started\r\n    uint256 public ballotStarted;\r\n\r\n    // Registry of votes\r\n    mapping(address => bool) public votesByAddress;\r\n\r\n    // Sum of weights of YES votes\r\n    uint256 public yesVoteSum = 0;\r\n\r\n    // Sum of weights of NO votes\r\n    uint256 public noVoteSum = 0;\r\n\r\n    // Length of `voters`\r\n    uint256 public votersLength = 0;\r\n\r\n    uint256 public initialQuorumPercent = 51;\r\n\r\n    VotingProxy public proxyVotingContract;\r\n\r\n    // Tells if voting process is active\r\n    bool public isVotingActive = false;\r\n    uint256 public requiredMajorityPercent = 65;\r\n\r\n    event FinishBallot(uint256 _time);\r\n    event Vote(address indexed sender, bytes vote);\r\n    \r\n    modifier onlyWhenBallotStarted {\r\n        require(ballotStarted != 0);\r\n        _;\r\n    }\r\n\r\n    function vote(bytes _vote) public onlyWhenBallotStarted {\r\n        require(_vote.length > 0);\r\n        if (isDataYes(_vote)) {\r\n            processVote(true);\r\n        } else if (isDataNo(_vote)) {\r\n            processVote(false);\r\n        }\r\n        Vote(msg.sender, _vote);\r\n    }\r\n\r\n    function isDataYes(bytes data) public constant returns (bool) {\r\n        // compare data with \"YES\" string\r\n        return (\r\n            data.length == 3 &&\r\n            (data[0] == 0x59 || data[0] == 0x79) &&\r\n            (data[1] == 0x45 || data[1] == 0x65) &&\r\n            (data[2] == 0x53 || data[2] == 0x73)\r\n        );\r\n    }\r\n\r\n    // TESTED\r\n    function isDataNo(bytes data) public constant returns (bool) {\r\n        // compare data with \"NO\" string\r\n        return (\r\n            data.length == 2 &&\r\n            (data[0] == 0x4e || data[0] == 0x6e) &&\r\n            (data[1] == 0x4f || data[1] == 0x6f)\r\n        );\r\n    }\r\n    \r\n    function processVote(bool isYes) internal {\r\n        require(isVotingActive);\r\n        require(!votesByAddress[msg.sender]);\r\n        votersLength = votersLength.add(1);\r\n        uint256 voteWeight = tokenContract.balanceOf(msg.sender);\r\n        if (isYes) {\r\n            yesVoteSum = yesVoteSum.add(voteWeight);\r\n        } else {\r\n            noVoteSum = noVoteSum.add(voteWeight);\r\n        }\r\n        require(getTime().sub(tokenContract.lastMovement(msg.sender)) > 7 days);\r\n        uint256 quorumPercent = getQuorumPercent();\r\n        if (quorumPercent == 0) {\r\n            isVotingActive = false;\r\n        } else {\r\n            decide();\r\n        }\r\n        votesByAddress[msg.sender] = true;\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n\r\n    function RefundInvestorsBallot(address _tokenContract) {\r\n        tokenContract = EthearnalRepToken(_tokenContract);\r\n        proxyVotingContract = VotingProxy(msg.sender);\r\n        ballotStarted = getTime();\r\n        isVotingActive = true;\r\n    }\r\n\r\n    function decide() internal {\r\n        uint256 quorumPercent = getQuorumPercent();\r\n        uint256 quorum = quorumPercent.mul(tokenContract.totalSupply()).div(100);\r\n        uint256 soFarVoted = yesVoteSum.add(noVoteSum);\r\n        if (soFarVoted >= quorum) {\r\n            uint256 percentYes = (100 * yesVoteSum).div(soFarVoted);\r\n            if (percentYes >= requiredMajorityPercent) {\r\n                // does not matter if it would be greater than weiRaised\r\n                proxyVotingContract.proxyEnableRefunds();\r\n                FinishBallot(now);\r\n                isVotingActive = false;\r\n            } else {\r\n                // do nothing, just deactivate voting\r\n                isVotingActive = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getQuorumPercent() public constant returns (uint256) {\r\n        uint256 isMonthPassed = getTime().sub(ballotStarted).div(5 weeks);\r\n        if(isMonthPassed == 1){\r\n            return 0;\r\n        }\r\n        return initialQuorumPercent;\r\n    }\r\n    \r\n}\r\n\r\ncontract Treasury is MultiOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    // Total amount of ether withdrawed\r\n    uint256 public weiWithdrawed = 0;\r\n\r\n    // Total amount of ther unlocked\r\n    uint256 public weiUnlocked = 0;\r\n\r\n    // Wallet withdraw is locked till end of crowdsale\r\n    bool public isCrowdsaleFinished = false;\r\n\r\n    // Withdrawed team funds go to this wallet\r\n    address teamWallet = 0x0;\r\n\r\n    // Crowdsale contract address\r\n    EthearnalRepTokenCrowdsale public crowdsaleContract;\r\n    EthearnalRepToken public tokenContract;\r\n    bool public isRefundsEnabled = false;\r\n\r\n    // Amount of ether that could be withdrawed each withdraw iteration\r\n    uint256 public withdrawChunk = 0;\r\n    VotingProxy public votingProxyContract;\r\n    uint256 public refundsIssued = 0;\r\n    uint256 public percentLeft = 0;\r\n\r\n\r\n    event Deposit(uint256 amount);\r\n    event Withdraw(uint256 amount);\r\n    event UnlockWei(uint256 amount);\r\n    event RefundedInvestor(address indexed investor, uint256 amountRefunded, uint256 tokensBurn);\r\n\r\n    function Treasury(address _teamWallet) public {\r\n        require(_teamWallet != 0x0);\r\n        // TODO: check address integrity\r\n        teamWallet = _teamWallet;\r\n    }\r\n\r\n    // TESTED\r\n    function() public payable {\r\n        require(msg.sender == address(crowdsaleContract));\r\n        Deposit(msg.value);\r\n    }\r\n\r\n    function setVotingProxy(address _votingProxyContract) public onlyOwner {\r\n        require(votingProxyContract == address(0x0));\r\n        votingProxyContract = VotingProxy(_votingProxyContract);\r\n    }\r\n\r\n    // TESTED\r\n    function setCrowdsaleContract(address _address) public onlyOwner {\r\n        // Could be set only once\r\n        require(crowdsaleContract == address(0x0));\r\n        require(_address != 0x0);\r\n        crowdsaleContract = EthearnalRepTokenCrowdsale(_address); \r\n    }\r\n\r\n    function setTokenContract(address _address) public onlyOwner {\r\n        // Could be set only once\r\n        require(tokenContract == address(0x0));\r\n        require(_address != 0x0);\r\n        tokenContract = EthearnalRepToken(_address);\r\n    }\r\n\r\n    // TESTED\r\n    function setCrowdsaleFinished() public {\r\n        require(crowdsaleContract != address(0x0));\r\n        require(msg.sender == address(crowdsaleContract));\r\n        withdrawChunk = getWeiRaised().div(10);\r\n        weiUnlocked = withdrawChunk;\r\n        isCrowdsaleFinished = true;\r\n    }\r\n\r\n    // TESTED\r\n    function withdrawTeamFunds() public onlyOwner {\r\n        require(isCrowdsaleFinished);\r\n        require(weiUnlocked > weiWithdrawed);\r\n        uint256 toWithdraw = weiUnlocked.sub(weiWithdrawed);\r\n        weiWithdrawed = weiUnlocked;\r\n        teamWallet.transfer(toWithdraw);\r\n        Withdraw(toWithdraw);\r\n    }\r\n\r\n    function getWeiRaised() public constant returns(uint256) {\r\n       return crowdsaleContract.weiRaised();\r\n    }\r\n\r\n    function increaseWithdrawalChunk() {\r\n        require(isCrowdsaleFinished);\r\n        require(msg.sender == address(votingProxyContract));\r\n        weiUnlocked = weiUnlocked.add(withdrawChunk);\r\n        UnlockWei(weiUnlocked);\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n\r\n    function enableRefunds() public {\r\n        require(msg.sender == address(votingProxyContract));\r\n        isRefundsEnabled = true;\r\n    }\r\n    \r\n    function refundInvestor(uint256 _tokensToBurn) public {\r\n        require(isRefundsEnabled);\r\n        require(address(tokenContract) != address(0x0));\r\n        if (refundsIssued == 0) {\r\n            percentLeft = percentLeftFromTotalRaised().mul(100*1000).div(1 ether);\r\n        }\r\n        uint256 tokenRate = crowdsaleContract.getTokenRateEther();\r\n        uint256 toRefund = tokenRate.mul(_tokensToBurn).div(1 ether);\r\n        \r\n        toRefund = toRefund.mul(percentLeft).div(100*1000);\r\n        require(toRefund > 0);\r\n        tokenContract.burnFrom(msg.sender, _tokensToBurn);\r\n        msg.sender.transfer(toRefund);\r\n        refundsIssued = refundsIssued.add(1);\r\n        RefundedInvestor(msg.sender, toRefund, _tokensToBurn);\r\n    }\r\n\r\n    function percentLeftFromTotalRaised() public constant returns(uint256) {\r\n        return percent(this.balance, getWeiRaised(), 18);\r\n    }\r\n\r\n    function percent(uint numerator, uint denominator, uint precision) internal constant returns(uint quotient) {\r\n        // caution, check safe-to-multiply here\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        // with rounding of last digit\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return ( _quotient);\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyOwner {    \r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n}\r\n\r\ncontract VotingProxy is Ownable {\r\n    using SafeMath for uint256;    \r\n    Treasury public treasuryContract;\r\n    EthearnalRepToken public tokenContract;\r\n    Ballot public currentIncreaseWithdrawalTeamBallot;\r\n    RefundInvestorsBallot public currentRefundInvestorsBallot;\r\n\r\n    function  VotingProxy(address _treasuryContract, address _tokenContract) {\r\n        treasuryContract = Treasury(_treasuryContract);\r\n        tokenContract = EthearnalRepToken(_tokenContract);\r\n    }\r\n\r\n    function startincreaseWithdrawalTeam() onlyOwner {\r\n        require(treasuryContract.isCrowdsaleFinished());\r\n        require(address(currentRefundInvestorsBallot) == 0x0 || currentRefundInvestorsBallot.isVotingActive() == false);\r\n        if(address(currentIncreaseWithdrawalTeamBallot) == 0x0) {\r\n            currentIncreaseWithdrawalTeamBallot =  new Ballot(tokenContract);\r\n        } else {\r\n            require(getDaysPassedSinceLastTeamFundsBallot() > 2);\r\n            currentIncreaseWithdrawalTeamBallot =  new Ballot(tokenContract);\r\n        }\r\n    }\r\n\r\n    function startRefundInvestorsBallot() public {\r\n        require(treasuryContract.isCrowdsaleFinished());\r\n        require(address(currentIncreaseWithdrawalTeamBallot) == 0x0 || currentIncreaseWithdrawalTeamBallot.isVotingActive() == false);\r\n        if(address(currentRefundInvestorsBallot) == 0x0) {\r\n            currentRefundInvestorsBallot =  new RefundInvestorsBallot(tokenContract);\r\n        } else {\r\n            require(getDaysPassedSinceLastRefundBallot() > 2);\r\n            currentRefundInvestorsBallot =  new RefundInvestorsBallot(tokenContract);\r\n        }\r\n    }\r\n\r\n    function getDaysPassedSinceLastRefundBallot() public constant returns(uint256) {\r\n        return getTime().sub(currentRefundInvestorsBallot.ballotStarted()).div(1 days);\r\n    }\r\n\r\n    function getDaysPassedSinceLastTeamFundsBallot() public constant returns(uint256) {\r\n        return getTime().sub(currentIncreaseWithdrawalTeamBallot.ballotStarted()).div(1 days);\r\n    }\r\n\r\n    function proxyIncreaseWithdrawalChunk() public {\r\n        require(msg.sender == address(currentIncreaseWithdrawalTeamBallot));\r\n        treasuryContract.increaseWithdrawalChunk();\r\n    }\r\n\r\n    function proxyEnableRefunds() public {\r\n        require(msg.sender == address(currentRefundInvestorsBallot));\r\n        treasuryContract.enableRefunds();\r\n    }\r\n\r\n    function() {\r\n        revert();\r\n    }\r\n\r\n    function getTime() internal returns (uint256) {\r\n        // Just returns `now` value\r\n        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\r\n        // to allow testing contract behaviour at different time moments\r\n        return now;\r\n    }\r\n\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(this.balance);\r\n            return;\r\n        }\r\n    \r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"setupOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCrowdsaleFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiOwnableCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votingProxyContract\",\"type\":\"address\"}],\"name\":\"setVotingProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundsIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentLeftFromTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensToBurn\",\"type\":\"uint256\"}],\"name\":\"refundInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeamFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawChunk\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseWithdrawalChunk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBurn\",\"type\":\"uint256\"}],\"name\":\"RefundedInvestor\",\"type\":\"event\"}]","ContractName":"Treasury","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000016c35b388436eb00d78a3c05137bd161275743","Library":"","SwarmSource":"bzzr://89c14201c2c0d79cac904a25b9510483521d3a150bea06bab9a2be71d5209ab1"}]}