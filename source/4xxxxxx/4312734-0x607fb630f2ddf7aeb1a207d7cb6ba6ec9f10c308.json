{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n    bytes4   indexed  sig,\r\n    address  indexed  guy,\r\n    bytes32  indexed  foo,\r\n    bytes32  indexed  bar,\r\n    uint\t \t  wad,\r\n    bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n        foo := calldataload(4)\r\n        bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint supply);\r\n    function balanceOf( address who ) constant returns (uint value);\r\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) returns (bool ok);\r\n    function approve( address spender, uint value ) returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n    address src, address dst, bytes4 sig\r\n    ) constant returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n    auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n    auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier authorized(bytes4 sig) {\r\n        assert(isAuthorized(msg.sender, sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n\r\n    function assert(bool x) internal {\r\n        if (!x) revert();\r\n    }\r\n}\r\n\r\ncontract DSExec {\r\n    function tryExec( address target, bytes calldata, uint value)\r\n    internal\r\n    returns (bool call_ret)\r\n    {\r\n        return target.call.value(value)(calldata);\r\n    }\r\n    function exec( address target, bytes calldata, uint value)\r\n    internal\r\n    {\r\n        if(!tryExec(target, calldata, value)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // Convenience aliases\r\n    function exec( address t, bytes c )\r\n    internal\r\n    {\r\n        exec(t, c, 0);\r\n    }\r\n    function exec( address t, uint256 v )\r\n    internal\r\n    {\r\n        bytes memory c; exec(t, c, v);\r\n    }\r\n    function tryExec( address t, bytes c )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return tryExec(t, c, 0);\r\n    }\r\n    function tryExec( address t, uint256 v )\r\n    internal\r\n    returns (bool)\r\n    {\r\n        bytes memory c; return tryExec(t, c, v);\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    uint128 functions (h is for half)\r\n     */\r\n\r\n\r\n    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        assert((z = x * y) >= x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /*\r\n    int256 functions\r\n     */\r\n\r\n    function imin(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int256 x, int256 y) constant internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /*\r\n    WAD math\r\n     */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + WAD / 2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * WAD + y / 2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /*\r\n    RAY math\r\n     */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * y + RAY / 2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\r\n        z = cast((uint256(x) * RAY + y / 2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\r\n        // This famous algorithm is called \"exponentiation by squaring\"\r\n        // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n        //\r\n        // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n        //\r\n        // These facts are why it works:\r\n        //\r\n        //  If n is even, then x^n = (x^2)^(n/2).\r\n        //  If n is odd,  then x^n = x * x^(n-1),\r\n        //   and applying the equation for even x gives\r\n        //    x^n = x * (x^2)^((n-1) / 2).\r\n        //\r\n        //  Also, EVM division is flooring and\r\n        //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n}\r\n\r\ncontract DSStop is DSAuth, DSNote {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() auth note {\r\n        stopped = true;\r\n    }\r\n    function start() auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint256 supply) {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(msg.sender, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n\r\n        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    string  public  symbol;\r\n    uint256  public  decimals = 8; // standard token precision. override to customize\r\n\r\n    function DSToken(string symbol_) {\r\n        symbol = symbol_;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) stoppable note returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n    function transferFrom(\r\n    address src, address dst, uint wad\r\n    ) stoppable note returns (bool) {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    function approve(address guy, uint wad) stoppable note returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function push(address dst, uint128 wad) returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n\r\n    function pull(address src, uint128 wad) returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n\r\n    function mint(uint128 wad) auth stoppable note {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n    function burn(uint128 wad) auth stoppable note {\r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _supply = sub(_supply, wad);\r\n    }\r\n\r\n    // Optional token name\r\n\r\n    string public  name = \"\";\r\n\r\n    function setName(string name_) auth {\r\n        name = name_;\r\n    }\r\n\r\n}\r\n\r\ncontract WordCoin is DSToken('Word'){\r\n    address public OfferContract;\r\n\r\n    uint public tokenSellCost;\r\n    uint public tokenBuyCost;\r\n    bool public isSellable;\r\n    uint public secondsAfter;\r\n    uint public depositPercents;\r\n\r\n    address public ICOContract;\r\n    address public preICOContract;\r\n\r\n    struct Deposit {\r\n    uint amount;\r\n    uint time;\r\n    }\r\n\r\n    mapping (address => uint) public reservedCoins;\r\n    mapping (address => Deposit) public deposits;\r\n\r\n    event LogBounty(address user, uint amount, string message);\r\n    event LogEtherBounty(address user, uint amount, string message);\r\n    event LogSendReward(address from, address to, string message);\r\n    event LogBuyCoins(address user, uint value, string message);\r\n    event LogGetEther(address user, uint value, string message);\r\n    event LogMakeDeposit(address user, uint value, string message);\r\n    event LogGetDeposit(address user, uint value, string message);\r\n\r\n    function WordCoin(){\r\n    }\r\n\r\n\r\n    modifier sellable {\r\n        assert(isSellable);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOffer {\r\n        assert(msg.sender == OfferContract);\r\n        _;\r\n    }\r\n\r\n    modifier onlypreICO {\r\n        assert(msg.sender == preICOContract);\r\n        _;\r\n    }\r\n\r\n    modifier onlyICO {\r\n        assert(msg.sender == ICOContract);\r\n        _;\r\n    }\r\n\r\n    function setICO(address ICO) auth {\r\n        ICOContract = ICO;\r\n    }\r\n\r\n    function setPreICO(address preICO) auth {\r\n        preICOContract = preICO;\r\n    }\r\n\r\n    function preICOmint(uint128 wad) onlypreICO {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n\r\n\r\n    function ICOmint(uint128 wad) onlyICO {\r\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\r\n        _supply = add(_supply, wad);\r\n    }\r\n\r\n\r\n    function bounty(address user, uint amount) auth {\r\n        assert(_balances[this] >= amount);\r\n\r\n        _balances[user] += amount;\r\n        _balances[this] -= amount;\r\n        LogBounty(user, amount, \"Sent bounty\");\r\n    }\r\n\r\n\r\n    function etherBounty(address user, uint amount) auth {\r\n        assert(this.balance >= amount);\r\n        user.transfer(amount);\r\n        LogEtherBounty(user, amount, \"Sent ether bounty\");\r\n    }\r\n\r\n\r\n    function sendReward(address from, address to, uint value) onlyOffer {\r\n        reservedCoins[from] -= value;\r\n        _balances[to] += value;\r\n        LogSendReward(from, to, \"Sent reward\");\r\n    }\r\n\r\n\r\n    function reserveCoins(address from, uint value) onlyOffer {\r\n        _balances[from] -= value;\r\n        reservedCoins[from] += value;\r\n    }\r\n\r\n\r\n    function declineCoins(address from, uint value) onlyOffer {\r\n        _balances[from] += value;\r\n        reservedCoins[from] -= value;\r\n    }\r\n\r\n\r\n    function getEther(uint128 amount) sellable {\r\n        // exchange coins to Ethers with exchange course\r\n        assert(tokenSellCost > 0);\r\n        assert(div(mul(_balances[msg.sender], 10), 100) >= amount);\r\n        super.push(this, amount);\r\n        msg.sender.transfer(amount * tokenSellCost);\r\n        LogGetEther(msg.sender, amount * tokenSellCost, \"Got Ether\");\r\n    }\r\n\r\n\r\n    function makeDeposit(uint amount) {\r\n        assert(_balances[msg.sender] > amount);\r\n        assert(deposits[msg.sender].amount == 0);\r\n\r\n        deposits[msg.sender].amount = amount;\r\n        deposits[msg.sender].time = now;\r\n        _balances[msg.sender] -= amount;\r\n        _balances[this] += amount;\r\n        LogMakeDeposit(msg.sender, amount, \"Made deposit\");\r\n    }\r\n\r\n\r\n    function getDeposit() {\r\n        assert(deposits[msg.sender].amount != 0);\r\n        assert(now > (deposits[msg.sender].time + mul(secondsAfter, 1 seconds)));\r\n        assert(_balances[this] > div(mul(deposits[msg.sender].amount, add(100, depositPercents)), 100));\r\n\r\n        uint amount = div(mul(deposits[msg.sender].amount, add(100, depositPercents)), 100);\r\n        deposits[msg.sender].amount = 0;\r\n        _balances[msg.sender]  += amount;\r\n        _balances[this] -= amount;\r\n        LogGetDeposit(msg.sender, amount, \"Got deposit\");\r\n    }\r\n\r\n\r\n    function setBuyCourse(uint course) auth {\r\n        isSellable = false;\r\n        tokenBuyCost = course;\r\n    }\r\n\r\n    function setSellCourse(uint course) auth {\r\n        isSellable = false;\r\n        tokenSellCost = course;\r\n    }\r\n\r\n    function setSellable(bool sellable) auth {\r\n        isSellable = sellable;\r\n    }\r\n\r\n\r\n    function setOfferContract(address offerContract) auth {\r\n        OfferContract = offerContract;\r\n    }\r\n\r\n\r\n    function setSecondsAfter(uint secondsForDeposit) auth {\r\n        secondsAfter = secondsForDeposit;\r\n    }\r\n\r\n\r\n    function setDepositPercents(uint percents) auth {\r\n        depositPercents = percents;\r\n    }\r\n\r\n\r\n    function takeEther() payable auth {}\r\n\r\n\r\n    function () payable sellable {\r\n        uint amount = div(msg.value, tokenBuyCost);\r\n        _balances[this] -= amount;\r\n        _balances[msg.sender] += amount;\r\n        LogBuyCoins(msg.sender, amount, \"Coins bought\");\r\n    }\r\n}\r\n\r\ncontract preICO is DSAuth, DSExec, DSMath {\r\n\r\n    WordCoin  public  coin;\r\n    address public ICO;\r\n\r\n    address[] investorsArray;\r\n\r\n    struct Investor {\r\n    uint amount;\r\n    uint tokenAmount;\r\n    bool tokenSent;\r\n    bool rewardSent;\r\n    bool largeBonusSent;\r\n    }\r\n\r\n    mapping (address => Investor) public investors;\r\n\r\n    uint public deadline;\r\n    uint public start;\r\n    uint public countDays;\r\n\r\n    bool public autoTokenSent;\r\n\r\n    uint public totalDonations;\r\n    uint public totalDonationsWithBonuses;\r\n    uint public donationsCount;\r\n    uint public ethReward;\r\n\r\n    uint128 public preICOTokenAmount;\r\n    uint128 public preICOTokenRemaining;\r\n\r\n    uint128 public preICOTokenReward;\r\n    uint128 public preICOTokenRewardRemaining;\r\n\r\n    event LogBounty(address user, uint128 amount, string result);\r\n    event LogBounty256(address user, uint amount, string result);\r\n    event LogPush(address user, uint128 amount, string result);\r\n    event LogTokenSent(address user, bool amount, string result);\r\n\r\n    modifier afterDeadline() {\r\n        assert(now >= deadline);\r\n        _;\r\n    }\r\n\r\n    event LogDonation(address user, string message);\r\n    event LogTransferOwnership(address user, string message);\r\n    event LogSendTokens(address user, uint amount, string message);\r\n    event LogSendPOSTokens(address user, uint amount, string message);\r\n\r\n    function preICO(uint initCountDays){\r\n        countDays = initCountDays;\r\n        preICOTokenAmount = 200000000000000;\r\n        preICOTokenRemaining = 200000000000000;\r\n        preICOTokenReward = 20000000000000;\r\n        preICOTokenRewardRemaining = 20000000000000;\r\n    }\r\n\r\n\r\n    function setCoin(WordCoin initCoin) auth {\r\n        assert(preICOTokenAmount > 0);\r\n        start = now;\r\n        deadline = now + countDays * 1 days;\r\n        coin = initCoin;\r\n        coin.preICOmint(uint128(add(uint256(preICOTokenReward),uint256(preICOTokenAmount))));\r\n    }\r\n\r\n\r\n    function sendTokens() afterDeadline {\r\n        assert(!investors[msg.sender].tokenSent);\r\n\r\n        uint amount = div(mul(investors[msg.sender].amount, preICOTokenAmount), uint256(totalDonationsWithBonuses));\r\n\r\n        coin.push(msg.sender, uint128(amount));\r\n        preICOTokenRemaining -= uint128(amount);\r\n        investors[msg.sender].tokenSent = true;\r\n        investors[msg.sender].tokenAmount = amount;\r\n        LogSendTokens(msg.sender, amount, \"Sent tokens\");\r\n    }\r\n\r\n    function autoSend() afterDeadline {\r\n        LogDonation(msg.sender, \"START\");\r\n        assert(!autoTokenSent);\r\n        for (uint i = 0; i < investorsArray.length; i++) {\r\n            LogSendTokens(msg.sender, uint256(totalDonationsWithBonuses), \"TOTAL\");\r\n            uint amount = div(mul(investors[investorsArray[i]].amount, preICOTokenAmount), uint256(totalDonationsWithBonuses));\r\n            LogSendTokens(msg.sender, amount, \"TOTAL\");\r\n            if (!investors[investorsArray[i]].tokenSent) {\r\n                coin.push(investorsArray[i], uint128(amount));\r\n                LogSendTokens(msg.sender, amount, \"PUSH\");\r\n                investors[investorsArray[i]].tokenAmount = amount;\r\n                investors[investorsArray[i]].tokenSent = true;\r\n            }\r\n        }\r\n        autoTokenSent = true;\r\n    }\r\n\r\n    function setICOContract(address ico) auth{\r\n        ICO = ico;\r\n    }\r\n\r\n\r\n    function getEthers(uint amount) auth {\r\n        assert(amount > 0);\r\n        assert(this.balance - amount >= 0);\r\n        assert(msg.sender == owner);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n\r\n    function getLargeBonus() {\r\n        assert(investors[msg.sender].amount > 7 ether);\r\n        assert(!investors[msg.sender].largeBonusSent);\r\n\r\n        uint amount = div(mul(investors[msg.sender].tokenAmount,10),100);\r\n        coin.push(msg.sender, uint128(amount));\r\n        preICOTokenRewardRemaining -= uint128(amount);\r\n        investors[msg.sender].largeBonusSent = true;\r\n\r\n        LogSendTokens(msg.sender, amount, \"Sent tokens for 7 Eth donate\");\r\n    }\r\n\r\n    function sendICOTokensBack(uint128 amount) afterDeadline auth{\r\n        assert(coin.balanceOf(this) > amount);\r\n        coin.push(msg.sender, amount);\r\n    }\r\n\r\n    function part( address who ) public constant returns (uint part) {\r\n        part = div(mul(investors[who].amount, 1000000), totalDonationsWithBonuses);\r\n    }\r\n\r\n    function rewardWasSent (address who) public constant returns (bool wasSent)  {\r\n        wasSent = investors[who].rewardSent;\r\n    }\r\n\r\n    function setRewardWasSent (address who) {\r\n        assert(msg.sender == ICO);\r\n        investors[who].rewardSent = true;\r\n    }\r\n\r\n    function () payable {\r\n        assert(now <= deadline);\r\n        assert(msg.sender !=  address(0));\r\n        assert(msg.value != 0);\r\n        assert(preICOTokenRemaining > 0);\r\n\r\n        uint percents = 0;\r\n\r\n        if (sub(now,start) < 24 hours) {\r\n            percents = sub(24, div(sub(now,start), 1 hours));\r\n        }\r\n\r\n        uint extraDonation = div(msg.value, 100) * percents;\r\n\r\n        investors[msg.sender].tokenSent = false;\r\n        totalDonationsWithBonuses += add(msg.value, extraDonation);\r\n        totalDonations += msg.value;\r\n\r\n        investors[msg.sender].amount += add(msg.value, extraDonation);\r\n        donationsCount++;\r\n\r\n        investorsArray.push(msg.sender);\r\n\r\n        LogDonation(msg.sender, \"Donation was made\");\r\n    }\r\n}\r\n\r\n\r\ncontract ICO is DSAuth, DSExec, DSMath {\r\n    uint128 public ICOAmount;\r\n    uint128 public ICOReward;\r\n\r\n    address[] investorsArray;\r\n\r\n    struct preICOInvestor {\r\n    uint amount;\r\n    bool tokenSent;\r\n    bool rewardSent;\r\n    bool largeBonusSent;\r\n    }\r\n\r\n    mapping (address => preICOInvestor) public investors;\r\n\r\n    preICO public preico;\r\n    WordCoin public coin;\r\n    bool public canGiveMoneyBack;\r\n    bool public rewardSent;\r\n    uint public cost;\r\n    uint public tokenCost;\r\n\r\n    bool public isICOStopped;\r\n\r\n    uint public totalDonations;\r\n\r\n    uint public totalDonationsWithBonuses;\r\n\r\n    modifier allowGetMoneyBack() {\r\n        assert(canGiveMoneyBack);\r\n        _;\r\n    }\r\n\r\n    modifier ICOStopped() {\r\n        assert(isICOStopped);\r\n        _;\r\n    }\r\n\r\n    event LogSetPreICO(preICO preicoAddress, string message);\r\n    event LogStartWeek(string message);\r\n    event LogGetMoneyBack(address user, uint value, string message);\r\n    event LogMoneyToPreICO(address user, uint value, string message);\r\n    event LogBuyTokens(address user, uint value, string message);\r\n    event LogSendPOSTokens(address user, uint value, string message);\r\n    event LogTransferOwnership(address user, string message);\r\n    event Log1(uint128 la, string message);\r\n    event Log2(bool la, string message);\r\n\r\n    function ICO(){\r\n        ICOAmount = 500000000000000;\r\n        ICOReward = 10000000000000;\r\n    }\r\n\r\n    function setPreICO(preICO initPreICO) auth {\r\n        assert(initPreICO != address(0));\r\n        preico = initPreICO;\r\n    }\r\n\r\n    function getEthers(uint amount) auth {\r\n        assert(amount > 0);\r\n        assert(this.balance - amount >= 0);\r\n        assert(msg.sender == owner);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function startWeekOne() auth {\r\n        assert(preico != address(0));\r\n        tokenCost = div(preico.totalDonations(), preico.preICOTokenAmount());\r\n        cost = 100;\r\n        LogStartWeek(\"First week started\");\r\n    }\r\n\r\n\r\n    function startWeekTwo() auth {\r\n        cost = 105;\r\n        LogStartWeek(\"Second week started\");\r\n    }\r\n\r\n    function startWeekThree() auth {\r\n        cost = 110;\r\n        LogStartWeek(\"Third week started\");\r\n    }\r\n\r\n\r\n    function startWeekFour() auth {\r\n        cost = 115;\r\n        LogStartWeek(\"Fourth week started\");\r\n    }\r\n\r\n\r\n    function startWeekFive() auth {\r\n        cost = 120;\r\n        LogStartWeek(\"Last week started\");\r\n    }\r\n\r\n\r\n    function setCanGetMoneyBack(bool value) auth {\r\n        canGiveMoneyBack = value;\r\n    }\r\n\r\n\r\n    function setTokenCost(uint newTokenCost) auth {\r\n        assert(newTokenCost > 0);\r\n        tokenCost = newTokenCost;\r\n    }\r\n\r\n\r\n    function getMoneyBack() allowGetMoneyBack {\r\n        assert(investors[msg.sender].amount > 0);\r\n        msg.sender.transfer(investors[msg.sender].amount);\r\n        investors[msg.sender].amount = 0;\r\n        LogGetMoneyBack(msg.sender, investors[msg.sender].amount, \"Money returned\");\r\n    }\r\n\r\n\r\n    function setCoin(WordCoin initCoin) auth {\r\n        assert(ICOAmount > 0);\r\n        coin = initCoin;\r\n        coin.ICOmint(uint128(add(uint256(ICOAmount),uint256(ICOReward))));\r\n    }\r\n\r\n    function sendPOSTokens() ICOStopped {\r\n        assert(!investors[msg.sender].rewardSent);\r\n        assert(investors[msg.sender].amount > 0);\r\n        assert(ICOReward > 0);\r\n\r\n        uint amount = div(mul(investors[msg.sender].amount, ICOReward), uint256(totalDonations));\r\n\r\n        investors[msg.sender].rewardSent = true;\r\n\r\n        coin.push(msg.sender, uint128(amount));\r\n        ICOReward -= uint128(amount);\r\n        LogSendPOSTokens(msg.sender, amount, \"Sent prize tokens\");\r\n    }\r\n\r\n    function sendEthForReward() ICOStopped {\r\n        assert(!preico.rewardWasSent(msg.sender));\r\n        uint amount = div(mul(totalDonations, 3), 100);\r\n        uint ethAmountForReward = div(mul(amount,preico.part(msg.sender)), 1000000);\r\n        preico.setRewardWasSent(msg.sender);\r\n        msg.sender.transfer(ethAmountForReward);\r\n    }\r\n\r\n    function sendICOTokensBack(uint128 amount) ICOStopped auth{\r\n        assert(coin.balanceOf(this) > amount);\r\n        coin.push(msg.sender, amount);\r\n    }\r\n\r\n    function setBigICOStopped(bool stop) auth{\r\n        isICOStopped = stop;\r\n    }\r\n\r\n    function() payable {\r\n        assert(msg.sender !=  address(0));\r\n        assert(msg.value != 0);\r\n        assert(cost > 0);\r\n        assert(tokenCost > 0);\r\n        assert(ICOAmount > 0);\r\n        assert(!isICOStopped);\r\n\r\n        investors[msg.sender].amount += msg.value;\r\n\r\n        totalDonations += msg.value;\r\n        uint amount = div(msg.value, div(mul(tokenCost, cost), 100));\r\n        if (msg.value > 7 ether) {\r\n            amount = div(mul(amount, 110),100);\r\n        }\r\n        coin.push(msg.sender, uint128(amount));\r\n        ICOAmount -= uint128(amount);\r\n\r\n        investorsArray.push(msg.sender);\r\n\r\n        LogBuyTokens(msg.sender, amount, \"Tokens bought\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secondsForDeposit\",\"type\":\"uint256\"}],\"name\":\"setSecondsAfter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeEther\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"push\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"reserveCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"declineCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"getEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBuyCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellable\",\"type\":\"bool\"}],\"name\":\"setSellable\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"course\",\"type\":\"uint256\"}],\"name\":\"setBuyCourse\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"preICO\",\"type\":\"address\"}],\"name\":\"setPreICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percents\",\"type\":\"uint256\"}],\"name\":\"setDepositPercents\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"pull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offerContract\",\"type\":\"address\"}],\"name\":\"setOfferContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"preICOmint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ICO\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"course\",\"type\":\"uint256\"}],\"name\":\"setSellCourse\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OfferContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"ICOmint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSellable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"etherBounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSellCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogEtherBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogSendReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogBuyCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogGetEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogMakeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LogGetDeposit\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WordCoin","CompilerVersion":"v0.4.13-nightly.2017.7.6+commit.40d4ee49","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://210e16cc618902e324a3b39e355b722714f4eb31c96cbe7dae1fba17037c625c"}]}