{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n// compiler: solcjs -o ./build/contracts --optimize --abi --bin <this file>\r\n//  version: 0.4.19+commit.c4cbbb05.Emscripten.clang\r\n//\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n  address public owner;\r\n  function owned() public { owner = msg.sender; }\r\n  function changeOwner( address newowner ) public onlyOwner {owner = newowner;}\r\n  function closedown() public onlyOwner {selfdestruct(owner);}\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) { revert(); }\r\n    _;\r\n  }\r\n}\r\n\r\n// token should be ERC20-compliant and implement these functions\r\ninterface ERC20 {\r\n  function transfer(address to, uint256 value) public;\r\n  function balanceOf( address owner ) public constant returns (uint);\r\n}\r\n\r\ncontract RTKICO is owned {\r\n\r\n  ERC20   public tokenSC;   // token this ICO is selling\r\n  address        treasury;  // [optional] where to direct incoming Ether\r\n  uint    public start;     // seconds since Jan 1 1970 GMT\r\n  uint    public duration;  // seconds\r\n  uint    public tokpereth; // price NOTE: attention to decimals on setup\r\n\r\n  function RTKICO( address _erc20,\r\n                   address _treasury,\r\n                   uint    _startSec,\r\n                   uint    _durationSec,\r\n                   uint    _tokpereth ) public {\r\n\r\n    require( isContract(_erc20) );\r\n    require( _tokpereth > 0 );\r\n\r\n    if (_treasury != address(0))\r\n      require( isContract(_treasury) );\r\n\r\n    tokenSC = ERC20( _erc20 );\r\n    treasury = _treasury;\r\n    start = _startSec;\r\n    duration = _durationSec;\r\n    tokpereth = _tokpereth;\r\n  }\r\n\r\n  function setTreasury( address treas ) public onlyOwner { treasury = treas; }\r\n  function setStart( uint newstart ) public onlyOwner { start = newstart; }\r\n  function setRate( uint rate ) public onlyOwner { tokpereth = rate; }\r\n  function setDuration( uint dur ) public onlyOwner { duration = dur; }\r\n\r\n  function() public payable {\r\n    if (now < start || now > (start + duration))\r\n      revert();\r\n\r\n    // Calculation:\r\n    //   amountinwei * tokpereth/weipereth * (bonus+100)/100\r\n    // = amountinwei * tokpereth/1e18 * (bonus+100)/100\r\n    // = msg.value * tokpereth/1e20 * (bonus+100)\r\n    uint qty =\r\n      multiply( divide( multiply( msg.value, tokpereth ),\r\n                        1e20 ),\r\n                (bonus()+100) );\r\n\r\n    if (qty > tokenSC.balanceOf(address(this)) || qty < 1)\r\n      revert();\r\n\r\n    tokenSC.transfer( msg.sender, qty );\r\n\r\n    if (treasury != address(0)) treasury.transfer( msg.value );\r\n  }\r\n\r\n  // unsold tokens can be claimed by owner after sale ends\r\n  function claimUnsold() public onlyOwner {\r\n    if ( now < (start + duration) )\r\n      revert();\r\n\r\n    tokenSC.transfer( owner, tokenSC.balanceOf(address(this)) );\r\n  }\r\n\r\n  function withdraw( uint amount ) public onlyOwner returns (bool) {\r\n    require (amount <= this.balance);\r\n    return owner.send( amount );\r\n  }\r\n\r\n  function bonus() internal constant returns(uint) {\r\n    uint elapsed = now - start;\r\n\r\n    if (elapsed < 1 weeks) return 20;\r\n    if (elapsed < 2 weeks) return 15;\r\n    if (elapsed < 4 weeks) return 10;\r\n    return 0;\r\n  }\r\n\r\n  function isContract( address _a ) constant private returns (bool) {\r\n    uint ecs;\r\n    assembly { ecs := extcodesize(_a) }\r\n    return ecs > 0;\r\n  }\r\n\r\n  // ref: github.com/OpenZeppelin/zeppelin-solidity/\r\n  //      blob/master/contracts/math/SafeMath.sol\r\n  function multiply(uint256 a, uint256 b) pure private returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function divide(uint256 a, uint256 b) pure private returns (uint256) {\r\n    return a / b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokpereth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closedown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimUnsold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"treas\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newstart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dur\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_startSec\",\"type\":\"uint256\"},{\"name\":\"_durationSec\",\"type\":\"uint256\"},{\"name\":\"_tokpereth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RTKICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074ea2438157d8bb836cad8419be38f7bba799d300000000000000000000000009241b4c67b6cdf9b99f5f50de21283d0441eff75000000000000000000000000000000000000000000000000000000005a51630000000000000000000000000000000000000000000000000000000000003b53800000000000000000000000000000000000000000000000000004bca8dbb35555","Library":"","SwarmSource":"bzzr://d87512b675079e15d3758c5be9aca09d8f21bfcd85bce53bba6dfc3ee2c04022"}]}