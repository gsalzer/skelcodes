{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  CanYaCoin Presale contract (3780 ether)\r\n */\r\n\r\npragma solidity 0.4.15;\r\n\r\nlibrary SafeMath {\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20TokenInterface {\r\n    /// @return The total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CanYaCoin is ERC20TokenInterface {\r\n\r\n    string public constant name = \"CanYaCoin\";\r\n    string public constant symbol = \"CAN\";\r\n    uint256 public constant decimals = 6;\r\n    uint256 public constant totalTokens = 100000000 * (10 ** decimals);\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function CanYaCoin() {\r\n        balances[msg.sender] = totalTokens;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract Presale {\r\n    using SafeMath for uint256;\r\n\r\n    CanYaCoin public CanYaCoinToken;\r\n    bool public ended = false;\r\n    uint256 internal refundAmount = 0;\r\n    uint256 public constant MAX_CONTRIBUTION = 3780 ether;\r\n    uint256 public constant MIN_CONTRIBUTION = 1 ether;\r\n    address public owner;\r\n    address public multisig;\r\n    uint256 public constant pricePerToken = 400000000; // (wei per CAN)\r\n    uint256 public tokensAvailable = 9450000 * (10**6); // Whitepaper 9.45mil * 10^6\r\n\r\n    event LogRefund(uint256 _amount);\r\n    event LogEnded(bool _soldOut);\r\n    event LogContribution(uint256 _amount, uint256 _tokensPurchased);\r\n\r\n    modifier notEnded() {\r\n        require(!ended);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Sets up the amount of tokens available as per the whitepaper\r\n    /// @param _token Address of the CanYaCoin contract\r\n    function Presale(address _token, address _multisig) {\r\n        require (_token != address(0) && _multisig != address(0));\r\n        owner = msg.sender;\r\n        CanYaCoinToken = CanYaCoin(_token);\r\n        multisig = _multisig;\r\n    }\r\n\r\n    /// @dev Fallback function, this allows users to purchase tokens by simply sending ETH to the\r\n    /// contract; they will however need to specify a higher amount of gas than the default (21000)\r\n    function () notEnded payable public {\r\n        require(msg.value >= MIN_CONTRIBUTION && msg.value <= MAX_CONTRIBUTION);\r\n        uint256 tokensPurchased = msg.value.div(pricePerToken);\r\n        if (tokensPurchased > tokensAvailable) {\r\n            ended = true;\r\n            LogEnded(true);\r\n            refundAmount = (tokensPurchased - tokensAvailable) * pricePerToken;\r\n            tokensPurchased = tokensAvailable;\r\n        }\r\n        tokensAvailable -= tokensPurchased;\r\n        \r\n        //Refund the difference\r\n        if (ended && refundAmount > 0) {\r\n            uint256 toRefund = refundAmount;\r\n            refundAmount = 0;\r\n            // reentry should not be possible\r\n            msg.sender.transfer(toRefund);\r\n            LogRefund(toRefund);\r\n        }\r\n        LogContribution(msg.value, tokensPurchased);\r\n        CanYaCoinToken.transfer(msg.sender, tokensPurchased);\r\n        multisig.transfer(msg.value - toRefund);\r\n    }\r\n\r\n    /// @dev Ends the crowdsale and withdraws any remaining tokens\r\n    /// @param _to Address to withdraw the tokens to\r\n    function withdrawTokens(address _to) onlyOwner public {\r\n        require(_to != address(0));\r\n        if (!ended) {\r\n            LogEnded(false);\r\n        }\r\n        ended = true;\r\n        CanYaCoinToken.transfer(_to, tokensAvailable);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CanYaCoinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_soldOut\",\"type\":\"bool\"}],\"name\":\"LogEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokensPurchased\",\"type\":\"uint256\"}],\"name\":\"LogContribution\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d462414fe14cf489c7A21CaC78509f4bF8CD7c0000000000000000000000000fBE55DE3383ec44c39FF839FbAF9A6d769251544","Library":"","SwarmSource":"bzzr://53e74d03c3214851e0329be11946477ee1a138c8c4d86057bdded56b2596da9a"}]}