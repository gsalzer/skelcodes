{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary safeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint supply);\r\n    function balanceOf(address who) constant returns (uint value);\r\n    function allowance(address owner, address spender) constant returns (uint _allowance);\r\n\r\n    function transfer(address to, uint value) returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) returns (bool ok);\r\n    function approve(address spender, uint value) returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract RockCoin is ERC20{\r\n        uint initialSupply = 16500000;\r\n        string name = \"RockCoin\";\r\n        string symbol = \"ROCK\";\r\n        uint USDExchangeRate = 300;\r\n        bool preSale = true;\r\n        bool burned = false;\r\n        uint saleTimeStart;\r\n\r\n        address ownerAddress;\r\n\r\n        mapping (address => uint256) balances;\r\n        mapping (address => mapping (address => uint256)) allowed;\r\n\r\n        event Burn(address indexed from, uint amount);\r\n\r\n        modifier onlyOwner{\r\n            if (msg.sender == ownerAddress) {\r\n                  _;\r\n                }\r\n        }\r\n\r\n        function totalSupply() constant returns (uint256) {\r\n                return initialSupply;\r\n    }\r\n\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function getCurrentModifier() returns (uint _modifier) {\r\n        if (preSale) return 5;\r\n\r\n        if (balances[ownerAddress] > 11500000) return 8;\r\n        if (balances[ownerAddress] > 6500000) return 10;\r\n        if (balances[ownerAddress] > 1500000) return 12;\r\n\r\n        return 0;\r\n}\r\n\r\n  function setUSDExchangeRate(uint _value) onlyOwner {\r\n            USDExchangeRate = _value;\r\n        }\r\n\r\n  function stopPreSale() onlyOwner {\r\n            if (preSale) {\r\n               saleTimeStart = now;\r\n            }\t\r\n            preSale = false;\r\n        }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n    function burnUnsold() returns (bool success) {\r\n            if (!preSale && saleTimeStart + 5 weeks < now && !burned) {\r\n                uint sold = initialSupply - balances[ownerAddress];\r\n                uint toHold = safeMath.div(sold, 10);\r\n                uint burningAmount = balances[ownerAddress] - toHold;\r\n                balances[ownerAddress] = toHold;\r\n                initialSupply -= burningAmount;\r\n                    Burn(ownerAddress, burningAmount);\r\n                    burned = true;\r\n            return burned;\r\n            }\r\n    }\r\n\r\n        function RockCoin() {\r\n        ownerAddress = msg.sender;\r\n            uint devFee = 7000;\r\n        balances[ownerAddress] = initialSupply - devFee;\r\n            address devAddr = 0xB0416874d4253E12C95C5FAC8F069F9BFf18D1bf;\r\n            balances[devAddr] = devFee;\r\n            Transfer(ownerAddress, devAddr, devFee);\r\n    }\r\n\r\n        function () payable{\r\n            uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\r\n            uint currentPriceModifier = getCurrentModifier();\r\n\r\n            if (currentPriceModifier>0) {\r\n                uint valueToPass = safeMath.div(safeMath.mul(amountInUSDollars, 10),currentPriceModifier);\r\n                if (preSale && balances[ownerAddress] < 14500000) {stopPreSale();}\r\n                if (balances[ownerAddress] >= valueToPass) {\r\n                balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\r\n                balances[ownerAddress] = safeMath.sub(balances[ownerAddress],valueToPass);\r\n                Transfer(ownerAddress, msg.sender, valueToPass);\r\n            } \r\n            }\r\n        }\r\n\r\n    function withdraw(uint amount) onlyOwner{\r\n        ownerAddress.transfer(amount);\r\n        }\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUSDExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentModifier\",\"outputs\":[{\"name\":\"_modifier\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsold\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPreSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RockCoin","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db61a855a7b32319bf68a0ecff234bef75102d9a71f804c4a881635a2a5d522a"}]}