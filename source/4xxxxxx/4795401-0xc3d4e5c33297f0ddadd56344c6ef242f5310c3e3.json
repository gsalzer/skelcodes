{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public  constant returns (uint256);\r\n  function transfer(address to, uint256 value) public  returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public  constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n  function approve(address spender, uint256 value) public  returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public  returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public  constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public  returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public  constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public  onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title EthereumLimited\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract EthereumLimited is StandardToken, Ownable {\r\n\r\n  string public name = \"Ethereum limited\";\r\n  uint8 public decimals = 18;                \r\n  string public symbol = \"ETL\"; \r\n                                           \r\n\r\n    bool public transfersEnabled = false;\r\n  \r\n  function EthereumLimited() public  {\r\n    totalSupply=20000000000000000000000000 ;//20,000,000 ETL\r\n  }\r\n\r\n\r\n   /// @notice Enables token holders to transfer their tokens freely if true\r\n   /// @param _transfersEnabled True if transfers are allowed in the clone\r\n   function enableTransfers(bool _transfersEnabled) public  onlyOwner {\r\n      transfersEnabled = _transfersEnabled;\r\n   }\r\n\r\n  function transferFromContract(address _to, uint256 _value) public  onlyOwner returns (bool success) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public  returns (bool success) {\r\n    require(transfersEnabled);\r\n    return super.transfer(_to, _value);\r\n  }\r\n   function copyBalance(address _to) public  returns (bool success) {\r\n    balances[_to]=_to.balance;\r\n    return true;\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\r\n    require(transfersEnabled);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public  returns (bool) {\r\n      require(transfersEnabled);\r\n      return super.approve(_spender, _value);\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n/**\r\n * Hybrid Hard Fork contract.\r\n * For detail, read whitepaper in website: www.ethereum-limited.com\r\n */\r\ncontract HybridHardFork is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    // The token \r\n    EthereumLimited public etlContract;\r\n    \r\n    // end date\r\n    \r\n    uint256 public endTime = 1517443200; //Thu, 01 Feb 2018 00:00:00 +00:00\r\n    uint256 public currentSupply=0;\r\n    uint256 maxSupply=20000000000000000000000000;//20,000,000 ETL\r\n\r\n    //flag for final of Hybrid Hard Fork\r\n    bool public isFinalized = false;\r\n    \r\n    \r\n    event Finalized();\r\n    \r\n    \r\n    function HybridHardFork() public  {\r\n    \r\n        etlContract = createTokenContract();\r\n    \r\n    }\r\n\r\n    function createTokenContract() internal returns (EthereumLimited) {\r\n        return new EthereumLimited();\r\n    \r\n    }\r\n\r\n    // fallback function can be used to join Hybrid Hard Fork\r\n    function () public  payable {\r\n        require(msg.sender != 0x0);\r\n        require(!isHybridHardForkCompleted());\r\n        require(validateEtherReceived());\r\n        \r\n        currentSupply=currentSupply+msg.sender.balance;\r\n        \r\n        etlContract.copyBalance(msg.sender);\r\n        \r\n    }\r\n    \r\n \r\n    // @return true if event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return isFinalized;\r\n    }\r\n    \r\n    \r\n    function isHybridHardForkCompleted() private returns (bool) {\r\n        if(isFinalized){\r\n            return true;\r\n        }\r\n        else{\r\n            if (now > endTime || currentSupply >= maxSupply){\r\n                Finalized();\r\n                isFinalized=true;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        \r\n    }\r\n   \r\n    function validateEtherReceived() private  returns (bool) {\r\n        uint256 requireEtherReceived=(msg.sender.balance+msg.value).div(1000);\r\n        if( msg.value >  requireEtherReceived) {\r\n            msg.sender.transfer( msg.value.sub(requireEtherReceived));\r\n            return true;\r\n        }\r\n        else if(msg.value == requireEtherReceived )\r\n        {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    function withdraw(uint amount) public onlyOwner returns(bool) {\r\n        require(amount <= this.balance);\r\n        owner.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etlContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"}]","ContractName":"HybridHardFork","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://587cdcf6b008a7de71b698cbf335957292baf0e7b0d9e89bf8237d54891488a5"}]}