{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\ncontract Broker {\r\n  enum State { Created, Validated, Locked, Inactive }\r\n  State public state;\r\n\r\n  enum FileState { \r\n    Created, \r\n    Invalidated\r\n    // , Confirmed \r\n  }\r\n\r\n  struct File{\r\n    // The purpose of this file. Like, picture, license info., etc.\r\n    // to save the space, we better use short name.\r\n    // Dapps should match proper long name for this.\r\n    bytes32 purpose;\r\n    // name of the file\r\n    string name;\r\n    // ipfs id for this file\r\n    string ipfshash;\r\n    FileState state;\r\n  }\r\n\r\n  struct Item{\r\n    string name;\r\n    // At least 0.1 Finney, because it's the fee to the developer\r\n    uint   price;\r\n    // this could be a link to an Web page explaining about this item\r\n    string detail;\r\n    File[] documents;\r\n  }\r\n\r\n  Item public item;\r\n  address public seller;\r\n  address public buyer;\r\n  address public broker;\r\n  uint    public brokerFee;\r\n  // Minimum 0.1 Finney (0.0001 eth ~ 25Cent) to 0.01% of the price.\r\n  uint    public developerfee = 0.1 finney;\r\n  uint    minimumdeveloperfee = 0.1 finney;\r\n  address developer = 0x001973f023e4c03ef60ea34084b63e7790d463e595;\r\n  // bool public validated;\r\n  address creator = 0x0;\r\n\r\n\r\n  modifier onlyBuyer() {\r\n    require(msg.sender == buyer);\r\n    _;\r\n  }\r\n\r\n  modifier onlySeller() {\r\n    require(msg.sender == seller);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCreator() {\r\n    require(msg.sender == creator);\r\n    _;\r\n  }\r\n\r\n  modifier onlyBroker() {\r\n    require(msg.sender == broker);\r\n    _;\r\n  }\r\n\r\n  modifier inState(State _state) {\r\n      require(state == _state);\r\n      _;\r\n  }\r\n\r\n  modifier condition(bool _condition) {\r\n      require(_condition);\r\n      _;\r\n  }\r\n\r\n  event Aborted();\r\n  event PurchaseConfirmed();\r\n  event ItemReceived();\r\n  event Validated();\r\n\r\n  // The constructor\r\n  function Broker(bool isbroker) {\r\n    if(creator==address(0)){\r\n      //storedData = initialValue;\r\n      if(isbroker)\r\n        broker = msg.sender;\r\n      else\r\n        seller = msg.sender;\r\n      creator = msg.sender;\r\n      // value = msg.value / 2;\r\n      // require((2 * value) == msg.value);\r\n      state = State.Created;\r\n\r\n      // validated = false;\r\n      brokerFee = 50;\r\n    }\r\n  }\r\n\r\n  function joinAsBuyer(){\r\n    if(buyer==address(0)){\r\n      buyer = msg.sender;\r\n    }\r\n  }\r\n\r\n  function joinAsBroker(){\r\n    if(broker==address(0)){\r\n      broker = msg.sender;\r\n    }\r\n  }\r\n\r\n  function createOrSet(string name, uint price, string detail)\r\n    inState(State.Created)\r\n    onlyCreator\r\n  {\r\n    require(price > minimumdeveloperfee);\r\n    item.name = name;\r\n    item.price = price;\r\n    item.detail = detail;\r\n    developerfee = (price/1000)<minimumdeveloperfee ? minimumdeveloperfee : (price/1000);\r\n  }\r\n\r\n  function getBroker()\r\n    constant returns(address, uint)\r\n  {\r\n    return (broker, brokerFee);\r\n  }\r\n\r\n  function getSeller()\r\n    constant returns(address)\r\n  {\r\n    return (seller);\r\n  }\r\n\r\n  function setBroker(address _address, uint fee)\r\n  {\r\n    brokerFee = fee;\r\n    broker = _address;\r\n  }\r\n\r\n  function setBrokerFee(uint fee)\r\n  {\r\n    brokerFee = fee;\r\n  }\r\n\r\n  function setSeller(address _address)\r\n  {\r\n    seller = _address;\r\n  }\r\n\r\n  function parseAddr(string _a) internal returns (address){\r\n    bytes memory tmp = bytes(_a);\r\n    uint160 iaddr = 0;\r\n    uint160 b1;\r\n    uint160 b2;\r\n    for (uint i=2; i<2+2*20; i+=2){\r\n        iaddr *= 256;\r\n        b1 = uint160(tmp[i]);\r\n        b2 = uint160(tmp[i+1]);\r\n        if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n        else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n        if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n        else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n        iaddr += (b1*16+b2);\r\n    }\r\n    return address(iaddr);\r\n  }\r\n\r\n  // We will have some 'peculiar' list of documents\r\n  // for each deals. \r\n  // For ex, for House we will require\r\n  // proof of documents about the basic information of the House,\r\n  // and some insurance information.\r\n  // So we can make a template for each differene kind of deals.\r\n  // Deals for a house, deals for a Car, etc.\r\n  function addDocument(bytes32 _purpose, string _name, string _ipfshash)\r\n  {\r\n    require(state != State.Inactive);\r\n    require(state != State.Locked);\r\n    item.documents.push( File({\r\n      purpose:_purpose, name:_name, ipfshash:_ipfshash, state:FileState.Created}\r\n      ) \r\n    );\r\n  }\r\n\r\n  // deleting actual file on the IPFS network is very hard.\r\n  function deleteDocument(uint index)\r\n  {\r\n    require(state != State.Inactive);\r\n    require(state != State.Locked);\r\n    if(index<item.documents.length){\r\n      item.documents[index].state = FileState.Invalidated;\r\n    }\r\n  }\r\n\r\n  function validate()\r\n    onlyBroker\r\n    inState(State.Created)\r\n  {\r\n    // if(index<item.documents.length){\r\n    //   item.documents[index].state = FileState.Confirmed;\r\n    // }\r\n    Validated();\r\n    // validated = true;\r\n    state = State.Validated;\r\n  }\r\n\r\n  /// Abort the purchase and reclaim the ether.\r\n  /// Can only be called by the seller before\r\n  /// the contract is locked.\r\n  function abort()\r\n      onlySeller\r\n      inState(State.Created)\r\n  {\r\n      Aborted();\r\n      state = State.Inactive;\r\n      // validated = false;\r\n      seller.transfer(this.balance);\r\n  }\r\n\r\n  function abortByBroker()\r\n      onlyBroker\r\n  {\r\n      require(state != State.Inactive);\r\n      state = State.Inactive;\r\n      Aborted();\r\n      buyer.transfer(this.balance);\r\n  }\r\n\r\n  /// Confirm the purchase as buyer.\r\n  /// The ether will be locked until confirmReceived\r\n  /// is called.\r\n  function confirmPurchase()\r\n      inState(State.Validated)\r\n      condition(msg.value == item.price)\r\n      payable\r\n  {\r\n      state = State.Locked;\r\n      buyer = msg.sender;\r\n      PurchaseConfirmed();\r\n  }\r\n\r\n  /// Confirm that you (the buyer) received the item.\r\n  /// This will release the locked ether.\r\n  function confirmReceived()\r\n      onlyBroker\r\n      inState(State.Locked)\r\n  {\r\n      // It is important to change the state first because\r\n      // otherwise, the contracts called using `send` below\r\n      // can call in again here.\r\n      state = State.Inactive;\r\n\r\n      // NOTE: This actually allows both the buyer and the seller to\r\n      // block the refund - the withdraw pattern should be used.\r\n      seller.transfer(this.balance-brokerFee-developerfee);\r\n      broker.transfer(brokerFee);\r\n      developer.transfer(developerfee);\r\n\r\n      ItemReceived();\r\n  }\r\n\r\n  function getInfo() constant returns (State, string, uint, string, uint, uint){\r\n    return (state, item.name, item.price, item.detail, item.documents.length, developerfee);\r\n  }\r\n\r\n  function getFileAt(uint index) constant returns(uint, bytes32, string, string, FileState){\r\n    return (index,\r\n      item.documents[index].purpose,\r\n      item.documents[index].name,\r\n      item.documents[index].ipfshash,\r\n      item.documents[index].state);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brokerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBrokerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"validate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFileAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purpose\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_ipfshash\",\"type\":\"string\"}],\"name\":\"addDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abortByBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAsBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"broker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"detail\",\"type\":\"string\"}],\"name\":\"createOrSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBroker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAsBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"item\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"detail\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"isbroker\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PurchaseConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ItemReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Validated\",\"type\":\"event\"}]","ContractName":"Broker","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3c455bafb4a3b8bd3d719f6326bcf3bd927eeb6cc90a522af8721997eb4b33b2"}]}