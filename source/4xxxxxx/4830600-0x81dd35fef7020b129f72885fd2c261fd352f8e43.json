{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @dev SEEDS token smart contract. For project and ICO details, please check: http://seedsico.info\r\n */\r\n\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n    /**\r\n     * @title Ownable\r\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n     * functions, this simplifies the implementation of \"user permissions\".\r\n     */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * pause is initially set to true; team will unpause before PRE-ICO start.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = true;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * @title LockFunds\r\n * @dev Base contract which allows children to lock funds.\r\n * Funds are locked in contributors' wallets since ICO end. On 6th March 2018 funds will be transferable\r\n */\r\ncontract LockFunds is Ownable {\r\n  event Lock();\r\n  event UnLock();\r\n\r\n  bool public locked = true;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the funds ARE locked\r\n   */\r\n  modifier whenNotLocked() {\r\n    require(!locked);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the funds ARE NOT locked\r\n   */\r\n  modifier whenLocked() {\r\n    require(locked);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to lock, triggers locked state\r\n   */\r\n  function lock() onlyOwner whenNotLocked {\r\n    locked = true;\r\n    Lock();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unlock, returns to normal state\r\n   */\r\n  function unlock() onlyOwner whenLocked {\r\n    locked = false;\r\n    UnLock();\r\n  }\r\n}\r\n/**\r\n * StandardToken contract that implements LockFunds contract.\r\n * Transfers are locked until 6th March 2018.\r\n*/\r\ncontract StandardToken is Token, SafeMath, LockFunds {\r\n\r\n    function transfer(address _to, uint256 _value) whenNotLocked returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] = sub(balances[msg.sender], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotLocked returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] = add(balances[_to], _value);\r\n        balances[_from] -= sub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\n/** Burn contract allows team to burn their OWN SEEDS supply, \r\n * Total supply is updated and lowered.\r\n*/\r\n\r\ncontract BurnableToken is SafeMath, StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = sub(balances[burner],_value);\r\n        totalSupply = sub(totalSupply,_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/**SEEDSToken contract allows contributor to participate in PRE-ICO and ICO;\r\n * PRE-ICO starts on January 5th 2018 14:00 GMT and ends on January 8th 2018, 13:59 GMT. 50% discount during this phase.\r\n * ICO start on  January 8th 2018, 14:00 GMT and ends on March 5th 2018, 23:59 GMT.\r\n * Discounts are the following:\r\n * - 30% discount during phase 1, starting on 8th January and ending on 15th January;\r\n * - 15% discount during phase 2, starting on 15th January and ending on 29th January;\r\n * - 5% discount during phase 3, starting on 29th January and ending on 12th February;\r\n * - No discount during phase 4, starting on 12th February and ending on 5th March.\r\n * On ICO end, SEEDS tokens will be unlocked and transfers will be available.\r\n */\r\n\r\ncontract SEEDSToken is SafeMath, StandardToken, BurnableToken, Pausable {\r\n\r\n    string public constant name = \"Seeds\";                                      //token name\r\n    string public constant symbol = \"SEEDS\";                                    //token symbol\r\n    uint256 public constant decimals = 18;                                      //token decimals\r\n    uint256 public constant maxFixedSupply = 500000000*10**decimals;            //Max SEEDS supply\r\n\tuint256 public constant tokenCreationCap = 375000000*10**decimals;          //Max cap for ICO and PRE-ICO\r\n\tuint256 public constant initialSupply = add(add(freeTotal, teamTotal), add(advisorTotal,lockedTeam));   //sets initial supply\r\n    uint256 public freeTotal = 5000000*10**decimals;                            //sets bounties and airdrop supply\r\n    uint256 public teamTotal = 50000000*10**decimals;                           //sets team supply\r\n    uint256 public advisorTotal = 50000000*10**decimals;                        //sets advisors and partners supply\r\n    uint256 public lockedTeam = 20000000*10**decimals;                          //sets team funds locked for 24 months \r\n    uint256 public stillAvailable = tokenCreationCap;                           //calculates how many tokens are still available for crowdsale\r\n    \r\n\t\r\n\tuint256 public toBeDistributedFree = freeTotal; \r\n    uint256 public totalEthReceivedinWei;\r\n    uint256 public totalDistributedinWei;\r\n    uint256 public totalBountyinWei;\r\n\r\n    Phase public currentPhase = Phase.END;\r\n\r\n    enum Phase {\r\n        PreICO,\r\n        ICO1,\r\n        ICO2,\r\n        ICO3,\r\n        ICO4,\r\n        END\r\n    }\r\n\r\n    event CreateSEEDS(address indexed _to, uint256 _value);\r\n    event PriceChanged(string _text, uint _newPrice);\r\n    event StageChanged(string _text);\r\n    event Withdraw(address to, uint amount);\r\n\r\n    function SEEDSToken() {                                                     //sets totalSupply and owner supply\r\n        owner=msg.sender;                                                       //owner supply = 125 M SEEDS to be distributed\r\n        balances[owner] = sub(maxFixedSupply, tokenCreationCap);                //through bounties, airdrop, team and advisors\r\n        totalSupply = initialSupply;\r\n    \r\n    }\r\n\r\n    function () payable {\r\n        createTokens();\r\n    }\r\n\r\n\r\n    function createTokens() whenNotPaused internal  {                           //function that calculates Seeds to be received according \r\n        uint multiplier = 10 ** 10;                                             // to ETH sent.\r\n        uint256 oneTokenInWei;\r\n        uint256 tokens; \r\n        uint256 checkedSupply;\r\n\r\n        if (currentPhase == Phase.PreICO){\r\n            {\r\n                oneTokenInWei = 25000000000000;\r\n                tokens = div(msg.value*100000000, oneTokenInWei) * multiplier;\r\n                checkedSupply = add(totalSupply, tokens);\r\n                if (checkedSupply <= tokenCreationCap)\r\n                    {\r\n                        addTokens(tokens);\r\n                        stillAvailable = sub(stillAvailable, tokens);           //\r\n                    }\r\n                else\r\n                    revert ();\r\n            }\r\n        } \r\n        else if (currentPhase == Phase.ICO1){\r\n            {\r\n                oneTokenInWei = 35000000000000;\r\n                tokens = div(msg.value*100000000, oneTokenInWei) * multiplier;\r\n                checkedSupply = add(totalSupply, tokens);\r\n                if (checkedSupply <= tokenCreationCap)\r\n                    {\r\n                        addTokens(tokens);\r\n                        stillAvailable = sub(stillAvailable, tokens);\r\n                    }\r\n                else\r\n                    revert ();\r\n            }\r\n        }\r\n        else if (currentPhase == Phase.ICO2){\r\n            {\r\n                oneTokenInWei = 42000000000000;\r\n                tokens = div(msg.value*100000000, oneTokenInWei) * multiplier;\r\n                checkedSupply = add(totalSupply, tokens);\r\n                if (checkedSupply <= tokenCreationCap)\r\n                    {\r\n                        addTokens(tokens);\r\n                        stillAvailable = sub(stillAvailable, tokens);           //\r\n                    }\r\n                else\r\n                    revert ();\r\n            }\r\n        }\r\n        else if (currentPhase == Phase.ICO3){\r\n            {\r\n                oneTokenInWei = 47500000000000;\r\n                tokens = div(msg.value*100000000, oneTokenInWei) * multiplier;\r\n                checkedSupply = add(totalSupply, tokens);\r\n                if (checkedSupply <= tokenCreationCap)\r\n                    {\r\n                        addTokens(tokens);\r\n                        stillAvailable = sub(stillAvailable, tokens);           //\r\n                    }\r\n                else\r\n                    revert ();\r\n            }\r\n        }\r\n        else if (currentPhase == Phase.ICO4){\r\n            {\r\n                oneTokenInWei = 50000000000000;\r\n                tokens = div(msg.value*100000000, oneTokenInWei) * multiplier;\r\n                checkedSupply = add(totalSupply, tokens);\r\n                if (checkedSupply <= tokenCreationCap)\r\n                    {\r\n                        addTokens(tokens);\r\n                        stillAvailable = sub(stillAvailable, tokens);           //\r\n                    }\r\n                else\r\n                    revert ();\r\n            }\r\n        }\r\n        else if (currentPhase == Phase.END){\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function addTokens(uint256 tokens) internal {                               //updates received ETH and total supply, sends Seeds to contributor\r\n        require (msg.value >= 0 && msg.sender != address(0));\r\n        balances[msg.sender] = add(balances[msg.sender], tokens);\r\n        totalSupply = add(totalSupply, tokens);\r\n        totalEthReceivedinWei = add(totalEthReceivedinWei, msg.value);\r\n        CreateSEEDS(msg.sender, tokens);\r\n    }\r\n\r\n    function withdrawInWei(address _toAddress, uint256 amount) external onlyOwner {     //allow Seeds team to Withdraw collected Ether\r\n        require(_toAddress != address(0));\r\n        _toAddress.transfer(amount);\r\n        Withdraw(_toAddress, amount);\r\n    }\r\n\r\n    function setPreICOPhase() external onlyOwner {                              //set current Phase. Initial phase is set to \"END\".\r\n        currentPhase = Phase.PreICO;\r\n        StageChanged(\"Current stage: PreICO\");\r\n    }\r\n    \r\n    function setICO1Phase() external onlyOwner {\r\n        currentPhase = Phase.ICO1;\r\n        StageChanged(\"Current stage: ICO1\");\r\n    }\r\n    \r\n    function setICO2Phase() external onlyOwner {\r\n        currentPhase = Phase.ICO2;\r\n        StageChanged(\"Current stage: ICO2\");\r\n    }\r\n    \r\n    function setICO3Phase() external onlyOwner {\r\n        currentPhase = Phase.ICO3;\r\n        StageChanged(\"Current stage: ICO3\");\r\n    }\r\n    \r\n    function setICO4Phase() external onlyOwner {\r\n        currentPhase = Phase.ICO4;\r\n        StageChanged(\"Current stage: ICO4\");\r\n    }\r\n\r\n    function setENDPhase () external onlyOwner {\r\n        currentPhase = Phase.END;\r\n        StageChanged (\"Current stage: END\");\r\n    }\r\n\r\n    function generateTokens(address _receiver, uint256 _amount) external onlyOwner {    //token generation\r\n        require(_receiver != address(0));\r\n        balances[_receiver] = add(balances[_receiver], _amount);\r\n        totalSupply = add(totalSupply, _amount);\r\n        CreateSEEDS(_receiver, _amount);\r\n    }\r\n\r\n\tfunction airdropSEEDSinWei(address[] addresses, uint256 _value) onlyOwner { //distribute airdrop, value inserted with decimals\r\n         uint256 airdrop = _value;\r\n         uint256 airdropMax = 100000*10**decimals;\r\n         uint256 total = mul(airdrop, addresses.length);\r\n         if (toBeDistributedFree >= 0 && total<=airdropMax){\r\n             for (uint i = 0; i < addresses.length; i++) {\r\n\t            balances[owner] = sub(balances[owner], airdrop);\r\n                balances[addresses[i]] = add(balances[addresses[i]],airdrop);\r\n                Transfer(owner, addresses[i], airdrop);\r\n            }\r\n\t\t\ttotalDistributedinWei = add(totalDistributedinWei,total);\r\n\t\t\ttoBeDistributedFree = sub(toBeDistributedFree, totalDistributedinWei);\r\n         }\r\n         else\r\n            revert();\r\n       }\r\n    function bountySEEDSinWei(address[] addresses, uint256 _value) onlyOwner {  //distribute bounty, value inserted with decimals\r\n         uint256 bounty = _value;\r\n         uint256 total = mul(bounty, addresses.length);\r\n         if (toBeDistributedFree >= 0){\r\n             for (uint i = 0; i < addresses.length; i++) {\r\n\t            balances[owner] = sub(balances[owner], bounty);\r\n                balances[addresses[i]] = add(balances[addresses[i]],bounty);\r\n                Transfer(owner, addresses[i], bounty);\r\n            }\r\n\t\t\ttotalBountyinWei = add(totalBountyinWei,total);\r\n\t\t\ttoBeDistributedFree = sub(toBeDistributedFree, totalBountyinWei);\r\n         }\r\n         else\r\n            revert();\r\n       }\r\n       \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"airdropSEEDSinWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setICO1Phase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stillAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setICO2Phase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toBeDistributedFree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setENDPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBountyinWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setICO4Phase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bountySEEDSinWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setICO3Phase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFixedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPreICOPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributedinWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthReceivedinWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateSEEDS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"StageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SEEDSToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15508adb1726c751b4f62bc51f90f9fdd3f7d646b12366fc2b22b69c2cbc6b92"}]}