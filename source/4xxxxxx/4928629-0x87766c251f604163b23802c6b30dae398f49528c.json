{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'EVE' 'Devery EVE' crowdsale and token contracts\r\n//\r\n// Symbol      : EVE\r\n// Name        : Devery EVE\r\n// Total supply: Minted\r\n// Decimals    : 18\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's Token Teleportation Service Interface v1.00\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\ncontract BTTSTokenInterface is ERC20Interface {\r\n    uint public constant bttsVersion = 100;\r\n\r\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\r\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\r\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\r\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event MinterUpdated(address from, address to);\r\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\r\n    event MintingDisabled();\r\n    event TransfersEnabled();\r\n    event AccountUnlocked(address indexed tokenOwner);\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X} functions\r\n    // ------------------------------------------------------------------------\r\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\r\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\r\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\r\n\r\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\r\n    function unlockAccount(address tokenOwner) public;\r\n    function disableMinting() public;\r\n    function enableTransfers() public;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // signed{X}Check return status\r\n    // ------------------------------------------------------------------------\r\n    enum CheckResult {\r\n        Success,                           // 0 Success\r\n        NotTransferable,                   // 1 Tokens not transferable yet\r\n        AccountLocked,                     // 2 Account locked\r\n        SignerMismatch,                    // 3 Mismatch in signing account\r\n        AlreadyExecuted,                   // 4 Transfer already executed\r\n        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\r\n        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\r\n        InsufficientTokens,                // 7 Insufficient tokens\r\n        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\r\n        OverflowError                      // 9 Overflow error\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Parity PICOPS Whitelist Interface\r\n// ----------------------------------------------------------------------------\r\ncontract PICOPSCertifier {\r\n    function certified(address) public constant returns (bool);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Vesting Contract\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryVesting {\r\n    using SafeMath for uint;\r\n\r\n    DeveryCrowdsale public crowdsale;\r\n    uint public totalProportion;\r\n    uint public totalTokens;\r\n    uint public startDate;\r\n\r\n    struct Entry {\r\n        uint proportion;\r\n        uint periods;\r\n        uint periodLength;\r\n        uint withdrawn;\r\n    }\r\n    mapping (address => Entry) public entries;\r\n\r\n    event NewEntry(address indexed holder, uint proportion, uint periods, uint periodLength);\r\n    event Withdrawn(address indexed holder, uint withdrawn);\r\n\r\n    function DeveryVesting(address _crowdsale) public {\r\n        crowdsale = DeveryCrowdsale(_crowdsale);\r\n    }\r\n\r\n    function addEntryInDays(address holder, uint proportion, uint periods) public {\r\n        addEntry(holder, proportion, periods, 1 days);\r\n    }\r\n    function addEntryInMonths(address holder, uint proportion, uint periods) public {\r\n        addEntry(holder, proportion, periods, 30 days);\r\n    }\r\n    function addEntryInYears(address holder, uint proportion, uint periods) public {\r\n        addEntry(holder, proportion, periods, 365 days);\r\n    }\r\n\r\n    function addEntry(address holder, uint proportion, uint periods, uint periodLength) internal {\r\n        require(msg.sender == crowdsale.owner());\r\n        require(holder != address(0));\r\n        require(proportion > 0);\r\n        require(periods > 0);\r\n        require(entries[holder].proportion == 0);\r\n        entries[holder] = Entry({\r\n            proportion: proportion,\r\n            periods: periods,\r\n            periodLength: periodLength,\r\n            withdrawn: 0\r\n        });\r\n        totalProportion = totalProportion.add(proportion);\r\n        NewEntry(holder, proportion, periods, periodLength);\r\n    }\r\n\r\n    function tokenShare(address holder) public view returns (uint) {\r\n        uint result = 0;\r\n        Entry memory entry = entries[holder];\r\n        if (entry.proportion > 0 && totalProportion > 0) {\r\n            result = totalTokens.mul(entry.proportion).div(totalProportion);\r\n        }\r\n        return result;\r\n    }\r\n    function vested(address holder, uint time) public view returns (uint) {\r\n        uint result = 0;\r\n        if (startDate > 0 && time > startDate) {\r\n            Entry memory entry = entries[holder];\r\n            if (entry.proportion > 0 && totalProportion > 0) {\r\n                uint _tokenShare = totalTokens.mul(entry.proportion).div(totalProportion);\r\n                if (time >= startDate.add(entry.periods.mul(entry.periodLength))) {\r\n                    result = _tokenShare;\r\n                } else {\r\n                    uint periods = time.sub(startDate).div(entry.periodLength);\r\n                    result = _tokenShare.mul(periods).div(entry.periods);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function withdrawable(address holder) public view returns (uint) {\r\n        uint result = 0;\r\n        Entry memory entry = entries[holder];\r\n        if (entry.proportion > 0 && totalProportion > 0) {\r\n            uint _vested = vested(holder, now);\r\n            result = _vested.sub(entry.withdrawn);\r\n        }\r\n        return result;\r\n    }\r\n    function withdraw() public {\r\n        Entry storage entry = entries[msg.sender];\r\n        require(entry.proportion > 0 && totalProportion > 0);\r\n        uint _vested = vested(msg.sender, now);\r\n        uint _withdrawn = entry.withdrawn;\r\n        require(_vested > _withdrawn);\r\n        uint _withdrawable = _vested.sub(_withdrawn);\r\n        entry.withdrawn = _vested;\r\n        require(crowdsale.bttsToken().transfer(msg.sender, _withdrawable));\r\n        Withdrawn(msg.sender, _withdrawable);\r\n    }\r\n    function withdrawn(address holder) public view returns (uint) {\r\n        Entry memory entry = entries[holder];\r\n        return entry.withdrawn;\r\n    }\r\n\r\n    function finalise() public {\r\n        require(msg.sender == address(crowdsale));\r\n        totalTokens = crowdsale.bttsToken().balanceOf(address(this));\r\n        startDate = now;\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Crowdsale Contract\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryCrowdsale is Owned {\r\n    using SafeMath for uint;\r\n\r\n    BTTSTokenInterface public bttsToken;\r\n    uint8 public constant TOKEN_DECIMALS = 18;\r\n\r\n    ERC20Interface public presaleToken = ERC20Interface(0x8ca1d9C33c338520604044977be69a9AC19d6E54);\r\n    uint public presaleEthAmountsProcessed;\r\n    bool public presaleProcessed;\r\n    uint public constant PRESALE_BONUS_PERCENT = 5;\r\n\r\n    uint public constant PER_ACCOUNT_ADDITIONAL_TOKENS = 200 * 10**uint(TOKEN_DECIMALS);\r\n    mapping(address => bool) bonusTokensAllocate;\r\n\r\n    PICOPSCertifier public picopsCertifier = PICOPSCertifier(0x1e2F058C43ac8965938F6e9CA286685A3E63F24E);\r\n\r\n    address public wallet = 0x87410eE93BDa2445339c9372b20BF25e138F858C;\r\n    address public reserveWallet = 0x87410eE93BDa2445339c9372b20BF25e138F858C;\r\n    DeveryVesting public vestingTeamWallet;\r\n    uint public constant TEAM_PERCENT_EVE = 15;\r\n    uint public constant RESERVE_PERCENT_EVE = 25;\r\n    uint public constant TARGET_EVE = 100000000 * 10**uint(TOKEN_DECIMALS);\r\n    uint public constant PRESALEPLUSCROWDSALE_EVE = TARGET_EVE * (100 - TEAM_PERCENT_EVE - RESERVE_PERCENT_EVE) / 100;\r\n\r\n    // Start 18 Jan 2018 16:00 UTC => \"Fri, 19 Jan 2018 03:00:00 AEDT\"\r\n    // new Date(1516291200 * 1000).toUTCString() => \"Thu, 18 Jan 2018 16:00:00 UTC\"\r\n    uint public startDate = 1516291200;\r\n    uint public firstPeriodEndDate = startDate + 12 hours;\r\n    uint public endDate = startDate + 14 days;\r\n\r\n    // ETH/USD rate used 1,000\r\n    uint public usdPerKEther = 1000000;\r\n    uint public constant CAP_USD = 10000000;\r\n    uint public constant MIN_CONTRIBUTION_ETH = 0.01 ether;\r\n    uint public firstPeriodCap = 3 ether;\r\n\r\n    uint public contributedEth;\r\n    uint public contributedUsd;\r\n    uint public generatedEve;\r\n\r\n    mapping(address => uint) public accountEthAmount;\r\n\r\n    bool public finalised;\r\n\r\n    event BTTSTokenUpdated(address indexed oldBTTSToken, address indexed newBTTSToken);\r\n    event PICOPSCertifierUpdated(address indexed oldPICOPSCertifier, address indexed newPICOPSCertifier);\r\n    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\r\n    event ReserveWalletUpdated(address indexed oldReserveWallet, address indexed newReserveWallet);\r\n    event StartDateUpdated(uint oldStartDate, uint newStartDate);\r\n    event FirstPeriodEndDateUpdated(uint oldFirstPeriodEndDate, uint newFirstPeriodEndDate);\r\n    event EndDateUpdated(uint oldEndDate, uint newEndDate);\r\n    event UsdPerKEtherUpdated(uint oldUsdPerKEther, uint newUsdPerKEther);\r\n    event FirstPeriodCapUpdated(uint oldFirstPeriodCap, uint newFirstPeriodCap);\r\n    event Contributed(address indexed addr, uint ethAmount, uint ethRefund, uint accountEthAmount, uint usdAmount, uint bonusPercent, uint eveAmount, uint contributedEth, uint contributedUsd, uint generatedEve);\r\n\r\n    function DeveryCrowdsale() public {\r\n        vestingTeamWallet = new DeveryVesting(this);\r\n    }\r\n\r\n    function setBTTSToken(address _bttsToken) public onlyOwner {\r\n        require(now <= startDate);\r\n        BTTSTokenUpdated(address(bttsToken), _bttsToken);\r\n        bttsToken = BTTSTokenInterface(_bttsToken);\r\n    }\r\n    function setPICOPSCertifier(address _picopsCertifier) public onlyOwner {\r\n        require(now <= startDate);\r\n        PICOPSCertifierUpdated(address(picopsCertifier), _picopsCertifier);\r\n        picopsCertifier = PICOPSCertifier(_picopsCertifier);\r\n    }\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        WalletUpdated(wallet, _wallet);\r\n        wallet = _wallet;\r\n    }\r\n    function setReserveWallet(address _reserveWallet) public onlyOwner {\r\n        ReserveWalletUpdated(reserveWallet, _reserveWallet);\r\n        reserveWallet = _reserveWallet;\r\n    }\r\n    function setStartDate(uint _startDate) public onlyOwner {\r\n        require(_startDate >= now);\r\n        StartDateUpdated(startDate, _startDate);\r\n        startDate = _startDate;\r\n    }\r\n    function setFirstPeriodEndDate(uint _firstPeriodEndDate) public onlyOwner {\r\n        require(_firstPeriodEndDate >= now);\r\n        require(_firstPeriodEndDate >= startDate);\r\n        FirstPeriodEndDateUpdated(firstPeriodEndDate, _firstPeriodEndDate);\r\n        firstPeriodEndDate = _firstPeriodEndDate;\r\n    }\r\n    function setEndDate(uint _endDate) public onlyOwner {\r\n        require(_endDate >= now);\r\n        require(_endDate >= firstPeriodEndDate);\r\n        EndDateUpdated(endDate, _endDate);\r\n        endDate = _endDate;\r\n    }\r\n    function setUsdPerKEther(uint _usdPerKEther) public onlyOwner {\r\n        require(now <= startDate);\r\n        UsdPerKEtherUpdated(usdPerKEther, _usdPerKEther);\r\n        usdPerKEther = _usdPerKEther;\r\n    }\r\n    function setFirstPeriodCap(uint _firstPeriodCap) public onlyOwner {\r\n        require(_firstPeriodCap >= MIN_CONTRIBUTION_ETH);\r\n        FirstPeriodCapUpdated(firstPeriodCap, _firstPeriodCap);\r\n        firstPeriodCap = _firstPeriodCap;\r\n    }\r\n\r\n    // usdPerKEther = 1,000,000\r\n    // capEth       = USD 10,000,000 / 1,000 = 10,000\r\n    // presaleEth   = 4,561.764705882353\r\n    // crowdsaleEth = capEth - presaleEth\r\n    //              = 5,438.235294117647\r\n    // totalEve     = 100,000,000\r\n    // presalePlusCrowdsaleEve = 60% x totalEve = 60,000,000\r\n    // evePerEth x presaleEth x 1.05 + evePerEth x crowdsaleEth = presalePlusCrowdsaleEve\r\n    // evePerEth x (presaleEth x 1.05 + crowdsaleEth) = presalePlusCrowdsaleEve\r\n    // evePerEth = presalePlusCrowdsaleEve / (presaleEth x 1.05 + crowdsaleEth)\r\n    //           = 60,000,000/(4,561.764705882353*1.05 + 5,438.235294117647)\r\n    //           = 5,866.19890440108697\r\n    // usdPerEve = 1,000 / 5,866.19890440108697 = 0.170468137254902 \r\n\r\n    function capEth() public view returns (uint) {\r\n        return CAP_USD * 10**uint(3 + 18) / usdPerKEther;\r\n    }\r\n    function presaleEth() public view returns (uint) {\r\n        return presaleToken.totalSupply();\r\n    }\r\n    function crowdsaleEth() public view returns (uint) {\r\n        return capEth().sub(presaleEth());\r\n    }\r\n    function eveFromEth(uint ethAmount, uint bonusPercent) public view returns (uint) {\r\n        uint adjustedEth = presaleEth().mul(100 + PRESALE_BONUS_PERCENT).add(crowdsaleEth().mul(100)).div(100);\r\n        return ethAmount.mul(100 + bonusPercent).mul(PRESALEPLUSCROWDSALE_EVE).div(adjustedEth).div(100);\r\n    }\r\n    function evePerEth() public view returns (uint) {\r\n        return eveFromEth(10**18, 0);\r\n    }\r\n    function usdPerEve() public view returns (uint) {\r\n        uint evePerKEth = eveFromEth(10**(18 + 3), 0);\r\n        return usdPerKEther.mul(10**(18 + 18)).div(evePerKEth);\r\n    }\r\n\r\n    function generateTokensForPresaleAccounts(address[] accounts) public onlyOwner {\r\n        require(bttsToken != address(0));\r\n        require(!presaleProcessed);\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            address account = accounts[i];\r\n            uint ethAmount = presaleToken.balanceOf(account);\r\n            uint eveAmount = bttsToken.balanceOf(account);\r\n            if (eveAmount == 0 && ethAmount != 0) {\r\n                presaleEthAmountsProcessed = presaleEthAmountsProcessed.add(ethAmount);\r\n                accountEthAmount[account] = accountEthAmount[account].add(ethAmount);\r\n                eveAmount = eveFromEth(ethAmount, PRESALE_BONUS_PERCENT);\r\n                eveAmount = eveAmount.add(PER_ACCOUNT_ADDITIONAL_TOKENS);\r\n                bonusTokensAllocate[account] = true;\r\n                uint usdAmount = ethAmount.mul(usdPerKEther).div(10**uint(3 + 18));\r\n                contributedEth = contributedEth.add(ethAmount);\r\n                contributedUsd = contributedUsd.add(usdAmount);\r\n                generatedEve = generatedEve.add(eveAmount);\r\n                Contributed(account, ethAmount, 0, ethAmount, usdAmount, PRESALE_BONUS_PERCENT, eveAmount,\r\n                    contributedEth, contributedUsd, generatedEve);\r\n                bttsToken.mint(account, eveAmount, false);\r\n            }\r\n        }\r\n        if (presaleEthAmountsProcessed == presaleToken.totalSupply()) {\r\n            presaleProcessed = true;\r\n        }\r\n    }\r\n\r\n    function () public payable {\r\n        require(!finalised);\r\n        uint ethAmount = msg.value;\r\n        if (msg.sender == owner) {\r\n            require(msg.value == MIN_CONTRIBUTION_ETH);\r\n        } else {\r\n            require(now >= startDate && now <= endDate);\r\n            if (now <= firstPeriodEndDate) {\r\n                require(accountEthAmount[msg.sender].add(ethAmount) <= firstPeriodCap);\r\n                require(picopsCertifier.certified(msg.sender));\r\n            }\r\n        }\r\n        require(contributedEth < capEth());\r\n        require(msg.value >= MIN_CONTRIBUTION_ETH);\r\n        uint ethRefund = 0;\r\n        if (contributedEth.add(ethAmount) > capEth()) {\r\n            ethAmount = capEth().sub(contributedEth);\r\n            ethRefund = msg.value.sub(ethAmount);\r\n        }\r\n        uint usdAmount = ethAmount.mul(usdPerKEther).div(10**uint(3 + 18));\r\n        uint eveAmount = eveFromEth(ethAmount, 0);\r\n        if (picopsCertifier.certified(msg.sender) && !bonusTokensAllocate[msg.sender]) {\r\n            eveAmount = eveAmount.add(PER_ACCOUNT_ADDITIONAL_TOKENS);\r\n            bonusTokensAllocate[msg.sender] = true;\r\n        }\r\n        generatedEve = generatedEve.add(eveAmount);\r\n        contributedEth = contributedEth.add(ethAmount);\r\n        contributedUsd = contributedUsd.add(usdAmount);\r\n        accountEthAmount[msg.sender] = accountEthAmount[msg.sender].add(ethAmount);\r\n        bttsToken.mint(msg.sender, eveAmount, false);\r\n        if (ethAmount > 0) {\r\n            wallet.transfer(ethAmount);\r\n        }\r\n        Contributed(msg.sender, ethAmount, ethRefund, accountEthAmount[msg.sender], usdAmount, 0, eveAmount,\r\n            contributedEth, contributedUsd, generatedEve);\r\n        if (ethRefund > 0) {\r\n            msg.sender.transfer(ethRefund);\r\n        }\r\n    }\r\n\r\n    function roundUp(uint a) internal pure returns (uint) {\r\n        uint multiple = 10**uint(TOKEN_DECIMALS);\r\n        uint remainder = a % multiple;\r\n        if (remainder > 0) {\r\n            return a.add(multiple).sub(remainder);\r\n        }\r\n    }\r\n    function finalise() public onlyOwner {\r\n        require(!finalised);\r\n        require(now > endDate || contributedEth >= capEth());\r\n        uint total = generatedEve.mul(100).div(uint(100).sub(TEAM_PERCENT_EVE).sub(RESERVE_PERCENT_EVE));\r\n        uint amountTeam = total.mul(TEAM_PERCENT_EVE).div(100);\r\n        uint amountReserve = total.mul(RESERVE_PERCENT_EVE).div(100);\r\n        generatedEve = generatedEve.add(amountTeam).add(amountReserve);\r\n        uint rounded = roundUp(generatedEve);\r\n        if (rounded > generatedEve) {\r\n            uint dust = rounded.sub(generatedEve);\r\n            generatedEve = generatedEve.add(dust);\r\n            amountReserve = amountReserve.add(dust);\r\n        }\r\n        if (generatedEve > TARGET_EVE) {\r\n            uint diff = generatedEve.sub(TARGET_EVE);\r\n            generatedEve = TARGET_EVE;\r\n            amountReserve = amountReserve.sub(diff);\r\n        }\r\n        bttsToken.mint(address(vestingTeamWallet), amountTeam, false);\r\n        bttsToken.mint(reserveWallet, amountReserve, false);\r\n        bttsToken.disableMinting();\r\n        vestingTeamWallet.finalise();\r\n        finalised = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_firstPeriodEndDate\",\"type\":\"uint256\"}],\"name\":\"setFirstPeriodEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BONUS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"name\":\"eveFromEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"evePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_picopsCertifier\",\"type\":\"address\"}],\"name\":\"setPICOPSCertifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriodCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picopsCertifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerEve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_PERCENT_EVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_PERCENT_EVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TARGET_EVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEthAmountsProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generatedEve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPeriodEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"generateTokensForPresaleAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstPeriodCap\",\"type\":\"uint256\"}],\"name\":\"setFirstPeriodCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerKEther\",\"type\":\"uint256\"}],\"name\":\"setUsdPerKEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bttsToken\",\"type\":\"address\"}],\"name\":\"setBTTSToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PER_ACCOUNT_ADDITIONAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bttsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALEPLUSCROWDSALE_EVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldBTTSToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBTTSToken\",\"type\":\"address\"}],\"name\":\"BTTSTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldPICOPSCertifier\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPICOPSCertifier\",\"type\":\"address\"}],\"name\":\"PICOPSCertifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldReserveWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newReserveWallet\",\"type\":\"address\"}],\"name\":\"ReserveWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldStartDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStartDate\",\"type\":\"uint256\"}],\"name\":\"StartDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFirstPeriodEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFirstPeriodEndDate\",\"type\":\"uint256\"}],\"name\":\"FirstPeriodEndDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"EndDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdPerKEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdPerKEther\",\"type\":\"uint256\"}],\"name\":\"UsdPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFirstPeriodCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFirstPeriodCap\",\"type\":\"uint256\"}],\"name\":\"FirstPeriodCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accountEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"generatedEve\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DeveryCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aab05553f0e377ebb443ff051bff8a418f210848eabb0a6a924a29f3386fe3b6"}]}