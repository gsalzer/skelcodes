{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n        OwnershipTransferred (address(0), owner);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n        notZeroAddress(_newOwner)\r\n    {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    //Only owner can call function\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\r\n    /*\r\n        @return sum of a and b\r\n    */\r\n    function ADD (uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /*\r\n        @return difference of a and b\r\n    */\r\n    function SUB (uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n    \r\n}\r\n\r\n/*\tInterface of GeeToken contract */\r\ncontract Token {\r\n\r\n    function transfer(address _to, uint256 _value) \r\n        external;\r\n\r\n    function burn(uint256 _value) \r\n        external;\r\n\r\n}\r\n\r\n\r\ncontract GEECrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //VARIABLE\r\n    uint256 public soldTokens;                                  //Counts how many Gee coins are soldTokens\r\n    \r\n    uint256 public hardCapInTokens = 67 * (10**6) * (10**8);    //Hard cap in Gee coins (with 8 decimals)\r\n    \r\n    uint256 public constant MIN_ETHER = 0.03 ether;             //Min amount of Ether\r\n    uint256 public constant MAX_ETHER = 1000 ether;             //Max amount of Ether\r\n\r\n    \r\n    address fund = 0x48a2909772b049D0eA3A0979eE05eDF37119738d;  //Address where funds are forwarded during the ICO\r\n\r\n    \r\n    uint256 public constant START_BLOCK_NUMBER = 4506850;       //Start block\r\n    \r\n    uint256 public constant TIER2 = 4525700;                      //Start + 3 days\r\n    uint256 public constant TIER3 = 4569600;                     //Start + 10 days ( 3 days + 7 days)\r\n    uint256 public constant TIER4 = 4632300;                     //Start + 20 days ( 3 days + 7 days + 10 days)\r\n    uint256 public endBlockNumber = 4695000;                        //Start + 30 days\r\n    uint256 public constant MAX_END_BLOCK_NUMBER = 4890000;         //End + 30 days\r\n\r\n    uint256 public price;                                       //GEE price\r\n   \r\n    uint256 public constant TIER1_PRICE = 6000000;              //Price in 1st tier\r\n    uint256 public constant TIER2_PRICE = 6700000;              //Price in 2nd tier\r\n    uint256 public constant TIER3_PRICE = 7400000;              //Price in 3rd tier\r\n    uint256 public constant TIER4_PRICE = 8200000;              //Price in 4th tier\r\n\r\n    Token public gee;                                           //GeeToken contract\r\n\r\n    uint256 public constant SOFT_CAP_IN_ETHER = 4000 ether;    //softcap in ETH\r\n\r\n    uint256 public collected;                                   //saves how much ETH was collected\r\n\r\n    uint256 public constant GEE100 = 100 * (10**8);\r\n\r\n\r\n    //MAP\r\n    mapping (address => uint256) public bought;                 //saves how much ETH user spent on GEE\r\n\r\n\r\n    //EVENT\r\n    event Buy    (address indexed _who, uint256 _amount, uint256 indexed _price);   //Keep track of buyings\r\n    event Refund (address indexed _who, uint256 _amount);                           //Keep track of refunding\r\n    event CrowdsaleEndChanged (uint256 _crowdsaleEnd, uint256 _newCrowdsaleEnd);    //Notifies users about end block change\r\n\r\n\r\n    //FUNCTION\r\n    //Payable - can store ETH\r\n    function GEECrowdsale (Token _geeToken)\r\n        public\r\n        notZeroAddress(_geeToken)\r\n        payable\r\n    {\r\n        gee = _geeToken;\r\n    }\r\n\r\n\r\n    /* Fallback function is called when Ether is sent to the contract */\r\n    function() \r\n        external \r\n        payable \r\n    {\r\n        if (isCrowdsaleActive()) {\r\n            buy();\r\n        } else { \r\n            require (msg.sender == fund || msg.sender == owner);    //after crowdsale owner can send back eth for refund\r\n        }\r\n    }\r\n\r\n\r\n    /* Burn unsold GEE after crowdsale */\r\n    function finalize() \r\n        external\r\n        onlyOwner\r\n    {\r\n        require(soldTokens != hardCapInTokens);\r\n        if (soldTokens < (hardCapInTokens - GEE100)) {\r\n            require(block.number > endBlockNumber);\r\n        }\r\n        hardCapInTokens = soldTokens;\r\n        gee.burn(hardCapInTokens.SUB(soldTokens));\r\n    }\r\n\r\n\r\n    /* Buy tokens */\r\n    function buy()\r\n        public\r\n        payable\r\n    {\r\n        uint256 amountWei = msg.value;\r\n        uint256 blocks = block.number;\r\n\r\n\r\n        require (isCrowdsaleActive());\r\n        require(amountWei >= MIN_ETHER);                            //Ether limitation\r\n        require(amountWei <= MAX_ETHER);\r\n\r\n        price = getPrice();\r\n        \r\n        uint256 amount = amountWei / price;                         //Count how many GEE sender can buy\r\n\r\n        soldTokens = soldTokens.ADD(amount);                        //Add amount to soldTokens\r\n\r\n        require(soldTokens <= hardCapInTokens);\r\n\r\n        if (soldTokens >= (hardCapInTokens - GEE100)) {\r\n            endBlockNumber = blocks;\r\n        }\r\n        \r\n        collected = collected.ADD(amountWei);                       //counts ETH\r\n        bought[msg.sender] = bought[msg.sender].ADD(amountWei);\r\n\r\n        gee.transfer(msg.sender, amount);                           //Transfer amount of Gee coins to msg.sender\r\n        fund.transfer(this.balance);                                //Transfer contract Ether to fund\r\n\r\n        Buy(msg.sender, amount, price);\r\n    }\r\n\r\n\r\n    /* Return Crowdsale status, depending on block numbers and stopInEmergency() state */\r\n    function isCrowdsaleActive() \r\n        public \r\n        constant \r\n        returns (bool) \r\n    {\r\n\r\n        if (endBlockNumber < block.number || START_BLOCK_NUMBER > block.number) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /* Change tier taking block numbers as time */\r\n    function getPrice()\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        if (block.number < TIER2) {\r\n            return TIER1_PRICE;\r\n        } else if (block.number < TIER3) {\r\n            return TIER2_PRICE;\r\n        } else if (block.number < TIER4) {\r\n            return TIER3_PRICE;\r\n        }\r\n\r\n        return TIER4_PRICE;\r\n    }\r\n\r\n\r\n    /* Refund, if the soft cap is not reached */\r\n    function refund() \r\n        external \r\n    {\r\n        uint256 refund = bought[msg.sender];\r\n        require (!isCrowdsaleActive());\r\n        require (collected < SOFT_CAP_IN_ETHER);\r\n        bought[msg.sender] = 0;\r\n        msg.sender.transfer(refund);\r\n        Refund(msg.sender, refund);\r\n    }\r\n\r\n\r\n    function drainEther() \r\n        external \r\n        onlyOwner \r\n    {\r\n        fund.transfer(this.balance);\r\n    }\r\n\r\n    /*\r\n    Allows owner setting the new end block number to extend/close Crowdsale.\r\n    */\r\n    function setEndBlockNumber(uint256 _newEndBlockNumber) external onlyOwner {\r\n        require(isCrowdsaleActive());\r\n        require(_newEndBlockNumber >= block.number);\r\n        require(_newEndBlockNumber <= MAX_END_BLOCK_NUMBER);\r\n\r\n        uint256 currentEndBlockNumber = endBlockNumber;\r\n        endBlockNumber = _newEndBlockNumber;\r\n        CrowdsaleEndChanged (currentEndBlockNumber, _newEndBlockNumber);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER4_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER1_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER3_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP_IN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER2_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_END_BLOCK_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEE100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIER4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setEndBlockNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_BLOCK_NUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_geeToken\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_crowdsaleEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCrowdsaleEnd\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GEECrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004F4f0Db4de903B88f2B1a2847971E231D54F8fd3","Library":"","SwarmSource":"bzzr://254d5be3bda4ac88e3b821b82eae17d9a8293a6bc4c4c84e720b3715c86d4b34"}]}