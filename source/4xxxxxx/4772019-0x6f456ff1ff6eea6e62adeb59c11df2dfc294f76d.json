{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n        }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public wallet;\r\n\r\n    function Ownable() internal {\r\n        owner = msg.sender;\r\n        wallet = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EthColorAccount {\r\n    using SafeMath for uint256;\r\n\r\n    struct Account {\r\n        uint256 balance;\r\n        address referrer;\r\n    }\r\n\r\n    mapping (address => Account) accounts;\r\n\r\n    event Withdraw(address indexed withdrawAddress, uint256 withdrawValue);\r\n    event Transfer(address indexed addressFrom, address indexed addressTo, uint256 value, uint256 pixelId);\r\n\r\n    // Check account detail\r\n    function getAccountBalance(address userAddress) constant public returns (uint256) {\r\n        return accounts[userAddress].balance;\r\n    }\r\n    function getAccountReferrer(address userAddress) constant public returns (address) {\r\n        return accounts[userAddress].referrer;\r\n    }\r\n\r\n    // To withdraw your account balance from this contract.\r\n    function withdrawETH(uint256 amount) external {\r\n        assert(amount > 0);\r\n        assert(accounts[msg.sender].balance >= amount);\r\n\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(amount);\r\n        msg.sender.transfer(amount);\r\n        Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function transferToAccount(uint256 pixelId, address toWallet, uint256 permil, uint256 gridPrice) internal {\r\n        accounts[toWallet].balance = accounts[toWallet].balance.add(gridPrice.mul(permil).div(1000));\r\n        Transfer(msg.sender, toWallet, gridPrice.mul(permil).div(1000), pixelId);\r\n    }\r\n}\r\n\r\ncontract EthColor is Ownable, EthColorAccount {\r\n    using SafeMath for uint256;\r\n\r\n    struct Pixel {\r\n        uint256 color;\r\n        uint256 times;\r\n        address owner;\r\n        uint256 price;\r\n    }\r\n\r\n    Pixel [16384] public pixels;\r\n\r\n    string public constant name = \"Ethcolor\";\r\n    string public constant version = \"1.0.0\";\r\n    uint256 public constant initialPrice = 0.08 ether;\r\n\r\n    event Drawcolor(uint256 indexed drawGridLocation, address indexed drawerAddress, uint256 colorDraw, uint256 spend);\r\n\r\n    function getColors() constant public returns (uint256[16384]) {\r\n        uint256[16384] memory result;\r\n        for (uint256 i = 0; i < 16384; i++) {\r\n            result[i] = pixels[i].color;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTimes() constant public returns (uint256[16384]) {\r\n        uint256[16384] memory result;\r\n        for (uint256 i = 0; i < 16384; i++) {\r\n            result[i] = pixels[i].times;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getOwners() constant public returns (address[16384]) {\r\n        address[16384] memory result;\r\n        for (uint256 i = 0; i < 16384; i++) {\r\n            result[i] = pixels[i].owner;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function drawColors(uint256[] pixelIdxs, uint256[] colors, address referralAddress) payable public {\r\n        assert(pixelIdxs.length == colors.length);\r\n\r\n        // Set referral address\r\n        if ((accounts[msg.sender].referrer == address(0)) &&\r\n            (referralAddress != msg.sender) &&\r\n            (referralAddress != address(0))) {\r\n\r\n            accounts[msg.sender].referrer = referralAddress;\r\n        }\r\n\r\n        uint256 remainValue = msg.value;\r\n        uint256 price;\r\n        for (uint256 i = 0; i < pixelIdxs.length; i++) {\r\n            uint256 pixelIdx = pixelIdxs[i];\r\n            if (pixels[pixelIdx].times == 0) {\r\n                price = initialPrice.mul(9).div(10);\r\n            } else if (pixels[pixelIdx].times == 1){\r\n                price = initialPrice.mul(11).div(10);\r\n            } else {\r\n                price = pixels[pixelIdx].price.mul(11).div(10);\r\n            }\r\n\r\n            if (remainValue < price) {\r\n              // If the eth is not enough, the eth will be returned to his account on the contract.\r\n              transferToAccount(pixelIdx, msg.sender, 1000, remainValue);\r\n              break;\r\n            }\r\n\r\n            assert(colors[i] < 25);\r\n            remainValue = remainValue.sub(price);\r\n\r\n            // Update pixel\r\n            pixels[pixelIdx].color = colors[i];\r\n            pixels[pixelIdx].times = pixels[pixelIdx].times.add(1);\r\n            pixels[pixelIdx].price = price;\r\n            Drawcolor(pixelIdx, msg.sender, colors[i], price);\r\n\r\n            transferETH(pixelIdx , price);\r\n\r\n            // Update pixel owner\r\n            pixels[pixelIdx].owner = msg.sender;\r\n        }\r\n    }\r\n\r\n    // Transfer the ETH in contract balance\r\n    function transferETH(uint256 pixelId, uint256 drawPrice) internal {\r\n        // Transfer 97% to the last owner\r\n        if (pixels[pixelId].times > 1) {\r\n            transferToAccount(pixelId, pixels[pixelId].owner, 970, drawPrice);\r\n        } else {\r\n            transferToAccount(pixelId, wallet, 970, drawPrice);\r\n        }\r\n\r\n        if (accounts[msg.sender].referrer != address(0)) {\r\n            // If account is referred, transfer 1% to referrer and 1% to referree\r\n            transferToAccount(pixelId, accounts[msg.sender].referrer, 10, drawPrice);\r\n            transferToAccount(pixelId, msg.sender, 10, drawPrice);\r\n            transferToAccount(pixelId, wallet, 10, drawPrice);\r\n        } else {\r\n            transferToAccount(pixelId, wallet, 30, drawPrice);\r\n        }\r\n    }\r\n\r\n    function finalize() onlyOwner public {\r\n        require(msg.sender == wallet);\r\n        // Check for after the end time: 2018/12/31 23:59:59 UTC\r\n        require(now >= 1546300799);\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    // Fallback function\r\n    function () external {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"pixelIdxs\",\"type\":\"uint256[]\"},{\"name\":\"colors\",\"type\":\"uint256[]\"},{\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"drawColors\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[16384]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixels\",\"outputs\":[{\"name\":\"color\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[16384]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAccountReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[16384]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"drawGridLocation\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"drawerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"colorDraw\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spend\",\"type\":\"uint256\"}],\"name\":\"Drawcolor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawValue\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressFrom\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addressTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pixelId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EthColor","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef03259e9a298531f048c54e67edfefb21d035bcfffd8b1d79cd717a4ae991e3"}]}