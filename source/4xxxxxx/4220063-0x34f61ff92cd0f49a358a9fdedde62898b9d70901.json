{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface AbstractENS {\r\n    function owner(bytes32 node) constant returns(address);\r\n    function resolver(bytes32 node) constant returns(address);\r\n    function ttl(bytes32 node) constant returns(uint64);\r\n    function setOwner(bytes32 node, address owner);\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n    function setResolver(bytes32 node, address resolver);\r\n    function setTTL(bytes32 node, uint64 ttl);\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\ninterface InterCrypto_Interface {\r\n    // EVENTS\r\n    event ConversionStarted(uint indexed conversionID);\r\n    event ConversionSentToShapeShift(uint indexed conversionID, address indexed returnAddress, address indexed depositAddress, uint amount);\r\n    event ConversionAborted(uint indexed conversionID, string reason);\r\n    event Recovered(address indexed recoveredTo, uint amount);\r\n\r\n    // FUNCTIONS\r\n    function getInterCryptoPrice() constant public returns (uint);\r\n    function convert1(string _coinSymbol, string _toAddress) external payable returns (uint conversionID);\r\n    function convert2(string _coinSymbol, string _toAddress, address _returnAddress) external payable returns(uint conversionID);\r\n    function recover() external;\r\n    function recoverable(address myAddress) constant public returns (uint);\r\n    function cancelConversion(uint conversionID) external;\r\n}\r\n\r\ninterface AbstractPublicResolver {\r\n    function PublicResolver(address ensAddr);\r\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\r\n    function addr(bytes32 node) constant returns (address ret);\r\n    function setAddr(bytes32 node, address addr);\r\n    function hash(bytes32 node) constant returns (bytes32 ret);\r\n    function setHash(bytes32 node, bytes32 hash);\r\n}\r\n\r\ncontract usingInterCrypto is Ownable {\r\n    AbstractENS public abstractENS;\r\n    AbstractPublicResolver public abstractResolver;\r\n    InterCrypto_Interface public interCrypto;\r\n    \r\n    bytes32 public ResolverNode; // ENS Node name\r\n    bytes32 public InterCryptoNode; // ENS Node name\r\n    \r\n    function usingInterCrypto() public {\r\n        setNetwork();\r\n        updateResolver();\r\n        updateInterCrypto();\r\n        \r\n    }\r\n    \r\n    function setNetwork() internal returns(bool) {\r\n        if (getCodeSize(0x314159265dD8dbb310642f98f50C066173C1259b)>0){ //mainnet\r\n            abstractENS = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n            ResolverNode = 0xfdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f5; // resolver.eth\r\n            InterCryptoNode = 0x921a56636fce44f7cbd33eed763c940f580add9ffb4da7007f8ff6e99804a7c8; // intercrypto.jacksplace.eth\r\n        }\r\n        else if (getCodeSize(0xe7410170f87102df0055eb195163a03b7f2bff4a)>0){ //rinkeby\r\n            abstractENS = AbstractENS(0xe7410170f87102df0055eb195163a03b7f2bff4a);\r\n            ResolverNode = 0xf2cf3eab504436e1b5a541dd9fbc5ac8547b773748bbf2bb81b350ee580702ca; // jackdomain.test\r\n            InterCryptoNode = 0xbe93c9e419d658afd89a8650dd90e37e763e75da1e663b9d57494aedf27f3eaa; // intercrypto.jackdomain.test\r\n        }\r\n        else if (getCodeSize(0x112234455c3a32fd11230c42e7bccd4a84e02010)>0){ //ropsten\r\n            abstractENS = AbstractENS(0x112234455c3a32fd11230c42e7bccd4a84e02010);\r\n            ResolverNode = 0xf2cf3eab504436e1b5a541dd9fbc5ac8547b773748bbf2bb81b350ee580702ca; // jackdomain.test\r\n            InterCryptoNode = 0xbe93c9e419d658afd89a8650dd90e37e763e75da1e663b9d57494aedf27f3eaa; // intercrypto.jackdomain.test\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function updateResolver() onlyOwner public {\r\n        abstractResolver = AbstractPublicResolver(abstractENS.resolver(ResolverNode));\r\n    }\r\n        \r\n    function updateInterCrypto() onlyOwner public {\r\n        interCrypto = InterCrypto_Interface(abstractResolver.addr(InterCryptoNode));\r\n    }\r\n    \r\n    function updateInterCryptonode(bytes32 newNodeName) onlyOwner public {\r\n        InterCryptoNode = newNodeName;\r\n    }\r\n        \r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n        return _size;\r\n    }\r\n    \r\n    function intercrypto_convert(uint amount, string _coinSymbol, string _toAddress) internal returns (uint conversionID) {\r\n        return interCrypto.convert1.value(amount)(_coinSymbol, _toAddress);\r\n    }\r\n    \r\n    function intercrypto_convert(uint amount, string _coinSymbol, string _toAddress, address _returnAddress) internal returns(uint conversionID) {\r\n        return interCrypto.convert2.value(amount)(_coinSymbol, _toAddress, _returnAddress);\r\n    }\r\n    \r\n    // If you want to allow public use of functions getInterCryptoPrice(), recover(), recoverable() or cancelConversion() then please copy the following as necessary\r\n    // into your smart contract. They are not included by default for security reasons.\r\n    \r\n    // function intercrypto_getInterCryptoPrice() constant public returns (uint) {\r\n    //     return interCrypto.getInterCryptoPrice();\r\n    // }\r\n    // function intercrypto_recover() onlyOwner public {\r\n    //     interCrypto.recover();\r\n    // }\r\n    // function intercrypto_recoverable() constant public returns (uint) {\r\n    //     return interCrypto.recoverable(this);\r\n    // }\r\n    // function intercrypto_cancelConversion(uint conversionID) onlyOwner external {\r\n    //     interCrypto.cancelConversion(conversionID);\r\n    // }\r\n}\r\n\r\ncontract InterCrypto_Wallet is usingInterCrypto {\r\n\r\n    event Deposit(address indexed deposit, uint amount);\r\n    event WithdrawalNormal(address indexed withdrawal, uint amount);\r\n    event WithdrawalInterCrypto(uint indexed conversionID);\r\n\r\n    mapping (address => uint) public funds;\r\n    \r\n    function InterCrypto_Wallet() {}\r\n\r\n    function () payable {}\r\n    \r\n    function deposit() payable {\r\n      if (msg.value > 0) {\r\n          funds[msg.sender] += msg.value;\r\n          Deposit(msg.sender, msg.value);\r\n      }\r\n    }\r\n    \r\n    function intercrypto_getInterCryptoPrice() constant public returns (uint) {\r\n        return interCrypto.getInterCryptoPrice();\r\n    }\r\n    \r\n    function withdrawalNormal() payable external {\r\n        uint amount = funds[msg.sender] + msg.value;\r\n        funds[msg.sender] = 0;\r\n        if(msg.sender.send(amount)) {\r\n            WithdrawalNormal(msg.sender, amount);\r\n        }\r\n        else {\r\n            funds[msg.sender] = amount;\r\n        }\r\n    }\r\n    \r\n    function withdrawalInterCrypto(string _coinSymbol, string _toAddress) external payable {\r\n        uint amount = funds[msg.sender] + msg.value;\r\n        funds[msg.sender] = 0;\r\n        uint conversionID = intercrypto_convert(amount, _coinSymbol, _toAddress);\r\n        WithdrawalInterCrypto(conversionID);\r\n    }\r\n    \r\n    \r\n    function intercrypto_recover() onlyOwner public {\r\n        interCrypto.recover();\r\n    }\r\n    \r\n    function intercrypto_recoverable() constant public returns (uint) {\r\n        return interCrypto.recoverable(this);\r\n    }\r\n    \r\n    function intercrypto_cancelConversion(uint conversionID) onlyOwner external {\r\n        interCrypto.cancelConversion(conversionID);\r\n    }\r\n    \r\n    function kill() onlyOwner external {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"intercrypto_getInterCryptoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ResolverNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterCryptoNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coinSymbol\",\"type\":\"string\"},{\"name\":\"_toAddress\",\"type\":\"string\"}],\"name\":\"withdrawalInterCrypto\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateInterCrypto\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"conversionID\",\"type\":\"uint256\"}],\"name\":\"intercrypto_cancelConversion\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalNormal\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interCrypto\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNodeName\",\"type\":\"bytes32\"}],\"name\":\"updateInterCryptonode\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abstractResolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intercrypto_recoverable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abstractENS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"intercrypto_recover\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"deposit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalNormal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"conversionID\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInterCrypto\",\"type\":\"event\"}]","ContractName":"InterCrypto_Wallet","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dd0265ef0ee83c7a9c14577a85a5a5773c5674001d8c177f094e387088e00fa7"}]}