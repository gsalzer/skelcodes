{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract OysterPearl {\r\n    // Public variables of PRL\r\n    string public name = \"Oyster Pearl\";\r\n    string public symbol = \"TPRL\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 public funds = 0;\r\n    address public owner;\r\n    bool public saleClosed = true;\r\n    bool public ownerLock = false;\r\n    uint256 public claimAmount;\r\n    uint256 public payAmount;\r\n    uint256 public feeAmount;\r\n    uint256 public epoch;\r\n    uint256 public retentionMax;\r\n\r\n    //this creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public buried;\r\n    mapping (address => uint256) public claimed;\r\n\r\n    //this generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    //this notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    //this notifies clients about the an address getting buried\r\n    event Bury(address indexed target, uint256 value);\r\n    \r\n    //this notifies clients about a claim being made on a buried address\r\n    event Claim(address indexed target, address indexed payout, address indexed fee);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract\r\n     */\r\n    function OysterPearl() public {\r\n        owner = msg.sender;\r\n        totalSupply = 0;\r\n        \r\n        // Marketing share (5%)\r\n        totalSupply += 25000000 * 10 ** uint256(decimals);\r\n        \r\n        // Devfund share (15%)\r\n        totalSupply += 75000000 * 10 ** uint256(decimals);\r\n        \r\n        // Allocation to match PREPRL supply\r\n        totalSupply += 1000000 * 10 ** uint256(decimals);\r\n        \r\n        // Assign reserved PRL supply to contract owner\r\n        balanceOf[owner] = totalSupply;\r\n        \r\n        claimAmount = 5 * 10 ** (uint256(decimals) - 1);\r\n        payAmount = 4 * 10 ** (uint256(decimals) - 1);\r\n        feeAmount = 1 * 10 ** (uint256(decimals) - 1);\r\n        \r\n        //seconds in a year 31556952\r\n        epoch = 60;\r\n        \r\n        //Maximum time for a sector to remain stored\r\n        retentionMax = 40 * 10 ** uint256(decimals);\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        // Owner can lock themselves out to complete decentralization of Oyster network\r\n        require(!ownerLock);\r\n        \r\n        // Lockout will occur eventually, guaranteeing Oyster decentralization\r\n        require(block.number < 8000000);\r\n        \r\n        // Only the contract owner is permitted\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerForce {\r\n        // Only the contract owner is permitted\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Transfers the contract owner to a new address\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwnerForce {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /**\r\n     * Withdraw funds from the crowdsale\r\n     */\r\n    function withdrawFunds() public onlyOwnerForce {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    /**\r\n     * Permanently lock out the contract owner to decentralize Oyster\r\n     */\r\n    function selfLock() public onlyOwner {\r\n        // The sale must be closed before the owner gets locked out\r\n        require(saleClosed);\r\n        // Permanently lock out the contract owner\r\n        ownerLock = true;\r\n    }\r\n    \r\n    /**\r\n     * Contract owner can alter the storage-peg and broker fees\r\n     */\r\n    function amendClaim(uint8 claimAmountSet, uint8 payAmountSet, uint8 feeAmountSet) public onlyOwner {\r\n        require(claimAmountSet == (payAmountSet + feeAmountSet));\r\n        \r\n        claimAmount = claimAmountSet * 10 ** (uint256(decimals) - 1);\r\n        payAmount = payAmountSet * 10 ** (uint256(decimals) - 1);\r\n        feeAmount = feeAmountSet * 10 ** (uint256(decimals) - 1);\r\n    }\r\n    \r\n    /**\r\n     * Contract owner can alter the epoch time\r\n     */\r\n    function amendEpoch(uint256 epochSet) public onlyOwner {\r\n        // Set the epoch\r\n        epoch = epochSet;\r\n    }\r\n    \r\n    /**\r\n     * Contract owner can alter the maximum storage retention\r\n     */\r\n    function amendRetention(uint8 retentionSet) public onlyOwner {\r\n        // Set RetentionMax\r\n        retentionMax = retentionSet * 10 ** uint256(decimals);\r\n    }\r\n    \r\n    /**\r\n     * Contract owner can close the crowdsale\r\n     */\r\n    function closeSale() public onlyOwner {\r\n        // The sale must be currently open\r\n        require(!saleClosed);\r\n        // Lock the crowdsale\r\n        saleClosed = true;\r\n    }\r\n\r\n    /**\r\n     * Contract owner can open the crowdsale\r\n     */\r\n    function openSale() public onlyOwner {\r\n        // The sale must be currently closed\r\n        require(saleClosed);\r\n        // Unlock the crowdsale\r\n        saleClosed = false;\r\n    }\r\n    \r\n    /**\r\n     * Oyster Protocol Function\r\n     * More information at https://oyster.ws/OysterWhitepaper.pdf\r\n     * \r\n     * Bury an address\r\n     *\r\n     * When an address is buried; only claimAmount can be withdrawn once per epoch\r\n     *\r\n     */\r\n    function bury() public {\r\n        // The address must be previously unburied\r\n        require(!buried[msg.sender]);\r\n        \r\n        // An address must have atleast claimAmount to be buried\r\n        require(balanceOf[msg.sender] > claimAmount);\r\n        \r\n        // Prevent addresses with large balances from getting buried\r\n        require(balanceOf[msg.sender] <= retentionMax);\r\n        \r\n        // Set buried state to true\r\n        buried[msg.sender] = true;\r\n        \r\n        // Set the initial claim clock to 1\r\n        claimed[msg.sender] = 1;\r\n        \r\n        // Execute an event reflecting the change\r\n        Bury(msg.sender, balanceOf[msg.sender]);\r\n    }\r\n    \r\n    /**\r\n     * Oyster Protocol Function\r\n     * More information at https://oyster.ws/OysterWhitepaper.pdf\r\n     * \r\n     * Claim PRL from a buried address\r\n     *\r\n     * If a prior claim wasn't made during the current epoch\r\n     *\r\n     * @param _payout The address of the recipient\r\n     * @param _fee the amount to send\r\n     */\r\n    function claim(address _payout, address _fee) public {\r\n        // The claimed address must have already been buried\r\n        require(buried[msg.sender]);\r\n        \r\n        // The payout and fee addresses must be different\r\n        require(_payout != _fee);\r\n        \r\n        // The claimed address cannot pay itself\r\n        require(msg.sender != _payout);\r\n        \r\n        // The claimed address cannot pay itself\r\n        require(msg.sender != _fee);\r\n        \r\n        // It must be either the first time this address is being claimed or atleast epoch in time has passed\r\n        require(claimed[msg.sender] == 1 || (block.timestamp - claimed[msg.sender]) >= epoch);\r\n        \r\n        // Check if the buried address has enough\r\n        require(balanceOf[msg.sender] >= claimAmount);\r\n        \r\n        // Reset the claim clock to the current time\r\n        claimed[msg.sender] = block.timestamp;\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_payout] + balanceOf[_fee];\r\n        \r\n        // Remove claimAmount from the buried address\r\n        balanceOf[msg.sender] -= claimAmount;\r\n        \r\n        // Pay the website owner that invoked the webnode that found the PRL seed key\r\n        balanceOf[_payout] += payAmount;\r\n        \r\n        // Pay the broker node that unlocked the PRL\r\n        balanceOf[_fee] += feeAmount;\r\n        \r\n        // Execute events to reflect the changes\r\n        Transfer(msg.sender, _payout, payAmount);\r\n        Transfer(msg.sender, _fee, feeAmount);\r\n        Claim(msg.sender, _payout, _fee);\r\n        \r\n        // Asserts are used to use static analysis to find bugs in your code, they should never fail\r\n        assert(balanceOf[msg.sender] + balanceOf[_payout] + balanceOf[_fee] == previousBalances);\r\n    }\r\n    \r\n    /**\r\n     * Crowdsale function\r\n     */\r\n    function () payable public {\r\n        // Check if crowdsale is still active\r\n        require(!saleClosed);\r\n        \r\n        // Minimum amount is 1 finney\r\n        require(msg.value >= 1 finney);\r\n        \r\n        // Price is 1 ETH = 5000 PRL\r\n        uint256 amount = msg.value * 5000;\r\n        \r\n        // totalSupply limit is 500 million PRL\r\n        require(totalSupply + amount <= (500000000 * 10 ** uint256(decimals)));\r\n        \r\n        // Increases the total supply\r\n        totalSupply += amount;\r\n        \r\n        // Adds the amount to buyer's balance\r\n        balanceOf[msg.sender] += amount;\r\n        \r\n        // Track ETH amount raised\r\n        funds += msg.value;\r\n        \r\n        // Execute an event reflecting the change\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Sending addresses cannot be buried\r\n        require(!buried[_from]);\r\n        \r\n        // If the receiving addresse is buried, it cannot exceed retentionMax\r\n        if (buried[_to]) {\r\n            require(balanceOf[_to] + _value <= retentionMax);\r\n        }\r\n        \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        \r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        \r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        \r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        \r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        \r\n        // Asserts are used to use static analysis to find bugs in your code, they should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        // Buried addresses cannot be approved\r\n        require(!buried[_spender]);\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        // Buried addresses cannot be burnt\r\n        require(!buried[msg.sender]);\r\n        \r\n        // Check if the sender has enough\r\n        require(balanceOf[msg.sender] >= _value);\r\n        \r\n        // Subtract from the sender\r\n        balanceOf[msg.sender] -= _value;\r\n        \r\n        // Updates totalSupply\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        // Buried addresses cannot be burnt\r\n        require(!buried[_from]);\r\n        \r\n        // Check if the targeted balance is enough\r\n        require(balanceOf[_from] >= _value);\r\n        \r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        \r\n        // Subtract from the targeted balance\r\n        balanceOf[_from] -= _value;\r\n        \r\n        // Subtract from the sender's allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        \r\n        // Update totalSupply\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ownerLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retentionSet\",\"type\":\"uint8\"}],\"name\":\"amendRetention\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payout\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retentionMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buried\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"epochSet\",\"type\":\"uint256\"}],\"name\":\"amendEpoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimAmountSet\",\"type\":\"uint8\"},{\"name\":\"payAmountSet\",\"type\":\"uint8\"},{\"name\":\"feeAmountSet\",\"type\":\"uint8\"}],\"name\":\"amendClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"payout\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fee\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"OysterPearl","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3dcd8e84a084b123c7d01c65c8bf7286e1925652f5aef7dcab538986d19fff6b"}]}