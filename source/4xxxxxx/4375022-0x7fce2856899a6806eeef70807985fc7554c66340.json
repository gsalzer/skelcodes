{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n *\r\n */\r\ncontract SafeMath {\r\n    //internals\r\n\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface Token {\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    /**\r\n     * Reviewed:\r\n     * - Integer overflow = OK, checked\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            //if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\n/**\r\n * CLP crowdsale ICO contract.\r\n *\r\n */\r\ncontract CLPToken is StandardToken, SafeMath {\r\n\r\n    string public name = \"CLP Token\";\r\n    string public symbol = \"CLP\";\r\n\tuint public decimals = 9;\r\n\r\n    // Initial founder address (set in constructor)\r\n    // This address handle administration of the token.\r\n    address public founder = 0x0;\r\n\t\r\n    // Block timing/contract unlocking information\r\n\tuint public month6companyUnlock = 1525132801; // May 01, 2018 UTC\r\n\tuint public month12companyUnlock = 1541030401; // Nov 01, 2018 UTC\r\n\tuint public month18companyUnlock = 1556668801; // May 01, 2019 UTC\r\n\tuint public month24companyUnlock = 1572566401; // Nov 01, 2019 UTC\r\n    uint public year1Unlock = 1541030401; // Nov 01, 2018 UTC\r\n    uint public year2Unlock = 1572566401; // Nov 01, 2019 UTC\r\n    uint public year3Unlock = 1604188801; // Nov 01, 2020 UTC\r\n    uint public year4Unlock = 1635724801; // Nov 01, 2021 UTC\r\n\r\n    // Have the post-reward allocations been completed\r\n    bool public allocated1Year = false;\r\n    bool public allocated2Year = false;\r\n    bool public allocated3Year = false;\r\n    bool public allocated4Year = false;\r\n\t\r\n\tbool public allocated6Months = false;\r\n    bool public allocated12Months = false;\r\n    bool public allocated18Months = false;\r\n    bool public allocated24Months = false;\r\n\r\n    // Token count information\r\n\tuint currentTokenSaled = 0;\r\n    uint public totalTokensSale = 87000000 * 10**decimals;\r\n    uint public totalTokensReserve = 39000000 * 10**decimals; \r\n    uint public totalTokensCompany = 24000000 * 10**decimals;\r\n\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n    event Withdraw(address indexed sender, address to, uint eth);\r\n    event AllocateTokens(address indexed sender);\r\n\r\n    function CLPToken() {\r\n        /*\r\n            Initialize the contract with a sane set of owners\r\n        */\r\n        founder = msg.sender;\r\n    }\r\n\r\n\t/*\r\n        Allocate reserved tokens based on the running time and state of the contract.\r\n     */\r\n    function allocateReserveCompanyTokens() {\r\n        require(msg.sender==founder);\r\n        uint tokens = 0;\r\n\r\n        if(block.timestamp > month6companyUnlock && !allocated6Months)\r\n        {\r\n            allocated6Months = true;\r\n            tokens = safeDiv(totalTokensCompany, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > month12companyUnlock && !allocated12Months)\r\n        {\r\n            allocated12Months = true;\r\n            tokens = safeDiv(totalTokensCompany, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > month18companyUnlock && !allocated18Months)\r\n        {\r\n            allocated18Months = true;\r\n            tokens = safeDiv(totalTokensCompany, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > month24companyUnlock && !allocated24Months)\r\n        {\r\n            allocated24Months = true;\r\n            tokens = safeDiv(totalTokensCompany, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else revert();\r\n\r\n        AllocateTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n        Allocate reserved tokens based on the running time and state of the contract.\r\n     */\r\n    function allocateReserveTokens() {\r\n        require(msg.sender==founder);\r\n        uint tokens = 0;\r\n\r\n        if(block.timestamp > year1Unlock && !allocated1Year)\r\n        {\r\n            allocated1Year = true;\r\n            tokens = safeDiv(totalTokensReserve, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > year2Unlock && !allocated2Year)\r\n        {\r\n            allocated2Year = true;\r\n            tokens = safeDiv(totalTokensReserve, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > year3Unlock && !allocated3Year)\r\n        {\r\n            allocated3Year = true;\r\n            tokens = safeDiv(totalTokensReserve, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else if(block.timestamp > year4Unlock && !allocated4Year)\r\n        {\r\n            allocated4Year = true;\r\n            tokens = safeDiv(totalTokensReserve, 4);\r\n            balances[founder] = safeAdd(balances[founder], tokens);\r\n            totalSupply = safeAdd(totalSupply, tokens);\r\n        }\r\n        else revert();\r\n\r\n        AllocateTokens(msg.sender);\r\n    }\r\n\r\n\r\n   /**\r\n    *   Change founder address (Controlling address for contract)\r\n    */\r\n    function changeFounder(address newFounder) {\r\n        require(msg.sender==founder);\r\n        founder = newFounder;\r\n    }\r\n\r\n\t/**\r\n    *   Get current total token sale\r\n    */\r\n    function getTotalCurrentSaled() constant returns (uint256 currentTokenSaled)  {\r\n\t\trequire(msg.sender==founder);\r\n\t\t\r\n\t\treturn currentTokenSaled;\r\n    }\r\n\r\n   /**\r\n    *   Send token to investor\r\n    */\r\n    function addInvestorList(address investor, uint256 amountToken)  returns (bool success) {\r\n\t\trequire(msg.sender==founder);\r\n\t\t\r\n\t\tif(currentTokenSaled + amountToken <= totalTokensSale)\r\n\t\t{\r\n\t\t\tbalances[investor] = safeAdd(balances[investor], amountToken);\r\n\t\t\tcurrentTokenSaled = safeAdd(currentTokenSaled, amountToken);\r\n\t\t\ttotalSupply = safeAdd(totalSupply, amountToken);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    return false;\r\n\t\t}\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year4Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated2Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCurrentSaled\",\"outputs\":[{\"name\":\"currentTokenSaled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated4Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year3Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated3Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month12companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month6companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated1Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month24companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month18companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year2Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year1Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateReserveCompanyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"addInvestorList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CLPToken","CompilerVersion":"v0.4.18-nightly.2017.10.16+commit.dbc8655b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12c962875f5516eaa5a809b458529e68bfc0add38eb7e3e69e8b826a133641eb"}]}