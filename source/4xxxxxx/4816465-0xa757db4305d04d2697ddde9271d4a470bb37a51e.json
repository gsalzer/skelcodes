{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT,\r\n        ERROR_OBJ_NOT_FOUND,\r\n        ERROR_OBJ_INVALID_OWNERSHIP\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n\r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ncontract EtheremonBattle is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    uint8 constant public NO_MONSTER = 3;\r\n    uint8 constant public STAT_COUNT = 6;\r\n    uint8 constant public GEN0_NO = 24;\r\n\r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    } \r\n    \r\n    uint8 public maxLevel = 100;\r\n    \r\n    // linked smart contract\r\n    address public dataContract;\r\n    \r\n    // modifier\r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n\r\n    function EtheremonBattle(address _dataContract) public {\r\n        dataContract = _dataContract;\r\n    }\r\n     \r\n    \r\n    function setContract(address _dataContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n    }\r\n    \r\n    // public \r\n    \r\n    function getLevel(uint32 exp) view public returns (uint8) {\r\n        uint8 level = 1;\r\n        uint32 requirement = maxLevel;\r\n        while(level < maxLevel && exp > requirement) {\r\n            exp -= requirement;\r\n            level += 1;\r\n            requirement = requirement * 11 / 10 + 5;\r\n        }\r\n        return level;\r\n    }\r\n\r\n    \r\n    function getMonsterLevel(uint64 _objId) constant external returns(uint32, uint8) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n     \r\n        return (obj.exp, getLevel(obj.exp));\r\n    }\r\n    \r\n    function getMonsterCP(uint64 _objId) constant external returns(uint64) {\r\n        uint16[6] memory stats;\r\n        uint32 classId = 0;\r\n        uint32 exp = 0;\r\n        (classId, exp, stats) = getCurrentStats(_objId);\r\n        \r\n        uint256 total;\r\n        for(uint i=0; i < STAT_COUNT; i+=1) {\r\n            total += stats[i];\r\n        }\r\n        return uint64(total/STAT_COUNT);\r\n    }\r\n\r\n    function getObjExp(uint64 _objId) constant public returns(uint32, uint32) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (_objId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        return (obj.classId, obj.exp);\r\n    }    \r\n    \r\n    function getCurrentStats(uint64 _objId) constant public returns(uint32, uint32, uint16[6]){\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        uint16[6] memory stats;\r\n        uint32 classId;\r\n        uint32 exp;\r\n        (classId, exp) = getObjExp(_objId);\r\n        if (classId == 0)\r\n            return (classId, exp, stats);\r\n        \r\n        uint i = 0;\r\n        uint8 level = getLevel(exp);\r\n        uint baseSize = data.getSizeArrayType(ArrayType.STAT_BASE, _objId);\r\n        if (baseSize != STAT_COUNT) {\r\n            for(i=0; i < STAT_COUNT; i+=1) {\r\n                stats[i] += data.getElementInArrayType(ArrayType.STAT_START, uint64(classId), i);\r\n                stats[i] += uint16(safeMult(data.getElementInArrayType(ArrayType.STAT_STEP, uint64(classId), i), level));\r\n            }\r\n        } else {\r\n            for(i=0; i < STAT_COUNT; i+=1) {\r\n                stats[i] += data.getElementInArrayType(ArrayType.STAT_BASE, _objId, i);\r\n                stats[i] += uint16(safeMult(data.getElementInArrayType(ArrayType.STAT_STEP, uint64(classId), i), level));\r\n            }\r\n        }\r\n        return (classId, exp, stats);\r\n    }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterCP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getObjExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_NO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_MONSTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getCurrentStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint16[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtheremonBattle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e","Library":"","SwarmSource":"bzzr://db4118a25eaaaf77cb4e552be6cf4e281acbd85bbbfe51fc9871ae3ef14b278b"}]}