{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract LockableChanges is Ownable {\r\n    \r\n  bool public changesLocked;\r\n  \r\n  modifier notLocked() {\r\n    require(!changesLocked);\r\n    _;\r\n  }\r\n  \r\n  function lockChanges() public onlyOwner {\r\n    changesLocked = true;\r\n  }\r\n    \r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract TWNSharesToken is StandardToken, Ownable {\t\r\n\r\n  using SafeMath for uint256;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n    \r\n  string public constant name = \"TWN Shares\";\r\n   \r\n  string public constant symbol = \"TWN\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  bool public mintingFinished = false;\r\n \r\n  address public saleAgent;\r\n\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(saleAgent == msg.sender || owner == msg.sender);\r\n    saleAgent = newSaleAgent;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(!mintingFinished);\r\n    require(msg.sender == saleAgent);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public returns (bool) {\r\n    require(!mintingFinished);\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract CommonCrowdsale is Ownable, LockableChanges {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint public constant PERCENT_RATE = 100;\r\n\r\n  uint public price;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  uint public hardcap;\r\n\r\n  uint public start;\r\n\r\n  uint public end;\r\n\r\n  uint public invested;\r\n\r\n  uint public minted;\r\n  \r\n  address public wallet;\r\n\r\n  address public bountyTokensWallet;\r\n\r\n  address public devTokensWallet;\r\n\r\n  address public advisorsTokensWallet;\r\n\r\n  address public foundersTokensWallet;\r\n\r\n  uint public bountyTokensPercent;\r\n\r\n  uint public devTokensPercent;\r\n\r\n  uint public advisorsTokensPercent;\r\n\r\n  uint public foundersTokensPercent;\r\n\r\n  struct Bonus {\r\n    uint periodInDays;\r\n    uint bonus;\r\n  }\r\n\r\n  Bonus[] public bonuses;\r\n\r\n  TWNSharesToken public token;\r\n\r\n  modifier saleIsOn() {\r\n    require(msg.value >= minInvestedLimit && now >= start && now < end && invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner notLocked { \r\n    hardcap = newHardcap;\r\n  }\r\n \r\n  function setStart(uint newStart) public onlyOwner { \r\n    start = newStart;\r\n  }\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner { \r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner { \r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setAdvisorsTokensPercent(uint newAdvisorsTokensPercent) public onlyOwner { \r\n    advisorsTokensPercent = newAdvisorsTokensPercent;\r\n  }\r\n\r\n  function setDevTokensPercent(uint newDevTokensPercent) public onlyOwner { \r\n    devTokensPercent = newDevTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner { \r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner { \r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setAdvisorsTokensWallet(address newAdvisorsTokensWallet) public onlyOwner { \r\n    advisorsTokensWallet = newAdvisorsTokensWallet;\r\n  }\r\n\r\n  function setDevTokensWallet(address newDevTokensWallet) public onlyOwner { \r\n    devTokensWallet = newDevTokensWallet;\r\n  }\r\n\r\n  function setEnd(uint newEnd) public onlyOwner { \r\n    require(start < newEnd);\r\n    end = newEnd;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner notLocked { \r\n    token = TWNSharesToken(newToken);\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner notLocked { \r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner notLocked {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner notLocked {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n \r\n  function bonusesCount() public constant returns(uint) {\r\n    return bonuses.length;\r\n  }\r\n\r\n  function addBonus(uint limit, uint bonus) public onlyOwner notLocked {\r\n    bonuses.push(Bonus(limit, bonus));\r\n  }\r\n\r\n  function mintExtendedTokens() internal {\r\n    uint extendedTokensPercent = bountyTokensPercent.add(devTokensPercent).add(advisorsTokensPercent).add(foundersTokensPercent);      \r\n    uint extendedTokens = minted.mul(extendedTokensPercent).div(PERCENT_RATE.sub(extendedTokensPercent));\r\n    uint summaryTokens = extendedTokens + minted;\r\n\r\n    uint bountyTokens = summaryTokens.mul(bountyTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(bountyTokensWallet, bountyTokens);\r\n\r\n    uint advisorsTokens = summaryTokens.mul(advisorsTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(advisorsTokensWallet, advisorsTokens);\r\n\r\n    uint foundersTokens = summaryTokens.mul(foundersTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(foundersTokensWallet, foundersTokens);\r\n\r\n    uint devTokens = summaryTokens.sub(advisorsTokens).sub(bountyTokens);\r\n    mintAndSendTokens(devTokensWallet, devTokens);\r\n  }\r\n\r\n  function mintAndSendTokens(address to, uint amount) internal {\r\n    token.mint(to, amount);\r\n    minted = minted.add(amount);\r\n  }\r\n\r\n  function calculateAndTransferTokens() internal {\r\n    // update invested value\r\n    invested = invested.add(msg.value);\r\n\r\n    // calculate tokens\r\n    uint tokens = msg.value.mul(price).div(1 ether);\r\n    uint bonus = getBonus();\r\n    if(bonus > 0) {\r\n      tokens = tokens.add(tokens.mul(bonus).div(100));      \r\n    }\r\n    \r\n    // transfer tokens\r\n    mintAndSendTokens(msg.sender, tokens);\r\n  }\r\n\r\n  function getBonus() public constant returns(uint) {\r\n    uint prevTimeLimit = start;\r\n    for (uint i = 0; i < bonuses.length; i++) {\r\n      Bonus storage bonus = bonuses[i];\r\n      prevTimeLimit += bonus.periodInDays * 1 days;\r\n      if (now < prevTimeLimit)\r\n        return bonus.bonus;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function createTokens() public payable;\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(wallet, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\ncontract Presale is CommonCrowdsale {\r\n  \r\n  uint public devLimit;\r\n\r\n  uint public softcap;\r\n  \r\n  bool public refundOn;\r\n\r\n  bool public softcapAchieved;\r\n\r\n  bool public devWithdrawn;\r\n\r\n  address public devWallet;\r\n\r\n  address public nextSaleAgent;\r\n\r\n  mapping (address => uint) public balances;\r\n\r\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\r\n    nextSaleAgent = newNextSaleAgent;\r\n  }\r\n\r\n  function setSoftcap(uint newSoftcap) public onlyOwner {\r\n    softcap = newSoftcap;\r\n  }\r\n\r\n  function setDevWallet(address newDevWallet) public onlyOwner notLocked {\r\n    devWallet = newDevWallet;\r\n  }\r\n\r\n  function setDevLimit(uint newDevLimit) public onlyOwner notLocked {\r\n    devLimit = newDevLimit;\r\n  }\r\n\r\n  function refund() public {\r\n    require(now > start && refundOn && balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  } \r\n\r\n  function createTokens() public payable saleIsOn {\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    calculateAndTransferTokens();\r\n    if(!softcapAchieved && invested >= softcap) {\r\n      softcapAchieved = true;      \r\n    }\r\n  } \r\n\r\n  function widthrawDev() public {\r\n    require(softcapAchieved);\r\n    require(devWallet == msg.sender || owner == msg.sender);\r\n    if(!devWithdrawn) {\r\n      devWithdrawn = true;\r\n      devWallet.transfer(devLimit);\r\n    }\r\n  } \r\n\r\n  function widthraw() public {\r\n    require(softcapAchieved);\r\n    require(owner == msg.sender);\r\n    widthrawDev();\r\n    wallet.transfer(this.balance);\r\n  } \r\n\r\n  function finishMinting() public onlyOwner {\r\n    if(!softcapAchieved) {\r\n      refundOn = true;      \r\n      token.finishMinting();\r\n    } else {\r\n      mintExtendedTokens();\r\n      token.setSaleAgent(nextSaleAgent);\r\n    }    \r\n  }\r\n\r\n}\r\n\r\ncontract ICO is CommonCrowdsale {\r\n  \r\n  function finishMinting() public onlyOwner {\r\n    mintExtendedTokens();\r\n    token.finishMinting();\r\n  }\r\n\r\n  function createTokens() public payable saleIsOn {\r\n    calculateAndTransferTokens();\r\n    wallet.transfer(msg.value);\r\n  } \r\n\r\n}\r\n\r\ncontract Deployer is Ownable {\r\n\r\n  Presale public presale;  \r\n \r\n  ICO public ico;\r\n\r\n  TWNSharesToken public token;\r\n\r\n  function deploy() public onlyOwner {\r\n    owner = 0x1c7315bc528F322909beDDA8F65b053546d98246;  \r\n      \r\n    token = new TWNSharesToken();\r\n    \r\n    presale = new Presale();\r\n    presale.setToken(token);\r\n    token.setSaleAgent(presale);\r\n    presale.setMinInvestedLimit(1000000000000000000);  \r\n    presale.setPrice(290000000000000000000);\r\n    presale.setBountyTokensPercent(2);\r\n    presale.setAdvisorsTokensPercent(1);\r\n    presale.setDevTokensPercent(10);\r\n    presale.setFoundersTokensPercent(10);\r\n    \r\n    // fix in prod\r\n    presale.setSoftcap(1000000000000000000000);\r\n    presale.setHardcap(20000000000000000000000);\r\n    presale.addBonus(1,40);\r\n    presale.addBonus(100,30);\r\n//    presale.setStart( );\r\n//    presale.setEnd( );    \r\n    presale.setDevLimit(6000000000000000000);\r\n    presale.setWallet(0xb710d808Ca41c030D14721363FF5608Eabc5bA91);\r\n    presale.setBountyTokensWallet(0x565d8E01c63EDF9A5D9F17278b3c2118940e81EF);\r\n    presale.setDevTokensWallet(0x2d509f95f7a5F400Ae79b22F40AfB7aCc60dE6ba);\r\n    presale.setAdvisorsTokensWallet(0xc422bd1dAc78b1610ab9bEC43EEfb1b81785667D);\r\n    presale.setFoundersTokensWallet(0xC8C959B4ae981CBCF032Ad05Bd5e60c326cbe35d);\r\n    presale.setDevWallet(0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770);\r\n\r\n    ico = new ICO();\r\n    ico.setToken(token); \r\n    presale.setNextSaleAgent(ico);\r\n    ico.setMinInvestedLimit(100000000000000000);\r\n    ico.setPrice(250000000000000000000);\r\n    ico.setBountyTokensPercent(2);\r\n    ico.setAdvisorsTokensPercent(1);\r\n    ico.setDevTokensPercent(10);\r\n    ico.setFoundersTokensPercent(10);\r\n\r\n    // fix in prod\r\n    ico.setHardcap(50000000000000000000000);\r\n    ico.addBonus(7,25);\r\n    ico.addBonus(7,15);\r\n    ico.addBonus(100,10);\r\n//    ico.setStart( );\r\n//    ico.setEnd( );\r\n    ico.setWallet(0x87AF29276bA384b1Df9008Fd573155F7fC47E4D8);\r\n    ico.setBountyTokensWallet(0xeF0a993cC6067AD57a1A55A6B885aEF662334641);\r\n    ico.setDevTokensWallet(0xFa6229F284387F6ccDb61879c3C12D9896310DB3);\r\n    ico.setAdvisorsTokensWallet(0xb1f9C6653210D7551Ad24C7978B10Fb0bfE5C177);\r\n    ico.setFoundersTokensWallet(0x5CBB99ab4aa3EFf834217262db11D7486af7Cbfd);\r\n\r\n    presale.lockChanges();\r\n    ico.lockChanges();\r\n    \r\n    presale.transferOwnership(owner);\r\n    ico.transferOwnership(owner);\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdvisorsTokensWallet\",\"type\":\"address\"}],\"name\":\"setAdvisorsTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensWallet\",\"type\":\"address\"}],\"name\":\"setFoundersTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setBountyTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdvisorsTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setAdvisorsTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevTokensWallet\",\"type\":\"address\"}],\"name\":\"setDevTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapAchieved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestedLimit\",\"type\":\"uint256\"}],\"name\":\"setMinInvestedLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"widthraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"addBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevLimit\",\"type\":\"uint256\"}],\"name\":\"setDevLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"widthrawDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNextSaleAgent\",\"type\":\"address\"}],\"name\":\"setNextSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setDevTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensWallet\",\"type\":\"address\"}],\"name\":\"setBountyTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0269376b38391f330dbcec5333f60b460fb5501ebde1ca5d4e977eae1258527b"}]}