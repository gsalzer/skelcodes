{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract ERC20Token {\r\n    event Transfer(address indexed from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0 && _to != address(this));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    /**\r\n     * Construct the Owned contract and\r\n     * make the sender the owner\r\n     */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Restrict to the owner only\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfer the ownership to another address\r\n     *\r\n     * @param newOwner the new owner's address\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Beercoin is ERC20Token, Owned {\r\n    event Produce(uint256 value, string caps);\r\n\tevent Burn(uint256 value);\r\n\r\n    string public name = \"Beercoin\";\r\n    string public symbol = \"?\";\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply = 15496000000 * 10 ** uint256(decimals);\r\n\r\n    // In addition to the initial total supply of 15496000000 Beercoins,\r\n    // more Beercoins will only be added by scanning bottle caps.\r\n    // 20800000000 bottle caps will be eventually produced.\r\n    //\r\n    // Within 10000 bottle caps,\r\n    // 1 (i.e. every 10000th cap in total) has a value of 10000 (\"Diamond\") Beercoins,\r\n    // 9 (i.e. every 1000th cap in total) have a value of 100 (\"Gold\") Beercoins,\r\n    // 990 (i.e. every 10th cap in total) have a value of 10 (\"Silver\") Beercoins,\r\n    // 9000 (i.e. every remaining cap) have a value of 1 (\"Bronze\") Beercoin.\r\n    //\r\n    // Therefore one bottle cap has an average Beercoin value of\r\n    // (1 * 10000 + 9 * 100 + 990 * 10 + 9000 * 1) / 10000 = 2.98.\r\n    //\r\n    // This means the Beercoin value of all bottle caps that\r\n    // will be produced in total is 20800000000 * 2.98 = 61984000000.\r\n    uint256 public unproducedCaps = 20800000000;\r\n    uint256 public producedCaps = 0;\r\n\r\n    // Stores whether users disallow the owner to\r\n    // pull Beercoins for the use of redemption.\r\n    mapping (address => bool) public redemptionLocked;\r\n\r\n    /**\r\n     * Construct the Beercoin contract and\r\n     * assign the initial supply to the owner.\r\n     */\r\n    function Beercoin() public {\r\n\t\tbalanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Lock or unlock the redemption functionality\r\n     *\r\n     * If a user doesn't want to redeem Beercoins on the owner's\r\n     * website and doesn't trust the owner, the owner's capability\r\n     * of pulling Beercoin from the user's account can be locked\r\n     *\r\n     * @param lock whether to lock the redemption capability or not\r\n     */\r\n    function lockRedemption(bool lock) public returns (bool success) {\r\n        redemptionLocked[msg.sender] = lock;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Generate a sequence of bottle cap values to be used\r\n     * for production and send the respective total Beercoin\r\n     * value to the contract for keeping until a scan is recognized\r\n     *\r\n     * We hereby declare that this function is called if and only if\r\n     * we need to generate codes intended for beer bottle production\r\n     *\r\n     * @param numberOfCaps the number of bottle caps to be produced\r\n     */\r\n\tfunction produce(uint256 numberOfCaps) public onlyOwner returns (bool success) {\r\n        require(numberOfCaps <= unproducedCaps);\r\n\r\n        uint256 value = 0;\r\n        bytes memory caps = bytes(new string(numberOfCaps));\r\n        \r\n        for (uint256 i = 0; i < numberOfCaps; ++i) {\r\n            uint256 currentCoin = producedCaps + i;\r\n\r\n            if (currentCoin % 10000 == 0) {\r\n                value += 10000;\r\n                caps[i] = \"D\";\r\n            } else if (currentCoin % 1000 == 0) {\r\n                value += 100;\r\n                caps[i] = \"G\";\r\n            } else if (currentCoin % 10 == 0) {\r\n                value += 10;\r\n                caps[i] = \"S\";\r\n            } else {\r\n                value += 1;\r\n                caps[i] = \"B\";\r\n            }\r\n        }\r\n\r\n        unproducedCaps -= numberOfCaps;\r\n        producedCaps += numberOfCaps;\r\n\r\n        value = value * 10 ** uint256(decimals);\r\n        totalSupply += value;\r\n        balanceOf[this] += value;\r\n        Produce(value, string(caps));\r\n\r\n        return true;\r\n\t}\r\n\r\n\t/**\r\n     * Grant Beercoins to a user who scanned a bottle cap code\r\n     *\r\n     * We hereby declare that this function is called if and only if\r\n\t * our server registers a valid code scan by the given user\r\n     *\r\n     * @param user the address of the user who scanned a codes\r\n     * @param cap a bottle cap value (\"D\", \"G\", \"S\", or \"B\")\r\n     */\r\n\tfunction scan(address user, byte cap) public onlyOwner returns (bool success) {\r\n        if (cap == \"D\") {\r\n            _transfer(this, user, 10000 * 10 ** uint256(decimals));\r\n        } else if (cap == \"G\") {\r\n            _transfer(this, user, 100 * 10 ** uint256(decimals));\r\n        } else if (cap == \"S\") {\r\n            _transfer(this, user, 10 * 10 ** uint256(decimals));\r\n        } else {\r\n            _transfer(this, user, 1 * 10 ** uint256(decimals));\r\n        }\r\n        \r\n        return true;\r\n\t}\r\n\r\n    /**\r\n     * Grant Beercoins to users who scanned bottle cap codes\r\n     *\r\n     * We hereby declare that this function is called if and only if\r\n\t * our server registers valid code scans by the given users\r\n     *\r\n     * @param users the addresses of the users who scanned a codes\r\n     * @param caps bottle cap values (\"D\", \"G\", \"S\", or \"B\")\r\n     */\r\n\tfunction scanMany(address[] users, byte[] caps) public onlyOwner returns (bool success) {\r\n        require(users.length == caps.length);\r\n\r\n        for (uint16 i = 0; i < users.length; ++i) {\r\n            scan(users[i], caps[i]);\r\n        }\r\n\r\n        return true;\r\n\t}\r\n\r\n\t/**\r\n     * Redeem tokens when the will to do so has been\r\n\t * stated within the user interface of a Beercoin\r\n\t * redemption system\r\n\t *\r\n\t * The owner calls this on behalf of the redeeming user\r\n\t * so the latter does not need to pay transaction fees\r\n\t * when redeeming\r\n\t *\r\n\t * We hereby declare that this function is called if and only if\r\n     * a user deliberately wants to redeem Beercoins\r\n     *\r\n     * @param user the address of the user who wants to redeem\r\n     * @param value the amount to redeem\r\n     */\r\n    function redeem(address user, uint256 value) public onlyOwner returns (bool success) {\r\n        require(redemptionLocked[user] == false);\r\n        _transfer(user, owner, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Redeem tokens when the will to do so has been\r\n\t * stated within the user interface of a Beercoin\r\n\t * redemption system\r\n\t *\r\n\t * The owner calls this on behalf of the redeeming users\r\n\t * so the latter do not need to pay transaction fees\r\n\t * when redeeming\r\n\t *\r\n\t * We hereby declare that this function is called if and only if\r\n     * users deliberately want to redeem Beercoins\r\n     *\r\n     * @param users the addresses of the users who want to redeem\r\n     * @param values the amounts to redeem\r\n     */\r\n    function redeemMany(address[] users, uint256[] values) public onlyOwner returns (bool success) {\r\n        require(users.length == values.length);\r\n\r\n        for (uint16 i = 0; i < users.length; ++i) {\r\n            redeem(users[i], values[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer Beercoins to multiple recipients\r\n     *\r\n     * @param recipients the addresses of the recipients\r\n     * @param values the amounts to send\r\n     */\r\n    function transferMany(address[] recipients, uint256[] values) public onlyOwner returns (bool success) {\r\n        require(recipients.length == values.length);\r\n\r\n        for (uint16 i = 0; i < recipients.length; ++i) {\r\n            transfer(recipients[i], values[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy Beercoins by removing them from the system irreversibly\r\n     *\r\n     * @param value the amount of Beercoins to burn\r\n     */\r\n    function burn(uint256 value) public onlyOwner returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n        balanceOf[msg.sender] -= value;\r\n        totalSupply -= value;\r\n\t\tBurn(value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"producedCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"redeemMany\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redemptionLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOfCaps\",\"type\":\"uint256\"}],\"name\":\"produce\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unproducedCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"lockRedemption\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferMany\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"caps\",\"type\":\"bytes1[]\"}],\"name\":\"scanMany\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"bytes1\"}],\"name\":\"scan\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caps\",\"type\":\"string\"}],\"name\":\"Produce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Beercoin","CompilerVersion":"v0.4.20-nightly.2017.12.20+commit.efc198d5","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b6daa67b3c62ebbd6ace19f5af20b0d87aebb7931cbfd3b105e820eb3212292"}]}