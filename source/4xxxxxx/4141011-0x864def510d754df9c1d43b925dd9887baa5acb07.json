{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\ncontract owned {\r\n    address public owner;\r\n    address public authorisedContract;\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyAuthorisedAddress{\r\n        require(msg.sender == authorisedContract);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    modifier onlyPayloadSize(uint size) {\r\n     assert(msg.data.length == size + 4);\r\n     _;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract MyToken is owned {\r\n    /* Public variables of the token */\r\n    string public name = \"DankToken\";\r\n    string public symbol = \"DANK\";\r\n    uint8 public decimals = 18;\r\n    uint256 _totalSupply;\r\n    uint256 public amountRaised = 0;\r\n    uint256 public amountOfTokensPerEther = 500;\r\n        /* this makes an array with all frozen accounts. This is needed so voters can not send their funds while the vote is going on and they have already voted      */\r\n    mapping (address => bool) public frozenAccounts;\r\n        /* This creates an array with all balances */ \r\n    mapping (address => uint256) _balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowance;\r\n    bool public crowdsaleClosed = false;\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FrozenFunds(address target, bool frozen);\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MyToken() {\r\n        _balanceOf[msg.sender] = 4000000000000000000000;              \r\n        _totalSupply = 4000000000000000000000;                 \r\n        Transfer(this, msg.sender,4000000000000000000000);\r\n    }\r\n    function changeAuthorisedContract(address target) onlyOwner\r\n    {\r\n        authorisedContract = target;\r\n    }\r\n    function() payable{\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        amountRaised += amount;\r\n        uint256 totalTokens = amount * amountOfTokensPerEther;\r\n        _balanceOf[msg.sender] += totalTokens;\r\n        _totalSupply += totalTokens;\r\n        Transfer(this,msg.sender, totalTokens);\r\n    }\r\n     function totalSupply() constant returns (uint TotalSupply){\r\n        TotalSupply = _totalSupply;\r\n     }\r\n      function balanceOf(address _owner) constant returns (uint balance) {\r\n        return _balanceOf[_owner];\r\n     }\r\n     function closeCrowdsale() onlyOwner{\r\n         crowdsaleClosed = true;\r\n     }\r\n     function openCrowdsale() onlyOwner{\r\n         crowdsaleClosed = false;\r\n     }\r\n     function changePrice(uint newAmountOfTokensPerEther) onlyOwner{\r\n         require(newAmountOfTokensPerEther <= 500);\r\n         amountOfTokensPerEther = newAmountOfTokensPerEther;\r\n     }\r\n     function withdrawal(uint256 amountOfWei) onlyOwner{\r\n         if(owner.send(amountOfWei)){}\r\n     }\r\n     function freezeAccount(address target, bool freeze) onlyAuthorisedAddress\r\n     {\r\n         frozenAccounts[target] = freeze;\r\n         FrozenFunds(target, freeze);\r\n     } \r\n     \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2*32) {\r\n        require(!frozenAccounts[msg.sender]);\r\n        require(_balanceOf[msg.sender] > _value);          // Check if the sender has enough\r\n        require(_balanceOf[_to] + _value > _balanceOf[_to]); // Check for overflows\r\n        _balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        _balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value)onlyPayloadSize(2*32)\r\n        returns (bool success)  {\r\n        _allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    } \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success)  {\r\n        require(!frozenAccounts[_from]);\r\n        require(_balanceOf[_from] > _value);                 // Check if the sender has enough\r\n        require(_balanceOf[_to] + _value > _balanceOf[_to]);  // Check for overflows\r\n        require(_allowance[_from][msg.sender] >= _value);     // Check allowance\r\n        _balanceOf[_from] -= _value;                           // Subtract from the sender\r\n        _balanceOf[_to] += _value;                             // Add the same to the recipient\r\n        _allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return _allowance[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"changeAuthorisedContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"TotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountOfWei\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorisedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAmountOfTokensPerEther\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://81be433f29d099c5dede6a6a0a7b164fb7377a8879e2d4f11be103c7c9339f4a"}]}