{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract Fundraiser {\r\n\r\n  /* State */\r\n\r\n  address public signer1;\r\n  address public signer2;\r\n\r\n  enum Action {\r\n    None,\r\n    Withdraw\r\n  }\r\n  \r\n  struct Proposal {\r\n    Action action;\r\n    address destination;\r\n    uint256 amount;\r\n  }\r\n  \r\n  Proposal public signer1_proposal;\r\n  Proposal public signer2_proposal;\r\n\r\n  /* Constructor, choose signers. Those cannot be changed */\r\n  function Fundraiser(address init_signer1,\r\n                      address init_signer2) {\r\n    signer1 = init_signer1;\r\n    signer2 = init_signer2;\r\n    signer1_proposal.action = Action.None;\r\n    signer2_proposal.action = Action.None;\r\n  }\r\n\r\n  /* allow simple send transactions */\r\n  function () payable {\r\n  }\r\n\r\n  \r\n  /* Entry points for signers */\r\n\r\n  function Withdraw(address proposed_destination,\r\n                    uint256 proposed_amount) {\r\n    /* check amount */\r\n    if (proposed_amount > this.balance) { throw; }\r\n    /* update action */\r\n    if (msg.sender == signer1) {\r\n      signer1_proposal.action = Action.Withdraw;\r\n      signer1_proposal.destination = proposed_destination;\r\n      signer1_proposal.amount = proposed_amount;\r\n    } else if (msg.sender == signer2) {\r\n      signer2_proposal.action = Action.Withdraw;\r\n      signer2_proposal.destination = proposed_destination;\r\n      signer2_proposal.amount = proposed_amount;\r\n    } else { throw; }\r\n    /* perform action */\r\n    MaybePerformWithdraw();\r\n  }\r\n\r\n  function MaybePerformWithdraw() internal {\r\n    if (signer1_proposal.action == Action.Withdraw\r\n        && signer2_proposal.action == Action.Withdraw\r\n        && signer1_proposal.amount == signer2_proposal.amount\r\n        && signer1_proposal.destination == signer2_proposal.destination) {\r\n      signer1_proposal.action = Action.None;\r\n      signer2_proposal.action = Action.None;\r\n      signer1_proposal.destination.transfer(signer1_proposal.amount);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"signer1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer2_proposal\",\"outputs\":[{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_destination\",\"type\":\"address\"},{\"name\":\"proposed_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer1_proposal\",\"outputs\":[{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"init_signer1\",\"type\":\"address\"},{\"name\":\"init_signer2\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Fundraiser","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000066e6837db646836a21d6d63094e69424d3670d0400000000000000000000000071101e0a61861fb3b60099a1640452845da79994","Library":"","SwarmSource":"bzzr://b2e573436888354895f5fa39f1ded51dcc6485c69b98c7ca723eff7c0d73c682"}]}