{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract EZTanks{\r\n    \r\n    // STRUCTS HERE\r\n    struct TankObject{\r\n        // type of tank \r\n        uint256 typeID; \r\n\r\n        // tank quality\r\n        uint8[4] upgrades;\r\n\r\n        bool inBattle;\r\n        \r\n        // stats\r\n        address tankOwner;\r\n        uint256 earningsIndex; \r\n        \r\n        // buying & selling \r\n        bool inAuction;\r\n        uint256 currAuction;\r\n    }\r\n\r\n    struct TankType{\r\n        uint256 startPrice;\r\n        uint256 currPrice;\r\n        uint256 earnings;\r\n\r\n        // battle stats\r\n        uint32 baseHealth;\r\n        uint32 baseAttack;\r\n        uint32 baseArmor;\r\n        uint32 baseSpeed;\r\n\r\n        uint32 numTanks;\r\n    }\r\n    \r\n    struct AuctionObject{\r\n        uint tank; // tank id\r\n        uint startPrice;\r\n        uint endPrice;\r\n        uint startTime;\r\n        uint duration;\r\n        bool alive;\r\n    }\r\n    \r\n    // EVENTS HERE\r\n    event EventWithdraw (\r\n       address indexed player,\r\n       uint256 amount\r\n    ); \r\n\r\n    event EventUpgradeTank (\r\n        address indexed player,\r\n        uint256 tankID,\r\n        uint8 upgradeChoice\r\n    ); \r\n    \r\n    event EventAuction (\r\n        address indexed player,\r\n        uint256 tankID,\r\n        uint256 startPrice,\r\n        uint256 endPrice,\r\n        uint256 duration,\r\n        uint256 currentTime\r\n    );\r\n        \r\n    event EventCancelAuction (\r\n        uint256 indexed tankID,\r\n        address owner\r\n    ); \r\n    \r\n    event EventBid (\r\n        uint256 indexed tankID,\r\n        address indexed buyer\r\n    ); \r\n    \r\n    event EventBuyTank (\r\n        address indexed player,\r\n        uint256 productID,\r\n        uint256 tankID,\r\n        uint256 newPrice\r\n    ); \r\n\r\n    event EventCashOutTank(\r\n        address indexed player,\r\n        uint256 amount\r\n    );\r\n\r\n    event EventJoinedBattle(\r\n        address indexed player,\r\n        uint256 indexed tankID\r\n    );\r\n\r\n    event EventQuitBattle(\r\n        address indexed player,\r\n        uint256 indexed tankID\r\n    );\r\n    \r\n    event EventBattleOver();\r\n    \r\n    // FIELDS HERE\r\n    \r\n    // contract fields \r\n    uint8 feeAmt = 3;\r\n    uint8 tournamentTaxRate = 5;\r\n    address owner;\r\n\r\n\r\n    // battle!\r\n    uint256 tournamentAmt = 0;\r\n    uint8 teamSize = 5;\r\n    uint256 battleFee = 1 ether / 1000;\r\n    uint256[] battleTeams;\r\n\r\n    // tank fields\r\n    uint256 newTypeID = 1;\r\n    uint256 newTankID = 1;\r\n    uint256 newAuctionID = 1;\r\n    \r\n    mapping (uint256 => TankType) baseTanks;\r\n    mapping (uint256 => TankObject) tanks; //maps tankID to tanks\r\n    mapping (address => uint256[]) userTanks;\r\n    mapping (uint => AuctionObject) auctions; //maps auctionID to auction\r\n    mapping (address => uint) balances; \r\n\r\n    // MODIFIERS HERE\r\n    modifier isOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    // CTOR\r\n    function EZTanks() public payable{\r\n        // init owner\r\n        owner = msg.sender;\r\n        balances[owner] += msg.value;\r\n\r\n        // basic tank\r\n        newTankType(1 ether / 80, 1 ether / 1000, 2500, 50, 40, 3);\r\n\r\n        // bulky tank\r\n        newTankType(1 ether / 50, 1 ether / 1000, 5500, 50, 41, 3);\r\n\r\n        // speeder tank\r\n        newTankType(1 ether / 50, 1 ether / 1000, 2000, 50, 40, 5);\r\n\r\n        // powerful tank\r\n        newTankType(1 ether / 50, 1 ether / 1000, 3000, 53, 39, 3);\r\n\r\n        // armor tank\r\n        newTankType(1 ether / 50, 1 ether / 1000, 4000, 51, 43, 2);\r\n\r\n        // better than basic tank\r\n        newTankType(1 ether / 40, 1 ether / 200, 3000, 52, 41, 4);\r\n    }\r\n\r\n    // ADMINISTRATIVE FUNCTIONS\r\n\r\n    function setNewOwner(address newOwner) public isOwner{\r\n        owner = newOwner;\r\n    }\r\n\r\n    // create a new tank type \r\n    function newTankType ( \r\n        uint256 _startPrice,\r\n        uint256 _earnings,\r\n        uint32 _baseHealth,\r\n        uint32 _baseAttack,\r\n        uint32 _baseArmor,\r\n        uint32 _baseSpeed\r\n    ) public isOwner {\r\n        baseTanks[newTypeID++] = TankType({\r\n            startPrice : _startPrice,\r\n            currPrice : _startPrice,\r\n            earnings : _earnings,\r\n            baseAttack : _baseAttack,\r\n            baseArmor : _baseArmor,\r\n            baseSpeed : _baseSpeed,\r\n            baseHealth : _baseHealth,\r\n            numTanks : 0\r\n        });\r\n\r\n    }\r\n    \r\n    // fee from auctioning\r\n    function changeFeeAmt (uint8 _amt) public isOwner {\r\n        require(_amt > 0 && _amt < 100);\r\n        feeAmt = _amt;\r\n    }\r\n\r\n    // rate to fund tournament\r\n    function changeTournamentTaxAmt (uint8 _rate) public isOwner {\r\n        require(_rate > 0 && _rate < 100);\r\n        tournamentTaxRate = _rate;\r\n    }\r\n\r\n    function changeTeamSize(uint8 _size) public isOwner {\r\n        require(_size > 0);\r\n        teamSize = _size;\r\n    }\r\n\r\n    // cost to enter battle\r\n    function changeBattleFee(uint256 _fee) public isOwner {\r\n        require(_fee > 0);\r\n        battleFee = _fee;\r\n    }\r\n    \r\n    // INTERNAL FUNCTIONS\r\n\r\n    function delTankFromUser(address user, uint256 value) internal {\r\n        uint l = userTanks[user].length;\r\n\r\n        for(uint i=0; i<l; i++){\r\n            if(userTanks[user][i] == value){\r\n                delete userTanks[user][i];\r\n                userTanks[user][i] = userTanks[user][l-1];\r\n                userTanks[user].length = l-1;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // USER FUNCTIONS\r\n\r\n    function withdraw (uint256 _amount) public payable {\r\n        // validity checks\r\n        require (_amount >= 0); \r\n        require (this.balance >= _amount); \r\n        require (balances[msg.sender] >= _amount); \r\n        \r\n        // return everything is withdrawing 0\r\n        if (_amount == 0){\r\n            _amount = balances[msg.sender];\r\n        }\r\n        \r\n        require(msg.sender.send(_amount));\r\n        balances[msg.sender] -= _amount; \r\n        \r\n        EventWithdraw (msg.sender, _amount);\r\n    }\r\n    \r\n    \r\n    function auctionTank (uint _tankID, uint _startPrice, uint _endPrice, uint256 _duration) public {\r\n        require (_tankID > 0 && _tankID < newTankID);\r\n        require (tanks[_tankID].tankOwner == msg.sender);\r\n        require (!tanks[_tankID].inBattle);\r\n        require (!tanks[_tankID].inAuction);\r\n        require (tanks[_tankID].currAuction == 0);\r\n        require (_startPrice >= _endPrice);\r\n        require (_startPrice > 0 && _endPrice >= 0);\r\n        require (_duration > 0);\r\n        \r\n        auctions[newAuctionID] = AuctionObject(_tankID, _startPrice, _endPrice, now, _duration, true);\r\n        tanks[_tankID].inAuction = true;\r\n        tanks[_tankID].currAuction = newAuctionID;\r\n        \r\n        newAuctionID++;\r\n\r\n        EventAuction (msg.sender, _tankID, _startPrice, _endPrice, _duration, now);\r\n    }\r\n    \r\n    // buy tank from auction\r\n    function bid (uint256 _tankID) public payable {\r\n        // validity checks\r\n        require (_tankID > 0 && _tankID < newTankID); // check if tank is valid\r\n        require (tanks[_tankID].inAuction == true); // check if tank is currently in auction\r\n        \r\n        \r\n        uint256 auctionID = tanks[_tankID].currAuction;\r\n        uint256 currPrice = getCurrAuctionPriceAuctionID(auctionID);\r\n        \r\n        require (currPrice >= 0); \r\n        require (msg.value >= currPrice); \r\n        \r\n        if(msg.value > currPrice){\r\n            balances[msg.sender] += (msg.value - currPrice);\r\n        }\r\n\r\n\r\n        // calculate new balances\r\n        uint256 fee = (currPrice*feeAmt) / 100; \r\n\r\n        //update tournamentAmt\r\n        uint256 tournamentTax = (fee*tournamentTaxRate) / 100;\r\n        tournamentAmt += tournamentTax;\r\n    \r\n        balances[tanks[_tankID].tankOwner] += currPrice - fee;\r\n        balances[owner] += (fee - tournamentTax); \r\n\r\n        // update object fields\r\n        address formerOwner = tanks[_tankID].tankOwner;\r\n\r\n        tanks[_tankID].tankOwner = msg.sender;\r\n        tanks[_tankID].inAuction = false; \r\n        auctions[tanks[_tankID].currAuction].alive = false; \r\n        tanks[_tankID].currAuction = 0; \r\n\r\n        // update userTanks\r\n        userTanks[msg.sender].push(_tankID);\r\n        delTankFromUser(formerOwner, _tankID);\r\n\r\n        EventBid (_tankID, msg.sender);\r\n    }\r\n    \r\n    function cancelAuction (uint256 _tankID) public {\r\n        require (_tankID > 0 && _tankID < newTankID); \r\n        require (tanks[_tankID].inAuction); \r\n        require (tanks[_tankID].tankOwner == msg.sender); \r\n        \r\n        // update tank object\r\n        tanks[_tankID].inAuction = false; \r\n        auctions[tanks[_tankID].currAuction].alive = false; \r\n        tanks[_tankID].currAuction = 0; \r\n\r\n        EventCancelAuction (_tankID, msg.sender);\r\n    }\r\n\r\n    function buyTank (uint32 _typeID) public payable {\r\n        require(_typeID > 0 && _typeID < newTypeID);\r\n        require (baseTanks[_typeID].currPrice > 0 && msg.value > 0); \r\n        require (msg.value >= baseTanks[_typeID].currPrice); \r\n        \r\n        if (msg.value > baseTanks[_typeID].currPrice){\r\n            balances[msg.sender] += msg.value - baseTanks[_typeID].currPrice;\r\n        }\r\n        \r\n        baseTanks[_typeID].currPrice += baseTanks[_typeID].earnings;\r\n        \r\n        uint256 earningsIndex = baseTanks[_typeID].numTanks + 1;\r\n        baseTanks[_typeID].numTanks += 1;\r\n\r\n        tanks[newTankID++] = TankObject ({\r\n            typeID : _typeID,\r\n            upgrades : [0,0,0,0],\r\n            inBattle : false,\r\n            tankOwner : msg.sender,\r\n            earningsIndex : earningsIndex,\r\n            inAuction : false,\r\n            currAuction : 0\r\n        });\r\n\r\n        uint256 price = baseTanks[_typeID].startPrice;\r\n        uint256 tournamentProceeds = (price * tournamentTaxRate) / 100;\r\n\r\n        balances[owner] += baseTanks[_typeID].startPrice - tournamentProceeds;\r\n        tournamentAmt += tournamentProceeds;\r\n\r\n        userTanks[msg.sender].push(newTankID-1);\r\n        \r\n        EventBuyTank (msg.sender, _typeID, newTankID-1, baseTanks[_typeID].currPrice);\r\n    }\r\n\r\n    //cashing out the money that a tank has earned\r\n    function cashOutTank (uint256 _tankID) public {\r\n        // validity checks\r\n        require (_tankID > 0 && _tankID < newTankID); \r\n        require (tanks[_tankID].tankOwner == msg.sender);\r\n        require (!tanks[_tankID].inAuction && tanks[_tankID].currAuction == 0);\r\n        require (!tanks[_tankID].inBattle);\r\n\r\n        \r\n        uint256 tankType = tanks[_tankID].typeID;\r\n        uint256 numTanks = baseTanks[tankType].numTanks;\r\n\r\n        uint256 amount = getCashOutAmount(_tankID);\r\n\r\n        require (this.balance >= amount); \r\n        require (amount > 0);\r\n        \r\n        require(tanks[_tankID].tankOwner.send(amount));\r\n        tanks[_tankID].earningsIndex = numTanks;\r\n        \r\n        EventCashOutTank (msg.sender, amount);\r\n    }\r\n    \r\n    // 0 -> health, 1 -> attack, 2 -> armor, 3 -> speed\r\n    function upgradeTank (uint256 _tankID, uint8 _upgradeChoice) public payable {\r\n        // validity checks\r\n        require (_tankID > 0 && _tankID < newTankID); \r\n        require (tanks[_tankID].tankOwner == msg.sender); \r\n        require (!tanks[_tankID].inAuction);\r\n        require (!tanks[_tankID].inBattle);\r\n        require (_upgradeChoice >= 0 && _upgradeChoice < 4); \r\n        \r\n        // no overflow!\r\n        require(tanks[_tankID].upgrades[_upgradeChoice] + 1 > tanks[_tankID].upgrades[_upgradeChoice]);\r\n\r\n        uint256 upgradePrice = baseTanks[tanks[_tankID].typeID].startPrice / 4;\r\n        require (msg.value >= upgradePrice); \r\n\r\n        tanks[_tankID].upgrades[_upgradeChoice]++; \r\n\r\n        if(msg.value > upgradePrice){\r\n            balances[msg.sender] += msg.value-upgradePrice; \r\n        }\r\n\r\n        uint256 tournamentProceeds = (upgradePrice * tournamentTaxRate) / 100;\r\n\r\n        balances[owner] += (upgradePrice - tournamentProceeds); \r\n        tournamentAmt += tournamentProceeds;\r\n        \r\n        EventUpgradeTank (msg.sender, _tankID, _upgradeChoice);\r\n    }\r\n\r\n    function battle(uint256 _tankID) public payable {\r\n        require(_tankID >0 && _tankID < newTankID);\r\n        require(tanks[_tankID].tankOwner == msg.sender);\r\n        require(!tanks[_tankID].inAuction);\r\n        require(!tanks[_tankID].inBattle);\r\n        require(msg.value >= battleFee);\r\n\r\n        if(msg.value > battleFee){\r\n            balances[msg.sender] += (msg.value - battleFee);\r\n        }\r\n\r\n        tournamentAmt += battleFee;\r\n        \r\n        EventJoinedBattle(msg.sender, _tankID);\r\n\r\n        // add to teams\r\n        if(battleTeams.length < 2*teamSize - 1){\r\n            battleTeams.push(_tankID);\r\n            tanks[_tankID].inBattle = true;\r\n\r\n        // time to battle!\r\n        } else {\r\n            battleTeams.push(_tankID);\r\n\r\n            uint256[4] memory teamA;\r\n            uint256[4] memory teamB;\r\n            uint256[4] memory temp;\r\n\r\n            for(uint i=0; i<teamSize; i++){\r\n                temp = getCurrentStats(battleTeams[i]);\r\n                teamA[0] += temp[0];\r\n                teamA[1] += temp[1];\r\n                teamA[2] += temp[2];\r\n                teamA[3] += temp[3];\r\n\r\n                temp = getCurrentStats(battleTeams[teamSize+i]);\r\n                teamB[0] += temp[0];\r\n                teamB[1] += temp[1];\r\n                teamB[2] += temp[2];\r\n                teamB[3] += temp[3];\r\n            }\r\n\r\n            // lower score is better\r\n            uint256 diffA = teamA[1] - teamB[2];\r\n            uint256 diffB = teamB[1] - teamA[2];\r\n            \r\n            diffA = diffA > 0 ? diffA : 1;\r\n            diffB = diffB > 0 ? diffB : 1;\r\n\r\n            uint256 teamAScore = teamB[0] / (diffA * teamA[3]);\r\n            uint256 teamBScore = teamA[0] / (diffB * teamB[3]);\r\n\r\n            if((teamB[0] % (diffA * teamA[3])) != 0) {\r\n                teamAScore += 1;\r\n            }\r\n\r\n            if((teamA[0] % (diffB * teamB[3])) != 0) {\r\n                teamBScore += 1;\r\n            }\r\n\r\n            uint256 toDistribute = tournamentAmt / teamSize;\r\n            tournamentAmt -= teamSize*toDistribute;\r\n\r\n            if(teamAScore <= teamBScore){\r\n                for(i=0; i<teamSize; i++){\r\n                    balances[tanks[battleTeams[i]].tankOwner] += toDistribute;   \r\n                }\r\n            } else {\r\n                for(i=0; i<teamSize; i++){\r\n                    balances[tanks[battleTeams[teamSize+i]].tankOwner] += toDistribute;   \r\n                }\r\n                   \r\n            }\r\n\r\n            for(i=0; i<2*teamSize; i++){\r\n                tanks[battleTeams[i]].inBattle = false;\r\n            }\r\n\r\n            EventBattleOver();\r\n\r\n            battleTeams.length = 0;\r\n        }\r\n    }\r\n\r\n    function quitBattle(uint256 _tankID) public {\r\n        require(_tankID >0 && _tankID < newTankID);\r\n        require(tanks[_tankID].tankOwner == msg.sender);\r\n        require(tanks[_tankID].inBattle);\r\n        \r\n        uint l = battleTeams.length;\r\n\r\n        for(uint i=0; i<l; i++){\r\n            if(battleTeams[i] == _tankID){\r\n                EventQuitBattle(msg.sender, _tankID);\r\n\r\n                delete battleTeams[i];\r\n                battleTeams[i] = battleTeams[l-1];\r\n                battleTeams.length = l-1;\r\n                tanks[_tankID].inBattle = false;\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CONVENIENCE GETTER METHODS\r\n    \r\n    function getCurrAuctionPriceTankID (uint256 _tankID) public constant returns (uint256 price){\r\n        require (tanks[_tankID].inAuction);\r\n        uint256 auctionID = tanks[_tankID].currAuction;\r\n\r\n        return getCurrAuctionPriceAuctionID(auctionID);\r\n    }\r\n    \r\n    function getPlayerBalance(address _playerID) public constant returns (uint256 balance){\r\n        return balances[_playerID];\r\n    }\r\n    \r\n    function getContractBalance() public constant isOwner returns (uint256){\r\n        return this.balance;\r\n    }\r\n\r\n    function getTankOwner(uint256 _tankID) public constant returns (address) {\r\n        require(_tankID > 0 && _tankID < newTankID);\r\n        return tanks[_tankID].tankOwner;\r\n    }\r\n\r\n    function getOwnedTanks(address _add) public constant returns (uint256[]){\r\n        return userTanks[_add];\r\n    }\r\n\r\n    function getTankType(uint256 _tankID) public constant returns (uint256) {\r\n        require(_tankID > 0 && _tankID < newTankID);\r\n        return tanks[_tankID].typeID;\r\n    }\r\n\r\n    function getCurrTypePrice(uint256 _typeID) public constant returns (uint256) {\r\n        require(_typeID > 0 && _typeID < newTypeID);\r\n        return baseTanks[_typeID].currPrice;\r\n    }\r\n\r\n    function getNumTanksType(uint256 _typeID) public constant returns (uint256) {\r\n        require(_typeID > 0 && _typeID < newTypeID);\r\n        return baseTanks[_typeID].numTanks;\r\n    }\r\n    \r\n    function getNumTanks() public constant returns(uint256){\r\n        return newTankID-1;\r\n    }\r\n\r\n    function checkTankAuction(uint256 _tankID) public constant returns (bool) {\r\n        require(0 < _tankID && _tankID < newTankID);\r\n        return tanks[_tankID].inAuction;\r\n    }\r\n\r\n    function getCurrAuctionPriceAuctionID(uint256 _auctionID) public constant returns (uint256){\r\n        require(_auctionID > 0 && _auctionID < newAuctionID);\r\n\r\n        AuctionObject memory currAuction = auctions[_auctionID];\r\n\r\n        // calculate the current auction price       \r\n        uint256 currPrice = currAuction.startPrice;\r\n        uint256 diff = ((currAuction.startPrice-currAuction.endPrice) / (currAuction.duration)) * (now-currAuction.startTime);\r\n\r\n\r\n        if (currPrice-diff < currAuction.endPrice || diff > currPrice){ \r\n            currPrice = currAuction.endPrice;  \r\n        } else {\r\n            currPrice -= diff;\r\n        }\r\n\r\n        return currPrice;\r\n    }\r\n\r\n    // returns [tankID, currPrice, alive]\r\n    function getAuction(uint256 _auctionID) public constant returns (uint256[3]){\r\n        require(_auctionID > 0 && _auctionID < newAuctionID);\r\n\r\n        uint256 tankID = auctions[_auctionID].tank;\r\n        uint256 currPrice = getCurrAuctionPriceAuctionID(_auctionID);\r\n        bool alive = auctions[_auctionID].alive;\r\n\r\n        uint256[3] memory out;\r\n        out[0] = tankID;\r\n        out[1] = currPrice;\r\n        out[2] = alive ? 1 : 0;\r\n\r\n        return out;\r\n    }\r\n \r\n    function getUpgradePrice(uint256 _tankID) public constant returns (uint256) {\r\n        require(_tankID >0 && _tankID < newTankID);\r\n        return baseTanks[tanks[_tankID].typeID].startPrice / 4;\r\n    }\r\n\r\n    // [health, attack, armor, speed]\r\n    function getUpgradeAmt(uint256 _tankID) public constant returns (uint8[4]) {\r\n        require(_tankID > 0 && _tankID < newTankID);\r\n\r\n        return tanks[_tankID].upgrades;\r\n    }\r\n\r\n    // [health, attack, armor, speed]\r\n    function getCurrentStats(uint256 _tankID) public constant returns (uint256[4]) {\r\n        require(_tankID > 0 && _tankID < newTankID);\r\n\r\n        TankType memory baseType = baseTanks[tanks[_tankID].typeID];\r\n        uint8[4] memory upgrades = tanks[_tankID].upgrades;\r\n        uint256[4] memory out;\r\n\r\n        out[0] = baseType.baseHealth + (upgrades[0] * baseType.baseHealth / 4);\r\n        out[1] = baseType.baseAttack + upgrades[1]; \r\n        out[2] = baseType.baseArmor + upgrades[2];\r\n        out[3] = baseType.baseSpeed + upgrades[3];\r\n        \r\n        return out;\r\n    }\r\n\r\n    function inBattle(uint256 _tankID) public constant returns (bool) {\r\n        require(_tankID > 0 && _tankID < newTankID);\r\n        return tanks[_tankID].inBattle;\r\n    }\r\n\r\n    function getCurrTeamSizes() public constant returns (uint) {\r\n        return battleTeams.length;\r\n    }\r\n\r\n    function getBattleTeamSize() public constant returns (uint8) {\r\n        return teamSize;\r\n    }\r\n\r\n    function donate() public payable {\r\n        require(msg.value > 0);\r\n        tournamentAmt += msg.value;\r\n    }\r\n\r\n    function getTournamentAmt() public constant returns (uint256) {\r\n        return tournamentAmt;\r\n    }\r\n\r\n    function getBattleFee() public constant returns (uint256){\r\n        return battleFee;\r\n    }\r\n\r\n    function getTournamentRate() public constant returns (uint8){\r\n        return tournamentTaxRate;\r\n    }\r\n\r\n    function getCurrFeeRate() public constant returns (uint8) {\r\n        return feeAmt;\r\n    }\r\n    \r\n    // [startPrice, currPrice, earnings, baseHealth, baseAttack, baseArmor, baseSpeed, numTanks] \r\n    function getBaseTypeStats(uint256 _typeID) public constant returns (uint256[8]){\r\n        require(0 < _typeID && _typeID < newTypeID);\r\n        uint256[8] memory out;\r\n\r\n        out[0] = baseTanks[_typeID].startPrice;\r\n        out[1] = baseTanks[_typeID].currPrice;\r\n        out[2] = baseTanks[_typeID].earnings;\r\n        out[3] = baseTanks[_typeID].baseHealth;\r\n        out[4] = baseTanks[_typeID].baseAttack;\r\n        out[5] = baseTanks[_typeID].baseArmor;\r\n        out[6] = baseTanks[_typeID].baseSpeed;\r\n        out[7] = baseTanks[_typeID].numTanks;\r\n\r\n        return out;\r\n    }\r\n\r\n    function getCashOutAmount(uint256 _tankID) public constant returns (uint256) {\r\n        require(0 < _tankID && _tankID < newTankID);\r\n\r\n        uint256 tankType = tanks[_tankID].typeID;\r\n        uint256 earnings = baseTanks[tankType].earnings;\r\n        uint256 earningsIndex = tanks[_tankID].earningsIndex;\r\n        uint256 numTanks = baseTanks[tankType].numTanks;\r\n\r\n        return earnings * (numTanks - earningsIndex);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getCurrentStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getOwnedTanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"},{\"name\":\"_upgradeChoice\",\"type\":\"uint8\"}],\"name\":\"upgradeTank\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_earnings\",\"type\":\"uint256\"},{\"name\":\"_baseHealth\",\"type\":\"uint32\"},{\"name\":\"_baseAttack\",\"type\":\"uint32\"},{\"name\":\"_baseArmor\",\"type\":\"uint32\"},{\"name\":\"_baseSpeed\",\"type\":\"uint32\"}],\"name\":\"newTankType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amt\",\"type\":\"uint8\"}],\"name\":\"changeFeeAmt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getTankType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getUpgradeAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getCurrAuctionPriceTankID\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"battle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeBattleFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTournamentAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_typeID\",\"type\":\"uint32\"}],\"name\":\"buyTank\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBattleTeamSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getUpgradePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeID\",\"type\":\"uint256\"}],\"name\":\"getBaseTypeStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"checkTankAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"auctionTank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTournamentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrTeamSizes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"quitBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeID\",\"type\":\"uint256\"}],\"name\":\"getCurrTypePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"inBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionID\",\"type\":\"uint256\"}],\"name\":\"getCurrAuctionPriceAuctionID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint8\"}],\"name\":\"changeTournamentTaxAmt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"cashOutTank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getTankOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tankID\",\"type\":\"uint256\"}],\"name\":\"getCashOutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumTanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerID\",\"type\":\"address\"}],\"name\":\"getPlayerBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeID\",\"type\":\"uint256\"}],\"name\":\"getNumTanksType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBattleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_size\",\"type\":\"uint8\"}],\"name\":\"changeTeamSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tankID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upgradeChoice\",\"type\":\"uint8\"}],\"name\":\"EventUpgradeTank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tankID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"EventAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tankID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EventCancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tankID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"EventBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"productID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tankID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"EventBuyTank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOutTank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tankID\",\"type\":\"uint256\"}],\"name\":\"EventJoinedBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tankID\",\"type\":\"uint256\"}],\"name\":\"EventQuitBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventBattleOver\",\"type\":\"event\"}]","ContractName":"EZTanks","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a9fb358177dac61c7231fc2657665ae347a3d10fccc78fa4a668f46b2b8bc8b"}]}