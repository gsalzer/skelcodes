{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract SharkProxy is Ownable {\r\n\r\n  event Deposit(address indexed sender, uint256 value);\r\n  event Withdrawal(address indexed to, uint256 value, bytes data);\r\n\r\n  function SharkProxy() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function getOwner() constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  function forward(address _destination, uint256 _value, bytes _data) onlyOwner {\r\n    require(_destination != address(0));\r\n    assert(_destination.call.value(_value)(_data)); // send eth and/or data\r\n    if (_value > 0) {\r\n      Withdrawal(_destination, _value, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default function; is called when Ether is deposited.\r\n   */\r\n  function() payable {\r\n    Deposit(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev is called when ERC223 token is deposited.\r\n   */\r\n  function tokenFallback(address _from, uint _value, bytes _data) {\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract FishProxy is SharkProxy {\r\n\r\n  // this address can sign receipt to unlock account\r\n  address lockAddr;\r\n\r\n  function FishProxy(address _owner, address _lockAddr) {\r\n    owner = _owner;\r\n    lockAddr = _lockAddr;\r\n  }\r\n\r\n  function isLocked() constant returns (bool) {\r\n    return lockAddr != 0x0;\r\n  }\r\n\r\n  function unlock(bytes32 _r, bytes32 _s, bytes32 _pl) {\r\n    assert(lockAddr != 0x0);\r\n    // parse receipt data\r\n    uint8 v;\r\n    uint88 target;\r\n    address newOwner;\r\n    assembly {\r\n        v := calldataload(37)\r\n        target := calldataload(48)\r\n        newOwner := calldataload(68)\r\n    }\r\n    // check permission\r\n    assert(target == uint88(address(this)));\r\n    assert(newOwner == msg.sender);\r\n    assert(newOwner != owner);\r\n    assert(ecrecover(sha3(uint8(0), target, newOwner), v, _r, _s) == lockAddr);\r\n    // update state\r\n    owner = newOwner;\r\n    lockAddr = 0x0;\r\n  }\r\n\r\n  /**\r\n   * Default function; is called when Ether is deposited.\r\n   */\r\n  function() payable {\r\n    // if locked, only allow 0.1 ETH max\r\n    // Note this doesn't prevent other contracts to send funds by using selfdestruct(address);\r\n    // See: https://github.com/ConsenSys/smart-contract-best-practices#remember-that-ether-can-be-forcibly-sent-to-an-account\r\n    assert(lockAddr == address(0) || this.balance <= 1e17);\r\n    Deposit(msg.sender, msg.value);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract FishFactory {\r\n\r\n  event AccountCreated(address proxy);\r\n\r\n  function create(address _owner, address _lockAddr) {\r\n    address proxy = new FishProxy(_owner, _lockAddr);\r\n    AccountCreated(proxy);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_lockAddr\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"}]","ContractName":"FishFactory","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e56b74971475a4ce608450511188f7235c58e9fefdba3a280b780a971dabdbe"}]}