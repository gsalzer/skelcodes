{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/*****\r\n* @title The ICO Contract\r\n*/\r\ncontract DadiToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables of the token */\r\n    string public name = \"DADI\";\r\n    string public symbol = \"DADI\";\r\n    uint8 public decimals = 18;\r\n    string public version = \"H1.0\";\r\n\r\n    address public owner;\r\n\r\n    uint256 public hundredPercent = 1000;\r\n    uint256 public foundersPercentOfTotal = 200;\r\n    uint256 public referralPercentOfTotal = 50;\r\n    uint256 public ecosystemPercentOfTotal = 25;\r\n    uint256 public operationsPercentOfTotal = 25;\r\n\r\n    uint256 public investorCount = 0;\r\n    uint256 public totalRaised; // total ether raised (in wei)\r\n    uint256 public preSaleRaised = 0; // ether raised (in wei)\r\n    uint256 public publicSaleRaised = 0; // ether raised (in wei)\r\n\r\n    // PartnerSale variables\r\n    uint256 public partnerSaleTokensAvailable;\r\n    uint256 public partnerSaleTokensPurchased = 0;\r\n    mapping(address => uint256) public purchasedTokens;\r\n    mapping(address => uint256) public partnerSaleWei;\r\n\r\n    // PreSale variables\r\n    uint256 public preSaleTokensAvailable;\r\n    uint256 public preSaleTokensPurchased = 0;\r\n\r\n    // PublicSale variables\r\n    uint256 public publicSaleTokensAvailable;\r\n    uint256 public publicSaleTokensPurchased = 0;\r\n\r\n    // Price data\r\n    uint256 public partnerSaleTokenPrice = 125;     // USD$0.125\r\n    uint256 public partnerSaleTokenValue;\r\n    uint256 public preSaleTokenPrice = 250;         // USD$0.25\r\n    uint256 public publicSaleTokenPrice = 500;       // USD$0.50\r\n\r\n    // ETH to USD Rate, set by owner: 1 ETH = ethRate USD\r\n    uint256 public ethRate;\r\n\r\n    // Address which will receive raised funds and owns the total supply of tokens\r\n    address public fundsWallet;\r\n    address public ecosystemWallet;\r\n    address public operationsWallet;\r\n    address public referralProgrammeWallet;\r\n    address[] public foundingTeamWallets;\r\n    \r\n    address[] public partnerSaleWallets;\r\n    address[] public preSaleWallets;\r\n    address[] public publicSaleWallets;\r\n   \r\n    /*****\r\n    * State machine\r\n    *  0 - Preparing:            All contract initialization calls\r\n    *  1 - PartnerSale:          Contract is in the invite-only PartnerSale Period\r\n    *  6 - PartnerSaleFinalized: PartnerSale has completed\r\n    *  2 - PreSale:              Contract is in the PreSale Period\r\n    *  7 - PreSaleFinalized:     PreSale has completed\r\n    *  3 - PublicSale:           The public sale of tokens, follows PreSale\r\n    *  8 - PublicSaleFinalized:  The PublicSale has completed\r\n    *  4 - Success:              ICO Successful\r\n    *  5 - Failure:              Minimum funding goal not reached\r\n    *  9 - Refunding:            Owner can transfer refunds\r\n    * 10 - Closed:               ICO has finished, all tokens must have been claimed\r\n    */\r\n    enum SaleState { Preparing, PartnerSale, PreSale, PublicSale, Success, Failure, PartnerSaleFinalized, PreSaleFinalized, PublicSaleFinalized, Refunding, Closed }\r\n    SaleState public state = SaleState.Preparing;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param tokens amount of tokens purchased\r\n    */\r\n    event LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\r\n    event LogRedistributeTokens(address recipient, SaleState state, uint256 tokens);\r\n    event LogRefundProcessed(address recipient, uint256 value);\r\n    event LogRefundFailed(address recipient, uint256 value);\r\n    event LogClaimTokens(address recipient, uint256 tokens);\r\n    event LogFundTransfer(address wallet, uint256 value);\r\n\r\n    /*****\r\n    * @dev Modifier to check that amount transferred is not 0\r\n    */\r\n    modifier nonZero() {\r\n        require(msg.value != 0);\r\n        _;\r\n    }\r\n\r\n    /*****\r\n    * @dev The constructor function to initialize the token related properties\r\n    * @param _wallet                        address     Specifies the address of the funding wallet\r\n    * @param _operationalWallets            address[]   Specifies an array of addresses for [0] ecosystem, [1] operations, [2] referral programme\r\n    * @param _foundingTeamWallets           address[]   Specifies an array of addresses of the founding team wallets\r\n    * @param _initialSupply                 uint256     Specifies the total number of tokens available\r\n    * @param _tokensAvailable               uint256[]   Specifies an array of tokens available for each phase, [0] PartnerSale, [1] PreSale, [2] PublicSale\r\n    */\r\n    function DadiToken (\r\n        address _wallet,\r\n        address[] _operationalWallets,\r\n        address[] _foundingTeamWallets,\r\n        uint256 _initialSupply,\r\n        uint256[] _tokensAvailable\r\n    ) public {\r\n        require(_wallet != address(0));\r\n\r\n        owner = msg.sender;\r\n \r\n        // Token distribution per sale phase\r\n        partnerSaleTokensAvailable = _tokensAvailable[0];\r\n        preSaleTokensAvailable = _tokensAvailable[1];\r\n        publicSaleTokensAvailable = _tokensAvailable[2];\r\n\r\n        // Determine the actual supply using token amount * decimals\r\n        totalSupply = _initialSupply * (uint256(10) ** decimals);\r\n\r\n        // Give all the initial tokens to the contract owner\r\n        balances[owner] = totalSupply;\r\n        Transfer(0x0, owner, totalSupply);\r\n\r\n        // Distribute tokens to the supporting operational wallets\r\n        ecosystemWallet = _operationalWallets[0];\r\n        operationsWallet = _operationalWallets[1];\r\n        referralProgrammeWallet = _operationalWallets[2];\r\n        foundingTeamWallets = _foundingTeamWallets;\r\n        fundsWallet = _wallet;\r\n        \r\n        // Set a base ETHUSD rate\r\n        updateEthRate(300000);\r\n    }\r\n\r\n    /*****\r\n    * @dev Fallback Function to buy the tokens\r\n    */\r\n    function () payable {\r\n        require(\r\n            state == SaleState.PartnerSale || \r\n            state == SaleState.PreSale || \r\n            state == SaleState.PublicSale\r\n        );\r\n\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows transfer of tokens to a recipient who has purchased offline, during the PartnerSale\r\n    * @param _recipient     address     The address of the recipient of the tokens\r\n    * @param _tokens        uint256     The number of tokens purchased by the recipient\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function offlineTransaction (address _recipient, uint256 _tokens) public onlyOwner returns (bool) {\r\n        require(state == SaleState.PartnerSale);\r\n        require(_tokens > 0);\r\n\r\n        // Convert to a token with decimals \r\n        uint256 tokens = _tokens * (uint256(10) ** decimals);\r\n\r\n        purchasedTokens[_recipient] = purchasedTokens[_recipient].add(tokens);\r\n\r\n        // Use original _token argument to increase the count of tokens purchased in the PartnerSale\r\n        partnerSaleTokensPurchased = partnerSaleTokensPurchased.add(_tokens);\r\n\r\n        // Finalize the PartnerSale if necessary\r\n        if (partnerSaleTokensPurchased >= partnerSaleTokensAvailable) {\r\n            state = SaleState.PartnerSaleFinalized;\r\n        }\r\n\r\n        LogTokenPurchase(msg.sender, _recipient, 0, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allow updating the ETH USD exchange rate\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    * @return bool  Return true if the contract is in PartnerSale Period\r\n    */\r\n    function updateEthRate (uint256 rate) public onlyOwner returns (bool) {\r\n        require(rate >= 100000);\r\n        \r\n        ethRate = rate;\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to add a new PartnerSale wallet, used to hold funds safely\r\n    *      Can only be performed in the Preparing state\r\n    * @param _wallet        address     The address of the wallet\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function addPartnerSaleWallet (address _wallet) public onlyOwner returns (bool) {\r\n        require(state < SaleState.PartnerSaleFinalized);\r\n        require(_wallet != address(0));\r\n        partnerSaleWallets.push(_wallet);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to add a new PreSale wallet, used to hold funds safely\r\n    *      Can not be performed in the PreSale state\r\n    * @param _wallet        address     The address of the wallet\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function addPreSaleWallet (address _wallet) public onlyOwner returns (bool) {\r\n        require(state != SaleState.PreSale);\r\n        require(_wallet != address(0));\r\n        preSaleWallets.push(_wallet);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows the contract owner to add a new PublicSale wallet, used to hold funds safely\r\n    *      Can not be performed in the PublicSale state\r\n    * @param _wallet        address     The address of the wallet\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function addPublicSaleWallet (address _wallet) public onlyOwner returns (bool) {\r\n        require(state != SaleState.PublicSale);\r\n        require(_wallet != address(0));\r\n        publicSaleWallets.push(_wallet);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Calculates the number of tokens that can be bought for the amount of Wei transferred\r\n    * @param _amount    uint256     The amount of money invested by the investor\r\n    * @return tokens    uint256     The number of tokens purchased for the amount invested\r\n    */\r\n    function calculateTokens (uint256 _amount) public returns (uint256 tokens) {\r\n        if (isStatePartnerSale()) {\r\n            tokens = _amount * ethRate / partnerSaleTokenPrice;\r\n        } else if (isStatePreSale()) {\r\n            tokens = _amount * ethRate / preSaleTokenPrice;\r\n        } else if (isStatePublicSale()) {\r\n            tokens = _amount * ethRate / publicSaleTokenPrice;\r\n        } else {\r\n            tokens = 0;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to open the Partner/Pre/Crowd Sale periods\r\n    */\r\n    function setPhase (uint256 phase) public onlyOwner {\r\n        state = SaleState(uint(phase));\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to start the Partner Sale\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    */\r\n    function startPartnerSale (uint256 rate) public onlyOwner {\r\n        state = SaleState.PartnerSale;\r\n        updateEthRate(rate);\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to start the Pre Sale\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    */\r\n    function startPreSale (uint256 rate) public onlyOwner {\r\n        state = SaleState.PreSale;\r\n        updateEthRate(rate);\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to start the Public Sale\r\n    * @param rate   uint256  the current ETH USD rate, multiplied by 1000\r\n    */\r\n    function startPublicSale (uint256 rate) public onlyOwner {\r\n        state = SaleState.PublicSale;\r\n        updateEthRate(rate);\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to close the Partner Sale\r\n    */\r\n    function finalizePartnerSale () public onlyOwner {\r\n        require(state == SaleState.PartnerSale);\r\n        \r\n        state = SaleState.PartnerSaleFinalized;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to close the Pre Sale\r\n    */\r\n    function finalizePreSale () public onlyOwner {\r\n        require(state == SaleState.PreSale);\r\n        \r\n        state = SaleState.PreSaleFinalized;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to close the Public Sale\r\n    */\r\n    function finalizePublicSale () public onlyOwner {\r\n        require(state == SaleState.PublicSale);\r\n        \r\n        state = SaleState.PublicSaleFinalized;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to finalize the ICO\r\n    *      and redistribute funds and unsold tokens\r\n    */\r\n    function finalizeIco () public onlyOwner {\r\n        require(state == SaleState.PublicSaleFinalized);\r\n\r\n        state = SaleState.Success;\r\n\r\n        // 2.5% of total goes to DADI ecosystem\r\n        distribute(ecosystemWallet, ecosystemPercentOfTotal);\r\n\r\n        // 2.5% of total goes to DADI+ operations\r\n        distribute(operationsWallet, operationsPercentOfTotal);\r\n\r\n        // 5% of total goes to referral programme\r\n        distribute(referralProgrammeWallet, referralPercentOfTotal);\r\n        \r\n        // 20% of total goes to the founding team wallets\r\n        distributeFoundingTeamTokens(foundingTeamWallets);\r\n\r\n        // redistribute unsold tokens to DADI ecosystem\r\n        uint256 remainingPreSaleTokens = getPreSaleTokensAvailable();\r\n        preSaleTokensAvailable = 0;\r\n        \r\n        uint256 remainingPublicSaleTokens = getPublicSaleTokensAvailable();\r\n        publicSaleTokensAvailable = 0;\r\n\r\n        // we need to represent the tokens with included decimals\r\n        // `2640 ** (10 ^ 18)` not `2640`\r\n        if (remainingPreSaleTokens > 0) {\r\n            remainingPreSaleTokens = remainingPreSaleTokens * (uint256(10) ** decimals);\r\n            balances[owner] = balances[owner].sub(remainingPreSaleTokens);\r\n            balances[ecosystemWallet] = balances[ecosystemWallet].add(remainingPreSaleTokens);\r\n            Transfer(0, ecosystemWallet, remainingPreSaleTokens);\r\n        }\r\n\r\n        if (remainingPublicSaleTokens > 0) {\r\n            remainingPublicSaleTokens = remainingPublicSaleTokens * (uint256(10) ** decimals);\r\n            balances[owner] = balances[owner].sub(remainingPublicSaleTokens);\r\n            balances[ecosystemWallet] = balances[ecosystemWallet].add(remainingPublicSaleTokens);\r\n            Transfer(0, ecosystemWallet, remainingPublicSaleTokens);\r\n        }\r\n\r\n        // Transfer ETH to the funding wallet.\r\n        if (!fundsWallet.send(this.balance)) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to close the ICO\r\n    *      and unsold tokens to the ecosystem wallet. No more tokens \r\n    *      may be claimed\r\n    */\r\n    function closeIco () public onlyOwner {\r\n        state = SaleState.Closed;\r\n    }\r\n    \r\n\r\n    /*****\r\n    * @dev Allow investors to claim their tokens after the ICO is finalized & successful\r\n    * @return   bool  Return true, if executed successfully\r\n    */\r\n    function claimTokens () public returns (bool) {\r\n        require(state == SaleState.Success);\r\n        \r\n        // get the tokens available for the sender\r\n        uint256 tokens = purchasedTokens[msg.sender];\r\n        require(tokens > 0);\r\n\r\n        purchasedTokens[msg.sender] = 0;\r\n\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n      \r\n        LogClaimTokens(msg.sender, tokens);\r\n        Transfer(owner, msg.sender, tokens);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allow investors to take their money back after a failure in the ICO\r\n    * @param _recipient     address     The caller of the function who is looking for refund\r\n    * @return               bool        Return true, if executed successfully\r\n    */\r\n    function refund (address _recipient) public onlyOwner returns (bool) {\r\n        require(state == SaleState.Refunding);\r\n\r\n        uint256 value = partnerSaleWei[_recipient];\r\n        \r\n        require(value > 0);\r\n\r\n        partnerSaleWei[_recipient] = 0;\r\n\r\n        if(!_recipient.send(value)) {\r\n            partnerSaleWei[_recipient] = value;\r\n            LogRefundFailed(_recipient, value);\r\n        }\r\n\r\n        LogRefundProcessed(_recipient, value);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Allows owner to withdraw funds from the contract balance for marketing purposes\r\n    * @param _address       address     The recipient address for the ether\r\n    * @return               bool        Return true, if executed successfully\r\n    */\r\n    function withdrawFunds (address _address, uint256 _amount) public onlyOwner {\r\n        _address.transfer(_amount);\r\n    }\r\n\r\n    /*****\r\n    * @dev Generates a random number from 1 to max based on the last block hash\r\n    * @param max     uint  the maximum value \r\n    * @return a random number\r\n    */\r\n    function getRandom(uint max) public constant returns (uint randomNumber) {\r\n        return (uint(sha3(block.blockhash(block.number - 1))) % max) + 1;\r\n    }\r\n\r\n    /*****\r\n    * @dev Called by the owner of the contract to set the state to Refunding\r\n    */\r\n    function setRefunding () public onlyOwner {\r\n        require(state == SaleState.PartnerSaleFinalized);\r\n        \r\n        state = SaleState.Refunding;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the overall success state of the ICO\r\n    * @return bool whether the state is successful, or not\r\n    */\r\n    function isSuccessful () public constant returns (bool) {\r\n        return state == SaleState.Success;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the amount of PreSale tokens left for purchase\r\n    * @return uint256 the count of tokens available\r\n    */\r\n    function getPreSaleTokensAvailable () public constant returns (uint256) {\r\n        if (preSaleTokensAvailable == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return preSaleTokensAvailable - preSaleTokensPurchased;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the amount of PublicSale tokens left for purchase\r\n    * @return uint256 the count of tokens available\r\n    */\r\n    function getPublicSaleTokensAvailable () public constant returns (uint256) {\r\n        if (publicSaleTokensAvailable == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return publicSaleTokensAvailable - publicSaleTokensPurchased;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the total count of tokens purchased in all the Sale periods\r\n    * @return uint256 the count of tokens purchased\r\n    */\r\n    function getTokensPurchased () public constant returns (uint256) {\r\n        return partnerSaleTokensPurchased + preSaleTokensPurchased + publicSaleTokensPurchased;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the total amount raised in the PreSale and PublicSale periods\r\n    * @return uint256 the amount raised, in Wei\r\n    */\r\n    function getTotalRaised () public constant returns (uint256) {\r\n        return preSaleRaised + publicSaleRaised;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the balance sent to the contract\r\n    * @return uint256 the amount sent to this contract, in Wei\r\n    */\r\n    function getBalance () public constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the balance of the funds wallet used to transfer the final balance\r\n    * @return uint256 the amount sent to the funds wallet at the end of the ICO, in Wei\r\n    */\r\n    function getFundsWalletBalance () public constant onlyOwner returns (uint256) {\r\n        return fundsWallet.balance;\r\n    }\r\n\r\n    /*****\r\n    * @dev Get the count of unique investors\r\n    * @return uint256 the total number of unique investors\r\n    */\r\n    function getInvestorCount () public constant returns (uint256) {\r\n        return investorCount;\r\n    }\r\n\r\n    /*****\r\n    * @dev Send ether to the fund collection wallets\r\n    */\r\n    function forwardFunds (uint256 _value) internal {\r\n        // if (isStatePartnerSale()) {\r\n        //     // move funds to a partnerSaleWallet\r\n        //     if (partnerSaleWallets.length > 0) {\r\n        //         // Transfer ETH to a random wallet\r\n        //         uint accountNumber = getRandom(partnerSaleWallets.length) - 1;\r\n        //         address account = partnerSaleWallets[accountNumber];\r\n        //         account.transfer(_value);\r\n        //         LogFundTransfer(account, _value);\r\n        //     }\r\n        // }\r\n\r\n        uint accountNumber;\r\n        address account;\r\n\r\n        if (isStatePreSale()) {\r\n            // move funds to a preSaleWallet\r\n            if (preSaleWallets.length > 0) {\r\n                // Transfer ETH to a random wallet\r\n                accountNumber = getRandom(preSaleWallets.length) - 1;\r\n                account = preSaleWallets[accountNumber];\r\n                account.transfer(_value);\r\n                LogFundTransfer(account, _value);\r\n            }\r\n        } else if (isStatePublicSale()) {\r\n            // move funds to a publicSaleWallet\r\n            if (publicSaleWallets.length > 0) {\r\n                // Transfer ETH to a random wallet\r\n                accountNumber = getRandom(publicSaleWallets.length) - 1;\r\n                account = publicSaleWallets[accountNumber];\r\n                account.transfer(_value);\r\n                LogFundTransfer(account, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Internal function to execute the token transfer to the recipient\r\n    *      In the PartnerSale period, token balances are stored in a separate mapping, to\r\n    *      await the PartnerSaleFinalized state, when investors may call claimTokens\r\n    * @param _recipient     address     The address of the recipient of the tokens\r\n    * @param _value         uint256     The amount invested by the recipient\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function buyTokens (address _recipient, uint256 _value) internal returns (bool) {\r\n        uint256 boughtTokens = calculateTokens(_value);\r\n        require(boughtTokens != 0);\r\n\r\n        if (isStatePartnerSale()) {\r\n            // assign tokens to separate mapping\r\n            purchasedTokens[_recipient] = purchasedTokens[_recipient].add(boughtTokens);\r\n            partnerSaleWei[_recipient] = partnerSaleWei[_recipient].add(_value);\r\n        } else {\r\n            // increment the unique investor count\r\n            if (purchasedTokens[_recipient] == 0) {\r\n                investorCount++;\r\n            }\r\n\r\n            // assign tokens to separate mapping, that is not \"balances\"\r\n            purchasedTokens[_recipient] = purchasedTokens[_recipient].add(boughtTokens);\r\n        }\r\n\r\n       \r\n        LogTokenPurchase(msg.sender, _recipient, _value, boughtTokens);\r\n\r\n        forwardFunds(_value);\r\n\r\n        updateSaleParameters(_value, boughtTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n    * @dev Internal function to modify parameters based on tokens bought\r\n    * @param _value         uint256     The amount invested in exchange for the tokens\r\n    * @param _tokens        uint256     The number of tokens purchased\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function updateSaleParameters (uint256 _value, uint256 _tokens) internal returns (bool) {\r\n        // we need to represent the integer value of tokens here\r\n        // tokensPurchased = `2640`, not `2640 ** (10 ^ 18)`\r\n        uint256 tokens = _tokens / (uint256(10) ** decimals);\r\n\r\n        if (isStatePartnerSale()) {\r\n            partnerSaleTokensPurchased = partnerSaleTokensPurchased.add(tokens);\r\n\r\n            // No PartnerSale tokens remaining\r\n            if (partnerSaleTokensPurchased >= partnerSaleTokensAvailable) {\r\n                state = SaleState.PartnerSaleFinalized;\r\n            }\r\n        } else if (isStatePreSale()) {\r\n            preSaleTokensPurchased = preSaleTokensPurchased.add(tokens);\r\n\r\n            preSaleRaised = preSaleRaised.add(_value);\r\n\r\n            // No PreSale tokens remaining\r\n            if (preSaleTokensPurchased >= preSaleTokensAvailable) {\r\n                state = SaleState.PreSaleFinalized;\r\n            }\r\n        } else if (isStatePublicSale()) {\r\n            publicSaleTokensPurchased = publicSaleTokensPurchased.add(tokens);\r\n\r\n            publicSaleRaised = publicSaleRaised.add(_value);\r\n\r\n            // No PublicSale tokens remaining\r\n            if (publicSaleTokensPurchased >= publicSaleTokensAvailable) {\r\n                state = SaleState.PublicSaleFinalized;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Internal calculation for the amount of Wei the specified tokens are worth\r\n    * @param _tokens    uint256     The number of tokens purchased by the investor\r\n    * @return amount    uint256     The amount the tokens are worth\r\n    */\r\n    function calculateValueFromTokens (uint256 _tokens) internal returns (uint256) {\r\n        uint256 amount = _tokens.div(ethRate.div(partnerSaleTokenPrice));\r\n        return amount;\r\n    }\r\n\r\n    /*****\r\n    * @dev Private function to distribute tokens evenly amongst the founding team wallet addresses\r\n    * @param _recipients    address[]   An array of founding team wallet addresses\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function distributeFoundingTeamTokens (address[] _recipients) private returns (bool) {\r\n        // determine the split between wallets\r\n        // to arrive at a valid percentage we start the percentage the founding team has\r\n        // available, which is 20% of the total supply. The percentage to distribute then is the\r\n        // total percentage divided by the number of founding team wallets (likely 4).\r\n        uint percentage = foundersPercentOfTotal / _recipients.length;\r\n\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            distribute(_recipients[i], percentage);\r\n        }\r\n    }\r\n\r\n    /*****\r\n    * @dev Private function to move tokens to the specified wallet address\r\n    * @param _recipient     address     The address of the wallet to move tokens to\r\n    * @param percentage     uint        The percentage of the total supply of tokens to move\r\n    * @return success       bool        Returns true if executed successfully\r\n    */\r\n    function distribute (address _recipient, uint percentage) private returns (bool) {\r\n        uint256 tokens = totalSupply / (hundredPercent / percentage);\r\n\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        balances[_recipient] = balances[_recipient].add(tokens);\r\n        Transfer(0, _recipient, tokens);\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the PartnerSale state of the contract\r\n    * @return bool  Return true if the contract is in the PartnerSale state\r\n    */\r\n    function isStatePartnerSale () private constant returns (bool) {\r\n        return state == SaleState.PartnerSale;\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the PreSale state of the contract\r\n    * @return bool  Return true if the contract is in the PreSale state\r\n    */\r\n    function isStatePreSale () private constant returns (bool) {\r\n        return state == SaleState.PreSale;\r\n    }\r\n\r\n    /*****\r\n    * @dev Check the PublicSale state of the contract\r\n    * @return bool  Return true if the contract is in the PublicSale state\r\n    */\r\n    function isStatePublicSale () private constant returns (bool) {\r\n        return state == SaleState.PublicSale;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundsWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerSaleWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralProgrammeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePublicSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPartnerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"startPublicSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"foundingTeamWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePartnerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokensPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPartnerSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPublicSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addPreSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerSaleWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSaleTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"offlineTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_operationalWallets\",\"type\":\"address[]\"},{\"name\":\"_foundingTeamWallets\",\"type\":\"address[]\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokensAvailable\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogRedistributeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LogClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogFundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DadiToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000284b6f8c908d13bd7938b0835ef03cfd11ee73b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ddbaef9a11e01978b09a7b4f68333d2004b9837a00000000000000000000000084afeae595b14dfbee3da278fab7f078bac6848e000000000000000000000000542a78ea69cb13f79d95e2e5c83c9c2307c209a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000091770ab877fba3ccb00940b2c1a68f623b55f413000000000000000000000000be3c70ea15c978156b6019a25fdb1a1fa9d4d8e6000000000000000000000000948af657a8d5cd0c94886729ef332795102b9a00000000000000000000000000b7ec5a63f316522faa671a6f0643976eeb3743460000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000002faf080","Library":"","SwarmSource":"bzzr://c800631c74f9d1cdc373473e3237ee226148685311820f356d34d77940e61b17"}]}