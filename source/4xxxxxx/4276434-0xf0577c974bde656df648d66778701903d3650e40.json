{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract Registry {\r\n  address public owner;\r\n  mapping (address => uint) public expirations;\r\n  uint weiPerBlock;\r\n  uint minBlockPurchase;\r\n\r\n  function Registry() {\r\n    owner = msg.sender;\r\n    // works out to about $7 per month\r\n    weiPerBlock = 100000000000;\r\n    // roughly 1 day worth of blocks at 20 sec transaction time\r\n    minBlockPurchase = 4320;\r\n  }\r\n\r\n  function () payable {\r\n    if (expirations[msg.sender] > 0 && expirations[msg.sender] < block.number) {\r\n      // The sender already has credit, add to it\r\n      expirations[msg.sender] += blocksForWei(msg.value);\r\n    } else {\r\n      // The senders credit has either expired or the sender is unregistered\r\n      // Give them block credits starting from the current block\r\n      expirations[msg.sender] = block.number + blocksForWei(msg.value);\r\n    }\r\n  }\r\n\r\n  function blocksForWei(uint weiValue) returns (uint) {\r\n    assert(weiValue >= weiPerBlock * minBlockPurchase);\r\n    return weiValue / weiPerBlock;\r\n  }\r\n\r\n  function setWeiPerBlock(uint newWeiPerBlock) {\r\n    if (msg.sender == owner) weiPerBlock = newWeiPerBlock;\r\n  }\r\n\r\n  function setMinBlockPurchase(uint newMinBlockPurchase) {\r\n    if (msg.sender == owner) minBlockPurchase = newMinBlockPurchase;\r\n  }\r\n\r\n  function withdraw(uint weiValue) {\r\n    if (msg.sender == owner) owner.transfer(weiValue);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinBlockPurchase\",\"type\":\"uint256\"}],\"name\":\"setMinBlockPurchase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"expirations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWeiPerBlock\",\"type\":\"uint256\"}],\"name\":\"setWeiPerBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"blocksForWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Registry","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48049381a7eb545474a493ad7c0d6ceb86676582bae2f1714c29861a685c8907"}]}