{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ncontract TheMoneyFightToken {\r\n    \r\n    enum betStatus{Running,Pending,Done}\r\n    \r\n    address public owner = msg.sender;\r\n    \r\n    uint gamesIndex = 0;\r\n    \r\n    \r\n    uint public constant LOSER_LOCK_TIME = 4 weeks;\r\n    bool public purchasingAllowed = false;\r\n    \r\n    mapping (uint => Game) games;\r\n    mapping (uint => Result) results;\r\n    mapping (uint => Option[]) gameOptions;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalContribution = 0;\r\n    uint256 public cap = 10000000000000000000000;\r\n   \r\n    \r\n    uint256 public totalSupply = 0;\r\n    \r\n    event gameStarted(string gameName,uint id, uint options,uint endTime);\r\n    event gameFinished(uint gameId,uint winningOption, uint256 totalBets, uint256 totalBetsForWinningOption);\r\n    event betAdded(uint gameId,uint option, address ownerAddress, uint256 value);\r\n    event Redeem(uint gameId,uint option,bool winner, address ownerAddress, uint256 reward);\r\n    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    \r\n    struct Option{\r\n        mapping (address=>uint256) status;\r\n    }\r\n    \r\n    struct Game{\r\n        betStatus status;\r\n        mapping (uint => uint256) totalBets;\r\n        uint256 total;\r\n        uint endTime;\r\n        uint finishTime;\r\n    }\r\n    \r\n    struct Result{\r\n        uint winningOption;\r\n        uint locktime;\r\n        uint256 betTotal;\r\n        uint256 winningOptionTotal;\r\n    }\r\n    \r\n    modifier only_owner() {\r\n\t\tif (msg.sender != owner) throw;\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier canRedeem(uint gameId){\r\n\t    if(games[gameId].status != betStatus.Done) throw;\r\n\t    _;\r\n\t}\r\n\t\r\n\tmodifier etherCapNotReached(uint256 _contribution) {\r\n        assert(safeAdd(totalContribution, _contribution) <= cap);\r\n        _;\r\n    }\r\n\t\r\n\tfunction canBet(uint gameId) returns(bool success){\r\n\t    bool running = now < games[gameId].finishTime;\r\n\t    bool statusOk =  games[gameId].status == betStatus.Running;\r\n\t    if(statusOk && !running) {\r\n\t        games[gameId].status = betStatus.Pending; \r\n\t        statusOk = false;\r\n\t    }\r\n\t    return running && statusOk;\r\n\t} \r\n\t\r\n   function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n   }\r\n   \r\n   function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n     assert(b > 0);\r\n     uint c = a / b;\r\n     assert(a == b * c + a % b);\r\n     return c;\r\n    }\r\n    \r\n\r\n\r\n    function name() constant returns (string) { return \"The Money Fight\"; }\r\n    function symbol() constant returns (string) { return \"MFT\"; }\r\n    function decimals() constant returns (uint8) { return 18; }\r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    \r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    } \r\n    \r\n    function createGame(string name,uint opts,uint endTime) only_owner { \r\n        uint currGame = ++gamesIndex;\r\n        games[currGame] = Game(betStatus.Running, 0 , 0, endTime);\r\n        for(uint i = 0 ; i < opts ; i++ ){\r\n            gameOptions[currGame].push(Option());\r\n        }\r\n        gameStarted(name,currGame,opts,endTime);\r\n    }\r\n    \r\n    function predictWinner(uint game, uint option, uint256 _value) {\r\n        Game curr = games[game];\r\n        betStatus status = curr.status;\r\n        uint256 fromBalance = balances[msg.sender];\r\n        bool sufficientFunds =  fromBalance >= _value;\r\n        if (_value > 0 && sufficientFunds && canBet(game)) {\r\n            balances[msg.sender] -= _value;\r\n            gameOptions[game][option].status[msg.sender]= _value;\r\n            curr.totalBets[option] += _value;\r\n            curr.total += _value;\r\n            betAdded(game,option,msg.sender,_value);\r\n        }\r\n    }\r\n    \r\n    function redeem(uint game, uint256 option) canRedeem(game) {\r\n            bool won = results[game].winningOption == option;\r\n            if(!won){\r\n                uint256 val =gameOptions[game][option].status[msg.sender];\r\n                if(val > 0 && results[game].locktime < now){\r\n                    gameOptions[game][option].status[msg.sender] = 0;\r\n                    balances[msg.sender] += val;\r\n                    Redeem(game,option,false,msg.sender,val);\r\n                }\r\n            } else {\r\n                uint256 total = calculatePrize(msg.sender,game,option);\r\n                if(total > 0){\r\n                    uint256 value = gameOptions[game][option].status[msg.sender];\r\n                    gameOptions[game][option].status[msg.sender] = 0;\r\n                    totalSupply += (total - value);\r\n                    balances[msg.sender] += total;\r\n                    Redeem(game,option,true,msg.sender,total);\r\n                }\r\n            }\r\n    }\r\n    \r\n    function calculatePrize(address sender, uint game,uint option) internal returns (uint256 val){\r\n        uint256 value = gameOptions[game][option].status[sender];\r\n        if(value > 0){\r\n            uint256 total =safeDiv(safeMul(results[game].betTotal,value),results[game].winningOptionTotal);\r\n            return total;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    \r\n    function finishGame(uint game, uint winOption) only_owner {\r\n       Game curr = games[game];\r\n       curr.status = betStatus.Done;  \r\n       results[game] = Result(winOption, now + LOSER_LOCK_TIME, curr.total, curr.totalBets[winOption]); \r\n       gameFinished(game, winOption, curr.total, curr.totalBets[winOption]);\r\n    }\r\n    \r\n    function drain(uint256 bal) only_owner {\r\n\t\tif (!owner.send(bal)) throw;\r\n\t}\r\n\t\r\n\tfunction getTotalPrediction(uint game, uint option) public constant returns (uint256 total,uint256 totalOption){\r\n\t    Game curr = games[game];\r\n\t    return (curr.total, curr.totalBets[option]);\r\n\t}\r\n\t\r\n    function getPrediction(uint game, uint o) returns (uint256 bet) {\r\n        return gameOptions[game][o].status[msg.sender];\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) only_owner returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    } \r\n   \r\n    function enablePurchasing() only_owner {\r\n        purchasingAllowed = true;\r\n    }\r\n\r\n    function disablePurchasing() only_owner{\r\n        purchasingAllowed = false;\r\n    }\r\n    function() payable etherCapNotReached(msg.value) {\r\n        if (!purchasingAllowed) { throw; }\r\n        \r\n        if (msg.value == 0) { return; }\r\n\r\n        owner.transfer(msg.value);\r\n        totalContribution += msg.value;\r\n\r\n        uint256 tokensIssued = msg.value * 100;\r\n\r\n        totalSupply += tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n        \r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"opts\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"o\",\"type\":\"uint256\"}],\"name\":\"getPrediction\",\"outputs\":[{\"name\":\"bet\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"canBet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOSER_LOCK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"getTotalPrediction\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"totalOption\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"option\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"predictWinner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"uint256\"},{\"name\":\"winOption\",\"type\":\"uint256\"}],\"name\":\"finishGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"options\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"gameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winningOption\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalBets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalBetsForWinningOption\",\"type\":\"uint256\"}],\"name\":\"gameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"option\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"betAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"option\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TheMoneyFightToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1022b742cd0bfab9111c275c6bba2b56dca1065a8f5f8386f9208c381a84099d"}]}