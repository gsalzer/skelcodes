{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*\r\n * Haltable\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n  modifier stopNonOwnersInEmergency {\r\n    require(!halted && msg.sender == owner);\r\n    _;\r\n  }\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n}\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n  enum State { Active, Refunding, Closed }\r\n  mapping (address => uint256) public deposited;\r\n  \r\n  address public wallet;\r\n  State public state;\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n  function deposit(address investor) onlyOwner payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n  function close() onlyOwner payable {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n  function enableRefunds() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n  function refund(address investor) payable {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n    var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Harbor token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract HarborToken is StandardToken, Ownable {\r\n  //define HarborToken\r\n  string public constant name = \"HarborToken\";\r\n  string public constant symbol = \"HBR\";\r\n  uint8 public constant decimals = 18;\r\n   /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintOpened();\r\n  event MintFinished();\r\n  event MintingAgentChanged(address addr, bool state  );\r\n  event BurnToken(address addr,uint256 amount);\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyMintAgent canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to burn down tokens\r\n   * @param _addr The address that will burn the tokens.\r\n   * @param  _amount The amount of tokens to burn.\r\n   * @return A boolean that indicates if the burn up was successful.\r\n   */\r\n  function burn(address _addr,uint256 _amount) onlyMintAgent canMint  returns (bool) {\r\n    require(_amount > 0);\r\n    totalSupply = totalSupply.sub(_amount);\r\n    balances[_addr] = balances[_addr].sub(_amount);\r\n    BurnToken(_addr,_amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to resume minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function openMinting() onlyOwner returns (bool) {\r\n    mintingFinished = false;\r\n    MintOpened();\r\n     return true;\r\n  }\r\n /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title HarborPresale \r\n */\r\ncontract HarborPresale is Haltable {\r\n  using SafeMath for uint256;\r\n  // The token being sold\r\n  HarborToken public token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  // address where funds are excutionFunds\r\n  address public wallet;\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  //max amount of funds raised\r\n  uint256 public cap;\r\n  //is crowdsale end\r\n  bool public isFinalized = false;\r\n   // minimum amount of funds to be raised in weis\r\n  uint256 public minimumFundingGoal;\r\n  // minimum amount of funds for once \r\n  uint256 public minSend;\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n  //How many tokens were Minted\r\n  uint public tokensMinted;\r\n  //presale buyers\r\n  mapping (address => uint256) public tokenDeposited;\r\n  //event for crowdsale end\r\n  event Finalized();\r\n //event for presale mint\r\n  event TokenMinted(uint count);\r\n  // We distributed tokens to an investor\r\n  event Distributed(address investor, uint tokenAmount);\r\n  //presale period is Changed\r\n  event PeriodChanged(uint256 starttm,uint256 endtm);\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param investor who participate presale\r\n   * @param value weis paid for purchase\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value);\r\n  function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n    require(_cap > 0);\r\n    require(_minimumFundingGoal > 0);\r\n    \r\n    token = HarborToken(_token);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    cap = _cap;\r\n    vault = new RefundVault(_wallet);\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n    minSend = _minSend;\r\n  }\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  // low level token purchase function\r\n  function buyTokens(address investor) payable stopInEmergency {\r\n    require(investor != 0x0);\r\n    require(validPurchase());\r\n    require(minSend <= msg.value);\r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    //save for distribution HBR\r\n    tokenDeposited[investor] = tokenDeposited[investor].add(weiAmount);\r\n    //valut save for refund\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n    TokenPurchase(msg.sender, investor, weiAmount);\r\n  }\r\n  /**\r\n   * Load funds to the crowdsale for all investors.\r\n   */\r\n  function mintForEverybody() onlyOwner public {\r\n    uint256 allTokenAmount = weiRaised.mul(rate);\r\n    //for project amount (investor token *2/3)\r\n    uint256 projectAmount = allTokenAmount.mul(2);\r\n    projectAmount = projectAmount.div(3);\r\n    //mint for investor;\r\n    token.mint(address(this),allTokenAmount);\r\n    //mint for project share\r\n    token.mint(wallet,projectAmount);\r\n    // Record how many tokens we got\r\n    tokensMinted = allTokenAmount.add(projectAmount);\r\n    TokenMinted(tokensMinted);\r\n  }\r\n  //get claim of token byself\r\n  function claimToken() payable stopInEmergency{\r\n    claimTokenAddress(msg.sender);\r\n  }\r\n  //get claim of token by address\r\n  function claimTokenAddress(address investor) payable stopInEmergency returns(uint256){\r\n     require(isFinalized);\r\n     require(tokenDeposited[investor] != 0);\r\n    \r\n    uint256 depositedValue = tokenDeposited[investor];\r\n    tokenDeposited[investor] = 0;\r\n    uint256 tokenAmount = depositedValue * rate;\r\n    //send token to investor\r\n    token.transfer(investor,tokenAmount);\r\n    Distributed(investor, tokenAmount);\r\n    return tokenAmount;\r\n  }\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool withinCap = weiRaised <= cap;\r\n    return withinPeriod && nonZeroPurchase && withinCap;\r\n  }\r\n  // @return true if HarborPresale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return (now > endTime) || capReached ;\r\n  }\r\n   /**\r\n   *  called after Presale ends\r\n   */\r\n  function finalize() onlyOwner stopInEmergency{\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n    finalization();\r\n    Finalized();\r\n    \r\n    isFinalized = true;\r\n  }\r\n  /**\r\n   *  finalization  refund or excute funds.\r\n   */\r\n  function finalization() internal {\r\n    if (minFundingGoalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n  }\r\n   // if presale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() stopInEmergency payable {\r\n    require(isFinalized);\r\n    require(!minFundingGoalReached());\r\n    vault.refund(msg.sender);\r\n  }\r\n  function minFundingGoalReached() public constant returns (bool) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n  //change presale preiod \r\n  function setPeriod(uint256 _startTime,uint256 _endTime) onlyOwner {\r\n    require(now <= _endTime);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    PeriodChanged(startTime,endTime);\r\n  }\r\n  \r\n  //withdrow for manual distribution\r\n  function withdrawFund() onlyOwner payable{\r\n    require(isFinalized);\r\n    require(minFundingGoalReached());\r\n    uint256 tokenAmount = token.balanceOf(address(this));\r\n    token.transfer(wallet, tokenAmount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"claimTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintForEverybody\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_minimumFundingGoal\",\"type\":\"uint256\"},{\"name\":\"_minSend\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starttm\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtm\",\"type\":\"uint256\"}],\"name\":\"PeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HarborPresale","CompilerVersion":"v0.4.15-nightly.2017.7.31+commit.93f90eb2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b90c424cf535c44f2f89c9159d0f26179943927a0000000000000000000000000000000000000000000000000000000059c8efc00000000000000000000000000000000000000000000000000000000059f5c2c00000000000000000000000000000000000000000000000000000000000000af000000000000000000000000018e7198df1a53a85538854ebeef8422e1f6f087300000000000000000000000000000000000000000000005150ae84a8cdf0000000000000000000000000000000000000000000000000001043561a88293000000000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://a55c3962accf585a31af5c60759b4c15285d92c4c33216a8ee8820640e23d8f0"}]}