{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/* ********** Zeppelin Solidity - v1.3.0 ********** */\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/* ********** RxEAL Token Contract ********** */\r\n\r\n\r\n\r\n/**\r\n * @title RxEALTokenContract\r\n * @author RxEAL.com\r\n *\r\n * ERC20 Compatible token\r\n * Zeppelin Solidity - v1.3.0\r\n */\r\n\r\ncontract RxEALTokenContract is StandardToken {\r\n\r\n  /* ********** Token Predefined Information ********** */\r\n\r\n  // Predefine token info\r\n  string public constant name = \"RxEAL\";\r\n  string public constant symbol = \"RXL\";\r\n  uint256 public constant decimals = 18;\r\n\r\n  /* ********** Defined Variables ********** */\r\n\r\n  // Total tokens supply 96 000 000\r\n  // For ethereum wallets we added decimals constant\r\n  uint256 public constant INITIAL_SUPPLY = 96000000 * (10 ** decimals);\r\n  // Vault where tokens are stored\r\n  address public vault = this;\r\n  // Sale agent who has permissions to sell tokens\r\n  address public salesAgent;\r\n  // Array of token owners\r\n  mapping (address => bool) public owners;\r\n\r\n  /* ********** Events ********** */\r\n\r\n  // Contract events\r\n  event OwnershipGranted(address indexed _owner, address indexed revoked_owner);\r\n  event OwnershipRevoked(address indexed _owner, address indexed granted_owner);\r\n  event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\r\n  event SalesAgentRemoved(address indexed currentSalesAgent);\r\n  event Burn(uint256 value);\r\n\r\n  /* ********** Modifiers ********** */\r\n\r\n  // Throws if called by any account other than the owner\r\n  modifier onlyOwner() {\r\n    require(owners[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  /* ********** Functions ********** */\r\n\r\n  // Constructor\r\n  function RxEALTokenContract() {\r\n    owners[msg.sender] = true;\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[vault] = totalSupply;\r\n  }\r\n\r\n  // Allows the current owner to grant control of the contract to another account\r\n  function grantOwnership(address _owner) onlyOwner public {\r\n    require(_owner != address(0));\r\n    owners[_owner] = true;\r\n    OwnershipGranted(msg.sender, _owner);\r\n  }\r\n\r\n  // Allow the current owner to revoke control of the contract from another owner\r\n  function revokeOwnership(address _owner) onlyOwner public {\r\n    require(_owner != msg.sender);\r\n    owners[_owner] = false;\r\n    OwnershipRevoked(msg.sender, _owner);\r\n  }\r\n\r\n  // Transfer sales agent permissions to another account\r\n  function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\r\n    SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\r\n    salesAgent = _salesAgent;\r\n  }\r\n\r\n  // Remove sales agent from token\r\n  function removeSalesAgent() onlyOwner public {\r\n    SalesAgentRemoved(salesAgent);\r\n    salesAgent = address(0);\r\n  }\r\n\r\n  // Transfer tokens from vault to account if sales agent is correct\r\n  function transferTokensFromVault(address _from, address _to, uint256 _amount) public {\r\n    require(salesAgent == msg.sender);\r\n    balances[vault] = balances[vault].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(_from, _to, _amount);\r\n  }\r\n\r\n  // Allow the current owner to burn a specific amount of tokens from the vault\r\n  function burn(uint256 _value) onlyOwner public {\r\n    require(_value > 0);\r\n    balances[vault] = balances[vault].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(_value);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/* ********** RxEAL Presale Contract ********** */\r\n\r\n\r\n\r\ncontract RxEALPresaleContract {\r\n  // Extend uint256 to use SafeMath functions\r\n  using SafeMath for uint256;\r\n\r\n  /* ********** Defined Variables ********** */\r\n\r\n  // The token being sold\r\n  RxEALTokenContract public token;\r\n  // Start and end timestamps where sales are allowed (both inclusive)\r\n  uint256 public startTime = 1512388800;\r\n  uint256 public endTime = 1514721600;\r\n  // Address where funds are collected\r\n  address public wallet1 = 0x56E4e5d451dF045827e214FE10bBF99D730d9683;\r\n  address public wallet2 = 0x8C0988711E60CfF153359Ab6CFC8d45565C6ce79;\r\n  address public wallet3 = 0x0EdF5c34ddE2573f162CcfEede99EeC6aCF1c2CB;\r\n  address public wallet4 = 0xcBdC5eE000f77f3bCc0eFeF0dc47d38911CBD45B;\r\n  // How many token units a buyer gets per wei\r\n  // Rate per ether equals rate * (10 ** token.decimals())\r\n  uint256 public rate = 800;\r\n  // Cap in ethers\r\n  uint256 public cap = 7200 * 1 ether;\r\n  // Amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /* ********** Events ********** */\r\n\r\n  // Event for token purchase logging\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\r\n\r\n  /* ********** Functions ********** */\r\n\r\n  // Constructor\r\n  function RxEALPresaleContract() {\r\n    token = RxEALTokenContract(0xD6682Db9106e0cfB530B697cA0EcDC8F5597CD15);\r\n  }\r\n\r\n  // Fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // Low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // Send spare wei back if investor sent more that cap\r\n    uint256 tempWeiRaised = weiRaised.add(weiAmount);\r\n    if (tempWeiRaised > cap) {\r\n      uint256 spareWeis = tempWeiRaised.sub(cap);\r\n      weiAmount = weiAmount.sub(spareWeis);\r\n      beneficiary.transfer(spareWeis);\r\n    }\r\n\r\n    // Calculate token amount to be sold\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // Update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Tranfer tokens from vault\r\n    token.transferTokensFromVault(msg.sender, beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds(weiAmount);\r\n  }\r\n\r\n  // Send wei to the fund collection wallets\r\n  function forwardFunds(uint256 weiAmount) internal {\r\n    uint256 value = weiAmount.div(4);\r\n\r\n    wallet1.transfer(value);\r\n    wallet2.transfer(value);\r\n    wallet3.transfer(value);\r\n    wallet4.transfer(value);\r\n  }\r\n\r\n  // Validate if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised < cap;\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase && withinCap;\r\n  }\r\n\r\n  // Validate if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return now > endTime || capReached;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"RxEALPresaleContract","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea69472c2e5895b9c02d3d84b020af4efba6d7f36ba9f4b4343489308b4eab77"}]}