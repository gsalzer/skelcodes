{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract AirdropFinal {\r\n    ERC20 public token;\r\n    address public creator;\r\n\r\n        modifier isCreator() {\r\n        require(msg.sender == creator);\r\n        // if (msg.sender != creator) throw;\r\n        _;\r\n    }\r\n    \r\n    event LogAccountAmount(address indexed user, uint256 indexed amount);\r\n\r\n    function AirdropFinal(address _token) public {\r\n        token = ERC20(_token);\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function setToken(address _token) public {\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    // Uses transferFrom so you'll need to approve some tokens before this one to\r\n    // this contract address\r\n    function startAirdrop(address[] users, uint256 amounts) public {\r\n        for(uint256 i = 0; i < users.length; i++) {\r\n            address account = users[i];\r\n            uint256 amount = amounts;\r\n            \r\n            LogAccountAmount(account, amount);\r\n            \r\n            token.transfer(account, amount);\r\n        }\r\n    }\r\n    \r\n    function recoverTokens(address _user, uint256 _amount) public {\r\n        token.transfer(_user, _amount);\r\n    }\r\n    function removeContract() public isCreator()\r\n        {\r\n            selfdestruct(msg.sender);\r\n            \r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"startAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAccountAmount\",\"type\":\"event\"}]","ContractName":"AirdropFinal","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ebe4a49df7885d015329c919bf43e6460a858f1e","Library":"","SwarmSource":"bzzr://1f804dd4b69b10fa02333b9baa3c42d14d34ebbeb791304e4bdbe54f1dfd517f"}]}