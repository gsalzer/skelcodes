{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Dec {\r\n    function decimals() public view returns (uint8);\r\n}\r\n\r\ncontract KeeToken is ERC20, Ownable {\r\n    // ERC20 standards\r\n    string public symbol = \"KEE\";\r\n    uint8 public decimals = 0;\r\n    uint public totalSupply = 1000; // inestimable\r\n    string public name = \"CryptoKEE\";\r\n\r\n    struct AddRec {\r\n        address add;\r\n        uint8   decimals;\r\n    }\r\n\r\n    // specific data\r\n    AddRec[] eligible;\r\n    AddRec temp;\r\n        // kovan\r\n        // 0x3406954E89bB166F7aF1f3cd198527Af6D3b10D2,\r\n        // 0x7ab59D6dF718c3C5EF2B92777B519782Cc283F60,\r\n        // 0x9090C02e86402E4D5A6a302a08673A0EE5567C91,\r\n        // 0x148D3436a6A024d432bD5277EcF6B98407D46a2F,\r\n        // 0x10Cc6a61b75363789d38ea8A101A51C36C507DEf,\r\n        // 0x81154d24f4de069d1f0c16E3a52e1Ef68714daD9\r\n        \r\n\r\n    mapping (address => bool) public tokenIncluded;\r\n    mapping (address => uint256) public bitRegisters;\r\n    mapping (address => mapping(address => uint256)) public allowed;\r\n\r\n    uint256[] public icoArray;\r\n\r\n    // functions\r\n\r\n    function KeeToken() public {\r\n        addToken(0xB97048628DB6B661D4C2aA833e95Dbe1A905B280,10);\r\n        addToken(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942, 18);\r\n        addToken(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07, 18);\r\n        addToken(0x7C5A0CE9267ED19B22F8cae653F198e3E8daf098, 18);\r\n        addToken(0xB63B606Ac810a52cCa15e44bB630fd42D8d1d83d, 8);\r\n        addToken(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C, 18);\r\n        addToken(0x667088b212ce3d06a1b553a7221E1fD19000d9aF, 18);\r\n        addToken(0xCb94be6f13A1182E4A4B6140cb7bf2025d28e41B, 6);\r\n        addToken(0xFf3519eeeEA3e76F1F699CCcE5E23ee0bdDa41aC, 0);\r\n        addToken(0xE94327D07Fc17907b4DB788E5aDf2ed424adDff6, 18);\r\n        addToken(0x12FEF5e57bF45873Cd9B62E9DBd7BFb99e32D73e, 18);\r\n        addToken(0xE7775A6e9Bcf904eb39DA2b68c5efb4F9360e08C, 6);\r\n        addToken(0x4156D3342D5c385a87D264F90653733592000581, 8);\r\n        addToken(0x58ca3065C0F24C7c96Aee8d6056b5B5deCf9c2f8, 18);\r\n        addToken(0x22F0AF8D78851b72EE799e05F54A77001586B18A, 0);\r\n\r\n        uint mask = 0;\r\n        for (uint i = 0; i < eligible.length; i++) {\r\n            tokenIncluded[eligible[i].add] = true;\r\n        }\r\n        icoArray.push(0);       // 0 - empty to ensure default ico score = 0\r\n        icoArray.push(~mask >> 256 - eligible.length);\r\n    }\r\n\r\n    // external\r\n\r\n    function updateICOmask(uint256 maskPos, uint256 newMask) external onlyOwner {\r\n        require(maskPos != 0); // can update loc 0\r\n        require(maskPos < icoArray.length);\r\n        icoArray[maskPos] = newMask;\r\n    }\r\n\r\n    function setICObyAddress(address ico, uint256 maskPos) external onlyOwner {\r\n        require(maskPos != 0);\r\n        require(maskPos < icoArray.length);\r\n        bitRegisters[ico] = maskPos;\r\n    }\r\n\r\n    function clearICObyAddress(address ico) external onlyOwner {\r\n        bitRegisters[ico] = 0;\r\n    }\r\n\r\n    function icoBalanceOf(address from, address ico) external view returns (uint) {\r\n        uint icoMaskPtr = bitRegisters[ico];\r\n        return icoNumberBalanceOf(from,icoMaskPtr);\r\n    }\r\n\r\n    // public\r\n\r\n    function pushICO(uint256 mask) public onlyOwner {\r\n        icoArray.push(mask);\r\n    }\r\n\r\n\r\n    function addToken(address newToken, uint8 decimalPlaces) public onlyOwner {\r\n        if (tokenIncluded[newToken]) {\r\n            return;\r\n        }\r\n        temp.add = newToken;\r\n        temp.decimals = decimalPlaces;\r\n        \r\n        eligible.push(temp);\r\n        tokenIncluded[newToken] = true;\r\n    }\r\n    \r\n    function updateToken(uint tokenPos, address newToken, uint8 decimalPlaces)  public onlyOwner {\r\n        require(tokenPos < eligible.length);\r\n        eligible[tokenPos].decimals = decimalPlaces;\r\n        eligible[tokenPos].add = newToken;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender,spender,value);\r\n    }\r\n\r\n    function transfer(address to, uint) public returns (bool) {\r\n        return transferX(msg.sender,to);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint) public returns (bool) {\r\n        if (allowed[from][msg.sender] == 0) {\r\n            return false;\r\n        }\r\n        return transferX(from,to);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address from) public view returns (uint) {\r\n        uint zero = 0;\r\n        return internalBalanceOf(from,~zero);\r\n    }\r\n\r\n    function icoNumberBalanceOf(address from, uint icoMaskPtr) public view returns (uint) {\r\n        if (icoMaskPtr == 0) \r\n            return 0;\r\n        if (icoMaskPtr >= icoArray.length) \r\n            return 0;\r\n        uint icoRegister = icoArray[icoMaskPtr];\r\n        return internalBalanceOf(from,icoRegister);\r\n    }\r\n\r\n    // internal\r\n\r\n    function transferX(address from, address to) internal returns (bool) {\r\n        uint myRegister = bitRegisters[from];\r\n        uint yourRegister = bitRegisters[to];\r\n        uint sent = 0;\r\n        uint added = 0;\r\n        for (uint i = 0; i < eligible.length; i++) {\r\n            if (coinBal(eligible[i],from) > 100) {\r\n                myRegister |= (uint(1) << i);\r\n                added++;\r\n            }\r\n        }\r\n        if (added > 0) {\r\n            bitRegisters[from] = myRegister;\r\n        }      \r\n        if ((myRegister & ~yourRegister) > 0) {\r\n            sent = 1;\r\n            bitRegisters[to] = yourRegister | myRegister;\r\n        }\r\n        Transfer(from,to,sent);\r\n        return true;        \r\n    }\r\n\r\n    function internalBalanceOf(address from, uint icoRegister) internal view returns (uint) {\r\n        uint myRegister = bitRegisters[from] & icoRegister;\r\n        uint bal = 0;\r\n        for (uint i = 0; i < eligible.length; i++) {\r\n            uint bit = (uint(1) << i);\r\n            if ( bit & icoRegister == 0 )\r\n                continue;\r\n            if ( myRegister & bit > 0 ) {\r\n                bal++;\r\n                continue;\r\n            }\r\n            uint coins = coinBal(eligible[i], from);\r\n            if (coins > 100) \r\n                bal++;\r\n        }\r\n        return bal;\r\n    }\r\n\r\n    // internal\r\n\r\n    function coinBal(AddRec ico, address from) internal view returns (uint) {\r\n        uint bal = ERC20(ico.add).balanceOf(from);\r\n        return bal / (10 ** uint(ico.decimals));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bitRegisters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"ico\",\"type\":\"address\"}],\"name\":\"icoBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenPos\",\"type\":\"uint256\"},{\"name\":\"newToken\",\"type\":\"address\"},{\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"icoMaskPtr\",\"type\":\"uint256\"}],\"name\":\"icoNumberBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico\",\"type\":\"address\"}],\"name\":\"clearICObyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maskPos\",\"type\":\"uint256\"},{\"name\":\"newMask\",\"type\":\"uint256\"}],\"name\":\"updateICOmask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"},{\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIncluded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico\",\"type\":\"address\"},{\"name\":\"maskPos\",\"type\":\"uint256\"}],\"name\":\"setICObyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"pushICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KeeToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b0d44b807097dfa8fed01216300de6caf02cb3ea24164b46cce8931560544082"}]}