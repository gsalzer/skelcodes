{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Gifto Token by Gifto Limited.\r\n// An ERC20 standard\r\n//\r\n// author: Gifto Team\r\n// Contact: datwhnguyen@gmail.com\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n  \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\ncontract Gifto is ERC20Interface {\r\n    uint public constant decimals = 5;\r\n\r\n    string public constant symbol = \"Gifto\";\r\n    string public constant name = \"Gifto\";\r\n\r\n    bool public _selling = false;//initial not selling\r\n    uint public _totalSupply = 10 ** 14; // total supply is 10^14 unit, equivalent to 10^9 Gifto\r\n    uint public _originalBuyPrice = 10 ** 10; // original buy in wei of one unit. Ajustable.\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n \r\n    // Balances Gifto for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // List of approved investors\r\n    mapping(address => bool) approvedInvestorList;\r\n    \r\n    // mapping Deposit\r\n    mapping(address => uint256) deposit;\r\n    \r\n    // buyers buy token deposit\r\n    address[] buyers;\r\n    \r\n    // icoPercent\r\n    uint _icoPercent = 10;\r\n    \r\n    // _icoSupply is the avalable unit. Initially, it is _totalSupply\r\n    uint public _icoSupply = _totalSupply * _icoPercent / 100;\r\n    \r\n    // minimum buy 0.1 ETH\r\n    uint public _minimumBuy = 10 ** 17;\r\n    \r\n    // maximum buy 30 ETH\r\n    uint public _maximumBuy = 30 * 10 ** 18;\r\n    \r\n    /**\r\n     * Functions with this modifier can only be executed by the owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by users except owners\r\n     */\r\n    modifier onlyNotOwner() {\r\n        require(msg.sender != owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier check on sale status\r\n     * Only allow sale if _selling is on\r\n     */\r\n    modifier onSale() {\r\n        require(_selling && (_icoSupply > 0) );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier check the validity of original buy price\r\n     */\r\n    modifier validOriginalBuyPrice() {\r\n        require(_originalBuyPrice > 0);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of address is investor\r\n     */\r\n    modifier validInvestor() {\r\n        require(approvedInvestorList[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Functions with this modifier check the validity of msg value\r\n     * value must greater than equal minimumBuyPrice\r\n     * total deposit must less than equal maximumBuyPrice\r\n     */\r\n    modifier validValue(){\r\n        // if value < _minimumBuy OR total deposit of msg.sender > maximumBuyPrice\r\n        require ( (msg.value >= _minimumBuy) &&\r\n                ( (deposit[msg.sender] + msg.value) <= _maximumBuy) );\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to buy ether.\r\n    function()\r\n        public\r\n        payable\r\n        validValue {\r\n        // check the first buy => push to Array\r\n        if (deposit[msg.sender] == 0 && msg.value != 0){\r\n            // add new buyer to List\r\n            buyers.push(msg.sender);\r\n        }\r\n        // increase amount deposit of buyer\r\n        deposit[msg.sender] += msg.value;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function Gifto() \r\n        public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n        Transfer(0x0, owner, _totalSupply);\r\n    }\r\n    \r\n    /// @dev Gets totalSupply\r\n    /// @return Total supply\r\n    function totalSupply()\r\n        public \r\n        constant \r\n        returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /// @dev set new icoPercent\r\n    /// @param newIcoPercent new value of icoPercent\r\n    function setIcoPercent(uint256 newIcoPercent)\r\n        public \r\n        onlyOwner\r\n        returns (bool){\r\n        _icoPercent = newIcoPercent;\r\n        _icoSupply = _totalSupply * _icoPercent / 100;\r\n    }\r\n    \r\n    /// @dev set new _minimumBuy\r\n    /// @param newMinimumBuy new value of _minimumBuy\r\n    function setMinimumBuy(uint256 newMinimumBuy)\r\n        public \r\n        onlyOwner\r\n        returns (bool){\r\n        _minimumBuy = newMinimumBuy;\r\n    }\r\n    \r\n    /// @dev set new _maximumBuy\r\n    /// @param newMaximumBuy new value of _maximumBuy\r\n    function setMaximumBuy(uint256 newMaximumBuy)\r\n        public \r\n        onlyOwner\r\n        returns (bool){\r\n        _maximumBuy = newMaximumBuy;\r\n    }\r\n \r\n    /// @dev Gets account's balance\r\n    /// @param _addr Address of the account\r\n    /// @return Account balance\r\n    function balanceOf(address _addr) \r\n        public\r\n        constant \r\n        returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n    \r\n    /// @dev check address is approved investor\r\n    /// @param _addr address\r\n    function isApprovedInvestor(address _addr)\r\n        public\r\n        constant\r\n        returns (bool) {\r\n        return approvedInvestorList[_addr];\r\n    }\r\n    \r\n    /// @dev filter buyers in list buyers\r\n    /// @param isInvestor type buyers, is investor or not\r\n    function filterBuyers(bool isInvestor)\r\n        private\r\n        constant\r\n        returns(address[] filterList){\r\n        address[] memory filterTmp = new address[](buyers.length);\r\n        uint count = 0;\r\n        for (uint i = 0; i < buyers.length; i++){\r\n            if(approvedInvestorList[buyers[i]] == isInvestor){\r\n                filterTmp[count] = buyers[i];\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        filterList = new address[](count);\r\n        for (i = 0; i < count; i++){\r\n            if(filterTmp[i] != 0x0){\r\n                filterList[i] = filterTmp[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @dev filter buyers are investor in list deposited\r\n    function getInvestorBuyers()\r\n        public\r\n        constant\r\n        returns(address[]){\r\n        return filterBuyers(true);\r\n    }\r\n    \r\n    /// @dev filter normal Buyers in list buyer deposited\r\n    function getNormalBuyers()\r\n        public\r\n        constant\r\n        returns(address[]){\r\n        return filterBuyers(false);\r\n    }\r\n    \r\n    /// @dev get ETH deposit\r\n    /// @param _addr address get deposit\r\n    /// @return amount deposit of an buyer\r\n    function getDeposit(address _addr)\r\n        public\r\n        constant\r\n        returns(uint256){\r\n        return deposit[_addr];\r\n    }\r\n    \r\n    /// @dev get total deposit of buyers\r\n    /// @return amount ETH deposit\r\n    function getTotalDeposit()\r\n        public\r\n        constant\r\n        returns(uint256 totalDeposit){\r\n        totalDeposit = 0;\r\n        for (uint i = 0; i < buyers.length; i++){\r\n            totalDeposit += deposit[buyers[i]];\r\n        }\r\n    }\r\n    \r\n    /// @dev delivery token for buyer\r\n    /// @param isInvestor transfer token for investor or not\r\n    ///         true: investors\r\n    ///         false: not investors\r\n    function deliveryToken(bool isInvestor)\r\n        public\r\n        onlyOwner\r\n        validOriginalBuyPrice {\r\n        //sumary deposit of investors\r\n        uint256 sum = 0;\r\n        \r\n        for (uint i = 0; i < buyers.length; i++){\r\n            if(approvedInvestorList[buyers[i]] == isInvestor) {\r\n                \r\n                // compute amount token of each buyer\r\n                uint256 requestedUnits = deposit[buyers[i]] / _originalBuyPrice;\r\n                \r\n                //check requestedUnits > _icoSupply\r\n                if(requestedUnits <= _icoSupply && requestedUnits > 0 ){\r\n                    // prepare transfer data\r\n                    // NOTE: make sure balances owner greater than _icoSupply\r\n                    balances[owner] -= requestedUnits;\r\n                    balances[buyers[i]] += requestedUnits;\r\n                    _icoSupply -= requestedUnits;\r\n                    \r\n                    // submit transfer\r\n                    Transfer(owner, buyers[i], requestedUnits);\r\n                    \r\n                    // reset deposit of buyer\r\n                    sum += deposit[buyers[i]];\r\n                    deposit[buyers[i]] = 0;\r\n                }\r\n            }\r\n        }\r\n        //transfer total ETH of investors to owner\r\n        owner.transfer(sum);\r\n    }\r\n    \r\n    /// @dev return ETH for normal buyers\r\n    function returnETHforNormalBuyers()\r\n        public\r\n        onlyOwner{\r\n        for(uint i = 0; i < buyers.length; i++){\r\n            // buyer not approve investor\r\n            if (!approvedInvestorList[buyers[i]]) {\r\n                // get deposit of buyer\r\n                uint256 buyerDeposit = deposit[buyers[i]];\r\n                // reset deposit of buyer\r\n                deposit[buyers[i]] = 0;\r\n                // return deposit amount for buyer\r\n                buyers[i].transfer(buyerDeposit);\r\n            }\r\n        }\r\n    }\r\n \r\n    /// @dev Transfers the balance from Multisig wallet to an account\r\n    /// @param _to Recipient address\r\n    /// @param _amount Transfered amount in unit\r\n    /// @return Transfer status\r\n    function transfer(address _to, uint256 _amount)\r\n        public \r\n        returns (bool) {\r\n        // if sender's balance has enough unit and amount >= 0, \r\n        //      and the sum is not overflow,\r\n        // then do transfer \r\n        if ( (balances[msg.sender] >= _amount) &&\r\n             (_amount >= 0) && \r\n             (balances[_to] + _amount > balances[_to]) ) {  \r\n\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            \r\n            return true;\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @dev Enables sale \r\n    function turnOnSale() onlyOwner \r\n        public {\r\n        _selling = true;\r\n    }\r\n\r\n    /// @dev Disables sale\r\n    function turnOffSale() onlyOwner \r\n        public {\r\n        _selling = false;\r\n    }\r\n\r\n    /// @dev Gets selling status\r\n    function isSellingNow() \r\n        public \r\n        constant\r\n        returns (bool) {\r\n        return _selling;\r\n    }\r\n\r\n    /// @dev Updates buy price (owner ONLY)\r\n    /// @param newBuyPrice New buy price (in unit)\r\n    function setBuyPrice(uint newBuyPrice) \r\n        onlyOwner \r\n        public {\r\n        _originalBuyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @dev Adds list of new investors to the investors list and approve all\r\n    /// @param newInvestorList Array of new investors addresses to be added\r\n    function addInvestorList(address[] newInvestorList)\r\n        onlyOwner\r\n        public {\r\n        for (uint i = 0; i < newInvestorList.length; i++){\r\n            approvedInvestorList[newInvestorList[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Removes list of investors from list\r\n    /// @param investorList Array of addresses of investors to be removed\r\n    function removeInvestorList(address[] investorList)\r\n        onlyOwner\r\n        public {\r\n        for (uint i = 0; i < investorList.length; i++){\r\n            approvedInvestorList[investorList[i]] = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Buys Gifto\r\n    /// @return Amount of requested units \r\n    function buy() payable\r\n        onlyNotOwner \r\n        validOriginalBuyPrice\r\n        validInvestor\r\n        onSale \r\n        public\r\n        returns (uint256 amount) {\r\n        // convert buy amount in wei to number of unit want to buy\r\n        uint requestedUnits = msg.value / _originalBuyPrice ;\r\n        \r\n        //check requestedUnits <= _icoSupply\r\n        require(requestedUnits <= _icoSupply);\r\n\r\n        // prepare transfer data\r\n        balances[owner] -= requestedUnits;\r\n        balances[msg.sender] += requestedUnits;\r\n        \r\n        // decrease _icoSupply\r\n        _icoSupply -= requestedUnits;\r\n\r\n        // submit transfer\r\n        Transfer(owner, msg.sender, requestedUnits);\r\n\r\n        //transfer ETH to owner\r\n        owner.transfer(msg.value);\r\n        \r\n        return requestedUnits;\r\n    }\r\n    \r\n    /// @dev Withdraws Ether in contract (Owner only)\r\n    /// @return Status of withdrawal\r\n    function withdraw() onlyOwner \r\n        public \r\n        returns (bool) {\r\n        return owner.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBuy\",\"type\":\"uint256\"}],\"name\":\"setMaximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnETHforNormalBuyers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoPercent\",\"type\":\"uint256\"}],\"name\":\"setIcoPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBuy\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSellingNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isApprovedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isInvestor\",\"type\":\"bool\"}],\"name\":\"deliveryToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"}],\"name\":\"addInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDeposit\",\"outputs\":[{\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNormalBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Gifto","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85b4add34c1c736fc55c8889a7b809f3632522776d785648bf03f8ad284359dd"}]}