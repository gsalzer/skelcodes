{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n//\r\n// SafeMath\r\n//\r\n// Ownable\r\n// Destructible\r\n// Pausable\r\n//\r\n// ERC20Basic\r\n// ERC20 : ERC20Basic\r\n// BasicToken : ERC20Basic\r\n// StandardToken : ERC20, BasicToken\r\n// MintableToken : StandardToken, Ownable\r\n// PausableToken : StandardToken, Pausable\r\n//\r\n// CAToken : MintableToken, PausableToken\r\n//\r\n// Crowdsale\r\n// PausableCrowdsale\r\n// BonusCrowdsale\r\n// TokensCappedCrowdsale\r\n// FinalizableCrowdsale\r\n//\r\n// CATCrowdsale\r\n//\r\n\r\n// Date.now()/1000+3600,  Date.now()/1000+3600*2, 4700, \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\"\r\n// 1508896220, 1509899832, 4700, \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\", \"0x00A617f5bE726F92B29985bB4c1850630d907db4\"\r\n// 1507909923, 1508514723, 4700, \"0x0b8e27013dfA822bF1cc01b6Ae394B76DA230a03\", \"0x5F85A0e9DD5Bd2F11a54b208427b286e9B0B519F\", \"0x7F781d08FD165DBEE1D573Bdb79c43045442eac4\", \"0x98bf67b6a03DA7AcF2Ee7348FdB3F9c96425a130\"\r\n// 1509120669, 1519120669, 3000, \"0x06E58BD5DeEC639d9a79c9cD3A653655EdBef820\", \"0x06E58BD5DeEC639d9a79c9cD3A653655EdBef820\", \"0x06E58BD5DeEC639d9a79c9cD3A653655EdBef820\"\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n/**\r\n* @dev Pre main Bitcalve BTL token ERC20 contract\r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n* \r\n*/\r\ncontract BTLToken is MintableToken, PausableToken {\r\n    \r\n    // Metadata\r\n    string public constant symbol = \"BTL\";\r\n    string public constant name = \"BitClave Token\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant version = \"1.0\";\r\n\r\n    /**\r\n    * @dev Override MintableTokenn.finishMinting() to add canMint modifier\r\n    */\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        return super.finishMinting();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @dev Main Bitcalve PreCAT token ERC20 contract\r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n*/\r\ncontract CAToken is BTLToken, Destructible {\r\n\r\n    // Metadata\r\n    string public constant symbol = \"testCAT\";\r\n    string public constant name = \"testCAT\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant version = \"1.0\";\r\n\r\n    // Overrided destructor\r\n    function destroy() public onlyOwner {\r\n        require(mintingFinished);\r\n        super.destroy();\r\n    }\r\n\r\n    // Overrided destructor companion\r\n    function destroyAndSend(address _recipient) public onlyOwner {\r\n        require(mintingFinished);\r\n        super.destroyAndSend(_recipient);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n* @dev Parent crowdsale contract extended with support for pausable crowdsale, meaning crowdsale can be paused by owner at any time\r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n* \r\n* While the contract is in paused state, the contributions will be rejected\r\n* \r\n*/\r\ncontract PausableCrowdsale is Crowdsale, Pausable {\r\n\r\n    function PausableCrowdsale(bool _paused) public {\r\n        if (_paused) {\r\n            pause();\r\n        }\r\n    }\r\n\r\n    // overriding Crowdsale#validPurchase to add extra paused logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal constant returns(bool) {\r\n        return super.validPurchase() && !paused;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @dev Parent crowdsale contract with support for time-based and amount based bonuses \r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n* \r\n*/\r\ncontract BonusCrowdsale is Crowdsale, Ownable {\r\n\r\n    // Constants\r\n    // The following will be populated by main crowdsale contract\r\n    uint32[] public BONUS_TIMES;\r\n    uint32[] public BONUS_TIMES_VALUES;\r\n    uint32[] public BONUS_AMOUNTS;\r\n    uint32[] public BONUS_AMOUNTS_VALUES;\r\n    uint public constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\r\n    \r\n    // Members\r\n    uint public tokenPriceInCents;\r\n    uint public tokenDecimals;\r\n\r\n    /**\r\n    * @dev Contructor\r\n    * @param _tokenPriceInCents token price in USD cents. The price is fixed\r\n    * @param _tokenDecimals number of digits after decimal point for CAT token\r\n    */\r\n    function BonusCrowdsale(uint256 _tokenPriceInCents, uint256 _tokenDecimals) public {\r\n        tokenPriceInCents = _tokenPriceInCents;\r\n        tokenDecimals = _tokenDecimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Retrieve length of bonuses by time array\r\n    * @return Bonuses by time array length\r\n    */\r\n    function bonusesForTimesCount() public constant returns(uint) {\r\n        return BONUS_TIMES.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets bonuses for time\r\n    */\r\n    function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\r\n        require(times.length == values.length);\r\n        for (uint i = 0; i + 1 < times.length; i++) {\r\n            require(times[i] < times[i+1]);\r\n        }\r\n\r\n        BONUS_TIMES = times;\r\n        BONUS_TIMES_VALUES = values;\r\n    }\r\n\r\n    /**\r\n    * @dev Retrieve length of bonuses by amounts array\r\n    * @return Bonuses by amounts array length\r\n    */\r\n    function bonusesForAmountsCount() public constant returns(uint) {\r\n        return BONUS_AMOUNTS.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets bonuses for USD amounts\r\n    */\r\n    function setBonusesForAmounts(uint32[] amounts, uint32[] values) public onlyOwner {\r\n        require(amounts.length == values.length);\r\n        for (uint i = 0; i + 1 < amounts.length; i++) {\r\n            require(amounts[i] > amounts[i+1]);\r\n        }\r\n\r\n        BONUS_AMOUNTS = amounts;\r\n        BONUS_AMOUNTS_VALUES = values;\r\n    }\r\n\r\n    /**\r\n    * @dev Overrided buyTokens method of parent Crowdsale contract  to provide bonus by changing and restoring rate variable\r\n    * @param beneficiary walelt of investor to receive tokens\r\n    */\r\n    function buyTokens(address beneficiary) public payable {\r\n        // Compute usd amount = wei * catsInEth * usdcentsInCat / usdcentsPerUsd / weisPerEth\r\n        uint256 usdValue = msg.value.mul(rate).mul(tokenPriceInCents).div(100).div(1 ether); \r\n        \r\n        // Compute time and amount bonus\r\n        uint256 bonus = computeBonus(usdValue);\r\n\r\n        // Apply bonus by adjusting and restoring rate member\r\n        uint256 oldRate = rate;\r\n        rate = rate.mul(BONUS_COEFF.add(bonus)).div(BONUS_COEFF);\r\n        super.buyTokens(beneficiary);\r\n        rate = oldRate;\r\n    }\r\n\r\n    /**\r\n    * @dev Computes overall bonus based on time of contribution and amount of contribution. \r\n    * The total bonus is the sum of bonus by time and bonus by amount\r\n    * @return bonus percentage scaled by 10\r\n    */\r\n    function computeBonus(uint256 usdValue) public constant returns(uint256) {\r\n        return computeAmountBonus(usdValue).add(computeTimeBonus());\r\n    }\r\n\r\n    /**\r\n    * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\r\n    * @return bonus percentage scaled by 10\r\n    */\r\n    function computeTimeBonus() public constant returns(uint256) {\r\n        require(now >= startTime);\r\n\r\n        for (uint i = 0; i < BONUS_TIMES.length; i++) {\r\n            if (now.sub(startTime) <= BONUS_TIMES[i]) {\r\n                return BONUS_TIMES_VALUES[i];\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Computes bonus based on amount of contribution\r\n    * @return bonus percentage scaled by 10\r\n    */\r\n    function computeAmountBonus(uint256 usdValue) public constant returns(uint256) {\r\n        for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\r\n            if (usdValue >= BONUS_AMOUNTS[i]) {\r\n                return BONUS_AMOUNTS_VALUES[i];\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @dev Parent crowdsale contract is extended with support for cap in tokens\r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n* \r\n*/\r\ncontract TokensCappedCrowdsale is Crowdsale {\r\n\r\n    uint256 public tokensCap;\r\n\r\n    function TokensCappedCrowdsale(uint256 _tokensCap) public {\r\n        tokensCap = _tokensCap;\r\n    }\r\n\r\n    // overriding Crowdsale#validPurchase to add extra tokens cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal constant returns(bool) {\r\n        uint256 tokens = token.totalSupply().add(msg.value.mul(rate));\r\n        bool withinCap = tokens <= tokensCap;\r\n        return super.validPurchase() && withinCap;\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add tokens cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns(bool) {\r\n        bool capReached = token.totalSupply() >= tokensCap;\r\n        return super.hasEnded() || capReached;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n      isFinalized = isFinalized;\r\n  }\r\n}\r\n\r\n\r\n  /**\r\n   * @dev Main BitCalve Crowdsale contract. \r\n   * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n   * \r\n   */\r\ncontract CATCrowdsale is FinalizableCrowdsale, TokensCappedCrowdsale(CATCrowdsale.CAP), PausableCrowdsale(true), BonusCrowdsale(CATCrowdsale.TOKEN_USDCENT_PRICE, CATCrowdsale.DECIMALS) {\r\n\r\n    // Constants\r\n    uint256 public constant DECIMALS = 18;\r\n    uint256 public constant CAP = 2 * (10**9) * (10**DECIMALS);              // 2B CAT\r\n    uint256 public constant BITCLAVE_AMOUNT = 1 * (10**9) * (10**DECIMALS);  // 1B CAT\r\n    uint256 public constant TOKEN_USDCENT_PRICE = 10;                        // $0.10\r\n\r\n    // Variables\r\n    address public remainingTokensWallet;\r\n    address public presaleWallet;\r\n\r\n    /**\r\n    * @dev Sets CAT to Ether rate. Will be called multiple times durign the crowdsale to adjsut the rate\r\n    * since CAT cost is fixed in USD, but USD/ETH rate is changing\r\n    * @param _rate defines CAT/ETH rate: 1 ETH = _rate CATs\r\n    */\r\n    function setRate(uint256 _rate) external onlyOwner {\r\n        require(_rate != 0x0);\r\n        rate = _rate;\r\n        RateChange(_rate);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to adjust the crowdsale end time\r\n    */\r\n    function setEndTime(uint256 _endTime) external onlyOwner {\r\n        require(!isFinalized);\r\n        require(_endTime >= startTime);\r\n        require(_endTime >= now);\r\n        endTime = _endTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the wallet to forward ETH collected funds\r\n    */\r\n    function setWallet(address _wallet) external onlyOwner {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the wallet to hold unsold tokens at the end of ICO\r\n    */\r\n    function setRemainingTokensWallet(address _remainingTokensWallet) external onlyOwner {\r\n        require(_remainingTokensWallet != 0x0);\r\n        remainingTokensWallet = _remainingTokensWallet;\r\n    }\r\n\r\n    // Events\r\n    event RateChange(uint256 rate);\r\n\r\n    /**\r\n    * @dev Contructor\r\n    * @param _startTime startTime of crowdsale\r\n    * @param _endTime endTime of crowdsale\r\n    * @param _rate CAT / ETH rate\r\n    * @param _wallet wallet to forward the collected funds\r\n    * @param _remainingTokensWallet wallet to hold the unsold tokens\r\n    * @param _bitClaveWallet wallet to hold the initial 1B tokens of BitClave\r\n    */\r\n    function CATCrowdsale(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        address _remainingTokensWallet,\r\n        address _bitClaveWallet\r\n    ) public\r\n        Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    {\r\n        remainingTokensWallet = _remainingTokensWallet;\r\n        presaleWallet = this;\r\n\r\n        // allocate tokens to BitClave\r\n        mintTokens(_bitClaveWallet, BITCLAVE_AMOUNT);\r\n    }\r\n\r\n    // Overrided methods\r\n\r\n    /**\r\n    * @dev Creates token contract for ICO\r\n    * @return ERC20 contract associated with the crowdsale\r\n    */\r\n    function createTokenContract() internal returns(MintableToken) {\r\n        CAToken token = new CAToken();\r\n        token.pause();\r\n        return token;\r\n    }\r\n\r\n    /**\r\n    * @dev Finalizes the crowdsale\r\n    */\r\n    function finalization() internal {\r\n        super.finalization();\r\n\r\n        // Mint tokens up to CAP\r\n        if (token.totalSupply() < tokensCap) {\r\n            uint tokens = tokensCap.sub(token.totalSupply());\r\n            token.mint(remainingTokensWallet, tokens);\r\n        }\r\n\r\n        // disable minting of CATs\r\n        token.finishMinting();\r\n\r\n        // take onwership over CAToken contract\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    // Owner methods\r\n\r\n    /**\r\n    * @dev Helper to Pause CAToken\r\n    */\r\n    function pauseTokens() public onlyOwner {\r\n        CAToken(token).pause();\r\n    }\r\n\r\n    /**\r\n    * @dev Helper to UnPause CAToken\r\n    */\r\n    function unpauseTokens() public onlyOwner {\r\n        CAToken(token).unpause();\r\n    }\r\n\r\n    /**\r\n    * @dev Allocates tokens from preSale to a special wallet. Called once as part of crowdsale setup\r\n    */\r\n    function mintPresaleTokens(uint256 tokens) public onlyOwner {\r\n        mintTokens(presaleWallet, tokens);\r\n        presaleWallet = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer presaled tokens even on paused token contract\r\n    */\r\n    function transferPresaleTokens(address destination, uint256 amount) public onlyOwner {\r\n        unpauseTokens();\r\n        token.transfer(destination, amount);\r\n        pauseTokens();\r\n    }\r\n\r\n    // \r\n    /**\r\n    * @dev Allocates tokens for investors that contributed from website. These include\r\n    * whitelisted investors and investors paying with BTC/QTUM/LTC\r\n    */\r\n    function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\r\n        require(beneficiary != 0x0);\r\n        require(tokens > 0);\r\n        require(now <= endTime);                               // Crowdsale (without startTime check)\r\n        require(!isFinalized);                                 // FinalizableCrowdsale\r\n        require(token.totalSupply().add(tokens) <= tokensCap); // TokensCappedCrowdsale\r\n        \r\n        token.mint(beneficiary, tokens);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remainingTokensWallet\",\"type\":\"address\"}],\"name\":\"setRemainingTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"times\",\"type\":\"uint32[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForTimesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_USDCENT_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForAmountsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"computeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"computeTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"computeAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint32[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BITCLAVE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_COEFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_remainingTokensWallet\",\"type\":\"address\"},{\"name\":\"_bitClaveWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"CATCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005A0C4860000000000000000000000000000000000000000000000000000000005A0C80A00000000000000000000000000000000000000000000000000000000000000D20000000000000000000000000083fc10cE7e97CaFBaE0fE332a9c4384c5f54E45000000000000000000000000083fc10cE7e97CaFBaE0fE332a9c4384c5f54E45000000000000000000000000083fc10cE7e97CaFBaE0fE332a9c4384c5f54E45","Library":"","SwarmSource":"bzzr://2985c92e0bbb42d345ab21b874dbd7cc1a879f36730b5ca1a1809713816cd4de"}]}