{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BurnableToken {\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function burn(uint256 _value) public;\r\n\r\n    ArnaCrowdsale public  crowdsale;\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool);\r\n\r\n    address public owner;\r\n\r\n    function setCrowdsale(ArnaCrowdsale _crowdsale) public ;\r\n\r\n    function setTransferable(bool _transferable) public ;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    function transferOwnership(address newOwner) public;\r\n\r\n    bool public transferable;\r\n}\r\n\r\n\r\ncontract ArnaToken is BurnableToken {\r\n    string public constant name = \"ArnaToken\";\r\n    string public constant symbol = \"ARNA\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n\r\n}\r\n\r\n//========================================\r\n\r\n\r\n\r\ncontract ArnaVault is Ownable {\r\n    using SafeMath for uint256;\r\n    ArnaToken token;\r\n\r\n    uint256 amount;\r\n\r\n    uint256 public withdrawn = 0;\r\n\r\n    uint startTime;\r\n\r\n    uint period;\r\n\r\n    uint256 percent;\r\n\r\n    address beneficiary;\r\n\r\n    function ArnaVault(ArnaToken _token, uint _period, uint256 _percent, address _beneficiary) public {\r\n        token = _token;\r\n        period = _period;\r\n        percent = _percent;\r\n        // 2500 -> 2.5%\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function tokensInVault() public constant returns (uint256){\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        assert(token.balanceOf(this) > 0);\r\n        amount = token.balanceOf(this);\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function tokensAvailable() public constant returns (uint256){\r\n        return (((block.timestamp - startTime) / period + 1)\r\n        * amount * percent / 100000)\r\n        .sub(withdrawn);\r\n    }\r\n\r\n    function withdraw() public {\r\n        assert(msg.sender == beneficiary || msg.sender == owner);\r\n        assert(tokensAvailable() > 0);\r\n        token.transfer(beneficiary, tokensAvailable());\r\n        withdrawn = withdrawn.add(tokensAvailable());\r\n    }\r\n\r\n}\r\n\r\n\r\n//========================================\r\n\r\ncontract ArnaCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    ArnaControl arnaControl;\r\n\r\n    ArnaToken public token;\r\n\r\n    uint256 public totalRise;\r\n\r\n\r\n    function ArnaCrowdsale(ArnaControl _arnaControl, ArnaToken _token) public {\r\n        arnaControl = _arnaControl;\r\n        token = _token;\r\n    }\r\n\r\n    function tokensToSale() public view returns (uint256){\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function burnUnsold() public onlyOwner returns (uint256){\r\n        uint256 unsold = token.balanceOf(this);\r\n        token.burn(unsold);\r\n        return unsold;\r\n    }\r\n\r\n    function price() public constant returns (uint256) {\r\n        return arnaControl.getPrice();\r\n    }\r\n\r\n    function priceWithBonus() public constant returns (uint256) {\r\n        return arnaControl.getPriceWithBonus();\r\n    }\r\n\r\n    function() public payable {\r\n        uint256 amount = msg.value.mul(1 ether).div(priceWithBonus());\r\n        assert(token.balanceOf(this) > amount);\r\n        token.transfer(msg.sender, amount);\r\n        totalRise = totalRise.add(msg.value);\r\n    }\r\n\r\n    function sendTokens(address beneficiary, uint256 amount) public onlyOwner {\r\n        assert(token.balanceOf(this) > amount);\r\n        token.transfer(beneficiary, amount);\r\n        totalRise = totalRise.add(amount.mul(priceWithBonus()).div(1 ether));\r\n    }\r\n\r\n    function withdraw() public onlyOwner returns (bool) {\r\n        assert(totalRise >= arnaControl.getSoftCap());\r\n        return arnaControl.send(this.balance);\r\n    }\r\n\r\n}\r\n\r\n\r\n//========================================\r\n\r\ncontract ArnaControl is Ownable {\r\n    using SafeMath for uint256;\r\n    ArnaToken public token;\r\n\r\n    ArnaCrowdsale public  crowdsale;\r\n\r\n    ArnaVault public founders;\r\n\r\n    ArnaVault public team;\r\n\r\n    //    ArnaVault public partners;\r\n\r\n    bool public isStarted;\r\n\r\n    bool public isStoped;\r\n\r\n    uint256 constant TO_SALE = 500000000 * (10 ** 18);\r\n\r\n    uint256  price = 0.000266 ether;\r\n\r\n    uint256  priceWithBonus = 0.000266 ether; //  15% => 0.000231304 ether;\r\n\r\n    uint256 softCap = 3333 ether;\r\n\r\n    address public coldWallet;\r\n\r\n    function ArnaControl(ArnaToken _arnaToken) public {\r\n        token = _arnaToken;\r\n        coldWallet = msg.sender;\r\n    }\r\n\r\n    function SaleStop() public onlyOwner {\r\n        assert(isStarted);\r\n        assert(!isStoped);\r\n\r\n        setTransferable(true);\r\n\r\n        uint256 toBurn = crowdsale.burnUnsold();\r\n        token.burn(toBurn);\r\n\r\n        uint256 toFounders = thisContactsTokens().div(5);\r\n        // 100 / 500\r\n        uint256 toPartners = thisContactsTokens().div(2);\r\n        // 250 / 500\r\n        uint256 toTeam = thisContactsTokens().sub(toFounders).sub(toPartners);\r\n        // 150 / 500\r\n\r\n\r\n        founders = new ArnaVault(token, 360 days, 50000, address(0xC041CB562e4C398710dF38eAED539b943641f7b1));\r\n        token.transfer(founders, toFounders);\r\n        founders.start();\r\n\r\n        team = new ArnaVault(token, 180 days, 16667, address(0x2ABfE4e1809659ab60eB0053cC799b316afCc556));\r\n        token.transfer(team, toTeam);\r\n        team.start();\r\n\r\n        //        partners = new ArnaVault(token, 0, 100000,  0xd6496BBd13ae8C4Bdeea68799F678a1456B62f23);\r\n        //        token.transfer(partners, thisContactsTokens().div(2));\r\n        //        partners.start();\r\n\r\n        token.transfer(address(0xd6496BBd13ae8C4Bdeea68799F678a1456B62f23), toPartners);\r\n\r\n\r\n        isStarted = false;\r\n        isStoped = true;\r\n    }\r\n\r\n    function SaleStart() public onlyOwner {\r\n        assert(!isStarted);\r\n        assert(!isStoped);\r\n        crowdsale = new ArnaCrowdsale(this, token);\r\n        token.setCrowdsale(crowdsale);\r\n        token.transfer(crowdsale, TO_SALE);\r\n        isStarted = true;\r\n    }\r\n\r\n    function thisContactsTokens() public constant returns (uint256){\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function getPrice() public constant returns (uint256){\r\n        return price;\r\n    }\r\n\r\n    // _newPrice : 266 => 0.000266\r\n    function setPrice(uint256 _newPrice) public onlyOwner {\r\n        assert(_newPrice > 0);\r\n        price = _newPrice * (10 ** 12);\r\n    }\r\n\r\n    function getPriceWithBonus() public constant returns (uint256){\r\n        return priceWithBonus;\r\n    }\r\n\r\n    // _newPrice : 266 => 0.000266\r\n    function setPriceWithBonus(uint256 _newPrice) public onlyOwner {\r\n        assert(_newPrice > 0);\r\n        assert(_newPrice  * (10 ** 12) <= price);\r\n        priceWithBonus = _newPrice  * (10 ** 12);\r\n    }\r\n\r\n    function getSoftCap() public constant returns (uint256){\r\n        return softCap;\r\n    }\r\n\r\n    // _softCap : 3333000000 => 3333 ether;\r\n    function setSoftCap(uint256 _softCap) public onlyOwner {\r\n        softCap = _softCap  * (10 ** 12);\r\n    }\r\n\r\n\r\n    function() public payable {\r\n\r\n    }\r\n\r\n    function setColdWallet(address _coldWallet) public onlyOwner {\r\n        coldWallet = _coldWallet;\r\n    }\r\n\r\n    function withdraw() public onlyOwner returns (bool) {\r\n        crowdsale.withdraw();\r\n        return coldWallet.send(this.balance);\r\n    }\r\n\r\n    // amount : 12345000 => 12.345000 ARNA = 12345000000000000000;\r\n    function sendTokens(address beneficiary, uint256 amount) public onlyOwner {\r\n        crowdsale.sendTokens(beneficiary, amount * (10 ** 12));\r\n    }\r\n\r\n    function setTransferable(bool _transferable) public onlyOwner {\r\n        token.setTransferable(_transferable);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"thisContactsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coldWallet\",\"type\":\"address\"}],\"name\":\"setColdWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStoped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SaleStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceWithBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SaleStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arnaToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArnaControl","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000005d3f719b45866da98059436a4baa33596bf2ad0","Library":"","SwarmSource":"bzzr://7f6a492620b4b72ede92a886adb4264955ea78e221fff3ec3cf45a38e86ce4aa"}]}