{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\ncontract Owned {\r\n\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address public newOwner;\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        if(msg.sender == owner) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\ncontract SentimentAnalysis is Owned {\r\n  using SafeMath for uint256;\r\n  \r\n  mapping (address => Reputation) reputations;\r\n  \r\n  event ReputationUpdated(string reputation, uint correct, uint incorrect, string lastUpdateDate, string lastFormulaApplied, address user);\r\n  \r\n  struct Reputation {\r\n    string reputation;\r\n    uint correct;\r\n    uint incorrect;\r\n    string lastUpdateDate;\r\n    string lastFormulaApplied;\r\n  }\r\n\r\n  function ()  payable {\r\n    revert();\r\n  }\r\n\r\n  /// @dev Returns the reputation for the provided user.\r\n  /// @param user The user address to retrieve reputation for.\r\n  function getReputation(\r\n    address user\r\n  ) \r\n    public\r\n    constant\r\n    returns (string, uint, uint, string, string)\r\n  {\r\n    return (reputations[user].reputation, reputations[user].correct, reputations[user].incorrect, reputations[user].lastUpdateDate, reputations[user].lastFormulaApplied);\r\n  }\r\n\r\n  /// @dev Updates the reputation of the provided user\r\n  /// @param reputation The reputation to update\r\n  /// @param correct The number of correct sentiments provided\r\n  /// @param incorrect The number of incorrect sentiments provided\r\n  /// @param date The date the reputation is updated\r\n  /// @param formulaApplied The formula applied to generate the provided reputation\r\n  /// @param user The address of the user whose reputation is updated\r\n  function updateReputation(\r\n    string reputation,\r\n    uint correct,\r\n    uint incorrect,\r\n    string date,\r\n    string formulaApplied,\r\n    address user\r\n  ) \r\n    onlyOwner\r\n    public\r\n  {\r\n    reputations[user].reputation = reputation;\r\n    reputations[user].correct = correct;\r\n    reputations[user].incorrect = incorrect;\r\n    reputations[user].lastUpdateDate = date;\r\n    reputations[user].lastFormulaApplied = formulaApplied;\r\n    ReputationUpdated(reputations[user].reputation, reputations[user].correct, reputations[user].incorrect, reputations[user].lastUpdateDate, reputations[user].lastFormulaApplied, user);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reputation\",\"type\":\"string\"},{\"name\":\"correct\",\"type\":\"uint256\"},{\"name\":\"incorrect\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"formulaApplied\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateReputation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reputation\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"correct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"incorrect\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastUpdateDate\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lastFormulaApplied\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"}]","ContractName":"SentimentAnalysis","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://13ab7e893f9d54b72bd7f557ae1945de71e1ec0725e42c5ad724980a3ca7e0bf"}]}