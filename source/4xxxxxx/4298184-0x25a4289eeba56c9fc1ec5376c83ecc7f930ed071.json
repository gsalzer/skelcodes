{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n// **-----------------------------------------------\r\n// Betstreak Token sale contract\r\n// Revision 1.1\r\n// Refunds integrated, full test suite passed\r\n// **-----------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// -------------------------------------------------\r\n// ICO configuration:\r\n// Presale Bonus      +30% = 1,300 BST   = 1 ETH       [blocks: start   -> s+25200]\r\n// First Week Bonus   +20% = 1,200 BST  = 1 ETH       [blocks: s+3601  -> s+50400]\r\n// Second Week Bonus  +10% = 1,100 BST  = 1 ETH       [blocks: s+25201 -> s+75600]\r\n// Third Week Bonus   +5% = 1,050 BST   = 1 ETH       [blocks: s+50401 -> s+100800]\r\n// Final Week         +0% = 1,000 BST   = 1 ETH       [blocks: s+75601 -> end]\r\n// -------------------------------------------------\r\n\r\ncontract owned {\r\n    address public owner;\r\n  \r\n\t\r\n    function owned() {\r\n        owner = msg.sender;\r\n        \r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract safeMath {\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    safeAssert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b > 0);\r\n    uint256 c = a / b;\r\n    safeAssert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    safeAssert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function safeAssert(bool assertion) internal {\r\n    if (!assertion) revert();\r\n  }\r\n}\r\n\r\ncontract StandardToken is owned, safeMath {\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BetstreakICO is owned, safeMath {\r\n    \r\n  // owner/admin & token reward\r\n  address        public admin = owner;      // admin address\r\n  StandardToken  public tokenReward;        // address of the token used as reward\r\n  \r\n\r\n  // deployment variables for static supply sale\r\n  uint256 public initialSupply;\r\n\r\n  uint256 public tokensRemaining;\r\n\r\n  // multi-sig addresses and price variable\r\n  address public beneficiaryWallet;\r\n  // beneficiaryMultiSig (founder group) or wallet account, live is 0x361e14cC5b3CfBa5D197D8a9F02caf71B3dca6Fd\r\n  \r\n  \r\n  uint256 public tokensPerEthPrice;                           // set initial value floating priceVar 1,300 tokens per Eth\r\n\r\n  // uint256 values for min,max,caps,tracking\r\n  uint256 public amountRaisedInWei;                           //\r\n  uint256 public fundingMinCapInWei;                          //\r\n\r\n  // loop control, ICO startup and limiters\r\n  string  public CurrentStatus                   = \"\";        // current crowdsale status\r\n  uint256 public fundingStartBlock;                           // crowdsale start block#\r\n  uint256 public fundingEndBlock;                             // crowdsale end block#\r\n  bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean\r\n  bool    public areFundsReleasedToBeneficiary   = false;     // boolean for founders to receive Eth or not\r\n  bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Buy(address indexed _sender, uint256 _eth, uint256 _BST);\r\n  event Refund(address indexed _refunder, uint256 _value);\r\n  event Burn(address _from, uint256 _value);\r\n  mapping(address => uint256) balancesArray;\r\n  mapping(address => uint256) fundValue;\r\n\r\n  // default function, map admin\r\n  function BetstreakICO() onlyOwner {\r\n    admin = msg.sender;\r\n    CurrentStatus = \"Crowdsale deployed to chain\";\r\n  }\r\n\r\n  // total number of tokens initially\r\n  function initialBSTSupply() constant returns (uint256 tokenTotalSupply) {\r\n      tokenTotalSupply = safeDiv(initialSupply,100); \r\n  }\r\n\r\n  // remaining number of tokens\r\n  function remainingSupply() constant returns (uint256 tokensLeft) {\r\n      tokensLeft = tokensRemaining;\r\n  }\r\n\r\n  // setup the CrowdSale parameters\r\n  function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\r\n      \r\n      if ((msg.sender == admin)\r\n      && (!(isCrowdSaleSetup))  \r\n      && (!(beneficiaryWallet > 0))){\r\n      \r\n          // init addresses\r\n          tokenReward                             = StandardToken(0xA7F40CCD6833a65dD514088F4d419Afd9F0B0B52);  \r\n          \r\n          \r\n          \r\n          beneficiaryWallet                       = 0x361e14cC5b3CfBa5D197D8a9F02caf71B3dca6Fd;\r\n          \r\n         \r\n          tokensPerEthPrice                       = 1300;                                         \r\n          // set day1 initial value floating priceVar 1,300 tokens per Eth\r\n\r\n          // funding targets\r\n          fundingMinCapInWei                      = 1000000000000000000000;                          \r\n          //300000000000000000000 =  1000 Eth (min cap) - crowdsale is considered success after this value  \r\n          //testnet 5000000000000000000 = 5Eth\r\n\r\n\r\n          // update values\r\n          amountRaisedInWei                       = 0;\r\n          initialSupply                           = 20000000000;                                      \r\n          //   200,000,000 + 2 decimals = 200,000,000,00 \r\n          //testnet 1100000 = 11,000\r\n          \r\n          tokensRemaining                         = safeDiv(initialSupply,100);\r\n\r\n          fundingStartBlock                       = _fundingStartBlock;\r\n          fundingEndBlock                         = _fundingEndBlock;\r\n\r\n          // configure crowdsale\r\n          isCrowdSaleSetup                        = true;\r\n          isCrowdSaleClosed                       = false;\r\n          CurrentStatus                           = \"Crowdsale is setup\";\r\n\r\n          //gas reduction experiment\r\n          setPrice();\r\n          return \"Crowdsale is setup\";\r\n          \r\n      } else if (msg.sender != admin) {\r\n          return \"not authorized\";\r\n          \r\n      } else  {\r\n          return \"campaign cannot be changed\";\r\n      }\r\n    }\r\n\r\n\r\n    function setPrice() {\r\n        \r\n        // ICO configuration:\r\n        // Presale Bonus      +30% = 1,300 BST   = 1 ETH       [blocks: start   -> s+25200]\r\n        // First Week Bonus   +20% = 1,200 BST  = 1 ETH       [blocks: s+25201  -> s+50400]\r\n        // Second Week Bonus  +10% = 1,100 BST  = 1 ETH       [blocks: s+50401 -> s+75600]\r\n        // Third Week Bonus   +5% = 1,050 BST   = 1 ETH       [blocks: s+75601 -> s+100800]\r\n        // Final Week         +0% = 1,000 BST   = 1 ETH       [blocks: s+100801 -> end]\r\n        \r\n      if (block.number >= fundingStartBlock && block.number <= fundingStartBlock+25200) { \r\n          // Presale Bonus      +30% = 1,300 BST   = 1 ETH       [blocks: start   -> s+25200]\r\n          \r\n        tokensPerEthPrice=1300;\r\n        \r\n      } else if (block.number >= fundingStartBlock+25201 && block.number <= fundingStartBlock+50400) { \r\n          // First Week Bonus   +20% = 1,200 BST  = 1 ETH       [blocks: s+25201  -> s+50400]\r\n          \r\n        tokensPerEthPrice=1200;\r\n        \r\n      } else if (block.number >= fundingStartBlock+50401 && block.number <= fundingStartBlock+75600) { \r\n          // Second Week Bonus  +10% = 1,100 BST  = 1 ETH       [blocks: s+50401 -> s+75600]\r\n          \r\n        tokensPerEthPrice=1100;\r\n        \r\n      } else if (block.number >= fundingStartBlock+75601 && block.number <= fundingStartBlock+100800) { \r\n          // Third Week Bonus   +5% = 1,050 BST   = 1 ETH       [blocks: s+75601 -> s+100800]\r\n          \r\n        tokensPerEthPrice=1050;\r\n        \r\n      } else if (block.number >= fundingStartBlock+100801 && block.number <= fundingEndBlock) { \r\n          // Final Week         +0% = 1,000 BST   = 1 ETH       [blocks: s+100801 -> end]\r\n          \r\n        tokensPerEthPrice=1000;\r\n      }\r\n    }\r\n\r\n    // default payable function when sending ether to this contract\r\n    function () payable {\r\n      require(msg.data.length == 0);\r\n      BuyBSTtokens();\r\n    }\r\n\r\n    function BuyBSTtokens() payable {\r\n        \r\n      // 0. conditions (length, crowdsale setup, zero check, \r\n      //exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\r\n      require(!(msg.value == 0)\r\n      && (isCrowdSaleSetup)\r\n      && (block.number >= fundingStartBlock)\r\n      && (block.number <= fundingEndBlock)\r\n      && (tokensRemaining > 0));\r\n\r\n      // 1. vars\r\n      uint256 rewardTransferAmount    = 0;\r\n\r\n      // 2. effects\r\n      setPrice();\r\n      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\r\n      rewardTransferAmount            = safeDiv(safeMul(msg.value,tokensPerEthPrice),10000000000000000);\r\n\r\n      // 3. interaction\r\n      tokensRemaining                 = safeSub(tokensRemaining, safeDiv(rewardTransferAmount,100));  \r\n      // will cause throw if attempt to purchase over the token limit in one tx or at all once limit reached\r\n      tokenReward.transfer(msg.sender, rewardTransferAmount);\r\n\r\n      // 4. events\r\n      fundValue[msg.sender]           = safeAdd(fundValue[msg.sender], msg.value);\r\n      Transfer(this, msg.sender, msg.value);\r\n      Buy(msg.sender, msg.value, rewardTransferAmount);\r\n    }\r\n    \r\n\r\n    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\r\n      require(areFundsReleasedToBeneficiary && (amountRaisedInWei >= fundingMinCapInWei));\r\n      beneficiaryWallet.transfer(_amount);\r\n    }\r\n\r\n    function checkGoalReached() onlyOwner returns (bytes32 response) {\r\n        \r\n        // return crowdfund status to owner for each result case, update public constant\r\n        // update state & status variables\r\n      require (isCrowdSaleSetup);\r\n      \r\n      if ((amountRaisedInWei < fundingMinCapInWei) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { \r\n        // ICO in progress, under softcap\r\n        areFundsReleasedToBeneficiary = false;\r\n        isCrowdSaleClosed = false;\r\n        CurrentStatus = \"In progress (Eth < Softcap)\";\r\n        return \"In progress (Eth < Softcap)\";\r\n        \r\n      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number < fundingStartBlock)) { // ICO has not started\r\n        areFundsReleasedToBeneficiary = false;\r\n        isCrowdSaleClosed = false;\r\n        CurrentStatus = \"Presale is setup\";\r\n        return \"Presale is setup\";\r\n        \r\n        \r\n      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number > fundingEndBlock)) { // ICO ended, under softcap\r\n        areFundsReleasedToBeneficiary = false;\r\n        isCrowdSaleClosed = true;\r\n        CurrentStatus = \"Unsuccessful (Eth < Softcap)\";\r\n        return \"Unsuccessful (Eth < Softcap)\";\r\n        \r\n      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining == 0)) { // ICO ended, all tokens gone\r\n          areFundsReleasedToBeneficiary = true;\r\n          isCrowdSaleClosed = true;\r\n          CurrentStatus = \"Successful (BST >= Hardcap)!\";\r\n          return \"Successful (BST >= Hardcap)!\";\r\n          \r\n          \r\n      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (block.number > fundingEndBlock) && (tokensRemaining > 0)) { \r\n          \r\n          // ICO ended, over softcap!\r\n          areFundsReleasedToBeneficiary = true;\r\n          isCrowdSaleClosed = true;\r\n          CurrentStatus = \"Successful (Eth >= Softcap)!\";\r\n          return \"Successful (Eth >= Softcap)!\";\r\n          \r\n          \r\n      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining > 0) && (block.number <= fundingEndBlock)) { \r\n          \r\n          // ICO in progress, over softcap!\r\n        areFundsReleasedToBeneficiary = true;\r\n        isCrowdSaleClosed = false;\r\n        CurrentStatus = \"In progress (Eth >= Softcap)!\";\r\n        return \"In progress (Eth >= Softcap)!\";\r\n      }\r\n      \r\n      setPrice();\r\n    }\r\n\r\n    function refund() { \r\n        \r\n        // any contributor can call this to have their Eth returned. \r\n        // user's purchased BST tokens are burned prior refund of Eth.\r\n        //require minCap not reached\r\n        \r\n      require ((amountRaisedInWei < fundingMinCapInWei)\r\n      && (isCrowdSaleClosed)\r\n      && (block.number > fundingEndBlock)\r\n      && (fundValue[msg.sender] > 0));\r\n\r\n      //burn user's token BST token balance, refund Eth sent\r\n      uint256 ethRefund = fundValue[msg.sender];\r\n      balancesArray[msg.sender] = 0;\r\n      fundValue[msg.sender] = 0;\r\n      Burn(msg.sender, ethRefund);\r\n\r\n      //send Eth back, burn tokens\r\n      msg.sender.transfer(ethRefund);\r\n      Refund(msg.sender, ethRefund);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleSetup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBSTSupply\",\"outputs\":[{\"name\":\"tokenTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beneficiaryMultiSigWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMinCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"SetupCrowdsale\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyBSTtokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"areFundsReleasedToBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"name\":\"tokensLeft\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_BST\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_refunder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BetstreakICO","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea3056e252d6a7a250ddd9c8608fbbcb286edf7060d39282cf460974ea6013c0"}]}