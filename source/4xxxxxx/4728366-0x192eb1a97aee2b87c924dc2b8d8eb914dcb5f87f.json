{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    address public constant BURN_ADDRESS = 0;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n\t\r\n\tfunction burnTokensInternal(address _address, uint256 _value) internal {\r\n        require(_value > 0);\r\n        require(_value <= balances[_address]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = _address;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n\t\tTransfer(burner, BURN_ADDRESS, _value);\r\n\t\t\r\n\t}\r\n\t\t\r\n}\r\n\r\n/**\r\n * @title Handelion Token\r\n * @dev Main token used for Handelion crowdsale\r\n */\r\n contract HIONToken is BurnableToken, Ownable\r\n {\r\n\t\r\n\t/** Handelion token name official name. */\r\n\tstring public constant name = \"HION Token by Handelion\"; \r\n\t \r\n\t /** Handelion token official symbol.*/\r\n\tstring public constant symbol = \"HION\"; \r\n\r\n\t/** Number of decimal units for Handelion token */\r\n\tuint256 public constant decimals = 18;\r\n\r\n\t/* Preissued token amount */\r\n\tuint256 public constant PREISSUED_AMOUNT = 29750000 * 1 ether;\r\n\t\t\t\r\n\t/** \r\n\t * Indicates wheather token transfer is allowed. Token transfer is allowed after crowdsale is over. \r\n\t * Before crowdsale is over only token owner is allowed to transfer tokens to investors.\r\n\t */\r\n\tbool public transferAllowed = false;\r\n\t\t\t\r\n\t/** Raises when initial amount of tokens is preissued */\r\n\tevent LogTokenPreissued(address ownereAddress, uint256 amount);\r\n\t\r\n\t\r\n\tmodifier canTransfer(address sender)\r\n\t{\r\n\t\trequire(transferAllowed || sender == owner);\r\n\t\t\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates and initializes Handelion token\r\n\t */\r\n\tfunction HIONToken()\r\n\t{\r\n\t\t// Address of token creator. The creator of this token is major holder of all preissued tokens before crowdsale starts\r\n\t\towner = msg.sender;\r\n\t \r\n\t\t// Send all pre-created tokens to token creator address\r\n\t\ttotalSupply = totalSupply.add(PREISSUED_AMOUNT);\r\n\t\tbalances[owner] = balances[owner].add(PREISSUED_AMOUNT);\r\n\t\t\r\n\t\tLogTokenPreissued(owner, PREISSUED_AMOUNT);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns Token creator address\r\n\t */\r\n\tfunction getCreatorAddress() public constant returns(address creatorAddress)\r\n\t{\r\n\t\treturn owner;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets total supply of Handelion token\r\n\t */\r\n\tfunction getTotalSupply() public constant returns(uint256)\r\n\t{\r\n\t\treturn totalSupply;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets number of remaining tokens\r\n\t */\r\n\tfunction getRemainingTokens() public constant returns(uint256)\r\n\t{\r\n\t\treturn balanceOf(owner);\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Allows token transfer. Should be called after crowdsale is over\r\n\t */\r\n\tfunction allowTransfer() onlyOwner public\r\n\t{\r\n\t\ttransferAllowed = true;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Overrides transfer function by adding check whether transfer is allwed\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool)\t\r\n\t{\r\n\t\tsuper.transfer(_to, _value);\r\n\t}\r\n\r\n\t/**\r\n\t * Override transferFrom function and adds a check whether transfer is allwed\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) {\t\r\n\t\tsuper.transferFrom(_from, _to, _value);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n\t\tburnTokensInternal(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens for specific address. Can be called only by token owner.\r\n\t * @param _address \r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(address _address, uint256 _value) public onlyOwner {\r\n\t\tburnTokensInternal(_address, _value);\r\n    }\r\n}\r\n\r\n/*\r\n * Stoppable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism.\r\n *\r\n *\r\n */\r\ncontract Stoppable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    require(!stopped || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function stop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unstop() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Handelion ICO crowdsale.\r\n * \r\n */\r\ncontract HANDELIONdiscountSALE is Ownable, Stoppable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct FundingTier {\r\n\t\tuint256 cap;\r\n\t\tuint256 rate;\r\n\t}\r\n\t\t\r\n\t/** Handelion token we are selling in this crowdsale */\r\n\tHIONToken public token; \r\n\t\r\n\t/** Token price tiers and caps */\r\n\tFundingTier public tier1;\r\n\t\r\n\tFundingTier public tier2;\r\n\t\r\n\tFundingTier public tier3;\r\n\t\r\n\tFundingTier public tier4;\r\n\t\r\n\tFundingTier public tier5;\t\r\n\r\n\t/** inclusive start timestamps of crowdsale */\r\n\tuint256 public startTime;\r\n\r\n\t/** inclusive end timestamp of crowedsale */\r\n\tuint256 public endTime;\r\n\r\n\t/** address where funds are collected */\r\n\taddress public multisigWallet;\r\n\t\r\n\t/** minimal amount of sold tokens for crowdsale to be considered as successful */\r\n\tuint256 public minimumTokenAmount;\r\n\r\n\t/** maximal number of tokens we can sell */\r\n\tuint256 public maximumTokenAmount;\r\n\r\n\t// amount of raised money in wei\r\n\tuint256 public weiRaised;\r\n\r\n\t/** amount of sold tokens */\r\n\tuint256 public tokensSold;\r\n\r\n\t/** number of unique investors */\r\n\tuint public investorCount;\r\n\r\n\t/** Identifies whether crowdsale has been finalized */\r\n\tbool public finalized;\r\n\r\n\t/** Identifies wheather refund is opened */\r\n\tbool public isRefunding;\r\n\r\n\t/** Amount of received ETH by investor */\r\n\tmapping (address => uint256) public investedAmountOf;\r\n\r\n\t/** Amount of selled tokens by investor */\r\n\tmapping (address => uint256) public tokenAmountOf;\r\n\t\r\n\t/**\r\n\t* event for token purchase logging\r\n\t* @param purchaser who paid for the tokens\r\n\t* @param beneficiary who got the tokens\r\n\t* @param value weis paid for purchase\r\n\t* @param amount amount of tokens purchased\r\n\t*/\r\n\tevent LogTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\tevent LogCrowdsaleStarted();\r\n\r\n\tevent LogCrowdsaleFinalized(bool isGoalReached);\r\n\r\n\tevent LogRefundingOpened(uint256 refundAmount);\r\n\r\n\tevent LogInvestorRefunded(address investorAddress, uint256 refundedAmount);\r\n\t\r\n\t/**\r\n\t * Start date: 08-12-2017 12:00 GMT\r\n\t * End date: 31-03-2018 12:00 GMT\r\n\t */\r\n\tfunction HANDELIONdiscountSALE() \r\n\t{\r\n\t\tcreateTokenContract();\r\n\t\t\r\n\t\tstartTime = 1512734400;\r\n\t\tendTime = 1522497600;\r\n\r\n\t\tmultisigWallet = 0x7E23cFa050d23B9706a071dEd0A62d30AE6BB6c8;\r\n\t\t\r\n\t\tminimumTokenAmount = 4830988 * 1 ether;\r\n\t\tmaximumTokenAmount = 29750000 * 1 ether;\r\n\r\n\t\ttokensSold = 0;\r\n\t\tweiRaised = 0;\r\n\r\n\t\ttier1 = FundingTier({cap: 2081338 * 1 ether, rate: 480});\r\n\t\ttier2 = FundingTier({cap: 4830988 * 1 ether, rate: 460});\r\n\t\ttier3 = FundingTier({cap: 9830988 * 1 ether, rate: 440});\r\n\t\ttier4 = FundingTier({cap: 14830988 * 1 ether, rate: 420});\r\n\t\ttier5 = FundingTier({cap: 23184738 * 1 ether, rate: 400});\r\n\r\n\t\tfinalized = false;\r\n\t}\r\n\t\r\n\t \r\n\t/**\r\n\t * Overriding function to create HandelionToken\r\n\t */\r\n\tfunction createTokenContract() internal\r\n\t{\r\n\t\ttoken = HIONToken(0xa089273724e07644da9739a708e544800d925115);\r\n\t}\r\n\t\r\n\tfunction calculateTierTokens(FundingTier _tier, uint256 _amount, uint256 _currentTokenAmount) constant internal returns (uint256)\r\n\t{\r\n\t\tuint256 maxTierTokens = _tier.cap.sub(_currentTokenAmount);\r\n\r\n\t\tif (maxTierTokens <= 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\t\t\r\n\t\tuint256 tokenCount = _amount.mul(_tier.rate);\r\n\t\t\t\r\n\t\tif (tokenCount > maxTierTokens)\r\n\t\t{\r\n\t\t\ttokenCount = maxTierTokens;\r\n\t\t}\r\n\t\t\t\r\n\t\treturn tokenCount;\r\n\t}\r\n\t\r\n\tfunction calculateTokenAmount(uint256 _weiAmount) constant internal returns (uint256)\r\n\t{\t\t\r\n\t\tuint256 nTokens = tokensSold;\r\n\t\tuint256 remainingWei = _weiAmount;\r\n\t\tuint256 tierTokens = 0;\r\n\t\t\r\n\t\tif (nTokens < tier1.cap)\r\n\t\t{\t\t\t\r\n\t\t\ttierTokens = calculateTierTokens(tier1, remainingWei, nTokens);\r\n\t\t\tnTokens = nTokens.add(tierTokens);\t\t\r\n\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier1.rate));\r\n\t\t}\r\n\t\t\r\n\t\tif (remainingWei > 0 && nTokens < tier2.cap)\r\n\t\t{\r\n\t\t\ttierTokens = calculateTierTokens(tier2, remainingWei, nTokens);\r\n\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\r\n\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier2.rate));\r\n\t\t}\r\n\r\n\t\tif (remainingWei > 0 && nTokens < tier3.cap)\r\n\t\t{\r\n\t\t\ttierTokens = calculateTierTokens(tier3, remainingWei, nTokens);\r\n\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\r\n\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier3.rate));\r\n\t\t}\r\n\r\n\t\tif (remainingWei > 0 && nTokens < tier4.cap)\r\n\t\t{\r\n\t\t\ttierTokens = calculateTierTokens(tier4, remainingWei, nTokens);\r\n\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\r\n\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier4.rate));\r\n\t\t}\r\n\r\n\t\tif (remainingWei > 0 && nTokens < tier5.cap)\r\n\t\t{\r\n\t\t\ttierTokens = calculateTierTokens(tier5, remainingWei, nTokens);\r\n\t\t\tnTokens = nTokens.add(tierTokens);\t\t\t\r\n\t\t\tremainingWei = remainingWei.sub(tierTokens.div(tier5.rate));\r\n\t\t}\t\t\r\n\t\t\r\n\t\trequire(remainingWei == 0);\r\n\t\t\r\n\t\treturn nTokens.sub(tokensSold);\r\n\t}\t\r\n\r\n\t// fallback function can be used to buy tokens\r\n\tfunction () public payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\t// low level token purchase function\r\n\tfunction buyTokens(address beneficiary) public payable stopInEmergency \r\n\t{\r\n\t\trequire(beneficiary != address(0));\r\n\t\trequire(validPurchase());\r\n\r\n\t\tuint256 weiAmount = msg.value;\r\n\r\n\t\t// calculate token amount to be created\r\n\t\t//uint256 tokens = weiAmount.mul(rate);\r\n\t\tuint256 tokens = calculateTokenAmount(weiAmount);\r\n\r\n\t\t// Check whether within this ttransaction we will not overflow maximum token amount\r\n\t\trequire(tokensSold.add(tokens) <= maximumTokenAmount);\r\n\r\n\t\t// update state\r\n\t\tweiRaised = weiRaised.add(weiAmount);\r\n\t\ttokensSold = tokensSold.add(tokens);\r\n\t\tinvestedAmountOf[beneficiary] = investedAmountOf[beneficiary].add(weiAmount);\r\n\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(tokens);\r\n\r\n\t\t// forward tokens to purchaser\r\n\t\tforwardTokens(beneficiary, tokens);\r\n\r\n\t\tLogTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n\t\t// forward ETH to multisig wallet\r\n\t\tforwardFunds();\r\n\t}\r\n\r\n\t/**\r\n\t * This function just transfers tokens to beneficiary address. \r\n\t * It should be used for cases when investor buys tokens using other currencies\r\n\t */\r\n\tfunction transferTokens(address beneficiary, uint256 amount) public onlyOwner\r\n\t{\r\n\t\trequire(beneficiary != address(0));\r\n\t\trequire(amount > 0);\r\n\r\n\t\tuint256 weiAmount = amount * 1 ether;\r\n\t\t\r\n\t\ttokensSold = tokensSold.add(weiAmount);\r\n\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(weiAmount);\r\n\t\t\r\n\t\tforwardTokens(beneficiary, weiAmount);\r\n\t}\r\n\t\r\n\t\t/**\r\n\t * This function just transfers tokens with decimals to beneficiary address. \r\n\t * It should be used for cases when investor buys tokens using other currencies\r\n\t */\r\n\tfunction transferTokensWei(address beneficiary, uint256 amount) public onlyOwner\r\n\t{\r\n\t\trequire(beneficiary != address(0));\r\n\t\trequire(amount > 0);\r\n\r\n\t\tuint256 weiAmount = amount;\r\n\t\t\r\n\t\ttokensSold = tokensSold.add(weiAmount);\r\n\t\ttokenAmountOf[beneficiary] = tokenAmountOf[beneficiary].add(weiAmount);\r\n\t\t\r\n\t\tforwardTokens(beneficiary, weiAmount);\r\n\t}\r\n\t\r\n\t// send ether to the fund collection wallet\r\n\t// override to create custom fund forwarding mechanisms\r\n\tfunction forwardFunds() internal {\r\n\t\tmultisigWallet.transfer(msg.value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Forward handelion tokens to purchaset\r\n\t */\r\n\tfunction forwardTokens(address _purchaser, uint256 _amount) internal\r\n\t{\r\n\t\ttoken.transfer(_purchaser, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t* Closes crowdsale and changes its state to Finalized. \r\n\t* Warning - this action is undoable!\r\n\t*/\r\n\tfunction finalize() public onlyOwner\r\n\t{\r\n\t\tfinalized = true;\r\n\t\t\r\n\t\tLogCrowdsaleFinalized(goalReached());\r\n\t}\r\n\t\r\n\t/**\r\n\t * Burns all caller tokens\r\n\t *\r\n\t */\r\n\tfunction burnTokensInternal(address _address, uint256 tokenAmount) internal\r\n\t{\r\n\t\trequire(_address != address(0));\r\n\t\t\r\n\t\tuint256 tokensToBurn = tokenAmount;\r\n\t\tuint256 maxTokens = token.balanceOf(_address);\r\n\t\t\r\n\t\tif (tokensToBurn > maxTokens)\r\n\t\t{\r\n\t\t\ttokensToBurn = maxTokens;\r\n\t\t}\r\n\t\t\r\n\t\ttoken.burn(_address, tokensToBurn);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Burns remaining tokens which are not sold during crowdsale\r\n\t */\r\n\tfunction burnRemainingTokens() public onlyOwner\r\n\t{\r\n\t\tburnTokensInternal(this, getRemainingTokens());\r\n\t}\r\n\t\t\r\n\t\t\r\n\t/**\r\n\t * Gets remaining tokens on a contract\r\n\t */\r\n\tfunction getRemainingTokens() public constant returns(uint256)\r\n\t{\r\n\t\treturn token.getRemainingTokens();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets total supply of tokens\r\n\t */\r\n\tfunction getTotalSupply() constant returns (uint256 res)\r\n\t{\r\n\t\treturn token.getTotalSupply();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets amount of token of specific investor\r\n\t */\r\n\tfunction getTokenAmountOf(address investor) constant returns (uint256 res)\r\n\t{\r\n\t\treturn token.balanceOf(investor);\r\n\t}\r\n\r\n\t// @return true if the transaction can buy tokens\r\n\tfunction validPurchase() internal constant returns (bool) {\r\n\t\tbool withinPeriod = now >= startTime && now <= endTime;\r\n\t\tbool nonZeroPurchase = msg.value != 0;\r\n\t\tbool notFinalized = !finalized;\r\n\t\tbool maxCapNotReached = tokensSold < maximumTokenAmount;\r\n\r\n\t\treturn withinPeriod && nonZeroPurchase && notFinalized && maxCapNotReached;\r\n\t}\r\n\r\n\tfunction goalReached() public constant returns (bool)\r\n\t{\r\n\t\treturn tokensSold >= minimumTokenAmount;\r\n\t}\r\n\r\n\t// @return true if crowdsale event has ended\r\n\tfunction hasEnded() public constant returns (bool) {\r\n\t\treturn now > endTime;\r\n\t}\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier5\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier4\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier2\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getTokenAmountOf\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier3\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensWei\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemainingTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tier1\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogCrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isGoalReached\",\"type\":\"bool\"}],\"name\":\"LogCrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"LogRefundingOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"refundedAmount\",\"type\":\"uint256\"}],\"name\":\"LogInvestorRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HANDELIONdiscountSALE","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a60227e6919c764ab01fce1ba37883bdcca9f31046696c58215ab4c2b00ee100"}]}