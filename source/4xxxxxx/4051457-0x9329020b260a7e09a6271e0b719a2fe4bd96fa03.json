{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n/*\r\n *  an emergency  mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n  \r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n  using SafeMath for uint;\r\n  \r\n  mapping(address => uint) balances;\r\n  \r\n  /*\r\n   * Fix for the ERC20 short address attack  \r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n  function approve(address _spender, uint _value) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n/**\r\n *  VenusCoin token contract. Implements\r\n */\r\ncontract VenusCoin is StandardToken, Ownable {\r\n  string public constant name = \"VenusCoin\";\r\n  string public constant symbol = \"Venus\";\r\n  uint public constant decimals = 0;\r\n  // Constructor\r\n  function VenusCoin() {\r\n      totalSupply = 50000000000;\r\n      balances[msg.sender] = totalSupply; // Send all tokens to owner\r\n  }\r\n  /**\r\n   *  Burn away the specified amount of VenusCoin tokens\r\n   */\r\n  function burn(uint _value) onlyOwner returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Transfer(msg.sender, 0x0, _value);\r\n    return true;\r\n  }\r\n}\r\n/*\r\n  Tokensale Smart Contract for the VenusCoin project\r\n  This smart contract collects ETH\r\n*/\r\ncontract Tokensale is Pausable {\r\n    \r\n    using SafeMath for uint;\r\n    struct Beneficiar {\r\n        uint weiReceived; // Amount of Ether\r\n        uint coinSent;\r\n    }\r\n    \r\n    /* Minimum amount to accept */\r\n    uint public constant MIN_ACCEPT_ETHER = 50000000000000 wei; // min sale price is 1/20000 ETH = 5*10**13 wei = 0.00005 ETH\r\n    /* Number of VenusCoins per Ether */\r\n    uint public constant COIN_PER_ETHER = 20000; // 20,000 VenusCoins\r\n    /*\r\n    * Variables\r\n    */\r\n    /* VenusCoin contract reference */\r\n    VenusCoin public coin;\r\n    /* Multisig contract that will receive the Ether */\r\n    address public multisigEther;\r\n    /* Number of Ether received */\r\n    uint public etherReceived;\r\n    /* Number of VenusCoins sent to Ether contributors */\r\n    uint public coinSentToEther;\r\n    /* Tokensale start time */\r\n    uint public startTime;\r\n    /*  Beneficiar's Ether indexed by Ethereum address */\r\n    mapping(address => Beneficiar) public beneficiars;\r\n  \r\n    /*\r\n     * Event\r\n    */\r\n    event LogReceivedETH(address addr, uint value);\r\n    event LogCoinsEmited(address indexed from, uint amount);\r\n    /*\r\n     * Constructor\r\n    */\r\n    function Tokensale(address _venusCoinAddress, address _to) {\r\n        coin = VenusCoin(_venusCoinAddress);\r\n        multisigEther = _to;\r\n    }\r\n    /* \r\n     * The fallback function corresponds to a donation in ETH\r\n     */\r\n    function() stopInEmergency payable {\r\n        receiveETH(msg.sender);\r\n    }\r\n    /* \r\n     * To call to start the Token's sale\r\n     */\r\n    function start() onlyOwner {\r\n        if (startTime != 0) throw; // Token's sale was already started\r\n        startTime = now ;              \r\n    }\r\n    \r\n    function receiveETH(address beneficiary) internal {\r\n        if (msg.value < MIN_ACCEPT_ETHER) throw; // Don't accept funding under a predefined threshold\r\n        \r\n        uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of VenusCoin to send \r\n        Beneficiar beneficiar = beneficiars[beneficiary];\r\n        coin.transfer(beneficiary, coinToSend); // Transfer VenusCoins right now \r\n        beneficiar.coinSent = beneficiar.coinSent.add(coinToSend);\r\n        beneficiar.weiReceived = beneficiar.weiReceived.add(msg.value); // Update the total wei collected     \r\n        etherReceived = etherReceived.add(msg.value); // Update the total wei collected \r\n        coinSentToEther = coinSentToEther.add(coinToSend);\r\n        // Send events\r\n        LogCoinsEmited(msg.sender ,coinToSend);\r\n        LogReceivedETH(beneficiary, etherReceived); \r\n    }\r\n    \r\n    /*\r\n     *Compute the VenusCoin bonus according to the bonus period\r\n     */\r\n    function bonus(uint amount) internal constant returns (uint) {\r\n        if (now < startTime.add(2 days)) return amount.add(amount.div(10));   // bonus 10%\r\n        return amount;\r\n    }\r\n    \r\n    /*  \r\n    * Failsafe drain\r\n    */\r\n    function drain() onlyOwner {\r\n        if (!owner.send(this.balance)) throw;\r\n    }\r\n    /**\r\n     * Allow to change the team multisig address in the case of emergency.\r\n     */\r\n    function setMultisig(address addr) onlyOwner public {\r\n        if (addr == address(0)) throw;\r\n        multisigEther = addr;\r\n    }\r\n    /**\r\n     * Manually back VenusCoin owner address.\r\n     */\r\n    function backVenusCoinOwner() onlyOwner public {\r\n        coin.transferOwnership(owner);\r\n    }\r\n  \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VenusCoin","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a463d4b2b0d1cc4549ebfd29e23061159c6d84452cb9bf677b420a08d8bf54b"}]}