{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n    \r\n  function totalSupply() constant returns (uint256 supply) {}\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n  function transfer(address _to,uint256 _value) returns (bool success) {}\r\n  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}\r\n  function approve(address _spender,uint256 _value) returns (bool success) {}\r\n  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from,address indexed _to,uint256 _value);\r\n  event Approval(address indexed _owner,address indexed _spender,uint256 _value);\r\n\r\n  uint decimals;\r\n  string name;\r\n}\r\n\r\ncontract SafeMath {\r\n    \r\n  function safeMul(uint a,uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function safeDiv(uint a,uint b) internal returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a,uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a,uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract ShortOrder is SafeMath {\r\n\r\n  address admin;\r\n\r\n  struct Order {\r\n    uint coupon;\r\n    uint balance;\r\n    uint shortBalance;\r\n    bool tokenDeposit;\r\n    mapping (address => uint) longBalance;\r\n  }\r\n\r\n  mapping (address => mapping (bytes32 => Order)) orderRecord;\r\n\r\n  event TokenFulfillment(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\r\n  event CouponDeposit(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\r\n  event LongPlace(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint value,uint blockNumber);\r\n  event LongBought(address[2] sellerShort,uint[3] amountNonceExpiry,uint blockNumber);\r\n  event TokenLongExercised(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint amount,uint blockNumber);\r\n  event EthLongExercised(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\r\n  event DonationClaimed(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint balance,uint blockNumber);\r\n  event NonActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\r\n  event ActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint balance,uint blockNumber);\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  function ShortOrder() {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  function changeAdmin(address _admin) external onlyAdmin {\r\n    admin = _admin;\r\n  }\r\n  \r\n  function tokenFulfillmentDeposit(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      block.number > tokenMinMaxDMWCNonce[3] &&\r\n      block.number <= tokenMinMaxDMWCNonce[4] && \r\n      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\r\n      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2] &&      \r\n      !orderRecord[msg.sender][orderHash].tokenDeposit\r\n    );\r\n    Token(tokenUser[0]).transferFrom(msg.sender,this,tokenMinMaxDMWCNonce[0]);\r\n    orderRecord[msg.sender][orderHash].shortBalance = safeAdd(orderRecord[msg.sender][orderHash].shortBalance,tokenMinMaxDMWCNonce[0]);\r\n    orderRecord[msg.sender][orderHash].tokenDeposit = true;\r\n    TokenFulfillment(tokenUser,tokenMinMaxDMWCNonce,block.number);\r\n  }\r\n\r\n  function depositCoupon(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external payable {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      msg.value == tokenMinMaxDMWCNonce[6] &&\r\n      orderRecord[msg.sender][orderHash].coupon == uint(0) &&\r\n      block.number <= tokenMinMaxDMWCNonce[3]\r\n    );\r\n    orderRecord[msg.sender][orderHash].coupon = safeAdd(orderRecord[msg.sender][orderHash].coupon,msg.value);\r\n    CouponDeposit(tokenUser,tokenMinMaxDMWCNonce,block.number);\r\n  }\r\n\r\n  function placeLong(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external payable {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n    require(  \r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number <= tokenMinMaxDMWCNonce[3] &&\r\n      orderRecord[tokenUser[1]][orderHash].coupon == tokenMinMaxDMWCNonce[6] &&\r\n      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\r\n      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2]\r\n    );\r\n    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = safeAdd(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],msg.value);\r\n    orderRecord[tokenUser[1]][orderHash].balance = safeAdd(orderRecord[tokenUser[1]][orderHash].balance,msg.value);\r\n    LongPlace(tokenUser,tokenMinMaxDMWCNonce,msg.value,block.number);\r\n  }\r\n\r\n  function buyLong(address[2] sellerShort,uint[3] amountNonceExpiry,uint8 v,bytes32[3] hashRS) external payable {\r\n    bytes32 longTransferHash = keccak256 (\r\n        sellerShort[0],\r\n        amountNonceExpiry[0],\r\n        amountNonceExpiry[1],\r\n        amountNonceExpiry[2]\r\n    );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",longTransferHash),v,hashRS[1],hashRS[2]) == sellerShort[1] &&\r\n      block.number <= amountNonceExpiry[2] &&\r\n      msg.value == amountNonceExpiry[0]\r\n    );\r\n    sellerShort[0].transfer(amountNonceExpiry[0]);\r\n    orderRecord[sellerShort[1]][hashRS[0]].longBalance[msg.sender] = orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]];\r\n    orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]] = uint(0);\r\n    LongBought(sellerShort,amountNonceExpiry,block.number);\r\n  }\r\n\r\n  function exerciseLong(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > tokenMinMaxDMWCNonce[4] &&\r\n      block.number <= tokenMinMaxDMWCNonce[5] &&\r\n      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\r\n      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2]\r\n    );\r\n    uint couponAmount = safeDiv(safeMul(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],orderRecord[tokenUser[1]][orderHash].coupon),tokenMinMaxDMWCNonce[2]);\r\n    if(orderRecord[msg.sender][orderHash].tokenDeposit) {\r\n      uint amount = safeDiv(safeMul(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],orderRecord[tokenUser[1]][orderHash].shortBalance),tokenMinMaxDMWCNonce[2]);\r\n      msg.sender.transfer(couponAmount);\r\n      Token(tokenUser[0]).transfer(msg.sender,amount);\r\n      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\r\n      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n      orderRecord[tokenUser[1]][orderHash].shortBalance = safeSub(orderRecord[tokenUser[1]][orderHash].shortBalance,amount);\r\n      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\r\n      TokenLongExercised(tokenUser,tokenMinMaxDMWCNonce,amount,block.number);\r\n    }\r\n    else if(!orderRecord[msg.sender][orderHash].tokenDeposit){\r\n      msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]));\r\n      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\r\n      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0); \r\n      EthLongExercised(tokenUser,tokenMinMaxDMWCNonce,block.number);\r\n    }\r\n  }\r\n\r\n  function claimDonations(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external onlyAdmin {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > tokenMinMaxDMWCNonce[5]\r\n    );\r\n    admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance));\r\n    Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance);\r\n    orderRecord[tokenUser[1]][orderHash].balance = uint(0);\r\n    orderRecord[tokenUser[1]][orderHash].coupon = uint(0);\r\n    orderRecord[tokenUser[1]][orderHash].shortBalance = uint(0);\r\n    DonationClaimed(tokenUser,tokenMinMaxDMWCNonce,orderRecord[tokenUser[1]][orderHash].balance,block.number);\r\n  }\r\n\r\n  function nonActivationShortWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      block.number > tokenMinMaxDMWCNonce[3] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance < tokenMinMaxDMWCNonce[1]\r\n    );\r\n    msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon);\r\n    orderRecord[msg.sender][orderHash].coupon = uint(0);\r\n    NonActivationWithdrawal(tokenUser,tokenMinMaxDMWCNonce,block.number);\r\n  }\r\n\r\n  function nonActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > tokenMinMaxDMWCNonce[3] &&\r\n      block.number <= tokenMinMaxDMWCNonce[5] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance < tokenMinMaxDMWCNonce[1]\r\n    );\r\n    msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n    orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\r\n    ActivationWithdrawal(tokenUser,tokenMinMaxDMWCNonce,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],block.number);\r\n  }\r\n\r\n  function returnBalance(address _creator,bytes32 orderHash) external constant returns (uint) {\r\n    return orderRecord[_creator][orderHash].balance;\r\n  }\r\n\r\n  function returnTokenBalance(address _creator,bytes32 orderHash) external constant returns (uint) {\r\n    return orderRecord[_creator][orderHash].shortBalance;\r\n  }\r\n\r\n  function returnUserBalance(address[2] creatorUser,bytes32 orderHash) external constant returns (uint) {\r\n    return orderRecord[creatorUser[0]][orderHash].longBalance[creatorUser[1]];\r\n  }\r\n\r\n  function returnCoupon(address _creator,bytes32 orderHash) external constant returns (uint) {\r\n    return orderRecord[_creator][orderHash].coupon;\r\n  }\r\n\r\n  function returnTokenDepositState(address _creator,bytes32 orderHash) external constant returns (bool) {\r\n    return orderRecord[_creator][orderHash].tokenDeposit;\r\n  }\r\n \r\n  function returnHash(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce)  external pure returns (bytes32) {\r\n    return  \r\n      keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        tokenMinMaxDMWCNonce[0],\r\n        tokenMinMaxDMWCNonce[1], \r\n        tokenMinMaxDMWCNonce[2],\r\n        tokenMinMaxDMWCNonce[3],\r\n        tokenMinMaxDMWCNonce[4],\r\n        tokenMinMaxDMWCNonce[5], \r\n        tokenMinMaxDMWCNonce[6],\r\n        tokenMinMaxDMWCNonce[7]\r\n      );\r\n  }\r\n\r\n\r\n  function returnAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\r\n    return ecrecover(orderHash,v,rs[0],rs[1]);\r\n  }\r\n\r\n  function returnHashLong(address seller,uint[3] amountNonceExpiry)  external pure returns (bytes32) {\r\n    return keccak256(seller,amountNonceExpiry[0],amountNonceExpiry[1],amountNonceExpiry[2]);\r\n  }\r\n\r\n  function returnLongAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\r\n    return ecrecover(orderHash,v,rs[0],rs[1]);\r\n  }\r\n\r\n  function returnCoupon(address[3] tokenUserSender,bytes32 orderHash) external view returns (uint){\r\n    return orderRecord[tokenUserSender[1]][orderHash].coupon;\r\n  }\r\n\r\n  function returnLongTokenAmount(address[3] tokenUserSender,bytes32 orderHash) external view returns (uint) {\r\n    return orderRecord[tokenUserSender[1]][orderHash].shortBalance;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnCoupon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"claimDonations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnTokenDepositState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"}],\"name\":\"returnHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creatorUser\",\"type\":\"address[2]\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"tokenFulfillmentDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUserSender\",\"type\":\"address[3]\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnLongTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"exerciseLong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"nonActivationShortWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUserSender\",\"type\":\"address[3]\"},{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"returnCoupon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"placeLong\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellerShort\",\"type\":\"address[2]\"},{\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"hashRS\",\"type\":\"bytes32[3]\"}],\"name\":\"buyLong\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnLongAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"}],\"name\":\"returnHashLong\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"depositCoupon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"nonActivationWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"TokenFulfillment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"CouponDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LongPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sellerShort\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LongBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"TokenLongExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"EthLongExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"DonationClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NonActivationWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"tokenMinMaxDMWCNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ActivationWithdrawal\",\"type\":\"event\"}]","ContractName":"ShortOrder","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a6ab3a5982becdd6bc6bd303a9bd2dbfd8b965f9c62a6e8fac2f171f1b92265f"}]}