{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Implementation of token that conforms the ERC-20 Token Standard\r\n */\r\ncontract Restriction {\r\n\taddress internal owner = msg.sender;\r\n\tmapping(address => bool) internal granted;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t/**\r\n\t* @notice Change the owner of the contract\r\n\t* @param _owner New owner\r\n\t*/\r\n\tfunction changeOwner(address _owner) external onlyOwner {\r\n\t\trequire(_owner != address(0) && _owner != owner);\r\n\t\towner = _owner;\r\n\t\tChangeOwner(owner);\r\n\t}\r\n\tevent ChangeOwner(address indexed _owner);\r\n} \r\n\r\n/**\r\n * @dev Interface of contracts that will receive tokens\r\n */\r\ninterface TokenReceiver {\r\n    function tokenFallback(address, uint256, bytes) external;\r\n}\r\n\r\n/**\r\n * @dev Basic token\r\n */\r\ncontract BasicToken is Restriction {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 0;\r\n\tuint256 public totalSupply = 0;\r\n\r\n\tmapping(address => uint256) private balances;\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\t\r\n\r\n\t/**\r\n\t* @dev Construct a token.\r\n\t* @param _name The name of the token.\r\n\t* @param _symbol The symbol of the token.\r\n\t* @param _decimals The decimals of the token.\r\n\t* @param _supply The initial supply of the token.\r\n\t*/\r\n\tfunction BasicToken(string _name, string _symbol, uint8 _decimals, uint256 _supply) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t\t_mintTokens(_supply);\r\n\t}\r\n\t/**\r\n\t* @dev Get the balance of the given holder.\r\n\t* @param _holder The address of the token holder to query the the balance of.\r\n\t* @return The token amount owned by the holder.\r\n\t*/\r\n\tfunction balanceOf(address _holder) external view returns (uint256) {\r\n\t\treturn balances[_holder];\r\n\t}\r\n\t/**\r\n\t* @dev Transfer tokens to a specified holder.\r\n\t* @param _to The address to transfer to.\r\n\t* @param _amount The amount to be transferred.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _amount) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _amount, \"\");\r\n\t}\r\n\t/**\r\n\t* @dev Transfer tokens to a specified holder.\r\n\t* @param _to The address to transfer to.\r\n\t* @param _amount The amount to be transferred.\r\n\t* @param _data The data that is attached to this transaction.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _amount, bytes _data) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _amount, _data);\r\n\t}\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from The address from which you want to transfer tokens\r\n\t* @param _to The address to which you want to transfer tokens\r\n\t* @param _amount The amount of tokens to be transferred\r\n\t* @param _data The data that is attached to this transaction.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint256 _amount, bytes _data) internal returns (bool) {\r\n\t\trequire(_to != address(0)\r\n\t\t\t&& _to != address(this)\r\n\t\t\t&& _from != address(0)\r\n\t\t\t&& _from != _to\r\n\t\t\t&& _amount > 0\r\n\t\t\t&& balances[_from] >= _amount\r\n\t\t\t&& balances[_to] + _amount > balances[_to]\r\n\t\t);\r\n\t\tbalances[_from] -= _amount;\r\n\t\tbalances[_to] += _amount;\r\n\t\tuint size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(_to)\r\n\t\t}\r\n\t\tif(size > 0){\r\n\t\t\tTokenReceiver(_to).tokenFallback(msg.sender, _amount, _data);\r\n\t\t}\r\n\t\tTransfer(_from, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t* @dev Mint tokens.\r\n\t* @param _amount The amount of tokens to mint.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction _mintTokens(uint256 _amount) internal onlyOwner returns (bool success){\r\n\t\trequire(totalSupply + _amount > totalSupply);\r\n\t\ttotalSupply += _amount;\r\n\t\tbalances[msg.sender] += _amount;\r\n\t\tTransfer(address(0), msg.sender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t* @dev Burn tokens.\r\n\t* @param _amount The amount of tokens to burn.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction _burnTokens(uint256 _amount) internal returns (bool success){\r\n\t\trequire(balances[msg.sender] > _amount);\r\n\t\ttotalSupply -= _amount;\r\n\t\tbalances[owner] -= _amount;\r\n\t\tTransfer(msg.sender, address(0), _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract ERC20Compatible {\r\n\tmapping(address => mapping(address => uint256)) private allowed;\r\n\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\t\r\n\tfunction _transfer(address _from, address _to, uint256 _amount, bytes _data) internal returns (bool success);\r\n\r\n\t/**\r\n\t* @dev Get the amount of tokens that a holder allowed other holder to spend.\r\n\t* @param _owner The address of the owner.\r\n\t* @param _spender The address of the spender.\r\n\t* @return amount The amount of tokens still available for the spender.\r\n\t*/\r\n\tfunction allowance(address _owner, address _spender) external constant returns (uint256 amount) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t* @param _spender The address of the holder who will spend the tokens of the msg.sender.\r\n\t* @param _amount The amount of tokens allow to be spent.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _amount) external returns (bool success) {\r\n\t\trequire( _spender != address(0) \r\n\t\t\t&& _spender != msg.sender \r\n\t\t\t&& (_amount == 0 || allowed[msg.sender][_spender] == 0)\r\n\t\t);\r\n\t\tallowed[msg.sender][_spender] = _amount;\r\n\t\tApproval(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t* @dev Transfer tokens from one holder to the other holder.\r\n\t* @param _from The address from which the tokens will be transfered.\r\n\t* @param _to The address to which the tokens will be transfered.\r\n\t* @param _amount The amount of tokens to be transferred.\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _amount) external returns (bool success) {\r\n\t\trequire(allowed[_from][msg.sender] >= _amount);\r\n\t\tallowed[_from][msg.sender] -= _amount;\r\n\t\treturn _transfer(_from, _to, _amount, \"\");\r\n\t}\r\n}\r\n\r\ncontract Regulatable is Restriction {\r\n\tfunction _mintTokens(uint256 _amount) internal onlyOwner returns (bool success);\r\n\tfunction _burnTokens(uint256 _amount) internal returns (bool success);\r\n\t/**\r\n\t* @notice Mint more tokens\r\n\t* @param _amount The amount of token to be minted\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction mintTokens(uint256 _amount) external onlyOwner returns (bool){\r\n\t\treturn _mintTokens(_amount);\r\n\t}\r\n\t/**\r\n\t* @notice Burn some tokens\r\n\t* @param _amount The amount of token to be burnt\r\n\t* @return returns true on success or throw on failure\r\n\t*/\r\n\tfunction burnTokens(uint256 _amount) external returns (bool){\r\n\t\treturn _burnTokens(_amount);\r\n\t}\r\n}\r\n\r\ncontract Token is ERC20Compatible, Regulatable, BasicToken {\r\n\tstring private constant NAME = \"Crypto USD\";\r\n\tstring private constant SYMBOL = \"USDc\";\r\n\tuint8 private constant DECIMALS = 2;\r\n\tuint256 private constant SUPPLY = 201205110 * uint256(10) ** DECIMALS;\r\n\t\r\n\tfunction Token() public \r\n\t\tBasicToken(NAME, SYMBOL, DECIMALS, SUPPLY) {\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://761c2053ee045b3862d75c530886eb0db31ca9052232c3af9cd9c52e3b2574fb"}]}