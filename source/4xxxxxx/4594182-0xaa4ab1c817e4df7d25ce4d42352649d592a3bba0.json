{"status":"1","message":"OK","result":[{"SourceCode":"library SafeMath\r\n{\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable \r\n{\r\n    address public owner;\r\n    \r\n    //  @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    //  account.\r\n    function Ownable() public \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //  @dev Throws if called by any account other than the owner. \r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //  @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    //  @param newOwner The address to transfer ownership to. \r\n    function transferOwnership(address newOwner) public onlyOwner\r\n    {\r\n        if (newOwner != address(0)) \r\n        {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract BasicToken\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n     //  Total number of Tokens\r\n    uint totalCoinSupply;\r\n    \r\n    //  allowance map\r\n    //  ( owner => (spender => amount ) ) \r\n    mapping (address => mapping (address => uint256)) public AllowanceLedger;\r\n    \r\n    //  ownership map\r\n    //  ( owner => value )\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    //  @dev transfer token for a specified address\r\n    //  @param _to The address to transfer to.\r\n    //  @param _value The amount to be transferred.\r\n    function transfer( address _recipient, uint256 _value ) public \r\n        returns( bool success )\r\n    {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_recipient] = balanceOf[_recipient].add(_value);\r\n        Transfer(msg.sender, _recipient, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom( address _owner, address _recipient, uint256 _value ) \r\n        public returns( bool success )\r\n    {\r\n        var _allowance = AllowanceLedger[_owner][msg.sender];\r\n        // Check is not needed because sub(_allowance, _value) will already \r\n        //  throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balanceOf[_recipient] = balanceOf[_recipient].add(_value);\r\n        balanceOf[_owner] = balanceOf[_owner].sub(_value);\r\n        AllowanceLedger[_owner][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_owner, _recipient, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve( address _spender, uint256 _value ) \r\n        public returns( bool success )\r\n    {\r\n        //  _owner is the address of the owner who is giving approval to\r\n        //  _spender, who can then transact coins on the behalf of _owner\r\n        address _owner = msg.sender;\r\n        AllowanceLedger[_owner][_spender] = _value;\r\n        \r\n        //  Fire off Approval event\r\n        Approval( _owner, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance( address _owner, address _spender ) public constant \r\n        returns ( uint256 remaining )\r\n    {\r\n        //  returns the amount _spender can transact on behalf of _owner\r\n        return AllowanceLedger[_owner][_spender];\r\n    }\r\n    \r\n    function totalSupply() public constant returns( uint256 total )\r\n    {  \r\n        return totalCoinSupply;\r\n    }\r\n\r\n    //  @dev Gets the balance of the specified address.\r\n    //  @param _owner The address to query the the balance of. \r\n    //  @return An uint256 representing the amount owned by the passed address.\r\n    function balanceOf(address _owner) public constant returns (uint256 balance)\r\n    {\r\n        return balanceOf[_owner];\r\n    }\r\n    \r\n    event Transfer( address indexed _owner, address indexed _recipient, uint256 _value );\r\n    event Approval( address _owner, address _spender, uint256 _value );\r\n\r\n}\r\n\r\ncontract AnkorusToken is BasicToken, Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    // Token Cap for each rounds\r\n    uint256 public saleCap;\r\n\r\n    // Address where funds are collected.\r\n    address public wallet;\r\n    \r\n    // Sale period.\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n\r\n    // Amount of raised money in wei.\r\n    uint256 public weiRaised;\r\n    \r\n    //  Tokens rate formule\r\n    uint256 public tokensSold = 0;\r\n    uint256 public tokensPerTrunche = 2000000;\r\n    \r\n    //  Whitelist approval mapping\r\n    mapping (address => bool) public whitelist;\r\n    bool public finalized = false;\r\n    \r\n   //  This is the 'Ticker' symbol and name for our Token.\r\n    string public constant symbol = \"ANK\";\r\n    string public constant name = \"AnkorusToken\";\r\n    \r\n    //  This is for how your token can be fracionalized. \r\n    uint8 public decimals = 18; \r\n    \r\n    // Events\r\n    event TokenPurchase(address indexed purchaser, uint256 value, \r\n        uint256 tokenAmount);\r\n    event CompanyTokenPushed(address indexed beneficiary, uint256 amount);\r\n    event Burn( address burnAddress, uint256 amount);\r\n    \r\n    function AnkorusToken() public \r\n    {\r\n    }\r\n    \r\n    //  @dev gets the sale pool balance\r\n    //  @return tokens in the pool\r\n    function supply() internal constant returns (uint256) \r\n    {\r\n        return balanceOf[0xb1];\r\n    }\r\n\r\n    modifier uninitialized() \r\n    {\r\n        require(wallet == 0x0);\r\n        _;\r\n    }\r\n\r\n    //  @dev gets the current time\r\n    //  @return current time\r\n    function getCurrentTimestamp() public constant returns (uint256) \r\n    {\r\n        return now;\r\n    }\r\n    \r\n    //  @dev gets the current rate of tokens per ether contributed\r\n    //  @return number of tokens per ether\r\n    function getRateAt() public constant returns (uint256)\r\n    {\r\n        uint256 traunch = tokensSold.div(tokensPerTrunche);\r\n        \r\n        //  Price curve based on function at:\r\n        //  https://github.com/AnkorusTokenIco/Smart-Contract/blob/master/Price_curve.png\r\n        if     ( traunch == 0 )  {return 600;}\r\n        else if( traunch == 1 )  {return 598;}\r\n        else if( traunch == 2 )  {return 596;}\r\n        else if( traunch == 3 )  {return 593;}\r\n        else if( traunch == 4 )  {return 588;}\r\n        else if( traunch == 5 )  {return 583;}\r\n        else if( traunch == 6 )  {return 578;}\r\n        else if( traunch == 7 )  {return 571;}\r\n        else if( traunch == 8 )  {return 564;}\r\n        else if( traunch == 9 )  {return 556;}\r\n        else if( traunch == 10 ) {return 547;}\r\n        else if( traunch == 11 ) {return 538;}\r\n        else if( traunch == 12 ) {return 529;}\r\n        else if( traunch == 13 ) {return 519;}\r\n        else if( traunch == 14 ) {return 508;}\r\n        else if( traunch == 15 ) {return 498;}\r\n        else if( traunch == 16 ) {return 487;}\r\n        else if( traunch == 17 ) {return 476;}\r\n        else if( traunch == 18 ) {return 465;}\r\n        else if( traunch == 19 ) {return 454;}\r\n        else if( traunch == 20 ) {return 443;}\r\n        else if( traunch == 21 ) {return 432;}\r\n        else if( traunch == 22 ) {return 421;}\r\n        else if( traunch == 23 ) {return 410;}\r\n        else if( traunch == 24 ) {return 400;}\r\n        else return 400;\r\n    }\r\n    \r\n    //  @dev Initialize wallet parms, can only be called once\r\n    //  @param _wallet - address of multisig wallet which receives contributions\r\n    //  @param _start - start date of sale\r\n    //  @param _end - end date of sale\r\n    //  @param _saleCap - amount of coins for sale\r\n    //  @param _totalSupply - total supply of coins\r\n    function initialize(address _wallet, uint256 _start, uint256 _end,\r\n                        uint256 _saleCap, uint256 _totalSupply)\r\n                        public onlyOwner uninitialized\r\n    {\r\n        require(_start >= getCurrentTimestamp());\r\n        require(_start < _end);\r\n        require(_wallet != 0x0);\r\n        require(_totalSupply > _saleCap);\r\n\r\n        finalized = false;\r\n        startDate = _start;\r\n        endDate = _end;\r\n        saleCap = _saleCap;\r\n        wallet = _wallet;\r\n        totalCoinSupply = _totalSupply;\r\n\r\n        //  Set balance of company stock\r\n        balanceOf[wallet] = _totalSupply.sub(saleCap);\r\n        \r\n        //  Log transfer of tokens to company wallet\r\n        Transfer(0x0, wallet, balanceOf[wallet]);\r\n        \r\n        //  Set balance of sale pool\r\n        balanceOf[0xb1] = saleCap;\r\n        \r\n        //  Log transfer of tokens to ICO sale pool\r\n        Transfer(0x0, 0xb1, saleCap);\r\n    }\r\n    \r\n    //  Fallback function is entry point to buy tokens\r\n    function () public payable\r\n    {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    //  @dev Internal token purchase function\r\n    //  @param beneficiary - The address of the purchaser \r\n    //  @param value - Value of contribution, in ether\r\n    function buyTokens(address beneficiary, uint256 value) internal\r\n    {\r\n        require(beneficiary != 0x0);\r\n        require(value >= 0.1 ether);\r\n        \r\n        // Calculate token amount to be purchased\r\n        uint256 weiAmount = value;\r\n        uint256 actualRate = getRateAt();\r\n        uint256 tokenAmount = weiAmount.mul(actualRate);\r\n\r\n        //  Check our supply\r\n        //  Potentially redundant as balanceOf[0xb1].sub(tokenAmount) will\r\n        //  throw with insufficient supply\r\n        require(supply() >= tokenAmount);\r\n\r\n        //  Check conditions for sale\r\n        require(saleActive());\r\n        \r\n        // Transfer\r\n        balanceOf[0xb1] = balanceOf[0xb1].sub(tokenAmount);\r\n        balanceOf[beneficiary] = balanceOf[beneficiary].add(tokenAmount);\r\n        TokenPurchase(msg.sender, weiAmount, tokenAmount);\r\n        \r\n        //  Log the transfer of tokens\r\n        Transfer(0xb1, beneficiary, tokenAmount);\r\n        \r\n        // Update state.\r\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\r\n        \r\n        //  Get the base value of tokens\r\n        uint256 base = tokenAmount.div(1 ether);\r\n        uint256 updatedTokensSold = tokensSold.add(base);\r\n        weiRaised = updatedWeiRaised;\r\n        tokensSold = updatedTokensSold;\r\n\r\n        // Forward the funds to fund collection wallet.\r\n        wallet.transfer(msg.value);\r\n    }\r\n    \r\n    //  @dev whitelist a batch of addresses. Note:Expensive\r\n    //  @param [] beneficiarys - Array set to whitelist\r\n    function batchApproveWhitelist(address[] beneficiarys) \r\n        public onlyOwner\r\n    {\r\n        for (uint i=0; i<beneficiarys.length; i++) \r\n        {\r\n            whitelist[beneficiarys[i]] = true;\r\n        }\r\n    }\r\n    \r\n    //  @dev Set whitelist for specified address\r\n    //  @param beneficiary - The address to whitelist\r\n    //  @param value - value to set (can set address to true or false)\r\n    function setWhitelist(address beneficiary, bool inList) public onlyOwner\r\n    {\r\n        whitelist[beneficiary] = inList;\r\n    }\r\n    \r\n    //  @dev Time remaining until official sale begins\r\n    //  @returns time remaining, in seconds\r\n    function getTimeUntilStart() public constant returns (uint256)\r\n    {\r\n        if(getCurrentTimestamp() >= startDate)\r\n            return 0;\r\n            \r\n        return startDate.sub(getCurrentTimestamp());\r\n    }\r\n    \r\n    \r\n    //  @dev transfer tokens from one address to another\r\n    //  @param _recipient - The address to receive tokens\r\n    //  @param _value - number of coins to send\r\n    //  @return true if no requires thrown\r\n    function transfer( address _recipient, uint256 _value ) public returns(bool)\r\n    {\r\n        //  Check to see if the sale has ended\r\n        require(finalized);\r\n        \r\n        //  transfer\r\n        super.transfer(_recipient, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    //  @dev push tokens from treasury stock to specified address\r\n    //  @param beneficiary - The address to receive tokens\r\n    //  @param amount - number of coins to push\r\n    //  @param lockout - lockout time \r\n    function push(address beneficiary, uint256 amount) public \r\n        onlyOwner \r\n    {\r\n        require(balanceOf[wallet] >= amount);\r\n\r\n        // Transfer\r\n        balanceOf[wallet] = balanceOf[wallet].sub(amount);\r\n        balanceOf[beneficiary] = balanceOf[beneficiary].add(amount);\r\n        \r\n        //  Log transfer of tokens\r\n        CompanyTokenPushed(beneficiary, amount);\r\n        Transfer(wallet, beneficiary, amount);\r\n    }\r\n    \r\n    //  @dev Burns tokens from sale pool remaining after the sale\r\n    function finalize() public onlyOwner \r\n    {\r\n        //  Can only finalize after after sale is completed\r\n        require(getCurrentTimestamp() > endDate);\r\n\r\n        //  Set finalized\r\n        finalized = true;\r\n\r\n        // Burn tokens remaining\r\n        Burn(0xb1, balanceOf[0xb1]);\r\n        totalCoinSupply = totalCoinSupply.sub(balanceOf[0xb1]);\r\n        \r\n        //  Log transfer to burn address\r\n        Transfer(0xb1, 0x0, balanceOf[0xb1]);\r\n        \r\n        balanceOf[0xb1] = 0;\r\n    }\r\n\r\n    //  @dev check to see if the sale period is active\r\n    //  @return true if sale active, false otherwise\r\n    function saleActive() public constant returns (bool) \r\n    {\r\n        //  Ability to purchase has begun for this purchaser with either 2 \r\n        //  conditions: Sale has started \r\n        //  Or purchaser has been whitelisted to purchase tokens before The start date\r\n        //  and the whitelistDate is active\r\n        bool checkSaleBegun = (whitelist[msg.sender] && \r\n            getCurrentTimestamp() >= (startDate.sub(2 days))) || \r\n                getCurrentTimestamp() >= startDate;\r\n        \r\n        //  Sale of tokens can not happen after the ico date or with no\r\n        //  supply in any case\r\n        bool canPurchase = checkSaleBegun && \r\n            getCurrentTimestamp() < endDate &&\r\n            supply() > 0;\r\n            \r\n        return(canPurchase);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiarys\",\"type\":\"address[]\"}],\"name\":\"batchApproveWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerTrunche\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"inList\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeUntilStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllowanceLedger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burnAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AnkorusToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://254eb4911ad2911690dc127e3c03299811949cf51906c7db7adf31d2df344dd6"}]}