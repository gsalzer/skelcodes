{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/*\r\nPAXCHANGE ICO Contract\r\n\r\nPAXCHANGE TOKEN is an ERC-20 Token Standar Compliant\r\n\r\nContract developer: Fares A. Akel C.\r\nf.antonio.akel@gmail.com\r\nMIT PGP KEY ID: 078E41CB\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n* Token interface definition\r\n*/\r\ncontract ERC20Token {\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success); //transfer function to let the contract move own tokens\r\n    function balanceOf(address _owner) public constant returns (uint256 balance); //Function to check an address balance\r\n    \r\n                }\r\n\r\ncontract PAXCHANGEICO {\r\n    using SafeMath for uint256;\r\n    /**\r\n    * This ICO have 3 states 0:PreSale 1:ICO 2:Successful\r\n    */\r\n    enum State {\r\n        PreSale,\r\n        ICO,\r\n        Successful\r\n    }\r\n    /**\r\n    * Variables definition - Public\r\n    */\r\n    State public state = State.PreSale; //Set initial stage\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256 public totalRaised;\r\n    uint256 public currentBalance;\r\n    uint256 public preSaledeadline;\r\n    uint256 public ICOdeadline;\r\n    uint256 public completedAt;\r\n    ERC20Token public tokenReward;\r\n    address public creator;\r\n    string public campaignUrl;\r\n    uint256 public constant version = 1;\r\n    uint256[4] public prices = [\r\n    7800, // 1 eth~=300$ 1 PAXCHANGE = 0.05$ + 30% bonus => 1eth = 7800 PAXCHANGE\r\n    7200, // 1 eth~=300$ 1 PAXCHANGE = 0.05$ + 20% bonus => 1eth = 7200 PAXCHANGE\r\n    6600, // 1 eth~=300$ 1 PAXCHANGE = 0.05$ + 10% bonus => 1eth = 6600 PAXCHANGE\r\n    3000  // 1 eth~=300$ 1 PAXCHANGE = 0.1$ => 1eth = 3000 PAXCHANGE\r\n    ];\r\n    /**\r\n    *Log Events\r\n    */\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogICOInitialized(\r\n        address _creator,\r\n        string _url,\r\n        uint256 _PreSaledeadline,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    /**\r\n    *Modifier to require the ICO is on going\r\n    */\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    *Constructor\r\n    */\r\n    function PAXCHANGEICO (\r\n        string _campaignUrl,\r\n        ERC20Token _addressOfTokenUsedAsReward)\r\n        public\r\n    {\r\n        creator = msg.sender;\r\n        campaignUrl = _campaignUrl;\r\n        preSaledeadline = startTime.add(3 weeks);\r\n        ICOdeadline = preSaledeadline.add(3 weeks);\r\n        currentBalance = 0;\r\n        tokenReward = ERC20Token(_addressOfTokenUsedAsReward);\r\n        LogICOInitialized(\r\n            creator,\r\n            campaignUrl,\r\n            preSaledeadline,\r\n            ICOdeadline);\r\n    }\r\n    /**\r\n    *@dev Function to contribute to the ICO\r\n    *Its check first if ICO is ongoin\r\n    *so no one can transfer to it after finished\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        uint256 tokenBought;\r\n        totalRaised = totalRaised.add(msg.value);\r\n        currentBalance = totalRaised;\r\n\r\n        if (state == State.PreSale && now < startTime + 1 weeks){ //if we are on the first week of the presale\r\n            tokenBought = uint256(msg.value).mul(prices[0]);\r\n            if (totalRaised.add(tokenBought) > 10000000 * (10**18)){\r\n                revert();\r\n            }\r\n        }\r\n        else if (state == State.PreSale && now < startTime + 2 weeks){ //if we are on the second week of the presale\r\n            tokenBought = uint256(msg.value).mul(prices[1]);\r\n            if (totalRaised.add(tokenBought) > 10000000 * (10**18)){\r\n                revert();\r\n            }\r\n        }\r\n        else if (state == State.PreSale && now < startTime + 3 weeks){ //if we are on the third week of the presale\r\n            tokenBought = uint256(msg.value).mul(prices[2]);\r\n            if (totalRaised.add(tokenBought) > 10000000 * (10**18)){\r\n                revert();\r\n            }\r\n        }\r\n        else if (state == State.ICO) { //if we are on the ICO period\r\n            tokenBought = uint256(msg.value).mul(prices[3]);\r\n        }\r\n        else {revert();}\r\n\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        \r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        LogContributorsPayout(msg.sender, tokenBought);\r\n        \r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n    /**\r\n    *@dev Function to check if ICO if finished\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n        if(now > preSaledeadline && now < ICOdeadline){\r\n            state = State.ICO;\r\n        }\r\n        else if(now > ICOdeadline && state==State.ICO){\r\n            state = State.Successful;\r\n            completedAt = now;\r\n            LogFundingSuccessful(totalRaised);\r\n            finished();  \r\n        }\r\n    }\r\n    /**\r\n    *@dev Function to do final transactions\r\n    *When finished eth and remaining tokens are transfered to creator\r\n    */\r\n    function finished() public {\r\n        require(state == State.Successful);\r\n        \r\n        uint remanent;\r\n        remanent =  tokenReward.balanceOf(this);\r\n        currentBalance = 0;\r\n        \r\n        tokenReward.transfer(creator,remanent);\r\n        require(creator.send(this.balance));\r\n\r\n        LogBeneficiaryPaid(creator);\r\n        LogContributorsPayout(creator, remanent);\r\n    }\r\n    /**\r\n    *@dev Function to handle eth transfers\r\n    *For security it require a minimun value\r\n    *BEWARE: if a call to this functions doesnt have\r\n    *enought gas transaction could not be finished\r\n    */\r\n    function () public payable {\r\n        require(msg.value > 1 finney);\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaledeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_PreSaledeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogICOInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"PAXCHANGEICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000116347ce807a666338adefe413dce11163328f29000000000000000000000000000000000000000000000000000000000000001568747470733a2f2f7061786368616e67652e696f2f0000000000000000000000","Library":"","SwarmSource":"bzzr://0e23174c32a8e58332c4b90bcd501eef6a5ccc7c2630335403505265c69c2781"}]}