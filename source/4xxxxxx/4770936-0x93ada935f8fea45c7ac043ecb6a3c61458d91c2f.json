{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\nlibrary SafeMath {    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  } \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  } \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }  \r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n  using SafeMath for uint256;\r\n  bool public teamStakesFrozen = true;\r\n  bool public fundariaStakesFrozen = true;\r\n  mapping(address => uint256) balances;\r\n  address public owner;\r\n  address public fundaria = 0x1882464533072e9fCd8C6D3c5c5b588548B95296; // initial Fundaria pool address  \r\n  \r\n  function BasicToken() public {\r\n    owner = msg.sender;\r\n  }\r\n  \r\n  modifier notFrozen() {\r\n    require(msg.sender != owner || (msg.sender == owner && !teamStakesFrozen) || (msg.sender == fundaria && !fundariaStakesFrozen));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public notFrozen returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public notFrozen returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public notFrozen returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SAUR is StandardToken {\r\n  string public constant name = \"Cardosaur Stake\";\r\n  string public constant symbol = \"SAUR\";\r\n  uint8 public constant decimals = 0;\r\n}\r\n\r\ncontract Sale is SAUR {\r\n\r\n    using SafeMath for uint;\r\n\r\n/********** \r\n * Common *\r\n **********/\r\n\r\n    // THIS IS KEY VARIABLE AND DEFINED ACCORDING TO VALUE OF PLANNED COSTS ON THE PAGE https://business.fundaria.com\r\n    uint public poolCapUSD = 70000; // 70000 initially\r\n    // USD per 1 ether, added 10% aproximatelly to secure from wrong low price. We need add 10% of Stakes to supply to cover such price.\r\n    uint public usdPerEther = 800;\r\n    uint public supplyCap; // Current total supply cap according to lastStakePriceUSCents and poolCapUSD \r\n    uint public businessPlannedPeriodDuration = 183 days; // total period planned for business activity 365 days\r\n    uint public businessPlannedPeriodEndTimestamp;\r\n    uint public teamCap; // team Stakes capacity\r\n    uint8 public teamShare = 55; // share for team\r\n    uint public distributedTeamStakes; // distributed Stakes to team    \r\n    uint public fundariaCap; // Fundaria Stakes capacity\r\n    uint8 public fundariaShare = 20; // share for Fundaria\r\n    uint public distributedFundariaStakes; // distributed Stakes to Fundaria\r\n    uint public contractCreatedTimestamp; // when this contract was created\r\n    address public pool = 0x28C19cEb598fdb171048C624DB8b91C56Af29aA2; // initial pool wallet address  \r\n    mapping (address=>bool) public rejectedInvestmentWithdrawals;\r\n    uint public allowedAmountToTransferToPool; // this amount is increased when investor rejects to withdraw his/her investment\r\n    uint public allowedAmountTransferedToPoolTotal; // sum of all allowedAmountToTransferToPool used \r\n    uint public investmentGuidesRewardsWithdrawn; // total amount of rewards wei withdrawn by Guides  \r\n\r\n/********** \r\n * Bounty *\r\n **********/\r\n \r\n    uint public distributedBountyStakes; // bounty advisors Stakes distributed total    \r\n    uint public bountyCap; // bounty advisors Stakes capacity    \r\n    uint8 public bountyShare = 4; // share for bounty    \r\n    \r\n/*********** \r\n * Sale *\r\n ***********/\r\n    address supplier = 0x0000000000000000000000000000000000000000; // address of Stakes initial supplier (abstract)\r\n    // data to store invested wei value & Stakes for Investor\r\n    struct saleData {\r\n      uint stakes; // how many Stakes where recieved by this Investor total\r\n      uint invested; // how much wei this Investor invested total\r\n      uint bonusStakes; // how many bonus Stakes where recieved by this Investor\r\n      uint guideReward; // Investment Guide reward amount\r\n      address guide; // address of Investment Guide\r\n    }\r\n    mapping (address=>saleData) public saleStat; // invested value + Stakes data for every Investor        \r\n    uint public saleStartTimestamp = 1524852000; // regular Stakes sale start date            \r\n    uint public saleEndTimestamp = 1527444000; \r\n    uint public distributedSaleStakes; // distributed stakes to all Investors\r\n    uint public totalInvested; //how many invested total\r\n    uint public totalWithdrawn; //how many withdrawn total\r\n    uint public saleCap; // regular sale Stakes capacity   \r\n    uint8 public saleShare = 20; // share for regular sale\r\n    uint public lastStakePriceUSCents; // Stake price in U.S. cents is determined according to current timestamp (the further - the higher price)    \r\n    uint[] public targetPrice;    \r\n    bool public priceIsFrozen = false; // stop increasing the price temporary (in case of low demand. Can be called only after saleEndTimestamp)       \r\n    \r\n/************************************ \r\n * Bonus Stakes & Investment Guides *\r\n ************************************/    \r\n    // data to store Investment Guide reward\r\n    struct guideData {\r\n      bool registered; // is this Investment Guide registered\r\n      uint accumulatedPotentialReward; // how many reward wei are potentially available\r\n      uint rewardToWithdraw; // availabe reward to withdraw now\r\n      uint periodicallyWithdrawnReward; // how much reward wei where withdrawn by this Investment Guide already\r\n    }\r\n    mapping (address=>guideData) public guidesStat; // mapping of Investment Guides datas    \r\n    uint public bonusCap; // max amount of bonus Stakes availabe\r\n    uint public distributedBonusStakes; // how many bonus Stakes are already distributed\r\n    uint public bonusShare = 1; // share of bonus Stakes in supplyCap\r\n    uint8 public guideInvestmentAttractedShareToPay = 10; // reward for the Investment Guide\r\n\r\n/*\r\n  WANT TO EARN ON STAKES SALE ?\r\n  BECOME INVESTMENT GUIDE AND RECIEVE 10% OF ATTRACTED INVESTMENT !\r\n  INTRODUCE YOURSELF ON FUNDARIA.COM@GMAIL.COM & GIVE YOUR WALLET ADDRESS\r\n*/    \r\n\r\n/********************************************* \r\n * To Pool transfers & Investment withdrawal *\r\n *********************************************/\r\n\r\n    uint8 public financePeriodsCount = 6; // How many finance periods in planned period\r\n    uint[] public financePeriodsTimestamps; // Supportive array for searching current finance period\r\n    uint public transferedToPool; // how much wei transfered to pool already\r\n\r\n/* EVENTS */\r\n\r\n    event StakesSale(address to, uint weiInvested, uint stakesRecieved, uint teamStakesRecieved, uint stake_price_us_cents);\r\n    event BountyDistributed(address to, uint bountyStakes);\r\n    event TransferedToPool(uint weiAmount, uint8 currentFinancialPeriodNo);\r\n    event InvestmentWithdrawn(address to, uint withdrawnWeiAmount, uint stakesBurned, uint8 remainedFullFinancialPeriods);\r\n    event UsdPerEtherChanged(uint oldUsdPerEther, uint newUsdPerEther);\r\n    event BonusDistributed(address to, uint bonusStakes, address guide, uint accumulatedPotentialReward);\r\n    event PoolCapChanged(uint oldCapUSD, uint newCapUSD);\r\n    event RegisterGuide(address investmentGuide);\r\n    event TargetPriceChanged(uint8 N, uint oldTargetPrice, uint newTargetPrice);\r\n    event InvestmentGuideWithdrawReward(address investmentGuide, uint withdrawnRewardWei);\r\n    \r\n    modifier onlyOwner() {\r\n      require(msg.sender==owner);\r\n      _;\r\n    }\r\n  /**\r\n   * @dev Determine duration of finance period, fill array with finance periods timestamps,\r\n   *      set businessPlannedPeriodEndTimestamp and contractCreatedTimestamp,    \r\n   */      \r\n    function Sale() public {     \r\n      uint financePeriodDuration = businessPlannedPeriodDuration/financePeriodsCount; // quantity of seconds in chosen finance period\r\n      // making array with timestamps of every finance period end date\r\n      financePeriodsTimestamps.push(saleEndTimestamp); // first finance period is whole sale period\r\n      for(uint8 i=1; i<=financePeriodsCount; i++) {\r\n        financePeriodsTimestamps.push(saleEndTimestamp+financePeriodDuration*i);  \r\n      }\r\n      businessPlannedPeriodEndTimestamp = saleEndTimestamp+businessPlannedPeriodDuration; \r\n      contractCreatedTimestamp = now;\r\n      targetPrice.push(1); // Initial Stake price mark in U.S. cents (1 cent = $0.01)  \r\n      targetPrice.push(10); // price mark at the sale period start timestamp      \r\n      targetPrice.push(100); // price mark at the sale period end timestamp       \r\n      targetPrice.push(1000); // price mark at the end of business planned period\r\n      balances[supplier] = 0; // nullify Stakes formal supplier balance         \r\n    }\r\n  /**\r\n   * @dev How many investment remained? Maximum investment is poolCapUSD\r\n   * @return remainingInvestment in wei   \r\n   */     \r\n    function remainingInvestment() public view returns(uint) {\r\n      return poolCapUSD.div(usdPerEther).mul(1 ether).sub(totalInvested);  \r\n    }\r\n  /**\r\n   * @dev Dynamically set caps\r\n   */       \r\n    function setCaps() internal {\r\n      // remaining Stakes are determined only from remainingInvestment\r\n      saleCap = distributedSaleStakes+stakeForWei(remainingInvestment()); // max available Stakes for sale including already distributed\r\n      supplyCap = saleCap.mul(100).div(saleShare); // max available Stakes for supplying\r\n      teamCap = supplyCap.mul(teamShare).div(100); // max available team Stakes\r\n      fundariaCap = supplyCap.mul(fundariaShare).div(100); // max available team Stakes\r\n      bonusCap = supplyCap.mul(bonusShare).div(100); // max available Stakes for bonus\r\n      bountyCap = supplyCap.sub(saleCap).sub(teamCap).sub(bonusCap); // max available Stakes for bounty        \r\n    }\r\n  /**\r\n   * @dev Dynamically set the price of Stake in USD cents, which depends on current timestamp (price grows with time)\r\n   */       \r\n    function setStakePriceUSCents() internal {\r\n        uint targetPriceFrom;\r\n        uint targetPriceTo;\r\n        uint startTimestamp;\r\n        uint endTimestamp;\r\n      // set price for pre sale period      \r\n      if(now < saleStartTimestamp) {\r\n        targetPriceFrom = targetPrice[0];\r\n        targetPriceTo = targetPrice[1];\r\n        startTimestamp = contractCreatedTimestamp;\r\n        endTimestamp = saleStartTimestamp;        \r\n      // set price for sale period\r\n      } else if(now >= saleStartTimestamp && now < saleEndTimestamp) {\r\n        targetPriceFrom = targetPrice[1];\r\n        targetPriceTo = targetPrice[2];\r\n        startTimestamp = saleStartTimestamp;\r\n        endTimestamp = saleEndTimestamp;    \r\n      // set price for post sale period\r\n      } else if(now >= saleEndTimestamp && now < businessPlannedPeriodEndTimestamp) {\r\n        targetPriceFrom = targetPrice[2];\r\n        targetPriceTo = targetPrice[3];\r\n        startTimestamp = saleEndTimestamp;\r\n        endTimestamp = businessPlannedPeriodEndTimestamp;    \r\n      }     \r\n      lastStakePriceUSCents = targetPriceFrom + ((now-startTimestamp)*(targetPriceTo-targetPriceFrom))/(endTimestamp-startTimestamp);       \r\n    }  \r\n  /**\r\n   * @dev Recieve wei and process Stakes sale\r\n   */    \r\n    function() payable public {\r\n      require(msg.sender != address(0));\r\n      require(msg.value > 0); // process only requests with wei\r\n      require(now < businessPlannedPeriodEndTimestamp); // no later then at the end of planned period\r\n      processSale();       \r\n    }\r\n  /**\r\n   * @dev Process Stakes sale\r\n   */       \r\n    function processSale() internal {\r\n      if(!priceIsFrozen) { // refresh price only if price is not frozen\r\n        setStakePriceUSCents();\r\n      }\r\n      setCaps();    \r\n\r\n        uint teamStakes; // Stakes for the team according to teamShare\r\n        uint fundariaStakes; // Stakes for the Fundaria according to teamShare\r\n        uint saleStakes; // Stakes for the Sale\r\n        uint weiInvested; // weiInvested now by this Investor\r\n        uint trySaleStakes = stakeForWei(msg.value); // try to get this quantity of Stakes\r\n\r\n      if(trySaleStakes > 1) {\r\n        uint tryDistribute = distributedSaleStakes+trySaleStakes; // try to distribute this tryStakes        \r\n        if(tryDistribute <= saleCap) { // saleCap not reached\r\n          saleStakes = trySaleStakes; // all tryStakes can be sold\r\n          weiInvested = msg.value; // all current wei are accepted                    \r\n        } else {\r\n          saleStakes = saleCap-distributedSaleStakes; // only remnant of Stakes are available\r\n          weiInvested = weiForStake(saleStakes); // wei for available remnant of Stakes \r\n        }\r\n        teamStakes = (saleStakes*teamShare).div(saleShare); // part of Stakes for a team\r\n        fundariaStakes = (saleStakes*fundariaShare).div(saleShare); // part of Stakes for a team        \r\n        if(saleStakes > 0) {          \r\n          balances[owner] += teamStakes; // rewarding team according to teamShare\r\n          totalSupply += teamStakes; // supplying team Stakes\r\n          distributedTeamStakes += teamStakes; // saving distributed team Stakes\r\n          Transfer(supplier, owner, teamStakes);         \r\n          balances[fundaria] += fundariaStakes; // rewarding team according to fundariaShare\r\n          totalSupply += fundariaStakes; // supplying Fundaria Stakes\r\n          distributedFundariaStakes += fundariaStakes; // saving distributed team Stakes\r\n          Transfer(supplier, fundaria, fundariaStakes);                     \r\n          saleSupply(msg.sender, saleStakes, weiInvested); // process saleSupply\r\n          if(saleStat[msg.sender].guide != address(0)) { // we have Investment Guide to reward and distribute bonus Stakes\r\n            distributeBonusStakes(msg.sender, saleStakes, weiInvested);  \r\n          }          \r\n        }        \r\n        if(tryDistribute > saleCap) {\r\n          msg.sender.transfer(msg.value-weiInvested); // return remnant\r\n        }        \r\n      } else {\r\n        msg.sender.transfer(msg.value); // return incorrect wei\r\n      }\r\n    }\r\n  /**\r\n   * @dev Transfer Stakes from owner balance to buyer balance & saving data to saleStat storage\r\n   * @param _to is address of buyer \r\n   * @param _stakes is quantity of Stakes transfered \r\n   * @param _wei is value invested        \r\n   */ \r\n    function saleSupply(address _to, uint _stakes, uint _wei) internal {\r\n      require(_stakes > 0);  \r\n      balances[_to] += _stakes; // supply sold Stakes directly to buyer\r\n      totalSupply += _stakes;\r\n      distributedSaleStakes += _stakes;\r\n      totalInvested = totalInvested.add(_wei); // adding to total investment\r\n      // saving stat\r\n      saleStat[_to].stakes += _stakes; // stating Stakes bought       \r\n      saleStat[_to].invested = saleStat[_to].invested.add(_wei); // stating wei invested\r\n      Transfer(supplier, _to, _stakes);\r\n    }      \r\n  /**\r\n   * @dev Set new owner\r\n   * @param new_owner new owner  \r\n   */    \r\n    function setNewOwner(address new_owner) public onlyOwner {\r\n      owner = new_owner; \r\n    }\r\n  /**\r\n   * @dev Set new Fundaria address\r\n   * @param new_fundaria new fundaria  \r\n   */    \r\n    function setNewFundaria(address new_fundaria) public onlyOwner {\r\n      fundaria = new_fundaria; \r\n    }    \r\n  /**\r\n   * @dev Set new ether price in USD. Should be changed when price grow-fall 5%-10%\r\n   * @param new_usd_per_ether new price  \r\n   */    \r\n    function setUsdPerEther(uint new_usd_per_ether) public onlyOwner {\r\n      UsdPerEtherChanged(usdPerEther, new_usd_per_ether);\r\n      usdPerEther = new_usd_per_ether; \r\n    }\r\n  /**\r\n   * @dev Set address of wallet where investment will be transfered for further using in business transactions\r\n   * @param _pool new address of the Pool   \r\n   */         \r\n    function setPoolAddress(address _pool) public onlyOwner {\r\n      pool = _pool;  \r\n    }\r\n  /**\r\n   * @dev Change Pool capacity in USD\r\n   * @param new_pool_cap_usd new Pool cap in $   \r\n   */    \r\n    function setPoolCapUSD(uint new_pool_cap_usd) public onlyOwner {\r\n      PoolCapChanged(poolCapUSD, new_pool_cap_usd);\r\n      poolCapUSD = new_pool_cap_usd; \r\n    }\r\n  /**\r\n   * @dev Register Investment Guide\r\n   * @param investment_guide address of Investment Guide   \r\n   */     \r\n    function registerGuide(address investment_guide) public onlyOwner {\r\n      guidesStat[investment_guide].registered = true;\r\n      RegisterGuide(investment_guide);\r\n    }\r\n  /**\r\n   * @dev Stop increasing price dynamically. Set it as static temporary. \r\n   */   \r\n    function freezePrice() public onlyOwner {\r\n      priceIsFrozen = true; \r\n    }\r\n  /**\r\n   * @dev Continue increasing price dynamically (the standard, usual algorithm).\r\n   */       \r\n    function unfreezePrice() public onlyOwner {\r\n      priceIsFrozen = false; // this means that price is unfrozen  \r\n    }\r\n  /**\r\n   * @dev Ability to tune dynamic price changing with time.\r\n   */       \r\n    function setTargetPrice(uint8 n, uint stake_price_us_cents) public onlyOwner {\r\n      TargetPriceChanged(n, targetPrice[n], stake_price_us_cents);\r\n      targetPrice[n] = stake_price_us_cents;\r\n    }  \r\n  /**\r\n   * @dev Get and set address of Investment Guide and distribute bonus Stakes and Guide reward\r\n   * @param key address of Investment Guide   \r\n   */     \r\n    function getBonusStakesPermanently(address key) public {\r\n      require(guidesStat[key].registered);\r\n      require(saleStat[msg.sender].guide == address(0)); // Investment Guide is not applied yet for this Investor\r\n      saleStat[msg.sender].guide = key; // apply Inv. Guide \r\n      if(saleStat[msg.sender].invested > 0) { // we have invested value, process distribution of bonus Stakes and rewarding a Guide     \r\n        distributeBonusStakes(msg.sender, saleStat[msg.sender].stakes, saleStat[msg.sender].invested);\r\n      }\r\n    }\r\n  /**\r\n   * @dev Distribute bonus Stakes to Investor according to bonusShare\r\n   * @param _to to which Investor to distribute\r\n   * @param added_stakes how many Stakes are added by this Investor    \r\n   * @param added_wei how much wei are invested by this Investor \r\n   * @return wei quantity        \r\n   */       \r\n    function distributeBonusStakes(address _to, uint added_stakes, uint added_wei) internal {\r\n      uint added_bonus_stakes = (added_stakes*((bonusShare*100).div(saleShare)))/100; // how many bonus Stakes to add\r\n      require(distributedBonusStakes+added_bonus_stakes <= bonusCap); // check is bonus cap is not overflowed\r\n      uint added_potential_reward = (added_wei*guideInvestmentAttractedShareToPay)/100; // reward for the Guide\r\n      if(!rejectedInvestmentWithdrawals[_to]) {\r\n        guidesStat[saleStat[_to].guide].accumulatedPotentialReward += added_potential_reward; // save potential reward for the Guide\r\n      } else {\r\n        guidesStat[saleStat[_to].guide].rewardToWithdraw += added_potential_reward; // let linked Investment Guide to withdraw all this reward   \r\n      }      \r\n      saleStat[_to].guideReward += added_potential_reward; // add guideReward wei value for stat\r\n      saleStat[_to].bonusStakes += added_bonus_stakes; // add bonusStakes for stat    \r\n      balances[_to] += added_bonus_stakes; // transfer bonus Stakes\r\n      distributedBonusStakes += added_bonus_stakes; // save bonus Stakes distribution\r\n      totalSupply += added_bonus_stakes; // increase totalSupply\r\n      BonusDistributed(_to, added_bonus_stakes, saleStat[_to].guide, added_potential_reward);\r\n      Transfer(supplier, _to, added_bonus_stakes);          \r\n    }\r\n  \r\n  /*\r\n    weiForStake & stakeForWei functions sometimes show not correct translated value from dapp interface (view) \r\n    because lastStakePriceUSCents sometimes temporary outdated (in view mode)\r\n    but it doesn't mean that execution itself is not correct  \r\n  */  \r\n  \r\n  /**\r\n   * @dev Translate wei to Stakes\r\n   * @param input_wei is wei to translate into stakes, \r\n   * @return Stakes quantity        \r\n   */ \r\n    function stakeForWei(uint input_wei) public view returns(uint) {\r\n      return ((input_wei*usdPerEther*100)/1 ether)/lastStakePriceUSCents;    \r\n    }  \r\n  /**\r\n   * @dev Translate Stakes to wei\r\n   * @param input_stake is stakes to translate into wei\r\n   * @return wei quantity        \r\n   */ \r\n    function weiForStake(uint input_stake) public view returns(uint) {\r\n      return (input_stake*lastStakePriceUSCents*1 ether)/(usdPerEther*100);    \r\n    } \r\n  /**\r\n   * @dev Transfer wei from this contract to pool wallet partially only, \r\n   *      1) for funding promotion of Stakes sale   \r\n   *      2) according to share (finance_periods_last + current_finance_period) / business_planned_period\r\n   */    \r\n    function transferToPool() public onlyOwner {      \r\n      uint max_available; // max_available funds for transfering to pool    \r\n      uint amountToTransfer; // amount to transfer to pool\r\n        // search end timestamp of current financial period\r\n        for(uint8 i=0; i <= financePeriodsCount; i++) {\r\n          // found end timestamp of current financial period OR now is later then business planned end date (transfer wei remnant)\r\n          if(now < financePeriodsTimestamps[i] || (i == financePeriodsCount && now > financePeriodsTimestamps[i])) {   \r\n            // avaialbe only part of total value of total invested funds with substracted total allowed amount transfered\r\n            max_available = ((i+1)*(totalInvested+totalWithdrawn-allowedAmountTransferedToPoolTotal))/(financePeriodsCount+1); \r\n            // not all max_available funds are transfered at the moment OR we have allowed amount to transfer\r\n            if(max_available > transferedToPool-allowedAmountTransferedToPoolTotal || allowedAmountToTransferToPool > 0) {\r\n              if(allowedAmountToTransferToPool > 0) { // we have allowed by Investor (rejected to withdraw) amount\r\n                amountToTransfer = allowedAmountToTransferToPool; // to transfer this allowed amount \r\n                allowedAmountTransferedToPoolTotal += allowedAmountToTransferToPool; // add allowed amount to total allowed amount\r\n                allowedAmountToTransferToPool = 0;                  \r\n              } else {\r\n                amountToTransfer = max_available-transferedToPool; // only remained amount is available to transfer\r\n              }\r\n              if(amountToTransfer > this.balance || now > financePeriodsTimestamps[i]) { // remained amount to transfer more then current balance\r\n                amountToTransfer = this.balance; // correct amount to transfer  \r\n              }\r\n              transferedToPool += amountToTransfer; // increase transfered to pool amount               \r\n              pool.transfer(amountToTransfer);                        \r\n              TransferedToPool(amountToTransfer, i+1);\r\n            }\r\n            allowedAmountToTransferToPool=0;\r\n            break;    \r\n          }\r\n        }     \r\n    }  \r\n  /**\r\n   * @dev Investor can withdraw part of his/her investment.\r\n   *      A size of this part depends on how many financial periods last and how many remained.\r\n   *      Investor gives back all stakes which he/she got for his/her investment.     \r\n   */       \r\n    function withdrawInvestment() public {\r\n      require(!rejectedInvestmentWithdrawals[msg.sender]); // this Investor not rejected to withdraw their investment\r\n      require(saleStat[msg.sender].stakes > 0);\r\n      require(balances[msg.sender] >= saleStat[msg.sender].stakes+saleStat[msg.sender].bonusStakes); // Investor has needed stakes to return\r\n      uint remained; // all investment which are available to withdraw by all Investors\r\n      uint to_withdraw; // available funds to withdraw for this particular Investor\r\n      for(uint8 i=0; i < financePeriodsCount; i++) { // last fin. period is not available\r\n        if(now<financePeriodsTimestamps[i]) { // find end timestamp of current financial period          \r\n          remained = totalInvested - ((i+1)*totalInvested)/(financePeriodsCount+1); // remained investment to withdraw by all Investors \r\n          to_withdraw = (saleStat[msg.sender].invested*remained)/totalInvested; // investment to withdraw by this Investor\r\n          uint sale_stakes_to_burn = saleStat[msg.sender].stakes+saleStat[msg.sender].bonusStakes; // returning all Stakes saved in saleStat[msg.sender]\r\n          uint team_stakes_to_burn = (saleStat[msg.sender].stakes*teamShare)/saleShare; // appropriate issued team Stakes are also burned\r\n          uint fundaria_stakes_to_burn = (saleStat[msg.sender].stakes*fundariaShare)/saleShare; // appropriate issued Fundaria Stakes are also burned\r\n          balances[owner] = balances[owner].sub(team_stakes_to_burn); // burn appropriate team Stakes\r\n          balances[fundaria] = balances[fundaria].sub(fundaria_stakes_to_burn); // burn appropriate Fundaria Stakes\r\n          Burn(owner,team_stakes_to_burn);\r\n          Burn(fundaria,fundaria_stakes_to_burn);\r\n          distributedTeamStakes -= team_stakes_to_burn; // remove team Stakes from distribution\r\n          distributedFundariaStakes -= fundaria_stakes_to_burn; // remove Fundaria Stakes from distribution         \r\n          balances[msg.sender] = balances[msg.sender].sub(sale_stakes_to_burn); // burn stakes got for invested wei\r\n          distributedSaleStakes -= saleStat[msg.sender].stakes; // remove these sale Stakes from distribution          \r\n          Burn(msg.sender,sale_stakes_to_burn);\r\n          totalInvested = totalInvested.sub(to_withdraw); // decrease invested total value\r\n          totalSupply = totalSupply.sub(sale_stakes_to_burn).sub(team_stakes_to_burn).sub(fundaria_stakes_to_burn); // totalSupply is decreased\r\n          if(saleStat[msg.sender].guide != address(0)) { // we have Guide and bonusStakes\r\n            // potential reward for the Guide is decreased proportionally\r\n            guidesStat[saleStat[msg.sender].guide].accumulatedPotentialReward -= (saleStat[msg.sender].guideReward - ((i+1)*saleStat[msg.sender].guideReward)/(financePeriodsCount+1)); \r\n            distributedBonusStakes -= saleStat[msg.sender].bonusStakes;\r\n            saleStat[msg.sender].bonusStakes = 0;\r\n            saleStat[msg.sender].guideReward = 0;          \r\n          }\r\n          saleStat[msg.sender].stakes = 0; // nullify Stakes recieved value          \r\n          saleStat[msg.sender].invested = 0; // nullify wei invested value\r\n          totalWithdrawn += to_withdraw;\r\n          msg.sender.transfer(to_withdraw); // witdraw investment\r\n          InvestmentWithdrawn(msg.sender, to_withdraw, sale_stakes_to_burn, financePeriodsCount-i);          \r\n          break;  \r\n        }\r\n      }      \r\n    }\r\n  /**\r\n   * @dev Investor rejects withdraw investment. This lets Investment Guide withdraw all his/her reward related to this Investor   \r\n   */     \r\n    function rejectInvestmentWithdrawal() public {\r\n      rejectedInvestmentWithdrawals[msg.sender] = true;\r\n      address guide = saleStat[msg.sender].guide;\r\n      if(guide != address(0)) { // Inv. Guide exists\r\n        if(saleStat[msg.sender].guideReward >= guidesStat[guide].periodicallyWithdrawnReward) { // already withdrawed less then to withdraw for this Investor\r\n          uint remainedRewardToWithdraw = saleStat[msg.sender].guideReward-guidesStat[guide].periodicallyWithdrawnReward;\r\n          guidesStat[guide].periodicallyWithdrawnReward = 0; // withdrawn reward is counted as withdrawn of this Investor reward \r\n          if(guidesStat[guide].accumulatedPotentialReward >= remainedRewardToWithdraw) { // we have enough potential reward\r\n            guidesStat[guide].accumulatedPotentialReward -= remainedRewardToWithdraw; // decrease potential reward\r\n            guidesStat[guide].rewardToWithdraw += remainedRewardToWithdraw;  // increase total amount to withdraw right now\r\n          } else {\r\n            guidesStat[guide].accumulatedPotentialReward = 0; // something wrong so nullify\r\n          }\r\n        } else {\r\n          // substract current Investor's reward from periodically withdrawn reward to remove it from withdrawned\r\n          guidesStat[guide].periodicallyWithdrawnReward -= saleStat[msg.sender].guideReward;\r\n          // we have enough potential reward - all ok \r\n          if(guidesStat[guide].accumulatedPotentialReward >= saleStat[msg.sender].guideReward) {\r\n            // we do not count this Investor guideReward in potential reward\r\n            guidesStat[guide].accumulatedPotentialReward -= saleStat[msg.sender].guideReward;\r\n            guidesStat[guide].rewardToWithdraw += saleStat[msg.sender].guideReward;  // increase total amount to withdraw right now  \r\n          } else {\r\n            guidesStat[guide].accumulatedPotentialReward = 0; // something wrong so nullify  \r\n          }   \r\n        }\r\n      }\r\n      allowedAmountToTransferToPool += saleStat[msg.sender].invested;\r\n    }\r\n  \r\n  /**\r\n   * @dev Distribute bounty rewards for bounty tasks\r\n   * @param _to is address of bounty hunter\r\n   * @param _stakes is quantity of Stakes transfered       \r\n   */     \r\n    function distributeBounty(address _to, uint _stakes) public onlyOwner {\r\n      require(distributedBountyStakes+_stakes <= bountyCap); // no more then maximum capacity can be distributed\r\n      balances[_to] = balances[_to].add(_stakes); // to\r\n      totalSupply += _stakes; \r\n      distributedBountyStakes += _stakes; // adding to total bounty distributed\r\n      BountyDistributed(_to, _stakes);\r\n      Transfer(supplier, _to, _stakes);    \r\n    } \r\n  /**\r\n   * @dev Unfreeze team & Fundaria Stakes.\r\n   */      \r\n    function unFreeze() public onlyOwner {\r\n      // only after planned period\r\n      if(now > businessPlannedPeriodEndTimestamp) {\r\n        teamStakesFrozen = false; // make team stakes available for transfering\r\n        fundariaStakesFrozen = false; // make Fundaria stakes available for transfering\r\n      }  \r\n    }     \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"transferedToPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectInvestmentWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rejectedInvestmentWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input_stake\",\"type\":\"uint256\"}],\"name\":\"weiForStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundariaShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investment_guide\",\"type\":\"address\"}],\"name\":\"registerGuide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreatedTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTeamStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleStat\",\"outputs\":[{\"name\":\"stakes\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"bonusStakes\",\"type\":\"uint256\"},{\"name\":\"guideReward\",\"type\":\"uint256\"},{\"name\":\"guide\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint8\"},{\"name\":\"stake_price_us_cents\",\"type\":\"uint256\"}],\"name\":\"setTargetPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_pool_cap_usd\",\"type\":\"uint256\"}],\"name\":\"setPoolCapUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedAmountToTransferToPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedBountyStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedAmountTransferedToPoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessPlannedPeriodEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getBonusStakesPermanently\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedSaleStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolCapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundariaStakesFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedBonusStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceIsFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"guidesStat\",\"outputs\":[{\"name\":\"registered\",\"type\":\"bool\"},{\"name\":\"accumulatedPotentialReward\",\"type\":\"uint256\"},{\"name\":\"rewardToWithdraw\",\"type\":\"uint256\"},{\"name\":\"periodicallyWithdrawnReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentGuidesRewardsWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_stakes\",\"type\":\"uint256\"}],\"name\":\"distributeBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guideInvestmentAttractedShareToPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_usd_per_ether\",\"type\":\"uint256\"}],\"name\":\"setUsdPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedFundariaStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundaria\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input_wei\",\"type\":\"uint256\"}],\"name\":\"stakeForWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundariaCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastStakePriceUSCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"financePeriodsTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamStakesFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financePeriodsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessPlannedPeriodDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_fundaria\",\"type\":\"address\"}],\"name\":\"setNewFundaria\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakesRecieved\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamStakesRecieved\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stake_price_us_cents\",\"type\":\"uint256\"}],\"name\":\"StakesSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bountyStakes\",\"type\":\"uint256\"}],\"name\":\"BountyDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentFinancialPeriodNo\",\"type\":\"uint8\"}],\"name\":\"TransferedToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawnWeiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakesBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainedFullFinancialPeriods\",\"type\":\"uint8\"}],\"name\":\"InvestmentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdPerEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdPerEther\",\"type\":\"uint256\"}],\"name\":\"UsdPerEtherChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonusStakes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guide\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accumulatedPotentialReward\",\"type\":\"uint256\"}],\"name\":\"BonusDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldCapUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCapUSD\",\"type\":\"uint256\"}],\"name\":\"PoolCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investmentGuide\",\"type\":\"address\"}],\"name\":\"RegisterGuide\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"N\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"oldTargetPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTargetPrice\",\"type\":\"uint256\"}],\"name\":\"TargetPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investmentGuide\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawnRewardWei\",\"type\":\"uint256\"}],\"name\":\"InvestmentGuideWithdrawReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d5fda692a9461610a0fd449d04a5804af256319d11f18743b0b053d24a78662d"}]}