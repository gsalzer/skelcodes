{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n\t * @title ERC20Basic\r\n\t * @dev Simpler version of ERC20 interface\r\n\t * @dev see https://github.com/ethereum/EIPs/issues/20\r\n\t */\r\ncontract ERC20Basic {\r\n\t  uint256 public totalSupply;\r\n\t  function balanceOf(address who) constant returns (uint256);\r\n\t  function transfer(address to, uint256 value);\r\n\t  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value);\r\n  function approve(address spender, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     require(!(msg.data.length < size + 4));\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)) );\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Pixiu is StandardToken {\r\n\r\n    uint public decimals = 6;\r\n    bool public isPayable = true;\r\n    bool public isWithdrawable = true;\r\n    bool public isRequireData = false;\r\n\t\r\n    struct exchangeRate {\r\n        \r\n        uint time1;                                      \r\n        uint time2;                                     \r\n        uint value;\r\n        \r\n    }\r\n    \r\n    struct Member {\r\n         \r\n        bool isExists;                                      \r\n        bool isDividend;                                    \r\n        bool isWithdraw;                                     \r\n        uint256 dividend;                                   \r\n        uint256 withdraw;\r\n        \r\n    }\r\n    \r\n    exchangeRate[] public exchangeRateArray;  \r\n\r\n\tmapping (address => Member) public members; \r\n    address[] public adminArray;   \r\n    address[] public memberArray;\r\n    \r\n\t \r\n    address public deposit_address;\r\n    uint256 public tokenExchangeRateInWei = 300*10**6;\r\n\t\r\n\t/*\r\n    *虛擬帳號   共20碼\r\n    *1-4 固定 0xFFFFFFFF \r\n    *5-8 繳費期限\r\n    *9-11 流水號 商家代碼 0x000000-0xFFFFFF\r\n    *12-15 商家自訂 4碼=8位 0-F\r\n    *16-18 金額\r\n    *19 :0x30 +4bit候補零\r\n    * 當 BYTE19 = 00  12-18 為商家自訂\r\n    *20 檢查碼 \r\n    */\r\n    mapping (address => uint) public shopStoreId; \r\n    mapping (uint => address) public shopStoreAddress; \r\n    uint256 public shopStorePrice = 1*10**6;\r\n    uint256 public shopStoreNextId = 0;\r\n    address public shopStoreRegister;\r\n\r\n\t//不歸零\r\n\t\r\n\tuint256 public total_tokenwei = 0; \r\n\tuint256 public min_pay_wei = 0;\r\n\t// admin_withdraw_all 歸零\r\n\tuint256 public total_devidend = 0; //member\r\n\tuint256 public total_withdraw = 0; //member\r\n    uint256 public deposit_amount = 0;  //deposit\r\n    uint256 public withdraw_amount = 0; //deposit\r\n    uint256 public dividend_amount = 0; //admin   \r\n    \r\n    event Paydata(address indexed payer, uint256 value, bytes data, uint256 thisTokenWei);\r\n    \r\n    function Pixiu() {\r\n        totalSupply = 21000000000000; \r\n        adminArray.push(msg.sender);\r\n        admin_set_deposit(msg.sender);\r\n        admin_set_shopStoreRegister(msg.sender);\r\n         \r\n    }\r\n    \r\n    function get_orderAddress(address _address,uint _expire_day,uint _userdata,uint _amount) constant returns (address){\r\n        \r\n        uint256 storeid = shopStoreId[_address];\r\n        uint160 result = uint152(0xffffffff<<120) + uint120((_expire_day * 86400 + now)<<88) + uint88(storeid<<64); \r\n        uint _zero = 0;\r\n        uint256 _amount2 = _amount * 10 ** 6;\r\n        while(_amount2 % 10 == 0){\r\n            \r\n            _amount2 /= 10;\r\n            _zero++;\r\n            \r\n        }\r\n        \r\n        _userdata = _userdata<<16;\r\n        _userdata += _amount;\r\n        \r\n        result += uint64(_userdata<<8);\r\n        result += uint8(0x30+_zero);\r\n        uint8 crc = uint8(sha256(uint152(result) ));\r\n        return address((result << 8) + crc);\r\n    }\r\n    \r\n    function isLeading4FF(address _sender ) private  returns(bool){\r\n        uint32 ff4= uint32(uint256(_sender) >> 128);\r\n        return (ff4 == 0xffffffff);\r\n    }\r\n\r\n    modifier onlyDeposit() {\r\n        \r\n        require(msg.sender == deposit_address);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        \r\n        bool ok = admin_check(msg.sender);\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier adminExists(address admin) {\r\n\r\n        bool ok = false;\r\n        if(admin != msg.sender){\r\n            \r\n            ok = admin_check(admin);\r\n        \r\n        }\r\n        require(ok);\r\n        _; \r\n        \r\n    }\r\n    \r\n    modifier adminDoesNotExist(address admin) {\r\n\r\n        bool ok = admin_check(admin);\r\n        require(!ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    function admin_check(address admin) private constant returns(bool){\r\n        \r\n        bool ok = false;\r\n        \r\n        for (uint i = 0; i < adminArray.length; i++) {\r\n            if (admin == adminArray[i]) {\r\n                ok = true;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return ok;\r\n        \r\n    }\r\n    \r\n    modifier memberExists(address member) {\r\n\r\n        bool ok = false;\r\n        if (members[member].isExists == true) {\r\n            \r\n            ok = true;\r\n            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    modifier isMember() {\r\n\r\n        bool ok = false;\r\n        if (members[msg.sender].isExists == true) {            \r\n            ok = true;            \r\n        }\r\n        require(ok);\r\n        _;\r\n        \r\n    }\r\n    \r\n    function admin_deposit(int _Eth, int _Wei) onlyAdmin{\r\n        \r\n        int xWei = _Eth * 10 ** 18 + _Wei;\r\n        if(xWei > 0){\r\n            \r\n            deposit_amount += uint256(xWei);\r\n            \r\n        }else{\r\n            \r\n            deposit_amount -= uint256(xWei * -1);\r\n            \r\n        } \r\n        \r\n        \r\n    }\r\n    \r\n    /**\t*\t管理員發放股息\t*\t每個會員股息依 \t*\t*/\r\n    function admin_dividend(int _Eth, int _Wei) onlyAdmin {\r\n        \r\n        int xWei = _Eth * 10 ** 18 + _Wei;\r\n\t\tbool is_add = true;\r\n\r\n        if(xWei > 0){\r\n            \r\n            require(uint256(xWei) <= (deposit_amount-dividend_amount) ); \r\n            dividend_amount += uint256(xWei);\r\n            \r\n        }else{\r\n            \r\n            xWei *= -1;\r\n            is_add = false;\r\n            require(uint256(xWei) <= deposit_amount); \r\n            dividend_amount -= uint256(xWei * -1);\r\n            \r\n        } \r\n        \r\n        uint256 len = memberArray.length;\t\r\n        uint i = 0;\r\n        address _member;\r\n        \r\n\t\tuint total_balance_dividened=0;\r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\ttotal_balance_dividened += balances[_member]; \r\n\t\t\t}            \r\n        }\r\n            \r\n        for( i = 0; i < len; i++){            \r\n            _member = memberArray[i];\r\n\t\t\tif(members[_member].isDividend){\r\n\t\t\t\tuint256 thisWei = balances[_member] * uint256(xWei) / total_balance_dividened;\r\n\t\t\t\tif(is_add){\r\n\t\t\t\t    members[_member].dividend += thisWei; \r\n\t\t\t\t    total_devidend += thisWei;\r\n\t\t\t\t}else{\r\n\t\t\t\t    members[_member].dividend -= thisWei; \r\n\t\t\t\t    total_devidend -= thisWei;\r\n\t\t\t\t}\r\n\t\t\t}            \r\n        }\r\n    \r\n    }\r\n    \r\n    function admin_set_exchange_rate(uint[] exchangeRates) onlyAdmin{\r\n         \r\n        uint len = exchangeRates.length;\r\n        exchangeRateArray.length = 0;\r\n        \r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n            uint time1 = exchangeRates[i];\r\n            uint time2 = exchangeRates[i + 1];\r\n            uint value = exchangeRates[i + 2]*1000;\r\n            exchangeRateArray.push(exchangeRate(time1, time2, value));      \r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function admin_set_shopStoreRegister(address _address) onlyAdmin{\r\n        \r\n        shopStoreRegister = _address;\r\n        \r\n    }\r\n    \r\n    function admin_set_ExchangeRateInWei(uint256 exchangeRates) onlyAdmin{\r\n        \r\n        tokenExchangeRateInWei = exchangeRates;\r\n        \r\n    }\r\n\r\n\tfunction get_exchange_wei() constant returns(uint256){\r\n\r\n\t\tuint len = exchangeRateArray.length;  \r\n\t\tuint nowTime = block.timestamp;\r\n        for(uint i = 0; i < len; i += 3){\r\n            \r\n\t\t\texchangeRate memory rate = exchangeRateArray[i];\r\n            uint time1 = rate.time1;\r\n            uint time2 = rate.time2;\r\n            uint value = rate.value;\r\n\t\t\tif (nowTime>= time1 && nowTime<=time2) {\r\n\t\t\t\ttokenExchangeRateInWei = value;\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n            \r\n        }\r\n\t\treturn tokenExchangeRateInWei;\r\n\t}\r\n\t\r\n\tfunction admin_set_min_pay(uint256 _min_pay) onlyAdmin{\r\n\t    \r\n\t    require(_min_pay >= 0);\r\n\t    min_pay_wei = _min_pay;\r\n\t    \r\n\t}\r\n    \r\n    function get_admin_list() constant returns(address[] _adminArray){\r\n        \r\n        _adminArray = adminArray;\r\n        \r\n    }\r\n    \r\n    function admin_add(address admin) onlyAdmin adminDoesNotExist(admin){\r\n        \r\n        adminArray.push(admin);\r\n        \r\n    }\r\n    \r\n    function admin_del(address admin) onlyAdmin adminExists(admin){\r\n        \r\n        for (uint i = 0; i < adminArray.length - 1; i++)\r\n            if (adminArray[i] == admin) {\r\n                adminArray[i] = adminArray[adminArray.length - 1];\r\n                break;\r\n            }\r\n            \r\n        adminArray.length -= 1;\r\n        \r\n    }\r\n    \r\n    function admin_set_deposit(address addr) onlyAdmin{\r\n        \r\n        deposit_address = addr;\r\n        \r\n    }\r\n    \r\n    function admin_set_shopStorePrice(uint256 _shopStorePrice) onlyAdmin{\r\n        \r\n        shopStorePrice = _shopStorePrice;\r\n        \r\n    }\r\n    \r\n    function admin_set_isRequireData(bool _requireData) onlyAdmin{\r\n    \r\n        isRequireData = _requireData;\r\n        \r\n    }\r\n    \r\n    function admin_set_payable(bool _payable) onlyAdmin{\r\n    \r\n        isPayable = _payable;\r\n        \r\n    }\r\n    \r\n    function admin_set_withdrawable(bool _withdrawable) onlyAdmin{\r\n        \r\n        isWithdrawable = _withdrawable;\r\n        \r\n    }\r\n    \r\n    function admin_set_dividend(address _member, bool _dividend) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isDividend = _dividend;\r\n        \r\n    }\r\n    \r\n    function admin_set_withdraw(address _member, bool _withdraw) onlyAdmin memberExists(_member){\r\n        \r\n        members[_member].isWithdraw = _withdraw;\r\n        \r\n    }\r\n    \r\n    function get_total_info() constant returns(uint256 _deposit_amount, uint256 _total_devidend, uint256 _total_remain, uint256 _total_withdraw){\r\n\r\n        _total_remain = total_devidend - total_withdraw;\r\n        _deposit_amount = deposit_amount;\r\n        _total_devidend = total_devidend;\r\n        _total_withdraw = total_withdraw;\r\n        \r\n    }\r\n    \r\n    function get_info(address _member) constant returns (uint256 _balance, uint256 _devidend, uint256 _remain, uint256 _withdraw){\r\n        \r\n        _devidend = members[_member].dividend;\r\n        _withdraw = members[_member].withdraw;\r\n        _remain = _devidend - _withdraw;\r\n        _balance = balances[_member];\r\n        \r\n    }\r\n    \r\n    function withdraw() isMember {\r\n        \r\n        uint256 _remain = members[msg.sender].dividend - members[msg.sender].withdraw;\r\n        require(_remain > 0);\r\n        require(isWithdrawable);\r\n        require(members[msg.sender].isWithdraw);\r\n        msg.sender.transfer(_remain);\r\n        members[msg.sender].withdraw += _remain; \r\n        total_withdraw += _remain;          \r\n\r\n    }\r\n\r\n    function admin_withdraw(uint xWei) onlyDeposit{\r\n\r\n        uint256 _withdraw = xWei;\r\n\t\trequire( msg.sender == deposit_address );\r\n\r\n\t\trequire(this.balance > _withdraw);\r\n\t\tmsg.sender.transfer(_withdraw);\r\n\r\n        withdraw_amount += _withdraw;  \r\n        \r\n    }\r\n    \r\n    function admin_withdraw_all(address _deposit) onlyAdmin {\r\n        \r\n\t\trequire( _deposit == deposit_address ); \r\n\r\n\t\t_deposit.transfer(this.balance);\r\n\r\n\t\ttotal_devidend = 0; //member\r\n\t\ttotal_withdraw = 0; //member\r\n\t\tdeposit_amount = 0;  //deposit\r\n\t\twithdraw_amount = 0; //deposit\r\n\t\tdividend_amount = 0; //admin   \r\n        \r\n    }\r\n    \r\n    function admin_transfer(address _to, uint256 _value) onlyAdmin onlyPayloadSize(2 * 32)     {\r\n        \r\n        require(_to != deposit_address);\r\n        require(total_tokenwei <= totalSupply - _value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        total_tokenwei += _value;\r\n    \r\n        if (members[_to].isExists != true) {  \r\n            members[_to].isExists = true;\r\n            members[_to].isDividend = true;\r\n            members[_to].isWithdraw = true; \r\n            memberArray.push(_to);  \r\n        }\r\n        \r\n    }\r\n \r\n\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32)     {\r\n\t    \r\n\t\trequire(_to != msg.sender);\r\n        require(isPayable);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\t\r\n\t\tif(_to == deposit_address){\r\n\t\t    \r\n\t\t    require(_value == shopStorePrice);\r\n\t\t    shopStoreNextId++;\r\n\t\t    shopStoreId[msg.sender] = shopStoreNextId;\r\n\t\t    shopStoreAddress[shopStoreNextId] = msg.sender;\r\n\t\t\r\n\t\t} else { \r\n\t\t    \r\n\t\t    if(isLeading4FF(_to)){\r\n\t\t    \r\n    \t\t    uint256 to256 = uint256(_to);\r\n                uint32 expire = uint32(to256>>96);\r\n                uint32 storeid = uint24(to256>>72);\r\n                //uint8 crc8 = uint8(to256);\r\n                //uint8 byte19 = uint8(to256>>8);\r\n                uint8 byte19_1 = uint8(uint8(to256>>8)>>4);\r\n                uint8 byte19_2 = uint8(uint8(to256>>8)<<4);\r\n                byte19_2 = byte19_2>>4;\r\n                uint56 byte1218 = uint56(to256>>16);\r\n                uint32 byte1215 = uint32(to256>>40);\r\n                uint24 byte1618 = uint24(to256>>16);\r\n                \r\n                require(uint32(now)<expire || expire==0);\r\n                \r\n                //uint8 crc20 = uint8(sha256(uint152(to256>>8)));\r\n                require(uint8(sha256(uint152(to256>>8)))==uint8(to256));\r\n                \r\n                _to = shopStoreAddress[uint(storeid)];\r\n                require(uint(_to)>0);\r\n    \r\n                if(byte19_1 == 3){\r\n                \r\n                    for(int i = 0; i < byte19_2; i++){\r\n                        byte1618 *= 10;\r\n                    }\r\n                    \r\n                    require(byte1618 == _value);\r\n                \r\n                }\r\n    \t\t\r\n    \t\t}\r\n\t\t    \r\n    \t\tbalances[_to] = balances[_to].add(_value);\r\n    \t\tif (members[_to].isExists != true) {\t\t\r\n    \t\t\tmembers[_to].isExists = true;\r\n    \t\t\tmembers[_to].isDividend = true;\r\n    \t\t\tmembers[_to].isWithdraw = true; \r\n    \t\t\tmemberArray.push(_to);\t\t\r\n    \t\t}  \r\n\r\n        }\r\n\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)     {\r\n\t\trequire(_to != deposit_address);\r\n\t\trequire(_from != deposit_address);\r\n        require(isPayable);\r\n\t\tvar _allowance = allowed[_from][msg.sender]; \r\n\t\trequire(_allowance >= _value);\r\n\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\t\r\n\t\tif (members[_to].isExists != true) {\t\t\r\n\t\t\tmembers[_to].isExists = true;\r\n\t\t\tmembers[_to].isDividend = true;\r\n\t\t\tmembers[_to].isWithdraw = true; \r\n\t\t\tmemberArray.push(_to);\t\t\r\n\t\t}  \r\n\r\n\t\tTransfer(_from, _to, _value);\r\n\t}\r\n\r\n    function () payable {\r\n        \r\n        pay();\r\n        \r\n    }\r\n  \r\n    function pay() public payable  returns (bool) {\r\n        \r\n        require(!isLeading4FF(msg.sender));\r\n        require(msg.value > min_pay_wei);\r\n        require(isPayable);\r\n        \r\n        if(msg.sender == deposit_address){\r\n             deposit_amount += msg.value;\r\n        }else{\r\n            \r\n            if(isRequireData){\r\n                require(uint32(msg.data[0]) == uint32(0xFFFFFFFF));   \r\n            }\r\n        \r\n    \t\tuint256 exchangeWei = get_exchange_wei();\r\n    \t\tuint256 thisTokenWei = exchangeWei * msg.value / 10**18 ;\r\n    \t\t\r\n    \t\trequire(total_tokenwei <= totalSupply - thisTokenWei);\r\n        \r\n            if (members[msg.sender].isExists != true) {\r\n                \r\n                members[msg.sender].isExists = true;\r\n                members[msg.sender].isDividend = true;\r\n                members[msg.sender].isWithdraw = true; \r\n                memberArray.push(msg.sender);\r\n                \r\n            }  \r\n    \t\tbalances[msg.sender] += thisTokenWei;\r\n    \t\ttotal_tokenwei += thisTokenWei;\r\n    \t\t\r\n    \t\tPaydata(msg.sender, msg.value, msg.data, thisTokenWei);\r\n    \t\tTransfer(this, msg.sender, thisTokenWei);\r\n\t\t\r\n        }\r\n        \r\n        return true;\r\n    \r\n    }\r\n            \r\n    function get_this_balance() constant returns(uint256){\r\n      \r\n        return this.balance;\r\n      \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRateInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeRates\",\"type\":\"uint256\"}],\"name\":\"admin_set_ExchangeRateInWei\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"isExists\",\"type\":\"bool\"},{\"name\":\"isDividend\",\"type\":\"bool\"},{\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"admin_transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_tokenwei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_admin_list\",\"outputs\":[{\"name\":\"_adminArray\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"admin_add\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"admin_withdraw_all\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xWei\",\"type\":\"uint256\"}],\"name\":\"admin_withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shopStoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeRateArray\",\"outputs\":[{\"name\":\"time1\",\"type\":\"uint256\"},{\"name\":\"time2\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRequireData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payable\",\"type\":\"bool\"}],\"name\":\"admin_set_payable\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_total_info\",\"outputs\":[{\"name\":\"_deposit_amount\",\"type\":\"uint256\"},{\"name\":\"_total_devidend\",\"type\":\"uint256\"},{\"name\":\"_total_remain\",\"type\":\"uint256\"},{\"name\":\"_total_withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min_pay\",\"type\":\"uint256\"}],\"name\":\"admin_set_min_pay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_exchange_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWithdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shopStorePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"admin_set_withdrawable\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"get_info\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"},{\"name\":\"_devidend\",\"type\":\"uint256\"},{\"name\":\"_remain\",\"type\":\"uint256\"},{\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_pay_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_this_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_expire_day\",\"type\":\"uint256\"},{\"name\":\"_userdata\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"get_orderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shopStoreRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"admin_del\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shopStoreNextId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"admin_set_deposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeRates\",\"type\":\"uint256[]\"}],\"name\":\"admin_set_exchange_rate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requireData\",\"type\":\"bool\"}],\"name\":\"admin_set_isRequireData\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shopStorePrice\",\"type\":\"uint256\"}],\"name\":\"admin_set_shopStorePrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_withdraw\",\"type\":\"bool\"}],\"name\":\"admin_set_withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Eth\",\"type\":\"int256\"},{\"name\":\"_Wei\",\"type\":\"int256\"}],\"name\":\"admin_deposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"admin_set_shopStoreRegister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shopStoreId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_dividend\",\"type\":\"bool\"}],\"name\":\"admin_set_dividend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_devidend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Eth\",\"type\":\"int256\"},{\"name\":\"_Wei\",\"type\":\"int256\"}],\"name\":\"admin_dividend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"thisTokenWei\",\"type\":\"uint256\"}],\"name\":\"Paydata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Pixiu","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50cb487df950e762b75155894aedd996380697c3ecb21affd4cfeafac9a8d4d4"}]}