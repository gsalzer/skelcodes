{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n      }\r\n\r\n      function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n\r\n      function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n\r\n      function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @title ERC20Basic\r\n     * @dev Simpler version of ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/179\r\n     */\r\n    contract ERC20Basic {\r\n      uint256 public totalSupply;\r\n      function balanceOf(address who) constant returns (uint256);\r\n      function transfer(address to, uint256 value) returns (bool);\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n    }\r\n\r\n    /**\r\n     * @title ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    contract ERC20 is ERC20Basic {\r\n      function allowance(address owner, address spender) constant returns (uint256);\r\n      function transferFrom(address from, address to, uint256 value) returns (bool);\r\n      function approve(address spender, uint256 value) returns (bool);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    /**\r\n     * @title Basic token\r\n     * @dev Basic version of StandardToken, with no allowances. \r\n     */\r\n    contract BasicToken is ERC20Basic {\r\n      using SafeMath for uint256;\r\n\r\n      mapping(address => uint256) balances;\r\n\r\n      /**\r\n      * @dev transfer token for a specified address\r\n      * @param _to The address to transfer to.\r\n      * @param _value The amount to be transferred.\r\n      */\r\n      function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      }\r\n\r\n      /**\r\n      * @dev Gets the balance of the specified address.\r\n      * @param _owner The address to query the the balance of. \r\n      * @return An uint256 representing the amount owned by the passed address.\r\n      */\r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n     * @title Standard ERC20 token\r\n     *\r\n     * @dev Implementation of the basic standard token.\r\n     * @dev https://github.com/ethereum/EIPs/issues/20\r\n     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n     */\r\n    contract StandardToken is ERC20, BasicToken {\r\n\r\n      mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n      /**\r\n       * @dev Transfer tokens from one address to another\r\n       * @param _from address The address which you want to send tokens from\r\n       * @param _to address The address which you want to transfer to\r\n       * @param _value uint256 the amount of tokens to be transferred\r\n       */\r\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _value The amount of tokens to be spent.\r\n       */\r\n      function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n       * @param _owner address The address which owns the funds.\r\n       * @param _spender address The address which will spend the funds.\r\n       * @return A uint256 specifying the amount of tokens still available for the spender.\r\n       */\r\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n      }\r\n      \r\n      /**\r\n       * approve should be called when allowed[_spender] == 0. To increment\r\n       * allowed value is better to use this function to avoid 2 calls (and wait until \r\n       * the first transaction is mined)\r\n       * From MonolithDAO Token.sol\r\n       */\r\n      function increaseApproval (address _spender, uint _addedValue) \r\n        returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n\r\n      function decreaseApproval (address _spender, uint _subtractedValue) \r\n        returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n          allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n     * @title Ownable\r\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n     * functions, this simplifies the implementation of \"user permissions\".\r\n     */\r\n    contract Ownable {\r\n      address public owner;\r\n\r\n\r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n      /**\r\n       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n       * account.\r\n       */\r\n      function Ownable() {\r\n        owner = msg.sender;\r\n      }\r\n\r\n\r\n      /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n      modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n      }\r\n\r\n\r\n      /**\r\n       * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n       * @param newOwner The address to transfer ownership to.\r\n       */\r\n      function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));      \r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n      }\r\n\r\n    }\r\n//#endImportRegion\r\n\r\ncontract RewardToken is StandardToken, Ownable {\r\n    bool public payments = false;\r\n    mapping(address => uint256) public rewards;\r\n    uint public payment_time = 0;\r\n    uint public payment_amount = 0;\r\n\r\n    event Reward(address indexed to, uint256 value);\r\n\r\n    function payment() payable onlyOwner {\r\n        require(payments);\r\n        require(msg.value >= 0.01 * 1 ether);\r\n\r\n        payment_time = now;\r\n        payment_amount = this.balance;\r\n    }\r\n\r\n    function _reward(address _to) private returns (bool) {\r\n        require(payments);\r\n        require(rewards[_to] < payment_time);\r\n\r\n        if(balances[_to] > 0) {\r\n\t\t\tuint amount = payment_amount.mul(balances[_to]).div( totalSupply);\r\n\r\n\t\t\trequire(_to.send(amount));\r\n\r\n\t\t\tReward(_to, amount);\r\n\t\t}\r\n\t\t\r\n        rewards[_to] = payment_time;\r\n\r\n        return true;\r\n    }\r\n\r\n    function reward() returns (bool) {\r\n        return _reward(msg.sender);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n\t\tif(payments) {\r\n\t\t\tif(rewards[msg.sender] < payment_time) require(_reward(msg.sender));\r\n\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\r\n\t\t}\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n\t\tif(payments) {\r\n\t\t\tif(rewards[_from] < payment_time) require(_reward(_from));\r\n\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\r\n\t\t}\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract CottageToken is RewardToken {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Cottage Token\";\r\n    string public symbol = \"CTG\";\r\n    uint256 public decimals = 18;\r\n\r\n    bool public mintingFinished = false;\r\n    bool public commandGetBonus = false;\r\n    uint public commandGetBonusTime = 1519884000;\r\n\r\n    event Mint(address indexed holder, uint256 tokenAmount);\r\n    event MintFinished();\r\n    event MintCommandBonus();\r\n\r\n    function _mint(address _to, uint256 _amount) onlyOwner private returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner returns(bool) {\r\n        require(!mintingFinished);\r\n        return _mint(_to, _amount);\r\n    }\r\n\r\n    function finishMinting() onlyOwner returns(bool) {\r\n        mintingFinished = true;\r\n        payments = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n\r\n    function commandMintBonus(address _to) onlyOwner {\r\n        require(mintingFinished && !commandGetBonus);\r\n        require(now > commandGetBonusTime);\r\n\r\n        commandGetBonus = true;\r\n\r\n        require(_mint(_to, totalSupply.mul(15).div(100)));\r\n\r\n        MintCommandBonus();\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    CottageToken public token;\r\n    address public beneficiary = 0xd358Bd183C8E85C56d84C1C43a785DfEE0236Ca2; \r\n\r\n    uint public collectedFunds = 0;\r\n    uint public hardCap = 230000 * 1000000000000000000; // hardCap = 230000 ETH\r\n    uint public tokenETHAmount = 600; // Amount of tokens per 1 ETH\r\n    \r\n    uint public startPreICO = 1511762400; // Mon, 27 Nov 2017 06:00:00 GMT\r\n    uint public endPreICO = 1514354400; // Wed, 27 Dec 2017 06:00:00 GMT\r\n    uint public bonusPreICO = 200  ether; // If > 200 ETH - bonus 20%, if < 200 ETH - bonus 12% \r\n     \r\n    uint public startICO = 1517464800; // Thu, 01 Feb 2018 06:00:00 GMT\r\n    uint public endICOp1 = 1518069600; //  Thu, 08 Feb 2018 06:00:00 GMT\r\n    uint public endICOp2 = 1518674400; // Thu, 15 Feb 2018 06:00:00 GMT\r\n    uint public endICOp3 = 1519279200; // Thu, 22 Feb 2018 06:00:00 GMT\r\n    uint public endICO = 1519884000; // Thu, 01 Mar 2018 06:00:00 GMT\r\n    \r\n    bool public crowdsaleFinished = false;\r\n\r\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n\r\n    function Crowdsale() {\r\n        // beneficiary =  msg.sender; // if beneficiary = contract creator\r\n\r\n        token = new CottageToken();\r\n    }\r\n\r\n    function() payable {\r\n        doPurchase();\r\n    }\r\n\r\n    function doPurchase() payable {\r\n        \r\n        require((now >= startPreICO && now < endPreICO) || (now >= startICO && now < endICO));\r\n        require(collectedFunds < hardCap);\r\n        require(msg.value > 0);\r\n        require(!crowdsaleFinished);\r\n        \r\n        uint rest = 0;\r\n        uint tokensAmount = 0;\r\n        uint sum = msg.value;\r\n        \r\n        if(sum > hardCap.sub(collectedFunds) ) {\r\n           sum =  hardCap.sub(collectedFunds);\r\n           rest =  msg.value - sum; \r\n        }\r\n        \r\n        if(now >= startPreICO && now < endPreICO){\r\n            if(msg.value >= bonusPreICO){\r\n                tokensAmount = sum.mul(tokenETHAmount).mul(120).div(100); // Bonus 20% \r\n            } else {\r\n                tokensAmount = sum.mul(tokenETHAmount).mul(112).div(100); // Bonus 12%\r\n            }\r\n        }\r\n        \r\n        if(now >= startICO && now < endICOp1){\r\n             tokensAmount = sum.mul(tokenETHAmount).mul(110).div(100);  // Bonus 10%\r\n        } else if (now >= endICOp1 && now < endICOp2) {\r\n            tokensAmount = sum.mul(tokenETHAmount).mul(108).div(100);   // Bonus 8%\r\n        } else if (now >= endICOp2 && now < endICOp3) {\r\n            tokensAmount = sum.mul(tokenETHAmount).mul(105).div(100);  // Bonus 5%\r\n        } else if (now >= endICOp3 && now < endICO) {\r\n            tokensAmount = sum.mul(tokenETHAmount);\r\n        }\r\n\r\n        require(token.mint(msg.sender, tokensAmount));\r\n        beneficiary.transfer(sum);\r\n        msg.sender.transfer(rest);\r\n\r\n        collectedFunds = collectedFunds.add(sum);\r\n\r\n        NewContribution(msg.sender, tokensAmount, tokenETHAmount);\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        require(token.finishMinting());\r\n        require(beneficiary.send(this.balance)); // If we store ETH on contract\r\n        token.transferOwnership(beneficiary);\r\n\r\n        crowdsaleFinished = true;\r\n    }\r\n    \r\n        function mint(address _to, uint _value) onlyOwner {\r\n            \r\n        _value = _value.mul(1000000000000000000);\r\n\r\n        require((now >= startPreICO && now < endPreICO) || (now >= startICO && now < endICO));\r\n        require(collectedFunds < hardCap);\r\n        require(_value > 0);\r\n        require(!crowdsaleFinished);\r\n        \r\n        uint rest = 0;\r\n        uint tokensAmount = 0;\r\n        uint sum = _value;\r\n        \r\n        if(sum > hardCap.sub(collectedFunds) ) {\r\n           sum =  hardCap.sub(collectedFunds);\r\n           rest =  _value - sum; \r\n        }\r\n        \r\n        if(now >= startPreICO && now < endPreICO){\r\n            if(_value >= bonusPreICO){\r\n                tokensAmount = sum.mul(tokenETHAmount).mul(120).div(100); // Bonus 20% \r\n            } else {\r\n                tokensAmount = sum.mul(tokenETHAmount).mul(112).div(100); // Bonus 12%\r\n            }\r\n        }\r\n        \r\n        if(now >= startICO && now < endICOp1){\r\n             tokensAmount = sum.mul(tokenETHAmount).mul(110).div(100);  // Bonus 10%\r\n        } else if (now >= endICOp1 && now < endICOp2) {\r\n            tokensAmount = sum.mul(tokenETHAmount).mul(108).div(100);   // Bonus 8%\r\n        } else if (now >= endICOp2 && now < endICOp3) {\r\n            tokensAmount = sum.mul(tokenETHAmount).mul(105).div(100);  // Bonus 5%\r\n        } else if (now >= endICOp3 && now < endICO) {\r\n            tokensAmount = sum.mul(tokenETHAmount);\r\n        }\r\n\r\n        require(token.mint(_to, tokensAmount));\r\n        collectedFunds = collectedFunds.add(sum);\r\n\r\n        NewContribution(_to, tokensAmount, tokenETHAmount);\r\n    }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOp3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOp2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICOp1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenETHAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9d0ec095a82bb8fd558ede739b3e55d54f7177d3de195c00a5544edcbb83db07"}]}