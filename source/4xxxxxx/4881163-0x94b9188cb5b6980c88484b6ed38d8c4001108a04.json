{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  ForecasterReward.sol v1.1.0\r\n * \r\n *  Bilal Arif - https://twitter.com/furusiyya_\r\n *  Draglet GbmH\r\n */\r\n\r\npragma solidity 0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) pure internal returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) pure internal returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    assert(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\ncontract ForecasterReward is Haltable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  /* the starting time of the crowdsale */\r\n  uint private startsAt;\r\n\r\n  /* the ending time of the crowdsale */\r\n  uint private endsAt;\r\n\r\n  /* How many wei of funding we have received so far */\r\n  uint private weiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint private investorCount = 0;\r\n  \r\n  /* How many total investments have been made */\r\n  uint private totalInvestments = 0;\r\n  \r\n  /* Address of pre-ico contract*/\r\n  address private multisig;\r\n \r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  \r\n  /** State machine\r\n   *\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Closed: Funding is closed.\r\n   */\r\n  enum State{PreFunding, Funding, Closed}\r\n\r\n  // A new investment was made\r\n  event Invested(uint index, address indexed investor, uint weiAmount);\r\n\r\n  // Funds transfer to other address\r\n  event Transfer(address indexed receiver, uint weiAmount);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint endTimestamp);\r\n\r\n  function ForecasterReward() public\r\n  {\r\n\r\n    owner = 0xed4C73Ad76D90715d648797Acd29A8529ED511A0;\r\n    multisig = 0xDadF84E3adFc746e005D55aB427C1a8B1cc9cBA5;\r\n    \r\n    startsAt = 1515600000;\r\n    endsAt = 1516118400;\r\n  }\r\n\r\n  /**\r\n   * Allow investor to just send in money\r\n   */\r\n  function() nonZero payable public{\r\n    buy(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who have invested\r\n   *\r\n   */\r\n  function buy(address receiver) stopInEmergency inState(State.Funding) nonZero public payable{\r\n    require(receiver != 0x00);\r\n    \r\n    uint weiAmount = msg.value;\r\n   \r\n    if(investedAmountOf[receiver] == 0) {\r\n      // A new investor\r\n      investorCount++;\r\n    }\r\n\r\n    // count all investments\r\n    totalInvestments++;\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    \r\n    // Up total accumulated fudns\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    // Pocket the money\r\n    if(!distributeFunds()) revert();\r\n    \r\n    // Tell us invest was success\r\n    Invested(totalInvestments, receiver, weiAmount);\r\n  }\r\n\r\n \r\n  /**\r\n   * @return multisig Address of Multisig Wallet contract\r\n   */\r\n  function multisigAddress() public constant returns(address){\r\n      return multisig;\r\n  }\r\n  \r\n  /**\r\n   * @return startDate Crowdsale opening date\r\n   */\r\n  function fundingStartAt() public constant returns(uint ){\r\n      return startsAt;\r\n  }\r\n  \r\n  /**\r\n   * @return endDate Crowdsale closing date\r\n   */\r\n  function fundingEndsAt() public constant returns(uint){\r\n      return endsAt;\r\n  }\r\n  \r\n  /**\r\n   * @return investors Total of distinct investors\r\n   */\r\n  function distinctInvestors() public constant returns(uint){\r\n      return investorCount;\r\n  }\r\n  \r\n  /**\r\n   * @return investments Crowdsale closing date\r\n   */\r\n  function investments() public constant returns(uint){\r\n      return totalInvestments;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Send out contributions imediately\r\n   */\r\n  function distributeFunds() private returns(bool){\r\n        \r\n    Transfer(multisig,this.balance);\r\n    \r\n    if(!multisig.send(this.balance)){\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint _endsAt) public onlyOwner {\r\n    \r\n    // Don't change past\r\n    require(_endsAt > now);\r\n\r\n    endsAt = _endsAt;\r\n    EndsAtChanged(_endsAt);\r\n  }\r\n\r\n  /**\r\n   * @return total of amount of wie collected by the contract \r\n   */\r\n  function fundingRaised() public constant returns (uint){\r\n    return weiRaised;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if (now < startsAt) return State.PreFunding;\r\n    else if (now <= endsAt) return State.Funding;\r\n    else if (now > endsAt) return State.Closed;\r\n  }\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n\r\n  /** Modifier allowing execution only if received value is greater than zero */\r\n  modifier nonZero(){\r\n    require(msg.value > 0);\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endsAt\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distinctInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"}]","ContractName":"ForecasterReward","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c680abd148473214c20731f8ffe2e2a9440d2cfcc640517fd6b561fd11ab0b94"}]}