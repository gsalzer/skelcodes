{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n}\r\n\r\ncontract EvaCoin is MintableToken, PullPayment {\r\n    string public constant name = \"EvaCoin\";\r\n    string public constant symbol = \"EVA\";\r\n    uint8 public constant decimals = 18;\r\n    bool public transferAllowed = false;\r\n\r\n    // keeper has special limited rights for the coin:\r\n    // pay dividends\r\n    address public keeper;\r\n\r\n    // raisings in USD\r\n    uint256 public raisedPreSaleUSD;\r\n    uint256 public raisedSale1USD;\r\n    uint256 public raisedSale2USD;\r\n    uint256 public payedDividendsUSD;\r\n\r\n    // coin issues\r\n    uint256 public totalSupplyPreSale = 0;\r\n    uint256 public totalSupplySale1 = 0;\r\n    uint256 public totalSupplySale2 = 0;\r\n\r\n    enum SaleStages { PreSale, Sale1, Sale2, SaleOff }\r\n    SaleStages public stage = SaleStages.PreSale;\r\n\r\n    function EvaCoin() public {\r\n        keeper = msg.sender; \r\n    }   \r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == keeper);\r\n        _;\r\n    }\r\n\r\n    function sale1Started() onlyOwner public {\r\n        totalSupplyPreSale = totalSupply;\r\n        stage = SaleStages.Sale1;\r\n    }\r\n    function sale2Started() onlyOwner public {\r\n        totalSupplySale1 = totalSupply;\r\n        stage = SaleStages.Sale2;\r\n    }\r\n    function sale2Stopped() onlyOwner public {\r\n        totalSupplySale2 = totalSupply;\r\n        stage = SaleStages.SaleOff;\r\n    }\r\n\r\n    // ---------------------------- dividends related definitions --------------------\r\n    uint constant MULTIPLIER = 10e18;\r\n\r\n    mapping(address=>uint256) lastDividends;\r\n    uint public totalDividendsPerCoin;\r\n    uint public etherBalance;\r\n\r\n    modifier activateDividends(address account) {\r\n        if (totalDividendsPerCoin != 0) { // only after first dividends payed\r\n            var actual = totalDividendsPerCoin - lastDividends[account];\r\n            var dividends = (balances[account] * actual) / MULTIPLIER;\r\n\r\n            if (dividends > 0 && etherBalance >= dividends) {\r\n                etherBalance -= dividends;\r\n                lastDividends[account] = totalDividendsPerCoin;\r\n                asyncSend(account, dividends);\r\n            }\r\n            //This needed for accounts with zero balance at the moment\r\n            lastDividends[account] = totalDividendsPerCoin;\r\n        }\r\n\r\n        _;\r\n    }\r\n    function activateDividendsFunc(address account) private activateDividends(account) {}\r\n    // -------------------------------------------------------------------------------\r\n\r\n\r\n    // ---------------------------- sale 2 bonus definitions --------------------\r\n    // coins investor has before sale2 started\r\n    mapping(address=>uint256) sale1Coins;\r\n\r\n    // investors who has been payed sale2 bonus\r\n    mapping(address=>bool) sale2Payed;\r\n\r\n    modifier activateBonus(address account) {\r\n        if (stage == SaleStages.SaleOff && !sale2Payed[account]) {\r\n            uint256 coins = sale1Coins[account];\r\n            if (coins == 0) {\r\n                coins = balances[account];\r\n            }\r\n            balances[account] += balances[account] * coins / (totalSupplyPreSale + totalSupplySale1);\r\n            sale2Payed[account] = true;\r\n        } else if (stage != SaleStages.SaleOff) {\r\n            // remember account balace before SaleOff\r\n            sale1Coins[account] = balances[account];\r\n        }\r\n        _;\r\n    }\r\n    function activateBonusFunc(address account) private activateBonus(account) {}\r\n\r\n    // ----------------------------------------------------------------------\r\n\r\n    event TransferAllowed(bool);\r\n\r\n    modifier canTransfer() {\r\n        require(transferAllowed);\r\n        _;\r\n    }\r\n\r\n    // Override StandardToken#transferFrom\r\n    function transferFrom(address from, address to, uint256 value) canTransfer\r\n    // stack too deep to call modifiers\r\n    // activateDividends(from) activateDividends(to) activateBonus(from) activateBonus(to)\r\n    public returns (bool) {\r\n        activateDividendsFunc(from);\r\n        activateDividendsFunc(to);\r\n        activateBonusFunc(from);\r\n        activateBonusFunc(to);\r\n        return super.transferFrom(from, to, value); \r\n    }   \r\n    \r\n    // Override BasicToken#transfer\r\n    function transfer(address to, uint256 value) \r\n    canTransfer activateDividends(to) activateBonus(to)\r\n    public returns (bool) {\r\n        return super.transfer(to, value); \r\n    }\r\n\r\n    function allowTransfer() onlyOwner public {\r\n        transferAllowed = true; \r\n        TransferAllowed(true);\r\n    }\r\n\r\n    function raisedUSD(uint256 amount) onlyOwner public {\r\n        if (stage == SaleStages.PreSale) {\r\n            raisedPreSaleUSD += amount;\r\n        } else if (stage == SaleStages.Sale1) {\r\n            raisedSale1USD += amount;\r\n        } else if (stage == SaleStages.Sale2) {\r\n            raisedSale2USD += amount;\r\n        } \r\n    }\r\n\r\n    function canStartSale2() public constant returns (bool) {\r\n        return payedDividendsUSD >= raisedPreSaleUSD + raisedSale1USD;\r\n    }\r\n\r\n    // Dividents can be payed any time - even after PreSale and before Sale1\r\n    // ethrate - actual ETH/USD rate\r\n    function sendDividends(uint256 ethrate) public payable onlyKeeper {\r\n        require(totalSupply > 0); // some coins must be issued\r\n        totalDividendsPerCoin += (msg.value * MULTIPLIER / totalSupply);\r\n        etherBalance += msg.value;\r\n        payedDividendsUSD += msg.value * ethrate / 1 ether;\r\n    }\r\n\r\n    // Override MintableToken#mint\r\n    function mint(address _to, uint256 _amount) \r\n        onlyOwner canMint activateDividends(_to) activateBonus(_to) \r\n        public returns (bool) {\r\n        super.mint(_to, _amount);\r\n\r\n        if (stage == SaleStages.PreSale) {\r\n            totalSupplyPreSale += _amount;\r\n        } else if (stage == SaleStages.Sale1) {\r\n            totalSupplySale1 += _amount;\r\n        } else if (stage == SaleStages.Sale2) {\r\n            totalSupplySale2 += _amount;\r\n        } \r\n    }\r\n\r\n    // Override PullPayment#withdrawPayments\r\n    function withdrawPayments()\r\n        activateDividends(msg.sender) activateBonus(msg.sender)\r\n        public {\r\n        super.withdrawPayments();\r\n    }\r\n\r\n    function checkPayments()\r\n        activateDividends(msg.sender) activateBonus(msg.sender)\r\n        public returns (uint256) {\r\n        return payments[msg.sender];\r\n    }\r\n    function paymentsOf() constant public returns (uint256) {\r\n        return payments[msg.sender];\r\n    }\r\n\r\n    function checkBalance()\r\n        activateDividends(msg.sender) activateBonus(msg.sender)\r\n        public returns (uint256) {\r\n        return balanceOf(msg.sender);\r\n    }\r\n\r\n    // withdraw ethers if contract has more ethers\r\n    // than for dividends for some reason\r\n    function withdraw() onlyOwner public {\r\n        if (this.balance > etherBalance) {\r\n            owner.transfer(this.balance - etherBalance);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract EvaCoinPreSale is CappedCrowdsale, Ownable {\r\n    // Sale1 and Sale2 EVC/ETH sale rate (without bonus)\r\n    uint256 public constant SALE_RATE = 2100;\r\n\r\n    // PreSale EVA/ETH sale rate\r\n    uint256 public constant PRESALE_RATE = 2*SALE_RATE;\r\n\r\n    // ETH/USD exchange rate - set to actual before this contract deploy\r\n    uint256 constant ETH_RATE = 700;  \r\n\r\n    // How much want to raise in USD\r\n    uint256 constant RAISE_USD = 25000;\r\n\r\n    // USD amount invested by early founders before the coin issued in USD\r\n    uint256 public constant EARLY_FOUNDERS_USD = 135 * 1000;\r\n\r\n    // hard cap in wei\r\n    uint256 public constant HARD_CAP = RAISE_USD * 1 ether / ETH_RATE;\r\n\r\n    // early founders investments in ethers\r\n    uint256 public constant EARLY_FOUNDERS_CAP = EARLY_FOUNDERS_USD * 1 ether / ETH_RATE;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    EvaCoin public coin;\r\n\r\n    function EvaCoinPreSale(address evacoin, uint256 _startTime, uint256 _endTime) public\r\n        CappedCrowdsale(HARD_CAP)\r\n        Crowdsale(_startTime, _endTime, PRESALE_RATE, msg.sender)\r\n    {\r\n        coin = EvaCoin(evacoin);\r\n\r\n        // Need to call this, because wrong token assigned in Crowdsale constructor\r\n        Crowdsale.token = coin;\r\n    }\r\n\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        // it doesn't really matter what coin to return\r\n        // because setCoin call goes after\r\n        return coin;\r\n    }\r\n\r\n    // Override Crowdsale#buyTokens\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(!isFinalized);\r\n        require(msg.value >= 500 finney);\r\n        super.buyTokens(beneficiary);\r\n        coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether));\r\n    }\r\n\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n\r\n        // coins for early founders\r\n        uint256 founderCoins = EARLY_FOUNDERS_CAP.mul(SALE_RATE);\r\n        coin.mint(owner, founderCoins);\r\n\r\n        // contract owner need to transfer coin to Sale1 contract\r\n        coin.transferOwnership(coin.keeper());\r\n\r\n        isFinalized = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_FOUNDERS_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_FOUNDERS_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"evacoin\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"EvaCoinPreSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000007789984763e91f064826dbeba1c9a47cb2d4ea2000000000000000000000000000000000000000000000000000000005a3976c8000000000000000000000000000000000000000000000000000000005a725880","Library":"","SwarmSource":"bzzr://3af74d3a46f6fb5073d01e6f0c202c4aba28d9fc50aed322d131c8a7de7fdf64"}]}