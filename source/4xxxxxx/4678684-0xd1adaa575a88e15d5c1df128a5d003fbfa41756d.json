{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n * https://github.com/ethereum/EIPs/issues/223\r\n */\r\n\r\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\r\ncontract ERC223ReceivingContract {\r\n\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _from Transaction initiator, analogue of msg.sender\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data containig a function signature and/or parameters\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n/// @title Base Token contract - Functions to be implemented by token contracts.\r\ncontract Token {\r\n    /*\r\n     * Implements ERC 20 standard.\r\n     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     *\r\n     *  Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\r\n     *  https://github.com/ethereum/EIPs/issues/223\r\n     */\r\n\r\n    /*\r\n     * This is a slight change to the ERC20 base standard.\r\n     * function totalSupply() constant returns (uint256 supply);\r\n     * is replaced with:\r\n     * uint256 public totalSupply;\r\n     * This automatically creates a getter function for the totalSupply.\r\n     * This is moved to the base contract since public getter functions are not\r\n     * currently recognised as an implementation of the matching abstract\r\n     * function by the compiler.\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     * ERC 20\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     * ERC 223\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n\r\n    /*\r\n     * Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // There is no ERC223 compatible Transfer event, with `_data` included.\r\n}\r\n\r\n/// @title Standard token contract - Standard token implementation.\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     * Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\r\n    /// tokenFallback if sender is a contract.\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data to be sent to tokenFallback\r\n    /// @return Returns success of function call.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(transfer(_to, _value));\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly.\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\r\n    /// @dev Allows for an approved third party to transfer tokens from one\r\n    /// address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != 0x0);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens that a spender can transfer on\r\n    /// behalf of a token owner.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by the given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/// @title xChainge Token\r\ncontract xChaingeToken is StandardToken {\r\n\r\n    /*\r\n     *  Terminology:\r\n     *  1 token unit = Xei\r\n     *  1 token = XCH = Xei * multiplier\r\n     *  multiplier set from token's number of decimals (i.e. 10 ** decimals)\r\n     */\r\n\r\n    /*\r\n     *  Token metadata\r\n     */\r\n    string constant public name = \"xChainge Token\";\r\n    string constant public symbol = \"XCH\";\r\n    uint8 constant public decimals = 18;\r\n    uint constant multiplier = 10 ** uint(decimals);\r\n\r\n    event Deployed(uint indexed _totalSupply);\r\n    event Burnt(address indexed _receiver, uint indexed _num, uint indexed _totalSupply);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets dutch auction contract address\r\n    /// and assigns all tokens to dutch auction.\r\n    /// @param auctionAddress Address of dutch auction contract.\r\n    /// @param walletAddress Address of wallet.\r\n    function xChaingeToken(address auctionAddress, address walletAddress) public\r\n    {\r\n        // Auction address should not be null.\r\n        require(auctionAddress != 0x0);\r\n        require(walletAddress != 0x0);\r\n\r\n        // Total supply of Xei at deployment\r\n        totalSupply = 23529412000000000000000000;\r\n\r\n        balances[auctionAddress] = 20000000000000000000000000;\r\n        balances[walletAddress] = 3529412000000000000000000;\r\n\r\n        Transfer(0x0, auctionAddress, balances[auctionAddress]);\r\n        Transfer(0x0, walletAddress, balances[walletAddress]);\r\n\r\n        Deployed(totalSupply);\r\n\r\n        assert(totalSupply == balances[auctionAddress] + balances[walletAddress]);\r\n    }\r\n\r\n    /// @notice Allows `msg.sender` to simply destroy `num` token units (Xei). This means the total\r\n    /// token supply will decrease.\r\n    /// @dev Allows to destroy token units (Xei).\r\n    /// @param num Number of token units (Xei) to burn.\r\n    function burn(uint num) public {\r\n        require(num > 0);\r\n        require(balances[msg.sender] >= num);\r\n        require(totalSupply >= num);\r\n\r\n        uint preBalance = balances[msg.sender];\r\n\r\n        balances[msg.sender] -= num;\r\n        totalSupply -= num;\r\n        Burnt(msg.sender, num, totalSupply);\r\n        Transfer(msg.sender, 0x0, num);\r\n\r\n        assert(balances[msg.sender] == preBalance - num);\r\n    }\r\n}\r\n\r\n/// @title Dutch auction contract - distribution of a fixed number of tokens using an auction.\r\n/// The contract code is inspired by the Gnosis and Raiden auction contract. \r\n/// Auction ends if a fixed number of tokens was sold.\r\ncontract DutchAuction {\r\n    /*\r\n     * Auction for the XCH Token.\r\n     *\r\n     * Terminology:\r\n     * 1 token unit = Xei\r\n     * 1 token = XCH = Xei * multiplier\r\n     * multiplier set from token's number of decimals (i.e. 10 ** decimals)\r\n     */\r\n\r\n    // Wait 10 days after the end of the auction, before anyone can claim tokens\r\n    uint constant public tokenClaimWaitingPeriod = 10 days;\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    xChaingeToken public token;\r\n    address public ownerAddress;\r\n    address public walletAddress;\r\n\r\n    // Price decay function parameters to be changed depending on the desired outcome\r\n\r\n    // Starting price in WEI;\r\n    uint constant public priceStart = 50000000000000000;    \r\n    uint constant public minPrice = 5000000000000000;\r\n    uint constant public softCap = 10000000000000000000000;\r\n\r\n    // For calculating elapsed time for price\r\n    uint public startTime;\r\n    uint public endTime;\r\n    uint public startBlock;\r\n\r\n    // Keep track of all ETH received in the bids\r\n    uint public receivedWei;\r\n\r\n    // Keep track of cumulative ETH funds for which the tokens have been claimed\r\n    uint public fundsClaimed;\r\n\r\n    uint public tokenMultiplier;\r\n\r\n    // Total number of Xei (XCH * multiplier) that will be auctioned\r\n    uint public numTokensAuctioned;\r\n\r\n    // Wei per XCH (Xei * multiplier)\r\n    uint public finalPrice;\r\n\r\n    // Bidder address => bid value\r\n    mapping (address => uint) public bids;\r\n\r\n    Stages public stage;\r\n\r\n    /*\r\n     * Enums\r\n     */\r\n    enum Stages {\r\n        AuctionDeployed,\r\n        AuctionSetUp,\r\n        AuctionStarted,\r\n        AuctionEnded,\r\n        AuctionCanceled,\r\n        TokensDistributed\r\n    }\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event Deployed();\r\n    event Setup();\r\n    event AuctionStarted(uint indexed _startTime, uint indexed _blockNumber);\r\n    event BidSubmission(address indexed _sender, uint _amount, uint _missingFunds);\r\n    event ClaimedTokens(address indexed _recipient, uint _sentAmount);\r\n    event AuctionEnded(uint _finalPrice);\r\n    event TokensDistributed();\r\n    event AuctionCanceled();\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n\r\n    /// @dev Contract constructor function sets the starting price, divisor constant and\r\n    /// divisor exponent for calculating the Dutch Auction price.\r\n    /// @param _walletAddress Wallet address\r\n    function DutchAuction(address _walletAddress) public\r\n    {\r\n        require(_walletAddress != 0x0);\r\n        walletAddress = _walletAddress;\r\n\r\n        ownerAddress = msg.sender;\r\n        stage = Stages.AuctionDeployed;\r\n        Deployed();\r\n    }\r\n\r\n    /// @dev Fallback function for the contract, which calls bid() if the auction has started.\r\n    function () public payable atStage(Stages.AuctionStarted) {\r\n        bid();\r\n    }\r\n\r\n    /// @notice Set `_tokenAddress` as the token address to be used in the auction.\r\n    /// @dev Setup function sets external contracts addresses.\r\n    /// @param _tokenAddress Token address.\r\n    function setup(address _tokenAddress) public isOwner atStage(Stages.AuctionDeployed) {\r\n        require(_tokenAddress != 0x0);\r\n        token = xChaingeToken(_tokenAddress);\r\n\r\n        // Get number of Xei (XCH * multiplier) to be auctioned from token auction balance\r\n        numTokensAuctioned = token.balanceOf(address(this));\r\n\r\n        // Set the number of the token multiplier for its decimals\r\n        tokenMultiplier = 10 ** uint(token.decimals());\r\n\r\n        stage = Stages.AuctionSetUp;\r\n        Setup();\r\n    }\r\n\r\n    /// @notice Start the auction.\r\n    /// @dev Starts auction and sets startTime.\r\n    function startAuction() public isOwner atStage(Stages.AuctionSetUp) {\r\n        stage = Stages.AuctionStarted;\r\n        startTime = now;\r\n        startBlock = block.number;\r\n        AuctionStarted(startTime, startBlock);\r\n    }\r\n\r\n    /// @notice Finalize the auction - sets the final XCH token price and changes the auction\r\n    /// stage after no bids are allowed anymore.\r\n    /// @dev Finalize auction and set the final XCH token price.\r\n    function finalizeAuction() public atStage(Stages.AuctionStarted)\r\n    {\r\n        require(price() == minPrice);\r\n\r\n        endTime = now;\r\n\r\n        if (receivedWei < softCap)\r\n        {\r\n            token.transfer(walletAddress, numTokensAuctioned);\r\n            stage = Stages.AuctionCanceled;\r\n            AuctionCanceled();\r\n            return;\r\n        }\r\n\r\n        // Send ETH to wallet\r\n        walletAddress.transfer(receivedWei);\r\n\r\n        uint missingFunds = missingFundsToEndAuction();\r\n        if (missingFunds > 0){\r\n            uint soldTokens = tokenMultiplier * receivedWei / price();\r\n            uint burnTokens = numTokensAuctioned - soldTokens;\r\n            token.burn(burnTokens);\r\n            numTokensAuctioned -= burnTokens;\r\n        }\r\n\r\n        // Calculate the final price = WEI / XCH = WEI / (Xei / multiplier)\r\n        // Reminder: numTokensAuctioned is the number of Xei (XCH * multiplier) that are auctioned\r\n        finalPrice = tokenMultiplier * receivedWei / numTokensAuctioned;\r\n\r\n        stage = Stages.AuctionEnded;\r\n        AuctionEnded(finalPrice);\r\n\r\n        assert(finalPrice > 0);\r\n    }\r\n\r\n    /// @notice Canceled the auction\r\n    function CancelAuction() public isOwner atStage(Stages.AuctionStarted)\r\n    {\r\n        token.transfer(walletAddress, numTokensAuctioned);\r\n        stage = Stages.AuctionCanceled;\r\n        AuctionCanceled();\r\n    }\r\n\r\n    /// --------------------------------- Auction Functions ------------------\r\n\r\n\r\n    /// @notice Send `msg.value` WEI to the auction from the `msg.sender` account.\r\n    /// @dev Allows to send a bid to the auction.\r\n    function bid() public payable atStage(Stages.AuctionStarted)\r\n    {\r\n        require(msg.value > 0);\r\n        assert(bids[msg.sender] + msg.value >= msg.value);\r\n\r\n        // Missing funds without the current bid value\r\n        uint missingFunds = missingFundsToEndAuction();\r\n\r\n        // We require bid values to be less than the funds missing to end the auction\r\n        // at the current price.\r\n        require(msg.value <= missingFunds);\r\n\r\n        bids[msg.sender] += msg.value;\r\n        receivedWei += msg.value;\r\n\r\n        BidSubmission(msg.sender, msg.value, missingFunds);\r\n\r\n        assert(receivedWei >= msg.value);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `msg.sender` after the auction has ended.\r\n    /// @dev Claims tokens for `msg.sender` after auction. To be used if tokens can\r\n    /// be claimed by beneficiaries, individually.\r\n    function claimTokens() public atStage(Stages.AuctionEnded) returns (bool) {\r\n        return proxyClaimTokens(msg.sender);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `receiverAddress` after the auction has ended.\r\n    /// @dev Claims tokens for `receiverAddress` after auction has ended.\r\n    /// @param receiverAddress Tokens will be assigned to this address if eligible.\r\n    function proxyClaimTokens(address receiverAddress) public atStage(Stages.AuctionEnded) returns (bool)\r\n    {\r\n        // Waiting period after the end of the auction, before anyone can claim tokens\r\n        // Ensures enough time to check if auction was finalized correctly\r\n        // before users start transacting tokens\r\n        require(now > endTime + tokenClaimWaitingPeriod);\r\n        require(receiverAddress != 0x0);\r\n\r\n        if (bids[receiverAddress] == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Number of Xei = bid wei / Xei = bid wei / (wei per XCH * multiplier)\r\n        uint num = (tokenMultiplier * bids[receiverAddress]) / finalPrice;\r\n\r\n        // Due to finalPrice floor rounding, the number of assigned tokens may be higher\r\n        // than expected. Therefore, the number of remaining unassigned auction tokens\r\n        // may be smaller than the number of tokens needed for the last claimTokens call\r\n        uint auctionTokensBalance = token.balanceOf(address(this));\r\n        if (num > auctionTokensBalance) {\r\n            num = auctionTokensBalance;\r\n        }\r\n\r\n        // Update the total amount of funds for which tokens have been claimed\r\n        fundsClaimed += bids[receiverAddress];\r\n\r\n        // Set receiver bid to 0 before assigning tokens\r\n        bids[receiverAddress] = 0;\r\n\r\n        require(token.transfer(receiverAddress, num));\r\n\r\n        ClaimedTokens(receiverAddress, num);\r\n\r\n        // After the last tokens are claimed, we change the auction stage\r\n        // Due to the above logic, rounding errors will not be an issue\r\n        if (fundsClaimed == receivedWei) {\r\n            stage = Stages.TokensDistributed;\r\n            TokensDistributed();\r\n        }\r\n\r\n        assert(token.balanceOf(receiverAddress) >= num);\r\n        assert(bids[receiverAddress] == 0);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Withdraw ETH for `msg.sender` after the auction has canceled.\r\n    function withdraw() public atStage(Stages.AuctionCanceled) returns (bool) {\r\n        return proxyWithdraw(msg.sender);\r\n    }\r\n\r\n    /// @notice Withdraw ETH for `receiverAddress` after the auction has canceled.\r\n    /// @param receiverAddress ETH will be assigned to this address if eligible.\r\n    function proxyWithdraw(address receiverAddress) public atStage(Stages.AuctionCanceled) returns (bool) {\r\n        require(receiverAddress != 0x0);\r\n        \r\n        if (bids[receiverAddress] == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint amount = bids[receiverAddress];\r\n        bids[receiverAddress] = 0;\r\n        \r\n        receiverAddress.transfer(amount);\r\n\r\n        assert(bids[receiverAddress] == 0);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get the XCH price in WEI during the auction, at the time of\r\n    /// calling this function. Returns `0` if auction has ended.\r\n    /// Returns `priceStart` before auction has started.\r\n    /// @dev Calculates the current XCH token price in WEI.\r\n    /// @return Returns WEI per XCH (Xei * multiplier).\r\n    function price() public constant returns (uint) {\r\n        if (stage == Stages.AuctionEnded ||\r\n            stage == Stages.AuctionCanceled ||\r\n            stage == Stages.TokensDistributed) {\r\n            return 0;\r\n        }\r\n        return calcTokenPrice();\r\n    }\r\n\r\n    /// @notice Get the missing funds needed to end the auction,\r\n    /// calculated at the current XCH price in WEI.\r\n    /// @dev The missing funds amount necessary to end the auction at the current XCH price in WEI.\r\n    /// @return Returns the missing funds amount in WEI.\r\n    function missingFundsToEndAuction() constant public returns (uint) {\r\n\r\n        // numTokensAuctioned = total number of Xei (XCH * multiplier) that is auctioned\r\n        uint requiredWeiAtPrice = numTokensAuctioned * price() / tokenMultiplier;\r\n        if (requiredWeiAtPrice <= receivedWei) {\r\n            return 0;\r\n        }\r\n\r\n        // assert(requiredWeiAtPrice - receivedWei > 0);\r\n        return requiredWeiAtPrice - receivedWei;\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n\r\n    /// @dev Calculates the token price (WEI / XCH) at the current timestamp\r\n    /// during the auction; elapsed time = 0 before auction starts.\r\n    /// Based on the provided parameters, the price does not change in the first\r\n    /// `priceConstant^(1/priceExponent)` seconds due to rounding.\r\n    /// Rounding in `decayRate` also produces values that increase instead of decrease\r\n    /// in the beginning; these spikes decrease over time and are noticeable\r\n    /// only in first hours. This should be calculated before usage.\r\n    /// @return Returns the token price - Wei per XCH.\r\n    function calcTokenPrice() constant private returns (uint) {\r\n        uint elapsed;\r\n        if (stage == Stages.AuctionStarted) {\r\n            elapsed = now - startTime;\r\n        }\r\n\r\n        uint decayRate = elapsed ** 3 / 541000000000;\r\n        uint currentPrice = priceStart * (1 + elapsed) / (1 + elapsed + decayRate);\r\n        return minPrice > currentPrice ? minPrice : currentPrice;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"auctionAddress\",\"type\":\"address\"},{\"name\":\"walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_num\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"xChaingeToken","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ec41cdb6ca4910486d875a2cf1fac1159d1b2bdf00000000000000000000000099bab71019d224AAFB18b41C1A6045e481a7a51D","Library":"","SwarmSource":"bzzr://ab21d6b53e74c10b3f4a8a2e37cf586973bf09a06934ba0db0c83d6a3b2b7826"}]}