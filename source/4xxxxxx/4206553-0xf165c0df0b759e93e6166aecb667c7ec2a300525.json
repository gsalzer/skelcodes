{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n//date 1500114129 by Ournet International2022649\r\ncontract tokenGAT {\r\n        \r\n        uint256 public totalContribution = 0;\r\n        uint256 public totalBonusTokensIssued = 0;\r\n        uint256 public totalSupply = 0;\r\n        function balanceOf(address _owner) constant returns (uint256 balance);\r\n        function transfer(address _to, uint256 _value) returns (bool success);\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n        function approve(address _spender, uint256 _value) returns (bool success);\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n        //events for logging\r\n        event LogTransaction(address indexed _addres, uint256 value);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        }\r\n\r\n/*  ERC 20 token this funtion are also call when somebody or contract want transfer, send, u operate wiht our tokens*/\r\ncontract StandarTokentokenGAT is tokenGAT{\r\nmapping (address => uint256) balances; //asociative array for associate address and its balance like a hashmapp in java\r\nmapping (address => uint256 ) weirecives; //asociative array for associate address and its balance like a hashmapp in java\r\nmapping (address => mapping (address => uint256)) allowed; // this store addres that are allowed for operate in this contract\r\n\r\n\t\r\nfunction allowance(address _owner, address _spender) constant returns (uint256) {\r\n    \treturn allowed[_owner][_spender];\r\n}\r\n\r\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n}\r\n\t\r\nfunction transfer(address _to, uint256 _value) returns (bool success) { \r\n   \tif(msg.data.length < (2 * 32) + 4) { revert();} \t// mitigates the ERC20 short address attack\r\n    if (balances[msg.sender] >= _value && _value >= 0){ \r\n\t\tbalances[msg.sender] -= _value; //substract balance from user that is transfering (who deploy or who executed it)\r\n\t\tbalances[_to] += _value;  //add balance from user that is transfering (who deploy or who executed it)\r\n\t\tTransfer(msg.sender, _to, _value);    //login\r\n       \treturn true;\r\n     }else\r\n   \t\treturn false;\r\n     }\r\n\t\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n     \tif(msg.data.length < (3 * 32) + 4) { revert(); } // mitigates the ERC20 short address attack\r\n       if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0){\t\t\r\n         //add balance to destinate address\r\n          balances[_to] += _value;\r\n\t\t   //substract balance from source address\r\n        \tbalances[_from] -= _value;        \t\r\n        \tallowed[_from][msg.sender] -= _value;\r\n\t\t   //loggin\r\n        \tTransfer(_from, _to, _value);\r\n        \treturn true;\r\n    \t} else \r\n  \t\t\treturn false;\r\n\t}\r\n//put the addres in allowed mapping\t\r\n function approve(address _spender, uint256 _value) returns (bool success) {\r\n   // mitigates the ERC20 spend/approval race condition\r\n\tif (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }    \t\r\n   \tallowed[msg.sender][_spender] = _value;    \t\r\n    \tApproval(msg.sender, _spender, _value);\r\n    \treturn true;\r\n\t}\r\n}\r\n\r\ncontract TokenICOGAT is StandarTokentokenGAT{\t\r\n\t\r\n\taddress owner = msg.sender;\r\n\t\r\n\t//Token Metadata\r\n\tfunction name() constant returns (string) { return \"General Advertising Token\"; }\r\n\tfunction symbol() constant returns (string) { return \"GAT\"; }\r\n\tuint256 public constant decimals = 18;\r\n\t\r\n    //ICO Parameters\r\n\tbool public purchasingAllowed = false;\t\r\n\taddress public ethFoundDeposit;      // deposit address for ETH for OurNet International\r\n\taddress public gatFoundDeposit;      // deposit address for Brave International use and OurNet User Fund\r\n \tuint public deadline; \t//epoch date to end of crowsale\r\n \tuint public startline; \t//when crowsale start\r\n\tuint public refundDeadLine;\t// peiorode avaible for get refound\r\n\tuint public transactionCounter;//counter for calcucalate bonus\r\n \tuint public etherReceived; // Number of Ether received\r\n \tuint256 public constant gatFund = 250 * (10**6) * 10**decimals;   // 250m GAT reserved for OurNet Intl use, early adopters incentive and ournNet employees team\r\n \tuint256 public constant tokenExchangeRate = 9000; // 9000 GAT tokens per 1 ETH\r\n \tuint256 public constant tokenCreationCap =  1000 * (10**6) * 10**decimals; //total of tokens issued\r\n \tuint256 public constant tokenSellCap =  750 * (10**6) * 10**decimals; //maximun of gat tokens for sell\r\n\tuint256 public constant tokenSaleMin =  17 * (10**6) * 10**decimals; //minimun goal\r\n \r\n  //constructor or contract\t\r\n function TokenICOGAT(){\r\n  startline = now;\r\n  deadline = startline + 45 * 1 days;\r\n  refundDeadLine = deadline + 30 days;\r\n  ethFoundDeposit = owner;\r\n  gatFoundDeposit = owner;   \t \r\n  balances[gatFoundDeposit] = gatFund; //deposit fondos for ourNet international \r\n  LogTransaction(gatFoundDeposit,gatFund); //login transaction \r\n }\r\n  \r\n function bonusCalculate(uint256 amount) internal returns(uint256){\r\n \tuint256 amounttmp = 0;\r\n\tif (transactionCounter > 0 && transactionCounter <= 1000){\r\n    \treturn  amount / 2   ;   // bonus 50%\r\n\t}\r\n\tif (transactionCounter > 1000 && transactionCounter <= 2000){\r\n    return\t amount / 5 ;   // bonus 20%\r\n\t}\r\n\tif (transactionCounter > 2000 && transactionCounter <= 3000){\r\n     return\tamount / 10;   // bonus 10%\r\n\t}\r\n\tif (transactionCounter > 3000 && transactionCounter <= 5000){\r\n     return\tamount / 20;   // bonus 5%\r\n\t}\r\n \treturn amounttmp;\r\n\t}\t  \r\n\t\r\n\tfunction enablePurchasing() {\r\n   \tif (msg.sender != owner) { revert(); }\r\n\t\tif(purchasingAllowed) {revert();}\r\n\t\tpurchasingAllowed = true;\t\r\n   \t}\r\n\t\r\n\tfunction disablePurchasing() {\r\n    \tif (msg.sender != owner) { revert(); }\r\n\tif(!purchasingAllowed) {revert();}\t\t\r\n    \tpurchasingAllowed = false;\t\t\r\n\t}\r\n\t\r\n    function getStats() constant returns (uint256, uint256, uint256, bool) {\r\n    \treturn (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\r\n\t}\r\n\t\t\r\n\t// recive ethers funtion witout name is call every some body send ether\r\n\tfunction() payable {\r\n    \tif (!purchasingAllowed) { revert(); }   \r\n        if ((tokenCreationCap - (totalSupply + gatFund)) <= 0) { revert();}  \r\n    \tif (msg.value == 0) { return; }\r\n\ttransactionCounter +=1;\r\n    \ttotalContribution += msg.value;\r\n    \tuint256 bonusGiven = bonusCalculate(msg.value);\r\n        // Number of GAT sent to Ether contributors\r\n    \tuint256 tokensIssued = (msg.value * tokenExchangeRate) + (bonusGiven * tokenExchangeRate);\r\n    \ttotalBonusTokensIssued += bonusGiven;\r\n    \ttotalSupply += tokensIssued;\r\n    \tbalances[msg.sender] += tokensIssued;  \r\n\tweirecives[msg.sender] += msg.value; // it is import for calculate refund witout token bonus\r\n    \tTransfer(address(this), msg.sender, tokensIssued);\r\n   }\r\n\t\t\r\n      \r\n\t// send excess of tokens when de ico end\r\n\tfunction sendSurplusTokens() {\r\n    \tif (purchasingAllowed) { revert(); } \t\r\n     \tif (msg.sender != owner) { revert();}\r\n    \tuint256 excess = tokenCreationCap - (totalSupply + gatFund);\r\n\tif(excess <= 0){revert();}\r\n    \tbalances[gatFoundDeposit] += excess;  \t\r\n    \tTransfer(address(this), gatFoundDeposit, excess);\r\n   }\r\n\t\r\n\tfunction withdrawEtherHomeExternal() external{//Regarding security issues the first option is save ether in a online wallet, but if some bad happens, we will use local wallet as contingency plan\r\n\t\tif(purchasingAllowed){revert();}\r\n\t\tif (msg.sender != owner) { revert();}\r\n\t\tethFoundDeposit.transfer(this.balance); //send ether home\t\t\r\n\t}\r\n\t\r\n\tfunction withdrawEtherHomeLocal(address _ethHome) external{ // continegency plan\r\n\t\tif(purchasingAllowed){revert();}\r\n\t\tif (msg.sender != owner) { revert();}\r\n\t\t_ethHome.transfer(this.balance); //send ether home\t\t\r\n\t}\r\n\t\r\n\t/* \r\n     * When tokenSaleMin is not reach:\r\n     * 1) donors call the \"refund\" function of the GATCrowdFundingToken contract \r\n\t */\r\n\tfunction refund() public {\r\n\tif(purchasingAllowed){revert();} // only refund after ico end\r\n\tif(now >= refundDeadLine ){revert();} // only refund are available before ico end + 30 days\r\n\tif((totalSupply - totalBonusTokensIssued) >= tokenSaleMin){revert();} // if we sould enough, no refund allow\r\n\tif(msg.sender == ethFoundDeposit){revert();}\t// OurNet not entitled to a refund\r\n\tuint256 gatVal= balances[msg.sender]; // get balance of who is getting from balances mapping\r\n\tif(gatVal <=0) {revert();} //if dont have balnace sent no refund\r\n\t// balances[msg.sender] = 0;//since donor can hold the tokes as souvenir do not update balance of who is getting refund in gatcontract\r\n        uint256 ethVal = weirecives[msg.sender]; //extract amount contribuited by sender without tokenbonus        \r\n\tLogTransaction(msg.sender,ethVal);//loggin transaction\r\n\tmsg.sender.transfer(ethVal);// send ether comeback\t\r\n        totalContribution -= ethVal;\r\n        weirecives[msg.sender] -= ethVal; // getrefound from weirecives\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethHome\",\"type\":\"address\"}],\"name\":\"withdrawEtherHomeLocal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gatFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFoundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusTokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSellCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gatFoundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundDeadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendSurplusTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherHomeExternal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addres\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenICOGAT","CompilerVersion":"v0.4.14-nightly.2017.7.31+commit.22326189","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63495363d2ca67725a3e523d4ef8b690a0d68c2925c9bddfb59875bfd54e8980"}]}