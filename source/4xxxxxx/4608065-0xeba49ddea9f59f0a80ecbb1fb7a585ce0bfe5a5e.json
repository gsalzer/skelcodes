{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    // Owner's address\r\n    address public owner;\r\n\r\n    // Hardcoded address of super owner (for security reasons)\r\n    address internal super_owner = 0x630CC4c83fCc1121feD041126227d25Bbeb51959;\r\n\r\n    address internal bountyAddr = 0x10945A93914aDb1D68b6eFaAa4A59DfB21Ba9951;\r\n\r\n    // Hardcoded addresses of founders for withdraw after gracePeriod is succeed (for security reasons)\r\n    address[2] internal foundersAddresses = [\r\n        0x2f072F00328B6176257C21E64925760990561001,\r\n        0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE\r\n    ];\r\n\r\n    // Constructor of parent the contract\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Modifier for owner's functions of the contract\r\n    modifier onlyOwner {\r\n        if ((msg.sender != owner) && (msg.sender != super_owner)) revert();\r\n        _;\r\n    }\r\n\r\n    // Modifier for super-owner's functions of the contract\r\n    modifier onlySuperOwner {\r\n        if (msg.sender != super_owner) revert();\r\n        _;\r\n    }\r\n\r\n    // Return true if sender is owner or super-owner of the contract\r\n    function isOwner() internal returns(bool success) {\r\n        if ((msg.sender == owner) || (msg.sender == super_owner)) return true;\r\n        return false;\r\n    }\r\n\r\n    // Change the owner of the contract\r\n    function transferOwnership(address newOwner)  public onlySuperOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\n\r\ncontract STE is owned {\r\n\t// ERC 20 variables\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    // ---\r\n    \r\n    uint256 public icoRaisedETH; // amount of raised in ETH\r\n    uint256 public soldedSupply; // total amount of token solded supply         \r\n\t\r\n\t// current speed of network\r\n\tuint256 public blocksPerHour;\r\n\t\r\n    /* \r\n    \tSell/Buy prices in wei \r\n    \t1 ETH = 10^18 of wei\r\n    */\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    \r\n    // What percent will be returned to Presalers after ICO (in percents from ICO sum)\r\n    uint32  public percentToPresalersFromICO;\t// in % * 100, example 10% = 1000\r\n    uint256 public weiToPresalersFromICO;\t\t// in wei\r\n    \r\n\t/* preSale params */\r\n\tuint256 public presaleAmountETH;\r\n\r\n    /* Grace period parameters */\r\n    uint256 public gracePeriodStartBlock;\r\n    uint256 public gracePeriodStopBlock;\r\n    uint256 public gracePeriodMinTran;\t\t\t// minimum sum of transaction for ICO in wei\r\n    uint256 public gracePeriodMaxTarget;\t\t// in STE * 10^8\r\n    uint256 public gracePeriodAmount;\t\t\t// in STE * 10^8\r\n    \r\n    uint256 public burnAfterSoldAmount;\r\n    \r\n    bool public icoFinished;\t// ICO is finished ?\r\n\r\n    uint32 public percentToFoundersAfterICO; // in % * 100, example 30% = 3000\r\n\r\n    bool public allowTransfers; // if true then allow coin transfers\r\n    mapping (address => bool) public transferFromWhiteList;\r\n\r\n    /* Array with all balances */\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    /* Presale investors list */\r\n    mapping (address => uint256) public presaleInvestorsETH;\r\n    mapping (address => uint256) public presaleInvestors;\r\n\r\n    /* Ico Investors list */\r\n    mapping (address => uint256) public icoInvestors;\r\n\r\n    // Dividends variables\r\n    uint32 public dividendsRound; // round number of dividends    \r\n    uint256 public dividendsSum; // sum for dividends in current round (in wei)\r\n    uint256 public dividendsBuffer; // sum for dividends in current round (in wei)\r\n\r\n    /* Paid dividends */\r\n    mapping(address => mapping(uint32 => uint256)) public paidDividends;\r\n\t\r\n\t/* Trusted accounts list */\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n        \r\n    /* Events of token */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    /* Token constructor */\r\n    function STE(string _tokenName, string _tokenSymbol) public {\r\n        // Initial supply of token\r\n        // We set only 70m of supply because after ICO was finished, founders get additional 30% of token supply\r\n        totalSupply = 70000000 * 100000000;\r\n\r\n        balanceOf[this] = totalSupply;\r\n\r\n        // Initial sum of solded supply during preSale\r\n        soldedSupply = 1651900191227993;\r\n        presaleAmountETH = 15017274465709181875863;\r\n\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = 8;\r\n\r\n        icoRaisedETH = 0;\r\n        \r\n        blocksPerHour = 260;\r\n\r\n        // % of company cost transfer to founders after ICO * 100, 30% = 3000\r\n        percentToFoundersAfterICO = 3000;\r\n\r\n        // % to presalers after ICO * 100, 10% = 1000\r\n        percentToPresalersFromICO = 1000;\r\n\r\n        // GracePeriod and ICO finished flags\r\n        icoFinished = false;\r\n\r\n        // Allow transfers token BEFORE ICO and PRESALE ends\r\n        allowTransfers = false;\r\n\r\n        // INIT VALUES FOR ICO START\r\n        buyPrice = 20000000; // 0.002 ETH for 1 STE\r\n        gracePeriodStartBlock = 4615918;\r\n        gracePeriodStopBlock = gracePeriodStartBlock + blocksPerHour * 8; // + 8 hours\r\n        gracePeriodAmount = 0;\r\n        gracePeriodMaxTarget = 5000000 * 100000000; // 5,000,000 STE for grace period\r\n        gracePeriodMinTran = 100000000000000000; // 0.1 ETH\r\n        burnAfterSoldAmount = 30000000;\r\n        // -----------------------------------------\r\n    }\r\n\r\n    /* Transfer coins */\r\n    function transfer(address _to, uint256 _value) public {\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[msg.sender] < _value) revert(); // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        // Cancel transfer transactions before ICO was finished\r\n        if ((!icoFinished) && (msg.sender != bountyAddr) && (!allowTransfers)) revert();\r\n        // Calc dividends for _from and for _to addresses\r\n        uint256 divAmount_from = 0;\r\n        uint256 divAmount_to = 0;\r\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\r\n            divAmount_from = calcDividendsSum(msg.sender);\r\n            if ((divAmount_from == 0) && (paidDividends[msg.sender][dividendsRound] == 0)) paidDividends[msg.sender][dividendsRound] = 1;\r\n            divAmount_to = calcDividendsSum(_to);\r\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\r\n        }\r\n        // End of calc dividends\r\n\r\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value; // Add the same to the recipient\r\n\r\n        if (divAmount_from > 0) {\r\n            if (!msg.sender.send(divAmount_from)) revert();\r\n        }\r\n        if (divAmount_to > 0) {\r\n            if (!_to.send(divAmount_to)) revert();\r\n        }\r\n\r\n        /* Notify anyone listening that this transfer took place */\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function calcDividendsSum(address _for) private returns(uint256 dividendsAmount) {\r\n        if (dividendsRound == 0) return 0;\r\n        if (dividendsBuffer == 0) return 0;\r\n        if (balanceOf[_for] == 0) return 0;\r\n        if (paidDividends[_for][dividendsRound] != 0) return 0;\r\n        uint256 divAmount = 0;\r\n        divAmount = (dividendsSum * ((balanceOf[_for] * 10000000000000000) / totalSupply)) / 10000000000000000;\r\n        // Do not calc dividends less or equal than 0.0001 ETH\r\n        if (divAmount < 100000000000000) {\r\n            paidDividends[_for][dividendsRound] = 1;\r\n            return 0;\r\n        }\r\n        if (divAmount > dividendsBuffer) {\r\n            divAmount = dividendsBuffer;\r\n            dividendsBuffer = 0;\r\n        } else dividendsBuffer -= divAmount;\r\n        paidDividends[_for][dividendsRound] += divAmount;\r\n        return divAmount;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[_from] < _value) revert(); // Check if the sender has enough\r\n        if ((balanceOf[_to] + _value) < balanceOf[_to]) revert(); // Check for overflows        \r\n        if (_value > allowance[_from][msg.sender]) revert(); // Check allowance\r\n        // Cancel transfer transactions before Ico and gracePeriod was finished\r\n        if ((!icoFinished) && (_from != bountyAddr) && (!transferFromWhiteList[_from]) && (!allowTransfers)) revert();\r\n\r\n        // Calc dividends for _from and for _to addresses\r\n        uint256 divAmount_from = 0;\r\n        uint256 divAmount_to = 0;\r\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\r\n            divAmount_from = calcDividendsSum(_from);\r\n            if ((divAmount_from == 0) && (paidDividends[_from][dividendsRound] == 0)) paidDividends[_from][dividendsRound] = 1;\r\n            divAmount_to = calcDividendsSum(_to);\r\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\r\n        }\r\n        // End of calc dividends\r\n\r\n        balanceOf[_from] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value; // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        if (divAmount_from > 0) {\r\n            if (!_from.send(divAmount_from)) revert();\r\n        }\r\n        if (divAmount_to > 0) {\r\n            if (!_to.send(divAmount_to)) revert();\r\n        }\r\n\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Admin function for transfer coins */\r\n    function transferFromAdmin(address _from, address _to, uint256 _value) public onlyOwner returns(bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (balanceOf[_from] < _value) revert(); // Check if the sender has enough\r\n        if ((balanceOf[_to] + _value) < balanceOf[_to]) revert(); // Check for overflows        \r\n\r\n        // Calc dividends for _from and for _to addresses\r\n        uint256 divAmount_from = 0;\r\n        uint256 divAmount_to = 0;\r\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\r\n            divAmount_from = calcDividendsSum(_from);\r\n            if ((divAmount_from == 0) && (paidDividends[_from][dividendsRound] == 0)) paidDividends[_from][dividendsRound] = 1;\r\n            divAmount_to = calcDividendsSum(_to);\r\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\r\n        }\r\n        // End of calc dividends\r\n\r\n        balanceOf[_from] -= _value; // Subtract from the sender\r\n        balanceOf[_to] += _value; // Add the same to the recipient\r\n\r\n        if (divAmount_from > 0) {\r\n            if (!_from.send(divAmount_from)) revert();\r\n        }\r\n        if (divAmount_to > 0) {\r\n            if (!_to.send(divAmount_to)) revert();\r\n        }\r\n\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // This function is called when anyone send ETHs to this token\r\n    function buy() public payable {\r\n        if (isOwner()) {\r\n\r\n        } else {\r\n            uint256 amount = 0;\r\n            amount = msg.value / buyPrice; // calculates the amount of STE\r\n\r\n            uint256 amountToPresaleInvestor = 0;\r\n\r\n            // GracePeriod if current timestamp between gracePeriodStartBlock and gracePeriodStopBlock\r\n            if ( (block.number >= gracePeriodStartBlock) && (block.number <= gracePeriodStopBlock) ) {\r\n                if ( (msg.value < gracePeriodMinTran) || (gracePeriodAmount > gracePeriodMaxTarget) ) revert();\r\n                gracePeriodAmount += amount;\r\n                icoRaisedETH += msg.value;\r\n                icoInvestors[msg.sender] += amount;\r\n                balanceOf[this] -= amount * 10 / 100;\r\n                balanceOf[bountyAddr] += amount * 10 / 100;\r\n                soldedSupply += amount + amount * 10 / 100;\r\n\r\n            // Payment to presellers when ICO was finished\r\n\t        } else if ((icoFinished) && (presaleInvestorsETH[msg.sender] > 0) && (weiToPresalersFromICO > 0)) {\r\n                amountToPresaleInvestor = msg.value + (presaleInvestorsETH[msg.sender] * 100000000 / presaleAmountETH) * icoRaisedETH * percentToPresalersFromICO / (100000000 * 10000);\r\n                if (amountToPresaleInvestor > weiToPresalersFromICO) {\r\n                    amountToPresaleInvestor = weiToPresalersFromICO;\r\n                    weiToPresalersFromICO = 0;\r\n                } else {\r\n                    weiToPresalersFromICO -= amountToPresaleInvestor;\r\n                }\r\n            }\r\n\r\n\t\t\tif (buyPrice > 0) {\r\n\t\t\t\tif (balanceOf[this] < amount) revert();\t\t\t\t// checks if it has enough to sell\r\n\t\t\t\tbalanceOf[this] -= amount;\t\t\t\t\t\t\t// subtracts amount from token balance    \t\t    \r\n\t\t\t\tbalanceOf[msg.sender] += amount;\t\t\t\t\t// adds the amount to buyer's balance    \t\t    \r\n\t\t\t} else if ( amountToPresaleInvestor == 0 ) revert();\t// Revert if buyPrice = 0 and b\r\n\t\t\t\r\n\t\t\tif (amountToPresaleInvestor > 0) {\r\n\t\t\t\tpresaleInvestorsETH[msg.sender] = 0;\r\n\t\t\t\tif ( !msg.sender.send(amountToPresaleInvestor) ) revert(); // Send amountToPresaleInvestor to presaleer after Ico\r\n\t\t\t}\r\n\t\t\tTransfer(this, msg.sender, amount);\t\t\t\t\t// execute an event reflecting the change\r\n        }\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        if (sellPrice == 0) revert();\r\n        if (balanceOf[msg.sender] < amount) revert();\t// checks if the sender has enough to sell\r\n        uint256 ethAmount = amount * sellPrice;\t\t\t// amount of ETH for sell\r\n        balanceOf[msg.sender] -= amount;\t\t\t\t// subtracts the amount from seller's balance\r\n        balanceOf[this] += amount;\t\t\t\t\t\t// adds the amount to token balance\r\n        if (!msg.sender.send(ethAmount)) revert();\t\t// sends ether to the seller.\r\n        Transfer(msg.sender, this, amount);\r\n    }\r\n\r\n\r\n    /* \r\n    \tSet params of ICO\r\n    \t\r\n    \t_auctionsStartBlock, _auctionsStopBlock - block number of start and stop of Ico\r\n    \t_auctionsMinTran - minimum transaction amount for Ico in wei\r\n    */\r\n    function setICOParams(uint256 _gracePeriodPrice, uint32 _gracePeriodStartBlock, uint32 _gracePeriodStopBlock, uint256 _gracePeriodMaxTarget, uint256 _gracePeriodMinTran, bool _resetAmount) public onlyOwner {\r\n    \tgracePeriodStartBlock = _gracePeriodStartBlock;\r\n        gracePeriodStopBlock = _gracePeriodStopBlock;\r\n        gracePeriodMaxTarget = _gracePeriodMaxTarget;\r\n        gracePeriodMinTran = _gracePeriodMinTran;\r\n        \r\n        buyPrice = _gracePeriodPrice;    \t\r\n    \t\r\n        icoFinished = false;        \r\n\r\n        if (_resetAmount) icoRaisedETH = 0;\r\n    }\r\n\r\n    // Initiate dividends round ( owner can transfer ETH to contract and initiate dividends round )\r\n    // aDividendsRound - is integer value of dividends period such as YYYYMM example 201712 (year 2017, month 12)\r\n    function setDividends(uint32 _dividendsRound) public payable onlyOwner {\r\n        if (_dividendsRound > 0) {\r\n            if (msg.value < 1000000000000000) revert();\r\n            dividendsSum = msg.value;\r\n            dividendsBuffer = msg.value;\r\n        } else {\r\n            dividendsSum = 0;\r\n            dividendsBuffer = 0;\r\n        }\r\n        dividendsRound = _dividendsRound;\r\n    }\r\n\r\n    // Get dividends\r\n    function getDividends() public {\r\n        if (dividendsBuffer == 0) revert();\r\n        if (balanceOf[msg.sender] == 0) revert();\r\n        if (paidDividends[msg.sender][dividendsRound] != 0) revert();\r\n        uint256 divAmount = calcDividendsSum(msg.sender);\r\n        if (divAmount >= 100000000000000) {\r\n            if (!msg.sender.send(divAmount)) revert();\r\n        }\r\n    }\r\n\r\n    // Set sell and buy prices for token\r\n    function setPrices(uint256 _buyPrice, uint256 _sellPrice) public onlyOwner {\r\n        buyPrice = _buyPrice;\r\n        sellPrice = _sellPrice;\r\n    }\r\n\r\n\r\n    // Set sell and buy prices for token\r\n    function setAllowTransfers(bool _allowTransfers) public onlyOwner {\r\n        allowTransfers = _allowTransfers;\r\n    }\r\n\r\n    // Stop gracePeriod\r\n    function stopGracePeriod() public onlyOwner {\r\n        gracePeriodStopBlock = block.number;\r\n        buyPrice = 0;\r\n        sellPrice = 0;\r\n    }\r\n\r\n    // Stop ICO\r\n    function stopICO() public onlyOwner {\r\n        if ( gracePeriodStopBlock > block.number ) gracePeriodStopBlock = block.number;\r\n        \r\n        icoFinished = true;\r\n\r\n        weiToPresalersFromICO = icoRaisedETH * percentToPresalersFromICO / 10000;\r\n\r\n        if (soldedSupply >= (burnAfterSoldAmount * 100000000)) {\r\n\r\n            uint256 companyCost = soldedSupply * 1000000 * 10000;\r\n            companyCost = companyCost / (10000 - percentToFoundersAfterICO) / 1000000;\r\n            \r\n            uint256 amountToFounders = companyCost - soldedSupply;\r\n\r\n            // Burn extra coins if current balance of token greater than amountToFounders \r\n            if (balanceOf[this] > amountToFounders) {\r\n                Burn(this, (balanceOf[this]-amountToFounders));\r\n                balanceOf[this] = 0;\r\n                totalSupply = companyCost;\r\n            } else {\r\n                totalSupply += amountToFounders - balanceOf[this];\r\n            }\r\n\r\n            balanceOf[owner] += amountToFounders;\r\n            balanceOf[this] = 0;\r\n            Transfer(this, owner, amountToFounders);\r\n        }\r\n\r\n        buyPrice = 0;\r\n        sellPrice = 0;\r\n    }\r\n    \r\n    \r\n    // Withdraw ETH to founders \r\n    function withdrawToFounders(uint256 amount) public onlyOwner {\r\n    \tuint256 amount_to_withdraw = amount * 1000000000000000; // 0.001 ETH\r\n        if ((this.balance - weiToPresalersFromICO) < amount_to_withdraw) revert();\r\n        amount_to_withdraw = amount_to_withdraw / foundersAddresses.length;\r\n        uint8 i = 0;\r\n        uint8 errors = 0;\r\n        \r\n        for (i = 0; i < foundersAddresses.length; i++) {\r\n\t\t\tif (!foundersAddresses[i].send(amount_to_withdraw)) {\r\n\t\t\t\terrors++;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    \r\n    function setBlockPerHour(uint256 _blocksPerHour) public onlyOwner {\r\n    \tblocksPerHour = _blocksPerHour;\r\n    }\r\n    \r\n    function setBurnAfterSoldAmount(uint256 _burnAfterSoldAmount)  public onlyOwner {\r\n    \tburnAfterSoldAmount = _burnAfterSoldAmount;\r\n    }\r\n    \r\n    function setTransferFromWhiteList(address _from, bool _allow) public onlyOwner {\r\n    \ttransferFromWhiteList[_from] = _allow;\r\n    }\r\n    \r\n    function addPresaleInvestor(address _addr, uint256 _amountETH, uint256 _amountSTE ) public onlyOwner {    \t\r\n\t    presaleInvestors[_addr] += _amountSTE;\r\n\t    balanceOf[this] -= _amountSTE;\r\n\t\tbalanceOf[_addr] += _amountSTE;\r\n\t    \r\n\t    if ( _amountETH > 0 ) {\r\n\t    \tpresaleInvestorsETH[_addr] += _amountETH;\r\n\t\t\tbalanceOf[this] -= _amountSTE / 10;\r\n\t\t\tbalanceOf[bountyAddr] += _amountSTE / 10;\r\n\t\t\t//presaleAmountETH += _amountETH;\r\n\t\t}\r\n\t\t\r\n\t    Transfer(this, _addr, _amountSTE);\r\n    }\r\n    \r\n    /**/    \r\n        \r\n    // BURN coins in HELL! (sender balance)\r\n    function burn(uint256 amount) public {\r\n        if (balanceOf[msg.sender] < amount) revert(); // Check if the sender has enough\r\n        balanceOf[msg.sender] -= amount; // Subtract from the sender\r\n        totalSupply -= amount; // Updates totalSupply\r\n        Burn(msg.sender, amount);\r\n    }\r\n\r\n    // BURN coins of token in HELL!\r\n    function burnContractCoins(uint256 amount) public onlySuperOwner {\r\n        if (balanceOf[this] < amount) revert(); // Check if the sender has enough\r\n        balanceOf[this] -= amount; // Subtract from the contract balance\r\n        totalSupply -= amount; // Updates totalSupply\r\n        Burn(this, amount);\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function() internal payable {\r\n        buy();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAfterSoldAmount\",\"type\":\"uint256\"}],\"name\":\"setBurnAfterSoldAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsBuffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodMaxTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendsRound\",\"type\":\"uint32\"}],\"name\":\"setDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentToPresalersFromICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToPresalersFromICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gracePeriodPrice\",\"type\":\"uint256\"},{\"name\":\"_gracePeriodStartBlock\",\"type\":\"uint32\"},{\"name\":\"_gracePeriodStopBlock\",\"type\":\"uint32\"},{\"name\":\"_gracePeriodMaxTarget\",\"type\":\"uint256\"},{\"name\":\"_gracePeriodMinTran\",\"type\":\"uint256\"},{\"name\":\"_resetAmount\",\"type\":\"bool\"}],\"name\":\"setICOParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferFromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocksPerHour\",\"type\":\"uint256\"}],\"name\":\"setBlockPerHour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentToFoundersAfterICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAfterSoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAmountETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGracePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodStopBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnContractCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"paidDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"name\":\"_amountSTE\",\"type\":\"uint256\"}],\"name\":\"addPresaleInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodMinTran\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleInvestorsETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRaisedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setTransferFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"STE","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000011535465582045786368616e67652049434f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035354450000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f044c3f2596409b90e3482bee906e10a30c39d375a8f91b76605fed729a3c299"}]}