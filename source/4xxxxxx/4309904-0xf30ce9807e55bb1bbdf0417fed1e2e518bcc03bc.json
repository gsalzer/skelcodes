{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n    /*\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SmokeExchangeCoin is StandardToken {\r\n  string public name = \"Smoke Exchange Token\";\r\n  string public symbol = \"SMX\";\r\n  uint256 public decimals = 18;  \r\n  address public ownerAddress;\r\n    \r\n  event Distribute(address indexed to, uint256 value);\r\n  \r\n  function SmokeExchangeCoin(uint256 _totalSupply, address _ownerAddress, address smxTeamAddress, uint256 allocCrowdsale, uint256 allocAdvBounties, uint256 allocTeam) {\r\n    ownerAddress = _ownerAddress;\r\n    totalSupply = _totalSupply;\r\n    balances[ownerAddress] += allocCrowdsale;\r\n    balances[ownerAddress] += allocAdvBounties;\r\n    balances[smxTeamAddress] += allocTeam;\r\n  }\r\n  \r\n  function distribute(address _to, uint256 _value) returns (bool) {\r\n    require(balances[ownerAddress] >= _value);\r\n    balances[ownerAddress] = balances[ownerAddress].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Distribute(_to, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract SmokeExchangeCoinCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  SmokeExchangeCoin public token;\r\n  \r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  uint256 public privateStartTime;\r\n  uint256 public privateEndTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  uint private constant DECIMALS = 1000000000000000000;\r\n  //PRICES\r\n  uint public constant TOTAL_SUPPLY = 28500000 * DECIMALS; //28.5 millions\r\n  uint public constant BASIC_RATE = 300; //300 tokens per 1 eth\r\n  uint public constant PRICE_STANDARD    = BASIC_RATE * DECIMALS; \r\n  uint public constant PRICE_PREBUY = PRICE_STANDARD * 150/100;\r\n  uint public constant PRICE_STAGE_ONE   = PRICE_STANDARD * 125/100;\r\n  uint public constant PRICE_STAGE_TWO   = PRICE_STANDARD * 115/100;\r\n  uint public constant PRICE_STAGE_THREE   = PRICE_STANDARD * 107/100;\r\n  uint public constant PRICE_STAGE_FOUR = PRICE_STANDARD;\r\n  \r\n  uint public constant PRICE_PREBUY_BONUS = PRICE_STANDARD * 165/100;\r\n  uint public constant PRICE_STAGE_ONE_BONUS = PRICE_STANDARD * 145/100;\r\n  uint public constant PRICE_STAGE_TWO_BONUS = PRICE_STANDARD * 125/100;\r\n  uint public constant PRICE_STAGE_THREE_BONUS = PRICE_STANDARD * 115/100;\r\n  uint public constant PRICE_STAGE_FOUR_BONUS = PRICE_STANDARD;\r\n  \r\n  //uint public constant PRICE_WHITELIST_BONUS = PRICE_STANDARD * 165/100;\r\n  \r\n  //TIME LIMITS\r\n  uint public constant STAGE_ONE_TIME_END = 1 weeks;\r\n  uint public constant STAGE_TWO_TIME_END = 2 weeks;\r\n  uint public constant STAGE_THREE_TIME_END = 3 weeks;\r\n  uint public constant STAGE_FOUR_TIME_END = 4 weeks;\r\n  \r\n  uint public constant ALLOC_CROWDSALE = TOTAL_SUPPLY * 75/100;\r\n  uint public constant ALLOC_TEAM = TOTAL_SUPPLY * 15/100;  \r\n  uint public constant ALLOC_ADVISORS_BOUNTIES = TOTAL_SUPPLY * 10/100;\r\n  \r\n  uint256 public smxSold = 0;\r\n  \r\n  address public ownerAddress;\r\n  address public smxTeamAddress;\r\n  \r\n  //active = false/not active = true\r\n  bool public halted;\r\n  \r\n  //in wei\r\n  uint public cap; \r\n  \r\n  //in wei, prebuy hardcap\r\n  uint public privateCap;\r\n  \r\n  uint256 public bonusThresholdWei;\r\n  \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  \r\n  /**\r\n  * Modifier to run function only if contract is active (not halted)\r\n  */\r\n  modifier isNotHalted() {\r\n    require(!halted);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * Constructor for SmokeExchageCoinCrowdsale\r\n  * @param _privateStartTime start time for presale\r\n  * @param _startTime start time for public sale\r\n  * @param _ethWallet all incoming eth transfered here. Use multisig wallet\r\n  * @param _privateWeiCap hard cap for presale\r\n  * @param _weiCap hard cap in wei for the crowdsale\r\n  * @param _bonusThresholdWei in wei. Minimum amount of wei required for bonus\r\n  * @param _smxTeamAddress team address \r\n  */\r\n  function SmokeExchangeCoinCrowdsale(uint256 _privateStartTime, uint256 _startTime, address _ethWallet, uint256 _privateWeiCap, uint256 _weiCap, uint256 _bonusThresholdWei, address _smxTeamAddress) {\r\n    require(_privateStartTime >= now);\r\n    require(_ethWallet != 0x0);    \r\n    require(_smxTeamAddress != 0x0);    \r\n    \r\n    privateStartTime = _privateStartTime;\r\n    //presale 10 days\r\n    privateEndTime = privateStartTime + 10 days;    \r\n    startTime = _startTime;\r\n    \r\n    //ICO start time after presale end\r\n    require(_startTime >= privateEndTime);\r\n    \r\n    endTime = _startTime + STAGE_FOUR_TIME_END;\r\n    \r\n    wallet = _ethWallet;   \r\n    smxTeamAddress = _smxTeamAddress;\r\n    ownerAddress = msg.sender;\r\n    \r\n    cap = _weiCap;    \r\n    privateCap = _privateWeiCap;\r\n    bonusThresholdWei = _bonusThresholdWei;\r\n                 \r\n    token = new SmokeExchangeCoin(TOTAL_SUPPLY, ownerAddress, smxTeamAddress, ALLOC_CROWDSALE, ALLOC_ADVISORS_BOUNTIES, ALLOC_TEAM);\r\n  }\r\n  \r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  \r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool privatePeriod = now >= privateStartTime && now < privateEndTime;\r\n    bool withinPeriod = (now >= startTime && now <= endTime) || (privatePeriod);\r\n    bool nonZeroPurchase = (msg.value != 0);\r\n    //cap depends on stage.\r\n    bool withinCap = privatePeriod ? (weiRaised.add(msg.value) <= privateCap) : (weiRaised.add(msg.value) <= cap);\r\n    // check if there are smx token left\r\n    bool smxAvailable = (ALLOC_CROWDSALE - smxSold > 0); \r\n    return withinPeriod && nonZeroPurchase && withinCap && smxAvailable;\r\n    //return true;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    bool tokenSold = ALLOC_CROWDSALE - smxSold == 0;\r\n    bool timeEnded = now > endTime;\r\n    return timeEnded || capReached || tokenSold;\r\n  }  \r\n  \r\n  /**\r\n  * Main function for buying tokens\r\n  * @param beneficiary purchased tokens go to this address\r\n  */\r\n  function buyTokens(address beneficiary) payable isNotHalted {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be distributed\r\n    uint256 tokens = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate(weiAmount)), 1 ether);\r\n    //require that there are more or equal tokens available for sell\r\n    require(ALLOC_CROWDSALE - smxSold >= tokens);\r\n\r\n    //update total weiRaised\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    //updated total smxSold\r\n    smxSold = smxSold.add(tokens);\r\n    \r\n    //add token to beneficiary and subtract from ownerAddress balance\r\n    token.distribute(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    //forward eth received to walletEth\r\n    forwardFunds();\r\n  }\r\n  \r\n  // send ether to the fund collection wallet  \r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  \r\n  /**\r\n  * Get rate. Depends on current time\r\n  *\r\n  */\r\n  function getCurrentRate(uint256 _weiAmount) constant returns (uint256) {  \r\n      \r\n      bool hasBonus = _weiAmount >= bonusThresholdWei;\r\n  \r\n      if (now < startTime) {\r\n        return hasBonus ? PRICE_PREBUY_BONUS : PRICE_PREBUY;\r\n      }\r\n      uint delta = SafeMath.sub(now, startTime);\r\n\r\n      //3+weeks from start\r\n      if (delta > STAGE_THREE_TIME_END) {\r\n        return hasBonus ? PRICE_STAGE_FOUR_BONUS : PRICE_STAGE_FOUR;\r\n      }\r\n      //2+weeks from start\r\n      if (delta > STAGE_TWO_TIME_END) {\r\n        return hasBonus ? PRICE_STAGE_THREE_BONUS : PRICE_STAGE_THREE;\r\n      }\r\n      //1+week from start\r\n      if (delta > STAGE_ONE_TIME_END) {\r\n        return hasBonus ? PRICE_STAGE_TWO_BONUS : PRICE_STAGE_TWO;\r\n      }\r\n\r\n      //less than 1 week from start\r\n      return hasBonus ? PRICE_STAGE_ONE_BONUS : PRICE_STAGE_ONE;\r\n  }\r\n  \r\n  /**\r\n  * Enable/disable halted\r\n  */\r\n  function toggleHalt(bool _halted) onlyOwner {\r\n    halted = _halted;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"smxTeamAddress\",\"type\":\"address\"},{\"name\":\"allocCrowdsale\",\"type\":\"uint256\"},{\"name\":\"allocAdvBounties\",\"type\":\"uint256\"},{\"name\":\"allocTeam\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SmokeExchangeCoin","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000017931c1885d0746c8000000000000000000000000000004a9502bc2ab5b16f6f9c070c4c106c528f096e350000000000000000000000004a38b9b470e6073a2ce8875c8b2cd8a8845fe97f00000000000000000000000000000000000000000011ae5512645c5751600000000000000000000000000000000000000000000000025b82cf4094d87140000000000000000000000000000000000000000000000003894436e0df44a9e00000","Library":"","SwarmSource":"bzzr://320006d44d52118928c4f436b7e91659d75d0dfb2a0cda63603c8b4fed2d8fa3"}]}