{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n    \r\n    address owner;\r\n    \r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract CoinTour is Ownable {\r\n    \r\n    string public  name  = \"Coin Tour\";\r\n    \r\n    string public  symbol = \"COT\";\r\n    \r\n    uint32 public  decimals = 8 ;\r\n    \r\n    uint public totalSupply = 2100000000000000;\r\n    \r\n    uint public etap = 1000000000000000;\r\n    \r\n    uint public forCommand = 100000000000000;\r\n    \r\n    uint public sendCount = 200000000000;\r\n    \r\n    address public commandAddress = 0xA92AdaA9B9C4F2A4219132E6B9bd07B6a1F4e01e;\r\n    \r\n    uint startEtap1 = 1511949600;\r\n    uint endEtap1 = 1512028800;\r\n    \r\n    uint startEtap2 = 1512468000;\r\n    uint endEtap2 = 1512554400;\r\n\r\n    mapping (address => uint) balances;\r\n    \r\n    mapping (address => mapping(address => uint)) allowed;\r\n    \r\n    function CoinTour() public {\r\n        balances[commandAddress] = forCommand;\r\n        balances[owner] = totalSupply-forCommand;\r\n    }\r\n    \r\n    function balanceOf(address who) public constant returns (uint balance) {\r\n        return balances[who];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n            if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n                balances[msg.sender] -= _value; \r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n    \r\n    function multisend(address[] temp) public onlyOwner returns (bool success){\r\n        if((now > startEtap1 && now < endEtap1)||(now > startEtap2 && now < endEtap2)){\r\n            for(uint i = 0; i < temp.length; i++) {\r\n                if (now>=startEtap1 && now <=endEtap1 && balances[owner]>etap || now>=startEtap2 && now <=endEtap2 && balances[owner]>0){\r\n                    balances[owner] -= sendCount;\r\n                    balances[temp[i]] += sendCount;\r\n                    Transfer(owner, temp[i],sendCount);\r\n                }\r\n            }\r\n            return true; \r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function burn() onlyOwner public {\r\n        require (now>=endEtap1 && now <=startEtap2 || now >= endEtap2);\r\n        uint _value;\r\n        if (now>=endEtap1 && now <=startEtap2) {\r\n            _value = balances[owner] - etap;\r\n            require(_value > 0);\r\n        }\r\n        else _value = balances[owner];\r\n        balances[owner] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(owner, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        if( allowed[_from][msg.sender] >= _value && balances[_from] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_from] -= _value; \r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } \r\n        return false;\r\n    }\r\n     \r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n        \r\n    event Burn(address indexed burner, uint indexed value);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"temp\",\"type\":\"address[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forCommand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commandAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CoinTour","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4dbbb878ca7d57daecef068e63694bb604eaef864a7ede2ceefa0d392371a1c9"}]}