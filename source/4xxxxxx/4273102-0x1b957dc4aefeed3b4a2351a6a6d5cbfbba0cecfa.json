{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title HoQuToken\r\n * @dev HoQu.io token contract.\r\n */\r\ncontract HoQuToken is StandardToken, Pausable {\r\n    \r\n    string public constant name = \"HOQU Token\";\r\n    string public constant symbol = \"HQX\";\r\n    uint32 public constant decimals = 18;\r\n    \r\n    /**\r\n     * @dev Give all tokens to msg.sender.\r\n     */\r\n    function HoQuToken(uint _totalSupply) {\r\n        require (_totalSupply > 0);\r\n        totalSupply = balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseCrowdSale\r\n * @title HoQu.io base crowdsale contract for managing a token crowdsale.\r\n */\r\ncontract BaseCrowdsale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // all accepted ethers go to this address\r\n    address beneficiaryAddress;\r\n\r\n    // all remain tokens after ICO should go to that address\r\n    address public bankAddress;\r\n\r\n    // token instance\r\n    HoQuToken public token;\r\n\r\n    uint256 public maxTokensAmount;\r\n    uint256 public issuedTokensAmount = 0;\r\n    uint256 public minBuyableAmount;\r\n    uint256 public tokenRate; // amount of HQX per 1 ETH\r\n    \r\n    uint256 endDate;\r\n\r\n    bool public isFinished = false;\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param buyer who paid for the tokens\r\n    * @param tokens amount of tokens purchased\r\n    * @param amount ethers paid for purchase\r\n    */\r\n    event TokenBought(address indexed buyer, uint256 tokens, uint256 amount);\r\n\r\n    modifier inProgress() {\r\n        require (!isFinished);\r\n        require (issuedTokensAmount < maxTokensAmount);\r\n        require (now <= endDate);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @param _tokenAddress address of a HQX token contract\r\n    * @param _bankAddress address for remain HQX tokens accumulation\r\n    * @param _beneficiaryAddress accepted ETH go to this address\r\n    * @param _tokenRate rate HQX per 1 ETH\r\n    * @param _minBuyableAmount min ETH per each buy action (in ETH)\r\n    * @param _maxTokensAmount ICO HQX capacity (in HQX)\r\n    * @param _endDate the date when ICO will expire\r\n    */\r\n    function BaseCrowdsale(\r\n        address _tokenAddress,\r\n        address _bankAddress,\r\n        address _beneficiaryAddress,\r\n        uint256 _tokenRate,\r\n        uint256 _minBuyableAmount,\r\n        uint256 _maxTokensAmount,\r\n        uint256 _endDate\r\n    ) {\r\n        token = HoQuToken(_tokenAddress);\r\n\r\n        bankAddress = _bankAddress;\r\n        beneficiaryAddress = _beneficiaryAddress;\r\n\r\n        tokenRate = _tokenRate;\r\n        minBuyableAmount = _minBuyableAmount.mul(1 ether);\r\n        maxTokensAmount = _maxTokensAmount.mul(1 ether);\r\n    \r\n        endDate = _endDate;\r\n    }\r\n\r\n    /*\r\n     * @dev Set new HoQu token exchange rate.\r\n     */\r\n    function setTokenRate(uint256 _tokenRate) onlyOwner inProgress {\r\n        require (_tokenRate > 0);\r\n        tokenRate = _tokenRate;\r\n    }\r\n\r\n    /*\r\n     * @dev Set new minimum buyable amount in ethers.\r\n     */\r\n    function setMinBuyableAmount(uint256 _minBuyableAmount) onlyOwner inProgress {\r\n        require (_minBuyableAmount > 0);\r\n        minBuyableAmount = _minBuyableAmount.mul(1 ether);\r\n    }\r\n\r\n    /**\r\n     * Buy HQX. Check minBuyableAmount and tokenRate.\r\n     * @dev Performs actual token sale process. Sends all ethers to beneficiary.\r\n     */\r\n    function buyTokens() payable inProgress whenNotPaused {\r\n        require (msg.value >= minBuyableAmount);\r\n    \r\n        uint256 payAmount = msg.value;\r\n        uint256 returnAmount = 0;\r\n\r\n        // calculate token amount to be transfered to investor\r\n        uint256 tokens = tokenRate.mul(payAmount);\r\n    \r\n        if (issuedTokensAmount + tokens > maxTokensAmount) {\r\n            tokens = maxTokensAmount.sub(issuedTokensAmount);\r\n            payAmount = tokens.div(tokenRate);\r\n            returnAmount = msg.value.sub(payAmount);\r\n        }\r\n    \r\n        issuedTokensAmount = issuedTokensAmount.add(tokens);\r\n        require (issuedTokensAmount <= maxTokensAmount);\r\n\r\n        // send token to investor\r\n        token.transfer(msg.sender, tokens);\r\n        // notify listeners on token purchase\r\n        TokenBought(msg.sender, tokens, payAmount);\r\n\r\n        // send ethers to special address\r\n        beneficiaryAddress.transfer(payAmount);\r\n    \r\n        if (returnAmount > 0) {\r\n            msg.sender.transfer(returnAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger emergency token pause.\r\n     */\r\n    function pauseToken() onlyOwner returns (bool) {\r\n        require(!token.paused());\r\n        token.pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Unpause token.\r\n     */\r\n    function unpauseToken() onlyOwner returns (bool) {\r\n        require(token.paused());\r\n        token.unpause();\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Finish ICO.\r\n     */\r\n    function finish() onlyOwner {\r\n        require (issuedTokensAmount >= maxTokensAmount || now > endDate);\r\n        require (!isFinished);\r\n        isFinished = true;\r\n        token.transfer(bankAddress, token.balanceOf(this));\r\n    }\r\n    \r\n    /**\r\n     * Buy HQX. Check minBuyableAmount and tokenRate.\r\n     */\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n}\r\n\r\n/**\r\n * @title PrivatePlacement\r\n * @dev HoQu.io Private Token Placement contract\r\n */\r\ncontract PrivatePlacement is BaseCrowdsale {\r\n\r\n    // internal addresses for HoQu tokens allocation\r\n    address public foundersAddress;\r\n    address public supportAddress;\r\n    address public bountyAddress;\r\n\r\n    // initial amount distribution values\r\n    uint256 public constant totalSupply = 888888000 ether;\r\n    uint256 public constant initialFoundersAmount = 266666400 ether;\r\n    uint256 public constant initialSupportAmount = 8888880 ether;\r\n    uint256 public constant initialBountyAmount = 35555520 ether;\r\n\r\n    // whether initial token allocations was performed or not\r\n    bool allocatedInternalWallets = false;\r\n    \r\n    /**\r\n    * @param _bankAddress address for remain HQX tokens accumulation\r\n    * @param _foundersAddress founders address\r\n    * @param _supportAddress support address\r\n    * @param _bountyAddress bounty address\r\n    * @param _beneficiaryAddress accepted ETH go to this address\r\n    */\r\n    function PrivatePlacement(\r\n        address _bankAddress,\r\n        address _foundersAddress,\r\n        address _supportAddress,\r\n        address _bountyAddress,\r\n        address _beneficiaryAddress\r\n    ) BaseCrowdsale(\r\n        createToken(totalSupply),\r\n        _bankAddress,\r\n        _beneficiaryAddress,\r\n        10000, /* rate HQX per 1 ETH (includes 100% private placement bonus) */\r\n        100, /* min amount in ETH */\r\n        23111088, /* cap in HQX */\r\n        1507939200 /* end 10/14/2017 @ 12:00am (UTC) */\r\n    ) {\r\n        foundersAddress = _foundersAddress;\r\n        supportAddress = _supportAddress;\r\n        bountyAddress = _bountyAddress;\r\n    }\r\n\r\n    /*\r\n     * @dev Perform initial token allocation between founders' addresses.\r\n     * Is only executed once after presale contract deployment and is invoked manually.\r\n     */\r\n    function allocateInternalWallets() onlyOwner {\r\n        require (!allocatedInternalWallets);\r\n\r\n        allocatedInternalWallets = true;\r\n\r\n        token.transfer(foundersAddress, initialFoundersAmount);\r\n        token.transfer(supportAddress, initialSupportAmount);\r\n        token.transfer(bountyAddress, initialBountyAmount);\r\n    }\r\n    \r\n    /*\r\n     * @dev HoQu Token factory.\r\n     */\r\n    function createToken(uint256 _totalSupply) internal returns (HoQuToken) {\r\n        return new HoQuToken(_totalSupply);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HoQuToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000002df455b08e99ea2b3000000","Library":"","SwarmSource":"bzzr://5130ba95eba43d508b1ddb6513bdbba69b36e484828b15614c649400ebd99138"}]}