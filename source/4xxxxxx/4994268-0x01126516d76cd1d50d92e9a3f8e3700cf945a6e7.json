{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    xgr_deposits.sol\r\n    2.0.3\r\n    \r\n    Rajci 'iFA' Andor @ ifa@fusionwallet.io\r\n*/\r\npragma solidity 0.4.18;\r\n\r\ncontract Owned {\r\n    /* Variables */\r\n    address public owner = msg.sender;\r\n    /* Externals */\r\n    function replaceOwner(address newOwner) external returns(bool success) {\r\n        require( isOwner() );\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n    /* Internals */\r\n    function isOwner() internal view returns(bool) {\r\n        return owner == msg.sender;\r\n    }\r\n    /* Modifiers */\r\n    modifier onlyForOwner {\r\n        require( isOwner() );\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SafeMath {\r\n    /* Internals */\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a + b > a );\r\n        }\r\n        return a + b;\r\n    }\r\n    function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if ( b > 0 ) {\r\n            assert( a - b < a );\r\n        }\r\n        return a - b;\r\n    }\r\n    function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract TokenDB is SafeMath, Owned {\r\n    /*\r\n        This is just an abstract contract with the necessary functions\r\n    */\r\n    /* Structures */\r\n    /* Variables */\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public lockedBalances;\r\n    address public tokenAddress;\r\n    address public depositsAddress;\r\n    /* Constructor */\r\n    /* Externals */\r\n    function openDeposit(address addr, uint256 amount, uint256 end, uint256 interestOnEnd,\r\n        uint256 interestBeforeEnd, uint256 interestFee, uint256 multiplier, bool closeable) external returns(bool success, uint256 DID) {}\r\n    function closeDeposit(uint256 DID) external returns (bool success) {}\r\n    /* Constants */\r\n    function getDeposit(uint256 UID) public constant returns(address addr, uint256 amount, uint256 start,\r\n        uint256 end, uint256 interestOnEnd, uint256 interestBeforeEnd, uint256 interestFee, uint256 interestMultiplier, bool closeable, bool valid) {}\r\n}\r\n\r\ncontract Token {\r\n    /*\r\n        This is just an abstract contract with the necessary functions\r\n    */\r\n    function mint(address owner, uint256 value) external returns (bool success) {}\r\n}\r\n\r\ncontract Deposits is Owned, SafeMath {\r\n    /* Structures */\r\n    struct depositTypes_s {\r\n        uint256 blockDelay;\r\n        uint256 baseFunds;\r\n        uint256 interestRateOnEnd;\r\n        uint256 interestRateBeforeEnd;\r\n        uint256 interestFee;\r\n        bool closeable;\r\n        bool valid;\r\n    }\r\n    struct deposits_s {\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 interestOnEnd;\r\n        uint256 interestBeforeEnd;\r\n        uint256 interestFee;\r\n        uint256 interestMultiplier;\r\n        bool    closeable;\r\n        bool    valid;\r\n    }\r\n    /* Variables */\r\n    mapping(uint256 => depositTypes_s) public depositTypes;\r\n    uint256 public depositTypesCounter;\r\n    address public tokenAddress;\r\n    address public databaseAddress;\r\n    address public founderAddress;\r\n    uint256 public interestMultiplier = 1e3;\r\n    /* Constructor */\r\n    function Deposits(address TokenAddress, address DatabaseAddress, address FounderAddress) {\r\n        tokenAddress = TokenAddress;\r\n        databaseAddress = DatabaseAddress;\r\n        founderAddress = FounderAddress;\r\n    }\r\n    /* Externals */\r\n    function changeDataBaseAddress(address newDatabaseAddress) external onlyForOwner {\r\n        databaseAddress = newDatabaseAddress;\r\n    }\r\n    function changeTokenAddress(address newTokenAddress) external onlyForOwner {\r\n        tokenAddress = newTokenAddress;\r\n    }\r\n    function changeFounderAddresss(address newFounderAddress) external onlyForOwner {\r\n        founderAddress = newFounderAddress;\r\n    }\r\n    function addDepositType(uint256 blockDelay, uint256 baseFunds, uint256 interestRateOnEnd,\r\n        uint256 interestRateBeforeEnd, uint256 interestFee, bool closeable) external onlyForOwner {\r\n        depositTypesCounter += 1;\r\n        uint256 DTID = depositTypesCounter;\r\n        depositTypes[DTID] = depositTypes_s(\r\n            blockDelay,\r\n            baseFunds,\r\n            interestRateOnEnd,\r\n            interestRateBeforeEnd,\r\n            interestFee,\r\n            closeable,\r\n            true\r\n        );\r\n        EventNewDepositType(\r\n            DTID,\r\n            blockDelay,\r\n            baseFunds,\r\n            interestRateOnEnd,\r\n            interestRateBeforeEnd,\r\n            interestFee,\r\n            interestMultiplier,\r\n            closeable\r\n        );\r\n    }\r\n    function rekoveDepositType(uint256 DTID) external onlyForOwner {\r\n        delete depositTypes[DTID].valid;\r\n        EventRevokeDepositType(DTID);\r\n    }\r\n    function placeDeposit(uint256 amount, uint256 depositType) external checkSelf {\r\n        require( depositTypes[depositType].valid );\r\n        require( depositTypes[depositType].baseFunds <= amount );\r\n        uint256 balance = TokenDB(databaseAddress).balanceOf(msg.sender);\r\n        uint256 locked = TokenDB(databaseAddress).lockedBalances(msg.sender);\r\n        require( safeSub(balance, locked) >= amount );\r\n        var (success, DID) = TokenDB(databaseAddress).openDeposit(\r\n            msg.sender,\r\n            amount,\r\n            safeAdd(block.number, depositTypes[depositType].blockDelay),\r\n            depositTypes[depositType].interestRateOnEnd,\r\n            depositTypes[depositType].interestRateBeforeEnd,\r\n            depositTypes[depositType].interestFee,\r\n            interestMultiplier,\r\n            depositTypes[depositType].closeable\r\n        );\r\n        require( success );\r\n        EventNewDeposit(DID, msg.sender);\r\n    }\r\n    function closeDeposit(address beneficary, uint256 DID) external checkSelf {\r\n        address _beneficary = beneficary;\r\n        if ( _beneficary == 0x00 ) {\r\n            _beneficary = msg.sender;\r\n        }\r\n        var (addr, amount, start, end, interestOnEnd, interestBeforeEnd, interestFee,\r\n            interestM, closeable, valid) = TokenDB(databaseAddress).getDeposit(DID);\r\n        _closeDeposit(_beneficary, DID, deposits_s(addr, amount, start, end, interestOnEnd, interestBeforeEnd, interestFee, interestM, closeable, valid));\r\n    }\r\n    /* Internals */\r\n    function _closeDeposit(address beneficary, uint256 DID, deposits_s data) internal {\r\n        require( data.valid && data.addr == msg.sender );\r\n        var (interest, interestFee) = _calculateInterest(data);\r\n        if ( interest > 0 ) {\r\n            require( Token(tokenAddress).mint(beneficary, interest) );\r\n        }\r\n        if ( interestFee > 0 ) {\r\n            require( Token(tokenAddress).mint(founderAddress, interestFee) );\r\n        }\r\n        require( TokenDB(databaseAddress).closeDeposit(DID) );\r\n        EventDepositClosed(DID, msg.sender, beneficary, interest, interestFee);\r\n    }\r\n    function _calculateInterest(deposits_s data) internal view returns (uint256 interest, uint256 interestFee) {\r\n        if ( ! data.valid || data.amount <= 0 || data.end <= data.start || block.number <= data.start ) { return (0, 0); }\r\n        uint256 rate;\r\n        uint256 delay;\r\n        if ( data.end <= block.number ) {\r\n            rate = data.interestOnEnd;\r\n            delay = safeSub(data.end, data.start);\r\n        } else {\r\n            require( data.closeable );\r\n            rate = data.interestBeforeEnd;\r\n            delay = safeSub(block.number, data.start);\r\n        }\r\n        if ( rate == 0 ) { return (0, 0); }\r\n        interest = safeDiv(safeMul(safeDiv(safeDiv(safeMul(data.amount, rate), 100), data.interestMultiplier), delay), safeSub(data.end, data.start));\r\n        if ( data.interestFee > 0 && interest > 0) {\r\n            interestFee = safeDiv(safeDiv(safeMul(interest, data.interestFee), 100), data.interestMultiplier);\r\n        }\r\n        if ( interestFee > 0 ) {\r\n            interest = safeSub(interest, interestFee);\r\n        }\r\n    }\r\n    /* Constants */\r\n    function calculateInterest(uint256 DID) public view returns(uint256, uint256) {\r\n        var (addr, amount, start, end, interestOnEnd, interestBeforeEnd, interestFee,\r\n            interestM, closeable, valid) = TokenDB(databaseAddress).getDeposit(DID);\r\n        return _calculateInterest(deposits_s(addr, amount, start, end, interestOnEnd, interestBeforeEnd, interestFee, interestM, closeable, valid));\r\n    }\r\n    /* Modifiers */\r\n    modifier checkSelf {\r\n        require( TokenDB(databaseAddress).tokenAddress() == tokenAddress );\r\n        require( TokenDB(databaseAddress).depositsAddress() == address(this) );\r\n        _;\r\n    }\r\n    /* Events */\r\n    event EventNewDepositType(uint256 indexed DTID, uint256 blockDelay, uint256 baseFunds,\r\n        uint256 interestRateOnEnd, uint256 interestRateBeforeEnd, uint256 interestFee, uint256 interestMultiplier, bool closeable);\r\n    event EventRevokeDepositType(uint256 indexed DTID);\r\n    event EventNewDeposit(uint256 indexed DID, address owner);\r\n    event EventDepositClosed(uint256 indexed DID, address owner, address beneficary, uint256 interest, uint256 interestFee);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"interestMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounderAddress\",\"type\":\"address\"}],\"name\":\"changeFounderAddresss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"depositType\",\"type\":\"uint256\"}],\"name\":\"placeDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockDelay\",\"type\":\"uint256\"},{\"name\":\"baseFunds\",\"type\":\"uint256\"},{\"name\":\"interestRateOnEnd\",\"type\":\"uint256\"},{\"name\":\"interestRateBeforeEnd\",\"type\":\"uint256\"},{\"name\":\"interestFee\",\"type\":\"uint256\"},{\"name\":\"closeable\",\"type\":\"bool\"}],\"name\":\"addDepositType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"DTID\",\"type\":\"uint256\"}],\"name\":\"rekoveDepositType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositTypes\",\"outputs\":[{\"name\":\"blockDelay\",\"type\":\"uint256\"},{\"name\":\"baseFunds\",\"type\":\"uint256\"},{\"name\":\"interestRateOnEnd\",\"type\":\"uint256\"},{\"name\":\"interestRateBeforeEnd\",\"type\":\"uint256\"},{\"name\":\"interestFee\",\"type\":\"uint256\"},{\"name\":\"closeable\",\"type\":\"bool\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositTypesCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DID\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDatabaseAddress\",\"type\":\"address\"}],\"name\":\"changeDataBaseAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficary\",\"type\":\"address\"},{\"name\":\"DID\",\"type\":\"uint256\"}],\"name\":\"closeDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"databaseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"},{\"name\":\"DatabaseAddress\",\"type\":\"address\"},{\"name\":\"FounderAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DTID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseFunds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interestRateOnEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interestRateBeforeEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interestFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interestMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"closeable\",\"type\":\"bool\"}],\"name\":\"EventNewDepositType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DTID\",\"type\":\"uint256\"}],\"name\":\"EventRevokeDepositType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EventNewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"DID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interestFee\",\"type\":\"uint256\"}],\"name\":\"EventDepositClosed\",\"type\":\"event\"}]","ContractName":"Deposits","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cf28bf20b662f746a4b487fa81de5a40ac0af49c00000000000000000000000005bee33962905f710268056d2f2d6373a2369dc9000000000000000000000000078518bb821b484f362188c3ea3ebaf804eba9f9","Library":"","SwarmSource":"bzzr://cfe8ddd2182e0aef5b9f6b0a8694cbca9f5b75455fe8d91c5cb2801ea3cc17c9"}]}