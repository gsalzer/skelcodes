{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\ncontract Random {\r\n  uint64 _seed = 0;\r\n\r\n  // return a pseudo random number between lower and upper bounds\r\n  // given the number of previous blocks it should hash.\r\n  function random(uint64 upper) public returns (uint64 randomNumber) {\r\n    _seed = uint64(sha3(sha3(block.blockhash(block.number), _seed), now));\r\n    return _seed % upper;\r\n  }\r\n}\r\n\r\n//This contract is written as a fix for the SatanCoin contract's raffle functionality\r\n//The winning index of every round will be randomly generated here. Remaining SATAN coins will then be manually issued based on the results.\r\n//The SatanCoin contract itself is located here: https://etherscan.io/address/0xCCcA48874780f9c42b162c9617bC6324c5142C22\r\n\r\ncontract SatanCoinRaffle {\r\n    \r\n   // address public constant satanCoinAddress = 0xCCcA48874780f9c42b162c9617bC6324c5142C22;\r\n  address public constant randomAddress = 0x0230CfC895646d34538aE5b684d76Bf40a8B8B89;\r\n  \r\n    address public owner;\r\n    \r\n    Random public rand;\r\n    \r\n    struct RoundResults {\r\n        uint roundNum;\r\n        uint raffleAmount;\r\n        bool raffleComplete;\r\n        uint winnerIndex;\r\n        address winner;\r\n    }\r\n    \r\n    RoundResults[9] public roundResults;\r\n    \r\n    event RandomNumGenerated(uint64 _randomNum);\r\n    event RoundSet(uint64 _coinNumBought, address );\r\n    event RaffleIssued(uint _roundNumber, uint _amountWon, uint _winnerIndex);\r\n    event WinnerSet(uint _roundNumber, uint _winnerIndex, address winner);\r\n    \r\n    modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    \r\n    function SatanCoinRaffle () {\r\n        \r\n      owner = msg.sender;\r\n\r\n      rand = Random(randomAddress);\r\n      \r\n    }\r\n   \r\n   function random (uint64 upper) \r\n        private\r\n        returns (uint64)\r\n    {\r\n    //uses random contract: https://etherscan.io/address/0x0230CfC895646d34538aE5b684d76Bf40a8B8B89\r\n    // https://www.npmjs.com/package/eth-random\r\n      uint64 randomNum = rand.random(upper);\r\n      \r\n      RandomNumGenerated(randomNum);\r\n      \r\n      return randomNum;\r\n   }\r\n   \r\n   function setRound(uint roundNum, uint raffleAmount)\r\n        public\r\n        onlyOwner\r\n   {\r\n       require(roundNum < 9 && roundNum > 0);\r\n       require(raffleAmount < 74 && raffleAmount > 0);\r\n       require(!roundResults[roundNum-1].raffleComplete);\r\n       \r\n       roundResults[roundNum-1] = RoundResults(roundNum, raffleAmount, false, 0, address(0));\r\n       \r\n       assert(raffle(roundNum));\r\n     \r\n   }\r\n   \r\n   function setWinner(uint roundNum, address winner)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n   {\r\n       require(roundNum < 9 && roundNum > 0);\r\n       //the raffle must have already been run\r\n       require(roundResults[roundNum-1].raffleComplete);\r\n       //can only set winner once\r\n       require(roundResults[roundNum-1].winner == address(0));\r\n       \r\n       /* winner address is set manually based on the winningIndex using the transaction history of the SatanCoin contract. \r\n       results may be compared with the contract itself here: https://etherscan.io/address/0xCCcA48874780f9c42b162c9617bC6324c5142C22 */\r\n       roundResults[roundNum-1].winner = winner;\r\n       WinnerSet(roundNum, roundResults[roundNum-1].winnerIndex, roundResults[roundNum-1].winner);\r\n       \r\n       return true;\r\n   }\r\n   \r\n   function raffle (uint roundNum)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(roundNum < 9 && roundNum > 0);\r\n        //can only run a raffle once\r\n        require(!roundResults[roundNum-1].raffleComplete);\r\n\r\n       //the winning index is generated by random number\r\n       roundResults[roundNum-1].winnerIndex = random(uint64(74-roundResults[roundNum-1].raffleAmount));\r\n       roundResults[roundNum-1].raffleComplete = true;\r\n       \r\n       RaffleIssued(roundNum, roundResults[roundNum-1].raffleAmount, roundResults[roundNum-1].winnerIndex);\r\n       return true;\r\n    }\r\n   \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rand\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundNum\",\"type\":\"uint256\"},{\"name\":\"raffleAmount\",\"type\":\"uint256\"}],\"name\":\"setRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundNum\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"setWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundResults\",\"outputs\":[{\"name\":\"roundNum\",\"type\":\"uint256\"},{\"name\":\"raffleAmount\",\"type\":\"uint256\"},{\"name\":\"raffleComplete\",\"type\":\"bool\"},{\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_randomNum\",\"type\":\"uint64\"}],\"name\":\"RandomNumGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_coinNumBought\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoundSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winnerIndex\",\"type\":\"uint256\"}],\"name\":\"RaffleIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_roundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerSet\",\"type\":\"event\"}]","ContractName":"SatanCoinRaffle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f4f43eac61a6328d6ea00cbb65113488fdf50be129880c66810d300c19e6c2bc"}]}