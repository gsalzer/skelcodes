{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n}\r\n\r\n\r\ncontract WhiteList {\r\n   function checkMemberLevel (address addr) view public returns (uint) {}\r\n}\r\n\r\n\r\ncontract PresalePool {\r\n\r\n  // SafeMath is a library to ensure that math operations do not have overflow errors\r\n  // https://zeppelin-solidity.readthedocs.io/en/latest/safemath.html\r\n  using SafeMath for uint;\r\n  \r\n  // The contract has 3 stages:\r\n  // 1 - The initial state. The owner is able to add addresses to the whitelist, and any whitelisted addresses can deposit or withdraw eth to the contract.\r\n  // 2 - The owner has closed the contract for further deposits. Whitelisted addresses can still withdraw eth from the contract.\r\n  // 3 - The eth is sent from the contract to the receiver. Unused eth can be claimed by contributors immediately. Once tokens are sent to the contract,\r\n  //     the owner enables withdrawals and contributors can withdraw their tokens.\r\n  uint8 public contractStage = 1;\r\n  \r\n  // These variables are set at the time of contract creation\r\n  // the address that creates the contract\r\n  address public owner;\r\n  // the minimum eth amount (in wei) that can be sent by a whitelisted address\r\n  uint public contributionMin;\r\n  // the maximum eth amount (in wei) that can be sent by a whitelisted address\r\n  uint[] public contributionCaps;\r\n  // the % of tokens kept by the contract owner\r\n  uint public feePct;\r\n  // the address that the pool will be paid out to\r\n  address public receiverAddress;\r\n  \r\n  uint constant public maxGasPrice = 50000000000;\r\n  WhiteList public whitelistContract;\r\n  \r\n  // These variables are all initially set to 0 and will be set at some point during the contract\r\n  // the amount of eth (in wei) present in the contract when it was submitted\r\n  uint public finalBalance;\r\n  // the % of contributed eth to be refunded to whitelisted addresses (set in stage 3)\r\n  uint[] public ethRefundAmount;\r\n  // the default token contract to be used for withdrawing tokens in stage 3\r\n  address public activeToken;\r\n  \r\n  // a data structure for holding the contribution amount, cap, eth refund status, and token withdrawal status for each whitelisted address\r\n  struct Contributor {\r\n    bool authorized;\r\n    uint ethRefund;\r\n    uint balance;\r\n    uint cap;\r\n    mapping (address => uint) tokensClaimed;\r\n  }\r\n  // a mapping that holds the contributor struct for each whitelisted address\r\n  mapping (address => Contributor) whitelist;\r\n  \r\n  // a data structure for holding information related to token withdrawals.\r\n  struct TokenAllocation {\r\n    ERC20 token;\r\n    uint[] pct;\r\n    uint balanceRemaining;\r\n  }\r\n  // a mapping that holds the token allocation struct for each token address\r\n  mapping (address => TokenAllocation) distribution;\r\n  \r\n  \r\n  // this modifier is used for functions that can only be accessed by the contract creator\r\n  modifier onlyOwner () {\r\n    require (msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  // this modifier is used to prevent re-entrancy exploits during contract > contract interaction\r\n  bool locked;\r\n  modifier noReentrancy() {\r\n    require(!locked);\r\n    locked = true;\r\n    _;\r\n    locked = false;\r\n  }\r\n  \r\n  event ContributorBalanceChanged (address contributor, uint totalBalance);\r\n  event TokensWithdrawn (address receiver, uint amount);\r\n  event EthRefunded (address receiver, uint amount);\r\n  event WithdrawalsOpen (address tokenAddr);\r\n  event ERC223Received (address token, uint value);\r\n  event EthRefundReceived (address sender, uint amount);\r\n   \r\n  // These are internal functions used for calculating fees, eth and token allocations as %\r\n  // returns a value as a % accurate to 20 decimal points\r\n  function _toPct (uint numerator, uint denominator ) internal pure returns (uint) {\r\n    return numerator.mul(10 ** 20) / denominator;\r\n  }\r\n  \r\n  // returns % of any number, where % given was generated with toPct\r\n  function _applyPct (uint numerator, uint pct) internal pure returns (uint) {\r\n    return numerator.mul(pct) / (10 ** 20);\r\n  }\r\n  \r\n  // This function is called at the time of contract creation,\r\n  // it sets the initial variables and whitelists the contract owner.\r\n  function PresalePool(address receiverAddr, address whitelistAddr, uint individualMin, uint[] capAmounts, uint fee) public {\r\n    require (receiverAddr != 0x00);\r\n    require (fee < 100);\r\n    require (100000000000000000 <= individualMin);\r\n    require (capAmounts.length>1 && capAmounts.length<256);\r\n    for (uint8 i=1; i<capAmounts.length; i++) {\r\n      require (capAmounts[i] <= capAmounts[0]);\r\n    }\r\n    owner = msg.sender;\r\n    receiverAddress = receiverAddr;\r\n    contributionMin = individualMin;\r\n    contributionCaps = capAmounts;\r\n    feePct = _toPct(fee,100);\r\n    whitelistContract = WhiteList(whitelistAddr);\r\n    whitelist[msg.sender].authorized = true;\r\n  }\r\n  \r\n  // This function is called whenever eth is sent into the contract.\r\n  // The send will fail unless the contract is in stage one and the sender has been whitelisted.\r\n  // The amount sent is added to the balance in the Contributor struct associated with the sending address.\r\n  function () payable public {\r\n    if (contractStage == 1) {\r\n      _ethDeposit();\r\n    } else if (contractStage == 3) {\r\n      _ethRefund();\r\n    } else revert();\r\n  }\r\n  \r\n  function _ethDeposit () internal {\r\n    assert (contractStage == 1);\r\n    require (tx.gasprice <= maxGasPrice);\r\n    require (this.balance <= contributionCaps[0]);\r\n    var c = whitelist[msg.sender];\r\n    uint newBalance = c.balance.add(msg.value);\r\n    require (newBalance >= contributionMin);\r\n    require (newBalance <= _checkCap(msg.sender));\r\n    c.balance = newBalance;\r\n    ContributorBalanceChanged(msg.sender, newBalance);\r\n  }\r\n  \r\n  \r\n  function _ethRefund () internal {\r\n    assert (contractStage == 3);\r\n    require (msg.sender == owner || msg.sender == receiverAddress);\r\n    require (msg.value >= contributionMin);\r\n    ethRefundAmount.push(msg.value);\r\n    EthRefundReceived(msg.sender, msg.value);\r\n  }\r\n  \r\n    \r\n  // This function is called to withdraw eth or tokens from the contract.\r\n  // It can only be called by addresses that are whitelisted and show a balance greater than 0.\r\n  // If called during contract stages one or two, the full eth balance deposited into the contract will be returned and the contributor's balance will be reset to 0.\r\n  // If called during stage three, the contributor's unused eth will be returned, as well as any available tokens.\r\n  // The token address may be provided optionally to withdraw tokens that are not currently the default token (airdrops).\r\n  function withdraw (address tokenAddr) public {\r\n    var c = whitelist[msg.sender];\r\n    require (c.balance > 0);\r\n    if (contractStage < 3) {\r\n      uint amountToTransfer = c.balance;\r\n      c.balance = 0;\r\n      msg.sender.transfer(amountToTransfer);\r\n      ContributorBalanceChanged(msg.sender, 0);\r\n    } else {\r\n      _withdraw(msg.sender,tokenAddr);\r\n    }  \r\n  }\r\n  \r\n  // This function allows the contract owner to force a withdrawal to any contributor.\r\n  // It is useful if a new round of tokens can be distributed but some contributors have\r\n  // not yet withdrawn their previous allocation.\r\n  function withdrawFor (address contributor, address tokenAddr) public onlyOwner {\r\n    require (contractStage == 3);\r\n    require (whitelist[contributor].balance > 0);\r\n    _withdraw(contributor,tokenAddr);\r\n  }\r\n  \r\n  // This internal function handles withdrawals during stage three.\r\n  // The associated events will fire to notify when a refund or token allocation is claimed.\r\n  function _withdraw (address receiver, address tokenAddr) internal {\r\n    assert (contractStage == 3);\r\n    var c = whitelist[receiver];\r\n    if (tokenAddr == 0x00) {\r\n      tokenAddr = activeToken;\r\n    }\r\n    var d = distribution[tokenAddr];\r\n    require ( (ethRefundAmount.length > c.ethRefund) || d.pct.length > c.tokensClaimed[tokenAddr] );\r\n    if (ethRefundAmount.length > c.ethRefund) {\r\n      uint pct = _toPct(c.balance,finalBalance);\r\n      uint ethAmount = 0;\r\n      for (uint i=c.ethRefund; i<ethRefundAmount.length; i++) {\r\n        ethAmount = ethAmount.add(_applyPct(ethRefundAmount[i],pct));\r\n      }\r\n      c.ethRefund = ethRefundAmount.length;\r\n      if (ethAmount > 0) {\r\n        receiver.transfer(ethAmount);\r\n        EthRefunded(receiver,ethAmount);\r\n      }\r\n    }\r\n    if (d.pct.length > c.tokensClaimed[tokenAddr]) {\r\n      uint tokenAmount = 0;\r\n      for (i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\r\n        tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\r\n      }\r\n      c.tokensClaimed[tokenAddr] = d.pct.length;\r\n      if (tokenAmount > 0) {\r\n        require(d.token.transfer(receiver,tokenAmount));\r\n        d.balanceRemaining = d.balanceRemaining.sub(tokenAmount);\r\n        TokensWithdrawn(receiver,tokenAmount);\r\n      }  \r\n    }\r\n    \r\n  }\r\n  \r\n  // This function can only be executed by the owner, it adds an address to the whitelist.\r\n  // To execute, the contract must be in stage 1, the address cannot already be whitelisted, and the address cannot be a contract itself.\r\n  // Blocking contracts from being whitelisted prevents attacks from unexpected contract to contract interaction - very important!\r\n  function authorize (address addr, uint cap) public onlyOwner {\r\n    require (contractStage == 1);\r\n    _checkWhitelistContract(addr);\r\n    require (!whitelist[addr].authorized);\r\n    require ((cap > 0 && cap < contributionCaps.length) || (cap >= contributionMin && cap <= contributionCaps[0]) );\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    require (size == 0);\r\n    whitelist[addr].cap = cap;\r\n    whitelist[addr].authorized = true;\r\n  }\r\n  \r\n  // This function is used by the owner to authorize many addresses in a single call.\r\n  // Each address will be given the same cap, and the cap must be one of the standard levels.\r\n  function authorizeMany (address[] addr, uint cap) public onlyOwner {\r\n    require (addr.length < 255);\r\n    require (cap > 0 && cap < contributionCaps.length);\r\n    for (uint8 i=0; i<addr.length; i++) {\r\n      authorize(addr[i], cap);\r\n    }\r\n  }\r\n  \r\n  // This function is called by the owner to remove an address from the whitelist.\r\n  // It may only be executed during stages 1 and 2.  Any eth sent by the address is refunded and their personal cap is set to 0.\r\n  function revoke (address addr) public onlyOwner {\r\n    require (contractStage < 3);\r\n    require (whitelist[addr].authorized);\r\n    require (whitelistContract.checkMemberLevel(addr) == 0);\r\n    whitelist[addr].authorized = false;\r\n    if (whitelist[addr].balance > 0) {\r\n      uint amountToTransfer = whitelist[addr].balance;\r\n      whitelist[addr].balance = 0;\r\n      addr.transfer(amountToTransfer);\r\n      ContributorBalanceChanged(addr, 0);\r\n    }\r\n  }\r\n  \r\n  // This function is called by the owner to modify the contribution cap of a whitelisted address.\r\n  // If the current contribution balance exceeds the new cap, the excess balance is refunded.\r\n  function modifyIndividualCap (address addr, uint cap) public onlyOwner {\r\n    require (contractStage < 3);\r\n    require (cap < contributionCaps.length || (cap >= contributionMin && cap <= contributionCaps[0]) );\r\n    _checkWhitelistContract(addr);\r\n    var c = whitelist[addr];\r\n    require (c.authorized);\r\n    uint amount = c.balance;\r\n    c.cap = cap;\r\n    uint capAmount = _checkCap(addr);\r\n    if (amount > capAmount) {\r\n      c.balance = capAmount;\r\n      addr.transfer(amount.sub(capAmount));\r\n      ContributorBalanceChanged(addr, capAmount);\r\n    }\r\n  }\r\n  \r\n  // This function is called by the owner to modify the cap for a contribution level.\r\n  // The cap can only be increased, not decreased, and cannot exceed the contract limit.\r\n  function modifyLevelCap (uint level, uint cap) public onlyOwner {\r\n    require (contractStage < 3);\r\n    require (level > 0 && level < contributionCaps.length);\r\n    require (contributionCaps[level] < cap && contributionCaps[0] >= cap);\r\n    contributionCaps[level] = cap;\r\n  }\r\n  \r\n  // This function can be called during stages one or two to modify the maximum balance of the contract.\r\n  // It can only be called by the owner. The amount cannot be set to lower than the current balance of the contract.\r\n  function modifyMaxContractBalance (uint amount) public onlyOwner {\r\n    require (contractStage < 3);\r\n    require (amount >= contributionMin);\r\n    require (amount >= this.balance);\r\n    contributionCaps[0] = amount;\r\n    for (uint8 i=1; i<contributionCaps.length; i++) {\r\n      if (contributionCaps[i]>amount) contributionCaps[i]=amount;\r\n    }\r\n  }\r\n  \r\n  // This internal function returns the cap amount of a whitelisted address.\r\n  // If the address is not whitelisted it will throw.\r\n  function _checkCap (address addr) internal returns (uint) {\r\n    _checkWhitelistContract(addr);\r\n    var c = whitelist[addr];\r\n    if (!c.authorized) return 0;\r\n    if (c.cap<contributionCaps.length) return contributionCaps[c.cap];\r\n    return c.cap; \r\n  }\r\n  \r\n  function _checkWhitelistContract (address addr) internal {\r\n    var c = whitelist[addr];\r\n    if (!c.authorized) {\r\n      var level = whitelistContract.checkMemberLevel(addr);\r\n      if (level == 0 || level >= contributionCaps.length) return;\r\n      c.cap = level;\r\n      c.authorized = true;\r\n    }\r\n  }\r\n  \r\n  // This callable function returns the total pool cap, current balance and remaining balance to be filled.\r\n  function checkPoolBalance () view public returns (uint poolCap, uint balance, uint remaining) {\r\n    if (contractStage == 1) {\r\n      remaining = contributionCaps[0].sub(this.balance);\r\n    } else {\r\n      remaining = 0;\r\n    }\r\n    return (contributionCaps[0],this.balance,remaining);\r\n  }\r\n  \r\n  // This callable function returns the balance, contribution cap, and remaining available balance of any contributor.\r\n  function checkContributorBalance (address addr) view public returns (uint balance, uint cap, uint remaining) {\r\n    var c = whitelist[addr];\r\n    if (!c.authorized) {\r\n      cap = whitelistContract.checkMemberLevel(addr);\r\n      if (cap == 0) return (0,0,0);\r\n    } else {\r\n      cap = c.cap;\r\n    }\r\n    balance = c.balance;\r\n    if (contractStage == 1) {\r\n      if (cap<contributionCaps.length) {\r\n        cap = contributionCaps[cap];\r\n      }\r\n      remaining = cap.sub(balance);\r\n      if (contributionCaps[0].sub(this.balance) < remaining) remaining = contributionCaps[0].sub(this.balance);\r\n    } else {\r\n      remaining = 0;\r\n    }\r\n    return (balance, cap, remaining);\r\n  }\r\n  \r\n  // This callable function returns the token balance that a contributor can currently claim.\r\n  function checkAvailableTokens (address addr, address tokenAddr) view public returns (uint tokenAmount) {\r\n    var c = whitelist[addr];\r\n    var d = distribution[tokenAddr];\r\n    for (uint i=c.tokensClaimed[tokenAddr]; i<d.pct.length; i++) {\r\n      tokenAmount = tokenAmount.add(_applyPct(c.balance,d.pct[i]));\r\n    }\r\n    return tokenAmount;\r\n  }\r\n  \r\n  // This function closes further contributions to the contract, advancing it to stage two.\r\n  // It can only be called by the owner.  After this call has been made, whitelisted addresses\r\n  // can still remove their eth from the contract but cannot contribute any more.\r\n  function closeContributions () public onlyOwner {\r\n    require (contractStage == 1);\r\n    contractStage = 2;\r\n  }\r\n  \r\n  // This function reopens the contract to contributions and further whitelisting, returning it to stage one.\r\n  // It can only be called by the owner during stage two.\r\n  function reopenContributions () public onlyOwner {\r\n    require (contractStage == 2);\r\n    contractStage = 1;\r\n  }\r\n  \r\n\r\n  // This function sends the pooled eth to the receiving address, calculates the % of unused eth to be returned,\r\n  // and advances the contract to stage three. It can only be called by the contract owner during stage two.\r\n  // The amount to send (given in wei) must be specified during the call. As this function can only be executed once,\r\n  // it is VERY IMPORTANT not to get the amount wrong.\r\n  function submitPool (uint amountInWei) public onlyOwner noReentrancy {\r\n    require (contractStage < 3);\r\n    require (contributionMin <= amountInWei && amountInWei <= this.balance);\r\n    finalBalance = this.balance;\r\n    require (receiverAddress.call.value(amountInWei).gas(msg.gas.sub(5000))());\r\n    ethRefundAmount.push(this.balance);\r\n    contractStage = 3;\r\n  }\r\n  \r\n  // This function opens the contract up for token withdrawals.\r\n  // It can only be called by the owner during stage 3.  The owner specifies the address of an ERC20 token\r\n  // contract that this contract has a balance in, and optionally a bool to prevent this token from being\r\n  // the default withdrawal (in the event of an airdrop, for example).\r\n  // The function can only be called if there is not currently a token distribution \r\n  function enableTokenWithdrawals (address tokenAddr, bool notDefault) public onlyOwner noReentrancy {\r\n    require (contractStage == 3);\r\n    if (notDefault) {\r\n      require (activeToken != 0x00);\r\n    } else {\r\n      activeToken = tokenAddr;\r\n    }\r\n    var d = distribution[tokenAddr];    \r\n    if (d.pct.length==0) d.token = ERC20(tokenAddr);\r\n    uint amount = d.token.balanceOf(this).sub(d.balanceRemaining);\r\n    require (amount > 0);\r\n    if (feePct > 0) {\r\n      require (d.token.transfer(owner,_applyPct(amount,feePct)));\r\n    }\r\n    amount = d.token.balanceOf(this).sub(d.balanceRemaining);\r\n    d.balanceRemaining = d.token.balanceOf(this);\r\n    d.pct.push(_toPct(amount,finalBalance));\r\n  }\r\n  \r\n  // This is a standard function required for ERC223 compatibility.\r\n  function tokenFallback (address from, uint value, bytes data) public {\r\n    ERC223Received (from, value);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"checkPoolBalance\",\"outputs\":[{\"name\":\"poolCap\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"submitPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"notDefault\",\"type\":\"bool\"}],\"name\":\"enableTokenWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethRefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributionCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAvailableTokens\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyLevelCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"modifyMaxContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"authorizeMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkContributorBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"modifyIndividualCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reopenContributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"receiverAddr\",\"type\":\"address\"},{\"name\":\"whitelistAddr\",\"type\":\"address\"},{\"name\":\"individualMin\",\"type\":\"uint256\"},{\"name\":\"capAmounts\",\"type\":\"uint256[]\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"ContributorBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"WithdrawalsOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC223Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRefundReceived\",\"type\":\"event\"}]","ContractName":"PresalePool","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000d15719e1d47bd37a39dcf30e3725777cf6392410000000000000000000000008d95b038ca80a986425fa240c3c17fb2b6e9bc63000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000249781bbb25cac00000000000000000000000000000000000000000000000000002ed6689e54f180000000000000000000000000000000000000000000000000002ed6689e54f18000","Library":"","SwarmSource":"bzzr://e7d34be55eb79bfcf44b6e41f06adb69af85e316742063bbd53e46011669b054"}]}