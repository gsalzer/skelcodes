{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-12-31\r\n*/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n// -----------------------------------------------------------------------------------------------\r\n// CryptoCatsMarket v3\r\n//\r\n// Ethereum contract for Cryptocats (cryptocats.thetwentysix.io),\r\n// a digital asset marketplace DAPP for unique 8-bit cats on the Ethereum blockchain.\r\n// \r\n// Versions:  \r\n// 3.0 - Bug fix to make ETH value sent in with getCat function withdrawable by contract owner.\r\n//       Special thanks to BokkyPooBah (https://github.com/bokkypoobah) who found this issue!\r\n// 2.0 - Remove claimCat function with getCat function that is payable and accepts incoming ETH. \r\n//       Feature added to set ETH pricing by each cat release and also for specific cats\r\n// 1.0 - Feature added to create new cat releases, add attributes and offer to sell/buy cats\r\n// 0.0 - Initial contract to support ownership of 12 unique 8-bit cats on the Ethereum blockchain\r\n// \r\n// Original contract code based off Cryptopunks DAPP by the talented people from Larvalabs \r\n// (https://github.com/larvalabs/cryptopunks)\r\n//\r\n// (c) Nas Munawar / Gendry Morales / Jochy Reyes / TheTwentySix. 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------------------------\r\n\r\ncontract CryptoCatsMarket {\r\n    \r\n    /* modifier to add to function that should only be callable by contract owner */\r\n    modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n\r\n\r\n    /* You can use this hash to verify the image file containing all cats */\r\n    string public imageHash = \"3b82cfd5fb39faff3c2c9241ca5a24439f11bdeaa7d6c0771eb782ea7c963917\";\r\n\r\n    /* Variables to store contract owner and contract token standard details */\r\n    address owner;\r\n    string public standard = 'CryptoCats';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n    \r\n    // Store reference to previous cryptocat contract containing alpha release owners\r\n    // PROD - previous contract address\r\n    // address public previousContractAddress = 0x9508008227b6b3391959334604677d60169EF540;\r\n\r\n    // ROPSTEN - previous contract address\r\n    address public previousContractAddress = 0xccEC9B9cB223854C46843A1990c36C4A37D80E2e;\r\n\r\n    uint8 public contractVersion;\r\n    bool public totalSupplyIsLocked;\r\n\r\n    bool public allCatsAssigned = false;        // boolean flag to indicate if all available cats are claimed\r\n    uint public catsRemainingToAssign = 0;   // variable to track cats remaining to be assigned/claimed\r\n    uint public currentReleaseCeiling;       // variable to track maximum cat index for latest release\r\n\r\n    /* Create array to store cat index to owner address */\r\n    mapping (uint => address) public catIndexToAddress;\r\n    \r\n    /* Create array to store cat release id to price in wei for all cats in that release */\r\n    mapping (uint32 => uint) public catReleaseToPrice;\r\n\r\n    /* Create array to store cat index to any exception price deviating from release price */\r\n    mapping (uint => uint) public catIndexToPriceException;\r\n\r\n    /* Create an array with all balances */\r\n    mapping (address => uint) public balanceOf;\r\n    /* Store type descriptor string for each attribute number */\r\n    mapping (uint => string) public attributeType;\r\n    /* Store up to 6 cat attribute strings where attribute types are defined in attributeType */\r\n    mapping (uint => string[6]) public catAttributes;\r\n\r\n    /* Struct that is used to describe seller offer details */\r\n    struct Offer {\r\n        bool isForSale;         // flag identifying if cat is for sale\r\n        uint catIndex;\r\n        address seller;         // owner address\r\n        uint minPrice;       // price in ETH owner is willing to sell cat for\r\n        address sellOnlyTo;     // address identifying only buyer that seller is wanting to offer cat to\r\n    }\r\n\r\n    uint[] public releaseCatIndexUpperBound;\r\n\r\n    // Store sale Offer details for each cat made for sale by its owner\r\n    mapping (uint => Offer) public catsForSale;\r\n\r\n    // Store pending withdrawal amounts in ETH that a failed bidder or successful seller is able to withdraw\r\n    mapping (address => uint) public pendingWithdrawals;\r\n\r\n    /* Define event types to publish transaction details related to transfer and buy/sell activities */\r\n    event CatTransfer(address indexed from, address indexed to, uint catIndex);\r\n    event CatOffered(uint indexed catIndex, uint minPrice, address indexed toAddress);\r\n    event CatBought(uint indexed catIndex, uint price, address indexed fromAddress, address indexed toAddress);\r\n    event CatNoLongerForSale(uint indexed catIndex);\r\n\r\n    /* Define event types used to publish to EVM log when cat assignment/claim and cat transfer occurs */\r\n    event Assign(address indexed to, uint256 catIndex);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /* Define event for reporting new cats release transaction details into EVM log */\r\n    event ReleaseUpdate(uint256 indexed newCatsAdded, uint256 totalSupply, uint256 catPrice, string newImageHash);\r\n    /* Define event for logging update to cat price for existing release of cats (only impacts unclaimed cats) */\r\n    event UpdateReleasePrice(uint32 releaseId, uint256 catPrice);\r\n    /* Define event for logging transactions that change any cat attributes into EVM log*/\r\n    event UpdateAttribute(uint indexed attributeNumber, address indexed ownerAddress, bytes32 oldValue, bytes32 newValue);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function CryptoCatsMarket() payable {\r\n        owner = msg.sender;                          // Set contract creation sender as owner\r\n        _totalSupply = 625;                          // Set total supply\r\n        catsRemainingToAssign = _totalSupply;        // Initialise cats remaining to total supply amount\r\n        name = \"CRYPTOCATS\";                         // Set the name for display purposes\r\n        symbol = \"CCAT\";                             // Set the symbol for display purposes\r\n        decimals = 0;                                // Amount of decimals for display purposes\r\n        contractVersion = 3;\r\n        currentReleaseCeiling = 625;\r\n        totalSupplyIsLocked = false;\r\n\r\n        releaseCatIndexUpperBound.push(12);             // Register release 0 getting to 12 cats\r\n        releaseCatIndexUpperBound.push(189);            // Register release 1 getting to 189 cats\r\n        releaseCatIndexUpperBound.push(_totalSupply);   // Register release 2 getting to 625 cats\r\n\r\n        catReleaseToPrice[0] = 0;                       // Set price for release 0\r\n        catReleaseToPrice[1] = 0;                       // Set price for release 1\r\n        catReleaseToPrice[2] = 80000000000000000;       // Set price for release 2 to Wei equivalent of 0.08 ETH\r\n    }\r\n    \r\n    /* Admin function to make total supply permanently locked (callable by owner only) */\r\n    function lockTotalSupply()\r\n        onlyBy(owner)\r\n    {\r\n        totalSupplyIsLocked = true;\r\n    }\r\n\r\n    /* Admin function to set attribute type descriptor text (callable by owner only) */\r\n    function setAttributeType(uint attributeIndex, string descriptionText)\r\n        onlyBy(owner)\r\n    {\r\n        require(attributeIndex >= 0 && attributeIndex < 6);\r\n        attributeType[attributeIndex] = descriptionText;\r\n    }\r\n    \r\n    /* Admin function to release new cat index numbers and update image hash for new cat releases */\r\n    function releaseCats(uint32 _releaseId, uint numberOfCatsAdded, uint256 catPrice, string newImageHash) \r\n        onlyBy(owner)\r\n        returns (uint256 newTotalSupply) \r\n    {\r\n        require(!totalSupplyIsLocked);                  // Check that new cat releases still available\r\n        require(numberOfCatsAdded > 0);                 // Require release to have more than 0 cats \r\n        currentReleaseCeiling = currentReleaseCeiling + numberOfCatsAdded;  // Add new cats to release ceiling\r\n        uint _previousSupply = _totalSupply;\r\n        _totalSupply = _totalSupply + numberOfCatsAdded;\r\n        catsRemainingToAssign = catsRemainingToAssign + numberOfCatsAdded;  // Update cats remaining to assign count\r\n        imageHash = newImageHash;                                           // Update image hash\r\n\r\n        catReleaseToPrice[_releaseId] = catPrice;                           // Update price for new release of cats                    \r\n        releaseCatIndexUpperBound.push(_totalSupply);                       // Track upper bound of cat index for this release\r\n\r\n        ReleaseUpdate(numberOfCatsAdded, _totalSupply, catPrice, newImageHash); // Send EVM event containing details of release\r\n        return _totalSupply;                                                    // Return new total supply of cats\r\n    }\r\n\r\n    /* Admin function to update price for an entire release of cats still available for claiming */\r\n    function updateCatReleasePrice(uint32 _releaseId, uint256 catPrice)\r\n        onlyBy(owner)\r\n    {\r\n        require(_releaseId <= releaseCatIndexUpperBound.length);            // Check that release is id valid\r\n        catReleaseToPrice[_releaseId] = catPrice;                           // Update price for cat release\r\n        UpdateReleasePrice(_releaseId, catPrice);                           // Send EVM event with release id and price details\r\n    }\r\n   \r\n    /* Migrate details of previous contract cat owners addresses and cat balances to new contract instance */\r\n    function migrateCatOwnersFromPreviousContract(uint startIndex, uint endIndex) \r\n        onlyBy(owner)\r\n    {\r\n        PreviousCryptoCatsContract previousCatContract = PreviousCryptoCatsContract(previousContractAddress);\r\n        for (uint256 catIndex = startIndex; catIndex <= endIndex; catIndex++) {     // Loop through cat index based on start/end index\r\n            address catOwner = previousCatContract.catIndexToAddress(catIndex);     // Retrieve owner address from previous contract\r\n\r\n            if (catOwner != 0x0) {                                                  // Check that cat index has an owner address and is not unclaimed\r\n                catIndexToAddress[catIndex] = catOwner;                             // Update owner address in current contract\r\n                uint256 ownerBalance = previousCatContract.balanceOf(catOwner);     \r\n                balanceOf[catOwner] = ownerBalance;                                 // Update owner cat balance\r\n            }\r\n        }\r\n\r\n        catsRemainingToAssign = previousCatContract.catsRemainingToAssign();        // Update count of total cats remaining to assign from prev contract\r\n    }\r\n    \r\n    /* Add value for cat attribute that has been defined (only for cat owner) */\r\n    function setCatAttributeValue(uint catIndex, uint attrIndex, string attrValue) {\r\n        require(catIndex < _totalSupply);                      // cat index requested should not exceed total supply\r\n        require(catIndexToAddress[catIndex] == msg.sender);    // require sender to be cat owner\r\n        require(attrIndex >= 0 && attrIndex < 6);              // require that attribute index is 0 - 5\r\n        bytes memory tempAttributeTypeText = bytes(attributeType[attrIndex]);\r\n        require(tempAttributeTypeText.length != 0);            // require that attribute being stored is not empty\r\n        catAttributes[catIndex][attrIndex] = attrValue;        // store attribute value string in contract based on cat index\r\n    }\r\n\r\n    /* Transfer cat by owner to another wallet address\r\n       Different usage in Cryptocats than in normal token transfers \r\n       This will transfer an owner's cat to another wallet's address\r\n       Cat is identified by cat index passed in as _value */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (_value < _totalSupply &&                    // ensure cat index is valid\r\n            catIndexToAddress[_value] == msg.sender &&  // ensure sender is owner of cat\r\n            balanceOf[msg.sender] > 0) {                // ensure sender balance of cat exists\r\n            balanceOf[msg.sender]--;                    // update (reduce) cat balance  from owner\r\n            catIndexToAddress[_value] = _to;            // set new owner of cat in cat index\r\n            balanceOf[_to]++;                           // update (include) cat balance for recepient\r\n            Transfer(msg.sender, _to, _value);          // trigger event with transfer details to EVM\r\n            success = true;                             // set success as true after transfer completed\r\n        } else {\r\n            success = false;                            // set success as false if conditions not met\r\n        }\r\n        return success;                                 // return success status\r\n    }\r\n\r\n    /* Returns count of how many cats are owned by an owner */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        require(balanceOf[_owner] != 0);    // requires that cat owner balance is not 0\r\n        return balanceOf[_owner];           // return number of cats owned from array of balances by owner address\r\n    }\r\n\r\n    /* Return total supply of cats existing */\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /* Claim cat at specified index if it is unassigned - Deprecated as replaced with getCat function in v2.0 */\r\n    // function claimCat(uint catIndex) {\r\n    //     require(!allCatsAssigned);                      // require all cats have not been assigned/claimed\r\n    //     require(catsRemainingToAssign != 0);            // require cats remaining to be assigned count is not 0\r\n    //     require(catIndexToAddress[catIndex] == 0x0);    // require owner address for requested cat index is empty\r\n    //     require(catIndex < _totalSupply);               // require cat index requested does not exceed total supply\r\n    //     require(catIndex < currentReleaseCeiling);      // require cat index to not be above current ceiling of released cats\r\n    //     catIndexToAddress[catIndex] = msg.sender;       // Assign sender's address as owner of cat\r\n    //     balanceOf[msg.sender]++;                        // Increase sender's balance holder \r\n    //     catsRemainingToAssign--;                        // Decrease cats remaining count\r\n    //     Assign(msg.sender, catIndex);                   // Triggers address assignment event to EVM's\r\n    //                                                     // log to allow javascript callbacks\r\n    // }\r\n\r\n    /* Return the release index for a cat based on the cat index */\r\n    function getCatRelease(uint catIndex) returns (uint32) {\r\n        for (uint32 i = 0; i < releaseCatIndexUpperBound.length; i++) {     // loop through release index record array\r\n            if (releaseCatIndexUpperBound[i] > catIndex) {                  // check if highest cat index for release is higher than submitted cat index \r\n                return i;                                                   // return release id\r\n            }\r\n        }   \r\n    }\r\n\r\n    /* Gets cat price for a particular cat index */\r\n    function getCatPrice(uint catIndex) returns (uint catPrice) {\r\n        require(catIndex < _totalSupply);                   // Require that cat index is valid\r\n\r\n        if(catIndexToPriceException[catIndex] != 0) {       // Check if there is any exception pricing\r\n            return catIndexToPriceException[catIndex];      // Return price if there is overriding exception pricing\r\n        }\r\n\r\n        uint32 releaseId = getCatRelease(catIndex);         \r\n        return catReleaseToPrice[releaseId];                // Return cat price based on release pricing if no exception pricing\r\n    }\r\n\r\n    /* Sets exception price in Wei that differs from release price for single cat based on cat index */\r\n    function setCatPrice(uint catIndex, uint catPrice)\r\n        onlyBy(owner) \r\n    {\r\n        require(catIndex < _totalSupply);                   // Require that cat index is valid\r\n        require(catPrice > 0);                              // Check that cat price is not 0\r\n        catIndexToPriceException[catIndex] = catPrice;      // Create cat price record in exception pricing array for this cat index\r\n    }\r\n\r\n    /* Get cat with no owner at specified index by paying price */\r\n    function getCat(uint catIndex) payable {\r\n        require(!allCatsAssigned);                      // require all cats have not been assigned/claimed\r\n        require(catsRemainingToAssign != 0);            // require cats remaining to be assigned count is not 0\r\n        require(catIndexToAddress[catIndex] == 0x0);    // require owner address for requested cat index is empty\r\n        require(catIndex < _totalSupply);               // require cat index requested does not exceed total supply\r\n        require(catIndex < currentReleaseCeiling);      // require cat index to not be above current ceiling of released cats\r\n        require(getCatPrice(catIndex) <= msg.value);    // require ETH amount sent with tx is sufficient for cat price\r\n\r\n        catIndexToAddress[catIndex] = msg.sender;       // Assign sender's address as owner of cat\r\n        balanceOf[msg.sender]++;                        // Increase sender's balance holder \r\n        catsRemainingToAssign--;                        // Decrease cats remaining count\r\n        pendingWithdrawals[owner] += msg.value;         // Add paid amount to pending withdrawals for contract owner (bugfix in v3.0)\r\n        Assign(msg.sender, catIndex);                   // Triggers address assignment event to EVM's\r\n                                                        // log to allow javascript callbacks\r\n    }\r\n\r\n    /* Get address of owner based on cat index */\r\n    function getCatOwner(uint256 catIndex) public returns (address) {\r\n        require(catIndexToAddress[catIndex] != 0x0);\r\n        return catIndexToAddress[catIndex];             // Return address at array position of cat index\r\n    }\r\n\r\n    /* Get address of contract owner who performed contract creation and initialisation */\r\n    function getContractOwner() public returns (address) {\r\n        return owner;                                   // Return address of contract owner\r\n    }\r\n\r\n    /* Indicate that cat is no longer for sale (by cat owner only) */\r\n    function catNoLongerForSale(uint catIndex) {\r\n        require (catIndexToAddress[catIndex] == msg.sender);                // Require that sender is cat owner\r\n        require (catIndex < _totalSupply);                                  // Require that cat index is valid\r\n        catsForSale[catIndex] = Offer(false, catIndex, msg.sender, 0, 0x0); // Switch cat for sale flag to false and reset all other values\r\n        CatNoLongerForSale(catIndex);                                       // Create EVM event logging that cat is no longer for sale \r\n    }\r\n\r\n    /* Create sell offer for cat with a certain minimum sale price in wei (by cat owner only) */\r\n    function offerCatForSale(uint catIndex, uint minSalePriceInWei) {\r\n        require (catIndexToAddress[catIndex] == msg.sender);                // Require that sender is cat owner \r\n        require (catIndex < _totalSupply);                                  // Require that cat index is valid\r\n        catsForSale[catIndex] = Offer(true, catIndex, msg.sender, minSalePriceInWei, 0x0);  // Set cat for sale flag to true and update with price details \r\n        CatOffered(catIndex, minSalePriceInWei, 0x0);                       // Create EVM event to log details of cat sale\r\n    }\r\n\r\n    /* Create sell offer for cat only to a particular buyer address with certain minimum sale price in wei (by cat owner only) */\r\n    function offerCatForSaleToAddress(uint catIndex, uint minSalePriceInWei, address toAddress) {\r\n        require (catIndexToAddress[catIndex] == msg.sender);                // Require that sender is cat owner \r\n        require (catIndex < _totalSupply);                                  // Require that cat index is valid\r\n        catsForSale[catIndex] = Offer(true, catIndex, msg.sender, minSalePriceInWei, toAddress); // Set cat for sale flag to true and update with price details and only sell to address\r\n        CatOffered(catIndex, minSalePriceInWei, toAddress);                 // Create EVM event to log details of cat sale\r\n    }\r\n\r\n    /* Buy cat that is currently on offer  */\r\n    function buyCat(uint catIndex) payable {\r\n        require (catIndex < _totalSupply);                      // require that cat index is valid and less than total cat index                \r\n        Offer offer = catsForSale[catIndex];\r\n        require (offer.isForSale);                              // require that cat is marked for sale  // require buyer to have required address if indicated in offer \r\n        require (msg.value >= offer.minPrice);                  // require buyer sent enough ETH\r\n        require (offer.seller == catIndexToAddress[catIndex]);  // require seller must still be owner of cat\r\n        if (offer.sellOnlyTo != 0x0) {                          // if cat offer sell only to address is not blank\r\n            require (offer.sellOnlyTo == msg.sender);           // require that buyer is allowed to buy offer\r\n        }\r\n        \r\n        address seller = offer.seller;\r\n\r\n        catIndexToAddress[catIndex] = msg.sender;               // update cat owner address to buyer's address\r\n        balanceOf[seller]--;                                    // reduce cat balance of seller\r\n        balanceOf[msg.sender]++;                                // increase cat balance of buyer\r\n        Transfer(seller, msg.sender, 1);                        // create EVM event logging transfer of 1 cat from seller to owner\r\n\r\n        CatNoLongerForSale(catIndex);                           // create EVM event logging cat is no longer for sale\r\n        pendingWithdrawals[seller] += msg.value;                // increase pending withdrawal amount of seller based on amount sent in buyer's message\r\n        CatBought(catIndex, msg.value, seller, msg.sender);     // create EVM event logging details of cat purchase\r\n\r\n    }\r\n\r\n    /* Withdraw any pending ETH amount that is owed to failed bidder or successful seller */\r\n    function withdraw() {\r\n        uint amount = pendingWithdrawals[msg.sender];   // store amount that can be withdrawn by sender\r\n        pendingWithdrawals[msg.sender] = 0;             // zero pending withdrawal amount\r\n        msg.sender.transfer(amount);                    // before performing transfer to message sender\r\n    }\r\n}\r\n\r\ncontract PreviousCryptoCatsContract {\r\n\r\n    /* You can use this hash to verify the image file containing all cats */\r\n    string public imageHash = \"e055fe5eb1d95ea4e42b24d1038db13c24667c494ce721375bdd827d34c59059\";\r\n\r\n    /* Variables to store contract owner and contract token standard details */\r\n    address owner;\r\n    string public standard = 'CryptoCats';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n    \r\n    // Store reference to previous cryptocat contract containing alpha release owners\r\n    // PROD\r\n    address public previousContractAddress = 0xa185B9E63FB83A5a1A13A4460B8E8605672b6020;\r\n    // ROPSTEN\r\n    // address public previousContractAddress = 0x0b0DB7bd68F944C219566E54e84483b6c512737B;\r\n    uint8 public contractVersion;\r\n    bool public totalSupplyIsLocked;\r\n\r\n    bool public allCatsAssigned = false;        // boolean flag to indicate if all available cats are claimed\r\n    uint public catsRemainingToAssign = 0;   // variable to track cats remaining to be assigned/claimed\r\n    uint public currentReleaseCeiling;       // variable to track maximum cat index for latest release\r\n\r\n    /* Create array to store cat index to owner address */\r\n    mapping (uint => address) public catIndexToAddress;\r\n\r\n    /* Create an array with all balances */\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function PreviousCryptoCatsContract() payable {\r\n        owner = msg.sender;                          // Set contract creation sender as owner\r\n    }\r\n\r\n    /* Returns count of how many cats are owned by an owner */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        require(balanceOf[_owner] != 0);    // requires that cat owner balance is not 0\r\n        return balanceOf[_owner];           // return number of cats owned from array of balances by owner address\r\n    }\r\n\r\n    /* Return total supply of cats existing */\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /* Get address of owner based on cat index */\r\n    function getCatOwner(uint256 catIndex) public returns (address) {\r\n        require(catIndexToAddress[catIndex] != 0x0);\r\n        return catIndexToAddress[catIndex];             // Return address at array position of cat index\r\n    }\r\n\r\n    /* Get address of contract owner who performed contract creation and initialisation */\r\n    function getContractOwner() public returns (address) {\r\n        return owner;                                   // Return address of contract owner\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"catNoLongerForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catIndexToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseCatIndexUpperBound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseId\",\"type\":\"uint32\"},{\"name\":\"catPrice\",\"type\":\"uint256\"}],\"name\":\"updateCatReleasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCat\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCatPrice\",\"outputs\":[{\"name\":\"catPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attributeType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerCatForSaleToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyIsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"},{\"name\":\"attrIndex\",\"type\":\"uint256\"},{\"name\":\"attrValue\",\"type\":\"string\"}],\"name\":\"setCatAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"catReleaseToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseId\",\"type\":\"uint32\"},{\"name\":\"numberOfCatsAdded\",\"type\":\"uint256\"},{\"name\":\"catPrice\",\"type\":\"uint256\"},{\"name\":\"newImageHash\",\"type\":\"string\"}],\"name\":\"releaseCats\",\"outputs\":[{\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCatRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catsForSale\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"catIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minPrice\",\"type\":\"uint256\"},{\"name\":\"sellOnlyTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allCatsAssigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"migrateCatOwnersFromPreviousContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"attributeIndex\",\"type\":\"uint256\"},{\"name\":\"descriptionText\",\"type\":\"string\"}],\"name\":\"setAttributeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReleaseCeiling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"},{\"name\":\"catPrice\",\"type\":\"uint256\"}],\"name\":\"setCatPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"getCatOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"buyCat\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"catIndex\",\"type\":\"uint256\"},{\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerCatForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catIndexToPriceException\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catsRemainingToAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"CatTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"CatOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"CatBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"CatNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"catIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCatsAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"catPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newImageHash\",\"type\":\"string\"}],\"name\":\"ReleaseUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"releaseId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"catPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateReleasePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attributeNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"UpdateAttribute\",\"type\":\"event\"}]","ContractName":"CryptoCatsMarket","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b792cd9a79cc96a4af85586e03209a6ca366987cc676d6dd123226f23b5d938f"}]}