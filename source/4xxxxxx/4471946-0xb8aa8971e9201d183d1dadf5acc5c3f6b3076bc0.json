{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract HTLC {\r\n////////////////\r\n//Global VARS//////////////////////////////////////////////////////////////////////////\r\n//////////////\r\n    string public version;\r\n    bytes32 public digest;\r\n    address public dest;\r\n    uint public timeOut;\r\n    address issuer; \r\n/////////////\r\n//MODIFIERS////////////////////////////////////////////////////////////////////\r\n////////////\r\n    modifier onlyIssuer {assert(msg.sender == issuer); _; }\r\n//////////////\r\n//Operations////////////////////////////////////////////////////////////////////////\r\n//////////////\r\n/*constructor */\r\n    //require all fields to create the contract\r\n    function HTLC(bytes32 _hash, address _dest, uint _timeLimit) public {\r\n        assert(digest != 0 || _dest != 0 || _timeLimit != 0);\r\n        digest = _hash;\r\n        dest = _dest;\r\n        timeOut = now + (_timeLimit * 1 hours);\r\n        issuer = msg.sender; \r\n    }\r\n /* public */   \r\n    //a string is subitted that is hash tested to the digest; If true the funds are sent to the dest address and destroys the contract    \r\n    function claim(string _hash) public returns(bool result) {\r\n       require(digest == sha256(_hash));\r\n       selfdestruct(dest);\r\n       return true;\r\n       }\r\n       //allow payments\r\n    function () public payable {}\r\n\r\n/* only issuer */\r\n    //if the time expires; the issuer can reclaim funds and destroy the contract\r\n    function refund() onlyIssuer public returns(bool result) {\r\n        require(now >= timeOut);\r\n        selfdestruct(issuer);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract xcat {\r\n    string public version = \"v1\";\r\n    \r\n    struct txLog{\r\n        address issuer;\r\n        address dest;\r\n        string chain1;\r\n        string chain2;\r\n        uint amount1;\r\n        uint amount2;\r\n        uint timeout;\r\n        address crtAddr;\r\n        bytes32 hashedSecret; \r\n    }\r\n    \r\n    event newTrade(string onChain, string toChain, uint amount1, uint amount2);\r\n    \r\n    mapping(bytes32 => txLog) public ledger;\r\n    \r\n    function testHash(string yourSecretPhrase) public returns (bytes32 SecretHash) {return(sha256(yourSecretPhrase));}\r\n    \r\n    function newXcat(bytes32 _SecretHash, address _ReleaseFundsTo, string _chain1, uint _amount1, string _chain2, uint _amount2, uint _MaxTimeLimit) public returns (address newContract) {\r\n        txLog storage tl = ledger[sha256(msg.sender,_ReleaseFundsTo,_SecretHash)];\r\n    //make the contract\r\n        HTLC h = new HTLC(_SecretHash, _ReleaseFundsTo, _MaxTimeLimit);\r\n    \r\n    //store info\r\n        tl.issuer = msg.sender;\r\n        tl.dest = _ReleaseFundsTo;\r\n        tl.chain1 = _chain1;\r\n        tl.chain2 = _chain2;\r\n        tl.amount1 = _amount1;\r\n        tl.amount2 = _amount2;\r\n        tl.timeout = _MaxTimeLimit;\r\n        tl.hashedSecret = _SecretHash; \r\n        tl.crtAddr = h;\r\n        newTrade (tl.chain1, tl.chain2, tl.amount1, tl.amount2);\r\n        return h;\r\n    }\r\n\r\n    //avoid taking funds\r\n    function() public { assert(0>1);} \r\n\r\n    // allow actors to view their tx\r\n    function viewXCAT(address _issuer, address _ReleaseFundsTo, bytes32 _SecretHash) public returns (address issuer, address receiver, uint amount1, string onChain, uint amount2, string toChain, uint atTime, address ContractAddress){\r\n        txLog storage tl = ledger[sha256(_issuer,_ReleaseFundsTo,_SecretHash)];\r\n        return (tl.issuer, tl.dest, tl.amount1, tl.chain1, tl.amount2, tl.chain2,tl.timeout, tl.crtAddr);\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n  // 88888b   d888b  88b  88 8 888888         _.-----._\r\n  // 88   88 88   88 888b 88 P   88   \\)|)_ ,'         `. _))|)\r\n  // 88   88 88   88 88`8b88     88    );-'/             \\`-:(\r\n  // 88   88 88   88 88 `888     88   //  :               :  \\\\   .\r\n  // 88888P   T888P  88  `88     88  //_,'; ,.         ,. |___\\\\\r\n  //    .           __,...,--.       `---':(  `-.___.-'  );----'\r\n  //              ,' :    |   \\            \\`. `'-'-'' ,'/\r\n  //             :   |    ;   ::            `.`-.,-.-.','\r\n  //     |    ,-.|   :  _//`. ;|              ``---\\` :\r\n  //   -(o)- (   \\ .- \\  `._// |    *               `.'       *\r\n  //     |   |\\   :   : _ |.-  :              .        .\r\n  //     .   :\\: -:  _|\\_||  .-(    _..----..\r\n  //         :_:  _\\\\_`.--'  _  \\,-'      __ \\\r\n  //         .` \\\\_,)--'/ .'    (      ..'--`'          ,-.\r\n  //         |.- `-'.-               ,'                (///)\r\n  //         :  ,'     .            ;             *     `-'\r\n  //   *     :         :           /\r\n  //          \\      ,'         _,'   88888b   888    88b  88 88  d888b  88\r\n  //           `._       `-  ,-'      88   88 88 88   888b 88 88 88   `  88\r\n  //            : `--..     :        *88888P 88   88  88`8b88 88 88      88\r\n  //        .   |           |\t        88    d8888888b 88 `888 88 88   ,  `\"\r\n  //            |           | \t      88    88     8b 88  `88 88  T888P  88\r\n  /////////////////////////////////////////////////////////////////////////","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ledger\",\"outputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"chain1\",\"type\":\"string\"},{\"name\":\"chain2\",\"type\":\"string\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"timeout\",\"type\":\"uint256\"},{\"name\":\"crtAddr\",\"type\":\"address\"},{\"name\":\"hashedSecret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_ReleaseFundsTo\",\"type\":\"address\"},{\"name\":\"_SecretHash\",\"type\":\"bytes32\"}],\"name\":\"viewXCAT\",\"outputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"onChain\",\"type\":\"string\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"toChain\",\"type\":\"string\"},{\"name\":\"atTime\",\"type\":\"uint256\"},{\"name\":\"ContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yourSecretPhrase\",\"type\":\"string\"}],\"name\":\"testHash\",\"outputs\":[{\"name\":\"SecretHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SecretHash\",\"type\":\"bytes32\"},{\"name\":\"_ReleaseFundsTo\",\"type\":\"address\"},{\"name\":\"_chain1\",\"type\":\"string\"},{\"name\":\"_amount1\",\"type\":\"uint256\"},{\"name\":\"_chain2\",\"type\":\"string\"},{\"name\":\"_amount2\",\"type\":\"uint256\"},{\"name\":\"_MaxTimeLimit\",\"type\":\"uint256\"}],\"name\":\"newXcat\",\"outputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"onChain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"toChain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"newTrade\",\"type\":\"event\"}]","ContractName":"xcat","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://91f2cadbe3fad5bbdc1b89c107585d49300f74a69e456cf3dd80f287d8b1f465"}]}