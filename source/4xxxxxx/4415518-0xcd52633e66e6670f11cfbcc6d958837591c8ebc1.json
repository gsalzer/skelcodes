{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract GoldMineCoin is StandardToken, Ownable {\t\r\n    \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  uint public constant INITIAL_SUPPLY = 2500000000000;\r\n\r\n  uint public constant BOUNTY_TOKENS_LIMIT = 125000000000;\r\n\r\n  string public constant name = \"GoldMineCoin\";\r\n   \r\n  string public constant symbol = \"GMC\";\r\n    \r\n  uint32 public constant decimals = 6;\r\n\r\n  uint public bountyTokensTransferred;\r\n\r\n  address public saleAgent;\r\n  \r\n  bool public isCrowdsaleFinished;\r\n\r\n  uint public remainingLockDate;\r\n  \r\n  mapping(address => uint) public locks;\r\n\r\n  modifier notLocked(address from) {\r\n    require(isCrowdsaleFinished || (locks[from] !=0 && now >= locks[from]));\r\n    _;\r\n  }\r\n\r\n  function GoldMineCoin() public {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[this] = totalSupply;\r\n  }\r\n  \r\n  function addRestricedAccount(address restricedAccount, uint unlockedDate) public {\r\n    require(!isCrowdsaleFinished);    \r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    locks[restricedAccount] = unlockedDate;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public notLocked(_from) returns (bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender) returns (bool) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n  function crowdsaleTransfer(address to, uint amount) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    require(!isCrowdsaleFinished || now >= remainingLockDate);\r\n    require(amount <= balances[this]);\r\n    balances[this] = balances[this].sub(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    Transfer(this, to, amount);\r\n  }\r\n\r\n  function addBountyTransferredTokens(uint amount) public {\r\n    require(!isCrowdsaleFinished);\r\n    require(msg.sender == saleAgent);\r\n    bountyTokensTransferred = bountyTokensTransferred.add(amount);\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(!isCrowdsaleFinished);\r\n    require(msg.sender == owner|| msg.sender == saleAgent);\r\n    require(newSaleAgent != address(0));\r\n    saleAgent = newSaleAgent;\r\n  }\r\n  \r\n  function setRemainingLockDate(uint newRemainingLockDate) public {\r\n    require(!isCrowdsaleFinished && msg.sender == saleAgent); \r\n    remainingLockDate = newRemainingLockDate;\r\n  }\r\n\r\n  function finishCrowdsale() public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    isCrowdsaleFinished = true;\r\n  }\r\n\r\n}\r\n\r\ncontract CommonCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint public price = 75000000;\r\n\r\n  uint public constant MIN_INVESTED_ETH = 100000000000000000;\r\n\r\n  uint public constant PERCENT_RATE = 100000000;\r\n                                     \r\n  uint public constant BOUNTY_PERCENT = 1666667;\r\n\r\n  uint public constant REFERER_PERCENT = 500000;\r\n\r\n  address public bountyWallet;\r\n\r\n  address public wallet;\r\n\r\n  uint public start;\r\n\r\n  uint public period;\r\n\r\n  uint public tokensSold;\r\n  \r\n  bool isBountyRestriced;\r\n\r\n  GoldMineCoin public token;\r\n\r\n  modifier saleIsOn() {\r\n    require(now >= start && now < end() && msg.value >= MIN_INVESTED_ETH);\r\n    require(tokensSold < tokensSoldLimit());\r\n    _;\r\n  }\r\n  \r\n  function tokensSoldLimit() public constant returns(uint);\r\n\r\n  function end() public constant returns(uint) {\r\n    return start + period * 1 days;\r\n  }\r\n\r\n  function setBountyWallet(address newBountyWallet) public onlyOwner {\r\n    bountyWallet = newBountyWallet;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = GoldMineCoin(newToken);\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    require(bountyWallet != address(0));\r\n    period = newPeriod;\r\n    if(isBountyRestriced) {\r\n      token.addRestricedAccount(bountyWallet, end());\r\n    }\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n  function priceWithBonus() public constant returns(uint);\r\n  \r\n  function buyTokens() public payable saleIsOn {\r\n\r\n    wallet.transfer(msg.value);\r\n\r\n    uint tokens = msg.value.mul(priceWithBonus()).div(1 ether);\r\n    \r\n    token.crowdsaleTransfer(msg.sender, tokens);\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    // referer tokens\r\n    if(msg.data.length == 20) {\r\n      address referer = bytesToAddres(bytes(msg.data));\r\n      require(referer != address(token) && referer != msg.sender);\r\n      uint refererTokens = tokens.mul(REFERER_PERCENT).div(PERCENT_RATE);\r\n      token.crowdsaleTransfer(referer, refererTokens);\r\n      tokens.add(refererTokens);\r\n      tokensSold = tokensSold.add(refererTokens);\r\n    }\r\n\r\n    // bounty tokens\r\n    if(token.bountyTokensTransferred() < token.BOUNTY_TOKENS_LIMIT()) {\r\n      uint bountyTokens = tokens.mul(BOUNTY_PERCENT).div(PERCENT_RATE);\r\n      uint diff = token.BOUNTY_TOKENS_LIMIT().sub(token.bountyTokensTransferred());\r\n      if(bountyTokens > diff) {\r\n        bountyTokens = diff;\r\n      }      \r\n      if(!isBountyRestriced) {\r\n        token.addRestricedAccount(bountyWallet, end());  \r\n        isBountyRestriced = true;\r\n      }\r\n      token.crowdsaleTransfer(bountyWallet, bountyTokens);\r\n    }\r\n  }\r\n\r\n  function bytesToAddres(bytes source) internal pure returns(address) {\r\n    uint result;\r\n    uint mul = 1;\r\n    for(uint i = 20; i > 0; i--) {\r\n      result += uint8(source[i-1])*mul;\r\n      mul = mul*256;\r\n    }\r\n    return address(result);\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(wallet, token.balanceOf(this));\r\n  }\r\n\r\n  function() external payable {\r\n    buyTokens();\r\n  }\r\n\r\n}\r\n\r\ncontract CrowdsaleWithNextSaleAgent is CommonCrowdsale {\r\n\r\n  address public nextSaleAgent;\r\n\r\n  function setNextSaleAgent(address newNextSaleAgent) public onlyOwner {\r\n    nextSaleAgent = newNextSaleAgent;\r\n  }\r\n\r\n  function finishCrowdsale() public onlyOwner { \r\n    token.setSaleAgent(nextSaleAgent);\r\n  }\r\n\r\n}\r\n\r\ncontract StaggedCrowdale is CommonCrowdsale {\r\n\r\n  uint public constant SALE_STEP = 5000000;\r\n\r\n  uint public timeStep = 5 * 1 days;\r\n\r\n  function setTimeStep(uint newTimeStep) public onlyOwner {\r\n    timeStep = newTimeStep * 1 days;\r\n  }\r\n\r\n  function priceWithBonus() public constant returns(uint) {\r\n    uint saleStage = now.sub(start).div(timeStep);\r\n    uint saleSub = saleStage.mul(SALE_STEP);\r\n    uint minSale = getMinPriceSale();\r\n    uint maxSale = getMaxPriceSale();\r\n    uint priceSale = maxSale;\r\n    if(saleSub >= maxSale.sub(minSale)) {\r\n      priceSale = minSale;\r\n    } else {\r\n      priceSale = maxSale.sub(saleSub);\r\n    }\r\n    return price.mul(PERCENT_RATE).div(PERCENT_RATE.sub(priceSale));\r\n  }\r\n  \r\n  function getMinPriceSale() public constant returns(uint);\r\n  \r\n  function getMaxPriceSale() public constant returns(uint);\r\n\r\n}\r\n\r\ncontract Presale is CrowdsaleWithNextSaleAgent {\r\n\r\n  uint public constant PRICE_SALE = 60000000;\r\n\r\n  uint public constant TOKENS_SOLD_LIMIT = 125000000000;\r\n\r\n  function tokensSoldLimit() public constant returns(uint) {\r\n    return TOKENS_SOLD_LIMIT;\r\n  }\r\n  \r\n  function priceWithBonus() public constant returns(uint) {\r\n    return price.mul(PERCENT_RATE).div(PERCENT_RATE.sub(PRICE_SALE));\r\n  }\r\n\r\n}\r\n\r\ncontract PreICO is StaggedCrowdale, CrowdsaleWithNextSaleAgent {\r\n\r\n  uint public constant MAX_PRICE_SALE = 55000000;\r\n\r\n  uint public constant MIN_PRICE_SALE = 40000000;\r\n\r\n  uint public constant TOKENS_SOLD_LIMIT = 625000000000;\r\n\r\n  function tokensSoldLimit() public constant returns(uint) {\r\n    return TOKENS_SOLD_LIMIT;\r\n  }\r\n  \r\n  function getMinPriceSale() public constant returns(uint) {\r\n    return MIN_PRICE_SALE;\r\n  }\r\n  \r\n  function getMaxPriceSale() public constant returns(uint) {\r\n    return MAX_PRICE_SALE;\r\n  }\r\n\r\n}\r\n\r\ncontract ICO is StaggedCrowdale {\r\n\r\n  uint public constant MAX_PRICE_SALE = 40000000;\r\n\r\n  uint public constant MIN_PRICE_SALE = 20000000;\r\n\r\n  uint public constant ESCROW_TOKENS_PERCENT = 5000000;\r\n\r\n  uint public constant FOUNDERS_TOKENS_PERCENT = 10000000;\r\n\r\n  uint public lockPeriod = 250;\r\n\r\n  address public foundersTokensWallet;\r\n\r\n  address public escrowTokensWallet;\r\n\r\n  uint public constant TOKENS_SOLD_LIMIT = 1250000000000;\r\n\r\n  function tokensSoldLimit() public constant returns(uint) {\r\n    return TOKENS_SOLD_LIMIT;\r\n  }\r\n\r\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\r\n    lockPeriod = newLockPeriod;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setEscrowTokensWallet(address newEscrowTokensWallet) public onlyOwner {\r\n    escrowTokensWallet = newEscrowTokensWallet;\r\n  }\r\n\r\n  function finishCrowdsale() public onlyOwner { \r\n    uint totalSupply = token.totalSupply();\r\n    uint commonPercent = FOUNDERS_TOKENS_PERCENT + ESCROW_TOKENS_PERCENT;\r\n    uint commonExtraTokens = totalSupply.mul(commonPercent).div(PERCENT_RATE.sub(commonPercent));\r\n    if(commonExtraTokens > token.balanceOf(token)) {\r\n      commonExtraTokens = token.balanceOf(token);\r\n    }\r\n    uint escrowTokens = commonExtraTokens.mul(FOUNDERS_TOKENS_PERCENT).div(PERCENT_RATE);\r\n    token.crowdsaleTransfer(foundersTokensWallet, foundersTokens);\r\n\r\n    uint foundersTokens = commonExtraTokens - escrowTokens;\r\n    token.crowdsaleTransfer(escrowTokensWallet, escrowTokens);\r\n\r\n    token.setRemainingLockDate(now + lockPeriod * 1 days);\r\n    token.finishCrowdsale();\r\n  }\r\n  \r\n  function getMinPriceSale() public constant returns(uint) {\r\n    return MIN_PRICE_SALE;\r\n  }\r\n  \r\n  function getMaxPriceSale() public constant returns(uint) {\r\n    return MAX_PRICE_SALE;\r\n  }\r\n\r\n}\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  GoldMineCoin public token;\r\n\r\n  Presale public presale;\r\n  \r\n  PreICO public preICO;\r\n  \r\n  ICO public ico;\r\n\r\n  function deploy() public onlyOwner {\r\n    token = new GoldMineCoin();\r\n\r\n    presale = new Presale();\r\n    presale.setToken(token);\r\n    token.setSaleAgent(presale);\r\n    \r\n    // fix\r\n    presale.setBountyWallet(0x6FB77f2878A33ef21aadde868E84Ba66105a3E9c);\r\n    presale.setWallet(0x2d664D31f3AF6aD256A62fdb72E704ab0De42619);\r\n    presale.setStart(1508850000);\r\n    presale.setPeriod(35);\r\n\r\n    preICO = new PreICO();\r\n    preICO.setToken(token);\r\n    presale.setNextSaleAgent(preICO);\r\n    \r\n    // fix\r\n    preICO.setTimeStep(5);\r\n    preICO.setBountyWallet(0x4ca3a7788A61590722A7AAb3b79E8b4DfDDf9559);\r\n    preICO.setWallet(0x2d664D31f3AF6aD256A62fdb72E704ab0De42619);\r\n    preICO.setStart(1511182800);\r\n    preICO.setPeriod(24);\r\n    \r\n    ico = new ICO();\r\n    ico.setToken(token);\r\n    preICO.setNextSaleAgent(ico);\r\n    \r\n    // fix\r\n    ico.setTimeStep(5);\r\n    ico.setLockPeriod(250);\r\n    ico.setBountyWallet(0x7cfe25bdd334cdB46Ae0c4996E7D34F95DFFfdD1);\r\n    ico.setEscrowTokensWallet(0x24D225818a19c75694FCB35297cA2f23E0bd8F82);\r\n    ico.setFoundersTokensWallet(0x54540fC0e7cCc29d1c93AD7501761d6b232d5b03);\r\n    ico.setWallet(0x2d664D31f3AF6aD256A62fdb72E704ab0De42619);\r\n    ico.setStart(1513515600);\r\n    ico.setPeriod(32);\r\n\r\n    token.transferOwnership(0xE8910a2C39Ef0405A9960eC4bD8CBA3211e3C796);\r\n    presale.transferOwnership(0xE8910a2C39Ef0405A9960eC4bD8CBA3211e3C796);\r\n    preICO.transferOwnership(0xE8910a2C39Ef0405A9960eC4bD8CBA3211e3C796);\r\n    ico.transferOwnership(0xE8910a2C39Ef0405A9960eC4bD8CBA3211e3C796);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTimeStep\",\"type\":\"uint256\"}],\"name\":\"setTimeStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyWallet\",\"type\":\"address\"}],\"name\":\"setBountyWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PRICE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinPriceSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRICE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPriceSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNextSaleAgent\",\"type\":\"address\"}],\"name\":\"setNextSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTED_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PreICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41aefbd23099c4f21a713fc5f91ffdcd95a6afdd3afe20576d9be918aedc9194"}]}