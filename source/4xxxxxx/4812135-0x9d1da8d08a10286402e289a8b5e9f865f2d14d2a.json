{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n    function toUINT112(uint256 a) internal constant returns(uint112) {\r\n    assert(uint112(a) == a);\r\n    return uint112(a);\r\n  }\r\n\r\n  function toUINT120(uint256 a) internal constant returns(uint120) {\r\n    assert(uint120(a) == a);\r\n    return uint120(a);\r\n  }\r\n\r\n  function toUINT128(uint256 a) internal constant returns(uint128) {\r\n    assert(uint128(a) == a);\r\n    return uint128(a);\r\n  }\r\n\r\n  function percent(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = (b*a/100) ;\r\n    assert(c <= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  struct Account {\r\n      uint256 balances;\r\n      uint256 rawTokens;\r\n      uint32 lastMintedTimestamp;\r\n    }\r\n\r\n    // Balances for each account\r\n    mapping(address => Account) accounts;\r\n\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= accounts[msg.sender].balances);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    accounts[msg.sender].balances = accounts[msg.sender].balances.sub(_value);\r\n    accounts[_to].balances = accounts[_to].balances.add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return accounts[_owner].balances;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= accounts[_from].balances);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    accounts[_from].balances = accounts[_from].balances.sub(_value);\r\n    accounts[_to].balances = accounts[_to].balances.add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Infocash is StandardToken, Owned {\r\n    string public constant name    = \"Infocash\";  \r\n    uint8 public constant decimals = 8;               \r\n    string public constant symbol  = \"ICC\";\r\n    bool public canClaimToken = false;\r\n    uint256 public constant maxSupply  = 86000000*10**uint256(decimals);\r\n    uint256 public constant dateInit=1514073600  ;\r\n    uint256 public constant dateICO=dateInit + 30 days;\r\n    uint256 public constant dateIT=dateICO + 365 days;\r\n    uint256 public constant dateMarketing=dateIT + 365 days;\r\n    uint256 public constant dateEco=dateMarketing + 365 days;\r\n    uint256 public constant dateManager=dateEco + 365 days; \r\n    uint256 public constant dateAdmin=dateManager + 365 days;                              \r\n    \r\n    enum Stage {\r\n        NotCreated,\r\n        ICO,\r\n        IT,\r\n        Marketing,\r\n        Eco,\r\n        MgmtSystem,\r\n        Admin,\r\n        Finalized\r\n    }\r\n    // packed to 256bit to save gas usage.\r\n    struct Supplies {\r\n        // uint128's max value is about 3e38.\r\n        // it's enough to present amount of tokens\r\n        uint256 total;\r\n        uint256 rawTokens;\r\n    }\r\n\r\n    //the stage for releasing Tokens\r\n    struct StageRelease {\r\n      Stage stage;\r\n      uint256 rawTokens;\r\n      uint256 dateRelease;\r\n    }\r\n\r\n    Supplies supplies;\r\n    StageRelease public  stageICO=StageRelease(Stage.ICO, maxSupply.percent(35), dateICO);\r\n    StageRelease public stageIT=StageRelease(Stage.IT, maxSupply.percent(18), dateIT);\r\n    StageRelease public stageMarketing=StageRelease(Stage.Marketing, maxSupply.percent(18), dateMarketing);\r\n    StageRelease public stageEco=StageRelease(Stage.Eco, maxSupply.percent(18), dateEco);\r\n    StageRelease public stageMgmtSystem=StageRelease(Stage.MgmtSystem, maxSupply.percent(9), dateManager);\r\n    StageRelease public stageAdmin=StageRelease(Stage.Admin, maxSupply.percent(2), dateAdmin);\r\n\r\n    // Send back ether \r\n    function () {\r\n      revert();\r\n    }\r\n    //getter totalSupply\r\n    function totalSupply() public constant returns (uint256 total) {\r\n      return supplies.total;\r\n    }\r\n    \r\n    function mintToken(address _owner, uint256 _amount, bool _isRaw) onlyOwner internal {\r\n      require(_amount.add(supplies.total)<=maxSupply);\r\n      if (_isRaw) {\r\n        accounts[_owner].rawTokens=_amount.add(accounts[_owner].rawTokens);\r\n        supplies.rawTokens=_amount.add(supplies.rawTokens);\r\n      } else {\r\n        accounts[_owner].balances=_amount.add(accounts[_owner].balances);\r\n      }\r\n      supplies.total=_amount.add(supplies.total);\r\n      Transfer(0, _owner, _amount);\r\n    }\r\n\r\n    function transferRaw(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= accounts[msg.sender].rawTokens);\r\n    \r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    accounts[msg.sender].rawTokens = accounts[msg.sender].rawTokens.sub(_value);\r\n    accounts[_to].rawTokens = accounts[_to].rawTokens.add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function setClaimToken(bool approve) onlyOwner public returns (bool) {\r\n    canClaimToken=true;\r\n    return canClaimToken;\r\n  }\r\n\r\n    function claimToken(address _owner) public returns (bool amount) {\r\n      require(accounts[_owner].rawTokens!=0);\r\n      require(canClaimToken);\r\n\r\n      uint256 amountToken = accounts[_owner].rawTokens;\r\n      accounts[_owner].rawTokens = 0;\r\n      accounts[_owner].balances = amountToken + accounts[_owner].balances;\r\n      return true;\r\n    }\r\n\r\n    function balanceOfRaws(address _owner) public constant returns (uint256 balance) {\r\n      return accounts[_owner].rawTokens;\r\n    }\r\n\r\n    function blockTime() constant returns (uint32) {\r\n        return uint32(block.timestamp);\r\n    }\r\n\r\n    function stage() constant returns (Stage) { \r\n      if(blockTime()<=dateInit) {\r\n        return Stage.NotCreated;\r\n      }\r\n\r\n      if(blockTime()<=dateICO) {\r\n        return Stage.ICO;\r\n      }\r\n        \r\n      if(blockTime()<=dateIT) {\r\n        return Stage.IT;\r\n      }\r\n\r\n      if(blockTime()<=dateMarketing) {\r\n        return Stage.Marketing;\r\n      }\r\n\r\n      if(blockTime()<=dateEco) {\r\n        return Stage.Eco;\r\n      }\r\n\r\n      if(blockTime()<=dateManager) {\r\n        return Stage.MgmtSystem;\r\n      }\r\n\r\n      if(blockTime()<=dateAdmin) {\r\n        return Stage.Admin;\r\n      }\r\n      \r\n      return Stage.Finalized;\r\n    }\r\n\r\n    function releaseStage (uint256 amount, StageRelease storage stageRelease, bool isRaw) internal returns (uint256) {\r\n      if(stageRelease.rawTokens>0) {\r\n        int256 remain=int256(stageRelease.rawTokens - amount);\r\n        if(remain<0)\r\n          amount=stageRelease.rawTokens;\r\n        stageRelease.rawTokens=stageRelease.rawTokens.sub(amount);\r\n        mintToken(owner, amount, isRaw);\r\n        return amount;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    function release(uint256 amount, bool isRaw) onlyOwner public returns (uint256) {\r\n      uint256 amountSum=0;\r\n\r\n      if(stage()==Stage.NotCreated) {\r\n        throw;\r\n      }\r\n\r\n      if(stage()==Stage.ICO) {\r\n        releaseStage(amount, stageICO, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n\r\n      if(stage()==Stage.IT) {\r\n        releaseStage(amount, stageIT, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n\r\n      if(stage()==Stage.Marketing) {\r\n        releaseStage(amount, stageMarketing, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n\r\n      if(stage()==Stage.Eco) {\r\n        releaseStage(amount, stageEco, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n\r\n      if(stage()==Stage.MgmtSystem) {\r\n        releaseStage(amount, stageMgmtSystem, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n      \r\n      if(stage()==Stage.Admin ) {\r\n        releaseStage(amount, stageAdmin, isRaw);\r\n        amountSum=amountSum.add(amount);\r\n        return amountSum;\r\n      }\r\n      \r\n      if(stage()==Stage.Finalized) {\r\n        owner=0;\r\n        return 0;\r\n      }\r\n      return amountSum;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"setClaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isRaw\",\"type\":\"bool\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageEco\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageMgmtSystem\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageMarketing\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageAdmin\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateMarketing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateManager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageIT\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRaw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageICO\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"rawTokens\",\"type\":\"uint256\"},{\"name\":\"dateRelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateEco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateInit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfRaws\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Infocash","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da5abdd1e2c8bc4f052da09f6c8cc5957045f66aabcade0e7af915e08c247fdf"}]}