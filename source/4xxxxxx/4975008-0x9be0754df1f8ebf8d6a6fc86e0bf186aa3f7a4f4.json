{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title Phase One of SEC Coin Crowd Sale, 9% of total supply, 1 ETH = 7,000 SEC\r\n/// Our homepage: http://sectech.me/\r\n/// Sale is under the protect of contract.\r\n/// @author Diana Kudrow\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  ///@dev The Ownable constructor sets the original `owner` of the contract to the senderaccount.\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n\r\n  /// @dev modifier to allow actions only when the contract IS paused\r\n  modifier whenNotPaused() {\r\n    require(!paused);_;\r\n  }\r\n\r\n  /// @dev modifier to allow actions only when the contract IS NOT paused\r\n  modifier whenPaused {\r\n    require(paused);_;\r\n  }\r\n\r\n  /// @dev called by the owner to pause, triggers stopped state\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /// @dev called by the owner to unpause, returns to normal state\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken, Pausable {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specified amount of tokens from messager sender's account.\r\n     * @param _value The amount of tokens to burn.\r\n     */\r\n    function burn(uint256 _value) whenNotPaused public {\r\n        require(_value > 0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);  // reduce total supply after burn\r\n        Burn(msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract SECToken is BurnableToken {\r\n\r\n    string public constant symbol = \"SEC\";\r\n    string public name = \"Erised(SEC)\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function SECToken() {\r\n        uint256 _totalSupply = 567648000; // 3600sec * 24hr * 365day * 18year\r\n        uint256 capacity = _totalSupply.mul(1 ether);\r\n        totalSupply = balances[msg.sender] = capacity;\r\n    }\r\n\r\n    function setName(string name_) onlyOwner {\r\n        name = name_;\r\n    }\r\n\r\n    function burn(uint256 _value) whenNotPaused public {\r\n        super.burn(_value);\r\n    }\r\n\r\n}\r\n\r\ncontract SecCrowdSale is Pausable{\r\n    using SafeMath for uint;\r\n\r\n    // Total Supply of CrowdSale first period\r\n    uint public constant MAX_CAP = 51088320000000000000000000;  //51,088,320 SEC Coin, 9% of total supply\r\n    // Minimum amount to invest\r\n    uint public constant MIN_INVEST_ETHER = 0.1 ether;\r\n    // Crowdsale period\r\n    uint private constant CROWDSALE_PERIOD = 15 days;\r\n    // Number of SECCoins per Ether\r\n    uint public constant SEC_PER_ETHER = 7000000000000000000000; // 1ETH = 7,000 SEC Coin\r\n    // SEC Token main contract address\r\n    address public constant SEC_contract = 0x41ff967f9f8ec58abf88ca1caa623b3fd6277191;\r\n\r\n    //SECCoin contract reference\r\n    SECToken public SECCoin;\r\n    // Number of Ether received\r\n    uint public etherReceived;\r\n    // Number of SECCoins sent to Ether contributors\r\n    uint public SECCoinSold;\r\n    // Crowdsale start time\r\n    uint public startTime;\r\n    // Crowdsale end time\r\n    uint public endTime;\r\n    // Is crowdsale still on going\r\n    bool public crowdSaleClosed;\r\n\r\n    modifier respectTimeFrame() {\r\n        require((now >= startTime) || (now <= endTime ));_;\r\n    }\r\n\r\n    event LogReceivedETH(address addr, uint value);\r\n    event LogCoinsEmited(address indexed from, uint amount);\r\n\r\n    function CrowdSale() {\r\n        SECCoin = SECToken(SEC_contract);\r\n    }\r\n\r\n    /// The fallback function corresponds to a donation in ETH\r\n    function() whenNotPaused respectTimeFrame payable {\r\n        BuyTokenSafe(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * To call to start the crowdsale\r\n     */\r\n    function start() onlyOwner external{\r\n        require(startTime == 0); // Crowdsale was already started\r\n        startTime = now ;\r\n        endTime =  now + CROWDSALE_PERIOD;\r\n    }\r\n\r\n    /// Receives a donation in Etherose, send SEC token immediately\r\n    function BuyTokenSafe(address beneficiary) internal {\r\n        require(msg.value >= MIN_INVEST_ETHER); // Don't accept funding under a predefined threshold\r\n        uint SecToSend = msg.value.mul(SEC_PER_ETHER).div(1 ether); // Compute the number of SECCoin to send\r\n        require(SecToSend.add(SECCoinSold) <= MAX_CAP);\r\n        SECCoin.transfer(beneficiary, SecToSend); // Transfer SEC Coins right now\r\n        etherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\r\n        SECCoinSold = SECCoinSold.add(SecToSend);\r\n        // Send events\r\n        LogCoinsEmited(msg.sender ,SecToSend);\r\n        LogReceivedETH(beneficiary, etherReceived);\r\n    }\r\n\r\n    /// Close the crowdsale, should be called after the refund period\r\n    function finishSafe(address burner) onlyOwner external{\r\n        require(burner!=address(0));\r\n        require(now > endTime || SECCoinSold == MAX_CAP); // end time or sold out\r\n        owner.send(this.balance); // Move the remaining Ether to contract founder address\r\n        uint remains = SECCoin.balanceOf(this);\r\n        if (remains > 0) { // Burn the rest of SECCoins\r\n            SECCoin.transfer(burner, remains);\r\n        }\r\n        crowdSaleClosed = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEC_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"finishSafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECCoinSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEC_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCoinsEmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SecCrowdSale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aad0b85116a44c6898c9dcc51a7c60d0532c9d8a805639d89f1b3cba024e85e2"}]}