{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * WELCOME: http://cryptobeton.com/\r\n * Cryptobeton is a multi-functional platform for working with SmartContract, allowing you to make bets, watch matches and news from the world of cybersport. Staying with us you will be next to the tournaments on CS GO, DOTA2, LOL\r\n */\r\ncontract CryptoBetOn {\r\n\r\n    struct Gamer {\r\n        address wallet;\r\n        uint amount;\r\n    }\r\n\r\n    struct Match {\r\n        bool bets;\r\n        uint number;\r\n        uint winPotA;\r\n        uint winPotB;\r\n        uint winPotD;\r\n        Gamer[] gamersA;\r\n        Gamer[] gamersD;\r\n        Gamer[] gamersB;\r\n    }\r\n\r\n    uint16 constant MATCH_COUNT_LIMIT = 512;\r\n    uint8 constant HOUSE_EDGE_TOP_BAR = 12;\r\n    uint8 constant HOUSE_EDGE_BOTTOM_BAR = 1;\r\n\r\n    uint8 constant TX_N01 = 1; // \"TX_N01. Not found match by id\";\r\n    uint8 constant TX_N02 = 2; // \"TX_N02. Thanks, brother!\";\r\n    uint8 constant TX_N03 = 3; // \"TX_N03. The number of matches should not exceed the limit\";\r\n    uint8 constant TX_N04 = 4; // \"TX_N04. The percentage of the fee should not exceed the limits\";\r\n    uint8 constant TX_N16 = 16; // \"TX_N16. Non-standard situation: We did not receive fees\"\r\n    uint8 constant TX_N17 = 17; // \"TX_N17. Abnormal situation: Failed to return some bets back\"\r\n    uint8 constant TX_N18 = 18; // \"TX_N18. Abnormal situation: Failed to return some bets back\"\r\n    uint8 constant TX_N19 = 19; // \"TX_N19. Match with id already exists\";\r\n\r\n    // Fee is 4 percent of win amount\r\n    uint8 private houseEdge = 3;\r\n    uint constant JACKPOT_FEE = 1;\r\n    uint jackpotAmount = 0;\r\n    address private owner;\r\n    uint16 matchCount = 0;\r\n    mapping (uint => Match) matchesMap;\r\n\r\n    modifier onlyowner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier hasmatch(uint _matchId) {\r\n        var m = matchesMap[_matchId];\r\n        if (m.number != 0) {\r\n            _;\r\n        } else {\r\n            TxMessage(_matchId, TX_N01, 0);\r\n        }\r\n     }\r\n\r\n    function CryptoBetOn() payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event TxMessage(uint _matchId,\r\n                    uint8 _code,\r\n                    uint _value);\r\n\r\n    event MatchAdded(uint _matchId,\r\n                     uint8 _houseEdge,\r\n                     uint16 _matchCount);\r\n\r\n    event MatchGetted(uint _matchId,\r\n                      bool _bets,\r\n                      uint _number,\r\n                      uint _winPotA,\r\n                      uint _winPotB);\r\n\r\n    event MatchPayoff(uint _matchId,\r\n                       uint _winPot,\r\n                       uint _collectedFees,\r\n                       uint _jackpotAmount);\r\n\r\n    event MatchAborted(uint _matchId);\r\n\r\n    event BetAccepted(uint _matchId,\r\n                      uint8 _betState,\r\n                      address _wallet,\r\n                      uint _amount,\r\n                      uint _blockNumber);\r\n\r\n\r\n    event CashSaved(uint _amount);\r\n\r\n    event JackpotPayoff(uint _matchId, uint _amount, address _wallet);\r\n\r\n    function() payable {\r\n        if (msg.value > 0) {\r\n            TxMessage(0, TX_N02, msg.value);\r\n        }\r\n    }\r\n\r\n    function setHouseEdge(uint8 _houseEdge) onlyowner {\r\n        if (houseEdge < HOUSE_EDGE_BOTTOM_BAR || _houseEdge > HOUSE_EDGE_TOP_BAR) {\r\n            TxMessage(0, TX_N04, _houseEdge);\r\n            return;\r\n        }\r\n        houseEdge = _houseEdge;\r\n    }\r\n\r\n    function getHouseEdge() constant returns(uint8) {\r\n        return houseEdge;\r\n    }\r\n\r\n    function getOwner() constant returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function getBalance() constant returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    function getJackpotAmount() constant returns(uint) {\r\n        return jackpotAmount;\r\n    }\r\n\r\n    function getMatchCount() constant returns(uint16) {\r\n        return matchCount;\r\n    }\r\n\r\n    function addNewMatch(uint _matchId) private returns(bool) {\r\n        var m = matchesMap[_matchId];\r\n        if (m.number != 0) {\r\n            return true;\r\n        }\r\n        if (_matchId == 0) {\r\n            TxMessage(_matchId, TX_N19, m.number);\r\n            return false;\r\n        }\r\n        if (matchCount >= MATCH_COUNT_LIMIT) {\r\n            TxMessage(_matchId, TX_N03, matchCount);\r\n            return false;\r\n        }\r\n        matchesMap[_matchId].bets = true;\r\n        matchesMap[_matchId].number = block.number;\r\n        matchCount += 1;\r\n        MatchAdded(_matchId,\r\n                   houseEdge,\r\n                   matchCount);\r\n        return true;\r\n    }\r\n\r\n    function getMatch(uint _matchId) hasmatch(_matchId) {\r\n        var m = matchesMap[_matchId];\r\n        MatchGetted(_matchId,\r\n                    m.bets,\r\n                    m.number,\r\n                    m.winPotA,\r\n                    m.winPotB);\r\n    }\r\n\r\n    function betsOff(uint _matchId) onlyowner hasmatch(_matchId) returns (bool) {\r\n        matchesMap[_matchId].bets = false;\r\n        return true;\r\n    }\r\n\r\n    function cashBack(Gamer[] gamers) private returns(uint) {\r\n        uint amount = 0;\r\n        for (uint index = 0; index < gamers.length; index++) {\r\n            if (!gamers[index].wallet.send(gamers[index].amount)) {\r\n                amount += gamers[index].amount;\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function abortMatch(uint _matchId) onlyowner hasmatch(_matchId) {\r\n        var m = matchesMap[_matchId]; // TODO whether the data is copied or it is the reference to storage\r\n        cashBack(m.gamersA);\r\n        cashBack(m.gamersB);\r\n        cashBack(m.gamersD);\r\n        clearMatch(_matchId);\r\n        MatchAborted(_matchId);\r\n    }\r\n\r\n    function eraseMatch(uint _matchId) onlyowner hasmatch(_matchId) {\r\n        clearMatch(_matchId);\r\n        MatchAborted(_matchId);\r\n    }\r\n\r\n    function payoutJackpot(uint _matchId, Gamer[] gamers) onlyowner private {\r\n        uint tmpAmount = 0;\r\n        address jackpotWinner = 0;\r\n        uint tmpJackpotAmount = jackpotAmount;\r\n        jackpotAmount = 0;\r\n        for (uint pos = 0; pos < gamers.length; pos += 1) {\r\n            if (gamers[pos].amount > tmpAmount) {\r\n                tmpAmount = gamers[pos].amount;\r\n                jackpotWinner = gamers[pos].wallet;\r\n            }\r\n        }\r\n        if (jackpotWinner != 0 && jackpotWinner.send(tmpJackpotAmount)) {\r\n            JackpotPayoff(_matchId, tmpJackpotAmount, jackpotWinner);\r\n        }\r\n    }\r\n\r\n    function checkMatchToBeAborted(uint _matchId, uint8 _winner) private returns(bool) {\r\n        var m = matchesMap[_matchId];\r\n        if (m.number == 0 || m.bets) {\r\n            return true;\r\n        }\r\n        if ((m.winPotA == 0 && _winner == 0) || (m.winPotD == 0 && _winner == 1) || (m.winPotB == 0 && _winner == 2)) {\r\n            return true;\r\n        }\r\n        if ((m.winPotA == 0 && m.winPotB == 0) || (m.winPotA == 0 && m.winPotD == 0) || (m.winPotB == 0 && m.winPotD == 0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function payoutMatch(uint _matchId, uint8 _winner, bool _jackpot) onlyowner {\r\n        // cash back if need abort\r\n        if (checkMatchToBeAborted(_matchId, _winner)) {\r\n            abortMatch(_matchId);\r\n            return;\r\n        }\r\n        var m = matchesMap[_matchId];\r\n        var gamers = m.gamersA;\r\n        uint winPot = m.winPotA;\r\n        uint losePot_ = m.winPotB + m.winPotD;\r\n        if (_winner == 2) {\r\n            gamers = m.gamersB;\r\n            winPot = m.winPotB;\r\n            losePot_ = m.winPotA + m.winPotD;\r\n        } else if (_winner == 1) {\r\n            gamers = m.gamersD;\r\n            winPot = m.winPotD;\r\n            losePot_ = m.winPotA + m.winPotB;\r\n        }\r\n        uint fallbackAmount = 0;\r\n        uint collectedFees = (losePot_ * houseEdge) / uint(100);\r\n        uint jackpotFees = (losePot_ * JACKPOT_FEE) / uint(100);\r\n        uint losePot = losePot_ - collectedFees - jackpotFees;\r\n        for (uint index = 0; index < gamers.length; index += 1) {\r\n            uint winAmount = gamers[index].amount + ((gamers[index].amount * losePot) / winPot);\r\n            if (!gamers[index].wallet.send(winAmount)) {\r\n                fallbackAmount += winAmount;\r\n            }\r\n        }\r\n        jackpotAmount += jackpotFees;\r\n        if (_jackpot) {\r\n            payoutJackpot(_matchId, gamers);\r\n        }\r\n        // pay housecut & reset for next bet\r\n        if (collectedFees > 0) {\r\n            if (!owner.send(collectedFees)) {\r\n                TxMessage(_matchId, TX_N16, collectedFees);\r\n                   // There is a manual way of withdrawing money!\r\n            }\r\n        }\r\n        if (fallbackAmount > 0) {\r\n            if (owner.send(fallbackAmount)) {\r\n                TxMessage(_matchId, TX_N17, fallbackAmount);\r\n            } else {\r\n                TxMessage(_matchId, TX_N18, fallbackAmount);\r\n            }\r\n        }\r\n        clearMatch(_matchId);\r\n        MatchPayoff(_matchId,\r\n                    losePot,\r\n                    collectedFees, \r\n                    jackpotAmount);\r\n    }\r\n\r\n    function clearMatch(uint _matchId) private hasmatch(_matchId) {\r\n        delete matchesMap[_matchId].gamersA;\r\n        delete matchesMap[_matchId].gamersB;\r\n        delete matchesMap[_matchId].gamersD;\r\n        delete matchesMap[_matchId];\r\n        matchCount--;\r\n    }\r\n\r\n    function acceptBet(uint _matchId, uint8 _betState) payable {\r\n        var m = matchesMap[_matchId];\r\n        if (m.number == 0 ) {\r\n            require(addNewMatch(_matchId));\r\n            m = matchesMap[_matchId];\r\n        }\r\n        require(m.bets);\r\n        require(msg.value >= 10 finney); //  && msg.value <= 100 ether\r\n        if (_betState == 0) {\r\n            var gamerA = m.gamersA[m.gamersA.length++];\r\n            gamerA.wallet = msg.sender;\r\n            gamerA.amount = msg.value;\r\n            m.winPotA += msg.value;\r\n        } else if (_betState == 2) {\r\n            var gamerB = m.gamersB[m.gamersB.length++];\r\n            gamerB.wallet = msg.sender;\r\n            gamerB.amount = msg.value;\r\n            m.winPotB += msg.value;\r\n        } else if (_betState == 1) {\r\n            var gamerD = m.gamersD[m.gamersD.length++];\r\n            gamerD.wallet = msg.sender;\r\n            gamerD.amount = msg.value;\r\n            m.winPotD += msg.value;\r\n        }\r\n        BetAccepted(_matchId,\r\n                    _betState,\r\n                    msg.sender,\r\n                    msg.value,\r\n                    block.number);\r\n    }\r\n\r\n    function saveCash(address _receiver, uint _amount) onlyowner {\r\n         require(matchCount == 0);\r\n         require(_amount > 0);\r\n         require(this.balance > _amount);\r\n         // send cash\r\n         if (_receiver.send(_amount)) {\r\n             // confirm\r\n             CashSaved(_amount);\r\n         }\r\n     }\r\n\r\n    function killContract () onlyowner {\r\n        require(matchCount == 0);\r\n        // transfer amount to wallet address\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_houseEdge\",\"type\":\"uint8\"}],\"name\":\"setHouseEdge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"getMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"abortMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHouseEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_winner\",\"type\":\"uint8\"},{\"name\":\"_jackpot\",\"type\":\"bool\"}],\"name\":\"payoutMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMatchCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"},{\"name\":\"_betState\",\"type\":\"uint8\"}],\"name\":\"acceptBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveCash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"eraseMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"betsOff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpotAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TxMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_houseEdge\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_matchCount\",\"type\":\"uint16\"}],\"name\":\"MatchAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bets\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winPotA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winPotB\",\"type\":\"uint256\"}],\"name\":\"MatchGetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_collectedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_jackpotAmount\",\"type\":\"uint256\"}],\"name\":\"MatchPayoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"MatchAborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"BetAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CashSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"JackpotPayoff\",\"type\":\"event\"}]","ContractName":"CryptoBetOn","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27f9069e034ab9f2db4b92c9eab4c2609c27dfc50b1b1aff10e3e9e80a4f0575"}]}