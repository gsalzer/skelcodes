{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Champion is Ownable {\r\n    uint8 constant NUMBER = 1;\r\n    uint8 constant STRING = 0;\r\n    \r\n    /** game statuses **/\r\n    uint8 constant GS_NOT_STARTED = 0;\r\n    uint8 constant GS_IN_PROCESS = 1;\r\n    uint8 constant GS_WAITING_USERS = 2;\r\n    \r\n    uint256 public game = 0;\r\n    \r\n    uint256 public gamePlayerNumber = 0;\r\n    \r\n    uint8 public currentGameStatus;\r\n    \r\n    uint256 public currentGameBlockNumber;\r\n    \r\n    uint256[] public allGames;\r\n    \r\n    mapping(uint256 => uint256[]) internal games;\r\n    \r\n    mapping(uint256 => Rules) internal gamesRules;\r\n    \r\n    mapping(uint256 => address[]) internal gamePlayers;\r\n    \r\n    /** game => user **/\r\n    mapping(uint256 => address) public winners;\r\n    \r\n    mapping(uint256 => mapping(address => uint256[])) internal playerNumbersInGame;\r\n\r\n    mapping(uint256 => uint256) gamePrize;\r\n    \r\n    struct Rules {\r\n        uint8 right;\r\n        uint8 left;\r\n    }\r\n    \r\n    function Champion() {\r\n        currentGameStatus = GS_NOT_STARTED;\r\n        game = block.number;\r\n    }\r\n\r\n    function getAllGames() constant returns(uint256[]) {\r\n        uint256[] memory allgames = new uint256[](allGames.length);\r\n        allgames = allGames;\r\n        return allgames;\r\n    }\r\n\r\n    function getAllGamesCount() constant returns(uint256) {\r\n        return allGames.length;\r\n    }\r\n\r\n    function getWinner(uint256 _game) constant returns (address) {\r\n        return winners[_game];\r\n    }\r\n    \r\n    function setWinner(uint256 _game, address _winner) private returns (bool) {\r\n        winners[_game] = _winner;\r\n    }\r\n    \r\n    function getGameRules(uint256 _game) \r\n            constant returns (uint8 leftSide, uint8 rightSide) \r\n    {\r\n        return (leftSideRule(_game), rightSideRule(_game));\r\n    }\r\n    \r\n    function leftSideRule(uint256 _game) \r\n            private constant returns (uint8) \r\n    {\r\n        return gamesRules[getStartBlock(_game)].left;\r\n    }\r\n    \r\n    function rightSideRule(uint256 _game) \r\n            private constant returns (uint8) \r\n    {\r\n        return gamesRules[getStartBlock(_game)].right;\r\n    }\r\n    \r\n    function getStartBlock(uint256 _game) \r\n            constant returns (uint256) \r\n    {\r\n        return games[_game][0];\r\n    }\r\n\r\n    function getPlayersCountByGame(uint256 _game) \r\n            constant returns (uint256)\r\n    {\r\n        return gamePlayers[_game].length;\r\n    }\r\n    \r\n    function getPlayerNumbersInGame(uint256 _gameBlock, address _palayer) \r\n            constant returns (uint256[])\r\n    {\r\n        return playerNumbersInGame[_gameBlock][_palayer];\r\n    }\r\n    \r\n    function setGamePrize(uint256 _game, uint256 _amount) {\r\n        gamePrize[_game] = _amount;\r\n    }\r\n\r\n    function getGamePrize(uint256 _game) constant returns (uint256) {\r\n        return gamePrize[_game];\r\n    }\r\n\r\n    /** define game rules **/\r\n    function defineGameRules(uint256 _game) private returns (bool) {\r\n        \r\n        Rules memory rules;\r\n        \r\n        if (isNumber(_game)) {\r\n            rules.left = NUMBER;\r\n            rules.right = STRING;\r\n        } else {\r\n            rules.left = STRING;\r\n            rules.right = NUMBER;\r\n        }\r\n        \r\n        gamesRules[_game] = rules;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function isNumber(uint256 _game) private constant returns (bool) {\r\n        bytes32 hash = block.blockhash(_game);\r\n        require(hash != 0x0);\r\n        \r\n        byte b = byte(hash[31]);\r\n        uint hi = uint8(b) / 16;\r\n        uint lo = uint8(b) - 16 * uint8(hi);\r\n        \r\n        if (lo <= 9) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function startGame() returns (bool) {\r\n        require(currentGameStatus == GS_WAITING_USERS);\r\n        currentGameStatus = GS_IN_PROCESS;\r\n        currentGameBlockNumber = game;\r\n        game = block.number;\r\n        gamePlayerNumber = 0;\r\n        \r\n        allGames.push(currentGameBlockNumber);\r\n        \r\n        uint256 startBlock = block.number - 1;\r\n        defineGameRules(startBlock);\r\n        games[currentGameBlockNumber].push(startBlock);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function finishCurrentGame() returns (address) {\r\n        return finishGame(currentGameBlockNumber);\r\n    }\r\n\r\n    function finishGame(uint256 _game) onlyOwner returns (address) {\r\n        require(currentGameBlockNumber != 0);\r\n        require(winners[_game] == 0x0);\r\n        require(currentGameStatus == GS_IN_PROCESS);\r\n\r\n        uint256 steps = getCurrentGameSteps();\r\n        uint256 startBlock = getStartBlock(currentGameBlockNumber);\r\n        require(startBlock + steps < block.number);\r\n        \r\n        uint256 lMin = 1;\r\n        uint256 lMax = 2;\r\n        uint256 rMin = 3;\r\n        uint256 rMax = 4;\r\n        \r\n        for (uint8 i = 1; i <= steps; i++) {\r\n            require(block.blockhash(_game + i) != 0x0);\r\n            (lMin, lMax, rMin, rMax) = processSteps(currentGameBlockNumber, i);\r\n        \r\n            if (lMin == lMax && rMin == rMax && lMin == rMin) {\r\n                address winner = gamePlayers[currentGameBlockNumber][rMax];\r\n                \r\n                setWinner(\r\n                    currentGameBlockNumber, \r\n                    winner\r\n                );\r\n                                \r\n                currentGameBlockNumber = 0;\r\n                currentGameStatus = GS_WAITING_USERS;\r\n                \r\n                return winner;\r\n            }\r\n        }\r\n        \r\n        return 0x0;\r\n    }\r\n    \r\n    function getCurrentGameSteps() constant returns (uint256) {\r\n        return getStepsCount(currentGameBlockNumber);\r\n    }\r\n\r\n    function getStepsCount(uint256 _game) \r\n            constant returns (uint256 y) {\r\n        uint256 x = getPlayersCountByGame(_game);\r\n        assembly {\r\n            let arg := x\r\n            x := sub(x,1)\r\n            x := or(x, div(x, 0x02))\r\n            x := or(x, div(x, 0x04))\r\n            x := or(x, div(x, 0x10))\r\n            x := or(x, div(x, 0x100))\r\n            x := or(x, div(x, 0x10000))\r\n            x := or(x, div(x, 0x100000000))\r\n            x := or(x, div(x, 0x10000000000000000))\r\n            x := or(x, div(x, 0x100000000000000000000000000000000))\r\n            x := add(x, 1)\r\n            let m := mload(0x40)\r\n            mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\r\n            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\r\n            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\r\n            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\r\n            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\r\n            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\r\n            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\r\n            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\r\n            mstore(0x40, add(m, 0x100))\r\n            let value := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\r\n            let a := div(mul(x, value), shift)\r\n            y := div(mload(add(m,sub(255,a))), shift)\r\n            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\r\n        }\r\n    }\r\n\r\n    function processSteps(uint256 _gameBlock, uint256 step) \r\n            constant returns (uint256, uint256, uint256, uint256) {\r\n        require(_gameBlock != 0);\r\n        require((getStartBlock(_gameBlock) + i) < block.number);\r\n        // TODO check \r\n        \r\n        uint256 lMin = 0;\r\n        uint256 lMax = 0;\r\n        uint256 rMin = 0;\r\n        uint256 rMax = gamePlayers[_gameBlock].length - 1;\r\n        \r\n        if (isEvenNumber(rMax)) {\r\n            lMax = rMax / 2;\r\n            rMin = rMax / 2 + 1;\r\n        } else {\r\n            lMax = rMax / 2;\r\n            rMin = rMax / 2 + 1;\r\n        }\r\n        \r\n        if (step == 0) {\r\n            return (lMin, lMax, rMin, rMax);\r\n        } \r\n        \r\n        for (uint i = 1; i <= step; i++) {\r\n            bool isNumberRes = isNumber(getStartBlock(_gameBlock) + i);\r\n            \r\n            if ((isNumberRes && leftSideRule(_gameBlock) == NUMBER) ||\r\n                (!isNumberRes && leftSideRule(_gameBlock) == STRING)\r\n            ) {\r\n                if (lMin == lMax) {\r\n                    rMin = lMin;\r\n                    rMax = lMax;\r\n                    break;\r\n                }\r\n                \r\n                rMax = lMax;\r\n            } else if (isNumberRes && rightSideRule(_gameBlock) == NUMBER ||\r\n                (!isNumberRes && rightSideRule(_gameBlock) == STRING)\r\n            ) {\r\n                if (rMin == rMax) {\r\n                    lMin = rMin;\r\n                    lMax = rMax;\r\n                    break;\r\n                }\r\n                \r\n                lMin = rMin;\r\n            }\r\n            \r\n            if ((rMax - lMin != 1) && isEvenNumber(rMax)) {\r\n                lMax = rMax / 2;\r\n                rMin = rMax / 2 + 1;\r\n            } else if (rMax - lMin != 1) {\r\n                lMax = rMax / 2;\r\n                rMin = rMax / 2 + 1;\r\n            } else {\r\n                lMax = lMin;\r\n                rMin = rMax;\r\n            }\r\n        }\r\n        \r\n        return (lMin, lMax, rMin, rMax);\r\n    }\r\n    \r\n    function isEvenNumber(uint _v1) \r\n            internal constant returns (bool) {\r\n        uint v1u = _v1 * 100;\r\n        uint v2 = 2;\r\n        \r\n        uint vuResult = v1u / v2;\r\n        uint vResult = _v1 / v2;\r\n        \r\n        if (vuResult != vResult * 100) {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /** buy ticket && start game | init game by conditions **/\r\n    function buyTicket(address _player) onlyOwner \r\n            returns (uint256 playerNumber, uint256 gameNumber) {\r\n        if (currentGameStatus == GS_NOT_STARTED) {\r\n            currentGameStatus = GS_WAITING_USERS;\r\n        }\r\n        \r\n        gamePlayers[game].push(_player);\r\n        \r\n        playerNumber = gamePlayerNumber;\r\n        \r\n        playerNumbersInGame[game][_player].push(playerNumber);\r\n        \r\n        gamePlayerNumber++;\r\n        \r\n        return (playerNumber, game);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentGameSteps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllGamesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamePlayerNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameBlock\",\"type\":\"uint256\"},{\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"processSteps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGameBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGameStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameRules\",\"outputs\":[{\"name\":\"leftSide\",\"type\":\"uint8\"},{\"name\":\"rightSide\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameBlock\",\"type\":\"uint256\"},{\"name\":\"_palayer\",\"type\":\"address\"}],\"name\":\"getPlayerNumbersInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"playerNumber\",\"type\":\"uint256\"},{\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getStepsCount\",\"outputs\":[{\"name\":\"y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"finishGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getPlayersCountByGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCurrentGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGamePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_game\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGamePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Champion","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7fa875455f913647ea2dbf8e04ae0e48d8b42456a0a2d6e2f59873f83b58fe62"}]}