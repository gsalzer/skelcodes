{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n mapping (address => uint) public pendingWithdrawals;\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n\r\n\r\nfunction withdraw() {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n}\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\n\r\ncontract AirDrop is Ownable {\r\n\r\n  Token token;\r\n\r\n  event TransferredToken(address indexed to, uint256 value);\r\n  event FailedTransfer(address indexed to, uint256 value);\r\n\r\n  modifier whenDropIsActive() {\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\naddress public creator;\r\n  function AirDrop () {\r\n      address _tokenAddr = creator; //here pass address of your token\r\n      token = Token(_tokenAddr);\r\n  }\r\n\r\n  function isActive() constant returns (bool) {\r\n    return (\r\n        tokensAvailable() > 0 // Tokens must be available to send\r\n    );\r\n  }\r\n  //below function can be used when you want to send every recipeint with different number of tokens\r\n  function sendTokens(address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\r\n    uint256 i = 0;\r\n    while (i < dests.length) {\r\n        uint256 toSend = values[i] ;\r\n        sendInternally(dests[i] , toSend, values[i]);\r\n        i++;\r\n    }\r\n  }\r\n\r\n  // this function can be used when you want to send same number of tokens to all the recipients\r\n  function sendTokensSingleValue(address[] dests, uint256 value) whenDropIsActive onlyOwner external {\r\n    uint256 i = 0;\r\n    uint256 toSend = value;\r\n    while (i < dests.length) {\r\n        sendInternally(dests[i] , toSend, value);\r\n        i++;\r\n    }\r\n  }  \r\n\r\n  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\r\n    if(recipient == address(0)) return;\r\n\r\n    if(tokensAvailable() >= tokensToSend) {\r\n      token.transfer(recipient, tokensToSend);\r\n      TransferredToken(recipient, valueToPresent);\r\n    } else {\r\n      FailedTransfer(recipient, valueToPresent); \r\n    }\r\n  }   \r\n\r\n\r\n  function tokensAvailable() constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function destroy() onlyOwner {\r\n    uint256 balance = tokensAvailable();\r\n    require (balance > 0);\r\n    token.transfer(owner, balance);\r\n    selfdestruct(owner);\r\n  }\r\n}\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract EtherToFARM is Ownable {\r\n using SafeMath for uint;\r\n using SafeMath for uint256;\r\n\r\n\r\nuint256 public totalSupply;// total no of tokens in supply\r\nuint remaining;\r\nuint price;\r\n\r\nmapping (address => uint) investors; //it maps no of FarmCoin given to each address\r\n\r\n function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\nfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\nfunction transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\nfunction ()  payable {// called when ether is send\r\n\r\n    uint256 remaining;\r\n    uint256 totalSupply;\r\n    uint price;\r\n    assert(remaining < totalSupply);\r\n    uint FarmCoin = div(msg.value,price); // calculate no of FarmCoin to be issued depending on the price and ether send\r\n    assert(FarmCoin < sub(totalSupply,remaining)); //FarmCoin available should be greater than the one to be issued\r\n    add(investors[msg.sender],FarmCoin);\r\n    remaining = add(remaining, FarmCoin);\r\n    transfer(msg.sender, FarmCoin);\r\n}\r\n\r\nfunction setPrice(uint _price)\r\n{ //  price need to be set maually as it cannot be done via ethereum network\r\n    uint price;\r\n    price = _price;\r\n}\r\n\r\nfunction giveReward(address _payer,uint _payment) public payable returns (bool _success){\r\n        uint tokenamount = _payment / price;\r\n        return transfer(_payer,tokenamount);\r\n    }    \r\n}\r\n\r\ncontract PayToken is EtherToFARM {\r\n function() public payable{\r\n         if(msg.sender!=owner)\r\n       giveReward(msg.sender,msg.value);\r\n}\r\n}\r\n\r\ncontract Token is EtherToFARM {\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n   \r\nuint constant MAX_UINT = 2**256 - 1;\r\n\r\n/// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited allowance.\r\n/// @param _from Address to transfer from.\r\n/// @param _to Address to transfer to.\r\n/// @param _value Amount to transfer.\r\n/// @return Success of transfer.\r\nfunction transferFrom(address _from, address _to, uint _value)\r\n    public\r\n    returns (bool)\r\n{\r\n    uint allowance = allowed[_from][msg.sender];\r\n    require(balances[_from] >= _value\r\n            && allowance >= _value\r\n            && balances[_to] + _value >= balances[_to]);\r\n    balances[_to] += _value;\r\n    balances[_from] -= _value;\r\n    if (allowance < MAX_UINT) {\r\n        allowed[_from][msg.sender] -= _value;\r\n    }\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\n\r\n//name this contract whatever you'd like\r\ncontract FarmCoin is StandardToken {\r\n\r\n   \r\n    /* Public variables of the token */\r\n\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name = 'FarmCoin';                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol = 'FARM';                 //An identifier: eg SBX\r\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n//\r\n// CHANGE THESE VALUES FOR YOUR TOKEN\r\n//\r\n\r\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\r\n\r\n    function FarmCoin(\r\n        ) {\r\n        balances[msg.sender] = 5000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\r\n        totalSupply = 5000000000000000000000000;                        // Update total supply (100000 for example)\r\n        name = \"FarmCoin\";                                   // Set the name for display purposes\r\n        decimals = 18;                            // Amount of decimals for display purposes\r\n        symbol = \"FARM\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { revert; }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract FarmCoinSale is FarmCoin {\r\n\r\n    uint256 public maxMintable;\r\n    uint256 public totalMinted;\r\n    uint256 public decimals = 18;\r\n    uint public endBlock;\r\n    uint public startBlock;\r\n    uint256 public exchangeRate;\r\n    uint public startTime;\r\n    bool public isFunding;\r\n    address public ETHWallet;\r\n    uint256 public heldTotal;\r\n\r\n    bool private configSet;\r\n    address public creator;\r\n\r\n    mapping (address => uint256) public heldTokens;\r\n    mapping (address => uint) public heldTimeline;\r\n\r\n    event Contribution(address from, uint256 amount);\r\n    event ReleaseTokens(address from, uint256 amount);\r\n\r\n// start and end dates where crowdsale is allowed (both inclusive)\r\n  uint256 constant public START = 1517461200000; // +new Date(2018, 2, 1) / 1000\r\n  uint256 constant public END = 1522555200000; // +new Date(2018, 4, 1) / 1000\r\n\r\n// @return the rate in FARM per 1 ETH according to the time of the tx and the FARM pricing program.\r\n    // @Override\r\n  function getRate() constant returns (uint256 rate) {\r\n    if      (now < START)            return rate = 840; // presale, 40% bonus\r\n    else if (now <= START +  6 days) return rate = 810; // day 1 to 6, 35% bonus\r\n    else if (now <= START + 13 days) return rate = 780; // day 7 to 13, 30% bonus\r\n    else if (now <= START + 20 days) return rate = 750; // day 14 to 20, 25% bonus\r\n    else if (now <= START + 28 days) return rate = 720; // day 21 to 28, 20% bonus\r\n    return rate = 600; // no bonus\r\n  }\r\n\r\n\r\n    function FarmCoinSale() {\r\n        startBlock = block.number;\r\n        maxMintable = 5000000000000000000000000; // 3 million max sellable (18 decimals)\r\n        ETHWallet = 0x3b444fC8c2C45DCa5e6610E49dC54423c5Dcd86E;\r\n        isFunding = true;\r\n        \r\n        creator = msg.sender;\r\n        createHeldCoins();\r\n        startTime = 1517461200000;\r\n        exchangeRate= 600;\r\n        }\r\n\r\n \r\n    // setup function to be ran only 1 time\r\n    // setup token address\r\n    // setup end Block number\r\n    function setup(address TOKEN, uint endBlockTime) {\r\n        require(!configSet);\r\n        endBlock = endBlockTime;\r\n        configSet = true;\r\n    }\r\n\r\n    function closeSale() external {\r\n      require(msg.sender==creator);\r\n      isFunding = false;\r\n    }\r\n\r\n    // CONTRIBUTE FUNCTION\r\n    // converts ETH to TOKEN and sends new TOKEN to the sender\r\n    function contribute() external payable {\r\n        require(msg.value>0);\r\n        require(isFunding);\r\n        require(block.number <= endBlock);\r\n        uint256 amount = msg.value * exchangeRate;\r\n        uint256 total = totalMinted + amount;\r\n        require(total<=maxMintable);\r\n        totalMinted += total;\r\n        ETHWallet.transfer(msg.value);\r\n        Contribution(msg.sender, amount);\r\n    }\r\n\r\n    function deposit() payable {\r\n      create(msg.sender);\r\n    }\r\n    function register(address sender) payable {\r\n    }\r\n    function () payable {\r\n    }\r\n  \r\n    function create(address _beneficiary) payable{\r\n    uint256 amount = msg.value;\r\n    /// \r\n    }\r\n\r\n    function withdraw() {\r\n    require ( msg.sender == owner );\r\n    msg.sender.transfer(this.balance);\r\n}\r\n    // update the ETH/COIN rate\r\n    function updateRate(uint256 rate) external {\r\n        require(msg.sender==creator);\r\n        require(isFunding);\r\n        exchangeRate = rate;\r\n    }\r\n\r\n    // change creator address\r\n    function changeCreator(address _creator) external {\r\n        require(msg.sender==creator);\r\n        creator = _creator;\r\n    }\r\n\r\n    // change transfer status for FarmCoin token\r\n    function changeTransferStats(bool _allowed) external {\r\n        require(msg.sender==creator);\r\n     }\r\n\r\n    // internal function that allocates a specific amount of ATYX at a specific block number.\r\n    // only ran 1 time on initialization\r\n    function createHeldCoins() internal {\r\n        // TOTAL SUPPLY = 5,000,000\r\n        createHoldToken(msg.sender, 1000);\r\n        createHoldToken(0xd9710D829fa7c36E025011b801664009E4e7c69D, 100000000000000000000000);\r\n        createHoldToken(0xd9710D829fa7c36E025011b801664009E4e7c69D, 100000000000000000000000);\r\n    }\r\n\r\n    // function to create held tokens for developer\r\n    function createHoldToken(address _to, uint256 amount) internal {\r\n        heldTokens[_to] = amount;\r\n        heldTimeline[_to] = block.number + 0;\r\n        heldTotal += amount;\r\n        totalMinted += heldTotal;\r\n    }\r\n\r\n    // function to release held tokens for developers\r\n    function releaseHeldCoins() external {\r\n        uint256 held = heldTokens[msg.sender];\r\n        uint heldBlock = heldTimeline[msg.sender];\r\n        require(!isFunding);\r\n        require(held >= 0);\r\n        require(block.number >= heldBlock);\r\n        heldTokens[msg.sender] = 0;\r\n        heldTimeline[msg.sender] = 0;\r\n        ReleaseTokens(msg.sender, held);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"heldTimeline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseHeldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heldTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeTransferStats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"giveReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"heldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TOKEN\",\"type\":\"address\"},{\"name\":\"endBlockTime\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FarmCoinSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bad634c65e9d406ae0b795f24224e9afe0af17c4bba5e01e82a888f0963ad018"}]}