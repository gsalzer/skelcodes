{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract FundCruToken is MintableToken {\r\n  // token identity\r\n  string public constant name = \"FundCru\";\r\n  string public constant symbol = \"FUND\";\r\n  uint256 public constant decimals = 18;\r\n  bytes4 public constant magic = 0x46554E44;    // \"FUND\"\r\n\r\n  // whether token transfering will be blocked during crowdsale timeframe\r\n  bool public blockTransfering;\r\n\r\n  function FundCruToken(bool _blockTransfering) public {\r\n    blockTransfering = _blockTransfering;\r\n  }\r\n\r\n  function blockTransfer() onlyOwner public {\r\n    require(!blockTransfering);\r\n    blockTransfering = true;\r\n  }\r\n\r\n  function unblockTransfer() onlyOwner public {\r\n    require(blockTransfering);\r\n    blockTransfering = false;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(!blockTransfering);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(!blockTransfering);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(!blockTransfering);\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n    require(!blockTransfering);\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n    require(!blockTransfering);\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract FundCruCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // the token being sold\r\n  FundCruToken public fundcruToken;\r\n\r\n  // address where funds/ethers are collected\r\n  address public crowdsaleOwner;\r\n\r\n  // lock-up time of FUND tokens that belongs to Fundcru\r\n  uint256 public fundcruVaultLockTime;\r\n\r\n  // better trust our data, block timestamp can be malicious\r\n  bool public crowdsaleActive = false;\r\n\r\n  // duration of the crowdsale, in seconds\r\n  uint256 public duration;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // minimum accepted transaction\r\n  uint256 public minimumPurchaseInWei;\r\n\r\n  // crowdsale configs\r\n  uint256[] public goalOfState;\r\n  uint256[] public durationOfState;\r\n  uint256[] public conversionRateOfState;\r\n\r\n  // keep track of the current state\r\n  uint256 public currentState;\r\n  uint256 public currentStateStartTime;\r\n\r\n  // and the last state where we have countdown reset mechanism\r\n  uint256 public lastState;\r\n  uint256 public softCapCountDownTimer;\r\n\r\n  event StateTransition(uint256 from_state, uint256 to_state, uint256 timestamp);\r\n\r\n  event TokenPurchase(uint256 current_state,\r\n                      uint256 timestamp,\r\n                      address indexed purchaser,\r\n                      address indexed beneficiary,\r\n                      uint256 transaction_amount_in_wei,\r\n                      uint256 num_tokens);\r\n\r\n  // transaction sanity test\r\n  modifier validPurchase() {\r\n    require(crowdsaleActive);\r\n    require(now >= startTime && now <= endTime);    // buy within valid timeframe\r\n    require(msg.value >= minimumPurchaseInWei);     // buy at least minimumPurchaseInWei\r\n    _;\r\n  }\r\n\r\n  // state transition\r\n  modifier stateTransition() {\r\n    require(currentState >= 0 && currentState <= lastState);\r\n    require(now >= currentStateStartTime);\r\n\r\n    if (currentState == lastState) {\r\n      // If we achieve the soft cap goal, make sure the timeframe is valid\r\n      uint256 totalSupply = fundcruToken.totalSupply();\r\n      if (totalSupply >= goalOfState[lastState - 1]) {\r\n        assert(now < currentStateStartTime + softCapCountDownTimer);\r\n      }\r\n    } else {\r\n      // how long since current state start time\r\n      uint256 timePassed = now - currentStateStartTime;\r\n\r\n      // what state we suppose to be in\r\n      uint256 newState;\r\n      uint256 sumTime = 0;\r\n      for (uint256 i=currentState; i<lastState; i++) {\r\n        sumTime = sumTime.add(durationOfState[i]);\r\n        if (sumTime >= timePassed) {\r\n          newState = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (i == lastState) {\r\n        newState = lastState;\r\n      }\r\n\r\n      // do we need to switch to new state\r\n      if (newState != currentState) {\r\n        StateTransition(currentState, newState, now);\r\n        currentState = newState;\r\n        currentStateStartTime = now;\r\n      }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  function FundCruCrowdsale(uint256   _duration,                // in seconds, convenience for testing\r\n                            uint256   _minimumPurchaseInWei,    // minimum accepted transaction\r\n                            uint256[] _goalOfState,             // goal of each state in FUND\r\n                            uint256[] _durationOfState,         // how long each funding state lasts, in seconds\r\n                            uint256[] _conversionRateOfState,   // ETH -> FUND conversion rate\r\n                            uint256   _softCapCountDownTimer,   // count down timer (in seconds) after soft cap goal reached\r\n                            uint256   _fundcruVaultLockTime,\r\n                            address   _crowdsaleOwner) public {\r\n    require(_duration > 0);\r\n    require(_minimumPurchaseInWei > 0);\r\n    require(_goalOfState.length > 0);\r\n    require(_crowdsaleOwner != 0x0);\r\n\r\n    duration = _duration;\r\n    minimumPurchaseInWei = _minimumPurchaseInWei;\r\n\r\n    lastState = _goalOfState.length - 1;\r\n    require(_durationOfState.length == (lastState + 1) &&\r\n            _conversionRateOfState.length == (lastState + 1));\r\n\r\n    // funding goal configs\r\n    for (uint256 i=0; i<=lastState; i++) {\r\n      goalOfState.push(_goalOfState[i].mul(1 ether)); // 10^18, like our token's decimal\r\n      durationOfState.push(_durationOfState[i]);\r\n      conversionRateOfState.push(_conversionRateOfState[i]);\r\n    }\r\n\r\n    // last state countdown parameters\r\n    softCapCountDownTimer = _softCapCountDownTimer;\r\n\r\n    fundcruToken = createTokenContract();\r\n    assert(fundcruToken.magic() == 0x46554E44);\r\n    assert(fundcruToken.blockTransfering() == true);\r\n\r\n    // locked vault\r\n    fundcruVaultLockTime = _fundcruVaultLockTime;\r\n\r\n    // crowdsale owner\r\n    crowdsaleOwner = _crowdsaleOwner;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (FundCruToken) {\r\n    // don't allow FUND tokens being traded during crowdsale period\r\n    return new FundCruToken(/*_blockTransfering = */true);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable public {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable stateTransition validPurchase {\r\n    require(beneficiary != 0x0);\r\n\r\n    // calculate token amount to be created\r\n    uint256 weiAmount = msg.value;\r\n    uint256 numTokens = weiAmount.mul(conversionRateOfState[currentState]);\r\n\r\n    fundcruToken.mint(beneficiary, numTokens);\r\n    TokenPurchase(currentState, now, msg.sender, beneficiary, weiAmount, numTokens);\r\n\r\n    // get total supply to see if we need to change state\r\n    uint256 totalSupply = fundcruToken.totalSupply();\r\n\r\n    // check if we need to go to new state\r\n    if (currentState < lastState) {\r\n      // what state we suppose to be in after this transaction\r\n      uint256 newState = currentState;\r\n      for (uint256 i=currentState; i<lastState; i++) {\r\n        if (goalOfState[i] > totalSupply) {\r\n          newState = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (i == lastState) {\r\n        newState = lastState;\r\n      }\r\n\r\n      // do we need to switch to new state\r\n      if (newState != currentState) {\r\n        StateTransition(currentState, newState, now);\r\n        currentState = newState;\r\n        currentStateStartTime = now;\r\n      }\r\n    }\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  function startCrowdsale() public onlyOwner {\r\n    require(!crowdsaleActive);\r\n    crowdsaleActive = true;\r\n\r\n    // start now\r\n    startTime = now;\r\n    endTime = startTime.add(duration);\r\n\r\n    // start from state 0\r\n    currentState = 0;\r\n    currentStateStartTime = startTime;\r\n  }\r\n\r\n  function endCrowdsale() public onlyOwner {\r\n    require(crowdsaleActive);\r\n    crowdsaleActive = false;\r\n\r\n    uint256 totalSupply = fundcruToken.totalSupply();\r\n\r\n    // fundcru only offers 50% of tokens, keeps 50% for the company\r\n    // 90% of company tokens will be locked\r\n    uint256 unlocked_tokens = totalSupply.div(10);\r\n    fundcruToken.mint(crowdsaleOwner, unlocked_tokens);\r\n    fundcruToken.mint(this, totalSupply.sub(unlocked_tokens));\r\n\r\n    // stop minting new coins\r\n    fundcruToken.finishMinting();\r\n\r\n    // allow token being traded\r\n    fundcruToken.unblockTransfer();\r\n\r\n    // lock company tokens\r\n    fundcruVaultLockTime = fundcruVaultLockTime.add(now);\r\n  }\r\n\r\n  function withdrawTokens() public onlyOwner {\r\n    // must wait until lock-up time expires\r\n    require(!crowdsaleActive);\r\n    require(now > fundcruVaultLockTime);\r\n\r\n    // withdraw all FUND tokens to company wallet\r\n    fundcruToken.transfer(crowdsaleOwner, fundcruToken.balanceOf(this));\r\n\r\n    // transfer ownership to crowdsale's organizer\r\n    fundcruToken.transferOwnership(crowdsaleOwner);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    crowdsaleOwner.transfer(msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goalOfState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStateStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundcruVaultLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchaseInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conversionRateOfState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapCountDownTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundcruToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"durationOfState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_minimumPurchaseInWei\",\"type\":\"uint256\"},{\"name\":\"_goalOfState\",\"type\":\"uint256[]\"},{\"name\":\"_durationOfState\",\"type\":\"uint256[]\"},{\"name\":\"_conversionRateOfState\",\"type\":\"uint256[]\"},{\"name\":\"_softCapCountDownTimer\",\"type\":\"uint256\"},{\"name\":\"_fundcruVaultLockTime\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from_state\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to_state\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"current_state\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transaction_amount_in_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num_tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FundCruCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000003a9caf000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000009982dd972c24b52bb89e61c5d87fa33375fd442f000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000002625af0000000000000000000000000000000000000000000000000000000000000226000000000000000000000000000000000000000000000000000000000000020d00000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://d9f19b253602c9528501e22f41ecd104836eb1f113638a46147804c6ea82fcd6"}]}