{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() { //This call only first time when contract deployed by person\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() { //This modifier is for checking owner is calling\r\n        if (owner == msg.sender) {\r\n            _;\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Mortal is Ownable {\r\n    \r\n    function kill() {\r\n        if (msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    uint256 tokensForICO;\r\n    uint256 etherRaised;\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _tokens) public returns(bool resultTransfer);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokens) public returns(bool resultTransfer);\r\n\r\n    function approve(address _spender, uint _value) returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\ncontract StandardToken is Token,Mortal,Pausable {\r\n    \r\n    function transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\r\n        require(_to!=0x0);\r\n        require(_value>0);\r\n         if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 totalTokensToTransfer)whenNotPaused returns (bool success) {\r\n        require(_from!=0x0);\r\n        require(_to!=0x0);\r\n        require(totalTokensToTransfer>0);\r\n    \r\n       if (balances[_from] >= totalTokensToTransfer&&allowance(_from,_to)>=totalTokensToTransfer) {\r\n            balances[_to] += totalTokensToTransfer;\r\n            balances[_from] -= totalTokensToTransfer;\r\n            allowed[_from][msg.sender] -= totalTokensToTransfer;\r\n            Transfer(_from, _to, totalTokensToTransfer);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balanceOfUser) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\ncontract DIGI is StandardToken{\r\n    string public constant name = \"DIGI\";\r\n    uint8 public constant decimals = 4;\r\n    string public constant symbol = \"DIGI\";\r\n    uint256 constant priceOfToken=1666666666666666;\r\n    uint256 twoWeeksBonusTime;\r\n    uint256 thirdWeekBonusTime;\r\n    uint256 fourthWeekBonusTime;\r\n    uint256 public deadLine;\r\n    function DIGI(){\r\n       totalSupply=980000000000;  //98 Million\r\n       owner = msg.sender;\r\n       balances[msg.sender] = (980000000000);\r\n       twoWeeksBonusTime=now + 2 * 1 weeks;//set time for first two week relative to deploy time\r\n       thirdWeekBonusTime=twoWeeksBonusTime+1 * 1 weeks;//third week calculate by adding one week by first two week\r\n       fourthWeekBonusTime=thirdWeekBonusTime+1 * 1 weeks;\r\n       deadLine=fourthWeekBonusTime+1 *1 weeks;//deadline is after fourth week just add one week\r\n       etherRaised=0;\r\n    }\r\n    /**\r\n     * @dev directly send ether and transfer token to that account \r\n     */\r\n    function() payable whenNotPaused{\r\n        require(msg.sender != 0x0);\r\n        require(msg.value >= priceOfToken);//must be atleate single token price\r\n        require(now<deadLine);\r\n        uint bonus=0;\r\n        if(now < twoWeeksBonusTime){\r\n            bonus=40;\r\n        }\r\n        else if(now<thirdWeekBonusTime){\r\n          bonus=20;  \r\n        }\r\n        else if (now <fourthWeekBonusTime){\r\n            bonus = 10;\r\n        }\r\n        uint tokensToTransfer=((msg.value*10000)/priceOfToken);\r\n        uint bonusTokens=(tokensToTransfer * bonus) /100;\r\n        tokensToTransfer=tokensToTransfer+bonusTokens;\r\n       if(balances[owner] <tokensToTransfer) //check etiher owner can have token otherwise reject transaction and ether\r\n       {\r\n           revert();\r\n       }\r\n        allowed[owner][msg.sender] += tokensToTransfer;\r\n        bool transferRes=transferFrom(owner, msg.sender, tokensToTransfer);\r\n        if (!transferRes) {\r\n            revert();\r\n        }\r\n        else{\r\n        etherRaised+=msg.value;\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n   * @dev called by the owner to extend deadline relative to last deadLine Time,\r\n   * to accept ether and transfer tokens\r\n   */\r\n   function extendDeadline(uint daysToExtend) onlyOwner{\r\n       deadLine=deadLine +daysToExtend * 1 days;\r\n   }\r\n   \r\n   /**\r\n    * To transfer all balace to any account by only owner\r\n    * */\r\n    function transferFundToAccount(address _accountByOwner) onlyOwner whenPaused returns(uint256 result){\r\n        require(etherRaised>0);\r\n        _accountByOwner.transfer(etherRaised);\r\n        etherRaised=0;\r\n        return etherRaised;\r\n    }\r\n       /**\r\n    * To transfer all balace to any account by only owner\r\n    * */\r\n    function transferLimitedFundToAccount(address _accountByOwner,uint256 balanceToTransfer) onlyOwner whenPaused {\r\n        require(etherRaised>0);\r\n        require(balanceToTransfer<etherRaised);\r\n        _accountByOwner.transfer(balanceToTransfer);\r\n        etherRaised=etherRaised-balanceToTransfer;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"totalTokensToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daysToExtend\",\"type\":\"uint256\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountByOwner\",\"type\":\"address\"},{\"name\":\"balanceToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferLimitedFundToAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balanceOfUser\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountByOwner\",\"type\":\"address\"}],\"name\":\"transferFundToAccount\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DIGI","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://81c8c6287c586946d1d8e50fc5cebcf2d085af122ac6830beb0adfb1d0367b21"}]}