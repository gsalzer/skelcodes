{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/*\r\nOriginal Code from Toshendra Sharma Course at UDEMY\r\nPersonalization and modifications by Fares Akel - f.antonio.akel@gmail.com\r\n*/\r\ncontract token { function transfer(address receiver, uint amount);\r\n                 function balanceOf(address addr);\r\n                }\r\ncontract CrowdSale {\r\n    enum State {\r\n        Fundraising,\r\n        Successful\r\n    }\r\n    State public state = State.Fundraising;\r\n    \r\n    mapping (address => uint) balances;\r\n    address[] contributors;\r\n    uint public totalRaised;\r\n    uint public currentBalance;\r\n    uint public deadline;\r\n    uint public completedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary; \r\n    string campaignUrl;\r\n    uint constant version = 1;\r\n\r\n    event LogFundingReceived(address addr, uint amount, uint currentTotal);\r\n    event LogWinnerPaid(address winnerAddress);\r\n    event LogFundingSuccessful(uint totalRaised);\r\n    event LogFunderInitialized(\r\n        address creator,\r\n        address beneficiary,\r\n        string url,\r\n        uint256 deadline);\r\n    event LogContributorsContributed(address addr, uint amount, uint id);\r\n    event LogContributorsPayout(address addr, uint amount);\r\n\r\n    modifier inState(State _state) {\r\n        if (state != _state) revert();\r\n        _;\r\n    }\r\n    modifier isCreator() {\r\n        if (msg.sender != creator) revert();\r\n        _;\r\n    }\r\n    modifier atEndOfLifecycle() {\r\n        if(!(state == State.Successful && completedAt + 1 hours < now)) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    function CrowdSale(\r\n        uint _timeInMinutesForFundraising,\r\n        string _campaignUrl,\r\n        address _ifSuccessfulSendTo,\r\n        token _addressOfTokenUsedAsReward)\r\n    {\r\n        creator = msg.sender;\r\n        beneficiary = _ifSuccessfulSendTo;\r\n        campaignUrl = _campaignUrl;\r\n        deadline = now + (_timeInMinutesForFundraising * 1 minutes);\r\n        currentBalance = 0;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        LogFunderInitialized(\r\n            creator,\r\n            beneficiary,\r\n            campaignUrl,\r\n            deadline);\r\n    }\r\n    function contribute()\r\n    public\r\n    inState(State.Fundraising) payable returns (uint256)\r\n    {\r\n        uint id;\r\n\r\n        if(contributors.length == 0){\r\n            contributors.push(msg.sender);\r\n            id=0;\r\n        }\r\n        else{\r\n            for(uint i = 0; i < contributors.length; i++)\r\n            {\r\n                if(contributors[i]==msg.sender)\r\n                {\r\n                    id = i;\r\n                    break;\r\n                }\r\n                else if(i == contributors.length - 1)\r\n                {\r\n                    contributors.push(msg.sender);\r\n                    id = i+1;\r\n                }\r\n            }\r\n        }\r\n        balances[msg.sender]+=msg.value;\r\n        totalRaised += msg.value;\r\n        currentBalance = totalRaised;\r\n\r\n        LogContributorsContributed (msg.sender, balances[msg.sender], id);\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        checkIfFundingCompleteOrExpired();\r\n\r\n        return contributors.length - 1; \r\n    }\r\n\r\n    function checkIfFundingCompleteOrExpired() {\r\n        if ( now > deadline ) {\r\n            state = State.Successful;\r\n            LogFundingSuccessful(totalRaised);\r\n            finished();  \r\n            completedAt = now;\r\n        }\r\n    }\r\n\r\n    function payOut()\r\n    public\r\n    inState(State.Successful)\r\n    {\r\n        if (msg.sender == creator){\r\n\r\n            if(!beneficiary.send(this.balance)) {\r\n            revert();\r\n\r\n            }\r\n\r\n        currentBalance = 0;\r\n        LogWinnerPaid(beneficiary);\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n            uint amount = 0;\r\n            address add;\r\n\r\n            for(uint i=0; i<contributors.length ;i++){\r\n                if (contributors[i]==msg.sender){\r\n                    add = contributors[i];\r\n                    amount = balances[add]*9000000/totalRaised;\r\n                    balances[add] = 0;\r\n                    tokenReward.transfer(add, amount);\r\n                    LogContributorsPayout(add, amount);\r\n                    amount = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function finished()\r\n    inState(State.Successful)\r\n    {\r\n        if(!beneficiary.send(this.balance)) {\r\n            revert();\r\n        }\r\n        currentBalance = 0;\r\n\r\n        LogWinnerPaid(beneficiary);\r\n    }\r\n\r\n    function removeContract()\r\n    public\r\n    isCreator()\r\n    atEndOfLifecycle()\r\n    {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function () payable {\r\n        if (msg.value > 0){\r\n            contribute();\r\n        }\r\n        else revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_timeInMinutesForFundraising\",\"type\":\"uint256\"},{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"LogWinnerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogContributorsContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000cd130000000000000000000000000000000000000000000000000000000000000080000000000000000000000000066de62813d9017be9a48c995e90d668dc4d5158000000000000000000000000bacc0a58ecd510597cac918344137c7fb49eb9ad0000000000000000000000000000000000000000000000000000000000000012687474703a2f2f636f696e6c6573732e696f0000000000000000000000000000","Library":"","SwarmSource":"bzzr://fdf8c5bfbba10d5cc4141d70f2ccbe7b0e8efce1a3c2445063a48ecbc746edb4"}]}