{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/*\r\nThis is the API that defines an ERC 20 token, all of these functions must\r\nbe implemented.\r\n*/\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n}\r\n\r\ncontract Dogetoken {\r\n\r\n    // This is the user who is creating the contract, and owns the contract.\r\n    address owner = msg.sender;\r\n\r\n    // This is a flag of whether purchasing has been enabled.\r\n    bool public purchasingAllowed = false;\r\n\r\n    // This is a mapping of address balances.\r\n    mapping (address => uint256) balances;\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Counter for total contributions of ether.\r\n    uint256 public totalContribution = 0;\r\n\r\n    // Counter for total bonus tokens issued\r\n    uint256 public totalBonusTokensIssued = 0;\r\n\r\n    // Total supply of....\r\n    uint256 public totalSupply = 0;\r\n\r\n    // Name of the Token\r\n    function name() constant returns (string) { return \"Dogetoken\"; }\r\n    function symbol() constant returns (string) { return \"DGT\"; }\r\n    function decimals() constant returns (uint8) { return 18; }\r\n\r\n    // Return the balance of a specific address.\r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n\r\n    /**\r\n     * Transfer value number of tokens to address _to.\r\n     * address _to           The address you are sending tokens to.\r\n     * uint256 _value        The number of tokens you are sending.\r\n     * Return whether the transaction was successful.\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (2 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        // Get the balance that the sender has.\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        // Ensure the sender has enough tokens to send.\r\n        bool sufficientFunds = fromBalance >= _value;\r\n\r\n        // Ensure we have not overflowed the value variable. If overflowed\r\n        // is true the transaction will fail.\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n\r\n        if (sufficientFunds && !overflowed) {\r\n            // Deducat balance from sender\r\n            balances[msg.sender] -= _value;\r\n\r\n            // Add balance to recipient\r\n            balances[_to] += _value;\r\n\r\n            // Emit a transfer event.\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 short address attack\r\n        if(msg.data.length < (3 * 32) + 4) { throw; }\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance <= _value;\r\n        bool sufficientAllowance = allowance <= _value;\r\n        bool overflowed = balances[_to] + _value > balances[_to];\r\n\r\n        if (sufficientFunds && sufficientAllowance && !overflowed) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n\r\n            allowed[_from][msg.sender] -= _value;\r\n\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function enablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = true;\r\n    }\r\n\r\n    function disablePurchasing() {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        purchasingAllowed = false;\r\n    }\r\n\r\n    function withdrawForeignTokens(address _tokenContract) returns (bool) {\r\n        if (msg.sender != owner) { throw; }\r\n\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n\r\n    // Return informational variables about the token and contract.\r\n    function getStats() constant returns (uint256, uint256, uint256, bool) {\r\n        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\r\n    }\r\n\r\n    // This function is called whenever someone sends ether to this contract.\r\n    function() payable {\r\n        // If purchasing is not allowed throw an error.\r\n        if (!purchasingAllowed) { throw; }\r\n\r\n        // If 0 is sent throw an error\r\n        if (msg.value == 0) { return; }\r\n\r\n        // Transfer the ether to the owner of the contract.\r\n        owner.transfer(msg.value);\r\n\r\n        // Token per ether rate\r\n        uint256 CONVERSION_RATE = 100000;\r\n\r\n        // Set how many tokens the user gets\r\n        uint256 tokensIssued = (msg.value * CONVERSION_RATE);\r\n\r\n        uint256 bonusTokensIssued = 0;\r\n\r\n        // The bonus is only valid up to a certain amount of ether\r\n        if(totalContribution < 500 ether) {\r\n            // Bonus logic\r\n            if (msg.value >= 100 finney && msg.value < 1 ether) {\r\n                // 5% bonus for 0.1 to 1 ether\r\n                bonusTokensIssued = msg.value * CONVERSION_RATE / 20;\r\n            } else if (msg.value >= 1 ether && msg.value < 2 ether) {\r\n                // 10% bonus for 1 to 2 ether\r\n                bonusTokensIssued = msg.value * CONVERSION_RATE / 10;\r\n            } else if (msg.value >= 2 ether) {\r\n                // 20% bonus for 2+ ether\r\n                bonusTokensIssued = msg.value * CONVERSION_RATE / 5;\r\n            }\r\n        }\r\n\r\n        // Add token bonus tokens to the global counter\r\n        totalBonusTokensIssued += bonusTokensIssued;\r\n\r\n        // Add bonus tokens to the user\r\n        tokensIssued += bonusTokensIssued;\r\n\r\n        totalSupply += tokensIssued;\r\n        balances[msg.sender] += tokensIssued;\r\n\r\n        // Updated the tracker for total ether contributed.\r\n        totalContribution += msg.value;\r\n\r\n        // `this` refers to the contract address. Emit the event that the contract\r\n        // sent tokens to the sender.\r\n        Transfer(address(this), msg.sender, tokensIssued);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusTokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Dogetoken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a1ee6971afa827d4caffd79d3416042425dd10a9d779431b4287c05e745aefe"}]}