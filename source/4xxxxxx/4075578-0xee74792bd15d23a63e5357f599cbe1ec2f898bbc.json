{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n}\r\n\r\n\r\ncontract IndorsePreSale is SafeMath{\r\n    // Fund deposit address\r\n    address public ethFundDeposit = \"0x1c82ee5b828455F870eb2998f2c9b6Cc2d52a5F6\";                              \r\n    address public owner;                                       // Owner of the pre sale contract\r\n    mapping (address => uint256) public whiteList;\r\n\r\n    // presale parameters\r\n    bool public isFinalized;                                    // switched to true in operational state\r\n    uint256 public constant maxLimit =  14000 ether;            // Maximum limit for taking in the money\r\n    uint256 public constant minRequired = 100 ether;            // Minimum contribution per person\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balances;\r\n    \r\n    // events\r\n    event Contribution(address indexed _to, uint256 _value);\r\n    \r\n    modifier onlyOwner() {\r\n      require (msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    // @dev constructor\r\n    function IndorsePreSale() {\r\n      isFinalized = false;                                      //controls pre through crowdsale state\r\n      owner = msg.sender;\r\n      totalSupply = 0;\r\n    }\r\n\r\n    // @dev this function accepts Ether and increases the balances of the contributors\r\n    function() payable {           \r\n      uint256 checkedSupply = safeAdd(totalSupply, msg.value);\r\n      require (msg.value >= minRequired);                        // The contribution needs to be above 100 Ether\r\n      require (!isFinalized);                                    // Cannot accept Ether after finalizing the contract\r\n      require (checkedSupply <= maxLimit);\r\n      require (whiteList[msg.sender] == 1);\r\n      balances[msg.sender] = safeAdd(balances[msg.sender], msg.value);\r\n      \r\n      totalSupply = safeAdd(totalSupply, msg.value);\r\n      Contribution(msg.sender, msg.value);\r\n      ethFundDeposit.transfer(this.balance);                     // send the eth to Indorse multi-sig\r\n    }\r\n    \r\n    // @dev adds an Ethereum address to whitelist\r\n    function setWhiteList(address _whitelisted) onlyOwner {\r\n      whiteList[_whitelisted] = 1;\r\n    }\r\n\r\n    // @dev removed an Ethereum address from whitelist\r\n    function removeWhiteList(address _whitelisted) onlyOwner {\r\n      whiteList[_whitelisted] = 0;\r\n    }\r\n\r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external onlyOwner {\r\n      require (!isFinalized);\r\n      // move to operational\r\n      isFinalized = true;\r\n      ethFundDeposit.transfer(this.balance);                     // send the eth to Indorse multi-sig\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"IndorsePreSale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://69acd243a3c1dec015a38d92333708c13f3a8709b0591f608e822f6fc5741836"}]}