{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) balances;\r\n    function balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }\r\n    // Transfer is disabled for users, as this contract is just a proof of purchase (valueless)\r\n    //function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n* @title Gimmer PreSale Smart Contract\r\n* @author lucas@gimmer.net, jitendra@chittoda.com\r\n*/\r\ncontract GimmerPreSale is ERC20Basic, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Supporter structure, which allows us to track\r\n    * how much the user has bought so far, and if he's flagged as known\r\n    */\r\n    struct Supporter {\r\n        uint256 weiSpent;   // the total amount of Wei this address has sent to this contract\r\n        bool hasKYC;        // if the user has KYC flagged\r\n    }\r\n\r\n    mapping(address => Supporter) public supportersMap; // Mapping with all the campaign supporters\r\n    address public fundWallet;      // Address to forward all Ether to\r\n    address public kycManager;      // Address that manages approval of KYC\r\n    uint256 public tokensSold;      // How many tokens sold in PreSale\r\n    uint256 public weiRaised;       // amount of raised money in wei\r\n\r\n    // Reference value\r\n    uint256 public constant ONE_MILLION = 1000000;\r\n    // Maximum amount that can be sold during the Pre Sale period\r\n    uint256 public constant PRE_SALE_GMRP_TOKEN_CAP = 15 * ONE_MILLION * 1 ether; // 15 Million GMRP Tokens\r\n\r\n    /* Allowed Contribution in Ether */\r\n    uint256 public constant PRE_SALE_30_ETH     = 30 ether;  // Minimum 30 Ether to get 25% Bonus Tokens\r\n    uint256 public constant PRE_SALE_300_ETH    = 300 ether; // Minimum 300 Ether to get 30% Bonus Tokens\r\n    uint256 public constant PRE_SALE_3000_ETH   = 3000 ether;// Minimum 3000 Ether to get 40% Bonus Tokens\r\n\r\n    /* Bonus Tokens based on the ETH Contributed in single transaction */\r\n    uint256 public constant TOKEN_RATE_BASE_RATE = 2500; // Base Price for reference only\r\n    uint256 public constant TOKEN_RATE_25_PERCENT_BONUS = 3125; // 25% Bonus Tokens, when >= 30 ETH & < 300 ETH\r\n    uint256 public constant TOKEN_RATE_30_PERCENT_BONUS = 3250; // 30% Bonus Tokens, when >= 300 ETH & < 3000 ETH\r\n    uint256 public constant TOKEN_RATE_40_PERCENT_BONUS = 3500; // 40% Bonus Tokens, when >= 3000 ETH\r\n\r\n    /* start and end timestamps where investments are allowed (both inclusive) */\r\n    uint256 public constant START_TIME = 1511524800; // GMT: Friday, 24 November 2017 12:00:00\r\n    uint256 public constant END_TIME = 1514894400; // GMT: Tuesday, 2 January  2018 12:00:00\r\n\r\n    /* Token metadata */\r\n    string public constant name = \"GimmerPreSale Token\";\r\n    string public constant symbol = \"GMRP\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    /**\r\n    * @dev Modifier to only allow KYCManager\r\n    */\r\n    modifier onlyKycManager() {\r\n        require(msg.sender == kycManager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser  who bought the tokens\r\n    * @param value      weis paid for purchase\r\n    * @param amount     amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * Event for minting new tokens\r\n    * @param to         The person that received tokens\r\n    * @param amount     Amount of tokens received\r\n    */\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * Event to log a user is approved or disapproved\r\n     * @param user          User who has been approved/disapproved\r\n     * @param isApproved    true : User is approved, false : User is disapproved\r\n     */\r\n    event KYC(address indexed user, bool isApproved);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param _fundWallet           Address to forward all received Ethers to\r\n     * @param _kycManagerWallet     KYC Manager wallet to approve / disapprove user's KYC\r\n     */\r\n    function GimmerPreSale(address _fundWallet, address _kycManagerWallet) public {\r\n        require(_fundWallet != address(0));\r\n        require(_kycManagerWallet != address(0));\r\n\r\n        fundWallet = _fundWallet;\r\n        kycManager = _kycManagerWallet;\r\n    }\r\n\r\n    /* fallback function can be used to buy tokens */\r\n    function () whenNotPaused public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    /* @return true if the transaction can buy tokens, otherwise false */\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= START_TIME && now <= END_TIME;\r\n        bool higherThanMin30ETH = msg.value >= PRE_SALE_30_ETH;\r\n        return withinPeriod && higherThanMin30ETH;\r\n    }\r\n\r\n    /* low level token purchase function */\r\n    function buyTokens() whenNotPaused public payable {\r\n        address sender = msg.sender;\r\n\r\n        // make sure the user buying tokens has KYC\r\n        require(userHasKYC(sender));\r\n        require(validPurchase());\r\n\r\n        // calculate token amount to be created\r\n        uint256 weiAmountSent = msg.value;\r\n        uint256 rate = getRate(weiAmountSent);\r\n        uint256 newTokens = weiAmountSent.mul(rate);\r\n\r\n        // look if we have not yet reached the cap\r\n        uint256 totalTokensSold = tokensSold.add(newTokens);\r\n        require(totalTokensSold <= PRE_SALE_GMRP_TOKEN_CAP);\r\n\r\n        // update supporter state\r\n        Supporter storage sup = supportersMap[sender];\r\n        uint256 totalWei = sup.weiSpent.add(weiAmountSent);\r\n        sup.weiSpent = totalWei;\r\n\r\n        // update contract state\r\n        weiRaised = weiRaised.add(weiAmountSent);\r\n        tokensSold = totalTokensSold;\r\n\r\n        // finally mint the coins\r\n        mint(sender, newTokens);\r\n        TokenPurchase(sender, weiAmountSent, newTokens);\r\n\r\n        // and forward the funds to the wallet\r\n        forwardFunds();\r\n    }\r\n\r\n    /**\r\n     * returns the rate the user will be paying at,\r\n     * based on the amount of wei sent to the contract\r\n     */\r\n    function getRate(uint256 weiAmount) public pure returns (uint256) {\r\n        if (weiAmount >= PRE_SALE_3000_ETH) {\r\n            return TOKEN_RATE_40_PERCENT_BONUS;\r\n        } else if(weiAmount >= PRE_SALE_300_ETH) {\r\n            return TOKEN_RATE_30_PERCENT_BONUS;\r\n        } else if(weiAmount >= PRE_SALE_30_ETH) {\r\n            return TOKEN_RATE_25_PERCENT_BONUS;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send ether to the fund collection wallet\r\n     * override to create custom fund forwarding mechanisms\r\n     */\r\n    function forwardFunds() internal {\r\n        fundWallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > END_TIME;\r\n    }\r\n\r\n    /**\r\n    * @dev Approves an User's KYC\r\n    * @param _user The user to flag as known\r\n    */\r\n    function approveUserKYC(address _user) onlyKycManager public {\r\n        Supporter storage sup = supportersMap[_user];\r\n        sup.hasKYC = true;\r\n        KYC(_user, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Disapproves an User's KYC\r\n     * @param _user The user to flag as unknown / suspecious\r\n     */\r\n    function disapproveUserKYC(address _user) onlyKycManager public {\r\n        Supporter storage sup = supportersMap[_user];\r\n        sup.hasKYC = false;\r\n        KYC(_user, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Changes the KYC manager to a new address\r\n    * @param _newKYCManager The new address that will be managing KYC approval\r\n    */\r\n    function setKYCManager(address _newKYCManager) onlyOwner public {\r\n        require(_newKYCManager != address(0));\r\n        kycManager = _newKYCManager;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns if an users has KYC approval or not\r\n    * @return A boolean representing the user's KYC status\r\n    */\r\n    function userHasKYC(address _user) public constant returns (bool) {\r\n        return supportersMap[_user].hasKYC;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the weiSpent of a user\r\n     */\r\n    function userWeiSpent(address _user) public constant returns (uint256) {\r\n        return supportersMap[_user].weiSpent;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) internal returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_40_PERCENT_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newKYCManager\",\"type\":\"address\"}],\"name\":\"setKYCManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userHasKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_3000_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_30_PERCENT_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_300_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_25_PERCENT_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"disapproveUserKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"approveUserKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_RATE_BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userWeiSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_30_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_GMRP_TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportersMap\",\"outputs\":[{\"name\":\"weiSpent\",\"type\":\"uint256\"},{\"name\":\"hasKYC\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundWallet\",\"type\":\"address\"},{\"name\":\"_kycManagerWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"KYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GimmerPreSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008c789463412b2697185e103ded5f75b9b3931a84000000000000000000000000bb3628807c424b58b8db1ae5e304255b84581af1","Library":"","SwarmSource":"bzzr://fe4617084ec6480ddd738ef8d5fd6a0b23974db354a1003cf18991cc3e67a16d"}]}