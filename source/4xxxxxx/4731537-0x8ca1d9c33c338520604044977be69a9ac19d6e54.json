{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'PREVE' 'Presale EVE Tokens' token contract\r\n//\r\n// Deployed to : {TBA}\r\n// Symbol      : PREVE\r\n// Name        : Presale EVE Tokens\r\n// Total supply: Minted\r\n// Decimals    : 18\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Presale Whitelist Interface\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryPresaleWhitelist {\r\n    mapping(address => uint) public whitelist;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Parity PICOPS Whitelist Interface\r\n// ----------------------------------------------------------------------------\r\ncontract PICOPSCertifier {\r\n    function certified(address) public constant returns (bool);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals, minting and\r\n// transferable flag. See:\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n\r\n    bool public transferable;\r\n    bool public mintable = true;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event MintingDisabled();\r\n    event TransfersEnabled();\r\n\r\n    function ERC20Token(string _symbol, string _name, uint8 _decimals) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // --- ERC20 standard functions ---\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(transferable);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(transferable);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(transferable);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // --- Additions over ERC20 ---\r\n    function disableMinting() internal {\r\n        require(mintable);\r\n        mintable = false;\r\n        MintingDisabled();\r\n    }\r\n    function enableTransfers() public onlyOwner {\r\n        require(!transferable);\r\n        transferable = true;\r\n        TransfersEnabled();\r\n    }\r\n    function mint(address tokenOwner, uint tokens) internal {\r\n        require(mintable);\r\n        balances[tokenOwner] = balances[tokenOwner].add(tokens);\r\n        _totalSupply = _totalSupply.add(tokens);\r\n        Transfer(address(0), tokenOwner, tokens);\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Presale Token Contract\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryPresale is ERC20Token {\r\n    address public wallet;\r\n    // 9:00pm, 14 December GMT-5 => 02:00 15 December UTC => 13:00 15 December AEST => 1513303200\r\n    // new Date(1513303200 * 1000).toUTCString() =>  \"Fri, 15 Dec 2017 02:00:00 UTC\"\r\n    uint public constant START_DATE = 1513303200;\r\n    bool public closed;\r\n    uint public ethMinContribution = 20 ether;\r\n    uint public constant TEST_CONTRIBUTION = 0.01 ether;\r\n    uint public usdCap = 2000000;\r\n    // ETH/USD 14 Dec 2017 ~ 16:40 AEST => 730 from CMC\r\n    uint public usdPerKEther = 730000;\r\n    uint public contributedEth;\r\n    uint public contributedUsd;\r\n    DeveryPresaleWhitelist public whitelist;\r\n    PICOPSCertifier public picopsCertifier;\r\n\r\n    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\r\n    event EthMinContributionUpdated(uint oldEthMinContribution, uint newEthMinContribution);\r\n    event UsdCapUpdated(uint oldUsdCap, uint newUsdCap);\r\n    event UsdPerKEtherUpdated(uint oldUsdPerKEther, uint newUsdPerKEther);\r\n    event WhitelistUpdated(address indexed oldWhitelist, address indexed newWhitelist);\r\n    event PICOPSCertifierUpdated(address indexed oldPICOPSCertifier, address indexed newPICOPSCertifier);\r\n    event Contributed(address indexed addr, uint ethAmount, uint ethRefund, uint usdAmount, uint contributedEth, uint contributedUsd);\r\n\r\n    function DeveryPresale() public ERC20Token(\"PREVE\", \"Presale EVE Tokens\", 18) {\r\n        wallet = owner;\r\n    }\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        WalletUpdated(wallet, _wallet);\r\n        wallet = _wallet;\r\n    } \r\n    function setEthMinContribution(uint _ethMinContribution) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        EthMinContributionUpdated(ethMinContribution, _ethMinContribution);\r\n        ethMinContribution = _ethMinContribution;\r\n    } \r\n    function setUsdCap(uint _usdCap) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        UsdCapUpdated(usdCap, _usdCap);\r\n        usdCap = _usdCap;\r\n    } \r\n    function setUsdPerKEther(uint _usdPerKEther) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        UsdPerKEtherUpdated(usdPerKEther, _usdPerKEther);\r\n        usdPerKEther = _usdPerKEther;\r\n    }\r\n    function setWhitelist(address _whitelist) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        WhitelistUpdated(address(whitelist), _whitelist);\r\n        whitelist = DeveryPresaleWhitelist(_whitelist);\r\n    }\r\n    function setPICOPSCertifier(address _picopsCertifier) public onlyOwner {\r\n        // require(now <= START_DATE);\r\n        PICOPSCertifierUpdated(address(picopsCertifier), _picopsCertifier);\r\n        picopsCertifier = PICOPSCertifier(_picopsCertifier);\r\n    }\r\n    function addressCanContribute(address _addr) public view returns (bool) {\r\n        return whitelist.whitelist(_addr) > 0 || picopsCertifier.certified(_addr);\r\n    }\r\n    function ethCap() public view returns (uint) {\r\n        return usdCap * 10**uint(3 + 18) / usdPerKEther;\r\n    }\r\n    function closeSale() public onlyOwner {\r\n        require(!closed);\r\n        closed = true;\r\n        disableMinting();\r\n    }\r\n    function () public payable {\r\n        require(now >= START_DATE || (msg.sender == owner && msg.value == TEST_CONTRIBUTION));\r\n        require(!closed);\r\n        require(addressCanContribute(msg.sender));\r\n        require(msg.value >= ethMinContribution || (msg.sender == owner && msg.value == TEST_CONTRIBUTION));\r\n        uint ethAmount = msg.value;\r\n        uint ethRefund = 0;\r\n        if (contributedEth.add(ethAmount) > ethCap()) {\r\n            ethAmount = ethCap().sub(contributedEth);\r\n            ethRefund = msg.value.sub(ethAmount);\r\n        }\r\n        require(ethAmount > 0);\r\n        uint usdAmount = ethAmount * usdPerKEther / 10**uint(3 + 18);\r\n        contributedEth = contributedEth.add(ethAmount);\r\n        contributedUsd = contributedUsd.add(usdAmount);\r\n        mint(msg.sender, ethAmount);\r\n        wallet.transfer(ethAmount);\r\n        Contributed(msg.sender, ethAmount, ethRefund, usdAmount, contributedEth, contributedUsd);\r\n        if (ethRefund > 0) {\r\n            msg.sender.transfer(ethRefund);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ethMinContribution\",\"type\":\"uint256\"}],\"name\":\"setEthMinContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEST_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdCap\",\"type\":\"uint256\"}],\"name\":\"setUsdCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethMinContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_picopsCertifier\",\"type\":\"address\"}],\"name\":\"setPICOPSCertifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picopsCertifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributedEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerKEther\",\"type\":\"uint256\"}],\"name\":\"setUsdPerKEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressCanContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldEthMinContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEthMinContribution\",\"type\":\"uint256\"}],\"name\":\"EthMinContributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdCap\",\"type\":\"uint256\"}],\"name\":\"UsdCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldUsdPerKEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUsdPerKEther\",\"type\":\"uint256\"}],\"name\":\"UsdPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldWhitelist\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWhitelist\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldPICOPSCertifier\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPICOPSCertifier\",\"type\":\"address\"}],\"name\":\"PICOPSCertifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributedUsd\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DeveryPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4ef59850afaa59a9bbbb6726c9387192c52b5d8cb196dce296bddb71e19a90bc"}]}