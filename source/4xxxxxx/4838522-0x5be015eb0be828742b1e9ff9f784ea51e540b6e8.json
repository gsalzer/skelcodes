{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n* 'LOOK' token sale contract\r\n*\r\n* Refer to https://lookscoin.com/ for further information.\r\n* \r\n* Developer: LookRev\r\n*\r\n*/\r\n\r\n/*\r\n * ERC20 Token Standard\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _who) constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool ok);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool ok);\r\n    function approve(address _spender, uint256 _value) returns (bool ok);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n  /**\r\n   * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n   */\r\ncontract SafeMath {\r\n    uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Add two uint256 values, revert in case of overflow.\r\n     *\r\n     * @param a first value to add\r\n     * @param b second value to add\r\n     * @return a + b\r\n     */\r\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n        require (a <= MAX_UINT256 - b);\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * Subtract one uint256 value from another, throw in case of underflow.\r\n     *\r\n     * @param a value to subtract from\r\n     * @param b value to subtract\r\n     * @return a - b\r\n     */\r\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * Multiply two uint256 values, throw in case of overflow.\r\n     *\r\n     * @param a first value to multiply\r\n     * @param b second value to multiply\r\n     * @return a * b\r\n     */\r\n    function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n        if (a == 0 || b == 0) return 0;\r\n        require (a <= MAX_UINT256 / b);\r\n        return a * b;\r\n    }\r\n}\r\n\r\n/*\r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Ownable {\r\n    address owner;\r\n    address newOwner;\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Allows execution by the owner only.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transferring the contract ownership to the new owner.\r\n     *\r\n     * @param _newOwner new contractor owner\r\n     */\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        if (_newOwner != address(0)) {\r\n          newOwner = _newOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Accept the contract ownership by the new owner.\r\n     *\r\n     */\r\n    function acceptOwnership() {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n/**\r\n* Standard Token Smart Contract that could be used as a base contract for\r\n* ERC-20 token contracts.\r\n*/\r\ncontract StandardToken is ERC20, Ownable, SafeMath {\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the numbers of tokens belonging\r\n     * to these token holders.\r\n     */\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the mapping of addresses of\r\n     * spenders to the allowances set by these token holders to these spenders.\r\n     */\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * Create new Standard Token contract.\r\n     */\r\n    function StandardToken() {\r\n      // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the\r\n     *        owner of\r\n     * @return number of tokens currently belonging to the owner of given address\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _amount number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        // avoid wasting gas on 0 token transfers\r\n        if(_amount <= 0) return false;\r\n        if (msg.sender == _to) return false;\r\n        if (balances[msg.sender] < _amount) return false;\r\n        if (balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender],_amount);\r\n            balances[_to] = safeAdd(balances[_to],_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _amount number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        // avoid wasting gas on 0 token transfers\r\n        if(_amount <= 0) return false;\r\n        if(_from == _to) return false;\r\n        if (balances[_from] < _amount) return false;\r\n        if (_amount > allowed[_from][msg.sender]) return false;\r\n\r\n        balances[_from] = safeSub(balances[_from],_amount);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\r\n        balances[_to] = safeAdd(balances[_to],_amount);\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _amount number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_amount != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n           return false;\r\n        }\r\n        if (balances[msg.sender] < _amount) {\r\n            return false;\r\n        }\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n     }\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred\r\n     *        from the owner of\r\n     * @param _spender address to get number of tokens allowed to be transferred\r\n     *        by the owner of\r\n     * @return number of tokens given spender is currently allowed to transfer\r\n     *         from given owner\r\n     */\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n       return allowed[_owner][_spender];\r\n     }\r\n}\r\n\r\n/**\r\n * LOOK Token Sale Contract\r\n *\r\n * The token sale controller, allows contributing ether in exchange for LOOK coins.\r\n * The price (exchange rate with ETH) remains fixed for the entire duration of the token sale.\r\n * VIP ranking is recorded at the time when the token holding address first meet VIP holding level.\r\n * VIP ranking is valid for the lifetime of a token wallet address, as long as it meets VIP holding level.\r\n * VIP ranking is used to calculate priority when competing with other bids for the\r\n * same product or service on the platform. \r\n * Higher VIP ranking (with earlier timestamp) has higher priority.\r\n * Higher VIP ranking address can outbid other lower ranking addresses once per selling window or promotion period.\r\n * Usage of the LOOK token, VIP ranking and bid priority will be described on token website.\r\n *\r\n */\r\ncontract LooksCoin is StandardToken {\r\n\r\n    /**\r\n     * Address of the owner of this smart contract.\r\n     */\r\n    address wallet = 0x0;\r\n\r\n    /**\r\n    * Mapping for VIP rank for qualified token holders\r\n    * Higher VIP ranking (with earlier timestamp) has higher bidding priority when competing \r\n    * for the same item on platform. \r\n    * Higher VIP ranking address can outbid other lower ranking addresses once per selling window or promotion period.\r\n    * Usage of the VIP ranking and bid priority will be described on token website.\r\n    */\r\n    mapping (address => uint256) viprank;\r\n\r\n    /**\r\n     * Minimium contribution to record a VIP block\r\n     * Token holding address needs at least 10 ETH worth of LOOK tokens to be ranked as VIP\r\n    */\r\n    uint256 public VIP_MINIMUM = 1000000;\r\n\r\n    /**\r\n     * Initial number of tokens.\r\n     */\r\n    uint256 constant INITIAL_TOKENS_COUNT = 20000000000;\r\n\r\n    /**\r\n     * Total number of tokens ins circulation.\r\n     */\r\n    uint256 tokensCount;\r\n\r\n    // initial price in wei (numerator)\r\n    uint256 public constant TOKEN_PRICE_N = 1e13;\r\n    // initial price in wei (denominator)\r\n    uint256 public constant TOKEN_PRICE_D = 1;\r\n    // 1 ETH = 100000 LOOK tokens\r\n    // 200000 ETH = 20000000000 LOOK tokens\r\n\r\n    /**\r\n     * Create new LOOK token Smart Contract, make message sender to be the\r\n     * owner of smart contract, issue given number of tokens and give them to\r\n     * message sender.\r\n     */\r\n    function LooksCoin() payable {\r\n        owner = msg.sender;\r\n        wallet = msg.sender;\r\n        tokensCount = INITIAL_TOKENS_COUNT;\r\n        balances[owner] = tokensCount;\r\n    }\r\n\r\n    /**\r\n     * Get name of this token.\r\n     *\r\n     * @return name of this token\r\n     */\r\n    function name() constant returns (string name) {\r\n      return \"LOOK\";\r\n    }\r\n\r\n    /**\r\n     * Get symbol of this token.\r\n     *\r\n     * @return symbol of this token\r\n     */\r\n    function symbol() constant returns (string symbol) {\r\n      return \"LOOK\";\r\n    }\r\n\r\n    /**\r\n     * Get number of decimals for this token.\r\n     *\r\n     * @return number of decimals for this token\r\n     */\r\n    function decimals () constant returns (uint8 decimals) {\r\n      return 6;\r\n    }\r\n\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply() constant returns (uint256 supply) {\r\n      return tokensCount;\r\n    }\r\n\r\n    /**\r\n     * Set new wallet address for the smart contract.\r\n     * May only be called by smart contract owner.\r\n     *\r\n     * @param _wallet new wallet address of the smart contract\r\n     */\r\n    function setWallet(address _wallet) onlyOwner {\r\n        wallet = _wallet;\r\n        WalletUpdated(wallet);\r\n    }\r\n    event WalletUpdated(address newWallet);\r\n\r\n    /**\r\n     * Get VIP rank of a given owner.\r\n     * VIP ranking is valid for the lifetime of a token wallet address, as long as it meets VIP holding level.\r\n     *\r\n     * @param participant address to get the vip rank\r\n     * @return vip rank of the owner of given address\r\n     */\r\n    function getVIPRank(address participant) constant returns (uint256 rank) {\r\n        if (balances[participant] < VIP_MINIMUM) {\r\n            return 0;\r\n        }\r\n        return viprank[participant];\r\n    }\r\n\r\n    // fallback\r\n    function() payable {\r\n        buyToken();\r\n    }\r\n\r\n    /**\r\n     * Accept ethers and other currencies to buy tokens during the token sale\r\n     */\r\n    function buyToken() public payable returns (uint256 amount)\r\n    {\r\n        // Calculate number of tokens for contributed ETH\r\n        uint256 tokens = safeMul(msg.value, TOKEN_PRICE_D) / TOKEN_PRICE_N;\r\n\r\n        // Add tokens purchased to account's balance and total supply\r\n        balances[msg.sender] = safeAdd(balances[msg.sender],tokens);\r\n        tokensCount = safeAdd(tokensCount,tokens);\r\n\r\n        // Log the tokens purchased \r\n        Transfer(0x0, msg.sender, tokens);\r\n        // - buyer = participant\r\n        // - ethers = msg.value\r\n        // - participantTokenBalance = balances[participant]\r\n        // - tokens = tokens\r\n        // - totalTokensCount = tokensCount\r\n        TokensBought(msg.sender, msg.value, balances[msg.sender], tokens, tokensCount);\r\n\r\n        // Contribution timestamp is recorded for VIP rank\r\n        // Recorded timestamp for VIP ranking should always be earlier than the current time\r\n        if (balances[msg.sender] >= VIP_MINIMUM && viprank[msg.sender] == 0) {\r\n            viprank[msg.sender] = now;\r\n        }\r\n\r\n        // Transfer the contributed ethers to the crowdsale wallet\r\n        assert(wallet.send(msg.value));\r\n        return tokens;\r\n    }\r\n\r\n    event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 participantTokenBalance, uint256 tokens, uint256 totalTokensCount);\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _amount number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        return StandardToken.transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _amount number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success)\r\n    {\r\n        return StandardToken.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * Burn given number of tokens belonging to message sender.\r\n     *\r\n     * @param _amount number of tokens to burn\r\n     * @return true on success, false on error\r\n     */\r\n    function burnTokens(uint256 _amount) returns (bool success) {\r\n        if (_amount <= 0) return false;\r\n        if (_amount > tokensCount) return false;\r\n        if (_amount > balances[msg.sender]) return false;\r\n        balances[msg.sender] = safeSub(balances[msg.sender],_amount);\r\n        tokensCount = safeSub(tokensCount,_amount);\r\n        Transfer(msg.sender, 0x0, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_D\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIP_MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_N\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getVIPRank\",\"outputs\":[{\"name\":\"rank\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participantTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokensCount\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LooksCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f31b1d0d190a20919ea4c12010087d13076c0f6dc61144c822f6842f28cae12"}]}