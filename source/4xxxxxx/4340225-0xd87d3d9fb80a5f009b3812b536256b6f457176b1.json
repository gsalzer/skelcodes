{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // Result must be a positive or zero\r\n        assert(b <= a); \r\n        return a - b;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        // Result must be a positive or zero\r\n        if (0 < c) c = 0;   \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  // The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n *  Main contract: \r\n *  *) You can refund eth*3 only between \"refundTime\" and \"ownerTime\".\r\n *  *) The creator can only get the contract balance after \"ownerTime\".  \r\n *  *) IMPORTANT! If the contract balance is less (you eth*3) then you get only half of the balance.\r\n *  *) For 3x refund you must pay a fee 0.1 Eth.\r\n*/\r\ncontract Multiple3x is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address=>uint) public deposits;\r\n    uint public refundTime = 1507719600;     // GMT: 11 October 2017, 11:00\r\n    uint public ownerTime = (refundTime + 1 minutes);   // +1 minute\r\n    uint maxDeposit = 1 ether;  \r\n    uint minDeposit = 100 finney;   // 0.1 eth\r\n\r\n\r\n    function() payable {\r\n        deposit();\r\n    }\r\n    \r\n    function deposit() payable { \r\n        require(now < refundTime);\r\n        require(msg.value >= minDeposit);\r\n        \r\n        uint256 dep = deposits[msg.sender];\r\n        uint256 sumDep = msg.value.add(dep);\r\n\r\n        if (sumDep > maxDeposit){\r\n            msg.sender.send(sumDep.sub(maxDeposit)); // return of overpaid eth \r\n            deposits[msg.sender] = maxDeposit;\r\n        }\r\n        else{\r\n            deposits[msg.sender] = sumDep;\r\n        }\r\n    }\r\n    \r\n    function refund() payable { \r\n        require(now >= refundTime && now < ownerTime);\r\n        require(msg.value >= 100 finney);        // fee for refund\r\n        \r\n        uint256 dep = deposits[msg.sender];\r\n        uint256 depHalf = this.balance.div(2);\r\n        uint256 dep3x = dep.mul(3);\r\n        deposits[msg.sender] = 0;\r\n\r\n        if (this.balance > 0 && dep3x > 0){\r\n            if (dep3x > this.balance){\r\n                msg.sender.send(dep3x);     // refund 3x\r\n            }\r\n            else{\r\n                msg.sender.send(depHalf);   // refund half of balance\r\n            }\r\n        }\r\n    }\r\n    \r\n    function refundOwner() { \r\n        require(now >= ownerTime);\r\n        if(owner.send(this.balance)){\r\n            suicide(owner);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Multiple3x","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4cea4ba1f6c8276b9f5a2989c88a4161aa8deeea03af23ac0e990b072fdde806"}]}