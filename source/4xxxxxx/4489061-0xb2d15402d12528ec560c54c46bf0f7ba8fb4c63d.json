{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Math operations with safety checks that throw on error\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// Simpler version of ERC20 interface\r\n\r\ncontract ERC20Basic {\r\n    uint256 _totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// Basic version of StandardToken, with no allowances\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// ERC20 interface\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Standard ERC20 token - Implementation of the basic standard token\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n// Burnable contract\r\n\r\ncontract Burnable is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// Ownable contract\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// Carblox Token\r\n\r\ncontract CarbloxToken is StandardToken, Ownable, Burnable {\r\n\r\n    string public constant name = \"Carblox Token\";\r\n    string public constant symbol = \"CRX\";\r\n    uint256 public constant decimals = 3;\r\n    uint256 public constant initialSupply = 100000000 * 10**3;\r\n\r\n    function CarbloxToken() public {\r\n        _totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n}\r\n\r\n\r\n// Carblox preICO contract\r\n\r\ncontract CarbloxPreICO is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    CarbloxToken token;\r\n\r\n    uint256 public constant RATE = 7500;\r\n    uint256 public constant START = 1509980400; // Mon, 06 Nov 2017 15:00\r\n    uint256 public constant DAYS = 30;\r\n  \r\n    uint256 public constant initialTokens = 7801500 * 10**3;\r\n    bool public initialized = false;\r\n    uint256 public raisedAmount = 0;\r\n    uint256 public participants = 0;\r\n\r\n    event BoughtTokens(address indexed to, uint256 value);\r\n\r\n    modifier whenSaleIsActive() {\r\n        assert(isActive());\r\n        _;\r\n    }\r\n\r\n    function CarbloxPreICO(address _tokenAddr) public {\r\n        require(_tokenAddr != 0);\r\n        token = CarbloxToken(_tokenAddr);\r\n    }\r\n\r\n    function initialize() public onlyOwner {\r\n        require(initialized == false);\r\n        require(tokensAvailable() == initialTokens);\r\n        initialized = true;\r\n    }\r\n\r\n    function () public payable {\r\n        require(msg.value >= 100000000000000000);\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable whenSaleIsActive {\r\n\r\n        uint256 finneyAmount =  msg.value.div(1 finney);\r\n        uint256 tokens = finneyAmount.mul(RATE);\r\n        uint256 bonus = getBonus(tokens);\r\n        \r\n        tokens = tokens.add(bonus);\r\n\r\n        BoughtTokens(msg.sender, tokens);\r\n        raisedAmount = raisedAmount.add(msg.value);\r\n        participants = participants.add(1);\r\n\r\n        token.transfer(msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function getBonus(uint256 _tokens) public constant returns (uint256) {\r\n\r\n        require(_tokens > 0);\r\n        \r\n        if (START <= now && now < START + 5 days) {\r\n\r\n            return _tokens.mul(30).div(100); // 30% days 1-5\r\n\r\n        } else if (START + 5 days <= now && now < START + 10 days) {\r\n\r\n            return _tokens.div(5); // 20% days 6-10\r\n\r\n        } else if (START + 10 days <= now && now < START + 15 days) {\r\n\r\n            return _tokens.mul(15).div(100); // 15% days 11-15\r\n\r\n        } else if (START + 15 days <= now && now < START + 20 days) {\r\n\r\n            return _tokens.div(10); // 10% days 16-20\r\n\r\n        } else if (START + 20 days <= now && now < START + 25 days) {\r\n\r\n            return _tokens.div(20); // 5% days 21-25\r\n\r\n        } else {\r\n\r\n            return 0;\r\n\r\n        }\r\n    }\r\n    \r\n    function isActive() public constant returns (bool) {\r\n        return (\r\n            initialized == true &&\r\n            now >= START &&\r\n            now <= START.add(DAYS * 1 days)\r\n        );\r\n    }\r\n\r\n    function tokensAvailable() public constant returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        \r\n        // Unsold tokens are burned\r\n        \r\n        uint256 balance = token.balanceOf(this);\r\n\r\n        if (balance > 0) {\r\n            token.burn(balance);\r\n        }\r\n\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"}]","ContractName":"CarbloxPreICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006221bb984591d60a15132b0ce2c71b0599fa0f08","Library":"","SwarmSource":"bzzr://2dfffb5fd17d48bf5f00f04776432c644fea42dccac5a752d3b152d9fa85bdfb"}]}