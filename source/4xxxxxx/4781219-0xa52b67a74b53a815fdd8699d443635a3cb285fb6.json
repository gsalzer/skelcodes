{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event ChangedOwner(address indexed new_owner);\r\n\r\n    /**\r\n     * Functionality\r\n     */\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner external {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n            newOwner = 0x0;\r\n            ChangedOwner(owner);\r\n        }\r\n    }\r\n}\r\n\r\n// basic functionality from token contract\r\ncontract Token {\r\n    function transferFrom(address from, address to, uint amount) returns (bool);\r\n    function transfer(address to, uint amount) returns(bool);\r\n    function balanceOf(address addr) constant returns(uint);\r\n}\r\n\r\n\r\ncontract BatchTransfer is Owned {    \r\n    uint public nonce;\r\n    Token public token;\r\n\r\n    // some events to assist in contract readability\r\n    event Batch(uint256 indexed nonce);\r\n    event Complete();\r\n\r\n    function batchTransfer(uint n, uint256[] bits) public onlyOwner {\r\n        require(n == nonce);\r\n\r\n        nonce += 1;\r\n        uint256 lomask = (1 << 96) - 1;\r\n        uint sum = 0;\r\n        for (uint i=0; i<bits.length; i++) {\r\n            address a = address(bits[i]>>96);\r\n            uint value = bits[i]&lomask;\r\n            token.transfer(a, value);\r\n        }\r\n        Batch(n);\r\n    }\r\n\r\n    function setToken(address tokenAddress) public onlyOwner {\r\n        token = Token(tokenAddress);\r\n    }\r\n\r\n    function reset() public onlyOwner {\r\n        nonce = 0;\r\n        Complete();\r\n    }\r\n\r\n    // refund all tokens back to owner\r\n    function refund() public onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n    }\r\n\r\n    function getBalance() public constant returns (uint256 balance) {\r\n        return token.balanceOf(this);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"bits\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Batch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Complete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"}]","ContractName":"BatchTransfer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a7d52d75590ec628481497be8987e889a39b3faf7f72bc01a47ab581bf6dfb0"}]}