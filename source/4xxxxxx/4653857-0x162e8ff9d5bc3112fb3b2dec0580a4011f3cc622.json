{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n    // TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n    // count of confirmations needed\r\n    uint yetNeeded;\r\n\r\n    // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n    uint ownersDone;\r\n\r\n    // position of this operation key in m_multiOwnedPendingIndex\r\n    uint index;\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n    // MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n    // METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    function multiowned(address[] _owners, uint _required)\r\n    validNumOwners(_owners.length)\r\n    multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n    external\r\n    ownerExists(_from)\r\n    ownerDoesNotExist(_to)\r\n    onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n    external\r\n    ownerDoesNotExist(_owner)\r\n    validNumOwners(m_numOwners + 1)\r\n    onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n    external\r\n    ownerExists(_owner)\r\n    validNumOwners(m_numOwners - 1)\r\n    multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n    onlymanyowners(sha3(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n    external\r\n    multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n    onlymanyowners(sha3(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n        result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    function revoke(bytes32 _operation)\r\n    external\r\n    multiOwnedOperationIsActive(_operation)\r\n    onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically sha3(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n    external\r\n    constant\r\n    multiOwnedOperationIsActive(_operation)\r\n    ownerExists(_owner)\r\n    returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n        // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n        // we won't be able to do it because of block gas limit.\r\n        // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n        // TODO use more graceful approach like compact or removal of clearPending completely\r\n        clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        // TODO block gas limit\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n            delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private constant returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains rentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /**\r\n     * @dev We use a single lock for the whole contract.\r\n     */\r\n    bool private rentrancy_lock = false;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * @notice If you mark a function `nonReentrant`, you should also\r\n     * mark it `external`. Calling one nonReentrant function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and a `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(!rentrancy_lock);\r\n        rentrancy_lock = true;\r\n        _;\r\n        rentrancy_lock = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Contract which is owned by owners and operated by controller.\r\n *\r\n * @notice Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n * Controller is set up by owners or during construction.\r\n *\r\n * @dev controller check is performed by onlyController modifier.\r\n */\r\ncontract MultiownedControlled is multiowned {\r\n\r\n    event ControllerSet(address controller);\r\n    event ControllerRetired(address was);\r\n\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == m_controller);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function MultiownedControlled(address[] _owners, uint _signaturesRequired, address _controller)\r\n    multiowned(_owners, _signaturesRequired)\r\n    {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev sets the controller\r\n    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /// @dev ability for controller to step down\r\n    function detachController() external onlyController {\r\n        address was = m_controller;\r\n        m_controller = address(0);\r\n        ControllerRetired(was);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice address of entity entitled to mint new tokens\r\n    address public m_controller;\r\n}\r\n\r\n\r\n/// @title utility methods and modifiers of arguments validation\r\ncontract ArgumentsChecker {\r\n\r\n    /// @dev check which prevents short address attack\r\n    modifier payloadSizeIs(uint size) {\r\n        require(msg.data.length == size + 4 /* function selector */);\r\n        _;\r\n    }\r\n\r\n    /// @dev check that address is valid\r\n    modifier validAddress(address addr) {\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/// @title registry of funds sent by investors\r\ncontract FundsRegistry is ArgumentsChecker, MultiownedControlled, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {\r\n    // gathering funds\r\n    GATHERING,\r\n    // returning funds to investors\r\n    REFUNDING,\r\n    // funds can be pulled by owners\r\n    SUCCEEDED\r\n    }\r\n\r\n    event StateChanged(State _state);\r\n    event Invested(address indexed investor, uint256 amount);\r\n    event EtherSent(address indexed to, uint value);\r\n    event RefundSent(address indexed to, uint value);\r\n\r\n\r\n    modifier requiresState(State _state) {\r\n        require(m_state == _state);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function FundsRegistry(address[] _owners, uint _signaturesRequired, address _controller)\r\n    MultiownedControlled(_owners, _signaturesRequired, _controller)\r\n    {\r\n    }\r\n\r\n    /// @dev performs only allowed state transitions\r\n    function changeState(State _newState)\r\n    external\r\n    onlyController\r\n    {\r\n        assert(m_state != _newState);\r\n\r\n        if (State.GATHERING == m_state) {   assert(State.REFUNDING == _newState || State.SUCCEEDED == _newState); }\r\n        else assert(false);\r\n\r\n        m_state = _newState;\r\n        StateChanged(m_state);\r\n    }\r\n\r\n    /// @dev records an investment\r\n    function invested(address _investor)\r\n    external\r\n    payable\r\n    onlyController\r\n    requiresState(State.GATHERING)\r\n    {\r\n        uint256 amount = msg.value;\r\n        require(0 != amount);\r\n        assert(_investor != m_controller);\r\n\r\n        // register investor\r\n        if (0 == m_weiBalances[_investor])\r\n        m_investors.push(_investor);\r\n\r\n        // register payment\r\n        totalInvested = totalInvested.add(amount);\r\n        m_weiBalances[_investor] = m_weiBalances[_investor].add(amount);\r\n\r\n        Invested(_investor, amount);\r\n    }\r\n\r\n    /// @notice owners: send `value` of ether to address `to`, can be called if crowdsale succeeded\r\n    /// @param to where to send ether\r\n    /// @param value amount of wei to send\r\n    function sendEther(address to, uint value)\r\n    external\r\n    validAddress(to)\r\n    onlymanyowners(sha3(msg.data))\r\n    requiresState(State.SUCCEEDED)\r\n    {\r\n        require(value > 0 && this.balance >= value);\r\n        to.transfer(value);\r\n        EtherSent(to, value);\r\n    }\r\n\r\n    /// @notice withdraw accumulated balance, called by payee in case crowdsale failed\r\n    function withdrawPayments(address payee)\r\n    external\r\n    nonReentrant\r\n    onlyController\r\n    requiresState(State.REFUNDING)\r\n    {\r\n        uint256 payment = m_weiBalances[payee];\r\n\r\n        require(payment != 0);\r\n        require(this.balance >= payment);\r\n\r\n        totalInvested = totalInvested.sub(payment);\r\n        m_weiBalances[payee] = 0;\r\n\r\n        payee.transfer(payment);\r\n        RefundSent(payee, payment);\r\n    }\r\n\r\n    function getInvestorsCount() external constant returns (uint) { return m_investors.length; }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice total amount of investments in wei\r\n    uint256 public totalInvested;\r\n\r\n    /// @notice state of the registry\r\n    State public m_state = State.GATHERING;\r\n\r\n    /// @dev balances of investors in wei\r\n    mapping(address => uint256) public m_weiBalances;\r\n\r\n    /// @dev list of unique investors\r\n    address[] public m_investors;\r\n}\r\n\r\n\r\n///123\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title StandardToken which can be minted by another contract.\r\ncontract MintableToken {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    /// @dev mints new tokens\r\n    function mint(address _to, uint256 _amount) public;\r\n}\r\n\r\n\r\n\r\n/**\r\n * MetropolMintableToken\r\n */\r\ncontract MetropolMintableToken is StandardToken, MintableToken {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    function mint(address _to, uint256 _amount) public;//todo propose return value\r\n\r\n    /**\r\n     * Function to mint tokens\r\n     * Internal for not forgetting to add access modifier\r\n     *\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     *\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintInternal(address _to, uint256 _amount) internal returns (bool) {\r\n        require(_amount>0);\r\n        require(_to!=address(0));\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Contract which is operated by controller.\r\n *\r\n * Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n *\r\n * Controller check is performed by onlyController modifier.\r\n */\r\ncontract Controlled {\r\n\r\n    address public m_controller;\r\n\r\n    event ControllerSet(address controller);\r\n    event ControllerRetired(address was);\r\n\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == m_controller);\r\n        _;\r\n    }\r\n\r\n    function setController(address _controller) external;\r\n\r\n    /**\r\n     * Sets the controller. Internal for not forgetting to add access modifier\r\n     */\r\n    function setControllerInternal(address _controller) internal {\r\n        m_controller = _controller;\r\n        ControllerSet(m_controller);\r\n    }\r\n\r\n    /**\r\n     * Ability for controller to step down\r\n     */\r\n    function detachController() external onlyController {\r\n        address was = m_controller;\r\n        m_controller = address(0);\r\n        ControllerRetired(was);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * MintableControlledToken\r\n */\r\ncontract MintableControlledToken is MetropolMintableToken, Controlled {\r\n\r\n    /**\r\n     * Function to mint tokens\r\n     *\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     *\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyController {\r\n        super.mintInternal(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * BurnableToken\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed from, uint256 amount);\r\n\r\n    function burn(address _from, uint256 _amount) public returns (bool);\r\n\r\n    /**\r\n     * Function to burn tokens\r\n     * Internal for not forgetting to add access modifier\r\n     *\r\n     * @param _from The address to burn tokens from.\r\n     * @param _amount The amount of tokens to burn.\r\n     *\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burnInternal(address _from, uint256 _amount) internal returns (bool) {\r\n        require(_amount>0);\r\n        require(_amount<=balances[_from]);\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        Burn(_from, _amount);\r\n        Transfer(_from, address(0), _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * BurnableControlledToken\r\n */\r\ncontract BurnableControlledToken is BurnableToken, Controlled {\r\n\r\n    /**\r\n     * Function to burn tokens\r\n     *\r\n     * @param _from The address to burn tokens from.\r\n     * @param _amount The amount of tokens to burn.\r\n     *\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(address _from, uint256 _amount) public onlyController returns (bool) {\r\n        return super.burnInternal(_from, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Contract which is owned by owners and operated by controller.\r\n *\r\n * Provides a way to set up an entity (typically other contract) entitled to control actions of this contract.\r\n * Controller is set up by owners or during construction.\r\n *\r\n */\r\ncontract MetropolMultiownedControlled is Controlled, multiowned {\r\n\r\n\r\n    function MetropolMultiownedControlled(address[] _owners, uint256 _signaturesRequired)\r\n    multiowned(_owners, _signaturesRequired)\r\n    public\r\n    {\r\n        // nothing here\r\n    }\r\n\r\n    /**\r\n     * Sets the controller\r\n     */\r\n    function setController(address _controller) external onlymanyowners(sha3(msg.data)) {\r\n        super.setControllerInternal(_controller);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title StandardToken which circulation can be delayed and started by another contract.\r\n/// @dev To be used as a mixin contract.\r\n/// The contract is created in disabled state: circulation is disabled.\r\ncontract CirculatingToken is StandardToken {\r\n\r\n    event CirculationEnabled();\r\n\r\n    modifier requiresCirculation {\r\n        require(m_isCirculating);\r\n        _;\r\n    }\r\n\r\n\r\n    // PUBLIC interface\r\n\r\n    function transfer(address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) requiresCirculation returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n\r\n    // INTERNAL functions\r\n\r\n    function enableCirculation() internal returns (bool) {\r\n        if (m_isCirculating)\r\n        return false;\r\n\r\n        m_isCirculating = true;\r\n        CirculationEnabled();\r\n        return true;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @notice are the circulation started?\r\n    bool public m_isCirculating;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * CirculatingControlledToken\r\n */\r\ncontract CirculatingControlledToken is CirculatingToken, Controlled {\r\n\r\n    /**\r\n     * Allows token transfers\r\n     */\r\n    function startCirculation() external onlyController {\r\n        assert(enableCirculation());    // must be called once\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * MetropolToken\r\n */\r\ncontract MetropolToken is\r\n    StandardToken,\r\n    Controlled,\r\n    MintableControlledToken,\r\n    BurnableControlledToken,\r\n    CirculatingControlledToken,\r\n    MetropolMultiownedControlled\r\n{\r\n    string internal m_name = '';\r\n    string internal m_symbol = '';\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n     * MetropolToken constructor\r\n     */\r\n    function MetropolToken(address[] _owners)\r\n        MetropolMultiownedControlled(_owners, 2)\r\n        public\r\n    {\r\n        require(3 == _owners.length);\r\n    }\r\n\r\n    function name() public constant returns (string) {\r\n        return m_name;\r\n    }\r\n    function symbol() public constant returns (string) {\r\n        return m_symbol;\r\n    }\r\n\r\n    function setNameSymbol(string _name, string _symbol) external onlymanyowners(sha3(msg.data)) {\r\n        require(bytes(m_name).length==0);\r\n        require(bytes(_name).length!=0 && bytes(_symbol).length!=0);\r\n\r\n        m_name = _name;\r\n        m_symbol = _symbol;\r\n    }\r\n\r\n}\r\n\r\n\r\n/////////123\r\n/**\r\n * @title Basic crowdsale stat\r\n * @author Eenae\r\n */\r\ncontract ICrowdsaleStat {\r\n\r\n    /// @notice amount of funds collected in wei\r\n    function getWeiCollected() public constant returns (uint);\r\n\r\n    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\r\n    function getTokenMinted() public constant returns (uint);\r\n}\r\n\r\n/**\r\n * @title Interface for code which processes and stores investments.\r\n * @author Eenae\r\n */\r\ncontract IInvestmentsWalletConnector {\r\n    /// @dev process and forward investment\r\n    function storeInvestment(address investor, uint payment) internal;\r\n\r\n    /// @dev total investments amount stored using storeInvestment()\r\n    function getTotalInvestmentsStored() internal constant returns (uint);\r\n\r\n    /// @dev called in case crowdsale succeeded\r\n    function wcOnCrowdsaleSuccess() internal;\r\n\r\n    /// @dev called in case crowdsale failed\r\n    function wcOnCrowdsaleFailure() internal;\r\n}\r\n\r\n\r\n/// @title Base contract for simple crowdsales\r\ncontract SimpleCrowdsaleBase is ArgumentsChecker, ReentrancyGuard, IInvestmentsWalletConnector, ICrowdsaleStat {\r\n    using SafeMath for uint256;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function SimpleCrowdsaleBase(address token)\r\n    validAddress(token)\r\n    {\r\n        m_token = MintableToken(token);\r\n    }\r\n\r\n\r\n    // PUBLIC interface: payments\r\n\r\n    // fallback function as a shortcut\r\n    function() payable {\r\n        require(0 == msg.data.length);\r\n        buy();  // only internal call here!\r\n    }\r\n\r\n    /// @notice crowdsale participation\r\n    function buy() public payable {     // dont mark as external!\r\n        buyInternal(msg.sender, msg.value, 0);\r\n    }\r\n\r\n\r\n    // INTERNAL\r\n\r\n    /// @dev payment processing\r\n    function buyInternal(address investor, uint payment, uint extraBonuses)\r\n    internal\r\n    nonReentrant\r\n    {\r\n        require(payment >= getMinInvestment());\r\n        require(getCurrentTime() >= getStartTime() || ! mustApplyTimeCheck(investor, payment) /* for final check */);\r\n        if (getCurrentTime() >= getEndTime()) {\r\n\r\n            finish();\r\n        }\r\n\r\n        if (m_finished) {\r\n            // saving provided gas\r\n            investor.transfer(payment);\r\n            return;\r\n        }\r\n\r\n        uint startingWeiCollected = getWeiCollected();\r\n        uint startingInvariant = this.balance.add(startingWeiCollected);\r\n\r\n        uint change;\r\n        if (hasHardCap()) {\r\n            // return or update payment if needed\r\n            uint paymentAllowed = getMaximumFunds().sub(getWeiCollected());\r\n            assert(0 != paymentAllowed);\r\n\r\n            if (paymentAllowed < payment) {\r\n                change = payment.sub(paymentAllowed);\r\n                payment = paymentAllowed;\r\n            }\r\n        }\r\n\r\n        // issue tokens\r\n        uint tokens = calculateTokens(investor, payment, extraBonuses);\r\n        m_token.mint(investor, tokens);\r\n        m_tokensMinted += tokens;\r\n\r\n        // record payment\r\n        storeInvestment(investor, payment);\r\n        assert((!hasHardCap() || getWeiCollected() <= getMaximumFunds()) && getWeiCollected() > startingWeiCollected);\r\n        FundTransfer(investor, payment, true);\r\n\r\n        if (hasHardCap() && getWeiCollected() == getMaximumFunds())\r\n        finish();\r\n\r\n        if (change > 0)\r\n        investor.transfer(change);\r\n\r\n        assert(startingInvariant == this.balance.add(getWeiCollected()).add(change));\r\n    }\r\n\r\n    function finish() internal {\r\n        if (m_finished)\r\n        return;\r\n\r\n        if (getWeiCollected() >= getMinimumFunds())\r\n        wcOnCrowdsaleSuccess();\r\n        else\r\n        wcOnCrowdsaleFailure();\r\n\r\n        m_finished = true;\r\n    }\r\n\r\n\r\n    // Other pluggables\r\n\r\n    /// @dev says if crowdsale time bounds must be checked\r\n    function mustApplyTimeCheck(address /*investor*/, uint /*payment*/) constant internal returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice whether to apply hard cap check logic via getMaximumFunds() method\r\n    function hasHardCap() constant internal returns (bool) {\r\n        return getMaximumFunds() != 0;\r\n    }\r\n\r\n    /// @dev to be overridden in tests\r\n    function getCurrentTime() internal constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    /// @notice maximum investments to be accepted during pre-ICO\r\n    function getMaximumFunds() internal constant returns (uint);\r\n\r\n    /// @notice minimum amount of funding to consider crowdsale as successful\r\n    function getMinimumFunds() internal constant returns (uint);\r\n\r\n    /// @notice start time of the pre-ICO\r\n    function getStartTime() internal constant returns (uint);\r\n\r\n    /// @notice end time of the pre-ICO\r\n    function getEndTime() internal constant returns (uint);\r\n\r\n    /// @notice minimal amount of investment\r\n    function getMinInvestment() public constant returns (uint) {\r\n        return 10 finney;\r\n    }\r\n\r\n    /// @dev calculates token amount for given investment\r\n    function calculateTokens(address investor, uint payment, uint extraBonuses) internal constant returns (uint);\r\n\r\n\r\n    // ICrowdsaleStat\r\n\r\n    function getWeiCollected() public constant returns (uint) {\r\n        return getTotalInvestmentsStored();\r\n    }\r\n\r\n    /// @notice amount of tokens minted (NOT equal to totalSupply() in case token is reused!)\r\n    function getTokenMinted() public constant returns (uint) {\r\n        return m_tokensMinted;\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    /// @dev contract responsible for token accounting\r\n    MintableToken public m_token;\r\n\r\n    uint m_tokensMinted;\r\n\r\n    bool m_finished = false;\r\n}\r\n\r\n\r\n/// @title Stateful mixin add state to contact and handlers for it\r\ncontract SimpleStateful {\r\n    enum State { INIT, RUNNING, PAUSED, FAILED, SUCCEEDED }\r\n\r\n    event StateChanged(State _state);\r\n\r\n    modifier requiresState(State _state) {\r\n        require(m_state == _state);\r\n        _;\r\n    }\r\n\r\n    modifier exceptState(State _state) {\r\n        require(m_state != _state);\r\n        _;\r\n    }\r\n\r\n    function changeState(State _newState) internal {\r\n        assert(m_state != _newState);\r\n\r\n        if (State.INIT == m_state) {\r\n            assert(State.RUNNING == _newState);\r\n        }\r\n        else if (State.RUNNING == m_state) {\r\n            assert(State.PAUSED == _newState || State.FAILED == _newState || State.SUCCEEDED == _newState);\r\n        }\r\n        else if (State.PAUSED == m_state) {\r\n            assert(State.RUNNING == _newState || State.FAILED == _newState);\r\n        }\r\n        else assert(false);\r\n\r\n        m_state = _newState;\r\n        StateChanged(m_state);\r\n    }\r\n\r\n    function getCurrentState() internal view returns(State) {\r\n        return m_state;\r\n    }\r\n\r\n    /// @dev state of sale\r\n    State public m_state = State.INIT;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Stores investments in FundsRegistry.\r\n */\r\ncontract MetropolFundsRegistryWalletConnector is IInvestmentsWalletConnector {\r\n\r\n    function MetropolFundsRegistryWalletConnector(address _fundsAddress)\r\n    public\r\n    {\r\n        require(_fundsAddress!=address(0));\r\n        m_fundsAddress = FundsRegistry(_fundsAddress);\r\n    }\r\n\r\n    /// @dev process and forward investment\r\n    function storeInvestment(address investor, uint payment) internal\r\n    {\r\n        m_fundsAddress.invested.value(payment)(investor);\r\n    }\r\n\r\n    /// @dev total investments amount stored using storeInvestment()\r\n    function getTotalInvestmentsStored() internal constant returns (uint)\r\n    {\r\n        return m_fundsAddress.totalInvested();\r\n    }\r\n\r\n    /// @dev called in case crowdsale succeeded\r\n    function wcOnCrowdsaleSuccess() internal {\r\n        m_fundsAddress.changeState(FundsRegistry.State.SUCCEEDED);\r\n        m_fundsAddress.detachController();\r\n    }\r\n\r\n    /// @dev called in case crowdsale failed\r\n    function wcOnCrowdsaleFailure() internal {\r\n        m_fundsAddress.changeState(FundsRegistry.State.REFUNDING);\r\n    }\r\n\r\n    /// @notice address of wallet which stores funds\r\n    FundsRegistry public m_fundsAddress;\r\n}\r\n\r\n\r\n/**\r\n * Crowdsale with state\r\n */\r\ncontract StatefulReturnableCrowdsale is\r\nSimpleCrowdsaleBase,\r\nSimpleStateful,\r\nmultiowned,\r\nMetropolFundsRegistryWalletConnector\r\n{\r\n\r\n    /** Last recorded funds */\r\n    uint256 public m_lastFundsAmount;\r\n\r\n    event Withdraw(address payee, uint amount);\r\n\r\n    /**\r\n     * Automatic check for unaccounted withdrawals\r\n     * @param _investor optional refund parameter\r\n     * @param _payment optional refund parameter\r\n     */\r\n    modifier fundsChecker(address _investor, uint _payment) {\r\n        uint atTheBeginning = getTotalInvestmentsStored();\r\n        if (atTheBeginning < m_lastFundsAmount) {\r\n            changeState(State.PAUSED);\r\n            if (_payment > 0) {\r\n                _investor.transfer(_payment);     // we cant throw (have to save state), so refunding this way\r\n            }\r\n            // note that execution of further (but not preceding!) modifiers and functions ends here\r\n        } else {\r\n            _;\r\n\r\n            if (getTotalInvestmentsStored() < atTheBeginning) {\r\n                changeState(State.PAUSED);\r\n            } else {\r\n                m_lastFundsAmount = getTotalInvestmentsStored();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggers some state changes based on current time\r\n     */\r\n    modifier timedStateChange() {\r\n        if (getCurrentState() == State.INIT && getCurrentTime() >= getStartTime()) {\r\n            changeState(State.RUNNING);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StatefulReturnableCrowdsale(\r\n    address _token,\r\n    address _funds,\r\n    address[] _owners,\r\n    uint _signaturesRequired\r\n    )\r\n    public\r\n    SimpleCrowdsaleBase(_token)\r\n    multiowned(_owners, _signaturesRequired)\r\n    MetropolFundsRegistryWalletConnector(_funds)\r\n    validAddress(_token)\r\n    validAddress(_funds)\r\n    {\r\n    }\r\n\r\n    function pauseCrowdsale()\r\n    public\r\n    onlyowner\r\n    requiresState(State.RUNNING)\r\n    {\r\n        changeState(State.PAUSED);\r\n    }\r\n    function continueCrowdsale()\r\n    public\r\n    onlymanyowners(sha3(msg.data))\r\n    requiresState(State.PAUSED)\r\n    {\r\n        changeState(State.RUNNING);\r\n\r\n        if (getCurrentTime() >= getEndTime()) {\r\n            finish();\r\n        }\r\n    }\r\n    function failCrowdsale()\r\n    public\r\n    onlymanyowners(sha3(msg.data))\r\n    requiresState(State.PAUSED)\r\n    {\r\n        wcOnCrowdsaleFailure();\r\n        m_finished = true;\r\n    }\r\n\r\n    function withdrawPayments()\r\n    public\r\n    nonReentrant\r\n    requiresState(State.FAILED)\r\n    {\r\n        Withdraw(msg.sender, m_fundsAddress.m_weiBalances(msg.sender));\r\n        m_fundsAddress.withdrawPayments(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * Additional check of contributing process since we have state\r\n     */\r\n    function buyInternal(address _investor, uint _payment, uint _extraBonuses)\r\n    internal\r\n    timedStateChange\r\n    exceptState(State.PAUSED)\r\n    fundsChecker(_investor, _payment)\r\n    {\r\n        if (!mustApplyTimeCheck(_investor, _payment)) {\r\n            require(State.RUNNING == m_state || State.INIT == m_state);\r\n        }\r\n        else\r\n        {\r\n            require(State.RUNNING == m_state);\r\n        }\r\n\r\n        super.buyInternal(_investor, _payment, _extraBonuses);\r\n    }\r\n\r\n\r\n    /// @dev called in case crowdsale succeeded\r\n    function wcOnCrowdsaleSuccess() internal {\r\n        super.wcOnCrowdsaleSuccess();\r\n\r\n        changeState(State.SUCCEEDED);\r\n    }\r\n\r\n    /// @dev called in case crowdsale failed\r\n    function wcOnCrowdsaleFailure() internal {\r\n        super.wcOnCrowdsaleFailure();\r\n\r\n        changeState(State.FAILED);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * MetropolCrowdsale\r\n */\r\ncontract MetropolCrowdsale is StatefulReturnableCrowdsale {\r\n\r\n    uint256 public m_startTimestamp;\r\n    uint256 public m_softCap;\r\n    uint256 public m_hardCap;\r\n    uint256 public m_exchangeRate;\r\n    address public m_foundersTokensStorage;\r\n    bool public m_initialSettingsSet = false;\r\n\r\n    modifier requireSettingsSet() {\r\n        require(m_initialSettingsSet);\r\n        _;\r\n    }\r\n\r\n    function MetropolCrowdsale(address _token, address _funds, address[] _owners)\r\n        public\r\n        StatefulReturnableCrowdsale(_token, _funds, _owners, 2)\r\n    {\r\n        require(3 == _owners.length);\r\n\r\n        //2030-01-01, not to start crowdsale\r\n        m_startTimestamp = 1893456000;\r\n    }\r\n\r\n    /**\r\n     * Set exchange rate before start\r\n     */\r\n    function setInitialSettings(\r\n            address _foundersTokensStorage,\r\n            uint256 _startTimestamp,\r\n            uint256 _softCapInEther,\r\n            uint256 _hardCapInEther,\r\n            uint256 _tokensForOneEther\r\n        )\r\n        public\r\n        timedStateChange\r\n        requiresState(State.INIT)\r\n        onlymanyowners(sha3(msg.data))\r\n        validAddress(_foundersTokensStorage)\r\n    {\r\n        //no check for settings set\r\n        //can be set multiple times before ICO\r\n\r\n        require(_startTimestamp!=0);\r\n        require(_softCapInEther!=0);\r\n        require(_hardCapInEther!=0);\r\n        require(_tokensForOneEther!=0);\r\n\r\n        m_startTimestamp = _startTimestamp;\r\n        m_softCap = _softCapInEther * 1 ether;\r\n        m_hardCap = _hardCapInEther * 1 ether;\r\n        m_exchangeRate = _tokensForOneEther;\r\n        m_foundersTokensStorage = _foundersTokensStorage;\r\n\r\n        m_initialSettingsSet = true;\r\n    }\r\n\r\n    /**\r\n     * Set exchange rate before start\r\n     */\r\n    function setExchangeRate(uint256 _tokensForOneEther)\r\n        public\r\n        timedStateChange\r\n        requiresState(State.INIT)\r\n        onlymanyowners(sha3(msg.data))\r\n    {\r\n        m_exchangeRate = _tokensForOneEther;\r\n    }\r\n\r\n    /**\r\n     * withdraw payments by investor on fail\r\n     */\r\n    function withdrawPayments() public requireSettingsSet {\r\n        getToken().burn(\r\n            msg.sender,\r\n            getToken().balanceOf(msg.sender)\r\n        );\r\n\r\n        super.withdrawPayments();\r\n    }\r\n\r\n\r\n    // INTERNAL\r\n    /**\r\n     * Additional check of initial settings set\r\n     */\r\n    function buyInternal(address _investor, uint _payment, uint _extraBonuses)\r\n        internal\r\n        requireSettingsSet\r\n    {\r\n        super.buyInternal(_investor, _payment, _extraBonuses);\r\n    }\r\n\r\n\r\n    /**\r\n     * All users except deployer must check time before contributing\r\n     */\r\n    function mustApplyTimeCheck(address investor, uint payment) constant internal returns (bool) {\r\n        return !isOwner(investor);\r\n    }\r\n\r\n    /**\r\n     * For min investment check\r\n     */\r\n    function getMinInvestment() public constant returns (uint) {\r\n        return 1 wei;\r\n    }\r\n\r\n    /**\r\n     * Get collected funds (internally from FundsRegistry)\r\n     */\r\n    function getWeiCollected() public constant returns (uint) {\r\n        return getTotalInvestmentsStored();\r\n    }\r\n\r\n    /**\r\n     * Minimum amount of funding to consider crowdsale as successful\r\n     */\r\n    function getMinimumFunds() internal constant returns (uint) {\r\n        return m_softCap;\r\n    }\r\n\r\n    /**\r\n     * Maximum investments to be accepted during crowdsale\r\n     */\r\n    function getMaximumFunds() internal constant returns (uint) {\r\n        return m_hardCap;\r\n    }\r\n\r\n    /**\r\n     * Start time of the crowdsale\r\n     */\r\n    function getStartTime() internal constant returns (uint) {\r\n        return m_startTimestamp;\r\n    }\r\n\r\n    /**\r\n     * End time of the crowdsale\r\n     */\r\n    function getEndTime() internal constant returns (uint) {\r\n        return m_startTimestamp + 60 days;\r\n    }\r\n\r\n    /**\r\n     * Formula for calculating tokens from contributed ether\r\n     */\r\n    function calculateTokens(address /*investor*/, uint payment, uint /*extraBonuses*/)\r\n        internal\r\n        constant\r\n        returns (uint)\r\n    {\r\n        uint256 secondMonth = m_startTimestamp + 30 days;\r\n        if (getCurrentTime() <= secondMonth) {\r\n            return payment.mul(m_exchangeRate);\r\n        } else if (getCurrentTime() <= secondMonth + 1 weeks) {\r\n            return payment.mul(m_exchangeRate).mul(100).div(105);\r\n        } else if (getCurrentTime() <= secondMonth + 2 weeks) {\r\n            return payment.mul(m_exchangeRate).mul(100).div(110);\r\n        } else if (getCurrentTime() <= secondMonth + 3 weeks) {\r\n            return payment.mul(m_exchangeRate).mul(100).div(115);\r\n        } else if (getCurrentTime() <= secondMonth + 4 weeks) {\r\n            return payment.mul(m_exchangeRate).mul(100).div(120);\r\n        } else {\r\n            return payment.mul(m_exchangeRate).mul(100).div(125);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Additional on-success actions\r\n     */\r\n    function wcOnCrowdsaleSuccess() internal {\r\n        super.wcOnCrowdsaleSuccess();\r\n\r\n        //20% of total totalSupply to team\r\n        m_token.mint(\r\n            m_foundersTokensStorage,\r\n            getToken().totalSupply().mul(20).div(80)\r\n        );\r\n\r\n\r\n        getToken().startCirculation();\r\n        getToken().detachController();\r\n    }\r\n\r\n    /**\r\n     * Returns attached token\r\n     */\r\n    function getToken() internal returns(MetropolToken) {\r\n        return MetropolToken(m_token);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getWeiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_lastFundsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundersTokensStorage\",\"type\":\"address\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_softCapInEther\",\"type\":\"uint256\"},{\"name\":\"_hardCapInEther\",\"type\":\"uint256\"},{\"name\":\"_tokensForOneEther\",\"type\":\"uint256\"}],\"name\":\"setInitialSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_fundsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"failCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_initialSettingsSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_foundersTokensStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"continueCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensForOneEther\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_funds\",\"type\":\"address\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"MetropolCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000985c3d74b91293f0a66812aa32297a299eaa23390000000000000000000000008c4ccf23d8674a04665e9e7a64260aa4c0030aeb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000f9cea238307242a5e1b60506a6af572ad8604ef500000000000000000000000071e82d98f04e06abcc4ee58b31d47934224b157f000000000000000000000000ebe723200f7f0903058f5177cbc91aea1568f1bd","Library":"","SwarmSource":"bzzr://744bae71030d0b2ece06cc348ad1d8c366b5f6ec75c94320d4ca44b14d9ecb6e"}]}