{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 supply);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n   \r\ncontract Token is ERC20Interface {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    string public constant symbol = \"LNC\";\r\n    string public constant name = \"Linker Coin\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply = 500000000000000000000000000;\r\n    \r\n    //AML & KYC\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n  \r\n    // Linker coin has  5*10^25 units, each unit has 10^18  minimum fractions which are called \r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function IsFreezedAccount(address _addr) public constant returns (bool) {\r\n        return frozenAccount[_addr];\r\n    }\r\n\r\n    // Constructor\r\n    function Token() public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        supply = _totalSupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _value) public returns (bool success)\r\n    {\r\n        if (_to != 0x0  // Prevent transfer to 0x0 address.\r\n            && IsFreezedAccount(msg.sender) == false\r\n            && balances[msg.sender] >= _value \r\n            && _value > 0\r\n            && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from,address _to, uint256 _value) public returns (bool success) {\r\n        if (_to != 0x0  // Prevent transfer to 0x0 address.\r\n            && IsFreezedAccount(_from) == false\r\n            && balances[_from] >= _value\r\n            && allowed[_from][msg.sender] >= _value\r\n            && _value > 0\r\n            && balances[_to] + _value > balances[_to]) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function FreezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n}\r\n \r\ncontract MyToken is Token {\r\n    \r\n    //LP Setup lp:liquidity provider\r\n    \r\n    uint8 public constant decimalOfPrice = 10;  // LNC/ETH\r\n    uint256 public constant multiplierOfPrice = 10000000000;\r\n    uint256 public constant multiplier = 1000000000000000000;\r\n    uint256 public lpAskPrice = 100000000000; //LP sell price\r\n    uint256 public lpBidPrice = 1; //LP buy price\r\n    uint256 public lpAskVolume = 0; //LP sell volume\r\n    uint256 public lpBidVolume = 0; //LP buy volume\r\n    uint256 public lpMaxVolume = 1000000000000000000000000; //the deafult maximum volume of the liquididty provider is 10000 LNC\r\n    \r\n    //LP Para\r\n    uint256 public edgePerPosition = 1; // (lpTargetPosition - lpPosition) / edgePerPosition = the penalty of missmatched position\r\n    uint256 public lpTargetPosition;\r\n    uint256 public lpFeeBp = 10; // lpFeeBp is basis point of fee collected by LP\r\n    \r\n    bool public isLpStart = false;\r\n    bool public isBurn = false;\r\n    \r\n    function MyToken() public {\r\n        balances[msg.sender] = _totalSupply;\r\n        lpTargetPosition = 200000000000000000000000000;\r\n    }\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\r\n        if (isBurn == true)\r\n        {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            _totalSupply = _totalSupply.sub(_value);\r\n            Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    event SetBurnStart(bool _isBurnStart);\r\n    function setBurnStart(bool _isBurnStart) onlyOwner public {\r\n        isBurn = _isBurnStart;\r\n    }\r\n\r\n    //Owner will be Lp \r\n    event SetPrices(uint256 _lpBidPrice, uint256 _lpAskPrice, uint256 _lpBidVolume, uint256 _lpAskVolume);\r\n    function setPrices(uint256 _lpBidPrice, uint256 _lpAskPrice, uint256 _lpBidVolume, uint256 _lpAskVolume) onlyOwner public{\r\n        require(_lpBidPrice < _lpAskPrice);\r\n        require(_lpBidVolume <= lpMaxVolume);\r\n        require(_lpAskVolume <= lpMaxVolume);\r\n        lpBidPrice = _lpBidPrice;\r\n        lpAskPrice = _lpAskPrice;\r\n        lpBidVolume = _lpBidVolume;\r\n        lpAskVolume = _lpAskVolume;\r\n        SetPrices(_lpBidPrice, _lpAskPrice, _lpBidVolume, _lpAskVolume);\r\n    }\r\n    \r\n    event SetLpMaxVolume(uint256 _lpMaxVolume);\r\n    function setLpMaxVolume(uint256 _lpMaxVolume) onlyOwner public {\r\n        require(_lpMaxVolume < 1000000000000000000000000);\r\n        lpMaxVolume = _lpMaxVolume;\r\n        if (lpMaxVolume < lpBidVolume){\r\n            lpBidVolume = lpMaxVolume;\r\n        }\r\n        if (lpMaxVolume < lpAskVolume){\r\n            lpAskVolume = lpMaxVolume;\r\n        }\r\n        SetLpMaxVolume(_lpMaxVolume);\r\n    }\r\n    \r\n    event SetEdgePerPosition(uint256 _edgePerPosition);\r\n    function setEdgePerPosition(uint256 _edgePerPosition) onlyOwner public {\r\n        //require(_edgePerPosition < 100000000000000000000000000000);\r\n        edgePerPosition = _edgePerPosition;\r\n        SetEdgePerPosition(_edgePerPosition);\r\n    }\r\n    \r\n    event SetLPTargetPostion(uint256 _lpTargetPositionn);\r\n    function setLPTargetPostion(uint256 _lpTargetPosition) onlyOwner public {\r\n        require(_lpTargetPosition <totalSupply() );\r\n        lpTargetPosition = _lpTargetPosition;\r\n        SetLPTargetPostion(_lpTargetPosition);\r\n    }\r\n    \r\n    event SetLpFee(uint256 _lpFeeBp);\r\n    function setLpFee(uint256 _lpFeeBp) onlyOwner public {\r\n        require(_lpFeeBp <= 100);\r\n        lpFeeBp = _lpFeeBp;\r\n        SetLpFee(lpFeeBp);\r\n    }\r\n    \r\n    event SetLpIsStart(bool _isLpStart);\r\n    function setLpIsStart(bool _isLpStart) onlyOwner public {\r\n        isLpStart = _isLpStart;\r\n    }\r\n    \r\n    function getLpBidPrice()public constant returns (uint256)\r\n    { \r\n        uint256 lpPosition = balanceOf(owner);\r\n            \r\n        if (lpTargetPosition >= lpPosition)\r\n        {\r\n            return lpBidPrice;\r\n        }\r\n        else\r\n        {\r\n            return lpBidPrice.sub((((lpPosition.sub(lpTargetPosition)).div(multiplier)).mul(edgePerPosition)).div(multiplierOfPrice));\r\n        }\r\n    }\r\n    \r\n    function getLpAskPrice()public constant returns (uint256)\r\n    {\r\n        uint256 lpPosition = balanceOf(owner);\r\n            \r\n        if (lpTargetPosition <= lpPosition)\r\n        {\r\n            return lpAskPrice;\r\n        }\r\n        else\r\n        {\r\n            return lpAskPrice.add((((lpTargetPosition.sub(lpPosition)).div(multiplier)).mul(edgePerPosition)).div(multiplierOfPrice));\r\n        }\r\n    }\r\n    \r\n    function getLpIsWorking(int minSpeadBp) public constant returns (bool )\r\n    {\r\n        if (isLpStart == false)\r\n            return false;\r\n         \r\n        if (lpAskVolume == 0 || lpBidVolume == 0)\r\n        {\r\n            return false;\r\n        }\r\n        \r\n        int256 bidPrice = int256(getLpBidPrice());\r\n        int256 askPrice = int256(getLpAskPrice());\r\n        \r\n        if (askPrice - bidPrice > minSpeadBp * (bidPrice + askPrice) / 2 / 10000)\r\n        {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function getAmountOfLinkerBuy(uint256 etherAmountOfSell) public constant returns (uint256)\r\n    {\r\n        return ((( multiplierOfPrice.mul(etherAmountOfSell) ).div(getLpAskPrice())).mul(uint256(10000).sub(lpFeeBp))).div(uint256(10000));\r\n    }\r\n    \r\n    function getAmountOfEtherSell(uint256 linkerAmountOfBuy) public constant returns (uint256)\r\n    {\r\n        return (((getLpBidPrice().mul(linkerAmountOfBuy)).div(multiplierOfPrice)).mul(uint256(10000).sub(lpFeeBp))).div(uint256(10000));\r\n    }\r\n    \r\n    function () public payable {\r\n    }\r\n    \r\n    function buy() public payable returns (uint256){\r\n        require (getLpIsWorking(500));                      // Check Whether Lp Bid and Ask spread is less than 5%\r\n        uint256 amount = getAmountOfLinkerBuy(msg.value);   // calculates the amount of buy from customer \r\n        require(balances[owner] >= amount);                  // checks if it has enough to sell\r\n        balances[msg.sender] = balances[msg.sender].add(amount);                     // adds the amount to buyer's balance\r\n        balances[owner] = balances[owner].sub(amount);                           // subtracts amount from seller's balance\r\n        lpAskVolume = lpAskVolume.sub(amount);\r\n        Transfer(owner, msg.sender, amount);                 // execute an event reflecting the chang               // ends function and returns\r\n        return amount;                                    \r\n    }\r\n    \r\n    function sell(uint256 amount)public returns (uint256) {    \r\n        require (getLpIsWorking(500));\r\n        require (balances[msg.sender] >= amount);           // checks if the sender has enough to sell\r\n        balances[owner] = balances[owner].add(amount);                           // adds the amount to owner's balance\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);                     // subtracts the amount from seller's balance\r\n        lpBidVolume = lpBidVolume.sub(amount);\r\n        uint256 linkerSendAmount = getAmountOfEtherSell(amount);\r\n        \r\n        msg.sender.transfer(linkerSendAmount);         // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n        Transfer(msg.sender, this, linkerSendAmount);       // executes an event reflecting on the change\r\n        return linkerSendAmount;                                   // ends function and returns\r\n    }\r\n    \r\n    function transferEther(uint256 amount) onlyOwner public{\r\n        msg.sender.transfer(amount);\r\n        Transfer(msg.sender, this, amount);\r\n    }\r\n}\r\n\r\ncontract LNC_Manager is Token\r\n{\r\n    function MultiTransfer(address _tokenAddr, address[] dests, uint256[] values) onlyOwner public returns (bool)\r\n    {\r\n        uint256 i = 0;\r\n        Token T = Token(_tokenAddr);\r\n        bool isMissed = false;\r\n        while (i < dests.length) {\r\n            if (T.IsFreezedAccount(dests[i]) == true && T.balanceOf(dests[i]) == 0)\r\n            {\r\n                T.transfer(dests[i], values[i]);\r\n            }\r\n            else\r\n            {\r\n                isMissed = true;\r\n            }\r\n            i += 1;\r\n        }\r\n        return(isMissed);\r\n    }\r\n    \r\n    function IsMultiFreeze(address _tokenAddr, address[] dests, bool isFreeze) public view returns (uint256)\r\n    {\r\n        uint256 i = 0;\r\n        uint256 n = 0;\r\n        //address[10] memory unfreezedAddress;\r\n        uint256 unfreezedAddress = 0;\r\n        Token T = Token(_tokenAddr);\r\n        while (i < dests.length && n < 20) \r\n        {\r\n            if (T.IsFreezedAccount(dests[i]) == isFreeze)\r\n            {\r\n                unfreezedAddress = unfreezedAddress * 1000 + i + 1;\r\n                n += 1;\r\n            }\r\n            i += 1;\r\n        }\r\n        \r\n        return(unfreezedAddress);//(unfreezedAddresses);\r\n    }\r\n    \r\n    /*\r\n    \r\n    function IsMultiFreeze(address _tokenAddr, address[] dests) public view returns (uint256)\r\n    {\r\n        uint256 i = 0;\r\n        uint256 n = 0;\r\n        //address[10] memory unfreezedAddress;\r\n        uint256 unfreezedAddress = 0;\r\n        Token T = Token(_tokenAddr);\r\n        while (i < dests.length && n < 20) \r\n        {\r\n            if (T.IsFreezedAccount(dests[i]) == false)\r\n            {\r\n                unfreezedAddress = unfreezedAddress * 1000 + i + 1;\r\n                n += 1;\r\n            }\r\n            i += 1;\r\n        }\r\n        \r\n        if (unfreezedAddress == 0)\r\n        {\r\n            unfreezedAddress = 9999;\r\n        }\r\n        \r\n        return(unfreezedAddress);//(unfreezedAddresses);\r\n    }\r\n    \r\n    function IsMultiFreeze(address _tokenAddr, address[] dests, bool isFreeze) onlyOwner public constant returns (uint256)\r\n    {\r\n        uint256 i = 0;\r\n        uint256 n = 0;\r\n        //address[10] memory unfreezedAddress;\r\n        uint256 unfreezedAddress = 0;\r\n        Token T = Token(_tokenAddr);\r\n        while (i < dests.length && n < 20) \r\n        {\r\n            if (T.IsFreezedAccount(dests[i]) == isFreeze)\r\n            {\r\n                unfreezedAddress = unfreezedAddress * 1000 + i + 1;\r\n                n += 1;\r\n            }\r\n            i += 1;\r\n        }\r\n        \r\n        return(unfreezedAddress);//(unfreezedAddresses);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure  returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n    \r\n    function toString(address x)  internal pure returns (string) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n\r\n    function IsMultiFreeze(address _tokenAddr, address[] dests, bool isFreeze) onlyOwner public constant returns (string memory)// (string memory)\r\n    {\r\n        uint256 i = 0;\r\n        uint256 n = 0;\r\n        Token T = Token(_tokenAddr);\r\n        //string memory unfreezedAddresses = new string(0);\r\n        address[] memory unfreezedAddress;\r\n        //string memory x = toString(dests[0]);\r\n        while (i < dests.length) \r\n        {\r\n            if (T.IsFreezedAccount(dests[i]) == isFreeze)\r\n            {\r\n                //unfreezedAddresses = strConcat(unfreezedAddresses, \"/\");\r\n                //unfreezedAddresses = strConcat(unfreezedAddresses, toString(dests[i]), \"/\");\r\n                //unfreezedAddress.push(dests[i]);\r\n                    n += 1;\r\n            }\r\n            i += 1;\r\n        }\r\n        return(toString(dests[0]));//(unfreezedAddresses);\r\n    }*/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"MultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"IsFreezedAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"isFreeze\",\"type\":\"bool\"}],\"name\":\"IsMultiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FreezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LNC_Manager","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://086698aac7c7ae25158b843fce7ca5f38c553eafe0d4620d212f67ad33e30797"}]}