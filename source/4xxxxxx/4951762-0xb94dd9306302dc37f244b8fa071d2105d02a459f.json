{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address[] public allowedTransferDuringICO;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function isAllowedTransferDuringICO() public constant returns (bool){\r\n        for(uint i = 0; i < allowedTransferDuringICO.length; i++) {\r\n            if (allowedTransferDuringICO[i] == msg.sender) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract Token is owned {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is SafeMath, Token {\r\n\r\n    uint public lockBlock;\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        require(block.number >= lockBlock || isAllowedTransferDuringICO());\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(block.number >= lockBlock || isAllowedTransferDuringICO());\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            balances[_from] = safeSub(balances[_from], _value);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract EICToken is StandardToken {\r\n\r\n    // metadata\r\n    string constant public name = \"Entertainment Industry Coin\";\r\n    string constant public symbol = \"EIC\";\r\n    uint256 constant public decimals = 18;\r\n\r\n    function EICToken(\r\n        uint _lockBlockPeriod)\r\n        public\r\n    {\r\n        allowedTransferDuringICO.push(owner);\r\n        totalSupply = 3125000000 * (10 ** decimals);\r\n        balances[owner] = totalSupply;\r\n        lockBlock = block.number + _lockBlockPeriod;\r\n    }\r\n\r\n    function distribute(address[] addr, uint256[] token) public onlyOwner {\r\n        // only owner can call\r\n        require(addr.length == token.length);\r\n        allowedTransferDuringICO.push(addr[0]);\r\n        allowedTransferDuringICO.push(addr[1]);\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            transfer(addr[i], token[i] * (10 ** decimals));\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract CrowdSales {\r\n    address owner;\r\n\r\n    EICToken public token;\r\n\r\n    uint public tokenPrice;\r\n\r\n    struct Beneficiary {\r\n        address addr;\r\n        uint256 ratio;\r\n    }\r\n\r\n    Beneficiary[] public beneficiaries;\r\n\r\n    event Bid(address indexed bider, uint256 getToken);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function CrowdSales(address _tokenAddress) public {\r\n        owner = msg.sender;\r\n        beneficiaries.push(Beneficiary(0xA5A6b44312a2fc363D78A5af22a561E9BD3151be, 10));\r\n        beneficiaries.push(Beneficiary(0x8Ec21f2f285545BEc0208876FAd153e0DEE581Ba, 10));\r\n        beneficiaries.push(Beneficiary(0x81D98B74Be1C612047fEcED3c316357c48daDc83, 5));\r\n        beneficiaries.push(Beneficiary(0x882Efb2c4F3B572e3A8B33eb668eeEdF1e88e7f0, 10));\r\n        beneficiaries.push(Beneficiary(0xe63286CCaB12E10B9AB01bd191F83d2262bde078, 15));\r\n        beneficiaries.push(Beneficiary(0x8a2454C1c79C23F6c801B0c2665dfB9Eab0539b1, 285));\r\n        beneficiaries.push(Beneficiary(0x4583408F92427C52D1E45500Ab402107972b2CA6, 665));\r\n        token = EICToken(_tokenAddress);\r\n        tokenPrice = 15000;\r\n    }\r\n\r\n    function () public payable {\r\n    \tbid();\r\n    }\r\n\r\n    function bid()\r\n    \tpublic\r\n    \tpayable\r\n    {\r\n    \trequire(block.number <= token.lockBlock());\r\n        require(this.balance <= 62500 * ( 10 ** 18 ));\r\n    \trequire(token.balanceOf(msg.sender) + (msg.value * tokenPrice) >= (5 * (10 ** 18)) * tokenPrice);\r\n    \trequire(token.balanceOf(msg.sender) + (msg.value * tokenPrice) <= (200 * (10 ** 18)) * tokenPrice);\r\n        token.transfer(msg.sender, msg.value * tokenPrice);\r\n        Bid(msg.sender, msg.value * tokenPrice);\r\n    }\r\n\r\n    function finalize() public onlyOwner {\r\n        require(block.number > token.lockBlock() || this.balance == 62500 * ( 10 ** 18 ));\r\n        uint receiveWei = this.balance;\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            Beneficiary storage beneficiary = beneficiaries[i];\r\n            uint256 value = (receiveWei * beneficiary.ratio)/(1000);\r\n            beneficiary.addr.transfer(value);\r\n        }\r\n        if (token.balanceOf(this) > 0) {\r\n            uint256 remainingToken = token.balanceOf(this);\r\n            address owner30 = 0x8a2454C1c79C23F6c801B0c2665dfB9Eab0539b1;\r\n            address owner70 = 0x4583408F92427C52D1E45500Ab402107972b2CA6;\r\n\r\n            token.transfer(owner30, (remainingToken * 30)/(100));\r\n            token.transfer(owner70, (remainingToken * 70)/(100));\r\n        }\r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"getToken\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"}]","ContractName":"CrowdSales","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003d25ac2e37709b8f68f79c68d36ecb61480955c8","Library":"","SwarmSource":"bzzr://74bd4e0f44ea4bc33d56941e176b5a2abf8011514bc1d26945d2389e069e8474"}]}