{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract LatiumX {\r\n    string public constant name = \"LatiumX\";\r\n    string public constant symbol = \"LATX\";\r\n    uint8 public constant decimals = 8;\r\n    uint256 public constant totalSupply =\r\n        300000000 * 10 ** uint256(decimals);\r\n\r\n    // owner of this contract\r\n    address public owner;\r\n\r\n    // balances for each account\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // triggered when tokens are transferred\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    // constructor\r\n    function LatiumX() {\r\n        owner = msg.sender;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    // transfer the balance from sender's account to another one\r\n    function transfer(address _to, uint256 _value) {\r\n        // prevent transfer to 0x0 address\r\n        require(_to != 0x0);\r\n        // sender and recipient should be different\r\n        require(msg.sender != _to);\r\n        // check if the sender has enough coins\r\n        require(_value > 0 && balanceOf[msg.sender] >= _value);\r\n        // check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // subtract coins from sender's account\r\n        balanceOf[msg.sender] -= _value;\r\n        // add coins to recipient's account\r\n        balanceOf[_to] += _value;\r\n        // notify listeners about this transfer\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n}\r\n\r\ncontract LatiumLocker {\r\n    address private constant _latiumAddress = 0x2f85E502a988AF76f7ee6D83b7db8d6c0A823bf9;\r\n    LatiumX private constant _latium = LatiumX(_latiumAddress);\r\n\r\n    // total amount of Latium tokens that can be locked with this contract\r\n    uint256 private _lockLimit = 0;\r\n\r\n    // variables for release tiers and iteration thru them\r\n    uint32[] private _timestamps = [\r\n        1541034000 // 2018-11-01 01:00:00 UTC\r\n        \r\n    ];\r\n    uint32[] private _tokensToRelease = [ // without decimals\r\n        45000000\r\n       \r\n    ];\r\n    mapping (uint32 => uint256) private _releaseTiers;\r\n\r\n    // owner of this contract\r\n    address public owner;\r\n\r\n    // constructor\r\n    function LatiumLocker() {\r\n        owner = msg.sender;\r\n        // initialize release tiers with pairs:\r\n        // \"UNIX timestamp\" => \"amount of tokens to release\" (with decimals)\r\n        for (uint8 i = 0; i < _timestamps.length; i++) {\r\n            _releaseTiers[_timestamps[i]] =\r\n                _tokensToRelease[i] * 10 ** uint256(_latium.decimals());\r\n            _lockLimit += _releaseTiers[_timestamps[i]];\r\n        }\r\n    }\r\n\r\n    // function to get current Latium balance (with decimals)\r\n    // of this contract\r\n    function latiumBalance() constant returns (uint256 balance) {\r\n        return _latium.balanceOf(address(this));\r\n    }\r\n\r\n    // function to get total amount of Latium tokens (with decimals)\r\n    // that can be locked with this contract\r\n    function lockLimit() constant returns (uint256 limit) {\r\n        return _lockLimit;\r\n    }\r\n\r\n    // function to get amount of Latium tokens (with decimals)\r\n    // that are locked at this moment\r\n    function lockedTokens() constant returns (uint256 locked) {\r\n        locked = 0;\r\n        uint256 unlocked = 0;\r\n        for (uint8 i = 0; i < _timestamps.length; i++) {\r\n            if (now >= _timestamps[i]) {\r\n                unlocked += _releaseTiers[_timestamps[i]];\r\n            } else {\r\n                locked += _releaseTiers[_timestamps[i]];\r\n            }\r\n        }\r\n        uint256 balance = latiumBalance();\r\n        if (unlocked > balance) {\r\n            locked = 0;\r\n        } else {\r\n            balance -= unlocked;\r\n            if (balance < locked) {\r\n                locked = balance;\r\n            }\r\n        }\r\n    }\r\n\r\n    // function to get amount of Latium tokens (with decimals)\r\n    // that can be withdrawn at this moment\r\n    function canBeWithdrawn() constant returns (uint256 unlockedTokens, uint256 excessTokens) {\r\n        unlockedTokens = 0;\r\n        excessTokens = 0;\r\n        uint256 tiersBalance = 0;\r\n        for (uint8 i = 0; i < _timestamps.length; i++) {\r\n            tiersBalance += _releaseTiers[_timestamps[i]];\r\n            if (now >= _timestamps[i]) {\r\n                unlockedTokens += _releaseTiers[_timestamps[i]];\r\n            }\r\n        }\r\n        uint256 balance = latiumBalance();\r\n        if (unlockedTokens > balance) {\r\n            // actual Latium balance of this contract is smaller\r\n            // than can be released at this moment\r\n            unlockedTokens = balance;\r\n        } else if (balance > tiersBalance) {\r\n            // if actual Latium balance of this contract is greater\r\n            // than can be locked, all excess tokens can be withdrawn\r\n            // at any time\r\n            excessTokens = (balance - tiersBalance);\r\n        }\r\n    }\r\n\r\n    // functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // function to withdraw Latium tokens that are unlocked at this moment\r\n    function withdraw(uint256 _amount) onlyOwner {\r\n        var (unlockedTokens, excessTokens) = canBeWithdrawn();\r\n        uint256 totalAmount = unlockedTokens + excessTokens;\r\n        require(totalAmount > 0);\r\n        if (_amount == 0) {\r\n            // withdraw all available tokens\r\n            _amount = totalAmount;\r\n        }\r\n        require(totalAmount >= _amount);\r\n        uint256 unlockedToWithdraw =\r\n            _amount > unlockedTokens ?\r\n                unlockedTokens :\r\n                _amount;\r\n        if (unlockedToWithdraw > 0) {\r\n            // update tiers data\r\n            uint8 i = 0;\r\n            while (unlockedToWithdraw > 0 && i < _timestamps.length) {\r\n                if (now >= _timestamps[i]) {\r\n                    uint256 amountToReduce =\r\n                        unlockedToWithdraw > _releaseTiers[_timestamps[i]] ?\r\n                            _releaseTiers[_timestamps[i]] :\r\n                            unlockedToWithdraw;\r\n                    _releaseTiers[_timestamps[i]] -= amountToReduce;\r\n                    unlockedToWithdraw -= amountToReduce;\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        // transfer tokens to owner's account\r\n        _latium.transfer(msg.sender, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latiumBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBeWithdrawn\",\"outputs\":[{\"name\":\"unlockedTokens\",\"type\":\"uint256\"},{\"name\":\"excessTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LatiumLocker","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://346e4008ba709fd94bd0943a8153f657fcc152a8286584a282a46f8a5bf21b53"}]}