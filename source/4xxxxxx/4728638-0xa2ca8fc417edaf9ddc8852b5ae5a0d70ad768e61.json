{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract APMath {\r\n    function safeAdd(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function safeSub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function safeMul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function safeMin(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function safeMax(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function safeMin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function safeMax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function safeWmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = safeAdd(safeMul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function safeRmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = safeAdd(safeMul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function safeWdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = safeAdd(safeMul(x, WAD), y / 2) / y;\r\n    }\r\n    function safeRdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = safeAdd(safeMul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = safeRmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = safeRmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DrivezyPrivateCoinSharedStorage is DSAuth {\r\n    uint _totalSupply = 0;\r\n\r\n    // オーナー登録されているアドレス\r\n    mapping(address => bool) ownerAddresses;\r\n\r\n    // オーナーアドレスの LUT\r\n    address[] public ownerAddressLUT;\r\n\r\n    // 信頼できるコントラクトに登録されているアドレス\r\n    mapping(address => bool) trustedContractAddresses;\r\n\r\n    // 信頼できるコントラクトの LUT\r\n    address[] public trustedAddressLUT;\r\n\r\n    // ホワイトリスト (KYC確認済み) のアドレス\r\n    mapping(address => bool) approvedAddresses;\r\n\r\n    // ホワイトリストの LUT\r\n    address[] public approvedAddressLUT;\r\n\r\n    // 常に許可されている関数\r\n    mapping(bytes4 => bool) actionsAlwaysPermitted;\r\n\r\n    /**\r\n     * custom events\r\n     */\r\n\r\n    /* addOwnerAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可されたユーザのアドレス\r\n     */\r\n    event AddOwnerAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n    /* removeOwnerAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可を取り消されたユーザのアドレス\r\n     */\r\n    event RemoveOwnerAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n    /* addTrustedContractAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可されたユーザのアドレス\r\n     */\r\n    event AddTrustedContractAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n    /* removeTrustedContractAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可を取り消されたユーザのアドレス\r\n     */\r\n    event RemoveTrustedContractAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n\r\n    /**\r\n     * 指定したアドレスをオーナー一覧に追加する\r\n     * @param addr (address) - オーナーに追加したいアドレス\r\n     * @return {bool} 追加に成功した場合は true を返す\r\n     */\r\n    function addOwnerAddress(address addr) auth public returns (bool) {\r\n        ownerAddresses[addr] = true;\r\n        ownerAddressLUT.push(addr);\r\n        AddOwnerAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスを信頼できるコントラクト一覧に追加する\r\n     * ここに追加されたコントラクトは、mint や burn などの管理者コマンドを実行できる (いわゆる sudo)\r\n     * @param addr (address) - 信頼できるコントラクト一覧に追加したいアドレス\r\n     * @return {bool} 追加に成功した場合は true を返す\r\n     */\r\n    function addTrustedContractAddress(address addr) auth public returns (bool) {\r\n        trustedContractAddresses[addr] = true;\r\n        trustedAddressLUT.push(addr);\r\n        AddTrustedContractAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスをKYC承認済みアドレス一覧に追加する\r\n     * ここに追加されたアドレスはトークンの購入ができる\r\n     * @param addr (address) - KYC承認済みアドレス一覧に追加したいアドレス\r\n     * @return {bool} 追加に成功した場合は true を返す\r\n     */\r\n    function addApprovedAddress(address addr) auth public returns (bool) {\r\n        approvedAddresses[addr] = true;\r\n        approvedAddressLUT.push(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスをオーナー一覧から削除する\r\n     * @param addr (address) - オーナーから外したいアドレス\r\n     * @return {bool} 削除に成功した場合は true を返す\r\n     */\r\n    function removeOwnerAddress(address addr) auth public returns (bool) {\r\n        ownerAddresses[addr] = false;\r\n        RemoveOwnerAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスを信頼できるコントラクト一覧から削除する\r\n     * @param addr (address) - 信頼できるコントラクト一覧から外したいアドレス\r\n     * @return {bool} 削除に成功した場合は true を返す\r\n     */\r\n    function removeTrustedContractAddress(address addr) auth public returns (bool) {\r\n        trustedContractAddresses[addr] = false;\r\n        RemoveTrustedContractAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスをKYC承認済みアドレス一覧から削除する\r\n     * @param addr (address) - KYC承認済みアドレス一覧から外したいアドレス\r\n     * @return {bool} 削除に成功した場合は true を返す\r\n     */\r\n    function removeApprovedAddress(address addr) auth public returns (bool) {\r\n        approvedAddresses[addr] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスがオーナーであるかを調べる\r\n     * @param addr (address) - オーナーであるか調べたいアドレス\r\n     * @return {bool} オーナーであった場合は true を返す\r\n     */\r\n    function isOwnerAddress(address addr) public constant returns (bool) {\r\n        return ownerAddresses[addr];\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスがKYC承認済みであるかを調べる\r\n     * @param addr (address) - KYC承認済みであるか調べたいアドレス\r\n     * @return {bool} KYC承認済みであった場合は true を返す\r\n     */\r\n    function isApprovedAddress(address addr) public constant returns (bool) {\r\n        return approvedAddresses[addr];\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスが信頼できるコントラクトであるかを調べる\r\n     * @param addr (address) - 信頼できるコントラクトであるか調べたいアドレス\r\n     * @return {bool} 信頼できるコントラクトであった場合は true を返す\r\n     */\r\n    function isTrustedContractAddress(address addr) public constant returns (bool) {\r\n        return trustedContractAddresses[addr];\r\n    }\r\n\r\n    /**\r\n     * オーナーのアドレス一覧に登録しているアドレス数を調べる\r\n     * 同一アドレスについて、リストの追加と削除を繰り返した場合は重複してカウントされる \r\n     * @return {uint} 登録されているアドレスの数\r\n     */\r\n    function ownerAddressSize() public constant returns (uint) {\r\n        return ownerAddressLUT.length;\r\n    }\r\n\r\n    /**\r\n     * n 番目に登録されたオーナーのアドレスを取得する (Look up table)\r\n     * @param index (uint) - n 番目を指定する\r\n     * @return {address} 登録されているアドレス\r\n     */\r\n    function ownerAddressInLUT(uint index) public constant returns (address) {\r\n        return ownerAddressLUT[index];\r\n    }\r\n\r\n    /**\r\n     * 信頼できるコントラクト一覧に登録しているアドレス数を調べる\r\n     * 同一アドレスについて、リストの追加と削除を繰り返した場合は重複してカウントされる \r\n     * @return {uint} 登録されているアドレスの数\r\n     */\r\n    function trustedAddressSize() public constant returns (uint) {\r\n        return trustedAddressLUT.length;\r\n    }\r\n\r\n    /**\r\n     * n 番目に登録された信頼できるコントラクトを取得する (Look up table)\r\n     * @param index (uint) - n 番目を指定する\r\n     * @return {address} 登録されているコントラクトのアドレス\r\n     */\r\n    function trustedAddressInLUT(uint index) public constant returns (address) {\r\n        return trustedAddressLUT[index];\r\n    }\r\n\r\n    /**\r\n     * KYC承認済みアドレスの一覧に登録しているアドレス数を調べる\r\n     * 同一アドレスについて、リストの追加と削除を繰り返した場合は重複してカウントされる \r\n     * @return {uint} 登録されているアドレスの数\r\n     */\r\n    function approvedAddressSize() public constant returns (uint) {\r\n        return approvedAddressLUT.length;\r\n    }\r\n\r\n    /**\r\n     * n 番目に登録されたKYC承認済みアドレスを取得する (Look up table)\r\n     * @param index (uint) - n 番目を指定する\r\n     * @return {address} 登録されているアドレス\r\n     */\r\n    function approvedAddressInLUT(uint index) public constant returns (address) {\r\n        return approvedAddressLUT[index];\r\n    }\r\n\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        return src == address(this) || src == owner || isOwnerAddress(src) || isTrustedContractAddress(src) || actionsAlwaysPermitted[sig];\r\n    }\r\n}\r\n\r\ncontract DrivezyPrivateCoinStorage is DSAuth {\r\n    uint _totalSupply = 0;\r\n\r\n    // 残高一覧\r\n    mapping(address => uint) coinBalances;\r\n\r\n    // 送金許可額の一覧\r\n    mapping(address => mapping (address => uint)) coinAllowances;\r\n\r\n    // 共通ストレージ\r\n    DrivezyPrivateCoinSharedStorage public sharedStorage;\r\n\r\n    // 常に許可されている関数\r\n    mapping(bytes4 => bool) actionsAlwaysPermitted;\r\n\r\n    // ユーザ間での送金ができるかどうか\r\n    bool public transferBetweenUsers;\r\n\r\n    function totalSupply() external constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function setTotalSupply(uint amount) auth external returns (bool) {\r\n        _totalSupply = amount;\r\n        return true;\r\n    }\r\n\r\n    function coinBalanceOf(address addr) external constant returns (uint) {\r\n        return coinBalances[addr];\r\n    }\r\n\r\n    function coinAllowanceOf(address _owner, address spender) external constant returns (uint) {\r\n        return coinAllowances[_owner][spender];\r\n    }\r\n\r\n    function setCoinBalance(address addr, uint amount) auth external returns (bool) {\r\n        coinBalances[addr] = amount;\r\n        return true;\r\n    }\r\n\r\n    function setCoinAllowance(address _owner, address spender, uint value) auth external returns (bool) {\r\n        coinAllowances[_owner][spender] = value;\r\n        return true;\r\n    }\r\n\r\n    function setSharedStorage(address addr) auth public returns (bool) {\r\n        sharedStorage = DrivezyPrivateCoinSharedStorage(addr);\r\n        return true;\r\n    }\r\n\r\n    function allowTransferBetweenUsers() auth public returns (bool) {\r\n        transferBetweenUsers = true;\r\n        return true;\r\n    }\r\n\r\n    function disallowTransferBetweenUsers() auth public returns (bool) {\r\n        transferBetweenUsers = false;\r\n        return true;\r\n    }\r\n\r\n    function canTransferBetweenUsers() public view returns (bool) {\r\n        return transferBetweenUsers;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        return actionsAlwaysPermitted[sig] || src == address(this) || src == owner || sharedStorage.isOwnerAddress(src) || sharedStorage.isTrustedContractAddress(src);\r\n    }\r\n}\r\n\r\ncontract DrivezyPrivateCoinAcceptableContract {\r\n    function receiveToken(address addr, uint amount) public returns (bool);\r\n\r\n    function isDrivezyPrivateTokenAcceptable() public pure returns (bool);\r\n}\r\n\r\ncontract DrivezyPrivateCoinImplementation is DSAuth, APMath {\r\n    DrivezyPrivateCoinStorage public coinStorage;\r\n    DrivezyPrivateCoinSharedStorage public sharedStorage;\r\n    DrivezyPrivateCoin public coin;\r\n\r\n\r\n    /**\r\n     * custom events\r\n     */\r\n\r\n    /* storage を設定したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} contractAddress - 設定した storage のコントラクトアドレス\r\n     */\r\n    event SetStorage(address indexed senderAddress, address indexed contractAddress);\r\n\r\n    /* shared storage を設定したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} contractAddress - 設定した shared storage のコントラクトアドレス\r\n     */\r\n    event SetSharedStorage(address indexed senderAddress, address indexed contractAddress);\r\n\r\n    /* coin を設定したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} contractAddress - 設定した coin のコントラクトアドレス\r\n     */\r\n    event SetCoin(address indexed senderAddress, address indexed contractAddress);\r\n\r\n    /* mint したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} receiverAddress - コインを受け取るユーザのアドレス\r\n     * {uint} amount - 発行高\r\n     */\r\n    event Mint(address indexed senderAddress, address indexed receiverAddress, uint amount);\r\n\r\n    /* burn したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} receiverAddress - コインを消却するユーザのアドレス\r\n     * {uint} amount - 消却高\r\n     */\r\n    event Burn(address indexed senderAddress, address indexed receiverAddress, uint amount);\r\n\r\n    /* addApprovedAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可されたユーザのアドレス\r\n     */\r\n    event AddApprovedAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n    /* removeApprovedAddress したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} userAddress - 許可が取り消されたユーザのアドレス\r\n     */\r\n    event RemoveApprovedAddress(address indexed senderAddress, address indexed userAddress);\r\n\r\n    /**\r\n     * 総発行高を返す\r\n     * @return {uint} コインの総発行高\r\n     */\r\n    function totalSupply() auth public view returns (uint) {\r\n        return coinStorage.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスが保有するコインの残高を返す\r\n     * @param addr {address} - コインの残高を調べたいアドレス\r\n     * @return {uint} コインの残高\r\n     */\r\n    function balanceOf(address addr) auth public view returns (uint) {\r\n        return coinStorage.coinBalanceOf(addr);\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Standardに準拠した関数\r\n     *\r\n     * あるユーザが保有するコインを指定したアドレスに送金する\r\n     * @param sender {address} - 送信元 (資金源) のアドレス\r\n     * @param to {address} - 宛先のアドレス\r\n     * @param amount {uint} - 送付するコインの分量\r\n     * @return {bool} コインの残高\r\n     */\r\n    function transfer(address sender, address to, uint amount) auth public returns (bool) {\r\n        // 残高を超えて送金してないか確認\r\n        require(coinStorage.coinBalanceOf(sender) >= amount);\r\n\r\n        // 1円以上送ろうとしているか確認\r\n        require(amount > 0);\r\n\r\n        // 受取者がオーナーまたは許可された (KYC 通過済み) アドレスかを確認\r\n        require(canTransfer(sender, to));\r\n\r\n        // 送金元の残高を減らし、送金先の残高を増やす\r\n        coinStorage.setCoinBalance(sender, safeSub(coinStorage.coinBalanceOf(sender), amount));\r\n        coinStorage.setCoinBalance(to, safeAdd(coinStorage.coinBalanceOf(to), amount));\r\n\r\n        // 送金先がコントラクトで、isDrivezyPrivateTokenAcceptable が true を返すコントラクトでは\r\n        // receiveToken() 関数をコールする\r\n        if (isContract(to)) {\r\n            DrivezyPrivateCoinAcceptableContract receiver = DrivezyPrivateCoinAcceptableContract(to);\r\n            if (receiver.isDrivezyPrivateTokenAcceptable()) {\r\n                require(receiver.receiveToken(sender, amount));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Standardに準拠した関数\r\n     *\r\n     * 指定したユーザが保有するコインを指定したアドレスに送金する\r\n     * @param sender {address} - 送付操作を実行するユーザのアドレス\r\n     * @param from {address} - 資金源となるユーザのアドレス\r\n     * @param to {address} - 宛先のアドレス\r\n     * @param amount {uint} - 送付するコインの分量\r\n     * @return {bool} 送付に成功した場合は true を返す\r\n     */\r\n    function transferFrom(address sender, address from, address to, uint amount) auth public returns (bool) {\r\n        // アローアンスを超えて送金してないか確認\r\n        require(coinStorage.coinAllowanceOf(sender, from) >= amount);\r\n\r\n        // transfer 処理に引き継ぐ\r\n        transfer(from, to, amount);\r\n\r\n        // アローアンスを減らす\r\n        coinStorage.setCoinAllowance(from, sender, safeSub(coinStorage.coinAllowanceOf(sender, from), amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Standardに準拠した関数\r\n     *\r\n     * spender（支払い元のアドレス）にsender（送信者）がamount分だけ支払うのを許可する\r\n     * この関数が呼ばれる度に送金可能な金額を更新する。\r\n     *\r\n     * @param sender {address} - 許可操作を実行するユーザのアドレス\r\n     * @param spender (address} - 送付操作を許可する対象ユーザのアドレス\r\n     * @param amount {uint} - 送付を許可するコインの分量\r\n     * @return {bool} 許可に成功した場合は true を返す\r\n     */\r\n    function approve(address sender, address spender, uint amount) auth public returns (bool) {\r\n        coinStorage.setCoinAllowance(sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token Standardに準拠した関数\r\n     *\r\n     * 指定したユーザに対し、送付操作が許可されているトークンの分量を返す\r\n     *\r\n     * @param owner {address} - 資金源となるユーザのアドレス\r\n     * @param spender {address} - 送付操作を許可しているユーザのアドレス\r\n     * @return {uint} 許可されているトークンの分量を返す\r\n     */\r\n    function allowance(address owner, address spender) auth public constant returns (uint) {\r\n        return coinStorage.coinAllowanceOf(owner, spender);\r\n    }\r\n\r\n    /**\r\n     * トークンストレージ (このトークンに限り有効なストレージ) を設定する <Ownerのみ実行可能>\r\n     * @param addr {address} - DrivezyPrivateCoinStorage のアドレス\r\n     * @return {bool} Storage の設定に成功したら true を返す\r\n     */\r\n    function setStorage(address addr) auth public returns (bool) {\r\n        coinStorage = DrivezyPrivateCoinStorage(addr);\r\n        SetStorage(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 共有ストレージ (一連の発行において共通利用するストレージ) を設定する <Ownerのみ実行可能>\r\n     * @param addr {address} - DrivezyPrivateCoinSharedStorage のアドレス\r\n     * @return {bool} Storage の設定に成功したら true を返す\r\n     */\r\n    function setSharedStorage(address addr) auth public returns (bool) {\r\n        sharedStorage = DrivezyPrivateCoinSharedStorage(addr);\r\n        SetSharedStorage(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Coin (ERC20 準拠の公開するコントラクト) を設定する <Ownerのみ実行可能>\r\n     * @param addr {address} - DrivezyPrivateCoin のアドレス\r\n     * @return {bool} Coin の設定に成功したら true を返す\r\n     */\r\n    function setCoin(address addr) auth public returns (bool) {\r\n        coin = DrivezyPrivateCoin(addr);\r\n        SetCoin(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスにコインを発行する <Ownerのみ実行可能>\r\n     * @param receiver {address} - 発行したコインの受取アカウント\r\n     * @param amount {uint} - 発行量\r\n     * @return {bool} 発行に成功したら true を返す\r\n     */\r\n    function mint(address receiver, uint amount) auth public returns (bool) {\r\n        // 1円以上発行しようとしているか確認\r\n        require(amount > 0);\r\n\r\n        // 発行残高を増やす\r\n        coinStorage.setTotalSupply(safeAdd(coinStorage.totalSupply(), amount));\r\n\r\n        // 自分自身に発行する\r\n        // 発行に先立ち、自分がトークンを持てるようにする\r\n        addApprovedAddress(address(this));\r\n        coinStorage.setCoinBalance(address(this), safeAdd(coinStorage.coinBalanceOf(address(this)), amount));\r\n\r\n        // 自分自身から相手に送付する\r\n        require(coin.transfer(receiver, amount));\r\n\r\n        // ログに保存\r\n        Mint(msg.sender, receiver, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスからコインを回収する <Ownerのみ実行可能>\r\n     * @param receiver {address} - 回収先のアカウント\r\n     * @param amount {uint} - 回収量\r\n     * @return {bool} 回収に成功したら true を返す\r\n     */\r\n    function burn(address receiver, uint amount) auth public returns (bool) {\r\n        // 1円以上回収しようとしているか確認\r\n        require(amount > 0);\r\n\r\n        // 回収先のアカウントの所持金額以下を回収しようとしているか確認\r\n        require(coinStorage.coinBalanceOf(receiver) >= amount);\r\n\r\n        // 回収する残量の approve を強制的に設定する\r\n        // 回収に先立ち、自分がトークンを持てるようにする\r\n        approve(address(this), receiver, amount);\r\n        addApprovedAddress(address(this));\r\n\r\n        // 自分自身のコントラクトに回収する\r\n        require(coin.transferFrom(receiver, address(this), amount));\r\n\r\n        // 回収後、コインを溶かす\r\n        coinStorage.setTotalSupply(safeSub(coinStorage.totalSupply(), amount));\r\n        coinStorage.setCoinBalance(address(this), safeSub(coinStorage.coinBalanceOf(address(this)), amount));\r\n\r\n        // ログに保存\r\n        Burn(msg.sender, receiver, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスをホワイトリストに追加 <Ownerのみ実行可能>\r\n     * @param addr {address} - 追加するアカウント\r\n     * @return {bool} 追加に成功したら true を返す\r\n     */\r\n    function addApprovedAddress(address addr) auth public returns (bool) {\r\n        sharedStorage.addApprovedAddress(addr);\r\n        AddApprovedAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスをホワイトリストから削除 <Ownerのみ実行可能>\r\n     * @param addr {address} - 削除するアカウント\r\n     * @return {bool} 削除に成功したら true を返す\r\n     */\r\n    function removeApprovedAddress(address addr) auth public returns (bool) {\r\n        sharedStorage.removeApprovedAddress(addr);\r\n        RemoveApprovedAddress(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ユーザ間の送金を許可する <Ownerのみ実行可能>\r\n     * @return {bool} 許可に成功したら true を返す\r\n     */\r\n    function allowTransferBetweenUsers() auth public returns (bool) {\r\n        coinStorage.allowTransferBetweenUsers();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ユーザ間の送金を禁止する <Ownerのみ実行可能>\r\n     * @return {bool} 禁止に成功したら true を返す\r\n     */\r\n    function disallowTransferBetweenUsers() auth public returns (bool) {\r\n        coinStorage.disallowTransferBetweenUsers();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * DSAuth の canCall(src, dst, sig) の override\r\n     * シグネチャと実行者レベルで関数の実行可否を返す\r\n     #\r\n     * @param src {address} - 呼び出し元ユーザのアドレス\r\n     * @param dst {address} - 実行先コントラクトのアドレス\r\n     * @param sig {bytes4} - 関数のシグネチャ (SHA3)\r\n     * @return {bool} 関数が実行可能であれば true を返す\r\n     */\r\n    function canCall(address src, address dst, bytes4 sig) public constant returns (bool) {\r\n        dst; // HACK - 引数を使わないとコンパイラが警告を出す\r\n        sig; // HACK - こちらも同様\r\n\r\n        // オーナーによる実行、「信用するコントラクト」からの呼び出し、コインからの呼び出しは許可\r\n        return src == owner || sharedStorage.isOwnerAddress(src) || sharedStorage.isTrustedContractAddress(src) || src == address(coin);\r\n    }\r\n\r\n    /**\r\n     * 指定したユーザ間での転送が承認されるかどうか\r\n     * - 受取者が approvedAddress か ownerAddress に属する\r\n     * - coinStorage.canTransferBetweenUsers = false の場合、受取者か送信者のいずれかが ownerAddress または trustedContractAddress に属する\r\n     * @param from {address} - 送付者のアドレス\r\n     * @param to {address} - 受取者のアドレス\r\n     * @return {bool} 転送できる場合は true を返す\r\n     */\r\n    function canTransfer(address from, address to) internal constant returns (bool) {\r\n        // 受取者がオーナーまたは許可された (KYC 通過済み) アドレスかを確認\r\n        require(sharedStorage.isOwnerAddress(to) || sharedStorage.isApprovedAddress(to));\r\n\r\n        // ユーザ間の送金が許可されているか、そうでない場合は送り手または受け手が「オーナー」あるいは「信頼できるコントラクト」に入っているか。\r\n        require(coinStorage.canTransferBetweenUsers() || sharedStorage.isOwnerAddress(from) || sharedStorage.isTrustedContractAddress(from) || sharedStorage.isOwnerAddress(to) || sharedStorage.isTrustedContractAddress(to));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * DSAuth の isAuthorized(src, sig) の override\r\n     * @param src {address} - コントラクトの実行者\r\n     * @param sig {bytes4} - コントラクトのシグネチャの SHA3 値\r\n     * @return {bool} 呼び出し可能な関数の場合は true を返す\r\n     */\r\n    function isAuthorized(address src, bytes4 sig) internal constant returns (bool) {\r\n        return canCall(src, address(this), sig);\r\n    }\r\n\r\n    /**\r\n     * 指定されたアドレスがコントラクトであるか判定する\r\n     * @param addr {address} - 判定対象のコントラクト\r\n     * @return {bool} コントラクトであれば true\r\n     */\r\n    function isContract(address addr) public view returns (bool result) {\r\n        uint length;\r\n        assembly {\r\n            // アドレスが持つマシン語のサイズを取得する\r\n            length := extcodesize(addr)\r\n        }\r\n\r\n        // 当該アドレスがマシン語を持てばコントラクトと見做せる\r\n        return (length > 0);\r\n    }\r\n\r\n    /**\r\n     * DrivezyPrivateCoinAcceptableContract#isDrivezyPrivateTokenAcceptable の override\r\n     * このコントラクトは Private Token を受け取らない\r\n     * @return {bool} 常に false を返す\r\n     */\r\n    function isDrivezyPrivateTokenAcceptable() public pure returns (bool result) {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * ERC20 に準拠したコインの公開インタフェース\r\n */\r\ncontract DrivezyPrivateCoin is ERC20, DSAuth {\r\n    /**\r\n     * public variables - Etherscan などに表示される\r\n     */\r\n    \r\n    /* コインの名前 */\r\n    string public name = \"Uni 0.1.0\";\r\n\r\n    /* コインのシンボル */\r\n    string public symbol = \"ORI\";\r\n\r\n    /* 通貨の最小単位の桁数。 6 の場合は小数第6位が最小単位となる (0.000001 ORI) */\r\n    uint8 public decimals = 6;\r\n\r\n    /**\r\n     * custom events\r\n     */\r\n\r\n    /* Implementation を設定したときに発生するイベント\r\n     * {address} senderAddress - 実行者のアドレス\r\n     * {address} contractAddress - 設定した implementation のコントラクトアドレス\r\n     */\r\n    event SetImplementation(address indexed senderAddress, address indexed contractAddress);\r\n\r\n    /**\r\n     * private variables\r\n     */\r\n\r\n    // トークンのロジック実装インスタンス\r\n    DrivezyPrivateCoinImplementation public implementation;\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // ERC20 Token Standard functions\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * 総発行高を返す\r\n     * @return {uint} コインの総発行高\r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        return implementation.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * 指定したアドレスが保有するコインの残高を返す\r\n     * @param addr {address} - コインの残高を調べたいアドレス\r\n     * @return {uint} コインの残高\r\n     */\r\n    function balanceOf(address addr) public constant returns (uint) {\r\n        return implementation.balanceOf(addr);\r\n    }\r\n\r\n    /**\r\n     * 自分が保有するコインを指定したアドレスに送金する\r\n     * @param to {address} - 宛先のアドレス\r\n     * @param amount {uint} - 送付するコインの分量\r\n     * @return {bool} 送付に成功した場合は true を返す\r\n     */\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        if (implementation.transfer(msg.sender, to, amount)) {\r\n            Transfer(msg.sender, to, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 指定したユーザが保有するコインを指定したアドレスに送金する\r\n     * @param from {address} - 資金源となるユーザのアドレス\r\n     * @param to {address} - 宛先のアドレス\r\n     * @param amount {uint} - 送付するコインの分量\r\n     * @return {bool} 送付に成功した場合は true を返す\r\n     */\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        if (implementation.transferFrom(msg.sender, from, to, amount)) {\r\n            Transfer(from, to, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 指定したユーザに対し、(トークン所有者に代わって)指定した分量のトークンの送付を許可する\r\n     * @param spender {address} - 送付操作を許可する対象ユーザのアドレス\r\n     * @param amount {uint} - 送付を許可するコインの分量\r\n     * @return {bool} 許可に成功した場合は true を返す\r\n     */\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        if (implementation.approve(msg.sender, spender, amount)) {\r\n            Approval(msg.sender, spender, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 指定したユーザに対し、送付操作が許可されているトークンの分量を返す\r\n     * @param addr {address} - 資金源となるユーザのアドレス\r\n     * @param spender {uint} - 送付操作を許可しているユーザのアドレス\r\n     * @return {uint} 許可されているトークンの分量を返す\r\n     */\r\n    function allowance(address addr, address spender) public constant returns (uint) {\r\n        return implementation.allowance(addr, spender);\r\n    }\r\n\r\n    /**\r\n     * implementation (実装) が定義されたコントラクトを設定する <Ownerのみ実行可能>\r\n     * @param addr {address} - コントラクトのアドレス\r\n     * @return {bool} 設定変更に成功した場合は true を返す\r\n     */\r\n    function setImplementation(address addr) auth public returns (bool) {\r\n        implementation = DrivezyPrivateCoinImplementation(addr);\r\n        SetImplementation(msg.sender, addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * DSAuth の isAuthorized(src, sig) の override\r\n     * @param src {address} - コントラクトの実行者\r\n     * @param sig {bytes4} - コントラクトのシグネチャの SHA3 値\r\n     * @return {bool} 呼び出し可能な関数の場合は true を返す\r\n     */\r\n    function isAuthorized(address src, bytes4 sig) internal constant returns (bool) {\r\n        return src == address(this) ||  // コントラクト自身による呼び出す\r\n            src == owner ||             // コントラクトのデプロイ者\r\n                                        // implementation が定義済みである場合は、Implementation#canCall に呼び出し可否チェックを委譲\r\n            (implementation != DrivezyPrivateCoinImplementation(0) && implementation.canCall(src, address(this), sig));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * ERC20 に準拠したコインの公開インタフェース\r\n */\r\ncontract DrivezyPrivateDecemberCoin is DrivezyPrivateCoin {\r\n    /**\r\n     * public variables - Etherscan などに表示される\r\n     */\r\n    \r\n    /* コインの名前 */\r\n    string public name = \"Rental Coins 1.0 1st private offering\";\r\n\r\n    /* コインのシンボル */\r\n    string public symbol = \"RC1\";\r\n\r\n    /* 通貨の最小単位の桁数。 6 の場合は小数第6位が最小単位となる (0.000001 RC1) */\r\n    uint8 public decimals = 6;\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SetImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DrivezyPrivateDecemberCoin","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e328683772c39b9f6214ba907e5fcb9459ab6ef5758676ee1749830261900550"}]}