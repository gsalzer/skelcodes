{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    function Owned() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\ncontract Blocked {\r\n    uint public blockedUntil;\r\n\r\n    modifier unblocked {\r\n        require(now > blockedUntil);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant public returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PayloadSize {\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Blocked, PayloadSize {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) unblocked public returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) onlyPayloadSize(2 * 32) unblocked constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) unblocked public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract PreNTFToken is BurnableToken, Owned {\r\n\r\n    string public constant name = \"PreNTF Token\";\r\n\r\n    string public constant symbol = \"PreNTF\";\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    function PreNTFToken(uint256 initialSupply, uint unblockTime) public {\r\n        totalSupply = initialSupply;\r\n        balances[owner] = initialSupply;\r\n        blockedUntil = unblockTime;\r\n    }\r\n\r\n    function manualTransfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Owned, PayloadSize {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct AmountData {\r\n        bool exists;\r\n        uint256 value;\r\n    }\r\n\r\n    // Date of start pre-ICO\r\n    uint public constant preICOstartTime =    1512597600; // start at Thursday, December 7, 2017 12:00:00 AM EET\r\n    uint public constant preICOendTime =      1517436000; // end at   Thursday, February 1, 2018 12:00:00 AM EET\r\n    uint public constant blockUntil =         1525122000; // tokens are blocked until Tuesday, May 1, 2018 12:00:00 AM EET\r\n\r\n    uint256 public constant maxTokenAmount = 3375000 * 10**18; // max tokens amount\r\n\r\n    uint256 public constant bountyTokenAmount = 375000 * 10**18;\r\n    uint256 public givenBountyTokens = 0;\r\n\r\n    PreNTFToken public token;\r\n\r\n    uint256 public leftTokens = 0;\r\n\r\n    uint256 public totalAmount = 0;\r\n    uint public transactionCounter = 0;\r\n\r\n    uint256 public constant tokenPrice = 3 * 10**15; // token price in ether\r\n\r\n    uint256 public minAmountForDeal = 9 ether;\r\n\r\n    mapping (uint => AmountData) public amountsByCurrency;\r\n\r\n    mapping (address => uint256) public bountyTokensToAddress;\r\n\r\n    modifier canBuy() {\r\n        require(!isFinished());\r\n        require(now >= preICOstartTime);\r\n        _;\r\n    }\r\n\r\n    modifier minPayment() {\r\n        require(msg.value >= minAmountForDeal);\r\n        _;\r\n    }\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale() public {\r\n        token = new PreNTFToken(maxTokenAmount, blockUntil);\r\n        leftTokens = maxTokenAmount - bountyTokenAmount;\r\n        // init currency in Crowdsale.\r\n        AmountData storage btcAmountData = amountsByCurrency[0];\r\n        btcAmountData.exists = true;\r\n        AmountData storage bccAmountData = amountsByCurrency[1];\r\n        bccAmountData.exists = true;\r\n        AmountData storage ltcAmountData = amountsByCurrency[2];\r\n        ltcAmountData.exists = true;\r\n        AmountData storage dashAmountData = amountsByCurrency[3];\r\n        dashAmountData.exists = true;\r\n    }\r\n\r\n    function isFinished() public constant returns (bool) {\r\n        return now > preICOendTime || leftTokens == 0;\r\n    }\r\n\r\n    function() external canBuy minPayment payable {\r\n        uint256 amount = msg.value;\r\n        uint256 givenTokens = amount.mul(1 ether).div(tokenPrice);\r\n        uint256 providedTokens = transferTokensTo(msg.sender, givenTokens);\r\n        transactionCounter = transactionCounter + 1;\r\n\r\n        if (givenTokens > providedTokens) {\r\n            uint256 needAmount = providedTokens.mul(tokenPrice).div(1 ether);\r\n            require(amount > needAmount);\r\n            require(msg.sender.call.gas(3000000).value(amount - needAmount)());\r\n            amount = needAmount;\r\n        }\r\n        totalAmount = totalAmount.add(amount);\r\n    }\r\n\r\n    function manualTransferTokensTo(address to, uint256 givenTokens, uint currency, uint256 amount) external canBuy onlyOwner returns (uint256) {\r\n        AmountData memory tempAmountData = amountsByCurrency[currency];\r\n        require(tempAmountData.exists);\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.value = amountData.value.add(amount);\r\n        uint256 value = transferTokensTo(to, givenTokens);\r\n        transactionCounter = transactionCounter + 1;\r\n        return value;\r\n    }\r\n\r\n    function addCurrency(uint currency) external onlyOwner {\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.exists = true;\r\n    }\r\n\r\n    function transferTokensTo(address to, uint256 givenTokens) private returns (uint256) {\r\n        var providedTokens = givenTokens;\r\n        if (givenTokens > leftTokens) {\r\n            providedTokens = leftTokens;\r\n        }\r\n        leftTokens = leftTokens.sub(providedTokens);\r\n        require(token.manualTransfer(to, providedTokens));\r\n        return providedTokens;\r\n    }\r\n\r\n    function finishCrowdsale() external {\r\n        require(isFinished());\r\n        if (leftTokens > 0) {\r\n            token.burn(leftTokens);\r\n            leftTokens = 0;\r\n        }\r\n    }\r\n\r\n    function takeBountyTokens() external returns (bool){\r\n        require(isFinished());\r\n        uint256 allowance = bountyTokensToAddress[msg.sender];\r\n        require(allowance > 0);\r\n        bountyTokensToAddress[msg.sender] = 0;\r\n        require(token.manualTransfer(msg.sender, allowance));\r\n        return true;\r\n    }\r\n\r\n    function giveTokensTo(address holder, uint256 amount) external onlyPayloadSize(2 * 32) onlyOwner returns (bool) {\r\n        require(bountyTokenAmount >= givenBountyTokens.add(amount));\r\n        bountyTokensToAddress[holder] = bountyTokensToAddress[holder].add(amount);\r\n        givenBountyTokens = givenBountyTokens.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function getAmountByCurrency(uint index) external returns (uint256) {\r\n        AmountData memory tempAmountData = amountsByCurrency[index];\r\n        return tempAmountData.value;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(msg.sender.call.gas(3000000).value(this.balance)());\r\n    }\r\n\r\n    function setAmountForDeal(uint256 value) external onlyOwner {\r\n        minAmountForDeal = value;\r\n    }\r\n\r\n    function withdrawAmount(uint256 amount) external onlyOwner {\r\n        uint256 givenAmount = amount;\r\n        if (this.balance < amount) {\r\n            givenAmount = this.balance;\r\n        }\r\n        require(msg.sender.call.gas(3000000).value(givenAmount)());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountsByCurrency\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveTokensTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAmountForDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyTokensToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmountForDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"uint256\"}],\"name\":\"addCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"givenTokens\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualTransferTokensTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"givenBountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAmountByCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://457807afc1a78df34f9427932afebbf8e21424920a17e5fbf6c757a3846e788a"}]}