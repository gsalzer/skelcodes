{"status":"1","message":"OK","result":[{"SourceCode":"// Royal Kingdom Coin Token\r\n// www.royalkingdomcoin.com\r\n//\r\n// RKC token is a virtual token, governed by ERC20-compatible Ethereum Smart Contract and secured by Ethereum Blockchain\r\n// The official website is https://www.royalkingdomcoin.com/\r\n//\r\n// The uints are all in wei and atto tokens (*10^-18)\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * Basic token\r\n * Basic version of StandardToken, with no allowances\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /*\r\n   * Fix for the ERC20 short address attack  \r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Standard ERC20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract RKCToken is StandardToken, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    //--------------   Info for ERC20 explorers  -----------------//\r\n    string public name = \"Royal Kingdom Coin\";\r\n    string public symbol = \"RKC\";\r\n    uint public decimals = 18;\r\n\r\n    //---------------------   Constants   ------------------------//\r\n    bool public constant TEST_MODE = false;\r\n    uint public constant atto = 1000000000000000000;\r\n    uint public constant INITIAL_SUPPLY = 15000000 * atto; // 15 mln RKC. Impossible to mint more than this\r\n    address public teamWallet = 0xb79F963f200f85D0e3dD60C82ABB8F80b5869CB9;\r\n    // Made up ICO address (designating the token pool reserved for ICO, no one has access to it)\r\n    address public ico_address = 0x1c01C01C01C01c01C01c01c01c01C01c01c01c01;\r\n    uint public constant ICO_START_TIME = 1499810400;\r\n\r\n    //----------------------  Variables  -------------------------//\r\n    uint public current_supply = 0; // Holding the number of all the coins in existence\r\n    uint public ico_starting_supply = 0; // How many atto tokens *were* available for sale at the beginning of the ICO\r\n    uint public current_price_atto_tokens_per_wei = 0; // Holding current price (determined by the algorithm in buy())\r\n\r\n    //-------------   Flags describing ICO stages   --------------//\r\n    bool public preSoldSharesDistributed = false; // Prevents accidental re-distribution of shares\r\n    bool public isICOOpened = false;\r\n    bool public isICOClosed = false;\r\n    // 3 stages:\r\n    // Contract has just been deployed and initialized. isICOOpened == false, isICOClosed == false\r\n    // ICO has started, now anybody can buy(). isICOOpened == true, isICOClosed == false\r\n    // ICO has finished, now the team can receive the ether. isICOOpened == false, isICOClosed == true\r\n\r\n    //---------------------   Premiums   -------------------------//\r\n    uint[] public premiumPacks;\r\n    mapping(address => uint) premiumPacksPaid;\r\n\r\n    //----------------------   Events  ---------------------------//\r\n    event ICOOpened();\r\n    event ICOClosed();\r\n    event PriceChanged(uint old_price, uint new_price);\r\n    event SupplyChanged(uint supply, uint old_supply);\r\n    event RKCAcquired(address account, uint amount_in_wei, uint amount_in_rkc);\r\n\r\n    // ***************************************************************************\r\n\r\n    // Constructor\r\n    function RKCToken() {\r\n        // Some percentage of the tokens is already reserved by early employees and investors\r\n        // Here we're initializing their balances\r\n        distributePreSoldShares();\r\n\r\n        // Starting price\r\n        current_price_atto_tokens_per_wei = calculateCurrentPrice(1);\r\n\r\n        // Some other initializations\r\n        premiumPacks.length = 0;\r\n    }\r\n\r\n    // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Buy token by sending ether here\r\n    //\r\n    // Price is being determined by the algorithm in recalculatePrice()\r\n    // You can also send the ether directly to the contract address\r\n    function buy() payable {\r\n        if (msg.value == 0) throw; // no tokens for you\r\n\r\n        // Only works in the ICO stage, after that the token is going to be traded on the exchanges\r\n        if (!isICOOpened) throw;\r\n        if (isICOClosed) throw;\r\n\r\n        // Deciding how many tokens can be bought with the ether received\r\n        uint tokens = getAttoTokensAmountPerWeiInternal(msg.value);\r\n\r\n        // Don't allow to buy more than 1% per transaction (secures from huge investors swalling the whole thing in 1 second)\r\n        uint allowedInOneTransaction = current_supply / 100;\r\n        if (tokens > allowedInOneTransaction) throw;\r\n\r\n        // Just in case\r\n        if (tokens > balances[ico_address]) throw;\r\n\r\n        // Transfer from the ICO pool\r\n        balances[ico_address] = balances[ico_address].sub(tokens); // if not enough, will throw\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n        // Kick the price changing algo\r\n        uint old_price = current_price_atto_tokens_per_wei;\r\n        current_price_atto_tokens_per_wei = calculateCurrentPrice(getAttoTokensBoughtInICO());\r\n        if (current_price_atto_tokens_per_wei == 0) current_price_atto_tokens_per_wei = 1; // in case it is too small that it gets rounded to zero\r\n        if (current_price_atto_tokens_per_wei > old_price) current_price_atto_tokens_per_wei = old_price; // in case some weird overflow happens\r\n\r\n        // Broadcasting price change event\r\n        if (old_price != current_price_atto_tokens_per_wei) PriceChanged(old_price, current_price_atto_tokens_per_wei);\r\n\r\n        // Broadcasting the buying event\r\n        RKCAcquired(msg.sender, msg.value, tokens);\r\n    }\r\n\r\n    // Formula for the dynamic price change algorithm\r\n    function calculateCurrentPrice(uint attoTokensBought) constant returns (uint result) {\r\n        // see http://www.wolframalpha.com/input/?i=f(x)+%3D+395500000+%2F+(x+%2B+150000)+-+136\r\n        return (395500000 / ((attoTokensBought / atto) + 150000)).sub(136); // mixing safe and usual math here because the division will throw on inconsistency\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Functions for the contract owner\r\n\r\n    function openICO() onlyOwner {\r\n        if (isICOOpened) throw;\r\n        if (isICOClosed) throw;\r\n        isICOOpened = true;\r\n\r\n        ICOOpened();\r\n    }\r\n    function closeICO() onlyOwner {\r\n        if (isICOClosed) throw;\r\n        if (!isICOOpened) throw;\r\n\r\n        isICOOpened = false;\r\n        isICOClosed = true;\r\n\r\n        // Redistribute ICO Tokens that were not bought as the first premiums\r\n        premiumPacks.length = 1;\r\n        premiumPacks[0] = balances[ico_address];\r\n        balances[ico_address] = 0;\r\n\r\n        ICOClosed();\r\n    }\r\n    function pullEtherFromContract() onlyOwner {\r\n        // Only when ICO is closed\r\n        if (!isICOClosed) throw;\r\n\r\n        if (!teamWallet.send(this.balance)) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Some percentage of the tokens is already reserved by early employees and investors\r\n    // Here we're initializing their balances\r\n    function distributePreSoldShares() onlyOwner {\r\n        // Making it impossible to call this function twice\r\n        if (preSoldSharesDistributed) throw;\r\n        preSoldSharesDistributed = true;\r\n\r\n        // Values are in atto tokens\r\n        balances[0x7A3c869603E28b0242c129440c9dD97F8A5bEe80] = 7508811 * atto;\r\n        balances[0x24a541dEAe0Fc87C990A208DE28a293fb2A982d9] = 4025712 * atto;\r\n        balances[0xEcF843458e76052E6363fFb78C7535Cd87AA3AB2] = 300275 * atto;\r\n        balances[0x947963ED2da750a0712AE0BF96E08C798813F277] = 150000 * atto;\r\n        balances[0x82Bc8452Ab76fBA446e16b57C080F5258F557734] = 150000 * atto;\r\n        balances[0x0959Ed48d55e580BB58df6E5ee01BAa787d80848] = 90000 * atto;\r\n        balances[0x530A8016fB5B3d7A0F92910b4814e383835Bd51E] = 75000 * atto;\r\n        balances[0xC3e934D3ADE0Ab9F61F824a9a824462c790e47B0] = 202 * atto;\r\n        current_supply = (7508811 + 4025712 + 300275 + 150000 + 150000 + 90000 + 75000 + 202) * atto;\r\n\r\n        // Sending the rest to ICO pool\r\n        balances[ico_address] = INITIAL_SUPPLY.sub(current_supply);\r\n\r\n        // Initializing the supply variables\r\n        ico_starting_supply = balances[ico_address];\r\n        current_supply = INITIAL_SUPPLY;\r\n        SupplyChanged(0, current_supply);\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Some useful getters (although you can just query the public variables)\r\n\r\n    function getCurrentPriceAttoTokensPerWei() constant returns (uint result) {\r\n        return current_price_atto_tokens_per_wei;\r\n    }\r\n    function getAttoTokensAmountPerWeiInternal(uint value) payable returns (uint result) {\r\n        return value * current_price_atto_tokens_per_wei;\r\n    }\r\n    function getAttoTokensAmountPerWei(uint value) constant returns (uint result) {\r\n        return value * current_price_atto_tokens_per_wei;\r\n    }\r\n    function getSupply() constant returns (uint result) {\r\n        return current_supply;\r\n    }\r\n    function getAttoTokensLeftForICO() constant returns (uint result) {\r\n        return balances[ico_address];\r\n    }\r\n    function getAttoTokensBoughtInICO() constant returns (uint result) {\r\n        return ico_starting_supply - getAttoTokensLeftForICO();\r\n    }\r\n    function getBalance(address addr) constant returns (uint balance) {\r\n        return balances[addr];\r\n    }\r\n    function getPremiumPack(uint index) constant returns (uint premium) {\r\n        return premiumPacks[index];\r\n    }\r\n    function getPremiumCount() constant returns (uint length) {\r\n        return premiumPacks.length;\r\n    }\r\n    function getBalancePremiumsPaid(address account) constant returns (uint result) {\r\n        return premiumPacksPaid[account];\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Premiums\r\n\r\n    function sendPremiumPack(uint amount) onlyOwner allowedPayments(msg.sender, amount) {\r\n        premiumPacks.length += 1;\r\n        premiumPacks[premiumPacks.length-1] = amount;\r\n        balances[msg.sender] = balances[msg.sender].sub(amount); // will throw and revert the whole thing if doesn't have this amount\r\n    }\r\n\r\n    function updatePremiums(address account) private {\r\n        if (premiumPacks.length > premiumPacksPaid[account]) {\r\n            uint startPackIndex = premiumPacksPaid[account];\r\n            uint finishPackIndex = premiumPacks.length - 1;\r\n            for(uint i = startPackIndex; i <= finishPackIndex; i++) {\r\n                if (current_supply != 0) { // just in case\r\n                    uint owing = balances[account] * premiumPacks[i] / current_supply;\r\n                    balances[account] = balances[account].add(owing);\r\n                }\r\n            }\r\n            premiumPacksPaid[account] = premiumPacks.length;\r\n        }\r\n    }\r\n\r\n    // ***************************************************************************\r\n\r\n    // Overriding payment functions to take control over the logic\r\n\r\n    modifier allowedPayments(address payer, uint value) {\r\n        // Don't allow to transfer coins until the ICO ends\r\n        if (isICOOpened) throw;\r\n        if (!isICOClosed) throw;\r\n\r\n        // Limit the quick dump possibility\r\n        uint diff = 0;\r\n        uint allowed = 0;\r\n        if (balances[payer] > current_supply / 100) { // for balances > 1% of total supply\r\n            if (block.timestamp > ICO_START_TIME) {\r\n                diff = block.timestamp - ICO_START_TIME;\r\n            } else {\r\n                diff = ICO_START_TIME - block.timestamp;\r\n            }\r\n\r\n            allowed = (current_supply / 20) * (diff / (60 * 60 * 24 * 30)); // 5% unlocked every month\r\n\r\n            if (value > allowed) throw;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) allowedPayments(_from, _value) {\r\n        updatePremiums(_from);\r\n        updatePremiums(_to);\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) allowedPayments(msg.sender, _value) {\r\n        updatePremiums(msg.sender);\r\n        updatePremiums(_to);\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_price_atto_tokens_per_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPremiumCount\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSoldSharesDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWeiInternal\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendPremiumPack\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalancePremiumsPaid\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPremiumPack\",\"outputs\":[{\"name\":\"premium\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEST_MODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attoTokensBought\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullEtherFromContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAttoTokensAmountPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPriceAttoTokensPerWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensBoughtInICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttoTokensLeftForICO\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_starting_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumPacks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributePreSoldShares\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ICOClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in_wei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_in_rkc\",\"type\":\"uint256\"}],\"name\":\"RKCAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RKCToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1903faf596718d0283e874dd664c283ad78e72ef1398fc0fa4fe33376495c6d1"}]}