{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n _    _      _                              _        \r\n| |  | |    | |                            | |       \r\n| |  | | ___| | ___ ___  _ __ ___   ___    | |_ ___  \r\n| |/\\| |/ _ | |/ __/ _ \\| '_ ` _ \\ / _ \\   | __/ _ \\ \r\n\\  /\\  |  __| | (_| (_) | | | | | |  __/   | || (_) |\r\n \\/  \\/ \\___|_|\\___\\___/|_| |_| |_|\\___|    \\__\\___/            \r\n\r\n\r\n$$\\    $$\\ $$\\   $$\\               $$\\                     $$\\       \r\n$$ |   $$ |\\__|  $$ |              $$ |                    $$ |      \r\n$$ |   $$ |$$\\ $$$$$$\\    $$$$$$\\  $$ |$$\\   $$\\  $$$$$$$\\ $$ |  $$\\ \r\n\\$$\\  $$  |$$ |\\_$$  _|   \\____$$\\ $$ |$$ |  $$ |$$  _____|$$ | $$  |\r\n \\$$\\$$  / $$ |  $$ |     $$$$$$$ |$$ |$$ |  $$ |$$ /      $$$$$$  / \r\n  \\$$$  /  $$ |  $$ |$$\\ $$  __$$ |$$ |$$ |  $$ |$$ |      $$  _$$<  \r\n   \\$  /   $$ |  \\$$$$  |\\$$$$$$$ |$$ |\\$$$$$$  |\\$$$$$$$\\ $$ | \\$$\\ \r\n    \\_/    \\__|   \\____/  \\_______|\\__| \\______/  \\_______|\\__|  \\__|\r\n*/\r\n\r\ncontract Vitaluck {\r\n    \r\n    // Admin\r\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\r\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\r\n    string MagicKey;\r\n    uint256 minBetValue = 50000000000000000;\r\n    uint256 currentJackpot;\r\n    \r\n    modifier onlyCeo() {\r\n        require (msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    \r\n    //\r\n    // Events\r\n    //\r\n    \r\n    event NewPlay(address player, uint number, bool won);\r\n\r\n    //\r\n    // GAME\r\n    //\r\n\r\n    struct Bet {\r\n        uint number;            // The number given to the user\r\n        bool isWinner;          // Has this bet won the jackpot\r\n        address player;         // We save the address of the player\r\n        uint32 timestamp;       // We save the timestamp of this bet\r\n        uint256 JackpotWon;     // The amount won if the user won the jackpot\r\n    }\r\n    Bet[] bets;\r\n\r\n    mapping (address => uint) public ownerBetsCount;    // How many bets have this address made\r\n\r\n    // Stats\r\n    uint totalTickets;          // The total amount of bets\r\n    uint256 amountWon;          // The total amount of ETH won by users\r\n    uint256 amountPlayed;       // The total amount of ETH played by users\r\n\r\n    // The countdown time will be used to reset the winning number after 48 hours if there aren't any new winning number\r\n    uint cooldownTime = 1 days;\r\n\r\n    // To track the current winner\r\n    address currentWinningAddress;\r\n    uint currentWinningNumber;\r\n    uint currentResetTimer;\r\n\r\n    // Random numbers that can be modified by the CEO to make the game completely random\r\n    uint randomNumber = 178;\r\n    uint randomNumber2;\r\n    \r\n    function() public payable { \r\n        Play();\r\n    }\r\n    \r\n    /*\r\n    This is the main function of the game. \r\n    It is called when a player sends ETH to the contract or play using Metamask.\r\n    It calculates the amount of tickets bought by the player (according to the amount received by the contract) and generates a random number for each ticket.\r\n    We keep the best number of all. -> 1 ticket = 0.01 ETH \r\n    */\r\n    function Play() public payable {\r\n        // We don't run the function if the player paid less than 0.01 ETH\r\n        require(msg.value >= minBetValue);\r\n        \r\n        // If this is the first ticket ever\r\n        if(totalTickets == 0) {\r\n            // We save the current Jackpot value\r\n            totalTickets++;\r\n            currentJackpot = currentJackpot + msg.value;\r\n            return;\r\n        }\r\n\r\n        uint _thisJackpot = currentJackpot;\r\n        // here we count the number of tickets purchased by the user (each ticket costs 0.01ETH)\r\n        uint _finalRandomNumber = 0;\r\n        \r\n        // We save the current Jackpot value\r\n        currentJackpot = currentJackpot + msg.value;\r\n        \r\n        // We generate a random number for each ticket purchased by the player\r\n        // Example: 1 ticket costs 0.01 ETH, if a user paid 1 ETH, we will run this function 100 times and save the biggest number of all as its result\r\n        _finalRandomNumber = (uint(now) - 1 * randomNumber * randomNumber2 + uint(now))%1000 + 1;\r\n        randomNumber = _finalRandomNumber;\r\n\r\n        // We keep track of the amount played by the users\r\n        amountPlayed = amountPlayed + msg.value;\r\n        totalTickets++;\r\n        ownerBetsCount[msg.sender]++;\r\n\r\n        // We calculate and transfer to the owner a commission of 10%\r\n        uint256 MsgValue10Percent = msg.value / 10;\r\n        cfoAddress.transfer(MsgValue10Percent);\r\n        \r\n        \r\n        // We save the current Jackpot value\r\n        currentJackpot = currentJackpot - MsgValue10Percent;\r\n\r\n        // Now that we have the biggest number of the player we check if this is better than the previous winning number\r\n        if(_finalRandomNumber > currentWinningNumber) {\r\n            \r\n            // we update the cooldown time (when the cooldown time is expired, the owner will be able to reset the game)\r\n            currentResetTimer = now + cooldownTime;\r\n\r\n            // The player is a winner and wins the jackpot (he/she wins 90% of the balance, we keep some funds for the next game)\r\n            uint256 JackpotWon = _thisJackpot;\r\n            \r\n            msg.sender.transfer(JackpotWon);\r\n            \r\n            // We save the current Jackpot value\r\n            currentJackpot = currentJackpot - JackpotWon;\r\n        \r\n            // We keep track of the amount won by the users\r\n            amountWon = amountWon + JackpotWon;\r\n            currentWinningNumber = _finalRandomNumber;\r\n            currentWinningAddress = msg.sender;\r\n\r\n            // We save this bet in the blockchain\r\n            bets.push(Bet(_finalRandomNumber, true, msg.sender, uint32(now), JackpotWon));\r\n            NewPlay(msg.sender, _finalRandomNumber, true);\r\n            \r\n            // If the user's number is equal to 100 we reset the max number\r\n            if(_finalRandomNumber >= 900) {\r\n                // We reset the winning address and set the current winning number to 1 (the next player will have 99% of chances to win)\r\n                currentWinningAddress = address(this);\r\n                currentWinningNumber = 1;\r\n            }\r\n        } else {\r\n            // The player is a loser, we transfer 10% of the bet to the current winner and save the rest in the jackpot\r\n            currentWinningAddress.transfer(MsgValue10Percent);\r\n        \r\n            // We save the current Jackpot value\r\n            currentJackpot = currentJackpot - MsgValue10Percent;\r\n        \r\n            // We save this bet in the blockchain\r\n            bets.push(Bet(_finalRandomNumber, false, msg.sender, uint32(now), 0));\r\n            NewPlay(msg.sender, _finalRandomNumber, false);\r\n        }\r\n    }\r\n    \r\n    function TestRandomNumber() public view returns (uint, uint, uint) {\r\n        uint _randomNumber1;\r\n        uint _randomNumber2;\r\n        uint _randomNumber3;\r\n        \r\n        _randomNumber1 = (uint(now) - 1 * randomNumber * randomNumber2 + uint(now))%1000 + 1;\r\n        _randomNumber2 = (uint(now) - 2 * _randomNumber1 * randomNumber2 + uint(now))%1000 + 1;\r\n        _randomNumber3 = (uint(now) - 3 * _randomNumber2 * randomNumber2 + uint(now))%1000 + 1;\r\n        \r\n        return(_randomNumber1,_randomNumber2,_randomNumber3);\r\n    }\r\n\r\n    /*\r\n    This function can be called by the contract owner (24 hours after the last game) if the game needs to be reset\r\n    Example: the last number is 99 but the jackpot is too small for players to want to play.\r\n    When the owner reset the game it:\r\n        1. Transfers automatically the remaining jackpot (minus 10% that needs to be kept in the contract for the new jackpot) to the last winner \r\n        2. It resets the max number to 5 which will motivate new users to play again\r\n    \r\n    It can only be called by the owner 24h after the last winning game.\r\n    */\r\n    function manuallyResetGame() public onlyCeo {\r\n        // We verifiy that 24h have passed since the beginning of the game\r\n        require(currentResetTimer < now);\r\n\r\n        // The current winning address wins the jackpot (he/she wins 90% of the balance, we keep 10% to fund the next turn)\r\n        uint256 JackpotWon = currentJackpot - minBetValue;\r\n        currentWinningAddress.transfer(JackpotWon);\r\n        \r\n        // We save the current Jackpot value\r\n        currentJackpot = currentJackpot - JackpotWon;\r\n\r\n        // We keep track of the amount won by the users\r\n        amountWon = amountWon + JackpotWon;\r\n\r\n        // We reset the winning address and set the current winning number to 1 (the next player will have 99% of chances to win)\r\n        currentWinningAddress = address(this);\r\n        currentWinningNumber = 1;\r\n    }\r\n\r\n    /*\r\n    Those functions are useful to return some important data about the game.\r\n    */\r\n    function GetCurrentNumbers() public view returns(uint, uint256, uint) {\r\n        uint _currentJackpot = currentJackpot;\r\n        return(currentWinningNumber, _currentJackpot, bets.length);\r\n    }\r\n    function GetWinningAddress() public view returns(address) {\r\n        return(currentWinningAddress);\r\n    }\r\n    \r\n    function GetStats() public view returns(uint, uint256, uint256) {\r\n        return(totalTickets, amountPlayed, amountWon);\r\n    }\r\n\r\n    // This will returns the data of a bet\r\n    function GetBet(uint _betId) external view returns (\r\n        uint number,            // The number given to the user\r\n        bool isWinner,          // Has this bet won the jackpot\r\n        address player,         // We save the address of the player\r\n        uint32 timestamp,       // We save the timestamp of this bet\r\n        uint256 JackpotWon     // The amount won if the user won the jackpot\r\n    ) {\r\n        Bet storage _bet = bets[_betId];\r\n\r\n        number = _bet.number;\r\n        isWinner = _bet.isWinner;\r\n        player = _bet.player;\r\n        timestamp = _bet.timestamp;\r\n        JackpotWon = _bet.JackpotWon;\r\n    }\r\n\r\n    // This function will return only the bets id of a certain address\r\n    function GetUserBets(address _owner) external view returns(uint[]) {\r\n        uint[] memory result = new uint[](ownerBetsCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < bets.length; i++) {\r\n          if (bets[i].player == _owner) {\r\n            result[counter] = i;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n    // This function will return only the bets id of a certain address\r\n    function GetLastBetUser(address _owner) external view returns(uint[]) {\r\n        uint[] memory result = new uint[](ownerBetsCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < bets.length; i++) {\r\n          if (bets[i].player == _owner) {\r\n            result[counter] = i;\r\n            counter++;\r\n          }\r\n        }\r\n        return result;\r\n    }\r\n    /*\r\n    Those functions are useful to modify some values in the game\r\n    */\r\n    function modifyRandomNumber2(uint _newRdNum) public onlyCeo {\r\n        randomNumber2 = _newRdNum;\r\n    }\r\n    function modifyCeo(address _newCeo) public onlyCeo {\r\n        require(msg.sender == ceoAddress);\r\n        ceoAddress = _newCeo;\r\n    }\r\n    function modifyCfo(address _newCfo) public onlyCeo {\r\n        require(msg.sender == ceoAddress);\r\n        cfoAddress = _newCfo;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"GetLastBetUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetWinningAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TestRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRdNum\",\"type\":\"uint256\"}],\"name\":\"modifyRandomNumber2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerBetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"GetUserBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manuallyResetGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCfo\",\"type\":\"address\"}],\"name\":\"modifyCfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"GetBet\",\"outputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"isWinner\",\"type\":\"bool\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint32\"},{\"name\":\"JackpotWon\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCeo\",\"type\":\"address\"}],\"name\":\"modifyCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCurrentNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"won\",\"type\":\"bool\"}],\"name\":\"NewPlay\",\"type\":\"event\"}]","ContractName":"Vitaluck","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a1648a5f8708963f54f9c3c6ef54028fc9f11591d185d2b59d0c8b5a0123e166"}]}