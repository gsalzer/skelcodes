{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract token { \r\n   function mintToken(address target, uint256 mintedAmount);\r\n}\r\n\r\ncontract owned { \r\n    address public owner;\r\n    \r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Crowdsale is owned {\r\n    address public beneficiary;\r\n    \r\n    uint256 public preICOLimit;\r\n    uint256 public totalLimit;\r\n    \r\n    uint256 public pricePreICO;\r\n    uint256 public priceICO;\r\n\r\n    bool preICOClosed = false;\r\n    bool ICOClosed = false;\r\n\r\n    bool preICOWithdrawn = false;\r\n    bool ICOWithdrawn = false;\r\n\r\n    bool public preICOActive = false;\r\n    bool public ICOActive = false;\r\n\r\n    uint256 public preICORaised; \r\n    uint256 public ICORaised; \r\n    uint256 public totalRaised; \r\n\r\n    token public tokenReward;\r\n\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    function Crowdsale() {\r\n        preICOLimit = 5000000 * 1 ether;\r\n        totalLimit = 45000000 * 1 ether; //50m hard cap minus 2.5m for mining and minus 2.5m for bounty\r\n        pricePreICO = 375;\r\n        priceICO = 250;\r\n    }\r\n\r\n    function init(address beneficiaryAddress, token tokenAddress)  onlyOwner {\r\n        beneficiary = beneficiaryAddress;\r\n        tokenReward = token(tokenAddress);\r\n    }\r\n\r\n    function () payable {\r\n        require (preICOActive || ICOActive);\r\n        uint256 amount = msg.value;\r\n\r\n        require (amount >= 0.05 * 1 ether); //0.05 - minimum contribution limit\r\n\r\n        //mintToken method will work only for owner of the token.\r\n        //So we need to execute transferOwnership from the token contract and pass ICO contract address as a parameter.\r\n        //By doing so we will lock minting function to ICO contract only (so no minting will be available after ICO).\r\n        if(preICOActive)\r\n        {\r\n    \t    tokenReward.mintToken(msg.sender, amount * pricePreICO);\r\n            preICORaised += amount;\r\n        }\r\n        if(ICOActive)\r\n        {\r\n    \t    tokenReward.mintToken(msg.sender, amount * priceICO);\r\n            ICORaised += amount;\r\n        }\r\n\r\n        balanceOf[msg.sender] += amount;\r\n        totalRaised += amount;\r\n        FundTransfer(msg.sender, amount, true);\r\n\r\n        if(preICORaised >= preICOLimit)\r\n        {\r\n            preICOActive = false;\r\n            preICOClosed = true;\r\n        }\r\n        \r\n        if(totalRaised >= totalLimit)\r\n        {\r\n            preICOActive = false;\r\n            ICOActive = false;\r\n            preICOClosed = true;\r\n            ICOClosed = true;\r\n        }\r\n    }\r\n    \r\n    function startPreICO() onlyOwner {\r\n        require(!preICOClosed);\r\n        require(!preICOActive);\r\n        require(!ICOClosed);\r\n        require(!ICOActive);\r\n        \r\n        preICOActive = true;\r\n    }\r\n    function stopPreICO() onlyOwner {\r\n        require(preICOActive);\r\n        \r\n        preICOActive = false;\r\n        preICOClosed = true;\r\n    }\r\n    function startICO() onlyOwner {\r\n        require(preICOClosed);\r\n        require(!ICOClosed);\r\n        require(!ICOActive);\r\n        \r\n        ICOActive = true;\r\n    }\r\n    function stopICO() onlyOwner {\r\n        require(ICOActive);\r\n        \r\n        ICOActive = false;\r\n        ICOClosed = true;\r\n    }\r\n\r\n\r\n    //withdrawal raised funds to beneficiary\r\n    function withdrawFunds() onlyOwner {\r\n\trequire ((!preICOWithdrawn && preICOClosed) || (!ICOWithdrawn && ICOClosed));\r\n\r\n            //withdraw results of preICO\r\n            if(!preICOWithdrawn && preICOClosed)\r\n            {\r\n                if (beneficiary.send(preICORaised)) {\r\n                    preICOWithdrawn = true;\r\n                    FundTransfer(beneficiary, preICORaised, false);\r\n                }\r\n            }\r\n            //withdraw results of ICO\r\n            if(!ICOWithdrawn && ICOClosed)\r\n            {\r\n                if (beneficiary.send(ICORaised)) {\r\n                    ICOWithdrawn = true;\r\n                    FundTransfer(beneficiary, ICORaised, false);\r\n                }\r\n            }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pricePreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICORaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICORaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ff7e857076a4a9d02f4b781d754aa488cb660faaf73f3181c29ce6375440847"}]}