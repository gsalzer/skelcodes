{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title KYC\r\n * @dev KYC contract handles the white list for ASTCrowdsale contract\r\n * Only accounts registered in KYC contract can buy AST token.\r\n * Admins can register account, and the reason why\r\n */\r\ncontract KYC is Ownable {\r\n  // check the address is registered for token sale\r\n  mapping (address => bool) public registeredAddress;\r\n  // check the address is admin of kyc contract\r\n  mapping (address => bool) public admin;\r\n  event Registered(address indexed _addr);\r\n  event Unregistered(address indexed _addr);\r\n  event NewAdmin(address indexed _addr);\r\n  event ClaimedTokens(address _token, address owner, uint256 balance);\r\n  /**\r\n   * @dev check whether the address is registered for token sale or not.\r\n   * @param _addr address\r\n   */\r\n  modifier onlyRegistered(address _addr) {\r\n    require(registeredAddress[_addr]);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev check whether the msg.sender is admin or not\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(admin[msg.sender]);\r\n    _;\r\n  }\r\n  function KYC() {\r\n    admin[msg.sender] = true;\r\n  }\r\n  /**\r\n   * @dev set new admin as admin of KYC contract\r\n   * @param _addr address The address to set as admin of KYC contract\r\n   */\r\n  function setAdmin(address _addr)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_addr != address(0) && admin[_addr] == false);\r\n    admin[_addr] = true;\r\n    NewAdmin(_addr);\r\n  }\r\n  /**\r\n   * @dev register the address for token sale\r\n   * @param _addr address The address to register for token sale\r\n   */\r\n  function register(address _addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    require(_addr != address(0) && registeredAddress[_addr] == false);\r\n    registeredAddress[_addr] = true;\r\n    Registered(_addr);\r\n  }\r\n  /**\r\n   * @dev register the addresses for token sale\r\n   * @param _addrs address[] The addresses to register for token sale\r\n   */\r\n  function registerByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\r\n      registeredAddress[_addrs[i]] = true;\r\n      Registered(_addrs[i]);\r\n    }\r\n  }\r\n  /**\r\n   * @dev unregister the registered address\r\n   * @param _addr address The address to unregister for token sale\r\n   */\r\n  function unregister(address _addr)\r\n    public\r\n    onlyAdmin\r\n    onlyRegistered(_addr)\r\n  {\r\n    registeredAddress[_addr] = false;\r\n    Unregistered(_addr);\r\n  }\r\n  /**\r\n   * @dev unregister the registered addresses\r\n   * @param _addrs address[] The addresses to unregister for token sale\r\n   */\r\n  function unregisterByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(registeredAddress[_addrs[i]]);\r\n      registeredAddress[_addrs[i]] = false;\r\n      Unregistered(_addrs[i]);\r\n    }\r\n  }\r\n  function claimTokens(address _token) public onlyOwner {\r\n    if (_token == 0x0) {\r\n        owner.transfer(this.balance);\r\n        return;\r\n    }\r\n    ERC20Basic token = ERC20Basic(_token);\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"registerByList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"unregisterByList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]","ContractName":"KYC","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ded9683095871ccdc25ff8498e6b95f7f8514e7e64e6b7dabe081969ece8139"}]}