{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant public returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value) ;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public{\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint balance){\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public{\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public{\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant public returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract IAMEToken is StandardToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\t/*// keccak256 hash of hidden cap\r\n\tstring public constant HIDDEN_CAP = \"0xd22f19d54193ff5e08e7ba88c8e52ec1b9fc8d4e0cf177e1be8a764fa5b375fa\";*/\r\n\r\n\t// Events\r\n\tevent CreatedIAM(address indexed _creator, uint256 _amountOfIAM);\r\n\tevent IAMRefundedForWei(address indexed _refunder, uint256 _amountOfWei);\r\n\r\n\t// Token data\r\n\tstring public constant name = \"IAME Token\";\r\n\tstring public constant symbol = \"IAM\";\r\n\tuint256 public constant decimals = 18;  // Since our decimals equals the number of wei per ether, we needn't multiply sent values when converting between IAM and ETH.\r\n\tstring public version = \"1.0\";\r\n\r\n\t// Addresses and contracts\r\n\taddress public executor;\r\n\taddress public devETHDestination;\r\n\taddress public reserveIAMDestination;\r\n\r\n\t// Sale data\r\n\tbool public saleHasEnded;\r\n\tbool public minCapReached;\r\n\tbool public allowRefund;\r\n\tmapping (address => uint256) public ETHContributed;\r\n\tuint256 public totalETHRaised;\r\n\tuint256 public saleStartBlock;\r\n\tuint256 public saleEndBlock;\r\n\tuint256 public saleFirstPresaleEndBlock;\r\n\tuint256 public constant RESERVE_PORTION_MULTIPLIER = 1;  // Multiplier used after sale\r\n\tuint256 public constant SECURITY_ETHER_CAP = 1000000 ether;\r\n\tuint256 public constant IAM_PER_ETH_BASE_RATE = 1000;  // 1000 IAM = 1 ETH during normal part of token sale\r\n\tuint256 public constant IAM_PER_ETH_PRE_SALE_RATE = 2000;\r\n  uint256 public constant PRE_SALE_CAP = 6000000;\r\n\r\n\tfunction IAMEToken(\r\n\t\taddress _devETHDestination,\r\n\t\taddress _reserveIAMDestination,\r\n\t\tuint256 _saleStartBlock,\r\n\t\tuint256 _saleEndBlock\r\n\t) {\r\n\t\t// Reject on invalid ETH destination address or  destination address\r\n\t\tif (_devETHDestination == address(0x0)) revert();\r\n\t\tif (_reserveIAMDestination == address(0x0)) revert();\r\n\t\t// Reject if sale ends before the current block\r\n\t\tif (_saleEndBlock <= block.number) revert();\r\n\t\t// Reject if the sale end time is less than the sale start time\r\n\t\tif (_saleEndBlock <= _saleStartBlock) revert();\r\n\r\n\t\texecutor = msg.sender;\r\n\t\tsaleHasEnded = false;\r\n\t\tminCapReached = false;\r\n\t\tallowRefund = false;\r\n\t\tdevETHDestination = _devETHDestination;\r\n\t\treserveIAMDestination = _reserveIAMDestination;\r\n\t\ttotalETHRaised = 0;\r\n\t\tsaleStartBlock = _saleStartBlock;\r\n\t\tsaleEndBlock = _saleEndBlock;\r\n\t\tsaleFirstPresaleEndBlock = saleStartBlock + 62608;  // Equivalent to 24 hours later, assuming 14 second blocks\r\n\t\ttotalSupply = 0;\r\n\t}\r\n\r\n\tfunction () payable {\r\n\t\t// If sale is not active, do not create IAM\r\n\t\tif (saleHasEnded) revert();\r\n\t\tif (block.number < saleStartBlock) revert();\r\n\t\tif (block.number > saleEndBlock) revert();\r\n\t\t// Check if the balance is greater than the security cap\r\n\t\tuint256 newEtherBalance = totalETHRaised.add(msg.value);\r\n\t\tif (newEtherBalance > SECURITY_ETHER_CAP) revert();\r\n\t\t// Do not do anything if the amount of ether sent is 0\r\n\t\tif (0 == msg.value) revert();\r\n\r\n\t\t// Calculate the IAM to ETH rate for the current time period of the sale\r\n\t\tuint256 curTokenRate = IAM_PER_ETH_BASE_RATE;\r\n\t\tif (block.number < saleFirstPresaleEndBlock || totalSupply < PRE_SALE_CAP) {\r\n\t\t    curTokenRate = IAM_PER_ETH_PRE_SALE_RATE;\r\n\t\t}\r\n\r\n\t\t// Calculate the amount of IAM being purchased\r\n\t\tuint256 amountOfIAM = msg.value.mul(curTokenRate);\r\n\r\n\t\t// Ensure that the transaction is safe\r\n\t\tuint256 totalSupplySafe = totalSupply.add(amountOfIAM);\r\n\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfIAM);\r\n\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\r\n\r\n\t\t// Update individual and total balances\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tbalances[msg.sender] = balanceSafe;\r\n\r\n\t\ttotalETHRaised = newEtherBalance;\r\n\t\tETHContributed[msg.sender] = contributedSafe;\r\n\r\n\t\tCreatedIAM(msg.sender, amountOfIAM);\r\n\t}\r\n\r\n\tfunction endSale() {\r\n\t\t// Do not end an already ended sale\r\n\t\tif (saleHasEnded) revert();\r\n\t\t// Can't end a sale that hasn't hit its minimum cap\r\n\t\tif (!minCapReached) revert();\r\n\t\t// Only allow the owner to end the sale\r\n\t\tif (msg.sender != executor) revert();\r\n\r\n\t\tsaleHasEnded = true;\r\n\r\n\t\t// Calculate and create reserve portion of IAM\r\n\t\tuint256 reserveShare = (totalSupply.mul(RESERVE_PORTION_MULTIPLIER));\r\n\t\tuint256 totalSupplySafe = totalSupply.add(reserveShare);\r\n\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tbalances[reserveIAMDestination] = reserveShare;\r\n\r\n\t\tCreatedIAM(reserveIAMDestination, reserveShare);\r\n\r\n\t\tif (this.balance > 0) {\r\n\t\t\tif (!devETHDestination.call.value(this.balance)()) revert();\r\n\t\t}\r\n\t}\r\n\r\n\t// Allows BlockIAM to withdraw funds\r\n\tfunction withdrawFunds() {\r\n\t\t// Disallow withdraw if the minimum hasn't been reached\r\n\t\tif (!minCapReached) revert();\r\n\t\tif (0 == this.balance) revert();\r\n\r\n\t\tif (!devETHDestination.call.value(this.balance)()) revert();\r\n\t}\r\n\r\n\t// Signals that the sale has reached its minimum funding goal\r\n\tfunction triggerMinCap() {\r\n\t\tif (msg.sender != executor) revert();\r\n\r\n\t\tminCapReached = true;\r\n\t}\r\n\r\n\t// Opens refunding.\r\n\tfunction triggerRefund() {\r\n\t\t// No refunds if the sale was successful\r\n\t\tif (saleHasEnded) revert();\r\n\t\t// No refunds if minimum cap is hit\r\n\t\tif (minCapReached) revert();\r\n\t\t// No refunds if the sale is still progressing\r\n\t\tif (block.number < saleEndBlock) revert();\r\n\t\tif (msg.sender != executor) revert();\r\n\r\n\t\tallowRefund = true;\r\n\t}\r\n\r\n\tfunction refund() external {\r\n\t\t// No refunds until it is approved\r\n\t\tif (!allowRefund) revert();\r\n\t\t// Nothing to refund\r\n\t\tif (0 == ETHContributed[msg.sender]) revert();\r\n\r\n\t\t// Do the refund.\r\n\t\tuint256 etherAmount = ETHContributed[msg.sender];\r\n\t\tETHContributed[msg.sender] = 0;\r\n\r\n\t\tIAMRefundedForWei(msg.sender, etherAmount);\r\n\t\tif (!msg.sender.send(etherAmount)) revert();\r\n\t}\r\n\r\n\tfunction changeDeveloperETHDestinationAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) revert();\r\n\t\tdevETHDestination = _newAddress;\r\n\t}\r\n\r\n\tfunction changeReserveIAMDestinationAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) revert();\r\n\t\treserveIAMDestination = _newAddress;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value) {\r\n\t\t// Cannot transfer unless the minimum cap is hit\r\n\t\tif (!minCapReached) revert();\r\n\r\n\t\tsuper.transfer(_to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint _value) {\r\n\t\t// Cannot transfer unless the minimum cap is hit\r\n\t\tif (!minCapReached) revert();\r\n\r\n\t\tsuper.transferFrom(_from, _to, _value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETHRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devETHDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveIAMDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IAM_PER_ETH_BASE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_PORTION_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFirstPresaleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeDeveloperETHDestinationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeReserveIAMDestinationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerMinCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECURITY_ETHER_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IAM_PER_ETH_PRE_SALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devETHDestination\",\"type\":\"address\"},{\"name\":\"_reserveIAMDestination\",\"type\":\"address\"},{\"name\":\"_saleStartBlock\",\"type\":\"uint256\"},{\"name\":\"_saleEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountOfIAM\",\"type\":\"uint256\"}],\"name\":\"CreatedIAM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_refunder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountOfWei\",\"type\":\"uint256\"}],\"name\":\"IAMRefundedForWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IAMEToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d706f436440b63375a6f08fa0d5869d45d75e88500000000000000000000000050328b81c0bfdba243e909cc965a8cf7ff3f6cad000000000000000000000000000000000000000000000000000000000044d55f0000000000000000000000000000000000000000000000000000000000499c32","Library":"","SwarmSource":"bzzr://11fef7840c80e49f6dc5f0c0213373200baa696bf03c441cbd3a1585efc80ccb"}]}