{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n// folio.ninja ERC20 Token & Crowdsale Contract\r\n// Contact: info@folio.ninja\r\n// Cap of 12,632,000 Tokens\r\n// 632,000 Tokens to Foundation\r\n// 25,000 ETH Cap that goes to Developers\r\n// Allows subsequent contribution / minting if cap not reached.\r\n\r\ncontract Assertive {\r\n  function assert(bool assertion) internal {\r\n      if (!assertion) throw;\r\n  }\r\n}\r\n\r\ncontract SafeMath is Assertive{\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Protocol {\r\n    function totalSupply() constant returns (uint256 totalSupply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20 is ERC20Protocol {\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n}\r\n\r\n// Folio Ninja Token Contract\r\ncontract FolioNinjaToken is ERC20, SafeMath {\r\n    // Consant token specific fields\r\n    string public constant name = \"folio.ninja\";\r\n    string public constant symbol = \"FLN\";\r\n    uint public constant decimals = 18;\r\n    uint public constant MAX_TOTAL_TOKEN_AMOUNT = 12632000 * 10 ** decimals;\r\n\r\n    // Fields that are only changed in constructor\r\n    address public minter; // Contribution contract\r\n    address public FOUNDATION_WALLET; // Can change to other minting contribution contracts but only until total amount of token minted\r\n    uint public startTime; // Contribution start time in seconds\r\n    uint public endTime; // Contribution end time in seconds\r\n\r\n    // MODIFIERS\r\n    modifier only_minter {\r\n        assert(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier only_foundation {\r\n        assert(msg.sender == FOUNDATION_WALLET);\r\n        _;\r\n    }\r\n\r\n    modifier is_later_than(uint x) {\r\n        assert(now > x);\r\n        _;\r\n    }\r\n\r\n    modifier max_total_token_amount_not_reached(uint amount) {\r\n        assert(safeAdd(totalSupply, amount) <= MAX_TOTAL_TOKEN_AMOUNT);\r\n        _;\r\n    }\r\n\r\n    // METHODS\r\n    function FolioNinjaToken(address setMinter, address setFoundation, uint setStartTime, uint setEndTime) {\r\n        minter = setMinter;\r\n        FOUNDATION_WALLET = setFoundation;\r\n        startTime = setStartTime;\r\n        endTime = setEndTime;\r\n    }\r\n\r\n    /// Pre: Address of contribution contract (minter) is set\r\n    /// Post: Mints token\r\n    function mintToken(address recipient, uint amount)\r\n        external\r\n        only_minter\r\n        max_total_token_amount_not_reached(amount)\r\n    {\r\n        balances[recipient] = safeAdd(balances[recipient], amount);\r\n        totalSupply = safeAdd(totalSupply, amount);\r\n    }\r\n\r\n    /// Pre: Prevent transfers until contribution period is over.\r\n    /// Post: Transfer FLN from msg.sender\r\n    /// Note: ERC20 interface\r\n    function transfer(address recipient, uint amount)\r\n        is_later_than(endTime)\r\n        returns (bool success)\r\n    {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    /// Pre: Prevent transfers until contribution period is over.\r\n    /// Post: Transfer FLN from arbitrary address\r\n    /// Note: ERC20 interface\r\n    function transferFrom(address sender, address recipient, uint amount)\r\n        is_later_than(endTime)\r\n        returns (bool success)\r\n    {\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    /// Pre: minting address is set. Restricted to foundation.\r\n    /// Post: New minter can now create tokens up to MAX_TOTAL_TOKEN_AMOUNT.\r\n    /// Note: This allows additional contribution periods at a later stage, while still using the same ERC20 compliant contract.\r\n    function changeMintingAddress(address newMintingAddress) only_foundation { minter = newMintingAddress; }\r\n\r\n    /// Pre: foundation address is set. Restricted to foundation.\r\n    /// Post: New address set. This address controls the setting of the minter address\r\n    function changeFoundationAddress(address newFoundationAddress) only_foundation { FOUNDATION_WALLET = newFoundationAddress; }\r\n}\r\n\r\n/// @title Contribution Contract\r\ncontract Contribution is SafeMath {\r\n    // FIELDS\r\n\r\n    // Constant fields\r\n    uint public constant ETHER_CAP = 25000 ether; // Max amount raised during first contribution; targeted amount AUD 7M\r\n    uint public constant MAX_CONTRIBUTION_DURATION = 8 weeks; // Max amount in seconds of contribution period\r\n\r\n    // Price Rates\r\n    uint public constant PRICE_RATE_FIRST = 480;\r\n    uint public constant PRICE_RATE_SECOND = 460;\r\n    uint public constant PRICE_RATE_THIRD = 440;\r\n    uint public constant PRICE_RATE_FOURTH = 400;\r\n\r\n    // Foundation Holdings\r\n    uint public constant FOUNDATION_TOKENS = 632000 ether;\r\n\r\n    // Fields that are only changed in constructor\r\n    address public FOUNDATION_WALLET; // folio.ninja foundation wallet\r\n    address public DEV_WALLET; // folio.ninja multisig wallet\r\n\r\n    uint public startTime; // Contribution start time in seconds\r\n    uint public endTime; // Contribution end time in seconds\r\n\r\n    FolioNinjaToken public folioToken; // Contract of the ERC20 compliant folio.ninja token\r\n\r\n    // Fields that can be changed by functions\r\n    uint public etherRaised; // This will keep track of the Ether raised during the contribution\r\n    bool public halted; // The foundation address can set this to true to halt the contribution due to an emergency\r\n\r\n    // EVENTS\r\n    event TokensBought(address indexed sender, uint eth, uint amount);\r\n\r\n    // MODIFIERS\r\n    modifier only_foundation {\r\n        assert(msg.sender == FOUNDATION_WALLET);\r\n        _;\r\n    }\r\n\r\n    modifier is_not_halted {\r\n        assert(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier ether_cap_not_reached {\r\n        assert(safeAdd(etherRaised, msg.value) <= ETHER_CAP);\r\n        _;\r\n    }\r\n\r\n    modifier is_not_earlier_than(uint x) {\r\n        assert(now >= x);\r\n        _;\r\n    }\r\n\r\n    modifier is_earlier_than(uint x) {\r\n        assert(now < x);\r\n        _;\r\n    }\r\n\r\n    // CONSTANT METHODS\r\n\r\n    /// Pre: startTime, endTime specified in constructor,\r\n    /// Post: Price rate at given blockTime; One ether equals priceRate() of FLN tokens\r\n    function priceRate() constant returns (uint) {\r\n        // Four price tiers\r\n        if (startTime <= now && now < startTime + 1 weeks)\r\n            return PRICE_RATE_FIRST;\r\n        if (startTime + 1 weeks <= now && now < startTime + 2 weeks)\r\n            return PRICE_RATE_SECOND;\r\n        if (startTime + 2 weeks <= now && now < startTime + 3 weeks)\r\n            return PRICE_RATE_THIRD;\r\n        if (startTime + 3 weeks <= now && now < endTime)\r\n            return PRICE_RATE_FOURTH;\r\n        // Should not be called before or after contribution period\r\n        assert(false);\r\n    }\r\n\r\n    // NON-CONSTANT METHODS\r\n    function Contribution(address setDevWallet, address setFoundationWallet, uint setStartTime) {\r\n        DEV_WALLET = setDevWallet;\r\n        FOUNDATION_WALLET = setFoundationWallet;\r\n        startTime = setStartTime;\r\n        endTime = startTime + MAX_CONTRIBUTION_DURATION;\r\n        folioToken = new FolioNinjaToken(this, FOUNDATION_WALLET, startTime, endTime); // Create Folio Ninja Token Contract\r\n\r\n        // Mint folio.ninja foundation tokens\r\n        folioToken.mintToken(FOUNDATION_WALLET, FOUNDATION_TOKENS);\r\n    }\r\n\r\n    /// Pre: N/a\r\n    /// Post: Bought folio.ninja tokens according to priceRate() and msg.value\r\n    function () payable { buyRecipient(msg.sender); }\r\n\r\n    /// Pre: N/a\r\n    /// Post: Bought folio ninja tokens according to priceRate() and msg.value on behalf of recipient\r\n    function buyRecipient(address recipient)\r\n        payable\r\n        is_not_earlier_than(startTime)\r\n        is_earlier_than(endTime)\r\n        is_not_halted\r\n        ether_cap_not_reached\r\n    {\r\n        uint amount = safeMul(msg.value, priceRate());\r\n        folioToken.mintToken(recipient, amount);\r\n        etherRaised = safeAdd(etherRaised, msg.value);\r\n        assert(DEV_WALLET.send(msg.value));\r\n        TokensBought(recipient, msg.value, amount);\r\n    }\r\n\r\n    /// Pre: Emergency situation that requires contribution period to stop.\r\n    /// Post: Contributing not possible anymore.\r\n    function halt() only_foundation { halted = true; }\r\n\r\n    /// Pre: Emergency situation resolved.\r\n    /// Post: Contributing becomes possible again.\r\n    function unhalt() only_foundation { halted = false; }\r\n\r\n    /// Pre: Restricted to foundation.\r\n    /// Post: New address set. To halt contribution and/or change minter in FolioNinjaToken contract.\r\n    function changeFoundationAddress(address newFoundationAddress) only_foundation { FOUNDATION_WALLET = newFoundationAddress; }\r\n\r\n    /// Pre: Restricted to foundation.\r\n    /// Post: New address set. To change beneficiary of contributions\r\n    function changeDevAddress(address newDevAddress) only_foundation { DEV_WALLET = newDevAddress; }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyRecipient\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"folioToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDATION_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundationAddress\",\"type\":\"address\"}],\"name\":\"changeFoundationAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_SECOND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_THIRD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"changeDevAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_FIRST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDATION_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_RATE_FOURTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"setDevWallet\",\"type\":\"address\"},{\"name\":\"setFoundationWallet\",\"type\":\"address\"},{\"name\":\"setStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"}]","ContractName":"Contribution","CompilerVersion":"v0.4.8+commit.60cc1668","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000352c91fa545a9da95a40c90fa03d9fffaf25d57700000000000000000000000034dc53e22c406e667a0cb6da664f18a3593084090000000000000000000000000000000000000000000000000000000059b41000","Library":"","SwarmSource":"bzzr://1f50db0e2df13aeaaf01b3cd65286b3aadc078567971733dd07664b3b36ba964"}]}