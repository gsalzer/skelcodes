{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n//contract by Adam Skrodzki\r\n//\r\ncontract BankAccount {\r\n    Bank parent;\r\n    function() payable public{\r\n        address mainAdr = parent.GetMainAddress();\r\n\r\n        mainAdr.transfer(msg.value);\r\n    }\r\n\r\n    function BankAccount (address _bankAddress) public {\r\n        parent = Bank(_bankAddress);\r\n    }\r\n    \r\n    function transferTokens(address _tokenAdr) public {\r\n        address mainAdr = parent.GetMainAddress();\r\n        Token t = Token(_tokenAdr);\r\n        t.transfer(mainAdr,t.balanceOf(this));\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function balanceOf(address a) constant returns(uint256);\r\n    function transfer(address to,uint256 value);\r\n}\r\n\r\ncontract Bank {\r\n\r\n    address private _mainAddress;\r\n    address public owner ;\r\n    address private operator ;\r\n    BankAccount[] private availableAddresses;\r\n    Token[] private tokens;\r\n    mapping(uint256 => address) private assignments ;\r\n\r\n    uint256 public firstFreeAddressIndex = 0;\r\n\r\n\r\n    function ChangeMainAccount(address mainAddress) public{\r\n        if(msg.sender==owner){\r\n            _mainAddress = mainAddress;\r\n        }\r\n    }\r\n    \r\n    function ChangeOperatorAccount(address addr) public{\r\n        if(msg.sender==owner){\r\n            operator = addr;\r\n        }\r\n    }\r\n    \r\n    function GetNextWithFunds(uint256 startAcc,uint256 startTok) constant returns(uint256,uint256,bool){\r\n            uint256 i = startAcc;\r\n            uint256 j = startTok;\r\n            if(j==0) j=1;\r\n            uint256 counter =0;\r\n            for(i;i<availableAddresses.length && counter<100;i++){\r\n                for(j;j<tokens.length && counter<100;j++){\r\n                    counter++;\r\n                    if(tokens[j].balanceOf(availableAddresses[i])>0){\r\n                        return (i,j,true);\r\n                    }\r\n                }\r\n                j=1;\r\n            }\r\n            if(i==availableAddresses.length){\r\n                return(0,0,false);\r\n            }\r\n            else{\r\n                return(i,j,false);\r\n            }\r\n    }\r\n    function TransferFunds(uint256 addrIdx,uint256 tokIdx) public{\r\n        if(msg.sender==owner || msg.sender==operator){\r\n            availableAddresses[addrIdx].transferTokens.gas(250000)(tokens[tokIdx]);\r\n        }\r\n        else{\r\n          revert();   \r\n        \r\n        }\r\n    }\r\n    function GetMainAddress() public constant returns (address){\r\n        return(_mainAddress);\r\n    }\r\n    function ChangeOwner(address newOwner) public{\r\n        if(msg.sender==owner){\r\n            owner = newOwner;\r\n        }\r\n        else{\r\n          revert();   \r\n        \r\n        }\r\n    }\r\n    function AddToken(address _adr)public {\r\n        if(msg.sender==owner || msg.sender==operator){\r\n            tokens.push(Token(_adr));\r\n        }\r\n        else{\r\n          revert();   \r\n        \r\n        }\r\n    }\r\n    function Bank(address mainAddress) public{\r\n        tokens.push(Token(0));\r\n        owner = msg.sender;\r\n        _mainAddress = mainAddress;\r\n    }\r\n    function CreateNewAccount() public{\r\n        var a = new BankAccount(this);\r\n        availableAddresses.push(a);\r\n    }\r\n    function GetAvailableAddressesCount() private constant returns(uint256){\r\n        return availableAddresses.length-firstFreeAddressIndex;\r\n    }\r\n\r\n    function AssignAddress(uint256 holderId) public{\r\n        if(msg.sender==owner || msg.sender==operator){\r\n            if(assignments[holderId]!=0){ // nie można stworzyć 2 adresów dla jednego klienta\r\n    \r\n            }\r\n            else{\r\n                if(GetAvailableAddressesCount()==0){\r\n                        CreateNewAccount();\r\n                }\r\n                assignments[holderId] = availableAddresses[firstFreeAddressIndex];\r\n                firstFreeAddressIndex = firstFreeAddressIndex+1;\r\n            }\r\n        }\r\n        else{\r\n          revert();   \r\n        \r\n        }\r\n\r\n    }\r\n\r\n    function GetAssignedAddress(uint256 holderId) public constant returns(address){\r\n         return assignments[holderId];\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAdr\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BankAccount","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fb950d858dab0594f4cffb77201215ee46d8b304","Library":"","SwarmSource":"bzzr://5e760e49f6f160923a8e1dee4c85bfd91096736b02e9165e4e090749706bb547"}]}