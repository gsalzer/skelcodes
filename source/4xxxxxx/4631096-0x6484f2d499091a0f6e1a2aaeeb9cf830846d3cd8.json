{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MultiOwners {\r\n\r\n    event AccessGrant(address indexed owner);\r\n    event AccessRevoke(address indexed owner);\r\n    \r\n    mapping(address => bool) owners;\r\n    address public publisher;\r\n\r\n\r\n    function MultiOwners() {\r\n        owners[msg.sender] = true;\r\n        publisher = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { \r\n        require(owners[msg.sender] == true);\r\n        _; \r\n    }\r\n\r\n    function isOwner() constant returns (bool) {\r\n        return owners[msg.sender] ? true : false;\r\n    }\r\n\r\n    function checkOwner(address maybe_owner) constant returns (bool) {\r\n        return owners[maybe_owner] ? true : false;\r\n    }\r\n\r\n\r\n    function grant(address _owner) onlyOwner {\r\n        owners[_owner] = true;\r\n        AccessGrant(_owner);\r\n    }\r\n\r\n    function revoke(address _owner) onlyOwner {\r\n        require(_owner != publisher);\r\n        require(msg.sender != _owner);\r\n\r\n        owners[_owner] = false;\r\n        AccessRevoke(_owner);\r\n    }\r\n}\r\n\r\ncontract Haltable is MultiOwners {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\ncontract FixedRate {\r\n    uint256 public rateETHUSD = 470e2;\r\n}\r\n\r\ncontract Stage is FixedRate, MultiOwners {\r\n    using SafeMath for uint256;\r\n\r\n    // Global\r\n    string _stageName = \"Pre-ICO\";\r\n\r\n    // Maximum possible cap in USD\r\n    uint256 public mainCapInUSD = 1000000e2;\r\n\r\n    // Maximum possible cap in USD\r\n    uint256 public hardCapInUSD = mainCapInUSD;\r\n\r\n    //  period in days\r\n    uint256 public period = 30 days;\r\n\r\n    // Token Price in USD\r\n    uint256 public tokenPriceUSD = 50;\r\n\r\n    // WEI per token\r\n    uint256 public weiPerToken;\r\n    \r\n    // start and end timestamp where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // total wei received during phase one\r\n    uint256 public totalWei;\r\n\r\n    // Maximum possible cap in wei for phase one\r\n    uint256 public mainCapInWei;\r\n    // Maximum possible cap in wei\r\n    uint256 public hardCapInWei;\r\n\r\n    function Stage (uint256 _startTime) {\r\n        startTime = _startTime;\r\n        endTime = startTime.add(period);\r\n        weiPerToken = tokenPriceUSD.mul(1 ether).div(rateETHUSD);\r\n        mainCapInWei = mainCapInUSD.mul(1 ether).div(rateETHUSD);\r\n        hardCapInWei = mainCapInWei;\r\n\r\n    }\r\n\r\n    /*\r\n     * @dev amount calculation, depends of current period\r\n     * @param _value ETH in wei\r\n     * @param _at time\r\n     */\r\n    function calcAmountAt(uint256 _value, uint256 _at) constant returns (uint256, uint256) {\r\n        uint256 estimate;\r\n        uint256 odd;\r\n\r\n        if(_value.add(totalWei) > hardCapInWei) {\r\n            odd = _value.add(totalWei).sub(hardCapInWei);\r\n            _value = hardCapInWei.sub(totalWei);\r\n        } \r\n        estimate = _value.mul(1 ether).div(weiPerToken);\r\n        require(_value + totalWei <= hardCapInWei);\r\n        return (estimate, odd);\r\n    }\r\n}\r\n\r\ncontract TripleAlphaCrowdsalePreICO is MultiOwners, Haltable, Stage {\r\n    using SafeMath for uint256;\r\n\r\n    // minimal token selled per time\r\n    uint256 public minimalTokens = 1e18;\r\n\r\n    // Sale token\r\n    TripleAlphaTokenPreICO public token;\r\n\r\n    // Withdraw wallet\r\n    address public wallet;\r\n\r\n    // Events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event OddMoney(address indexed beneficiary, uint256 value);\r\n\r\n    modifier validPurchase() {\r\n        bool nonZeroPurchase = msg.value != 0;\r\n\r\n        require(withinPeriod() && nonZeroPurchase);\r\n\r\n        _;        \r\n    }\r\n\r\n    modifier isExpired() {\r\n        require(now > endTime);\r\n\r\n        _;        \r\n    }\r\n\r\n    /**\r\n     * @return true if in period or false if not\r\n     */\r\n    function withinPeriod() constant returns(bool res) {\r\n        return (now >= startTime && now <= endTime);\r\n    }\r\n\r\n    /**\r\n     * @param _startTime Pre-ITO start time\r\n     * @param _wallet destination fund address (i hope it will be multi-sig)\r\n     */\r\n    function TripleAlphaCrowdsalePreICO(uint256 _startTime, address _wallet) Stage(_startTime)\r\n\r\n    {\r\n        require(_startTime >= now);\r\n        require(_wallet != 0x0);\r\n\r\n        token = new TripleAlphaTokenPreICO();\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Human readable period Name \r\n     * @return current stage name\r\n     */\r\n    function stageName() constant public returns (string) {\r\n        bool before = (now < startTime);\r\n        bool within = (now >= startTime && now <= endTime);\r\n\r\n        if(before) {\r\n            return 'Not started';\r\n        }\r\n\r\n        if(within) {\r\n            return _stageName;\r\n        } \r\n\r\n        return 'Finished';\r\n    }\r\n\r\n    \r\n    function totalEther() public constant returns(uint256) {\r\n        return totalWei.div(1e18);\r\n    }\r\n\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n    function() payable {\r\n        return buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function buyTokens(address contributor) payable stopInEmergency validPurchase public {\r\n        uint256 amount;\r\n        uint256 odd_ethers;\r\n        \r\n        (amount, odd_ethers) = calcAmountAt(msg.value, now);\r\n  \r\n        require(contributor != 0x0) ;\r\n        require(minimalTokens <= amount);\r\n\r\n        token.mint(contributor, amount);\r\n        TokenPurchase(contributor, msg.value, amount);\r\n\r\n        totalWei = totalWei.add(msg.value);\r\n\r\n        if(odd_ethers > 0) {\r\n            require(odd_ethers < msg.value);\r\n            OddMoney(contributor, odd_ethers);\r\n            contributor.transfer(odd_ethers);\r\n        }\r\n\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    /*\r\n     * @dev finish crowdsale\r\n     */\r\n    function finishCrowdsale() onlyOwner public {\r\n        require(now > endTime || totalWei == hardCapInWei);\r\n        require(!token.mintingFinished());\r\n        token.finishMinting();\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function running() constant public returns (bool) {\r\n        return withinPeriod() && !token.mintingFinished();\r\n    }\r\n}\r\n\r\ncontract TripleAlphaTokenPreICO is MintableToken {\r\n\r\n    string public constant name = 'Triple Alpha Token Pre-ICO';\r\n    string public constant symbol = 'pTRIA';\r\n    uint8 public constant decimals = 18;\r\n\r\n    function transferFrom(address from, address to, uint256 value) returns (bool) {\r\n        revert();\r\n    }\r\n\r\n    function transfer(address to, uint256 value) returns (bool) {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TripleAlphaTokenPreICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a5be47d0c32e74e2b8c8678138241080ba6c9cadf60972aabc6833b40a526b6"}]}