{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * Pulsar token contract.\r\n * Date: 2017-11-14.\r\n */\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;   // The owner of the contract\r\n\r\n  event OwnershipTransferred ( address indexed prev_owner, address indexed new_owner );\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership (address new_owner) onlyOwner public {\r\n    require(new_owner != address(0));\r\n    OwnershipTransferred(owner, new_owner);\r\n    owner = new_owner;\r\n  }\r\n\r\n\r\n} // Ownable\r\n\r\n\r\n/******************************************/\r\n/*       PULSAR TOKEN STARTS HERE         */\r\n/******************************************/\r\n\r\ncontract PulsarToken is Ownable {\r\n\r\n  /******** Public constants ********/\r\n\r\n  // Token decimal scale is the same as Ether to Wei scale = 10^18 (18 decimal digits)\r\n  uint public constant TOKEN_SCALE = 1 ether / 1 wei; // (10 ** 18)\r\n\r\n  // Total amount of tokens\r\n  uint public constant TOTAL_SUPPLY = 34540000 * TOKEN_SCALE;\r\n\r\n  // 2017-11-13 08:13:00 UTC = 00:13:00 PST\r\n  uint public constant ICO_START_TIME = 1510560780;\r\n\r\n  // Minimum accepted contribution is 0.1 Ether\r\n  uint public constant MIN_ACCEPTED_VALUE = 100000000000000000 wei; // 0.1 ether\r\n\r\n  // Minimum buyback amount of tokens\r\n  uint public constant MIN_BUYBACK_VALUE = 1 * TOKEN_SCALE;\r\n\r\n  // Public identifiers of the token\r\n  string public constant NAME = \"Pulsar\";       // token name\r\n  string public constant SYMBOL = \"PVC\";        // token symbol\r\n\r\n\r\n  /**\r\n   * Contract state machine.                           _____________\r\n   *                                                  ↓             |\r\n   * Deployed -> ICOStarted -> ICOStopped -> BuybackEnabled -> BuybackPaused -> Destroyed.\r\n   */\r\n  enum ContractState { Deployed, ICOStarted, ICOStopped, BuybackEnabled, BuybackPaused, Destroyed }\r\n\r\n  // Current state of the contract\r\n  ContractState private contractState = ContractState.Deployed;\r\n\r\n  // Contract state change event\r\n  event State ( ContractState state );\r\n\r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Transfer ( address indexed from, address indexed to, uint value );\r\n\r\n\r\n  /******** Public variables *********/\r\n\r\n  // This creates an array with all balances\r\n  mapping (address => uint) public balanceOf;\r\n\r\n  // Reserved bounty tokens\r\n  uint public bountyTokens = 40000 * TOKEN_SCALE;\r\n\r\n  // Selling price of tokens in Wei\r\n  uint public sellingPrice = 0;\r\n\r\n  // Buyback price of tokens in Wei\r\n  uint public buybackPrice = 0;\r\n\r\n  // Amount of Ether the contract ever received\r\n  uint public etherAccumulator = 0;\r\n\r\n  // ICO start time\r\n  uint public icoStartTime = ICO_START_TIME;\r\n\r\n  // Trusted (authorized) sender of tokens\r\n  address public trustedSender = address(0);\r\n\r\n\r\n  /******** Private variables ********/\r\n\r\n  uint8[4] private bonuses = [ uint8(15), uint8(10), uint8(5), uint8(3) ];  // these are percents\r\n  uint[4]  private staging = [ 1 weeks,   2 weeks,   3 weeks,  4 weeks ];   // timeframe when the bonuses are effective\r\n\r\n\r\n  /**\r\n   * The constructor initializes the contract.\r\n   */\r\n  function PulsarToken() public\r\n  {\r\n    // intentionally left empty\r\n  }\r\n\r\n\r\n  /******** Helper functions ********/\r\n\r\n  /* Calculate current bonus percent. */\r\n  function calcBonusPercent() public view returns (uint8) {\r\n    uint8 _bonus = 0;\r\n    uint _elapsed = now - icoStartTime;\r\n\r\n    for (uint8 i = 0; i < staging.length; i++) {\r\n      if (_elapsed <= staging[i]) {\r\n          _bonus = bonuses[i];\r\n          break;\r\n      }\r\n    }\r\n    return _bonus;\r\n  }\r\n\r\n  /* Add bonus to the amount, for example 200 + 15% bonus = 230. */\r\n  function calcAmountWithBonus(uint token_value, uint8 bonus) public view returns (uint) {\r\n    return  (token_value * (100 + bonus)) / 100;\r\n  }\r\n\r\n  /* Convert amount in Wei to tokens. */\r\n  function calcEthersToTokens(uint ether_value, uint8 bonus) public view returns (uint) {\r\n    return calcAmountWithBonus(TOKEN_SCALE * ether_value/sellingPrice, bonus);\r\n  }\r\n\r\n  /* Convert amount in tokens to Wei. */\r\n  function calcTokensToEthers(uint token_value) public view returns (uint) {\r\n      return (buybackPrice * token_value) / TOKEN_SCALE;\r\n  }\r\n\r\n  /**\r\n   * Internal transfer of tokens, only can be called from within this contract.\r\n   *\r\n   * @param _from   Source address\r\n   * @param _to     Destination address\r\n   * @param _value  Amount of tokens (do not forget to multiply by scale 10^18)\r\n   */\r\n  function _transfer(address _from, address _to, uint _value) internal\r\n  {\r\n    require(_to != address(0x0));                       // prevent transfer to 0x0 address\r\n    require(_value > 0);                                // check if the value is greater than zero\r\n    require(balanceOf[_from] >= _value);                // check if the sender has enough tokens\r\n    require(balanceOf[_to] + _value > balanceOf[_to]);  // check for overflows\r\n\r\n    balanceOf[_from]  -= _value;                        // subtract from the sender\r\n    balanceOf[_to]    += _value;                        // add the same to the recipient\r\n\r\n    Transfer(_from, _to, _value);                       // fire the event\r\n  }\r\n\r\n\r\n  /************************* Public interface ********************************/\r\n\r\n  /**\r\n   * View current state of the contract.\r\n   *\r\n   * Returns: Current state of the contract as uint8, starting from 0.\r\n   */\r\n  function getContractState() public view returns (uint8) {\r\n    return uint8(contractState);\r\n  }\r\n\r\n  /**\r\n   * View current token balance of the contract.\r\n   *\r\n   * Returns: Current amount of tokens in the contract.\r\n   */\r\n  function getContractTokenBalance() public view returns (uint) {\r\n    return balanceOf[this];\r\n  }\r\n\r\n  /**\r\n   * View current token balance of the given address.\r\n   *\r\n   * Returns: Current amount of tokens hold by the address\r\n   *\r\n   * @param holder_address Holder of tokens\r\n   */\r\n  function getTokenBalance(address holder_address) public view returns (uint) {\r\n    require(holder_address != address(0));\r\n    return balanceOf[holder_address];\r\n  }\r\n\r\n  /**\r\n   * View total amount of currently distributed tokens.\r\n   *\r\n   * Returns: Total amount of distributed tokens.\r\n   */\r\n  function getDistributedTokens() public view returns (uint) {\r\n      return TOTAL_SUPPLY - balanceOf[this];\r\n  }\r\n\r\n  /**\r\n   * View current Ether balance of the contract.\r\n   *\r\n   * Returns: Current amount of Wei at the contract's address.\r\n   */\r\n  function getContractEtherBalance() public view returns (uint) {\r\n    return this.balance;\r\n  }\r\n\r\n  /**\r\n   * View current Ether balance of the given address.\r\n   *\r\n   * Returns: Current amount of Wei at the given address.\r\n   */\r\n  function getEtherBalance(address holder_address) public view returns (uint) {\r\n    require(holder_address != address(0));\r\n    return holder_address.balance;\r\n  }\r\n\r\n\r\n  /**\r\n   * Buy tokens for Ether.\r\n   * State must be only ICOStarted.\r\n   */\r\n  function invest() public payable\r\n  {\r\n    require(contractState == ContractState.ICOStarted);   // check state\r\n    require(now >= icoStartTime);                         // check time\r\n    require(msg.value >= MIN_ACCEPTED_VALUE);             // check amount of contribution\r\n\r\n    uint8 _bonus  = calcBonusPercent();\r\n    uint  _tokens = calcEthersToTokens(msg.value, _bonus);\r\n\r\n    require(balanceOf[this] >= _tokens);                  // check amount of tokens\r\n\r\n    _transfer(this, msg.sender, _tokens);                 // tranfer tokens to the investor\r\n\r\n    etherAccumulator += msg.value;      // finally update the counter of received Ether\r\n  }\r\n\r\n\r\n  // Default fallback function handles sending Ether to the contract.\r\n  function () public payable {\r\n    invest();\r\n  }\r\n\r\n  /**\r\n   * Token holders withdraw Ether in exchange of their tokens.\r\n   * \r\n   * @param token_value Amount of tokens being returned (do not forget to multiply by scale 10^18)\r\n   */\r\n  function buyback(uint token_value) public\r\n  {\r\n    require(contractState == ContractState.BuybackEnabled);   // check current state\r\n    require(buybackPrice > 0);                                // buyback price must be set\r\n    require(token_value >= MIN_BUYBACK_VALUE);                // minimum allowed amount of tokens\r\n    require(msg.sender != owner);                             // the owner can't buyback\r\n\r\n    uint _ethers = calcTokensToEthers(token_value);\r\n\r\n    // Check if the contract has enough ether to buyback the tokens\r\n    require(this.balance >= _ethers);\r\n\r\n    // Transfer the tokens back to the contract\r\n    _transfer(msg.sender, this, token_value);\r\n\r\n    // Send ether to the seller. It's important to do this last to avoid recursion attacks.\r\n    msg.sender.transfer(_ethers);\r\n  }\r\n\r\n  /************************** Owner's interface *****************************/\r\n\r\n  /**\r\n   * Set ICO start time\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param start_time New start time as number of seconds from Unix Epoch\r\n   */\r\n  function setICOStartTime(uint start_time) onlyOwner external {\r\n    icoStartTime = start_time;\r\n  }\r\n\r\n  /**\r\n   * Set token selling price in Wei.\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param selling_price New selling price in Wei\r\n   */\r\n  function setSellingPrice(uint selling_price) onlyOwner public {\r\n    require(selling_price != 0);\r\n    sellingPrice = selling_price;\r\n  }\r\n\r\n  /**\r\n   * Start selling tokens.\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param selling_price New selling price in Wei\r\n   */\r\n  function startICO(uint selling_price) onlyOwner external {\r\n    require(contractState == ContractState.Deployed);\r\n    setSellingPrice(selling_price);\r\n\r\n    balanceOf[this] = TOTAL_SUPPLY;\r\n\r\n    contractState = ContractState.ICOStarted;\r\n    State(contractState);\r\n  }\r\n\r\n  /**\r\n   * Stop selling tokens.\r\n   * Restricted to the owner.\r\n   */\r\n  function stopICO() onlyOwner external {\r\n    require(contractState == ContractState.ICOStarted);\r\n\r\n    contractState = ContractState.ICOStopped;\r\n    State(contractState);\r\n  }\r\n\r\n  /**\r\n   * Transfer Ether from the contract to the owner.\r\n   * Restricted to the owner.\r\n   *\r\n   * @param ether_value Amount in Wei\r\n   */\r\n  function transferEthersToOwner(uint ether_value) onlyOwner external {\r\n    require(this.balance >= ether_value);\r\n    msg.sender.transfer(ether_value);\r\n  }\r\n\r\n  /**\r\n   * Set the trusted sender of tokens.\r\n   * Pass (0) to remove the truster sender.\r\n   * Restricted to the owner.\r\n   *\r\n   * @param trusted_address New trusted sender\r\n   */\r\n  function setTrustedSender(address trusted_address) onlyOwner external {\r\n    trustedSender = trusted_address;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens to an address.\r\n   * Restricted to the owner or to the trusted address.\r\n   *\r\n   * @param recipient_address Recipient address\r\n   * @param token_value Amount of tokens (do not forget to multiply by scale 10^18)\r\n   */\r\n  function transferTokens(address recipient_address, uint token_value) external {\r\n    require( (msg.sender == owner) || (msg.sender == trustedSender) );  // Restricted to the owner or to trustedSender\r\n    require(contractState == ContractState.ICOStarted);                 // check state\r\n    require(now >= icoStartTime);                                       // check time\r\n\r\n    _transfer(this, recipient_address, token_value);\r\n  }\r\n\r\n  /**\r\n   * Grant bounty tokens to an address.\r\n   * Restricted to the owner.\r\n   * State must be ICOStarted or ICOStopped.\r\n   *\r\n   * @param recipient_address Recipient address\r\n   * @param token_value Amount of tokens (do not forget to multiply by scale 10^18)\r\n   */\r\n  function grantBounty(address recipient_address, uint token_value) onlyOwner external {\r\n    require((contractState == ContractState.ICOStarted) || (contractState == ContractState.ICOStopped));  // check the state\r\n    require(bountyTokens >= token_value);  // check remaining amount of bounty tokens\r\n    require(now >= icoStartTime);     // check time\r\n\r\n    _transfer(this, recipient_address, token_value);\r\n    bountyTokens -= token_value;\r\n  }\r\n\r\n  /**\r\n   * Refund investment by transferring all tokens back to the contract and sending Ether to the investor.\r\n   *\r\n   * This function is a necessary measure, because maximum 99 accredited US investors are allowed \r\n   * under exemptions from registration with the U.S. Securities and Exchange Commission \r\n   * pursuant to Regulation D, Section 506(c) of the Securities Act of 1933, as amended (the “Securities Act”).\r\n   * \r\n   * We will select 99 accredited US investors and refund investments to all other US accredited investors to comply with this regulation.\r\n   *\r\n   * Investors from other countries (non-US investors) will not be affected.\r\n   *\r\n   * State must be ICOStopped or BuybackPaused.\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param investor_address The address of the investor\r\n   * @param ether_value The amount in Wei\r\n   */\r\n  function refundInvestment(address investor_address, uint ether_value) onlyOwner external {\r\n    require((contractState == ContractState.ICOStopped) || (contractState == ContractState.BuybackPaused));   // check the state\r\n\r\n    require(investor_address != owner);                   // do not refund to the owner\r\n    require(investor_address != address(this));           // do not refund to the contract\r\n    require(balanceOf[investor_address] > 0);             // investor's token balance must be greater than zero\r\n    require(this.balance >= ether_value);                 // the contract must have enough ether\r\n\r\n    // Transfer the tokens back to the contract\r\n    _transfer(investor_address, this, balanceOf[investor_address]);\r\n\r\n    // Send ether to the investor. It's important to do this last to avoid recursion attacks.\r\n    investor_address.transfer(ether_value);\r\n  }\r\n\r\n  /**\r\n   * Set token buyback price in Wei.\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param buyback_price New buyback price in Wei\r\n   */\r\n  function setBuybackPrice(uint buyback_price) onlyOwner public {\r\n    require(buyback_price > 0);\r\n    buybackPrice = buyback_price;\r\n  }\r\n\r\n  /**\r\n   * Enable buyback.\r\n   * State must be ICOStopped or BuybackPaused.\r\n   * Buyback can be paused with pauseBuyback().\r\n   *\r\n   * Restricted to the owner.\r\n   *\r\n   * @param buyback_price New buyback price in Wei\r\n   */\r\n  function enableBuyback(uint buyback_price) onlyOwner external {\r\n    require((contractState == ContractState.ICOStopped) || (contractState == ContractState.BuybackPaused));\r\n    setBuybackPrice(buyback_price);\r\n\r\n    contractState = ContractState.BuybackEnabled;\r\n    State(contractState);\r\n  }\r\n\r\n  /**\r\n   * Pause buyback.\r\n   * State must be BuybackEnabled.\r\n   * Buyback can be re-enabled with enableBuyback().\r\n   *\r\n   * Restricted to the owner.\r\n   */\r\n  function pauseBuyback() onlyOwner external {\r\n      require(contractState == ContractState.BuybackEnabled);\r\n\r\n      contractState = ContractState.BuybackPaused;\r\n      State(contractState);\r\n  }\r\n\r\n  /**\r\n   * Destroy the contract and send all Ether to the owner.\r\n   * The contract must be in the BuybackPaused state.\r\n   *\r\n   * Restricted to the owner.\r\n   */\r\n  function destroyContract() onlyOwner external {\r\n      require(contractState == ContractState.BuybackPaused);\r\n\r\n      contractState = ContractState.Destroyed;\r\n      State(contractState);\r\n\r\n      selfdestruct(owner);  // send all money to the owner and destroy the contract!\r\n  }\r\n\r\n} /* ------------------------ end of contract ---------------------- */","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"selling_price\",\"type\":\"uint256\"}],\"name\":\"setSellingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_value\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"}],\"name\":\"calcAmountWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyback_price\",\"type\":\"uint256\"}],\"name\":\"enableBuyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ether_value\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint8\"}],\"name\":\"calcEthersToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder_address\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherAccumulator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start_time\",\"type\":\"uint256\"}],\"name\":\"setICOStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyback_price\",\"type\":\"uint256\"}],\"name\":\"setBuybackPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_value\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_value\",\"type\":\"uint256\"}],\"name\":\"calcTokensToEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseBuyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"selling_price\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buybackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor_address\",\"type\":\"address\"},{\"name\":\"ether_value\",\"type\":\"uint256\"}],\"name\":\"refundInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"},{\"name\":\"token_value\",\"type\":\"uint256\"}],\"name\":\"grantBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"},{\"name\":\"token_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trusted_address\",\"type\":\"address\"}],\"name\":\"setTrustedSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SCALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ACCEPTED_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder_address\",\"type\":\"address\"}],\"name\":\"getEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ether_value\",\"type\":\"uint256\"}],\"name\":\"transferEthersToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BUYBACK_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"State\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"prev_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PulsarToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28443c33ac98975d1d4558bd1e88cf4c6b6a66db30aada38231431addbe54d13"}]}