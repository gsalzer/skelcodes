{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ninterface Deployer_Interface {\r\n  function newContract(address _party, address user_contract, uint _start_date) public payable returns (address created);\r\n  function newToken() public returns (address created);\r\n}\r\n\r\ninterface DRCT_Token_Interface {\r\n  function addressCount(address _swap) public constant returns (uint count);\r\n  function getHolderByIndex(uint _ind, address _swap) public constant returns (address holder);\r\n  function getBalanceByIndex(uint _ind, address _swap) public constant returns (uint bal);\r\n  function getIndexByAddress(address _owner, address _swap) public constant returns (uint index);\r\n  function createToken(uint _supply, address _owner, address _swap) public;\r\n  function pay(address _party, address _swap) public;\r\n  function partyCount(address _swap) public constant returns(uint count);\r\n}\r\n\r\ninterface Wrapped_Ether_Interface {\r\n  function totalSupply() public constant returns (uint total_supply);\r\n  function balanceOf(address _owner) public constant returns (uint balance);\r\n  function transfer(address _to, uint _amount) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _amount) public returns (bool success);\r\n  function approve(address _spender, uint _amount) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint amount);\r\n  function withdraw(uint _value) public;\r\n  function CreateToken() public;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n//The Factory contract sets the standardized variables and also deploys new contracts based on these variables for the user.  \r\ncontract Factory {\r\n  using SafeMath for uint256;\r\n  //Addresses of the Factory owner and oracle. For oracle information, check www.github.com/DecentralizedDerivatives/Oracles\r\n  address public owner;\r\n  address public oracle_address;\r\n\r\n  //Address of the user contract\r\n  address public user_contract;\r\n  DRCT_Token_Interface drct_interface;\r\n  Wrapped_Ether_Interface token_interface;\r\n\r\n  //Address of the deployer contract\r\n  address deployer_address;\r\n  Deployer_Interface deployer;\r\n  Deployer_Interface tokenDeployer;\r\n  address token_deployer_address;\r\n\r\n  address public token_a;\r\n  address public token_b;\r\n\r\n  //A fee for creating a swap in wei.  Plan is for this to be zero, however can be raised to prevent spam\r\n  uint public fee;\r\n  //Duration of swap contract in days\r\n  uint public duration;\r\n  //Multiplier of reference rate.  2x refers to a 50% move generating a 100% move in the contract payout values\r\n  uint public multiplier;\r\n  //Token_ratio refers to the number of DRCT Tokens a party will get based on the number of base tokens.  As an example, 1e15 indicates that a party will get 1000 DRCT Tokens based upon 1 ether of wrapped wei. \r\n  uint public token_ratio1;\r\n  uint public token_ratio2;\r\n\r\n\r\n  //Array of deployed contracts\r\n  address[] public contracts;\r\n  mapping(address => uint) public created_contracts;\r\n  mapping(uint => address) public long_tokens;\r\n  mapping(uint => address) public short_tokens;\r\n\r\n  //Emitted when a Swap is created\r\n  event ContractCreation(address _sender, address _created);\r\n\r\n  /*Modifiers*/\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /*Functions*/\r\n  // Constructor - Sets owner\r\n  function Factory() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function getTokens(uint _date) public view returns(address _ltoken, address _stoken){\r\n    return(long_tokens[_date],short_tokens[_date]);\r\n  }\r\n\r\n  /*\r\n  * Updates the fee amount\r\n  * @param \"_fee\": The new fee amount\r\n  */\r\n  function setFee(uint _fee) public onlyOwner() {\r\n    fee = _fee;\r\n  }\r\n\r\n  /*\r\n  * Sets the deployer address\r\n  * @param \"_deployer\": The new deployer address\r\n  */\r\n  function setDeployer(address _deployer) public onlyOwner() {\r\n    deployer_address = _deployer;\r\n    deployer = Deployer_Interface(_deployer);\r\n  }\r\n\r\n  /*\r\n  * Sets the token_deployer address\r\n  * @param \"_tdeployer\": The new token deployer address\r\n  */  \r\n  function settokenDeployer(address _tdeployer) public onlyOwner() {\r\n    token_deployer_address = _tdeployer;\r\n    tokenDeployer = Deployer_Interface(_tdeployer);\r\n  }\r\n  /*\r\n  * Sets the user_contract address\r\n  * @param \"_userContract\": The new userContract address\r\n  */\r\n  function setUserContract(address _userContract) public onlyOwner() {\r\n    user_contract = _userContract;\r\n  }\r\n\r\n  /*\r\n  * Returns the base token addresses\r\n  */\r\n  function getBase() public view returns(address _base1, address base2){\r\n    return (token_a, token_b);\r\n  }\r\n\r\n\r\n  /*\r\n  * Sets token ratio, swap duration, and multiplier variables for a swap\r\n  * @param \"_token_ratio1\": The ratio of the first token\r\n  * @param \"_token_ratio2\": The ratio of the second token\r\n  * @param \"_duration\": The duration of the swap, in seconds\r\n  * @param \"_multiplier\": The multiplier used for the swap\r\n  */\r\n  function setVariables(uint _token_ratio1, uint _token_ratio2, uint _duration, uint _multiplier) public onlyOwner() {\r\n    token_ratio1 = _token_ratio1;\r\n    token_ratio2 = _token_ratio2;\r\n    duration = _duration;\r\n    multiplier = _multiplier;\r\n  }\r\n\r\n  /*\r\n  * Sets the addresses of the tokens used for the swap\r\n  * @param \"_token_a\": The address of a token to be used\r\n  * @param \"_token_b\": The address of another token to be used\r\n  */\r\n  function setBaseTokens(address _token_a, address _token_b) public onlyOwner() {\r\n    token_a = _token_a;\r\n    token_b = _token_b;\r\n  }\r\n\r\n  //Allows a user to deploy a new swap contract, if they pay the fee\r\n  //returns the newly created swap address and calls event 'ContractCreation'\r\n  function deployContract(uint _start_date) public payable returns (address created) {\r\n    require(msg.value >= fee);\r\n    address new_contract = deployer.newContract(msg.sender, user_contract, _start_date);\r\n    contracts.push(new_contract);\r\n    created_contracts[new_contract] = _start_date;\r\n    ContractCreation(msg.sender,new_contract);\r\n    return new_contract;\r\n  }\r\n\r\n\r\n  function deployTokenContract(uint _start_date, bool _long) public returns(address _token) {\r\n    address token;\r\n    if (_long){\r\n      require(long_tokens[_start_date] == address(0));\r\n      token = tokenDeployer.newToken();\r\n      long_tokens[_start_date] = token;\r\n    }\r\n    else{\r\n      require(short_tokens[_start_date] == address(0));\r\n      token = tokenDeployer.newToken();\r\n      short_tokens[_start_date] = token;\r\n    }\r\n    return token;\r\n  }\r\n\r\n\r\n\r\n  /*\r\n  * Deploys new tokens on a DRCT_Token contract -- called from within a swap\r\n  * @param \"_supply\": The number of tokens to create\r\n  * @param \"_party\": The address to send the tokens to\r\n  * @param \"_long\": Whether the party is long or short\r\n  * @returns \"created\": The address of the created DRCT token\r\n  * @returns \"token_ratio\": The ratio of the created DRCT token\r\n  */\r\n  function createToken(uint _supply, address _party, bool _long, uint _start_date) public returns (address created, uint token_ratio) {\r\n    require(created_contracts[msg.sender] > 0);\r\n    address ltoken = long_tokens[_start_date];\r\n    address stoken = short_tokens[_start_date];\r\n    require(ltoken != address(0) && stoken != address(0));\r\n    if (_long) {\r\n      drct_interface = DRCT_Token_Interface(ltoken);\r\n      drct_interface.createToken(_supply.div(token_ratio1), _party,msg.sender);\r\n      return (ltoken, token_ratio1);\r\n    } else {\r\n      drct_interface = DRCT_Token_Interface(stoken);\r\n      drct_interface.createToken(_supply.div(token_ratio2), _party,msg.sender);\r\n      return (stoken, token_ratio2);\r\n    }\r\n  }\r\n  \r\n\r\n  //Allows the owner to set a new oracle address\r\n  function setOracleAddress(address _new_oracle_address) public onlyOwner() { oracle_address = _new_oracle_address; }\r\n\r\n  //Allows the owner to set a new owner address\r\n  function setOwner(address _new_owner) public onlyOwner() { owner = _new_owner; }\r\n\r\n  //Allows the owner to pull contract creation fees\r\n  function withdrawFees() public onlyOwner() returns(uint atok, uint btok, uint _eth){\r\n   token_interface = Wrapped_Ether_Interface(token_a);\r\n   uint aval = token_interface.balanceOf(address(this));\r\n   if(aval > 0){\r\n      token_interface.withdraw(aval);\r\n    }\r\n   token_interface = Wrapped_Ether_Interface(token_b);\r\n   uint bval = token_interface.balanceOf(address(this));\r\n   if (bval > 0){\r\n    token_interface.withdraw(bval);\r\n  }\r\n   owner.transfer(this.balance);\r\n   return(aval,bval,this.balance);\r\n   }\r\n\r\n   function() public payable {\r\n\r\n   }\r\n\r\n  /*\r\n  * Returns a tuple of many private variables\r\n  * @returns \"_oracle_adress\": The address of the oracle\r\n  * @returns \"_operator\": The address of the owner and operator of the factory\r\n  * @returns \"_duration\": The duration of the swap\r\n  * @returns \"_multiplier\": The multiplier for the swap\r\n  * @returns \"token_a_address\": The address of token a\r\n  * @returns \"token_b_address\": The address of token b\r\n  * @returns \"start_date\": The start date of the swap\r\n  */\r\n  function getVariables() public view returns (address oracle_addr, uint swap_duration, uint swap_multiplier, address token_a_addr, address token_b_addr){\r\n    return (oracle_address,duration, multiplier, token_a, token_b);\r\n  }\r\n\r\n  /*\r\n  * Pays out to a DRCT token\r\n  * @param \"_party\": The address being paid\r\n  * @param \"_long\": Whether the _party is long or not\r\n  */\r\n  function payToken(address _party, address _token_add) public {\r\n    require(created_contracts[msg.sender] > 0);\r\n    drct_interface = DRCT_Token_Interface(_token_add);\r\n    drct_interface.pay(_party, msg.sender);\r\n  }\r\n\r\n  //Returns the number of contracts created by this factory\r\n    function getCount() public constant returns(uint count) {\r\n      return contracts.length;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tdeployer\",\"type\":\"address\"}],\"name\":\"settokenDeployer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_ratio1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_a\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start_date\",\"type\":\"uint256\"}],\"name\":\"deployContract\",\"outputs\":[{\"name\":\"created\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"short_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_ratio2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[{\"name\":\"atok\",\"type\":\"uint256\"},{\"name\":\"btok\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_oracle_address\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"created_contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_party\",\"type\":\"address\"},{\"name\":\"_long\",\"type\":\"bool\"},{\"name\":\"_start_date\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"created\",\"type\":\"address\"},{\"name\":\"token_ratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariables\",\"outputs\":[{\"name\":\"oracle_addr\",\"type\":\"address\"},{\"name\":\"swap_duration\",\"type\":\"uint256\"},{\"name\":\"swap_multiplier\",\"type\":\"uint256\"},{\"name\":\"token_a_addr\",\"type\":\"address\"},{\"name\":\"token_b_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"setDeployer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userContract\",\"type\":\"address\"}],\"name\":\"setUserContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start_date\",\"type\":\"uint256\"},{\"name\":\"_long\",\"type\":\"bool\"}],\"name\":\"deployTokenContract\",\"outputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBase\",\"outputs\":[{\"name\":\"_base1\",\"type\":\"address\"},{\"name\":\"base2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"user_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"_ltoken\",\"type\":\"address\"},{\"name\":\"_stoken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"long_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_b\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_a\",\"type\":\"address\"},{\"name\":\"_token_b\",\"type\":\"address\"}],\"name\":\"setBaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"},{\"name\":\"_token_add\",\"type\":\"address\"}],\"name\":\"payToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_ratio1\",\"type\":\"uint256\"},{\"name\":\"_token_ratio2\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setVariables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_created\",\"type\":\"address\"}],\"name\":\"ContractCreation\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0767d6688c74a23be40c06fe8f91f6bcbf6833f500bf7c720411b0730e152d97"}]}