{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n/// @title Math operations with safety checks\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract BasicToken {\r\n    using SafeMath for uint;\r\n\r\n    uint public totalTokenSupply;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /*****\r\n        * @dev Tranfer the token balance to a specified address\r\n        * @param _to The address to transfer to\r\n        * @param _value The value to be transferred\r\n        */\r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /*****\r\n        * @dev Gets the balances of the specified address\r\n        * @param _owner The address to query the balance of\r\n        * @return An uint representing the amount owned by the passed address\r\n        */\r\n    function balanceOf(address _owner) constant returns (uint balance){\r\n        return balances[_owner];\r\n    }\r\n\r\n    /*****\r\n        * @dev Gets the totalSupply of the tokens.\r\n        */\r\n    function totalSupply() constant returns (uint totalSupply) {\r\n        totalSupply = totalTokenSupply;\r\n    }\r\n}\r\n\r\ncontract Token is BasicToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public tokenName; // Defines the name of the token.\r\n    string public tokenSymbol; // Defines the symbol of the token.\r\n    uint256 public decimals; // Number of decimal places for the token.\r\n\r\n    /*****\r\n        * @dev Sets the variables related to the Token\r\n        * @param _name              string      The name of the Token\r\n        * @param _symbol            string      Defines the Token Symbol\r\n        * @param _initialSupply     uint256     The total number of the tokens available\r\n        * @param _decimals          uint256     Defines the number of decimals places of the token\r\n        */\r\n    function Token(string _name, string _symbol, uint256 _initialSupply, uint256 _decimals){\r\n        require(_initialSupply > 0);\r\n        tokenName = _name;\r\n        tokenSymbol = _symbol;\r\n        decimals = _decimals;\r\n      \r\n    }\r\n    /*****\r\n        * @dev Transfer the amount of money invested by the investor to his balance\r\n        * Also, keeps track of at what rate did they buy the token, keeps track of\r\n        * different rates of tokens at PreSale and ICO\r\n        * @param _recipient     address     The address of the investor\r\n        * @param _value         uint256     The number of the tokens bought\r\n        * @param _ratePerETH    uint256     The rate at which it was bought, different for Pre Sale/ICO\r\n        * @return               bool        Returns true, if all goes as expected\r\n        */\r\n    function transferTokens(address _recipient, uint256 _value, uint256 _ratePerETH) returns (bool) {\r\n        uint256 finalAmount = _value.mul(_ratePerETH);\r\n        return transfer(_recipient, finalAmount);\r\n    }\r\n    /*****\r\n        * @dev Used to remove the balance, when asking for refund\r\n        * @param _recipient address The beneficiary of the refund\r\n        * @return           bool    Returns true, if successful\r\n        */\r\n    function refundedAmount(address _recipient) returns (bool) {\r\n        require(balances[_recipient] != 0);\r\n        balances[_recipient] = 0;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"refundedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ratePerETH\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000059d80000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f53545241544547494320544f4b454e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453544b4e00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://21db3f2a7d734a0706724cef5992b740858ad73d4c7babd7419d0b5cf0c726e7"}]}