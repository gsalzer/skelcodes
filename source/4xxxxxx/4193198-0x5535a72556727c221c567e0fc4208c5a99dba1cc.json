{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.14;\r\n\r\n// -----------------------------------------------------------------------------\r\n// PembiCoin crowdsale contract.\r\n// Copyright (c) 2017 Pembient, Inc.\r\n// The MIT License.\r\n// -----------------------------------------------------------------------------\r\n\r\ncontract PembiCoinICO {\r\n\r\n    enum State {Active, Idle, Successful, Failed}\r\n\r\n    State public currentState = State.Idle;\r\n    uint256 public contributorCount = 0;\r\n\r\n    address public owner;\r\n\r\n    mapping(uint256 => address) private contributors;\r\n    mapping(address => uint256) private amounts;\r\n\r\n    event Transferred(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Transitioned(\r\n        address indexed _subject,\r\n        address indexed _object,\r\n        State _oldState,\r\n        State _newState\r\n    );\r\n\r\n    function PembiCoinICO() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() external payable inState(State.Active) {\r\n        require(msg.value > 0);\r\n        if (amounts[msg.sender] == 0) {\r\n            contributors[contributorCount] = msg.sender;\r\n            contributorCount = safeAdd(contributorCount, 1);\r\n        }\r\n        amounts[msg.sender] = safeAdd(amounts[msg.sender], msg.value);\r\n        Transferred(msg.sender, address(this), msg.value);\r\n    }\r\n\r\n    function refund() external inState(State.Failed) {\r\n        uint256 amount = amounts[msg.sender];\r\n        assert(amount > 0 && amount <= this.balance);\r\n        amounts[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        Transferred(address(this), msg.sender, amount);\r\n    }\r\n\r\n    function payout() external inState(State.Successful) onlyOwner {\r\n        uint256 amount = this.balance;\r\n        owner.transfer(amount);\r\n        Transferred(address(this), owner, amount);\r\n    }\r\n\r\n    function setActive() external inState(State.Idle) onlyOwner {\r\n        State oldState = currentState;\r\n        currentState = State.Active;\r\n        Transitioned(msg.sender, address(this), oldState, currentState);\r\n    }\r\n\r\n    function setIdle() external inState(State.Active) onlyOwner {\r\n        State oldState = currentState;\r\n        currentState = State.Idle;\r\n        Transitioned(msg.sender, address(this), oldState, currentState);\r\n    }\r\n\r\n    function setSuccessful() external inState(State.Idle) onlyOwner {\r\n        State oldState = currentState;\r\n        currentState = State.Successful;\r\n        Transitioned(msg.sender, address(this), oldState, currentState);\r\n    }\r\n\r\n    function setFailed() external inState(State.Idle) onlyOwner {\r\n        State oldState = currentState;\r\n        currentState = State.Failed;\r\n        Transitioned(msg.sender, address(this), oldState, currentState);\r\n    }\r\n\r\n    function getContribution(uint256 _i)\r\n        external\r\n        constant\r\n        returns (address o_contributor, uint256 o_amount)\r\n    {\r\n        require(_i >= 0 && _i < contributorCount);\r\n        o_contributor = contributors[_i];\r\n        o_amount = amounts[o_contributor];\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b)\r\n        private\r\n        constant\r\n        returns (uint256 o_sum)\r\n    {\r\n        o_sum = a + b;\r\n        assert(o_sum >= a && o_sum >= b);\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        require(_state == currentState);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFailed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSuccessful\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setIdle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"o_contributor\",\"type\":\"address\"},{\"name\":\"o_amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_subject\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_object\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"Transitioned\",\"type\":\"event\"}]","ContractName":"PembiCoinICO","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac21cc63352a00c6595ed5f97ff671c454ebe11ffd06d67b9095acdb0b1bee08"}]}