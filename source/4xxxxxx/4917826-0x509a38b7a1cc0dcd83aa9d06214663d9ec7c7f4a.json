{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*********************/\r\n/* Blocksquare Token */\r\n/*********************/\r\n\r\nlibrary SafeMath {\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n\r\n    function owned() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/************************/\r\n/* STANDARD ERC20 TOKEN */\r\n/************************/\r\n\r\ncontract ERC20Token {\r\n\r\n    /** Functions needed to be implemented by ERC20 standard **/\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance);\r\n    function transfer(address _to, uint256 _amount) public returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool _success);\r\n    function approve(address _spender, uint256 _amount) public returns (bool _success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 _remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n}\r\n\r\n\r\n/************************************/\r\n/* BLOCKSQUARE TOKEN IMPLEMENTATION */\r\n/************************************/\r\n\r\ncontract BlocksquareToken is ERC20Token, owned {\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables */\r\n    string public name = \"BlocksquareToken\";\r\n    string public symbol = \"BST\";\r\n    uint8 public decimals = 18;\r\n    bool public tokenFrozen;\r\n\r\n    /* Private variables */\r\n    uint256 supply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n    mapping (address => bool) allowedToMint;\r\n\r\n    /* Events */\r\n    event TokenFrozen(bool _frozen, string _reason);\r\n    event Mint(address indexed _to, uint256 _value);\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract.\r\n    **/\r\n    function BlocksquareToken() public {\r\n        tokenFrozen = true;\r\n    }\r\n\r\n    /**\r\n    * Internal transfer function.\r\n    **/\r\n    function _transfer(address _from, address _to, uint256 _amount) private {\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[_from] >= _amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n    * Transfer token\r\n    *\r\n    * Send '_amount' tokens to '_to' from your address.\r\n    *\r\n    * @param _to Address of recipient.\r\n    * @param _amount Amount to send.\r\n    * @return Whether the transfer was successful or not.\r\n    **/\r\n    function transfer(address _to, uint256 _amount) public returns (bool _success) {\r\n        require(!tokenFrozen);\r\n        _transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance\r\n    *\r\n    * Allows '_spender' to spend '_amount' tokens from your address\r\n    *\r\n    * @param _spender Address of spender.\r\n    * @param _amount Max amount allowed to spend.\r\n    * @return Whether the approve was successful or not.\r\n    **/\r\n    function approve(address _spender, uint256 _amount) public returns (bool _success) {\r\n        allowances[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *Transfer token from\r\n    *\r\n    * Send '_amount' token from address '_from' to address '_to'\r\n    *\r\n    * @param _from Address of sender.\r\n    * @param _to Address of recipient.\r\n    * @param _amount Amount of token to send.\r\n    * @return Whether the transfer was successful or not.\r\n    **/\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool _success) {\r\n        require(_amount <= allowances[_from][msg.sender]);\r\n        require(!tokenFrozen);\r\n        _transfer(_from, _to, _amount);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Mint Tokens\r\n    *\r\n    * Adds _amount of tokens to _atAddress\r\n    *\r\n    * @param _atAddress Adds tokens to address\r\n    * @param _amount Amount of tokens to add\r\n    **/\r\n    function mintTokens(address _atAddress, uint256 _amount) public {\r\n        require(allowedToMint[msg.sender]);\r\n        require(balances[_atAddress].add(_amount) > balances[_atAddress]);\r\n        require((supply.add(_amount)) <= 100000000 * 10**18);\r\n        supply = supply.add(_amount);\r\n        balances[_atAddress] = balances[_atAddress].add(_amount);\r\n        Mint(_atAddress, _amount);\r\n        Transfer(0x0, _atAddress, _amount);\r\n    }\r\n\r\n    /**\r\n    * Change freeze\r\n    *\r\n    * Changes status of frozen because of '_reason'\r\n    *\r\n    * @param _reason Reason for freezing or unfreezing token\r\n    **/\r\n    function changeFreezeTransaction(string _reason) public onlyOwner {\r\n        tokenFrozen = !tokenFrozen;\r\n        TokenFrozen(tokenFrozen, _reason);\r\n    }\r\n\r\n    /**\r\n    * Change mint address\r\n    *\r\n    *  Changes the address to mint\r\n    *\r\n    * @param _addressToMint Address of new minter\r\n    **/\r\n    function changeAllowanceToMint(address _addressToMint) public onlyOwner {\r\n        allowedToMint[_addressToMint] = !allowedToMint[_addressToMint];\r\n    }\r\n\r\n    /**\r\n    * Get allowance\r\n    *\r\n    * @return Return amount allowed to spend from '_owner' by '_spender'\r\n    **/\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 _remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * Total amount of token\r\n    *\r\n    * @return Total amount of token\r\n    **/\r\n    function totalSupply() public constant returns (uint256 _totalSupply) {\r\n        return supply;\r\n    }\r\n\r\n    /**\r\n    * Balance of address\r\n    *\r\n    * Check balance of '_owner'\r\n    *\r\n    * @param _owner Address\r\n    * @return Amount of token in possession\r\n    **/\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * Address allowed to mint\r\n    *\r\n    * Checks if '_address' is allowed to mint\r\n    *\r\n    * @param _address Address\r\n    * @return Allowance to mint\r\n    **/\r\n    function isAllowedToMint(address _address) public constant returns (bool _allowed) {\r\n        return allowedToMint[_address];\r\n    }\r\n\r\n    /** Revert if someone sends ether to this contract **/\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * This part is here only for testing and will not be included into final version\r\n    **/\r\n    /**\r\n    function killContract() onlyOwner{\r\n    selfdestruct(msg.sender);\r\n    }\r\n    **/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowedToMint\",\"outputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"changeFreezeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToMint\",\"type\":\"address\"}],\"name\":\"changeAllowanceToMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BlocksquareToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87a1ffe23b99f58d03c1cced6bc8917cd5eb32a4166d97ac5728cb731829c356"}]}