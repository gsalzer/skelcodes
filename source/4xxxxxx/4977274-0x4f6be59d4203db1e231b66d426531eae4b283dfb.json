{"status":"1","message":"OK","result":[{"SourceCode":"// Play2liveICO tokensale smart contract.\r\n// Developed by Phenom.Team <info@phenom.team>\r\npragma solidity ^0.4.15;\r\n\r\n/**\r\n *   @title SafeMath\r\n *   @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal constant returns(uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns(uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns(uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n *   @title ERC20\r\n *   @dev Standart ERC20 token interface\r\n */\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n} \r\n\r\n/**\r\n *   @title Play2liveICO contract  - takes funds from users and issues tokens\r\n */\r\ncontract Play2liveICO {\r\n    // LUC - Level Up Coin token contract\r\n    using SafeMath for uint;\r\n    LucToken public LUC = new LucToken(this);\r\n    Presale public preSaleToken;\r\n\r\n    // Token price parameters\r\n    // These parametes can be changed only by manager of contract\r\n    uint public tokensPerDollar = 20;\r\n    uint public rateEth = 446; // Rate USD per ETH\r\n    uint public tokenPrice = tokensPerDollar * rateEth; // DTRC per ETH\r\n    //Crowdsale parameters\r\n    uint constant publicIcoPart = 625; // 62,5% of TotalSupply for BountyFund\r\n    uint constant operationsPart = 111;\r\n    uint constant foundersPart = 104;\r\n    uint constant partnersPart = 78; // 7,8% of TotalSupply for parnersFund\r\n    uint constant advisorsPart = 72;\r\n    uint constant bountyPart = 10; // 1% of TotalSupply for BountyFund\r\n    uint constant hardCap = 30000000 * tokensPerDollar * 1e18; // \r\n    uint public soldAmount = 0;\r\n    // Output ethereum addresses\r\n    address public Company;\r\n    address public OperationsFund;\r\n    address public FoundersFund;\r\n    address public PartnersFund;\r\n    address public AdvisorsFund;\r\n    address public BountyFund;\r\n    address public Manager; // Manager controls contract\r\n    address public Controller_Address1; // First address that is used to buy tokens for other cryptos\r\n    address public Controller_Address2; // Second address that is used to buy tokens for other cryptos\r\n    address public Controller_Address3; // Third address that is used to buy tokens for other cryptos\r\n    address public Oracle; // Oracle address\r\n\r\n    // Possible ICO statuses\r\n    enum StatusICO {\r\n        Created,\r\n        PreIcoStarted,\r\n        PreIcoPaused,\r\n        PreIcoFinished,\r\n        IcoStarted,\r\n        IcoPaused,\r\n        IcoFinished\r\n    }\r\n    StatusICO statusICO = StatusICO.Created;\r\n    \r\n    // Mappings\r\n    mapping(address => bool) public swaped;\r\n    mapping (address => string) public keys;\r\n    \r\n    // Events Log\r\n    event LogStartPreICO();\r\n    event LogPausePreICO();\r\n    event LogFinishPreICO();\r\n    event LogStartICO();\r\n    event LogPauseICO();\r\n    event LogFinishICO();\r\n    event LogBuyForInvestor(address investor, uint lucValue, string txHash);\r\n    event LogSwapTokens(address investor, uint tokensAmount);\r\n    event LogRegister(address investor, string key);\r\n\r\n    // Modifiers\r\n    // Allows execution by the manager only\r\n    modifier managerOnly { \r\n        require(msg.sender == Manager);\r\n        _; \r\n     }\r\n    // Allows execution by the oracle only\r\n    modifier oracleOnly { \r\n        require(msg.sender == Oracle);\r\n        _; \r\n     }\r\n    // Allows execution by the one of controllers only\r\n    modifier controllersOnly {\r\n        require(\r\n            (msg.sender == Controller_Address1)||\r\n            (msg.sender == Controller_Address2)||\r\n            (msg.sender == Controller_Address3)\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Contract constructor function\r\n    */\r\n    function Play2liveICO(\r\n        address _preSaleToken,\r\n        address _Company,\r\n        address _OperationsFund,\r\n        address _FoundersFund,\r\n        address _PartnersFund,\r\n        address _AdvisorsFund,\r\n        address _BountyFund,\r\n        address _Manager,\r\n        address _Controller_Address1,\r\n        address _Controller_Address2,\r\n        address _Controller_Address3,\r\n        address _Oracle\r\n        ) public {\r\n        preSaleToken = Presale(_preSaleToken);\r\n        Company = _Company;\r\n        OperationsFund = _OperationsFund;\r\n        FoundersFund = _FoundersFund;\r\n        PartnersFund = _PartnersFund;\r\n        AdvisorsFund = _AdvisorsFund;\r\n        BountyFund = _BountyFund;\r\n        Manager = _Manager;\r\n        Controller_Address1 = _Controller_Address1;\r\n        Controller_Address2 = _Controller_Address2;\r\n        Controller_Address3 = _Controller_Address3;\r\n        Oracle = _Oracle;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to set rate of ETH and update token price\r\n    *   @param _rateEth       current ETH rate\r\n    */\r\n    function setRate(uint _rateEth) external oracleOnly {\r\n        rateEth = _rateEth;\r\n        tokenPrice = tokensPerDollar.mul(rateEth);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to start PreICO\r\n    *   Sets ICO status to PreIcoStarted\r\n    */\r\n    function startPreIco() external managerOnly {\r\n        require(statusICO == StatusICO.Created || statusICO == StatusICO.PreIcoPaused);\r\n        statusICO = StatusICO.PreIcoStarted;\r\n        LogStartPreICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to pause PreICO\r\n    *   Sets ICO status to PreIcoPaused\r\n    */\r\n    function pausePreIco() external managerOnly {\r\n       require(statusICO == StatusICO.PreIcoStarted);\r\n       statusICO = StatusICO.PreIcoPaused;\r\n       LogPausePreICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to finish PreICO\r\n    *   Sets ICO status to PreIcoFinished\r\n    */\r\n    function finishPreIco() external managerOnly {\r\n        require(statusICO == StatusICO.PreIcoStarted || statusICO == StatusICO.PreIcoPaused);\r\n        statusICO = StatusICO.PreIcoFinished;\r\n        LogFinishPreICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to start ICO\r\n    *   Sets ICO status to IcoStarted\r\n    */\r\n    function startIco() external managerOnly {\r\n        require(statusICO == StatusICO.PreIcoFinished || statusICO == StatusICO.IcoPaused);\r\n        statusICO = StatusICO.IcoStarted;\r\n        LogStartICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to pause ICO\r\n    *   Sets ICO status to IcoPaused\r\n    */\r\n    function pauseIco() external managerOnly {\r\n       require(statusICO == StatusICO.IcoStarted);\r\n       statusICO = StatusICO.IcoPaused;\r\n       LogPauseICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to finish ICO\r\n    *   Sets ICO status to IcoFinished and  emits tokens for funds\r\n    */\r\n    function finishIco() external managerOnly {\r\n        require(statusICO == StatusICO.IcoStarted || statusICO == StatusICO.IcoPaused);\r\n        uint alreadyMinted = LUC.totalSupply();\r\n        uint totalAmount = alreadyMinted.mul(1000).div(publicIcoPart);\r\n        LUC.mintTokens(OperationsFund, operationsPart.mul(totalAmount).div(1000));\r\n        LUC.mintTokens(FoundersFund, foundersPart.mul(totalAmount).div(1000));\r\n        LUC.mintTokens(PartnersFund, partnersPart.mul(totalAmount).div(1000));\r\n        LUC.mintTokens(AdvisorsFund, advisorsPart.mul(totalAmount).div(1000));\r\n        LUC.mintTokens(BountyFund, bountyPart.mul(totalAmount).div(1000));\r\n        statusICO = StatusICO.IcoFinished;\r\n        LogFinishICO();\r\n    }\r\n\r\n   /**\r\n    *   @dev Unfreeze tokens(enable token transfers)\r\n    */\r\n    function unfreeze() external managerOnly {\r\n        require(statusICO == StatusICO.IcoFinished);\r\n        LUC.defrost();\r\n    }\r\n    \r\n   /**\r\n    *   @dev Function to swap tokens from pre-sale\r\n    *   @param _investor     pre-sale tokens holder address\r\n    */\r\n    function swapTokens(address _investor) external managerOnly {\r\n         require(statusICO != StatusICO.IcoFinished);\r\n         require(!swaped[_investor]);\r\n         swaped[_investor] = true;\r\n         uint tokensToSwap = preSaleToken.balanceOf(_investor);\r\n         LUC.mintTokens(_investor, tokensToSwap);\r\n         soldAmount = soldAmount.add(tokensToSwap);\r\n         LogSwapTokens(_investor, tokensToSwap);\r\n    }\r\n   /**\r\n    *   @dev Fallback function calls buy(address _investor, uint _DTRCValue) function to issue tokens\r\n    *        when investor sends ETH to address of ICO contract and then stores investment amount \r\n    */\r\n    function() external payable {\r\n        if (statusICO == StatusICO.PreIcoStarted) {\r\n            require(msg.value >= 100 finney);\r\n        }\r\n        buy(msg.sender, msg.value.mul(tokenPrice)); \r\n    }\r\n\r\n   /**\r\n    *   @dev Function to issues tokens for investors who made purchases in other cryptocurrencies\r\n    *   @param _investor     address the tokens will be issued to\r\n    *   @param _txHash       transaction hash of investor's payment\r\n    *   @param _lucValue     number of LUC tokens\r\n    */\r\n\r\n    function buyForInvestor(\r\n        address _investor, \r\n        uint _lucValue, \r\n        string _txHash\r\n    ) \r\n        external \r\n        controllersOnly {\r\n        buy(_investor, _lucValue);\r\n        LogBuyForInvestor(_investor, _lucValue, _txHash);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to issue tokens for investors who paid in ether\r\n    *   @param _investor     address which the tokens will be issued tokens\r\n    *   @param _lucValue     number of LUC tokens\r\n    */\r\n    function buy(address _investor, uint _lucValue) internal {\r\n        require(statusICO == StatusICO.PreIcoStarted || statusICO == StatusICO.IcoStarted);\r\n        uint bonus = getBonus(_lucValue);\r\n        uint total = _lucValue.add(bonus);\r\n        require(soldAmount + _lucValue <= hardCap);\r\n        LUC.mintTokens(_investor, total);\r\n        soldAmount = soldAmount.add(_lucValue);\r\n    }\r\n\r\n\r\n\r\n   /**\r\n    *   @dev Function to calculates bonuses \r\n    *   @param _value        amount of tokens\r\n    *   @return              bonus value\r\n    */\r\n    function getBonus(uint _value) public constant returns (uint) {\r\n        uint bonus = 0;\r\n        if (statusICO == StatusICO.PreIcoStarted) {\r\n            if (now < 1517356800) {\r\n                bonus = _value.mul(30).div(100);\r\n                return bonus;\r\n            } else {\r\n                bonus = _value.mul(25).div(100);\r\n                return bonus;                \r\n            }\r\n        }\r\n        if (statusICO == StatusICO.IcoStarted) {\r\n            if (now < 1518652800) {\r\n                bonus = _value.mul(10).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1518912000) {\r\n                bonus = _value.mul(9).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1519171200) {\r\n                bonus = _value.mul(8).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1519344000) {\r\n                bonus = _value.mul(7).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1519516800) {\r\n                bonus = _value.mul(6).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1519689600) {\r\n                bonus = _value.mul(5).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1519862400) {\r\n                bonus = _value.mul(4).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1520035200) {\r\n                bonus = _value.mul(3).div(100);\r\n                return bonus;                   \r\n            }\r\n            if (now < 1520208000) {\r\n                bonus = _value.mul(2).div(100);\r\n                return bonus;                   \r\n            } else {\r\n                bonus = _value.mul(1).div(100);\r\n                return bonus;                   \r\n            }\r\n        }\r\n        return bonus;\r\n    }\r\n\r\n   /**\r\n    *   @dev Allows invetsot to register thier Level Up Chain address\r\n    */\r\n    function register(string _key) public {\r\n        keys[msg.sender] = _key;\r\n        LogRegister(msg.sender, _key);\r\n    }\r\n\r\n   /**\r\n    *   @dev Allows Company withdraw investments\r\n    */\r\n    function withdrawEther() external managerOnly {\r\n        Company.transfer(this.balance);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n *   @title LucToken\r\n *   @dev Luc token contract\r\n */\r\ncontract LucToken is ERC20 {\r\n    using SafeMath for uint;\r\n    string public name = \"Level Up Coin\";\r\n    string public symbol = \"LUC\";\r\n    uint public decimals = 18;\r\n\r\n    // Ico contract address\r\n    address public ico;\r\n    \r\n    // Tokens transfer ability status\r\n    bool public tokensAreFrozen = true;\r\n\r\n    // Allows execution by the owner only\r\n    modifier icoOnly { \r\n        require(msg.sender == ico); \r\n        _; \r\n    }\r\n\r\n   /**\r\n    *   @dev Contract constructor function sets Ico address\r\n    *   @param _ico          ico address\r\n    */\r\n    function LucToken(address _ico) public {\r\n       ico = _ico;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to mint tokens\r\n    *   @param _holder       beneficiary address the tokens will be issued to\r\n    *   @param _value        number of tokens to issue\r\n    */\r\n    function mintTokens(address _holder, uint _value) external icoOnly {\r\n       require(_value > 0);\r\n       balances[_holder] = balances[_holder].add(_value);\r\n       totalSupply = totalSupply.add(_value);\r\n       Transfer(0x0, _holder, _value);\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Function to enable token transfers\r\n    */\r\n    function defrost() external icoOnly {\r\n       tokensAreFrozen = false;\r\n    }\r\n\r\n   /**\r\n    *   @dev Get balance of tokens holder\r\n    *   @param _holder        holder's address\r\n    *   @return               balance of investor\r\n    */\r\n    function balanceOf(address _holder) constant returns (uint256) {\r\n         return balances[_holder];\r\n    }\r\n\r\n   /**\r\n    *   @dev Send coins\r\n    *   throws on any error rather then return a false flag to minimize\r\n    *   user errors\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev An account/contract attempts to get the coins\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   @param _from         source address\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n   /**\r\n    *   @dev Allows another account/contract to spend some tokens on its behalf\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   also, to minimize the risk of the approve/transferFrom attack vector\r\n    *   approve has to be called twice in 2 separate transactions - once to\r\n    *   change the allowance to 0 and secondly to change it to the new allowance\r\n    *   value\r\n    *\r\n    *   @param _spender      approved address\r\n    *   @param _amount       allowance amount\r\n    *\r\n    *   @return true if the approval was successful\r\n    */\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    *   @param _owner        the address which owns the funds\r\n    *   @param _spender      the address which will spend the funds\r\n    *\r\n    *   @return              the amount of tokens still avaible for the spender\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract tokenLUCG {\r\n    /* Public variables of the token */\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n        uint256 public totalSupply = 0;\r\n\r\n\r\n        function tokenLUCG (string _name, string _symbol, uint8 _decimals){\r\n            name = _name;\r\n            symbol = _symbol;\r\n            decimals = _decimals;\r\n\r\n        }\r\n    /* This creates an array with all balances */\r\n        mapping (address => uint256) public balanceOf;\r\n\r\n}\r\n\r\ncontract Presale is tokenLUCG {\r\n\r\n        using SafeMath for uint;\r\n        string name = 'Level Up Coin Gold';\r\n        string symbol = 'LUCG';\r\n        uint8 decimals = 18;\r\n        address manager;\r\n        address public ico;\r\n\r\n        function Presale (address _manager) tokenLUCG (name, symbol, decimals){\r\n             manager = _manager;\r\n\r\n        }\r\n\r\n        event Transfer(address _from, address _to, uint256 amount);\r\n        event Burn(address _from, uint256 amount);\r\n\r\n        modifier onlyManager{\r\n             require(msg.sender == manager);\r\n            _;\r\n        }\r\n\r\n        modifier onlyIco{\r\n             require(msg.sender == ico);\r\n            _;\r\n        }\r\n        function mintTokens(address _investor, uint256 _mintedAmount) public onlyManager {\r\n             balanceOf[_investor] = balanceOf[_investor].add(_mintedAmount);\r\n             totalSupply = totalSupply.add(_mintedAmount);\r\n             Transfer(this, _investor, _mintedAmount);\r\n\r\n        }\r\n\r\n        function burnTokens(address _owner) public onlyIco{\r\n             uint  tokens = balanceOf[_owner];\r\n             require(balanceOf[_owner] != 0);\r\n             balanceOf[_owner] = 0;\r\n             totalSupply = totalSupply.sub(tokens);\r\n             Burn(_owner, tokens);\r\n        }\r\n\r\n        function setIco(address _ico) onlyManager{\r\n            ico = _ico;\r\n        }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_lucValue\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyForInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"swaped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OperationsFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PartnersFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerDollar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keys\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FoundersFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Controller_Address2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdvisorsFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LUC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preSaleToken\",\"type\":\"address\"},{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_OperationsFund\",\"type\":\"address\"},{\"name\":\"_FoundersFund\",\"type\":\"address\"},{\"name\":\"_PartnersFund\",\"type\":\"address\"},{\"name\":\"_AdvisorsFund\",\"type\":\"address\"},{\"name\":\"_BountyFund\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_Controller_Address1\",\"type\":\"address\"},{\"name\":\"_Controller_Address2\",\"type\":\"address\"},{\"name\":\"_Controller_Address3\",\"type\":\"address\"},{\"name\":\"_Oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPausePreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFinishPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPauseICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogFinishICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lucValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"LogBuyForInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"LogSwapTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"}]","ContractName":"Play2liveICO","CompilerVersion":"v0.4.20-nightly.2018.1.25+commit.e7afde95","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000011b7890de965ed96dbd1af3f96f584ade732ecf6000000000000000000000000e43a2b3382b45f64f0a625e3a914ee206a68f793000000000000000000000000d6cf4df3c2b24004be8cceb8530573fa9736f7a5000000000000000000000000d1420a471e2cc082ad3f253962da3a0ba8410622000000000000000000000000a55f347b525767ca7f6f9e18677c0ebae5ae7b560000000000000000000000009aa22fe47b665533095575f03cc57fb059ad8b960000000000000000000000008b494433386c08f9c360df393399a113ab5c613b000000000000000000000000d2118eff522be6af4cd72c2fa0b415cfbee3a3ab0000000000000000000000003de8c08b7955158f69500a260ac8c06430c335d40000000000000000000000001e5a7969cd28030765d6683c6a16e3bebada886500000000000000000000000096711497d611499744c8073bc7c91b8656fed86d0000000000000000000000005c6632f38fb6c2bb7bf0f6584d9c89c5bf0f0db1","Library":"","SwarmSource":"bzzr://bf9215428e27debd3dff5b578f025c8c09f76d08ed9ff4246814e8d7c488eb26"}]}