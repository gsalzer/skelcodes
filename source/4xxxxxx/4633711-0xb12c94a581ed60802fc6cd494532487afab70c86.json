{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n    function totalSupply() constant public returns (uint supply);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract TestIco {\r\n    uint public constant ETH_PRICE = 1;\r\n\r\n    address public manager;\r\n    address public reserveManager;\r\n    \r\n    address public escrow;\r\n    address public reserveEscrow;\r\n    \r\n    address[] public allowedTokens;\r\n    mapping(address => bool) public tokenAllowed;\r\n    mapping(address => uint) public tokenPrice;\r\n    mapping(address => uint) public tokenAmount;\r\n    \r\n    mapping(address => uint) public ethBalances;\r\n    mapping(address => uint) public balances;\r\n    \r\n    // user => token[]\r\n    mapping(address => address[]) public userTokens;\r\n    //  user => token => amount\r\n    mapping(address => mapping(address => uint)) public userTokensValues;\r\n    \r\n    modifier onlyManager {\r\n        assert(msg.sender == manager || msg.sender == reserveManager);\r\n        _;\r\n    }\r\n    modifier onlyManagerOrContract {\r\n        assert(msg.sender == manager || msg.sender == reserveManager || msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    function TestIco(\r\n        address _manager, \r\n        address _reserveManager, \r\n        address _escrow, \r\n        address _reserveEscrow\r\n    ) public {\r\n        manager = _manager;\r\n        reserveManager = _reserveManager;\r\n        escrow = _escrow;\r\n        reserveEscrow = _reserveEscrow;\r\n    }\r\n    \r\n    // _price is price of amount of token\r\n    function addToken(address _token, uint _amount, uint _price) onlyManager public {\r\n        assert(_token != 0x0);\r\n        assert(_amount > 0);\r\n        assert(_price > 0);\r\n        \r\n        bool isNewToken = true;\r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            if (allowedTokens[i] == _token) {\r\n                isNewToken = false;\r\n            }\r\n        }\r\n        if (isNewToken) {\r\n            allowedTokens.push(_token);\r\n        }\r\n        \r\n        tokenAllowed[_token] = true;\r\n        tokenPrice[_token] = _price;\r\n        tokenAmount[_token] = _amount;\r\n    }\r\n    \r\n    function removeToken(address _token) onlyManager public {\r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            if (_token == allowedTokens[i]) {\r\n                if (i < allowedTokens.length - 1) {\r\n                    allowedTokens[i] = allowedTokens[allowedTokens.length - 1];\r\n                }\r\n                allowedTokens[allowedTokens.length - 1] = 0x0;\r\n                allowedTokens.length--;\r\n                break;\r\n            }\r\n        }\r\n    \r\n        tokenAllowed[_token] = false;\r\n        tokenPrice[_token] = 0;\r\n        tokenAmount[_token] = 0;\r\n    }\r\n    \r\n    function buyWithTokens(address _token) public {\r\n        buyWithTokensBy(msg.sender, _token);\r\n    }\r\n    function addTokenToUser(address _user, address _token) private {\r\n        for (uint i = 0; i < userTokens[_user].length; i++) {\r\n            if (userTokens[_user][i] == _token) {\r\n                return;\r\n            }\r\n        }\r\n        userTokens[_user].push(_token);\r\n    }\r\n    function buyWithTokensBy(address _user, address _token) public {\r\n        assert(tokenAllowed[_token]);\r\n    \r\n        Token token = Token(_token);\r\n        \r\n        uint tokensToSend = token.allowance(_user, address(this));\r\n        assert(tokensToSend > 0);\r\n        uint prevBalance = token.balanceOf(address(this));\r\n        assert(token.transferFrom(_user, address(this), tokensToSend));\r\n        assert(token.balanceOf(address(this)) - prevBalance == tokensToSend);\r\n        balances[_user] += tokensToSend * tokenPrice[_token] / tokenAmount[_token];\r\n        addTokenToUser(_user, _token);\r\n        userTokensValues[_user][_token] += tokensToSend;\r\n    }\r\n    \r\n    function returnFundsFor(address _user) public onlyManagerOrContract returns(bool) {\r\n        if (ethBalances[_user] > 0) {\r\n            _user.transfer(ethBalances[_user]);\r\n            ethBalances[_user] = 0;\r\n        }\r\n        \r\n        for (uint i = 0; i < userTokens[_user].length; i++) {\r\n            address tokenAddress = userTokens[_user][i];\r\n            uint userTokenValue = userTokensValues[_user][tokenAddress];\r\n            if (userTokenValue > 0) {\r\n                Token token = Token(tokenAddress);\r\n                assert(token.transfer(_user, userTokenValue));\r\n                userTokensValues[_user][tokenAddress] = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    function returnFundsForUsers(address[] _users) public onlyManager {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            returnFundsFor(_users[i]);\r\n        }\r\n    }\r\n    \r\n    function buyTokens(address _user, uint _value) private {\r\n        assert(_user != 0x0);\r\n        \r\n        ethBalances[_user] += _value;\r\n        balances[_user] += _value * ETH_PRICE;\r\n    }\r\n    \r\n    function() public payable {\r\n        assert(msg.value > 0);\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n    \r\n    function withdrawEtherTo(address _escrow) private {\r\n        if (this.balance > 0) {\r\n            _escrow.transfer(this.balance);\r\n        }\r\n        \r\n        for (uint i = 0; i < allowedTokens.length; i++) {\r\n            Token token = Token(allowedTokens[i]);\r\n            uint tokenBalance = token.balanceOf(address(this));\r\n            if (tokenBalance > 0) {\r\n                assert(token.transfer(_escrow, tokenBalance));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function withdrawEther() public onlyManager {\r\n        withdrawEtherTo(escrow);\r\n    }\r\n    \r\n    function withdrawEtherToReserveEscrow() public onlyManager {\r\n        withdrawEtherTo(reserveEscrow);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokensValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"returnFundsForUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnFundsFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyWithTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"buyWithTokensBy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherToReserveEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_reserveManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_reserveEscrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TestIco","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000057B22f88Eb4aeC3Ce8D120CA642D5e4F97bb5dAf00000000000000000000000057B22f88Eb4aeC3Ce8D120CA642D5e4F97bb5dAf00000000000000000000000057B22f88Eb4aeC3Ce8D120CA642D5e4F97bb5dAf00000000000000000000000057B22f88Eb4aeC3Ce8D120CA642D5e4F97bb5dAf","Library":"","SwarmSource":"bzzr://3ce40346aecc4af6bb7b9ff41e4635c56170bd040bfdd4dde97b9b1f323648f2"}]}