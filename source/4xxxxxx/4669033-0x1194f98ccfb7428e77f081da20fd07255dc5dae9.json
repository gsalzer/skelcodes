{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ncontract ERC20 {\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\ncontract REMMEPreSale {\r\n    uint public constant SALES_START = 1512399600; // 04.12.2017 15:00:00 UTC\r\n    uint public constant SALES_DEADLINE = 1514214000; // 25.12.2017 15:00:00 UTC\r\n    address public constant ASSET_MANAGER_WALLET = 0xbb12800E7446A51395B2d853D6Ce7F22210Bb5E5;\r\n    address public constant TOKEN = 0x83984d6142934bb535793A82ADB0a46EF0F66B6d; // REMME token\r\n    address public constant WHITELIST_SUPPLIER = 0x1Ff21eCa1c3ba96ed53783aB9C92FfbF77862584;\r\n    uint public constant ETH_PRICE_USD = 470;\r\n    uint public constant TOKEN_PRICE_WEI = 0.04 ether / ETH_PRICE_USD; // 0.000085106382978723 ETH\r\n    uint public constant TOKEN_CENTS = 10000; // 1 REM is 1.0000 REM\r\n    uint public constant BONUS = 20; // 20%\r\n    // 1,000 ETH\r\n    uint public constant PRE_SALE_SOFT_CAP = 1000 ether;\r\n    // 6,700 ETH, 78,725,000 REM + 15,745,000 REM BONUS = 94,470,000 REM\r\n    uint public constant PRE_SALE_MAX_CAP = 6700 ether;\r\n    // 10 ETH\r\n    uint public constant MINIMAL_PARTICIPATION = 10 ether;\r\n    // 1100 ETH\r\n    uint public constant MAXIMAL_PARTICIPATION = 1100 ether;\r\n    uint public preSaleContributions;\r\n    mapping(address => uint) public participantContribution;\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event Contributed(address receiver, uint contribution, uint reward);\r\n    event WhitelistUpdated(address participant, bool isWhitelisted);\r\n\r\n    function contribute() payable returns(bool) {\r\n        return contributeFor(msg.sender);\r\n    }\r\n\r\n    function contributeFor(address _participant) payable returns(bool) {\r\n        require(now >= SALES_START);\r\n        require(now < SALES_DEADLINE);\r\n        require((participantContribution[_participant] + msg.value) >= MINIMAL_PARTICIPATION);\r\n        require((participantContribution[_participant] + msg.value) <= MAXIMAL_PARTICIPATION);\r\n        require((preSaleContributions + msg.value) <= PRE_SALE_MAX_CAP);\r\n        // Only the whitelisted addresses can participate.\r\n        require(whitelist[_participant]);\r\n\r\n        // If there is some division reminder, we just collect it too.\r\n        uint tokensAmount = (msg.value * TOKEN_CENTS) / TOKEN_PRICE_WEI;\r\n        require(tokensAmount > 0);\r\n        uint bonusTokens = (tokensAmount * BONUS) / 100;\r\n        uint totalTokens = tokensAmount + bonusTokens;\r\n\r\n        require(ERC20(TOKEN).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\r\n        preSaleContributions += msg.value;\r\n        participantContribution[_participant] += msg.value;\r\n        ASSET_MANAGER_WALLET.transfer(msg.value);\r\n\r\n        Contributed(_participant, msg.value, totalTokens);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyWhitelistSupplier() {\r\n        require(msg.sender == WHITELIST_SUPPLIER || msg.sender == ASSET_MANAGER_WALLET);\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address _participant) onlyWhitelistSupplier() returns(bool) {\r\n        if (whitelist[_participant]) {\r\n            return true;\r\n        }\r\n        whitelist[_participant] = true;\r\n        WhitelistUpdated(_participant, true);\r\n        return true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _participant) onlyWhitelistSupplier() returns(bool) {\r\n        if (!whitelist[_participant]) {\r\n            return true;\r\n        }\r\n        whitelist[_participant] = false;\r\n        WhitelistUpdated(_participant, false);\r\n        return true;\r\n    }\r\n\r\n    function isSoftCapReached() constant returns(bool) {\r\n        return preSaleContributions >= PRE_SALE_SOFT_CAP;\r\n    }\r\n\r\n    function () payable {\r\n        contribute();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMAL_PARTICIPATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_PRICE_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALES_DEADLINE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"contributeFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMAL_PARTICIPATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSET_MANAGER_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_SALE_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST_SUPPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALES_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"}]","ContractName":"REMMEPreSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7093968da574338baf4a967e193f00ae07391c0590f706639c099a2cc4abfb1e"}]}