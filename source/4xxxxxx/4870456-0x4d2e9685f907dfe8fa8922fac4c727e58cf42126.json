{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LamdenTau is MintableToken {\r\n    string public constant name = \"Lamden Tau\";\r\n    string public constant symbol = \"TAU\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n   LamdenTau public lamdenTau;\r\n\r\n   function Bounty(address _tokenContractAddress) public {\r\n      require(_tokenContractAddress != address(0));\r\n      lamdenTau = LamdenTau(_tokenContractAddress);\r\n      \r\n      \r\n   }\r\n\r\n   function returnTokens() onlyOwner {\r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n   function issueTokens() onlyOwner  {\r\n      \r\n    lamdenTau.transfer(0xbbda5f2d83dc72dad51097f1b5938fe51878b379, 427372000000000000000);\r\n    lamdenTau.transfer(0x4a9a74659292858af20d43a54a1789115f15a0ba, 17094880000000000000000);\r\n    lamdenTau.transfer(0x2121a1f79286d8cd2cd105df079e7965f10dca44, 106843000000000000000);\r\n    lamdenTau.transfer(0x3b7969012b1ad702e0e843374c93590d35e9ead2, 4273720000000000000000);\r\n    lamdenTau.transfer(0x2121a1f79286d8cd2cd105df079e7965f10dca44, 2136860000000000000000);\r\n    lamdenTau.transfer(0x2121a1f79286d8cd2cd105df079e7965f10dca44, 2030017000000000000000);\r\n    lamdenTau.transfer(0x7c1c3e46cc78c18eec93612d97e0ede263f8bc60, 128211600000000000000);\r\n    lamdenTau.transfer(0x9cc6b95e25fe81a110105f6cc2ed87add76e6bd7, 267107500000000000000);\r\n    lamdenTau.transfer(0x3f9749fd6de6489ace5407cef7b03dc48f3773d6, 31946057000000000000000);\r\n    lamdenTau.transfer(0xe97a92aaadbf4e99657e7fdfc21422ff2d551a02, 2136860000000000000000);\r\n    lamdenTau.transfer(0xb066df420f8a67148c759746b3cf6d8f0662aa6f, 149580200000000000000);\r\n    lamdenTau.transfer(0x264b71240dbba531624fb6ea29307dceba768d10, 1282116000000000000000);\r\n    lamdenTau.transfer(0x40f4260d93cd2a92457dc951925edd03430a5272, 3205290000000000000000);\r\n    lamdenTau.transfer(0xb0679a8f67785bd8d19e2c640a386c9c41235dd2, 4380563000000000000000);\r\n    lamdenTau.transfer(0xf0a9abb11958a071e168f2ee5bcbacf1abbde9cf, 209412280000000000000);\r\n    lamdenTau.transfer(0xf0a9abb11958a071e168f2ee5bcbacf1abbde9cf, 918849800000000000000);\r\n    lamdenTau.transfer(0x8d22b7d898df2b264023c4814391f491dff620a5, 1056269129740000000000);\r\n    lamdenTau.transfer(0x83e858d91013d65d369f41be54631dd7228b6840, 173841531487800000000);\r\n    lamdenTau.transfer(0x5aa30cc452418bde4d015719181190010cd97b31, 427372000000000000000);\r\n    lamdenTau.transfer(0xaffba2db42131bd8f0bd793beea962a7dd3553bf, 555583600000000000000);\r\n    lamdenTau.transfer(0xdac976629020966a03ed95f19d0db8f3a8a7215a, 170948800000000000000000);\r\n    lamdenTau.transfer(0x0eb2e7ff807242e130548ef13cdf3df751cb0dee, 2777918000000000000000);\r\n    lamdenTau.transfer(0x46513810d83ade895fbff24f96a7ac802ac27452, 21368600000000000000000);\r\n    lamdenTau.transfer(0xd4fa1283852d69654a1813ea744b4bfc81d879b7, 20086484000000000000000);\r\n    lamdenTau.transfer(0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98, 102569280000000000000);\r\n    lamdenTau.transfer(0xa117d0f4aa7820db8edbfb5e144672ee15bd21ed, 213686000000000000000);\r\n    lamdenTau.transfer(0x29754b1f2830a9de19f95f061e708cd3747e1cd8, 598320800000000000000);\r\n    lamdenTau.transfer(0x19f0f9f2b47af467c1edc6769edcbdc60ba8e9f0, 256423200000000000000);\r\n    lamdenTau.transfer(0x6c1926cb3489a3471e1335b837a30f80d1535ab6, 1068430000000000000000);\r\n    lamdenTau.transfer(0x46513810d83ade895fbff24f96a7ac802ac27452, 42737200000000000000000);\r\n    lamdenTau.transfer(0x19f0f9f2b47af467c1edc6769edcbdc60ba8e9f0, 10684300000000000000);\r\n    lamdenTau.transfer(0xf435075984000795f03729705c4d59bcde905c6a, 2564232000000000000000);\r\n    lamdenTau.transfer(0x5b4275ba1251b4692ec8b76bdc78111031d2a7cd, 9626898996886600000000);\r\n    lamdenTau.transfer(0x932189dfa5ef12322ad1d6647a2255cb287c6436, 64105800000000000000000);\r\n    lamdenTau.transfer(0x3b85c6a5b362c0634abe5d21c6d121f0279bf480, 12821160000000000000000);\r\n    lamdenTau.transfer(0x849cb83281d88975649368b840953b0caaf32c4b, 2286440200000000000000);\r\n    lamdenTau.transfer(0xe2ba431e0e6880b7b905aeb013498174131da2c5, 2136860000000000000000);\r\n    lamdenTau.transfer(0xaee001bee75898870004c08c562e8e7350085a3b, 230175721248000000000);\r\n    lamdenTau.transfer(0xe97a92aaadbf4e99657e7fdfc21422ff2d551a02, 2136860000000000000000);\r\n    lamdenTau.transfer(0x4646993112b01f4ddd95987be83f0230794299ff, 213686000000000000000);\r\n    lamdenTau.transfer(0x4646993112b01f4ddd95987be83f0230794299ff, 8547440000000000000000);\r\n    lamdenTau.transfer(0xf8bf75e348e45a19f1d7a8c82fde09852b8ee933, 4273720000000000000000);\r\n    lamdenTau.transfer(0xe9254306fd8e3951026213c76730fe8b6739021b, 4936146600000000000000);\r\n    lamdenTau.transfer(0xaee001bee75898870004c08c562e8e7350085a3b, 854744000000000000000);\r\n    lamdenTau.transfer(0xf435075984000795f03729705c4d59bcde905c6a, 641058000000000000000);\r\n    lamdenTau.transfer(0xf20e83abb455650a2fe871ebe9156ab77eb83b80, 1068430000000000000000);\r\n    lamdenTau.transfer(0x993753a2727e0bd225fc257fb201adaa31324121, 1068430000000000000000);\r\n    lamdenTau.transfer(0x4425738277ee602ca5b5541f91c70e121da84588, 1068430000000000000000);\r\n    lamdenTau.transfer(0xce8cf15a58bc0a6ef6af72aafa3eb1d6b412a94b, 641058000000000000000);\r\n    lamdenTau.transfer(0x993753a2727e0bd225fc257fb201adaa31324121, 76926960000000000000000);\r\n        \r\n      uint256 balance = lamdenTau.balanceOf(this);\r\n      lamdenTau.transfer(msg.sender, balance);\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lamdenTau\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c27a2f05fa577a83ba0fdb4c38443c0718356501","Library":"","SwarmSource":"bzzr://ff7ffd9413cff082b64643a57e0a122efcfd96f5cec70b6ff3834e0ea0bcac31"}]}