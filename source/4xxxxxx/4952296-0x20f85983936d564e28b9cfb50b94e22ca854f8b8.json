{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n\r\n/* ************************************************ */\r\n/* ********** Zeppelin Solidity - v1.5.0 ********** */\r\n/* ************************************************ */\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/* *********************************** */\r\n/* ********** Xmoneta Token ********** */\r\n/* *********************************** */\r\n\r\n\r\n\r\n/**\r\n * @title XmonetaToken\r\n * @author Xmoneta.com\r\n *\r\n * ERC20 Compatible token\r\n * Zeppelin Solidity - v1.5.0\r\n */\r\n\r\ncontract XmonetaToken is StandardToken, Claimable {\r\n\r\n  /* ********** Token Predefined Information ********** */\r\n\r\n  string public constant name = \"Xmoneta Token\";\r\n  string public constant symbol = \"XMN\";\r\n  uint256 public constant decimals = 18;\r\n\r\n  /* ********** Defined Variables ********** */\r\n\r\n  // Total tokens supply 1 000 000 000\r\n  // For ethereum wallets we added decimals constant\r\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** decimals);\r\n  // Vault where tokens are stored\r\n  address public vault = msg.sender;\r\n  // Sales agent who has permissions to manipulate with tokens\r\n  address public salesAgent;\r\n\r\n  /* ********** Events ********** */\r\n\r\n  event SalesAgentAppointed(address indexed previousSalesAgent, address indexed newSalesAgent);\r\n  event SalesAgentRemoved(address indexed currentSalesAgent);\r\n  event Burn(uint256 valueToBurn);\r\n\r\n  /* ********** Functions ********** */\r\n\r\n  // Contract constructor\r\n  function XmonetaToken() public {\r\n    owner = msg.sender;\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[vault] = totalSupply;\r\n  }\r\n\r\n  // Appoint sales agent of token\r\n  function setSalesAgent(address newSalesAgent) onlyOwner public {\r\n    SalesAgentAppointed(salesAgent, newSalesAgent);\r\n    salesAgent = newSalesAgent;\r\n  }\r\n\r\n  // Remove sales agent from token\r\n  function removeSalesAgent() onlyOwner public {\r\n    SalesAgentRemoved(salesAgent);\r\n    salesAgent = address(0);\r\n  }\r\n\r\n  // Transfer tokens from vault to account if sales agent is correct\r\n  function transferTokensFromVault(address fromAddress, address toAddress, uint256 tokensAmount) public {\r\n    require(salesAgent == msg.sender);\r\n    balances[vault] = balances[vault].sub(tokensAmount);\r\n    balances[toAddress] = balances[toAddress].add(tokensAmount);\r\n    Transfer(fromAddress, toAddress, tokensAmount);\r\n  }\r\n\r\n  // Allow the owner to burn a specific amount of tokens from the vault\r\n  function burn(uint256 valueToBurn) onlyOwner public {\r\n    require(valueToBurn > 0);\r\n    balances[vault] = balances[vault].sub(valueToBurn);\r\n    totalSupply = totalSupply.sub(valueToBurn);\r\n    Burn(valueToBurn);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/* ************************************** */\r\n/* ********** Xmoneta Pre-sale ********** */\r\n/* ************************************** */\r\n\r\n\r\n\r\n/**\r\n * @title XmonetaPresale\r\n * @author Xmoneta.com\r\n *\r\n * Zeppelin Solidity - v1.5.0\r\n */\r\n\r\ncontract XmonetaPresale {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* ********** Defined Variables ********** */\r\n\r\n  // The token being sold\r\n  XmonetaToken public token;\r\n  // Crowdsale start timestamp - 01/25/2018 at 12:00pm (UTC)\r\n  uint256 public startTime = 1516881600;\r\n  // Crowdsale end timestamp - 02/15/2018 at 12:00pm (UTC)\r\n  uint256 public endTime = 1518696000;\r\n  // Addresses where ETH are collected\r\n  address public wallet1 = 0x36A3c000f8a3dC37FCD261D1844efAF851F81556;\r\n  address public wallet2 = 0x8beDBE45Aa345938d70388E381E2B6199A15B3C3;\r\n  // How many token per wei\r\n  uint256 public rate = 2000;\r\n  // Cap in ethers\r\n  uint256 public cap = 16000 * 1 ether;\r\n  // Amount of raised wei\r\n  uint256 public weiRaised;\r\n\r\n  /* ********** Events ********** */\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weiAmount, uint256 tokens);\r\n\r\n  /* ********** Functions ********** */\r\n\r\n  // Contract constructor\r\n  function XmonetaPresale() public {\r\n    token = XmonetaToken(0x99705A8B60d0fE21A4B8ee54DB361B3C573D18bb);\r\n  }\r\n\r\n  // Fallback function to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // Token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // Send spare wei back if investor sent more that cap\r\n    uint256 tempWeiRaised = weiRaised.add(weiAmount);\r\n    if (tempWeiRaised > cap) {\r\n      uint256 spareWeis = tempWeiRaised.sub(cap);\r\n      weiAmount = weiAmount.sub(spareWeis);\r\n      beneficiary.transfer(spareWeis);\r\n    }\r\n\r\n    // Current pre-sale bonus is 30%\r\n    uint256 bonusPercent = 30;\r\n\r\n    // If buyer send 5 or more ethers then bonus will be 50%\r\n    if (weiAmount >= 5 ether) {\r\n      bonusPercent = 50;\r\n    }\r\n\r\n    uint256 additionalPercentInWei = rate.div(100).mul(bonusPercent);\r\n    uint256 rateWithPercents = rate.add(additionalPercentInWei);\r\n\r\n    // Calculate token amount to be sold\r\n    uint256 tokens = weiAmount.mul(rateWithPercents);\r\n\r\n    // Update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Tranfer tokens from vault\r\n    token.transferTokensFromVault(msg.sender, beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds(weiAmount);\r\n  }\r\n\r\n  // Send wei to the fund collection wallets\r\n  function forwardFunds(uint256 weiAmount) internal {\r\n    uint256 value = weiAmount.div(2);\r\n\r\n    // If buyer send amount of wei that can not be divided to 2 without float point, send all weis to first wallet\r\n    if (value.mul(2) != weiAmount) {\r\n      wallet1.transfer(weiAmount);\r\n    } else {\r\n      wallet1.transfer(value);\r\n      wallet2.transfer(value);\r\n    }\r\n  }\r\n\r\n  // Validate if the transaction can be success\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised < cap;\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase && withinCap;\r\n  }\r\n\r\n  // Show if crowdsale has ended or no\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime || weiRaised >= cap;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"XmonetaPresale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca4655f514ccd7365a05b89b9b38d1ae03692a9077cf4cbc6708fdcf955ac32a"}]}