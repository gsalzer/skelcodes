{"status":"1","message":"OK","result":[{"SourceCode":"//! MultiCertifier contract.\r\n//! By Parity Technologies, 2017.\r\n//! Released under the Apache Licence 2.\r\n\r\npragma solidity ^0.4.16;\r\n\r\n// From Owned.sol\r\ncontract Owned {\r\n\tmodifier only_owner { if (msg.sender != owner) return; _; }\r\n\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tfunction setOwner(address _new) public only_owner { NewOwner(owner, _new); owner = _new; }\r\n\r\n\taddress public owner = msg.sender;\r\n}\r\n\r\n// From Certifier.sol\r\ncontract Certifier {\r\n\tevent Confirmed(address indexed who);\r\n\tevent Revoked(address indexed who);\r\n\tfunction certified(address) public constant returns (bool);\r\n\tfunction get(address, string) public constant returns (bytes32);\r\n\tfunction getAddress(address, string) public constant returns (address);\r\n\tfunction getUint(address, string) public constant returns (uint);\r\n}\r\n\r\n/**\r\n * Contract to allow multiple parties to collaborate over a certification contract.\r\n * Each certified account is associated with the delegate who certified it.\r\n * Delegates can be added and removed only by the contract owner.\r\n */\r\ncontract MultiCertifier is Owned, Certifier {\r\n\tmodifier only_delegate { require (msg.sender == owner || delegates[msg.sender]); _; }\r\n\tmodifier only_certifier_of(address who) { require (msg.sender == owner || msg.sender == certs[who].certifier); _; }\r\n\tmodifier only_certified(address who) { require (certs[who].active); _; }\r\n\tmodifier only_uncertified(address who) { require (!certs[who].active); _; }\r\n\r\n\tevent Confirmed(address indexed who, address indexed by);\r\n\tevent Revoked(address indexed who, address indexed by);\r\n\r\n\tstruct Certification {\r\n\t\taddress certifier;\r\n\t\tbool active;\r\n\t}\r\n\r\n\tfunction certify(address _who)\r\n\t\tpublic\r\n\t\tonly_delegate\r\n\t\tonly_uncertified(_who)\r\n\t{\r\n\t\tcerts[_who].active = true;\r\n\t\tcerts[_who].certifier = msg.sender;\r\n\t\tConfirmed(_who, msg.sender);\r\n\t}\r\n\r\n\tfunction revoke(address _who)\r\n\t\tpublic\r\n\t\tonly_certifier_of(_who)\r\n\t\tonly_certified(_who)\r\n\t{\r\n\t\tcerts[_who].active = false;\r\n\t\tRevoked(_who, msg.sender);\r\n\t}\r\n\r\n\tfunction certified(address _who) public constant returns (bool) { return certs[_who].active; }\r\n\tfunction getCertifier(address _who) public constant returns (address) { return certs[_who].certifier; }\r\n\tfunction addDelegate(address _new) public only_owner { delegates[_new] = true; }\r\n\tfunction removeDelegate(address _old) public only_owner { delete delegates[_old]; }\r\n\r\n\tmapping (address => Certification) certs;\r\n\tmapping (address => bool) delegates;\r\n\r\n\t/// Unused interface methods.\r\n\tfunction get(address, string) public constant returns (bytes32) {}\r\n\tfunction getAddress(address, string) public constant returns (address) {}\r\n\tfunction getUint(address, string) public constant returns (uint) {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"certify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getCertifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_old\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"certified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"MultiCertifier","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d9c7df238b089443f137db6f63d34316de4acaeb2209a75234fe6ad16dfb413f"}]}