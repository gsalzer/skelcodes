{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will receive the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will receive the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint64 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   * Deprecated: please use TokenTimelock#release instead.\r\n   */\r\n  function claim() public {\r\n    require(msg.sender == beneficiary);\r\n    release();\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\ncontract StarterCoin is MintableToken, LimitedTransferToken {\r\n\r\n    string public constant name = \"StarterCoin\";\r\n    string public constant symbol = \"STC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 endTimeICO;\r\n\r\n    function StarterCoin(uint256 _endTimeICO) {\r\n        endTimeICO = _endTimeICO;\r\n    }\r\n\r\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n        // allow transfers after the end of ICO\r\n        return time > endTimeICO ? balanceOf(holder) : 0;\r\n    }\r\n\r\n}\r\n\r\ncontract StarterCoinCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public preSaleFirstDay;\r\n    uint256 public preICOstartTime;\r\n    uint256 public ICOstartTime;\r\n    uint256 public ICOweek1End;\r\n    uint256 public ICOweek2End;\r\n    uint256 public ICOweek3End;\r\n    uint256 public ICOweek4End;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public constant RATE = 4500;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public tokenSoldPreSale;\r\n    uint256 public tokenSoldPreICO;\r\n    uint256 public tokenSold;\r\n\r\n    uint256 public constant CAP = 154622 ether;\r\n    uint256 public constant TOKEN_PRESALE_CAP = 45000000 * (10 ** uint256(18));\r\n    uint256 public constant TOKEN_PREICO_CAP = 62797500 * (10 ** uint256(18));\r\n    uint256 public constant TOKEN_CAP = 695797500 * (10 ** uint256(18)); // 45000000+62797500+588000000 LINK\r\n\r\n    TokenTimelock public bountyTokenTimelock;\r\n    TokenTimelock public devTokenTimelock;\r\n    TokenTimelock public foundersTokenTimelock;\r\n    TokenTimelock public teamTokenTimelock;\r\n    TokenTimelock public advisersTokenTimelock;\r\n\r\n    uint256 public constant BOUNTY_SUPPLY = 78400000 * (10 ** uint256(18));\r\n    uint256 public constant DEV_SUPPLY = 78400000 * (10 ** uint256(18));\r\n    uint256 public constant FOUNDERS_SUPPLY = 59600000 * (10 ** uint256(18));\r\n    uint256 public constant TEAM_SUPPLY = 39200000 * (10 ** uint256(18));\r\n    uint256 public constant ADVISERS_SUPPLY = 29400000 * (10 ** uint256(18));\r\n\r\n\r\n    function StarterCoinCrowdsale(\r\n        uint256 [9] timing,\r\n        address _wallet,\r\n        address bountyWallet,\r\n        uint64 bountyReleaseTime,\r\n        address devWallet,\r\n        uint64 devReleaseTime,\r\n        address foundersWallet,\r\n        uint64 foundersReleaseTime,\r\n        address teamWallet,\r\n        uint64 teamReleaseTime,\r\n        address advisersWallet,\r\n        uint64 advisersReleaseTime\r\n        ) {\r\n            startTime = timing[0];\r\n            preSaleFirstDay = timing[1];\r\n            preICOstartTime = timing[2];\r\n            ICOstartTime = timing[3];\r\n            ICOweek1End = timing[4];\r\n            ICOweek2End = timing[5];\r\n            ICOweek3End = timing[6];\r\n            ICOweek4End = timing[7];\r\n            endTime = timing[8];\r\n\r\n            require(startTime >= now);\r\n            require(preSaleFirstDay >= startTime);\r\n            require(preICOstartTime >= preSaleFirstDay);\r\n            require(ICOstartTime >= preICOstartTime);\r\n            require(ICOweek1End >= ICOstartTime);\r\n            require(ICOweek2End >= ICOweek1End);\r\n            require(ICOweek3End >= ICOweek2End);\r\n            require(ICOweek4End >= ICOweek3End);\r\n            require(endTime >= ICOweek4End);\r\n\r\n            require(devReleaseTime >= endTime);\r\n            require(foundersReleaseTime >= endTime);\r\n            require(teamReleaseTime >= endTime);\r\n            require(advisersReleaseTime >= endTime);\r\n\r\n            require(_wallet != 0x0);\r\n            require(bountyWallet != 0x0);\r\n            require(devWallet != 0x0);\r\n            require(foundersWallet != 0x0);\r\n            require(teamWallet != 0x0);\r\n            require(advisersWallet != 0x0);\r\n\r\n            wallet = _wallet;\r\n\r\n            token = new StarterCoin(endTime);\r\n\r\n            bountyTokenTimelock = new TokenTimelock(token, bountyWallet, bountyReleaseTime);\r\n            token.mint(bountyTokenTimelock, BOUNTY_SUPPLY);\r\n\r\n            devTokenTimelock = new TokenTimelock(token, devWallet, devReleaseTime);\r\n            token.mint(devTokenTimelock, DEV_SUPPLY);\r\n\r\n            foundersTokenTimelock = new TokenTimelock(token, foundersWallet, foundersReleaseTime);\r\n            token.mint(foundersTokenTimelock, FOUNDERS_SUPPLY);\r\n\r\n            teamTokenTimelock = new TokenTimelock(token, teamWallet, teamReleaseTime);\r\n            token.mint(teamTokenTimelock, TEAM_SUPPLY);\r\n\r\n            advisersTokenTimelock = new TokenTimelock(token, advisersWallet, advisersReleaseTime);\r\n            token.mint(advisersTokenTimelock, ADVISERS_SUPPLY);\r\n        }\r\n\r\n        /**\r\n        * event for token purchase logging\r\n        * @param purchaser who paid for the tokens\r\n        * @param beneficiary who got the tokens\r\n        * @param value weis paid for purchase\r\n        * @param amount amount of tokens purchased\r\n        */\r\n        event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n        // creates the token to be sold.\r\n        // override this method to have crowdsale of a specific mintable token.\r\n        function createTokenContract() internal returns (MintableToken) {\r\n            return new MintableToken();\r\n        }\r\n\r\n\r\n        // fallback function can be used to buy tokens\r\n        function () payable {\r\n            buyTokens(msg.sender);\r\n        }\r\n\r\n        // low level token purchase function\r\n        function buyTokens(address beneficiary) public payable {\r\n            require(beneficiary != 0x0);\r\n            require(msg.value != 0);\r\n\r\n            uint256 weiAmount = msg.value;\r\n\r\n            // calculate period bonus\r\n            uint256 periodBonus;\r\n            if (now < preSaleFirstDay) {\r\n            periodBonus = 2250; // 50% bonus for RATE 4500\r\n            } else if (now < preICOstartTime) {\r\n            periodBonus = 1800; // 40% bonus for RATE 4500\r\n            } else if (now < ICOstartTime) {\r\n            periodBonus = 1350; // 30% bonus for RATE 4500\r\n            } else if (now < ICOweek1End) {\r\n            periodBonus = 1125; // 25% bonus for RATE 4500\r\n            } else if (now < ICOweek2End) {\r\n            periodBonus = 900; // 20% bonus for RATE 4500\r\n            } else if (now < ICOweek3End) {\r\n            periodBonus = 675; // 15% bonus for RATE 4500\r\n            } else if (now < ICOweek4End) {\r\n            periodBonus = 450; // 10% bonus for RATE 4500\r\n            } else {\r\n            periodBonus = 225; // 5% bonus for RATE 4500\r\n            }\r\n\r\n            // calculate bulk purchase bonus\r\n            uint256 bulkPurchaseBonus;\r\n            if (weiAmount >= 50 ether) {\r\n            bulkPurchaseBonus = 3600; // 80% bonus for RATE 4500\r\n            } else if (weiAmount >= 30 ether) {\r\n            bulkPurchaseBonus = 3150; // 70% bonus for RATE 4500\r\n            } else if (weiAmount >= 10 ether) {\r\n            bulkPurchaseBonus = 2250; // 50% bonus for RATE 4500\r\n            } else if (weiAmount >= 5 ether) {\r\n            bulkPurchaseBonus = 1350; // 30% bonus for RATE 4500\r\n            } else if (weiAmount >= 3 ether) {\r\n            bulkPurchaseBonus = 450; // 10% bonus for RATE 4500\r\n            }\r\n\r\n            uint256 actualRate = RATE.add(periodBonus).add(bulkPurchaseBonus);\r\n\r\n            // calculate token amount to be created\r\n            uint256 tokens = weiAmount.mul(actualRate);\r\n\r\n            // update state\r\n            weiRaised = weiRaised.add(weiAmount);\r\n            tokenSold = tokenSold.add(tokens);\r\n\r\n            // check for tokenCAP\r\n            if (now < preICOstartTime) {\r\n            // presale\r\n            tokenSoldPreSale = tokenSoldPreSale.add(tokens);\r\n            require(tokenSoldPreSale <= TOKEN_PRESALE_CAP);\r\n            } else if (now < ICOstartTime) {\r\n            // preICO\r\n            tokenSoldPreICO = tokenSoldPreICO.add(tokens);\r\n            require(tokenSoldPreICO <= TOKEN_PREICO_CAP);\r\n            } else {\r\n            // ICO\r\n            require(tokenSold <= TOKEN_CAP);\r\n            }\r\n\r\n            require(validPurchase());\r\n\r\n            token.mint(beneficiary, tokens);\r\n            TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n            forwardFunds();\r\n        }\r\n\r\n        // send ether to the fund collection wallet\r\n        // override to create custom fund forwarding mechanisms\r\n        function forwardFunds() internal {\r\n            wallet.transfer(msg.value);\r\n        }\r\n\r\n        // add off chain contribution. BTC address of contribution added for transparency\r\n        function addOffChainContribution(address beneficiar, uint256 weiAmount, uint256 tokenAmount, string btcAddress) onlyOwner public {\r\n            require(beneficiar != 0x0);\r\n            require(weiAmount > 0);\r\n            require(tokenAmount > 0);\r\n            weiRaised += weiAmount;\r\n            tokenSold += tokenAmount;\r\n            require(validPurchase());\r\n            token.mint(beneficiar, tokenAmount);\r\n        }\r\n\r\n\r\n        // overriding Crowdsale#validPurchase to add extra CAP logic\r\n        // @return true if investors can buy at the moment\r\n        function validPurchase() internal constant returns (bool) {\r\n            bool withinCap = weiRaised <= CAP;\r\n            bool withinPeriod = now >= startTime && now <= endTime;\r\n            bool withinTokenCap = tokenSold <= TOKEN_CAP;\r\n            return withinPeriod && withinCap && withinTokenCap;\r\n        }\r\n\r\n        // overriding Crowdsale#hasEnded to add CAP logic\r\n        // @return true if crowdsale event has ended\r\n        function hasEnded() public constant returns (bool) {\r\n            bool capReached = weiRaised >= CAP;\r\n            return now > endTime || capReached;\r\n        }\r\n\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOweek1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOweek3End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersTokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSoldPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISERS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSoldPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFirstDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PREICO_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokenTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRESALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOweek2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOweek4End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiar\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"addOffChainContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"timing\",\"type\":\"uint256[9]\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"bountyWallet\",\"type\":\"address\"},{\"name\":\"bountyReleaseTime\",\"type\":\"uint64\"},{\"name\":\"devWallet\",\"type\":\"address\"},{\"name\":\"devReleaseTime\",\"type\":\"uint64\"},{\"name\":\"foundersWallet\",\"type\":\"address\"},{\"name\":\"foundersReleaseTime\",\"type\":\"uint64\"},{\"name\":\"teamWallet\",\"type\":\"address\"},{\"name\":\"teamReleaseTime\",\"type\":\"uint64\"},{\"name\":\"advisersWallet\",\"type\":\"address\"},{\"name\":\"advisersReleaseTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StarterCoinCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a1750de000000000000000000000000000000000000000000000000000000005a192300000000000000000000000000000000000000000000000000000000005a192301000000000000000000000000000000000000000000000000000000005a27a380000000000000000000000000000000000000000000000000000000005a4b3c00000000000000000000000000000000000000000000000000000000005a547680000000000000000000000000000000000000000000000000000000005a5db100000000000000000000000000000000000000000000000000000000005a66eb80000000000000000000000000000000000000000000000000000000005a698e8000000000000000000000000034e0aece729ee1331f022c1b71656f930f4bed120000000000000000000000009c45510ce63811557858bb43ae1155f173ea5728000000000000000000000000000000000000000000000000000000005ad2f8700000000000000000000000005f4e269f4555c362afe4dce1a177fd0493867ad3000000000000000000000000000000000000000000000000000000005b10eef0000000000000000000000000dfcd4d11f6be326c1f662bd9bafcd7257154d561000000000000000000000000000000000000000000000000000000005c2b1e00000000000000000000000000b90506465162fea5044b11cc5ba241b7563be779000000000000000000000000000000000000000000000000000000005ae81070000000000000000000000000bfe4abd5830e6e926cf559ac1bb65f46c827354e000000000000000000000000000000000000000000000000000000005afa8570","Library":"","SwarmSource":"bzzr://4f219ef208c729cd2761ccad9c8063bf18048594a5f1ade4a92191612a729f01"}]}