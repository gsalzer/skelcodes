{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/*********************************************************************************\r\n *********************************************************************************\r\n *\r\n * Name of the project: Genevieve VC Token\r\n * Contract name: GXVCToken\r\n * Author: Juan Livingston @ Ethernity.live\r\n * Developed for: Genevieve Co.\r\n * GXVC is an ERC223 Token\r\n *\r\n *********************************************************************************\r\n ********************************************************************************/\r\n\r\ncontract ContractReceiver {   \r\n    function tokenFallback(address _from, uint _value, bytes _data){\r\n    }\r\n}\r\n\r\n /* New ERC23 contract interface */\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  \r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) returns (bool ok);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n// The GXVC token ERC223\r\n\r\ncontract GXVCToken {\r\n\r\n    // Token public variables\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    string public version = 'v0.2';\r\n    uint256 public totalSupply;\r\n    bool locked;\r\n\r\n    address rootAddress;\r\n    address Owner;\r\n    uint multiplier = 10000000000; // For 10 decimals\r\n    address swapperAddress; // Can bypass a lock\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) freezed; \r\n\r\n\r\n  \tevent Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        if ( msg.sender != rootAddress ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n    \tif ( locked && msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n\t\t_;    \t\r\n    }\r\n\r\n    modifier isUnfreezed(address _to) {\r\n    \tif ( freezed[msg.sender] || freezed[_to] ) revert();\r\n    \t_;\r\n    }\r\n\r\n\r\n    // Safe math\r\n    function safeAdd(uint x, uint y) internal returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function safeSub(uint x, uint y) internal returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n\r\n    // GXC Token constructor\r\n    function GXVCToken() {        \r\n        locked = true;\r\n        totalSupply = 160000000 * multiplier; // 160,000,000 tokens * 10 decimals\r\n        name = 'Genevieve VC'; \r\n        symbol = 'GXVC'; \r\n        decimals = 10; \r\n        rootAddress = msg.sender;        \r\n        Owner = msg.sender;       \r\n        balances[rootAddress] = totalSupply; \r\n        allowed[rootAddress][swapperAddress] = totalSupply;\r\n    }\r\n\r\n\r\n\t// ERC223 Access functions\r\n\r\n\tfunction name() constant returns (string _name) {\r\n\t      return name;\r\n\t  }\r\n\tfunction symbol() constant returns (string _symbol) {\r\n\t      return symbol;\r\n\t  }\r\n\tfunction decimals() constant returns (uint8 _decimals) {\r\n\t      return decimals;\r\n\t  }\r\n\tfunction totalSupply() constant returns (uint256 _totalSupply) {\r\n\t      return totalSupply;\r\n\t  }\r\n\r\n\r\n    // Only root function\r\n\r\n    function changeRoot(address _newrootAddress) onlyRoot returns(bool){\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            rootAddress = _newrootAddress;\r\n            allowed[_newrootAddress][swapperAddress] = totalSupply; // Gives allowance to new rootAddress\r\n            return true;\r\n    }\r\n\r\n\r\n    // Only owner functions\r\n\r\n    function changeOwner(address _newOwner) onlyOwner returns(bool){\r\n            Owner = _newOwner;\r\n            return true;\r\n    }\r\n\r\n    function changeSwapperAdd(address _newSwapper) onlyOwner returns(bool){\r\n    \t\tallowed[rootAddress][swapperAddress] = 0; // Removes allowance to old rootAddress\r\n            swapperAddress = _newSwapper;\r\n            allowed[rootAddress][_newSwapper] = totalSupply; // Gives allowance to new rootAddress\r\n            return true;\r\n    }\r\n       \r\n    function unlock() onlyOwner returns(bool) {\r\n        locked = false;\r\n        return true;\r\n    }\r\n\r\n    function lock() onlyOwner returns(bool) {\r\n        locked = true;\r\n        return true;\r\n    }\r\n\r\n    function freeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function unfreeze(address _address) onlyOwner returns(bool) {\r\n        freezed[_address] = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner returns(bool) {\r\n    \tbytes memory empty;\r\n        if ( balances[msg.sender] < _value ) revert();\r\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\r\n        totalSupply = safeSub( totalSupply,  _value );\r\n        Transfer(msg.sender, 0x0, _value , empty);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Public getters\r\n    function isFreezed(address _address) constant returns(bool) {\r\n        return freezed[_address];\r\n    }\r\n\r\n    function isLocked() constant returns(bool) {\r\n        return locked;\r\n    }\r\n\r\n  // Public functions (from https://github.com/Dexaran/ERC223-token-standard/tree/Recommended)\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds to an address that has a non-standard fallback function\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        if (balances[msg.sender] < _value) return false;\r\n        balances[msg.sender] = safeSub( balances[msg.sender] , _value );\r\n        balances[_to] = safeAdd( balances[_to] , _value );\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  // Function that is called when a user or another contract wants to transfer funds to an address with tokenFallback function\r\n  function transfer(address _to, uint _value, bytes _data) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n\r\n  // Standard function transfer similar to ERC20 transfer with no _data.\r\n  // Added due to backwards compatibility reasons.\r\n  function transfer(address _to, uint _value) isUnlocked isUnfreezed(_to) returns (bool success) {\r\n\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balances[msg.sender] < _value) return false;\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balances[msg.sender] < _value) return false;\r\n    balances[msg.sender] = safeSub(balances[msg.sender] , _value);\r\n    balances[_to] = safeAdd(balances[_to] , _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n}\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n\r\n        if ( locked && msg.sender != swapperAddress ) return false; \r\n        if ( freezed[_from] || freezed[_to] ) return false; // Check if destination address is freezed\r\n        if ( balances[_from] < _value ) return false; // Check if the sender has enough\r\n\t\tif ( _value > allowed[_from][msg.sender] ) return false; // Check allowance\r\n\r\n        balances[_from] = safeSub(balances[_from] , _value); // Subtract from the sender\r\n        balances[_to] = safeAdd(balances[_to] , _value); // Add the same to the recipient\r\n\r\n        allowed[_from][msg.sender] = safeSub( allowed[_from][msg.sender] , _value );\r\n\r\n        bytes memory empty;\r\n\r\n        if ( isContract(_to) ) {\r\n\t        ContractReceiver receiver = ContractReceiver(_to);\r\n\t    \treceiver.tokenFallback(_from, _value, empty);\r\n\t\t}\r\n\r\n        Transfer(_from, _to, _value , empty);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint _value) returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newrootAddress\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"changeSwapperAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GXVCToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a14c0b5c716ee460e74e1e463ea133ce078fca6c681c7300c3e32e2a80007353"}]}