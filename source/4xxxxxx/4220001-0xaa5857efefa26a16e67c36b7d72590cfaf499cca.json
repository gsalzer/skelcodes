{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract DisbursableToken is MintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  struct Account {\r\n    uint claimedPoints;\r\n    uint allowedPoints;\r\n    uint lastPointsPerToken;\r\n  }\r\n\r\n  event Disburse(address _source, uint _amount);\r\n  event ClaimDisbursement(address _account, uint _amount);\r\n  // The disbursement multiplier exists to correct rounding errors\r\n  // One disbursed wei = 1e18 disbursement points\r\n  uint pointMultiplier = 1e18;\r\n  uint totalPointsPerToken;\r\n  uint unclaimedDisbursement;\r\n  uint totalDisbursement;\r\n\r\n  mapping(address => Account) accounts;\r\n\r\n  /**\r\n   * @dev Function to send eth to owners of this token.\r\n   */\r\n  function disburse() public payable {\r\n    totalPointsPerToken = totalPointsPerToken.add(msg.value.mul(pointMultiplier).div(totalSupply));\r\n    unclaimedDisbursement = unclaimedDisbursement.add(msg.value);\r\n    totalDisbursement = totalDisbursement.add(msg.value);\r\n    Disburse(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to update the claimable disbursements whenever tokens change hands\r\n   * @param _account address The address whose claimable disbursements should be updated\r\n   * @return A uint256 specifing the amount of wei still available for the owner.\r\n   */\r\n  function updatePoints(address _account) internal {\r\n    uint newPointsPerToken = totalPointsPerToken.sub(accounts[_account].lastPointsPerToken);\r\n    accounts[_account].allowedPoints = accounts[_account].allowedPoints.add(balances[_account].mul(newPointsPerToken));\r\n    accounts[_account].lastPointsPerToken = totalPointsPerToken;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of wei that a token owner can claim.\r\n   * @param _owner address The address which owns the funds.\r\n   * @return A uint256 specifing the amount of wei still available for the owner.\r\n   */\r\n  function claimable(address _owner) constant returns (uint256 remaining) {\r\n    updatePoints(_owner);\r\n    return accounts[_owner].allowedPoints.sub(accounts[_owner].claimedPoints).div(pointMultiplier);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to claim the wei that a token owner is entitled to\r\n   * @param _amount uint256 How much of the wei the user will take\r\n   */\r\n  function claim(uint _amount) public {\r\n    require(_amount > 0);\r\n    updatePoints(msg.sender);\r\n    uint claimingPoints = _amount.mul(pointMultiplier);\r\n    require(accounts[msg.sender].claimedPoints.add(claimingPoints) <= accounts[msg.sender].allowedPoints);\r\n    accounts[msg.sender].claimedPoints = accounts[msg.sender].claimedPoints.add(claimingPoints);\r\n    ClaimDisbursement(msg.sender, _amount);\r\n    require(msg.sender.send(_amount));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens. We need to modify this to update points.\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    updatePoints(_to);\r\n    super.mint(_to, _amount);\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns(bool) {\r\n    updatePoints(msg.sender);\r\n    updatePoints(_to);\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another while ensuring that claims remain where they are\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n    updatePoints(_from);\r\n    updatePoints(_to);\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Hero token\r\n * @dev This is the token being sold\r\n *\r\n * ABI\r\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburse\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Disburse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDisbursement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\r\n */\r\n\r\ncontract HeroToken is DisbursableToken {\r\n  string public name = \"Hero Token\";\r\n  string public symbol = \"HERO\";\r\n  uint public decimals = 18;\r\n\r\n  bool public tradingStarted = false;\r\n  /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n  function startTrading() onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows anyone to transfer the DEVE tokens once trading has started\r\n   * @param _to the recipient address of the tokens.\r\n   * @param _value number of tokens to be transfered.\r\n   */\r\n  function transfer(address _to, uint _value) hasStartedTrading returns(bool) {\r\n    super.transfer(_to, _value);\r\n  }\r\n\r\n   /**\r\n   * @dev Allows anyone to transfer the DEVE tokens once trading has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) hasStartedTrading returns(bool) {\r\n    super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function() external payable {\r\n    disburse();\r\n  }\r\n}\r\n\r\n/**\r\n * @title MainSale\r\n * @dev The main HERO token sale contract\r\n *\r\n * ABI\r\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"bonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleOngoing\",\"type\":\"bool\"}],\"name\":\"setSaleOngoing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]\r\n */\r\ncontract MainSale is Ownable {\r\n  using SafeMath for uint;\r\n  event TokenSold(address recipient, uint ether_amount, uint token_amount, uint exchangerate);\r\n  event AuthorizedCreate(address recipient, uint token_amount);\r\n  event MainSaleClosed();\r\n\r\n  HeroToken public token = new HeroToken();\r\n\r\n  address public multisigVault = 0x877f1DAa6e6E9dc2764611D48c56172CE3547656;\r\n\r\n  uint public hardcap = 250000 ether;\r\n  uint public exchangeRate = 200;\r\n  uint public minimum = 10 ether;\r\n\r\n  uint public altDeposits = 0;\r\n  uint public start = 1504266900; //new Date(\"September 1, 2017 19:55:00 GMT+8\").getTime() / 1000\r\n  bool public saleOngoing = true;\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the sale IS ON\r\n   */\r\n  modifier isSaleOn() {\r\n    require(start < now && saleOngoing && !token.mintingFinished());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to prevent buying tokens below the minimum required\r\n   */\r\n  modifier isOverMinimum() {\r\n    require(msg.value >= minimum);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the hardcap has not been reached\r\n   */\r\n  modifier isUnderHardcap() {\r\n    require(multisigVault.balance + altDeposits <= hardcap);\r\n    _;\r\n  }\r\n\r\n  /*\r\n   * @dev Allows anyone to create tokens by depositing ether.\r\n   * @param recipient the recipient to receive tokens.\r\n   */\r\n  function createTokens(address recipient) public isOverMinimum isUnderHardcap isSaleOn payable {\r\n    uint base = exchangeRate.mul(msg.value).mul(10**token.decimals()).div(1 ether);\r\n    uint bonus = bonusTokens(base);\r\n    uint tokens = base.add(bonus);\r\n    token.mint(recipient, tokens);\r\n    require(multisigVault.send(msg.value));\r\n    TokenSold(recipient, msg.value, tokens, exchangeRate);\r\n  }\r\n\r\n  /**\r\n   * @dev Computes the number of bonus tokens awarded based on the current time.\r\n   * @param base the original number of tokens made without counting the bonus\r\n   */\r\n  function bonusTokens(uint base) constant returns(uint) {\r\n    uint bonus = 0;\r\n    if (now <= start + 3 hours) {\r\n      bonus = base.mul(3).div(10);\r\n    } else if (now <= start + 24 hours) {\r\n      bonus = base.mul(2).div(10);\r\n    } else if (now <= start + 3 days) {\r\n      bonus = base.div(10);\r\n    } else if (now <= start + 7 days) {\r\n      bonus = base.div(20);\r\n    } else if (now <= start + 14 days) {\r\n      bonus = base.div(40);\r\n    }\r\n    return bonus;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\r\n   * @param recipient the recipient to receive tokens.\r\n   * @param tokens number of tokens to be created.\r\n   */\r\n  function authorizedCreateTokens(address recipient, uint tokens) public onlyOwner {\r\n    token.mint(recipient, tokens);\r\n    AuthorizedCreate(recipient, tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the starting time.\r\n   * @param _start the new _start\r\n   */\r\n  function setStart(uint _start) public onlyOwner {\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the minimum purchase.\r\n   * @param _minimum the new _minimum\r\n   */\r\n  function setMinimum(uint _minimum) public onlyOwner {\r\n    minimum = _minimum;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the hardcap.\r\n   * @param _hardcap the new hardcap\r\n   */\r\n  function setHardcap(uint _hardcap) public onlyOwner {\r\n    hardcap = _hardcap;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\r\n   * @param totalAltDeposits total amount ETH equivalent\r\n   */\r\n  function setAltDeposits(uint totalAltDeposits) public onlyOwner {\r\n    altDeposits = totalAltDeposits;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the multisig contract.\r\n   * @param _multisigVault the multisig contract address\r\n   */\r\n  function setMultisigVault(address _multisigVault) public onlyOwner {\r\n    if (_multisigVault != address(0)) {\r\n      multisigVault = _multisigVault;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to set the exchange rate\r\n   * @param _exchangeRate the exchangerate address\r\n   */\r\n  function setExchangeRate(uint _exchangeRate) public onlyOwner {\r\n    exchangeRate = _exchangeRate;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to stop the sale\r\n   * @param _saleOngoing whether the sale is ongoing or not\r\n   */\r\n  function setSaleOngoing(bool _saleOngoing) public onlyOwner {\r\n    saleOngoing = _saleOngoing;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to finish the minting.\r\n   * The ownership of the token contract is transfered\r\n   * to this owner.\r\n   */\r\n  function finishMinting() public onlyOwner {\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    MainSaleClosed();\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\r\n   * @param _token the contract address of the ERC20 contract\r\n   */\r\n  function retrieveTokens(address _token) public onlyOwner {\r\n    ERC20 foreignToken = ERC20(_token);\r\n    foreignToken.transfer(multisigVault, foreignToken.balanceOf(this));\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function which receives ether and created the appropriate number of tokens for the\r\n   * msg.sender.\r\n   */\r\n  function() external payable {\r\n    createTokens(msg.sender);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"bonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleOngoing\",\"type\":\"bool\"}],\"name\":\"setSaleOngoing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]","ContractName":"MainSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67d8b6da45d0e591fd06eb46fb42875c64df8274398d5bfe8c8b6fe94931780f"}]}