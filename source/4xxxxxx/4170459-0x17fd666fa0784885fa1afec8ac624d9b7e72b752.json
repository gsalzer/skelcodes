{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract FLiK is owned {\r\n    /* Public variables of the token */\r\n    string public standard = 'FLiK 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 14;\r\n    uint256 public totalSupply;\r\n    bool public locked;\r\n    uint256 public icoSince;\r\n    uint256 public icoTill;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event IcoFinished();\r\n\r\n    uint256 public buyPrice = 1;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function FLiK(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 _icoSince,\r\n        uint256 _icoTill\r\n    ) {\r\n        totalSupply = initialSupply;\r\n        \r\n        balanceOf[this] = totalSupply / 100 * 90;           // Give the smart contract 90% of initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\r\n        balanceOf[msg.sender] = totalSupply / 100 * 10;     // Give 10% of total supply to contract owner\r\n\r\n        Transfer(this, msg.sender, balanceOf[msg.sender]);\r\n\r\n        if(_icoSince == 0 && _icoTill == 0) {\r\n            icoSince = 1503187200;\r\n            icoTill = 1505865600;\r\n        }\r\n        else {\r\n            icoSince = _icoSince;\r\n            icoTill = _icoTill;\r\n        }\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n\r\n        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\r\n\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);                  // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy(uint256 ethers, uint256 time) internal {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n        require(time >= icoSince && time <= icoTill);        // check for ico dates\r\n        require(ethers > 0);                                 // check if ethers is greater than zero\r\n\r\n        uint amount = ethers / buyPrice;\r\n\r\n        require(balanceOf[this] >= amount);                  // check if smart contract has sufficient number of tokens\r\n\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[this] -= amount;\r\n\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function () payable {\r\n        buy(msg.value, now);\r\n    }\r\n\r\n    function internalIcoFinished(uint256 time) internal returns (bool) {\r\n        if(time > icoTill) {\r\n            uint256 unsoldTokens = balanceOf[this];\r\n\r\n            balanceOf[owner] += unsoldTokens;\r\n            balanceOf[this] = 0;\r\n\r\n            Transfer(this, owner, unsoldTokens);\r\n\r\n            IcoFinished();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* 0x356e2927 */\r\n    function icoFinished() onlyOwner {\r\n        internalIcoFinished(now);\r\n    }\r\n\r\n    /* 0xd271011d */\r\n    function transferEthers() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function setBuyPrice(uint256 _buyPrice) onlyOwner {\r\n        buyPrice = _buyPrice;\r\n    }\r\n\r\n    /*\r\n       locking: 0x211e28b60000000000000000000000000000000000000000000000000000000000000001\r\n       unlocking: 0x211e28b60000000000000000000000000000000000000000000000000000000000000000\r\n    */\r\n    function setLocked(bool _locked) onlyOwner {\r\n        locked = _locked;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoFinished\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSince\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_icoSince\",\"type\":\"uint256\"},{\"name\":\"_icoTill\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoFinished\",\"type\":\"event\"}]","ContractName":"FLiK","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000cb49b44ba602d80000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000599995e00000000000000000000000000000000000000000000000000000000059ea01600000000000000000000000000000000000000000000000000000000000000004464c694b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464c494b00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://832facb5089179350b1ce6b8b4dc9783691d6464b1dd5febe98597a40c5f3e2b"}]}