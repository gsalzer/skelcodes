{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the Open Longevity Contract.\r\n\r\nThe Open Longevity Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe Open Longevity Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the Open Longevity Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@nordavind.ru>\r\n*/\r\n\r\n\r\npragma solidity ^0.4.10;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function owned() payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value);\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transferFrom(address from, address to, uint value);\r\n    function approve(address spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Know your customer contract\r\n */\r\ncontract KYC is owned {\r\n\r\n    mapping (address => bool) public known;\r\n    address                   public confirmer;\r\n\r\n    function setConfirmer(address _confirmer) public onlyOwner {\r\n        confirmer = _confirmer;\r\n    }\r\n\r\n    function setToKnown(address _who) public {\r\n        require(msg.sender == confirmer || msg.sender == owner);\r\n        known[_who] = true;\r\n    }\r\n}\r\n\r\ncontract Presale is KYC, ERC20 {\r\n\r\n    uint    public etherPrice;\r\n    address public presaleOwner;\r\n    uint    public totalLimitUSD;\r\n    uint    public collectedUSD;\r\n\r\n    enum State { Disabled, Presale, Finished }\r\n    event NewState(State state);\r\n    State   public state;\r\n    uint    public presaleStartTime;\r\n    uint    public ppFinishTime;\r\n    uint    public presaleFinishTime;\r\n\r\n    struct Investor {\r\n        uint256 amountTokens;\r\n        uint    amountWei;\r\n    }\r\n    mapping (address => Investor) public investors;\r\n    mapping (uint => address)     public investorsIter;\r\n    uint                          public numberOfInvestors;\r\n    \r\n    function () payable public {\r\n        require(state == State.Presale);\r\n        require(now < presaleFinishTime);\r\n        require(now > ppFinishTime || known[msg.sender]);\r\n\r\n        uint valueWei = msg.value;\r\n        uint valueUSD = valueWei * etherPrice / 1000000000000000000;\r\n        if (collectedUSD + valueUSD > totalLimitUSD) { // don't need so much ether\r\n            valueUSD = totalLimitUSD - collectedUSD;\r\n            valueWei = valueUSD * 1000000000000000000 / etherPrice;\r\n            require(msg.sender.call.gas(3000000).value(msg.value - valueWei)());\r\n            collectedUSD = totalLimitUSD; // to be sure!\r\n        } else {\r\n            collectedUSD += valueUSD;\r\n        }\r\n\r\n        uint256 tokensPer10USD = 100;\r\n        if (now <= ppFinishTime) {\r\n            if (valueUSD >= 100000) {\r\n                tokensPer10USD = 200;\r\n            } else {\r\n                tokensPer10USD = 175;\r\n            }\r\n        } else {\r\n            if (valueUSD >= 100000) {\r\n                tokensPer10USD = 150;\r\n            } else {\r\n                tokensPer10USD = 130;\r\n            }\r\n        }\r\n\r\n        uint256 tokens = tokensPer10USD * valueUSD / 10;\r\n        require(tokens > 0);\r\n\r\n        Investor storage inv = investors[msg.sender];\r\n        if (inv.amountWei == 0) { // new investor\r\n            investorsIter[numberOfInvestors++] = msg.sender;\r\n        }\r\n        require(inv.amountTokens + tokens > inv.amountTokens); // overflow\r\n        inv.amountTokens += tokens;\r\n        inv.amountWei += valueWei;\r\n        totalSupply += tokens;\r\n        Transfer(this, msg.sender, tokens);\r\n    }\r\n    \r\n    function startPresale(address _presaleOwner, uint _etherPrice) public onlyOwner {\r\n        require(state == State.Disabled);\r\n        presaleStartTime = now;\r\n        presaleOwner = _presaleOwner;\r\n        etherPrice = _etherPrice;\r\n        ppFinishTime = now + 3 days;\r\n        presaleFinishTime = ppFinishTime + 60 days;\r\n        state = State.Presale;\r\n        totalLimitUSD = 500000;\r\n        NewState(state);\r\n    }\r\n    \r\n    function timeToFinishPresale() public constant returns(uint t) {\r\n        require(state == State.Presale);\r\n        if (now > presaleFinishTime) {\r\n            t = 0;\r\n        } else {\r\n            t = presaleFinishTime - now;\r\n        }\r\n    }\r\n    \r\n    function finishPresale() public onlyOwner {\r\n        require(state == State.Presale);\r\n        require(now >= presaleFinishTime || collectedUSD == totalLimitUSD);\r\n        require(presaleOwner.call.gas(3000000).value(this.balance)());\r\n        state = State.Finished;\r\n        NewState(state);\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        require(presaleOwner.call.gas(3000000).value(this.balance)());\r\n    }\r\n}\r\n\r\ncontract PresaleToken is Presale {\r\n    \r\n    string  public standard    = 'Token 0.1';\r\n    string  public name        = 'OpenLongevity';\r\n    string  public symbol      = \"YEAR\";\r\n    uint8   public decimals    = 0;\r\n\r\n    function PresaleToken() payable public Presale() {}\r\n\r\n    function balanceOf(address _who) constant public returns (uint) {\r\n        return investors[_who].amountTokens;\r\n    }\r\n\r\n    function transfer(address, uint256) public {revert();}\r\n    function transferFrom(address, address, uint256) public {revert();}\r\n    function approve(address, uint256) public {revert();}\r\n    function allowance(address, address) public constant returns (uint256) {revert();}\r\n}\r\n\r\ncontract OpenLongevityPresale is PresaleToken {\r\n\r\n    function OpenLongevityPresale() payable public PresaleToken() {}\r\n\r\n    function killMe() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsIter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ppFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"known\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_confirmer\",\"type\":\"address\"}],\"name\":\"setConfirmer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeToFinishPresale\",\"outputs\":[{\"name\":\"t\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"setToKnown\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLimitUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleOwner\",\"type\":\"address\"},{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"startPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OpenLongevityPresale","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4f0f9cf5188a34c5390cc307eee462a1a3338472d04ac530c90da7f2c120f28"}]}