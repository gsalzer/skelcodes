{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n \r\ncontract Ownable {\r\n    \r\n    address owner;\r\n    \r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n \r\ncontract T_CAB_001 is Ownable {\r\n    \r\n    string public constant name = \"CAB Equity T001\";\r\n    \r\n    string public constant symbol = \"CABT001\";\r\n    \r\n    uint32 public constant decimals = 8;\r\n    \r\n    uint public totalSupply = 0;\r\n    \r\n    mapping (address => uint) balances;\r\n    \r\n    mapping (address => mapping(address => uint)) allowed;\r\n    \r\n    function mint(address _to, uint _value) onlyOwner {\r\n        assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to]);\r\n        balances[_to] += _value;\r\n        totalSupply += _value;\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value; \r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } \r\n        return false;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n        if( allowed[_from][msg.sender] >= _value &&\r\n            balances[_from] >= _value \r\n            && balances[_to] + _value >= balances[_to]) {\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_from] -= _value; \r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } \r\n        return false;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n}\r\n\r\n/*\r\n0x84e70911F7810100FAbfeee94D81146E74F14A50\r\n*/","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Ownable","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab871baf4afcbafbdf0777105fbc0cff7bdc8a5b11c319dc4a1017f55d770ad0"}]}