{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\r\n    function isOwner(address _node, address _owner) constant returns(bool);\r\n}\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract AssetProxyInterface {\r\n    function balanceOf(address _owner) constant returns(uint);\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool);\r\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool);\r\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool);\r\n    function transfer(address _to, uint _value) returns(bool);\r\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool);\r\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool);\r\n    function totalSupply() constant returns(uint);\r\n    function approve(address _spender, uint _value) returns(bool);\r\n}\r\n\r\ncontract VestingInterface {\r\n    function createVesting(address _receiver, AssetProxyInterface _AssetProxy, uint _amount, uint _parts, uint _paymentInterval, uint _schedule) returns(bool);\r\n    function sendVesting(uint _id) returns(bool);\r\n    function getReceiverVesting(address _receiver, address _ERC20) constant returns(uint);\r\n}\r\n\r\ncontract CryptykVestingManager is Ambi2EnabledFull {\r\n\r\n    AssetProxyInterface public assetProxy;\r\n    VestingInterface public vesting;\r\n\r\n    uint public paymentInterval;\r\n    uint public schedule;\r\n    uint public presaleDeadline;\r\n\r\n    function setVesting(VestingInterface _vesting) onlyRole('admin') returns(bool) {\r\n        require(address(vesting) == 0x0);\r\n\r\n        vesting = _vesting;\r\n        return true;\r\n    }\r\n\r\n    function setAssetProxy(AssetProxyInterface _assetProxy) onlyRole('admin') returns(bool) {\r\n        require(address(assetProxy) == 0x0);\r\n        require(address(vesting) != 0x0);\r\n\r\n        assetProxy = _assetProxy;\r\n        assetProxy.approve(vesting, ((2 ** 256) - 1));\r\n        return true;\r\n    }\r\n\r\n    function setIntervalSchedulePresale(uint _paymentInterval, uint _schedule, uint _presaleDeadline) onlyRole('admin') returns(bool) {\r\n        paymentInterval = _paymentInterval;\r\n        schedule = _schedule;\r\n        presaleDeadline = _presaleDeadline;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        if (now < presaleDeadline) {\r\n            require(assetProxy.transferFrom(msg.sender, address(this), _value));\r\n            require(vesting.createVesting(_to, assetProxy, _value, 1, paymentInterval, schedule));\r\n            return true;\r\n        }\r\n        return assetProxy.transferFrom(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\r\n        return assetProxy.transferFromToICAP(msg.sender, _icap, _value);\r\n    }\r\n\r\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\r\n        if (now < presaleDeadline) {\r\n            require(assetProxy.transferFromWithReference(msg.sender, address(this), _value, _reference));\r\n            require(vesting.createVesting(_to, assetProxy, _value, 1, paymentInterval, schedule));\r\n            return true;\r\n        }\r\n        return assetProxy.transferFromWithReference(msg.sender, _to, _value, _reference);\r\n    }\r\n\r\n    function balanceOf(address _address) constant returns(uint) {\r\n        return (vesting.getReceiverVesting(_address, assetProxy) + assetProxy.balanceOf(_address));\r\n    }\r\n\r\n    function totalSupply() constant returns(uint) {\r\n        return assetProxy.totalSupply();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"assetProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"setVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetProxy\",\"type\":\"address\"}],\"name\":\"setAssetProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentInterval\",\"type\":\"uint256\"},{\"name\":\"_schedule\",\"type\":\"uint256\"},{\"name\":\"_presaleDeadline\",\"type\":\"uint256\"}],\"name\":\"setIntervalSchedulePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"CryptykVestingManager","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51f939a137415fdb4e970bf59cc4523ebbf47e4261ba0c50b27805fa12656db2"}]}