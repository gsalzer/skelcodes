{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOkOKWMMMMMM //\r\n// MMMMWKkk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOkOKWMMMMMM //\r\n// MMMMXl.....,cdOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:,.....dNMMMM //\r\n// MMMWd.        .'cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d:'.        .xMMMM //\r\n// MMMK,   ......   ..:xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;.    .....    :XMMM //\r\n// MMWd.   .;;;,,'..   .'lkXNWWNNNWMMMMMMMMMMWNNWWWNKkc..  ...',;;;,.   .kMMM //\r\n// MMNc   .,::::::;,'..   ..,;;,,dNMMMMMMMMMMXl,;;;,..   ..';;::::::'.  .lWMM //\r\n// MM0'   .;:::::::;;'..        ;0MMMMMMMMMMMWO'        ..,;;:::::::;.   ;KMM //\r\n// MMx.  .';::::;,'...        .:0MMMMMMMMMMMMMWO;.        ...';;::::;..  .OMM //\r\n// MWd.  .,:::;'..          .,xNMMMMMMMMMMMMMMMMXd'.          ..,;:::'.  .xMM //\r\n// MNl.  .,:;'..         .,ckNMMMMMMMMMMMMMMMMMMMMXxc'.         ..';:,.  .dWM //\r\n// MNc   .,,..    .;:clox0NWXXWMMMMMMMMMMMMMMMMMMWXXWXOxolc:;.    ..,'.  .oWM //\r\n// MNc   ...     .oWMMMNXNMW0odXMMMMMMMMMMMMMMMMKooKWMNXNMMMNc.     ...  .oWM //\r\n// MNc.          ;KMMMMNkokNMXlcKMMMMMMMMMMMMMM0coNMNxoOWMMMM0,          .oWM //\r\n// MNc         .;0MMMMMMWO:dNMNoxWMMMMMMMMMMMMNddNMNocKMMMMMMWO,         .oWM //\r\n// MX:        .lXMMMMMMMMM0lOMMNXWMMMMMMMMMMMMWXNMMklKMMMMMMMMM0:.       .lNM //\r\n// MX;      .;kWMMMMMMMMMMMXNMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMNx,.      cNM //\r\n// MO.    .:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:.  . ,0M //\r\n// Wl..':dKWMMMMMMMWNK000KNMMMMMMMMMMMMMMMMMMMMMMMMMWNK000KNMMMMMMMMW0o;...dW //\r\n// NxdOXWMMMMMMMW0olcc::;,,cxXWMMMMMMMMMMMMMMMMMMWKd:,,;::ccld0WMMMMMMMWKkokW //\r\n// MMMMMMMMMMMWOlcd0XWWWN0x:.,OMMMMMMMMMMMMMMMMMWk,'cxKNWWWXOdcl0MMMMMMMMMMMM //\r\n// MMMMMMMMMMMWKKWMMMMMMMMMWK0XMMMMMMMMMMMMMMMMMMXOXWMMMMMMMMMN0XMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0OOOO0KWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.......'xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMNKOkkkk0XNMMMMMMMMMMMMMMMMMMWO;.    .:0WMMMMMMMMMMMMMMMMMWNKOkkkkOKNMMM //\r\n// MMWXOkxddoddxxkKWMMMMMMMMMMMMMMMMXo...'dNMMMMMMMMMMMMMMMMN0kxxdodddxk0XMMM //\r\n// MMMMMMMMMMMMWNKKNMMMMMMMMMMMMMMMMWOc,,c0WMMMMMMMMMMMMMMMMXKKNWMMMMMMMMMMMM //\r\n// MMMMMMMMWXKKXXNWMMMMMMMMMMWWWWWX0xcclc:cxKNWWWWWMMMMMMMMMMWNXXKKXWMMMMMMMM //\r\n// MMMWXOxdoooddxkO0NMMMMMMMWKkfoahheitNX0GlikkxxkXMMMMMMMWX0OkxddooddxOXWMMM //\r\n// MMMWXKKNNWMMMMMWWWMMMMMMMMMWNXXXNWMMMMMMWXXXXNWMMMMMMMMMWWWMMMMWWNXKKNWMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Lucky* MMMM> *~+. drohmah <MMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Number MMMMMMMMMM> funn <MMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM ------ MMMMMMMMM> drohma *~+. <MMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Random MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Ledger MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// MMMMM>***<creator>...<MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n// ~> 0x0563cAC61Ea13a591A9E41087929f80d3076471d <~+~+~+~> VIII*XII*MMXVII <~ //\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM //\r\n\r\n\r\n// Manages contract ownership.\r\ncontract Owned {\r\n    address public owner;\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Mortal is Owned {\r\n    /* Function to recover the funds on the contract */\r\n    function kill() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n}\r\n\r\n// Random is a block hash based random number generator.\r\n// this is public so requestors can validate thier numbers\r\n// independent of the native user interface\r\ncontract Random is SafeMath {\r\n    // Generates a random number from 1 to max based on the last block hash.\r\n    function getRand(uint blockNumber, uint max)\r\n    public\r\n    constant \r\n    returns(uint) {\r\n        // block.blockhash(uint blockNumber) returns (bytes32): hash of the given block\r\n        // only works for 256 most recent blocks excluding current\r\n        return(safeAdd(uint(sha3(block.blockhash(blockNumber))) % max, 1));\r\n    }\r\n}\r\n\r\n// LuckyNumber is the main public interface for a random number ledger.\r\n// To make a request:\r\n//   Step 1: Call requestNumber with the `cost` as the value\r\n//   Step 2: Wait waitTime in blocks past the block which mines transaction for requestNumber\r\n//   Step 3: Call revealNumber to generate the number, and make it publicly accessable in the UI.\r\n//           this is required to create the Events which generate the Ledger. \r\ncontract LuckyNumber is Owned {\r\n    // cost to generate a random number in Wei.\r\n    uint256 public cost;\r\n    // waitTime is the number of blocks before random is generated.\r\n    uint8 public waitTime;\r\n    // set default max\r\n    uint256 public max;\r\n\r\n    // PendingNumber represents one number.\r\n    struct PendingNumber {\r\n        address proxy;\r\n        uint256 renderedNumber;\r\n        uint256 creationBlockNumber;\r\n        uint256 max;\r\n        // block to wait\r\n        // this will also be used as\r\n        // an active bool to save some storage\r\n        uint8 waitTime;\r\n    }\r\n\r\n    // for Number Config :: uint256 cost, uint256 max, uint8 waitTime\r\n    event EventLuckyNumberUpdated(uint256, uint256, uint8);\r\n    // for Number Ledger\r\n    // :: address requestor, uint256 max, uint256 creationBlockNumber, uint8 waitTime\r\n    event EventLuckyNumberRequested(address, uint256, uint256, uint8);\r\n    // :: address requestor, uint256 creationBlockNumber, uint256 renderedNumber\r\n    event EventLuckyNumberRevealed(address, uint256, uint256);\r\n    \r\n    mapping (address => PendingNumber) public pendingNumbers;\r\n    mapping (address => bool) public whiteList;\r\n\r\n    function requestNumber(address _requestor, uint256 _max, uint8 _waitTime) payable public;\r\n    function revealNumber(address _requestor) payable public;\r\n}\r\n\r\n// LuckyNumber Implementation\r\ncontract LuckyNumberImp is LuckyNumber, Mortal, Random {\r\n    \r\n    // Initialize state +.+.+.\r\n    function LuckyNumberImp() {\r\n        owned();\r\n        // defaults\r\n        cost = 20000000000000000; // 0.02 ether // 20 finney\r\n        max = 15; // generate number between 1 and 15\r\n        waitTime = 3; // 3 blocks\r\n    }\r\n\r\n\t// Let owner customize defauts.\r\n    // Allow the owner to set max.\r\n    function setMax(uint256 _max)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        max = _max;\r\n        EventLuckyNumberUpdated(cost, max, waitTime);\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set waitTime. (in blocks)\r\n    function setWaitTime(uint8 _waitTime)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        waitTime = _waitTime;\r\n        EventLuckyNumberUpdated(cost, max, waitTime);\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set cost.\r\n    function setCost(uint256 _cost)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        cost = _cost;\r\n        EventLuckyNumberUpdated(cost, max, waitTime);\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to set proxy contracts,\r\n    // which can accept tokens on behalf of this contract.\r\n    function enableProxy(address _proxy)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        // _cost\r\n        whiteList[_proxy] = true;\r\n        return whiteList[_proxy];\r\n    }\r\n\r\n    function removeProxy(address _proxy)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        delete whiteList[_proxy];\r\n        return true;\r\n    }\r\n\r\n    // Allow the owner to cash out the holdings of this contract.\r\n    function withdraw(address _recipient, uint256 _balance)\r\n    onlyOwner\r\n    public\r\n    returns (bool) {\r\n        _recipient.transfer(_balance);\r\n        return true;\r\n    }\r\n\r\n    // Assume that simple transactions are trying to request a number,\r\n    // unless it is from the owner.\r\n    function () payable public {\r\n        if (msg.sender != owner) {\r\n            requestNumber(msg.sender, max, waitTime);\r\n        }\r\n    }\r\n    \r\n    // Request a Number ... *~>\r\n    function requestNumber(address _requestor, uint256 _max, uint8 _waitTime)\r\n    payable \r\n    public {\r\n        // external requirement: \r\n        // value must exceed cost\r\n        // unless address is whitelisted\r\n        if (!whiteList[msg.sender]) {\r\n            require(!(msg.value < cost));\r\n        }\r\n\r\n        // internal requirement: \r\n        // request address must not have pending number\r\n        assert(!checkNumber(_requestor));\r\n        // set pending number\r\n        pendingNumbers[_requestor] = PendingNumber({\r\n            proxy: tx.origin,\r\n            renderedNumber: 0,\r\n            max: max,\r\n            creationBlockNumber: block.number,\r\n            waitTime: waitTime\r\n        });\r\n        if (_max > 1) {\r\n            pendingNumbers[_requestor].max = _max;\r\n        }\r\n        // max 250 wait to leave a few blocks\r\n        // for the reveal transction to occur\r\n        // and write from the pending numbers block\r\n        // before it expires\r\n        if (_waitTime > 0 && _waitTime < 250) {\r\n            pendingNumbers[_requestor].waitTime = _waitTime;\r\n        }\r\n        EventLuckyNumberRequested(_requestor, pendingNumbers[_requestor].max, pendingNumbers[_requestor].creationBlockNumber, pendingNumbers[_requestor].waitTime);\r\n    }\r\n\r\n    // Reveal your number ... *~>\r\n    // Only requestor or proxy can generate the number\r\n    function revealNumber(address _requestor)\r\n    public\r\n    payable {\r\n        assert(_canReveal(_requestor, msg.sender));\r\n        _revealNumber(_requestor);\r\n    }\r\n\r\n    // Internal implementation of revealNumber().\r\n    function _revealNumber(address _requestor) \r\n    internal {\r\n        // waitTime has passed, render this requestor's number.\r\n        uint256 luckyBlock = _revealBlock(_requestor);\r\n        // \r\n        // TIME LIMITATION:\r\n        // blocks older than (currentBlock - 256) \r\n        // \"expire\" and read the same hash as most recent valid block\r\n        // \r\n        uint256 luckyNumber = getRand(luckyBlock, pendingNumbers[_requestor].max);\r\n\r\n        // set new values\r\n        pendingNumbers[_requestor].renderedNumber = luckyNumber;\r\n        // event\r\n        EventLuckyNumberRevealed(_requestor, pendingNumbers[_requestor].creationBlockNumber, pendingNumbers[_requestor].renderedNumber);\r\n        // zero out wait blocks since this is now inactive(record keeping)\r\n        pendingNumbers[_requestor].waitTime = 0;\r\n    }\r\n\r\n    function canReveal(address _requestor)\r\n    public\r\n    constant\r\n    returns (bool, uint, uint, address, address) {\r\n        return (_canReveal(_requestor, msg.sender), _remainingBlocks(_requestor), _revealBlock(_requestor), _requestor, msg.sender);\r\n    }\r\n\r\n    function _canReveal(address _requestor, address _proxy) \r\n    internal\r\n    constant\r\n    returns (bool) {\r\n        // check for pending number request\r\n        if (checkNumber(_requestor)) {\r\n            // check for no remaining blocks to be mined\r\n            // must wait for `pendingNumbers[_requestor].waitTime` to be excceeded\r\n            if (_remainingBlocks(_requestor) == 0) {\r\n                // check for ownership\r\n                if (pendingNumbers[_requestor].proxy == _requestor || pendingNumbers[_requestor].proxy == _proxy) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _remainingBlocks(address _requestor)\r\n    internal\r\n    constant\r\n    returns (uint) {\r\n        uint256 revealBlock = safeAdd(pendingNumbers[_requestor].creationBlockNumber, pendingNumbers[_requestor].waitTime);\r\n        uint256 remainingBlocks = 0;\r\n        if (revealBlock > block.number) {\r\n            remainingBlocks = safeSubtract(revealBlock, block.number);\r\n        }\r\n        return remainingBlocks;\r\n    }\r\n\r\n    function _revealBlock(address _requestor)\r\n    internal\r\n    constant\r\n    returns (uint) {\r\n        // add wait block time\r\n        // to creation block time\r\n        // then subtract 1\r\n        return safeAdd(pendingNumbers[_requestor].creationBlockNumber, pendingNumbers[_requestor].waitTime);\r\n    }\r\n\r\n\r\n    function getNumber(address _requestor)\r\n    public\r\n    constant\r\n    returns (uint, uint, uint, address) {\r\n        return (pendingNumbers[_requestor].renderedNumber, pendingNumbers[_requestor].max, pendingNumbers[_requestor].creationBlockNumber, _requestor);\r\n    }\r\n\r\n    // is a number pending for this requestor?\r\n    // TRUE: there is a number pending\r\n    // can not request, can reveal\r\n    // FALSE: there is not a number yet pending\r\n    function checkNumber(address _requestor)\r\n    public\r\n    constant\r\n    returns (bool) {\r\n        if (pendingNumbers[_requestor].renderedNumber == 0 && pendingNumbers[_requestor].waitTime > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n// 0xMMWKkk0KN/>HBBi/MASSa/DANTi/LANTen.MI.MI.MI.M+.+.+.M->MMMWNKOkOKWJ.J.J.M //\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"},{\"name\":\"_max\",\"type\":\"uint256\"},{\"name\":\"_waitTime\",\"type\":\"uint8\"}],\"name\":\"requestNumber\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"revealNumber\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_waitTime\",\"type\":\"uint8\"}],\"name\":\"setWaitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"canReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"getNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingNumbers\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"renderedNumber\",\"type\":\"uint256\"},{\"name\":\"creationBlockNumber\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"waitTime\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"enableProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestor\",\"type\":\"address\"}],\"name\":\"checkNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"EventLuckyNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"EventLuckyNumberRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EventLuckyNumberRevealed\",\"type\":\"event\"}]","ContractName":"LuckyNumberImp","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bde97a3af76b0ca57ff423b4768bd08c2689138dbbae09490ad375ec0c132e0f"}]}