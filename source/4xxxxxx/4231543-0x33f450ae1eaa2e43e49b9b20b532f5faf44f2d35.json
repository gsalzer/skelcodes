{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply = 0;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract AKM is BasicToken, Ownable {\r\n  using SafeMath for uint256;\r\n  \r\n  string public constant name = \"AKM Token\";\r\n  string public constant symbol = \"AKM\";\r\n  uint256 public constant decimals = 8;\r\n  \r\n  uint256 public tokenPerWai = (10 ** (18 - decimals) * 1 wei) / 1250;\r\n  uint256 public token = 10 ** decimals;\r\n  uint256 public constant INITIAL_SUPPLY = 2800000;\r\n  \r\n  uint256 public creationTime;\r\n  bool public is_started_bonuses = false;\r\n  bool public is_started_payouts = true;\r\n  \r\n  function emissionPay(uint256 _ammount) private {\r\n    uint256 ownBonus = _ammount.div(100).mul(25);\r\n    totalSupply = totalSupply.add(_ammount.add(ownBonus));\r\n    \r\n    balances[msg.sender] = balances[msg.sender].add(_ammount);\r\n    balances[owner] = balances[owner].add(ownBonus);\r\n    \r\n    if(msg.value > 10 ether) \r\n      Transfer(0, msg.sender, _ammount);\r\n    Transfer(this, owner, ownBonus);\r\n    Transfer(this, msg.sender, _ammount);\r\n  }\r\n  \r\n  function extraEmission(uint256 _ammount) public onlyOwner {\r\n    _ammount = _ammount.mul(token);\r\n    totalSupply = totalSupply.add(_ammount);\r\n    balances[owner] = balances[owner].add(_ammount);\r\n    Transfer(this, owner, _ammount);\r\n  }\r\n\r\n  \r\n  function AKM() {\r\n    totalSupply = INITIAL_SUPPLY.mul(token);\r\n    balances[owner] = totalSupply;\r\n  }\r\n  \r\n  function startBonuses() public onlyOwner {\r\n    if(!is_started_bonuses) {\r\n      creationTime = now;\r\n      is_started_bonuses = true;\r\n    }\r\n  }\r\n  \r\n  function startPayouts() public onlyOwner {\r\n    is_started_payouts = true;\r\n  }\r\n  \r\n  function stopPayouts() public onlyOwner {\r\n    is_started_payouts = false;\r\n  }\r\n  \r\n  function setTokensPerEther(uint256 _value) public onlyOwner {\r\n     require(_value > 0);\r\n     tokenPerWai = (10 ** 10 * 1 wei) / _value;\r\n  }\r\n  \r\n  function getBonusPercent() private constant returns(uint256) {\r\n    if(!is_started_bonuses) return 100;\r\n    uint256 diff = now.sub(creationTime);\r\n    uint256 diff_weeks = diff.div(1 weeks);\r\n    if(diff_weeks < 1) // 0 ... 1 week\r\n      return 130;\r\n    else if(diff_weeks < 2)// 1 ... 2 week\r\n      return 125;\r\n    else if(diff_weeks < 3)// 2 ... 3 week\r\n      return 120;\r\n    else if(diff_weeks < 4)// 3 ... 4 week\r\n      return 115;\r\n    else if(diff_weeks < 5)// 4 ... 5 week\r\n      return 110;\r\n    else {\r\n      is_started_bonuses = false;\r\n      return 100;\r\n    }\r\n  }\r\n  \r\n  \r\n  function() payable {\r\n    assert(is_started_payouts);\r\n    uint256 amount = msg.value.div(tokenPerWai);\r\n    amount = amount.div(100).mul(getBonusPercent());\r\n    emissionPay(amount);\r\n    owner.transfer(msg.value);\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stopPayouts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPayouts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerWai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_started_payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startBonuses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_started_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ammount\",\"type\":\"uint256\"}],\"name\":\"extraEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AKM","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee1461e0e98730d82f1c82e6d9c5f3d83bc86b59c6bb31a472c1c3e4496851d3"}]}