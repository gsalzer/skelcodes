{"status":"1","message":"OK","result":[{"SourceCode":"contract IERC20Token {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract IKYC {\r\n    function getKycLevel(address _clientAddress) constant returns (uint level){}\r\n    function getIsCompany(address _clientAddress) constant returns (bool state){}\r\n}\r\ncontract IToken {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transferViaProxy(address _from, address _to, uint _value) returns (uint error) {}\r\n    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (uint error) {}\r\n    function approveFromProxy(address _source, address _spender, uint256 _value) returns (uint error) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n    function issueNewCoins(address _destination, uint _amount) returns (uint error){}\r\n    function issueNewHeldCoins(address _destination, uint _amount){}\r\n    function destroyOldCoins(address _destination, uint _amount) returns (uint error) {}\r\n    function takeTokensForBacking(address _destination, uint _amount){}\r\n}\r\ncontract ITokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}\r\n\r\ncontract CreationContract{\r\n\r\n    address public curator;\r\n    address public dev;\r\n    IToken tokenContract;\r\n\r\n    function CreationContract(){\r\n        dev = msg.sender;\r\n    }\r\n\r\n    function create(address _destination, uint _amount){\r\n        if (msg.sender != curator) throw;\r\n\r\n        tokenContract.issueNewCoins(_destination, _amount);\r\n    }\r\n    \r\n    function createHeld(address _destination, uint _amount){\r\n         if (msg.sender != curator) throw;\r\n         \r\n         tokenContract.issueNewHeldCoins(_destination, _amount);\r\n    }\r\n\r\n    function setCreationCurator(address _curatorAdress){\r\n        if (msg.sender != dev) throw;\r\n\r\n        curator = _curatorAdress;\r\n    }\r\n\r\n    function setTokenContract(address _contractAddress){\r\n        if (msg.sender != curator) throw;\r\n\r\n        tokenContract = IToken(_contractAddress);\r\n    }\r\n\r\n    function killContract(){\r\n        if (msg.sender != dev) throw;\r\n\r\n        selfdestruct(dev);\r\n    }\r\n\r\n    function tokenAddress() constant returns (address tokenAddress){\r\n        return address(tokenContract);\r\n    }\r\n}\r\n\r\ncontract DestructionContract{\r\n\r\n    address public curator;\r\n    address public dev;\r\n    IToken tokenContract;\r\n\r\n    function DestructionContract(){\r\n        dev = msg.sender;\r\n    }\r\n\r\n    function destroy(uint _amount){\r\n        if (msg.sender != curator) throw;\r\n\r\n        tokenContract.destroyOldCoins(msg.sender, _amount);\r\n    }\r\n\r\n    function setDestructionCurator(address _curatorAdress){\r\n        if (msg.sender != dev) throw;\r\n\r\n        curator = _curatorAdress;\r\n    }\r\n\r\n    function setTokenContract(address _contractAddress){\r\n        if (msg.sender != curator) throw;\r\n\r\n        tokenContract = IToken(_contractAddress);\r\n    }\r\n\r\n    function killContract(){\r\n        if (msg.sender != dev) throw;\r\n\r\n        selfdestruct(dev);\r\n    }\r\n\r\n    function tokenAddress() constant returns (address tokenAddress){\r\n        return address(tokenContract);\r\n    }\r\n}\r\n\r\n\r\ncontract SpaceCoin is IERC20Token{\r\n\r\n  struct account{\r\n    uint avaliableBalance;\r\n    uint heldBalance;\r\n    uint amountToClaim;\r\n    uint lastClaimed;\r\n  }\r\n\r\n    //\r\n    /* Variables */\r\n    //\r\n\r\n    address public dev;\r\n    address public curator;\r\n    address public creationAddress;\r\n    address public destructionAddress;\r\n    uint256 public totalSupply = 0;\r\n    uint256 public totalHeldSupply = 0;\r\n    bool public lockdown = false;\r\n    uint public blocksPerMonth;\r\n    uint public defaultClaimPercentage;\r\n    uint public claimTreshold;\r\n\r\n    string public name = 'SpaceCoin';\r\n    string public symbol = 'SCT';\r\n    uint8 public decimals = 8;\r\n\r\n    mapping (address => account) accounts;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //\r\n    /* Events */\r\n    //\r\n\r\n    event TokensClaimed(address _destination, uint _amount);\r\n    event Create(address _destination, uint _amount);\r\n    event CreateHeld(address _destination, uint _amount);\r\n    event Destroy(address _destination, uint _amount);\r\n\r\n    //\r\n    /* Constructor */\r\n    //\r\n\r\n    function SpaceCoin() {\r\n        dev = msg.sender;\r\n        lastBlockClaimed = block.number;\r\n    }\r\n\r\n    //\r\n    /* Token related methods */\r\n    //\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return accounts[_owner].avaliableBalance;\r\n    }\r\n    \r\n    function heldBalanceOf(address _owner) constant returns (uint256 balance) {\r\n        return accounts[_owner].heldBalance;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if(accounts[msg.sender].avaliableBalance < _amount) throw;\r\n        if(accounts[_to].avaliableBalance + _amount <= accounts[_to].avaliableBalance) throw;\r\n        if(lockdown) throw;\r\n\r\n        accounts[msg.sender].avaliableBalance -= _amount;\r\n        accounts[_to].avaliableBalance += _amount;\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        if(accounts[_from].avaliableBalance < _amount) throw;\r\n        if(accounts[_to].avaliableBalance + _amount <= accounts[_to].avaliableBalance) throw;\r\n        if(_amount > allowed[_from][msg.sender]) throw;\r\n        if(lockdown) throw;\r\n\r\n        accounts[_from].avaliableBalance -= _amount;\r\n        accounts[_to].avaliableBalance += _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    function claimHeldBalance(){\r\n      if (accounts[msg.sender].heldBalance == 0) throw;\r\n      if (accounts[msg.sender].lastClaimed + blocksPerMonth >= block.number) throw; \r\n\r\n      uint valueToClaim = 0;\r\n      if (accounts[msg.sender].amountToClaim == 0){\r\n          valueToClaim = (accounts[msg.sender].heldBalance * defaultClaimPercentage) / 100;\r\n          if (valueToClaim == 0) throw;\r\n      }else{\r\n          if (accounts[msg.sender].amountToClaim <= accounts[msg.sender].heldBalance){\r\n              valueToClaim = accounts[msg.sender].amountToClaim;\r\n          }else{\r\n              valueToClaim = accounts[msg.sender].heldBalance;\r\n          }\r\n      }\r\n      \r\n      if (accounts[msg.sender].heldBalance < claimTreshold){\r\n          valueToClaim = accounts[msg.sender].heldBalance; \r\n      }\r\n\r\n      totalSupply += valueToClaim;\r\n      totalHeldSupply -= valueToClaim;\r\n      accounts[msg.sender].avaliableBalance += valueToClaim;\r\n      accounts[msg.sender].heldBalance -= valueToClaim;\r\n      accounts[msg.sender].lastClaimed = block.number;\r\n      accounts[msg.sender].amountToClaim = 0;\r\n      TokensClaimed(msg.sender, valueToClaim);\r\n      Create(msg.sender, valueToClaim);\r\n      Transfer(0x0, msg.sender, valueToClaim);\r\n    }\r\n\r\n    function issueNewCoins(address _destination, uint _amount){\r\n        if (msg.sender != creationAddress) throw;\r\n        if(accounts[_destination].avaliableBalance + _amount < accounts[_destination].avaliableBalance) throw;\r\n        if(totalSupply + _amount < totalSupply) throw;\r\n\r\n        totalSupply += _amount;\r\n        accounts[_destination].avaliableBalance += _amount;\r\n        Create(_destination, _amount);\r\n        Transfer(0x0, _destination, _amount);\r\n    }\r\n\r\n    function issueNewHeldCoins(address _destination, uint _amount){\r\n      if (msg.sender != creationAddress) throw;\r\n      if(accounts[_destination].heldBalance + _amount < accounts[_destination].heldBalance) throw;\r\n      if(totalSupply + totalHeldSupply + _amount < totalSupply + totalHeldSupply) throw;\r\n\r\n      if(accounts[_destination].lastClaimed == 0){\r\n          accounts[_destination].lastClaimed = block.number;\r\n      }  \r\n      totalHeldSupply += _amount;\r\n      accounts[_destination].heldBalance += _amount;\r\n      CreateHeld(_destination, _amount);\r\n\r\n    }\r\n\r\n    function destroyOldCoins(address _destination, uint _amount){\r\n        if (msg.sender != destructionAddress) throw;\r\n        if (accounts[_destination].avaliableBalance < _amount) throw;\r\n\r\n        totalSupply -= _amount;\r\n        accounts[_destination].avaliableBalance -= _amount;\r\n        Destroy(_destination, _amount);\r\n        Transfer(_destination, 0x0, _amount);\r\n    }\r\n\r\n    function fillHeldData(address[] _accounts, uint[] _amountsToClaim){\r\n        if (msg.sender != curator) throw;\r\n        if (_accounts.length != _amountsToClaim.length) throw;\r\n\r\n        for (uint cnt = 0; cnt < _accounts.length; cnt++){\r\n          accounts[_accounts[cnt]].amountToClaim = _amountsToClaim[cnt];\r\n        }\r\n    }\r\n\r\n    function setTokenCurator(address _curatorAddress){\r\n        if( msg.sender != dev) throw;\r\n\r\n        curator = _curatorAddress;\r\n    }\r\n\r\n    function setCreationAddress(address _contractAddress){\r\n        if (msg.sender != curator) throw;\r\n\r\n        creationAddress = _contractAddress;\r\n    }\r\n\r\n    function setDestructionAddress(address _contractAddress){\r\n        if (msg.sender != curator) throw;\r\n\r\n        destructionAddress = _contractAddress;\r\n    }\r\n\r\n    function setBlocksPerMonth(uint _blocks){\r\n        if (msg.sender != curator) throw;\r\n\r\n        blocksPerMonth = _blocks;\r\n    }\r\n\r\n    function setDefaultClaimPercentage(uint _percentage){\r\n        if (msg.sender != curator) throw;\r\n        if (_percentage > 100) throw;\r\n\r\n        defaultClaimPercentage = _percentage;\r\n    }\r\n\r\n    function emergencyLock(){\r\n        if (msg.sender != curator && msg.sender != dev) throw;\r\n\r\n        lockdown = !lockdown;\r\n    }\r\n\r\n    function killContract(){\r\n        if (msg.sender != dev) throw;\r\n\r\n        selfdestruct(dev);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        ITokenRecipient spender = ITokenRecipient(_spender);\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n    uint public blockReward;\r\n    uint public lastBlockClaimed;\r\n\r\n    function getMiningReward() {\r\n        require(msg.sender == block.coinbase);\r\n        uint amount = (block.number - lastBlockClaimed) * blockReward;\r\n        if(accounts[msg.sender].avaliableBalance + amount < accounts[msg.sender].avaliableBalance) throw;\r\n        if(totalSupply + amount < totalSupply) throw;\r\n\r\n        totalSupply += amount;\r\n        accounts[msg.sender].avaliableBalance += amount;\r\n        Create(msg.sender, amount);\r\n        Transfer(0x0, msg.sender, amount);\r\n\r\n        lastBlockClaimed = block.number;\r\n    }\r\n\r\n    function setBlockReward(uint _blockReward){\r\n        if (msg.sender != curator) throw;\r\n\r\n        blockReward = _blockReward;\r\n    }\r\n    \r\n    function setClaimTreshold(uint _claimTreshold){\r\n        if (msg.sender != curator) throw;\r\n\r\n        claimTreshold = _claimTreshold;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultClaimPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockReward\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_amountsToClaim\",\"type\":\"uint256[]\"}],\"name\":\"fillHeldData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setDefaultClaimPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockdown\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCreationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_curatorAddress\",\"type\":\"address\"}],\"name\":\"setTokenCurator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHeldSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destructionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueNewCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"heldBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueNewHeldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyOldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimHeldBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setDestructionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimTreshold\",\"type\":\"uint256\"}],\"name\":\"setClaimTreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreateHeld\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SpaceCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9aee00eef367453c5e87dd1d2b911e4af321a5e883402a782b3ad5265a8ed5f8"}]}