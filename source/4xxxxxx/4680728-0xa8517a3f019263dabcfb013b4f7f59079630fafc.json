{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant public returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) tokenBalances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n  \r\n}\r\n\r\ncontract RevolutionCoin is BasicToken,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n   \r\n   string public constant name = \"R-evolutioncoin\";\r\n   string public constant symbol = \"RVL\";\r\n   uint256 public constant decimals = 18;\r\n   uint256 public preIcoBuyPrice = 222222222222222;   // per token the price is 2.2222*10^-4 eth, this price is equivalent in wei\r\n   uint256 public IcoPrice = 1000000000000000;\r\n   uint256 public bonusPhase1 = 30;\r\n   uint256 public bonusPhase2 = 20;\r\n   uint256 public bonusPhase3 = 10;\r\n   uint256 public TOKENS_SOLD;\r\n  \r\n   address public ethStore = 0xDd64EF0c8a41d8a17F09ce2279D79b3397184A10;\r\n   uint256 public constant INITIAL_SUPPLY = 100000000;\r\n   event Debug(string message, address addr, uint256 number);\r\n   event log(string message, uint256 number);\r\n   /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n   //TODO: Change the name of the constructor\r\n    function RevolutionCoin() public {\r\n        owner = ethStore;\r\n        totalSupply = INITIAL_SUPPLY;\r\n        tokenBalances[ethStore] = INITIAL_SUPPLY * (10 ** uint256(decimals));   //Since we divided the token into 10^18 parts\r\n        TOKENS_SOLD = 0;\r\n    }\r\n    \r\n    \r\n    // fallback function can be used to buy tokens\r\n      function () public payable {\r\n       // require(msg.sender != owner);   //owner should not be buying any tokens\r\n        buy(msg.sender);\r\n    }\r\n    \r\n    function calculateTokens(uint amt) internal returns (uint tokensYouCanGive, uint returnAmount) {\r\n        uint bonus = 0;\r\n        uint tokensRequired = 0;\r\n        uint tokensWithoutBonus = 0;\r\n        uint priceCharged = 0;\r\n        \r\n        //pre-ico phase\r\n        if (TOKENS_SOLD <4500000)\r\n        {\r\n            tokensRequired = amt.div(preIcoBuyPrice);\r\n            if (tokensRequired + TOKENS_SOLD > 4500000)\r\n            {\r\n                tokensYouCanGive = 4500000 - TOKENS_SOLD;\r\n                returnAmount = tokensRequired - tokensYouCanGive;\r\n                returnAmount = returnAmount.mul(preIcoBuyPrice);\r\n                log(\"Tokens being bought exceed the limit of pre-ico. Returning remaining amount\",returnAmount);\r\n            }\r\n            else\r\n            {\r\n                tokensYouCanGive = tokensRequired;\r\n                returnAmount = 0;\r\n            }\r\n            require (tokensYouCanGive + TOKENS_SOLD <= 4500000);\r\n        }\r\n        //ico phase 1 with 30% bonus\r\n        else if (TOKENS_SOLD >=4500000 && TOKENS_SOLD <24000000)\r\n        {\r\n             tokensRequired = amt.div(IcoPrice);\r\n             bonus = tokensRequired.mul(bonusPhase1);\r\n             bonus = bonus.div(100);\r\n             tokensRequired = tokensRequired.add(bonus);\r\n             if (tokensRequired + TOKENS_SOLD > 24000000)\r\n             {\r\n                tokensYouCanGive = 24000000 - TOKENS_SOLD;\r\n                tokensWithoutBonus = tokensYouCanGive.mul(10);\r\n                tokensWithoutBonus = tokensWithoutBonus.div(13);\r\n                \r\n                priceCharged = tokensWithoutBonus.mul(IcoPrice); \r\n                returnAmount = amt - priceCharged;\r\n                \r\n                log(\"Tokens being bought exceed the limit of ico phase 1. Returning remaining amount\",returnAmount);\r\n             }\r\n             else\r\n            {\r\n                tokensYouCanGive = tokensRequired;\r\n                returnAmount = 0;\r\n            }\r\n            require (tokensYouCanGive + TOKENS_SOLD <= 24000000);\r\n        }\r\n        //ico phase 2 with 20% bonus\r\n        if (TOKENS_SOLD >=24000000 && TOKENS_SOLD <42000000)\r\n        {\r\n             tokensRequired = amt.div(IcoPrice);\r\n             bonus = tokensRequired.mul(bonusPhase2);\r\n             bonus = bonus.div(100);\r\n             tokensRequired = tokensRequired.add(bonus);\r\n             if (tokensRequired + TOKENS_SOLD > 42000000)\r\n             {\r\n                tokensYouCanGive = 42000000 - TOKENS_SOLD;\r\n                tokensWithoutBonus = tokensYouCanGive.mul(10);\r\n                tokensWithoutBonus = tokensWithoutBonus.div(13);\r\n                \r\n                priceCharged = tokensWithoutBonus.mul(IcoPrice); \r\n                returnAmount = amt - priceCharged;\r\n                log(\"Tokens being bought exceed the limit of ico phase 2. Returning remaining amount\",returnAmount);\r\n             }\r\n              else\r\n            {\r\n                tokensYouCanGive = tokensRequired;\r\n                returnAmount = 0;\r\n            }\r\n             require (tokensYouCanGive + TOKENS_SOLD <= 42000000);\r\n        }\r\n        //ico phase 3 with 10% bonus\r\n        if (TOKENS_SOLD >=42000000 && TOKENS_SOLD <58500000)\r\n        {\r\n             tokensRequired = amt.div(IcoPrice);\r\n             bonus = tokensRequired.mul(bonusPhase3);\r\n             bonus = bonus.div(100);\r\n             tokensRequired = tokensRequired.add(bonus);\r\n              if (tokensRequired + TOKENS_SOLD > 58500000)\r\n             {\r\n                tokensYouCanGive = 58500000 - TOKENS_SOLD;\r\n                tokensWithoutBonus = tokensYouCanGive.mul(10);\r\n                tokensWithoutBonus = tokensWithoutBonus.div(13);\r\n                \r\n                priceCharged = tokensWithoutBonus.mul(IcoPrice); \r\n                returnAmount = amt - priceCharged;\r\n                log(\"Tokens being bought exceed the limit of ico phase 3. Returning remaining amount\",returnAmount);\r\n             }\r\n            else\r\n            {\r\n                tokensYouCanGive = tokensRequired;\r\n                returnAmount = 0;\r\n            }\r\n             require (tokensYouCanGive + TOKENS_SOLD <= 58500000);\r\n        }\r\n        if (TOKENS_SOLD == 58500000)\r\n        {\r\n            log(\"ICO has ended. All tokens sold.\", 58500000);\r\n            tokensYouCanGive = 0;\r\n            returnAmount = amt;\r\n        }\r\n        require(TOKENS_SOLD <=58500000);\r\n    }\r\n    \r\n    function buy(address beneficiary) payable public returns (uint tokens) {\r\n        uint paymentToGiveBack = 0;\r\n        (tokens,paymentToGiveBack) = calculateTokens(msg.value);\r\n        \r\n        TOKENS_SOLD += tokens;\r\n        tokens = tokens * (10 ** uint256(decimals));\r\n        \r\n        require(tokenBalances[owner] >= tokens);               // checks if it has enough to sell\r\n        \r\n        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(tokens);                  // adds the amount to buyer's balance\r\n        tokenBalances[owner] = tokenBalances[owner].sub(tokens);                        // subtracts amount from seller's balance\r\n        \r\n        Transfer(owner, beneficiary, tokens);               // execute an event reflecting the change\r\n    \r\n        if (paymentToGiveBack >0)\r\n        {\r\n            beneficiary.transfer(paymentToGiveBack);\r\n        }\r\n    \r\n        ethStore.transfer(msg.value - paymentToGiveBack);                       //send the eth to the address where eth should be collected\r\n        \r\n        return tokens;                                    // ends function and returns\r\n    }\r\n    \r\n   function getTokenBalance(address yourAddress) constant public returns (uint256 balance) {\r\n        return tokenBalances[yourAddress].div (10**decimals); // show token balance in full tokens not part\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"yourAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RevolutionCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9100b7089a1ef2f5b6f452fcfa21bc082ccf59858cbcf09781b3f6ade75f80e5"}]}