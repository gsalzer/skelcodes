{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n\r\n*/\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title UintUtil\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @dev uint utility functions\r\nlibrary UintLib {\r\n    using SafeMath  for uint;\r\n\r\n    function tolerantSub(uint x, uint y) constant returns (uint z) {\r\n        if (x >= y) z = x - y;\r\n        else z = 0;\r\n    }\r\n\r\n    function next(uint i, uint size) internal constant returns (uint) {\r\n        return (i + 1) % size;\r\n    }\r\n\r\n    function prev(uint i, uint size) internal constant returns (uint) {\r\n        return (i + size - 1) % size;\r\n    }\r\n\r\n    /// @dev calculate the square of Coefficient of Variation (CV)\r\n    /// https://en.wikipedia.org/wiki/Coefficient_of_variation\r\n    function cvsquare(\r\n        uint[] arr,\r\n        uint scale\r\n        )\r\n        internal\r\n        constant\r\n        returns (uint) {\r\n\r\n        uint len = arr.length;\r\n        require(len > 1);\r\n        require(scale > 0);\r\n\r\n        uint avg = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n            avg += arr[i];\r\n        }\r\n\r\n        avg = avg.div(len);\r\n\r\n        if (avg == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint cvs = 0;\r\n        for (i = 0; i < len; i++) {\r\n            uint sub = 0;\r\n            if (arr[i] > avg) {\r\n                sub = arr[i] - avg;\r\n            } else {\r\n                sub = avg - arr[i];\r\n            }\r\n            cvs += sub.mul(sub);\r\n        }\r\n        return cvs\r\n            .mul(scale)\r\n            .div(avg)\r\n            .mul(scale)\r\n            .div(avg)\r\n            .div(len - 1);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"tolerantSub\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UintLib","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://231ca03fb9a2a7abd98d9fbe7ee4c3a7118146b2e7ba2aa8938e2a503d2d83ec"}]}