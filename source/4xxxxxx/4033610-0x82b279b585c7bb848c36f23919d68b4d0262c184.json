{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\nCoinDash Buyer\r\n========================\r\n\r\nBuys CoinDash tokens from the crowdsale on your behalf.\r\nAuthor: /u/Cintix\r\n\r\n*/\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract CoinDashBuyer {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Bounty for executing buy.\r\n  uint256 public bounty;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record the time the contract bought the tokens.\r\n  uint256 public time_bought;\r\n  // Emergency kill switch in case a critical bug is found.\r\n  bool public kill_switch;\r\n  \r\n  // Token Wei received per ETH Wei contributed in this sale\r\n  uint256 tokens_per_eth = 6093;\r\n  // SHA3 hash of kill switch password.\r\n  bytes32 password_hash = 0x1b266c9bad3a46ed40bf43471d89b83712ed06c2250887c457f5f21f17b2eb97;\r\n  // Earliest time contract is allowed to buy into the crowdsale.\r\n  uint256 earliest_buy_time = 1500294600;\r\n  // The developer address.\r\n  address developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;\r\n  // The crowdsale address.  Settable by the developer.\r\n  address public sale;\r\n  // The token address.  Settable by the developer.\r\n  ERC20 public token;\r\n  \r\n  // Allows the developer to set the crowdsale and token addresses.\r\n  function set_addresses(address _sale, address _token) {\r\n    // Only allow the developer to set the sale and token addresses.\r\n    if (msg.sender != developer) throw;\r\n    // Only allow setting the addresses once.\r\n    if (sale != 0x0) throw;\r\n    // Set the crowdsale and token addresses.\r\n    sale = _sale;\r\n    token = ERC20(_token);\r\n  }\r\n  \r\n  // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\r\n  function activate_kill_switch(string password) {\r\n    // Only activate the kill switch if the sender is the developer or the password is correct.\r\n    if (msg.sender != developer && sha3(password) != password_hash) throw;\r\n    // Irreversibly activate the kill switch.\r\n    kill_switch = true;\r\n  }\r\n  \r\n  // Withdraws all ETH deposited or tokens purchased by the user.\r\n  // \"internal\" means this function is not externally callable.\r\n  function withdraw(address user, bool has_fee) internal {\r\n    // If called before the ICO, cancel user's participation in the sale.\r\n    if (!bought_tokens) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint256 eth_to_withdraw = balances[user];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[user] = 0;\r\n      // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n      user.transfer(eth_to_withdraw);\r\n    }\r\n    // Withdraw the user's tokens if the contract has already purchased them.\r\n    else {\r\n      // Store the user's token balance in a temporary variable.\r\n      uint256 tokens_to_withdraw = balances[user] * tokens_per_eth;\r\n      // Update the user's balance prior to sending to prevent recursive call.\r\n      balances[user] = 0;\r\n      // No fee if the user withdraws their own funds manually.\r\n      uint256 fee = 0;\r\n      // 1% fee for automatic withdrawals.\r\n      if (has_fee) {\r\n        fee = tokens_to_withdraw / 100;\r\n        // Send the fee to the developer.\r\n        if(!token.transfer(developer, fee)) throw;\r\n      }\r\n      // Send the funds.  Throws on failure to prevent loss of funds.\r\n      if(!token.transfer(user, tokens_to_withdraw - fee)) throw;\r\n    }\r\n  }\r\n  \r\n  // Automatically withdraws on users' behalves (less a 1% fee on tokens).\r\n  function auto_withdraw(address user){\r\n    // Only allow automatic withdrawals after users have had a chance to manually withdraw.\r\n    if (!bought_tokens || now < time_bought + 1 hours) throw;\r\n    // Withdraw the user's funds for them.\r\n    withdraw(user, true);\r\n  }\r\n  \r\n  // Allows developer to add ETH to the buy execution bounty.\r\n  function add_to_bounty() payable {\r\n    // Only allow the developer to contribute to the buy execution bounty.\r\n    if (msg.sender != developer) throw;\r\n    // Disallow adding to bounty if kill switch is active.\r\n    if (kill_switch) throw;\r\n    // Disallow adding to the bounty if contract has already bought the tokens.\r\n    if (bought_tokens) throw;\r\n    // Update bounty to include received amount.\r\n    bounty += msg.value;\r\n  }\r\n  \r\n  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\r\n  function claim_bounty(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    if (bought_tokens) return;\r\n    // Short circuit to save gas if kill switch is active.\r\n    if (kill_switch) return;\r\n    // Short circuit to save gas if the earliest buy time hasn't been reached.\r\n    if (now < earliest_buy_time) return;\r\n    // Disallow buying in if the developer hasn't set the sale address yet.\r\n    if (sale == 0x0) throw;\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the time the contract bought the tokens.\r\n    time_bought = now;\r\n    // Transfer all the funds (less the bounty) to the crowdsale address\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    if(!sale.call.value(this.balance - bounty)()) throw;\r\n    // Send the caller their bounty for buying tokens for the contract.\r\n    msg.sender.transfer(bounty);\r\n  }\r\n  \r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Treat near-zero ETH transactions as withdrawal requests.\r\n    if (msg.value <= 1 finney) {\r\n      // No fee on manual withdrawals.\r\n      withdraw(msg.sender, false);\r\n    }\r\n    // Deposit the user's funds for use in purchasing tokens.\r\n    else {\r\n      // Disallow deposits if kill switch is active.\r\n      if (kill_switch) throw;\r\n      // Only allow deposits if the contract hasn't already purchased the tokens.\r\n      if (bought_tokens) throw;\r\n      // Update records of deposited ETH to include the received amount.\r\n      balances[msg.sender] += msg.value;\r\n    }\r\n  }\r\n  \r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // Delegate to the helper function.\r\n    default_helper();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim_bounty\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_addresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"default_helper\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add_to_bounty\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time_bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"auto_withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"CoinDashBuyer","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ba47fd94896cb8ca9554ad82f75660ec206474c14def71667049ca5689d8c2b"}]}