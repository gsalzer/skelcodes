{"status":"1","message":"OK","result":[{"SourceCode":"/// @title Cryptocurrency  of the Ravensburg-Weingarten University of Applied Sciences ///(German: Hochschule Ravensburg-Weingarten) \r\n///@author Walther,Dominik \r\n\r\npragma solidity ^0.4.13; contract owned { address public owner;\r\n  function owned() {\r\n      owner = msg.sender;\r\n  }\r\n  modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n}\r\n/// receive other cryptocurrency\r\ncontract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData); }\r\n\r\n/// the public variables of the HRWtoken\r\ncontract HRWtoken is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice;\r\n///@notice create an array with all adresses and associated balances of the cryptocurrency\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n ///@notice generate a event on the blockchain to show transfer information \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n///@notice initialization of the contract and distribution of tokes to the creater\r\n  function HRWtoken(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol,\r\naddress centralMinter\r\n      ) {\r\nif(centralMinter != 0 ) owner = centralMinter;\r\n      balanceOf[msg.sender] = initialSupply;       \r\n      totalSupply = initialSupply;                        \r\n      name = tokenName;                                   \r\n      symbol = tokenSymbol;                               \r\n      decimals = decimalUnits;                            \r\n  }\r\n\r\n  ///@notice only the contract can operate this internal funktion\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);           \r\n      require (balanceOf[_from] >= _value);            \r\n      require (balanceOf[_to] + _value > balanceOf[_to]); \r\n      balanceOf[_from] -= _value;                         \r\n      balanceOf[_to] += _value;                            \r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice transfer to account (_to) any value (_value)\r\n  /// @param _to The address of the reciver\r\n  /// @param _value value units from the cryptocurrency\r\n  function transfer(address _to, uint256 _value) {\r\n      _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /// @notice to dend the tokens the sender need the allowance \r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value value units to send\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      require (_value < allowance[_from][msg.sender]);     \r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /// @notice the spender can only transfer the value units he own\r\n  /// @param _spender the address authorized to transfer\r\n  /// @param _value the max amount they can spend\r\n  function approve(address _spender, uint256 _value)\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      return true;\r\n  }\r\n\r\n/// @notice funktion contains approve with the addition to follow the contract ///about the allowance\r\n  /// @param _spender the address authorized to spend\r\n  /// @param _value the max amount they can spend\r\n  /// @param _extraData some extra information to send to the approved contract\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n          return true;\r\n      }\r\n  }        \r\n/// @notice Create new token in addition to the initalsupply and send to target adress\r\n  /// @param target address to receive the tokens\r\n  /// @param mintedAmount ist the generated amount send to specified adress\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n      balanceOf[target] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, this, mintedAmount);\r\n      Transfer(this, target, mintedAmount);\r\n  }\r\n  /// @notice participants of the Ethereum Network can buy or sell this token in ///exchange to Ether\r\n  /// @param newSellPrice price the users can sell to the contract\r\n  /// @param newBuyPrice price users can buy from the contract\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n      sellPrice = newSellPrice;\r\n      buyPrice = newBuyPrice;\r\n  }\r\n\r\n/// @notice The Ether send to the contract exchange by BuyPrice and send back  ///HRW Tokens\r\n  function buy() payable {\r\n      uint amount = msg.value / buyPrice;               \r\n      _transfer(this, msg.sender, amount);              \r\n  }\r\n\r\n/// @notice the HRWToken send to the contract and exchange by SellPrice and ///send ether back\r\n  /// @param amount HRW Token to sale\r\n  function sell(uint256 amount) {\r\n      require(this.balance >= amount * sellPrice);      \r\n      _transfer(msg.sender, this, amount);              \r\n      msg.sender.transfer(amount * sellPrice);          \r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HRWtoken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000551a5368bd772c957ee0bd5e7973346344513180000000000000000000000000000000000000000000000000000000000000000c5265736561726368436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034852570000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://873f23140c993b5d81d21598ceedb7a2b62df7d6c011e4748bea47677f24c237"}]}