{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Donatex {\r\n\r\n    struct Donation {\r\n        address owner;\r\n        uint donation;\r\n        bytes32 name;\r\n        bytes text;\r\n    }\r\n\r\n    struct DonationBox {\r\n        address owner;\r\n        uint minDonation;\r\n        uint numDonations;\r\n        uint totalDonations;\r\n        bool isValue;\r\n    }\r\n\r\n    mapping (bytes32 => Donation[]) public donations;\r\n    mapping (bytes32 => DonationBox) public donationBoxes;\r\n\r\n    /**\r\n    * @dev Throws if called by any address other than the one that owns the ID\r\n    */\r\n    modifier onlyOwner(bytes32 id) {\r\n        require(msg.sender == donationBoxes[id].owner);\r\n        _;\r\n    }\r\n\r\n    function Donatex() {\r\n        \r\n    }\r\n\r\n    function claimId(bytes32 id, uint minDonation) public {\r\n        require(!donationBoxes[id].isValue);\r\n        donationBoxes[id] = DonationBox(msg.sender, minDonation, 0, 0, true);\r\n    }\r\n\r\n    function donate(bytes32 id, bytes32 name, bytes text) payable public {\r\n        require(donationBoxes[id].isValue);\r\n        DonationBox storage donationBox = donationBoxes[id];\r\n        require(msg.value >= donationBox.minDonation);\r\n        donations[id].push(Donation(msg.sender, msg.value, name, text));\r\n        donationBox.totalDonations = SafeMath.add(donationBox.totalDonations, msg.value);\r\n        donationBox.numDonations = SafeMath.add(donationBox.numDonations, 1);\r\n    }\r\n\r\n    function transferDonations(bytes32 id, address destination) onlyOwner(id) {\r\n        require(donationBoxes[id].isValue);\r\n        DonationBox storage donationBox = donationBoxes[id];\r\n        require(donationBox.totalDonations > 0);\r\n        require(destination.send(donationBox.totalDonations));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"text\",\"type\":\"bytes\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"minDonation\",\"type\":\"uint256\"}],\"name\":\"claimId\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"transferDonations\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"donation\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"text\",\"type\":\"bytes\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"donationBoxes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"minDonation\",\"type\":\"uint256\"},{\"name\":\"numDonations\",\"type\":\"uint256\"},{\"name\":\"totalDonations\",\"type\":\"uint256\"},{\"name\":\"isValue\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"Donatex","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b713f196f2c141215a5a168bd06d68591abadb736544aa261668f941a1582d70"}]}