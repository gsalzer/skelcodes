{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Slot Ticket token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n \r\ncontract SlotTicket is StandardToken, Ownable {\r\n\r\n  string public name = \"Slot Ticket\";\r\n  uint8 public decimals = 0;\r\n  string public symbol = \"SLOT\";\r\n  string public version = \"0.1\";\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount); // so it is displayed properly on EtherScan\r\n    return true;\r\n  }\r\n\r\nfunction destroy() onlyOwner {\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}\r\n\r\ncontract Slot is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // this token is like a receipt for the ticket, it wont affect the prize distribution\r\n    SlotTicket public token;\r\n\r\n    // every participant has an account index, the winners are picked from here\r\n    // all winners are picked in order from the single random int \r\n    // needs to be cleared after every game\r\n    mapping (uint => mapping (uint => address)) participants; // game number => counter => address\r\n    uint256[8] prizes = [4 ether, \r\n                        2 ether,\r\n                        1 ether, \r\n                        500 finney, \r\n                        500 finney, \r\n                        500 finney, \r\n                        500 finney, \r\n                        500 finney];\r\n    \r\n    uint8   constant SIZE = 100; // size of the lottery\r\n    uint32  constant JACKPOT_SIZE = 1000000; // one in a million\r\n    uint32  constant INACTIVITY = 160000; // block after which refunds can be claimed\r\n    uint256 constant public PRICE = 100 finney;\r\n    \r\n    uint256 public jackpotAmount;\r\n    uint256 public gameNumber;\r\n    uint256 public gameStarted;\r\n    bool    public undestroyable;\r\n    address wallet;\r\n    uint256 counter;\r\n\r\n    event ParticipantAdded(address indexed _participant, uint256 indexed _game, uint256 indexed _number);\r\n    event PrizeAwarded(uint256 indexed _game , address indexed _winner, uint256 indexed _amount);\r\n    event JackpotAwarded(uint256 indexed _game, address indexed _winner, uint256 indexed _amount);\r\n    event GameRefunded(uint256 _game);\r\n\r\n    function Slot(address _wallet) payable {\r\n        token = new SlotTicket();\r\n        wallet = _wallet;\r\n\r\n        jackpotAmount = msg.value;\r\n        gameNumber = 0;\r\n        counter = 0;\r\n        gameStarted = block.number;\r\n        undestroyable = false;\r\n    }\r\n\r\n    function() payable {\r\n        // fallback function to buy tickets\r\n        buyTicketsFor(msg.sender);\r\n    }\r\n\r\n    function buyTicketsFor(address beneficiary) whenNotPaused() payable {\r\n        require(beneficiary != 0x0);\r\n        require(msg.value >= PRICE);\r\n\r\n        // calculate number of tickets, issue tokens and add participant\r\n        // every (PRICE) buys a ticket, the rest is returned\r\n        uint256 change = msg.value%PRICE;\r\n        uint256 numberOfTickets = msg.value.sub(change).div(PRICE);\r\n        token.mint(beneficiary, numberOfTickets);\r\n        addParticipant(beneficiary, numberOfTickets);\r\n\r\n        // Return change to msg.sender\r\n        msg.sender.transfer(change);\r\n    }\r\n\r\n    // private functions\r\n\r\n    function addParticipant(address _participant, uint256 _numberOfTickets) private {\r\n        // if number of tickets exceeds the size of the game, tickets are added to next game\r\n\r\n        for (uint256 i = 0; i < _numberOfTickets; i++) {\r\n            // using gameNumber instead of counter/SIZE since games can be cancelled\r\n            participants[gameNumber][counter%SIZE] = _participant; \r\n            ParticipantAdded(_participant, gameNumber, counter%SIZE);\r\n\r\n            // msg.sender triggers the drawing of lots\r\n            if (++counter%SIZE == 0) {\r\n                awardPrizes();\r\n                // Split the rest, increase game number\r\n                distributeRemaining();\r\n                increaseGame();\r\n            }\r\n            // loop continues if there are more tickets\r\n        }\r\n    }\r\n    \r\n    function rand(uint32 _size) constant private returns (uint256 randomNumber) {\r\n      // Providing random numbers within a deterministic system is, naturally, an impossible task.\r\n      // However, we can approximate with pseudo-random numbers by utilising data which is generally unknowable\r\n      // at the time of transacting. Such data might include the block’s hash.\r\n      // The last blockhash used should be random enough. Adding the rest of these deterministic factors doesn't change much.\r\n\r\n        return uint256(keccak256(block.blockhash(block.number-1), block.blockhash(block.number-100)))%_size;\r\n    }\r\n\r\n    function awardPrizes() private {\r\n        uint256 winnerIndex = rand(SIZE);\r\n        // hash result of two digit number (index) with 4 leading zeroes will win\r\n        bool jackpotWon = winnerIndex == rand(JACKPOT_SIZE); \r\n\r\n        // loop throught the prizes \r\n        for (uint8 i = 0; i < prizes.length; i++) {\r\n            if (jackpotWon && i==0) {\r\n                distributeJackpot(winnerIndex);\r\n            }\r\n            \r\n            participants[gameNumber][winnerIndex%SIZE].transfer(prizes[i]); // msg.sender pays the gas, he's refunded later, % to wrap around\r\n            PrizeAwarded(gameNumber, participants[gameNumber][winnerIndex%SIZE], prizes[i]);\r\n\r\n            // increment index to the next winner to receive the next prize\r\n            winnerIndex++;\r\n        }\r\n    }\r\n\r\n    function distributeJackpot(uint256 _winnerIndex) private {\r\n        participants[gameNumber][_winnerIndex].transfer(jackpotAmount);\r\n        JackpotAwarded(gameNumber,  participants[gameNumber][_winnerIndex], jackpotAmount);\r\n        jackpotAmount = 0; // later on in the code sequence funds will be added\r\n    }\r\n\r\n    function distributeRemaining() private {\r\n        jackpotAmount = jackpotAmount.add(250 finney);   // add to jackpot\r\n        wallet.transfer(249 finney);                     // *cash register sound*\r\n        msg.sender.transfer(1 finney);                   // repay gas to msg.sender\r\n    }\r\n\r\n    function increaseGame() private {\r\n        gameNumber++;\r\n        gameStarted = block.number;\r\n    }\r\n\r\n    // public functions\r\n\r\n    function refundGameAfterLongInactivity() {\r\n        require(block.number.sub(gameStarted) >= INACTIVITY);\r\n        require(counter%SIZE != 0); // nothing to refund\r\n        // refunds for everybody can be requested after the game has gone (INACTIVITY) blocks without a conclusion\r\n\r\n        for (uint8 i = 0; i < counter%SIZE; i++) { // not counter.size, but modulus of SIZE\r\n            participants[gameNumber][i].transfer(PRICE);\r\n        }\r\n\r\n        // reduce the counter\r\n        counter -= counter%SIZE;\r\n        GameRefunded(gameNumber);\r\n        increaseGame();\r\n    }\r\n\r\n    function destroy() onlyOwner {\r\n        require(!undestroyable);\r\n        // Transfer Eth to owner and terminate contract\r\n        // unfair, since we could abscond with the jackpot, so it is disabled in production\r\n        token.destroy();\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function changeWallet(address _newWallet) onlyOwner {\r\n        require(_newWallet != 0x0);\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    function makeUndestroyable() onlyOwner {\r\n        undestroyable = true;\r\n        // can't be reversed, jackpot only claimable by actual win\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"undestroyable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeUndestroyable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTicketsFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundGameAfterLongInactivity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"ParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PrizeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"JackpotAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"GameRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Slot","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000A5908bB2bfb745323c016fAF2e6A8546f26a84","Library":"","SwarmSource":"bzzr://ccc7d8174efd6d2b37cb19bd5df90ad8066761ef0f987a2d3424786050e4f274"}]}