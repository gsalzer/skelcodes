{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary Utils {\r\n\r\n    /**\r\n    @dev Helper function, determines if a given address is an account or a contract.\r\n    @return True if address is a contract, false otherwise\r\n     */\r\n    function isContract(address _addr) constant internal returns (bool) {\r\n        uint size;\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n\r\n        return (_addr == 0) ? false : size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\n/**\r\n@title Burnable\r\n@dev Burnable custom interface, should allow external contracts to burn tokens on certain conditions.\r\n */\r\ncontract Burnable {\r\n\r\n    event Burn(address who, uint256 amount);\r\n\r\n    modifier onlyBurners {\r\n        require(isBurner(msg.sender));\r\n        _;\r\n    }\r\n    function burn(address target, uint256 amount) external onlyBurners returns (bool);\r\n    function setBurner(address who, bool auth) returns (bool);\r\n    function isBurner(address who) constant returns (bool);\r\n}\r\n\r\n/**\r\n@title Lockable\r\n@dev Lockable custom interface, should allow external contracts to lock accounts on certain conditions.\r\n */\r\ncontract Lockable {\r\n\r\n    uint256 public lockExpiration;\r\n\r\n    /**\r\n    @dev Constructor\r\n    @param _lockExpiration lock expiration datetime in UNIX time\r\n     */\r\n    function Lockable(uint256 _lockExpiration) {\r\n        lockExpiration = _lockExpiration;\r\n    }\r\n\r\n    function isLocked(address who) constant returns (bool);\r\n}\r\n\r\n/**\r\n@title ERC20 interface\r\n@dev Standard ERC20 Interface.\r\n*/\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n@title LWFToken\r\n@dev ERC20 standard.\r\n@dev Extra features: Burnable and Lockable under certain conditions.\r\n@dev contract owner is set to msg.sender, lockExpiration for devs set to: 1535760000 || Saturday, 01-Sep-18 00:00:00 UTC\r\n */\r\ncontract LWFToken is ERC20, Burnable, Lockable(1535760000), Claimable {\r\nusing SafeMath for uint256;\r\n\r\n    // Snapshot of Account balance at specific block\r\n    struct Snapshot {\r\n        uint256 block;\r\n        uint256 balance;\r\n    }\r\n\r\n    struct Account {\r\n        uint256 balance;\r\n        Snapshot[] history; // history of snapshots\r\n        mapping(address => uint256) allowed;\r\n        bool isSet;\r\n    }\r\n\r\n    address[] accountsList;\r\n\r\n    mapping(address => Account) accounts;\r\n\r\n    bool public maintenance;\r\n\r\n    // BURN SETTINGS\r\n    mapping(address => bool) burners; // contracts authorized to block tokens\r\n    bool public burnAllowed;\r\n\r\n    // LOCK SETTINGS\r\n    mapping(address => bool) locked; //locked users addresses\r\n\r\n    // COSMETIC THINGS\r\n    string public name = \"LWF\";\r\n    string public symbol = \"LWF\";\r\n    string public version = \"release-1.1\";\r\n\r\n    uint256 public decimals = 2;\r\n\r\n    /**\r\n    @dev Throws if token is under maintenance.\r\n     */\r\n    modifier disabledInMaintenance() {\r\n        if (maintenance)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @dev Throws if token is not under maintenance.\r\n     */\r\n    modifier onlyUnderMaintenance() {\r\n        if (!maintenance)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @dev Registers the recipient account when tokens are sent to an unregistered account.\r\n    @param _recipient the recipient of the transfer\r\n     */\r\n    modifier trackNewUsers (address _recipient) {\r\n        if (!accounts[_recipient].isSet) {\r\n            accounts[_recipient].isSet = true;\r\n            accountsList.push(_recipient);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @dev The constructor sets the initial balance to 30 million tokens.\r\n    @dev 27 million assigned to the contract owner.\r\n    @dev 3 million reserved and locked. (except bounty)\r\n    @dev Holders history is updated for data integrity.\r\n    @dev Burn functionality are enabled by default.\r\n     */\r\n    function LWFToken() {\r\n        totalSupply = 30 * (10**6) * (10**decimals);\r\n\r\n        burnAllowed = true;\r\n        maintenance = false;\r\n\r\n        require(_setup(0x927Dc9F1520CA2237638D0D3c6910c14D9a285A8, 2700000000, false));\r\n\r\n        require(_setup(0x7AE7155fF280D5da523CDDe3855b212A8381F9E8, 30000000, false));\r\n        require(_setup(0x796d507A80B13c455c2C1D121eDE4bccca59224C, 263000000, true));\r\n\r\n        require(_setup(0xD77d620EC9774295ad8263cBc549789EE39C0BC0, 1000000, true));\r\n        require(_setup(0x574B35eC5650BE0aC217af9AFCfe1c7a3Ff0BecD, 1000000, true));\r\n        require(_setup(0x7c5a61f34513965AA8EC090011721a0b0A9d4D3a, 1000000, true));\r\n        require(_setup(0x0cDBb03DD2E8226A6c3a54081E93750B4f85DB92, 1000000, true));\r\n        require(_setup(0x03b6cF4A69fF306B3df9B9CeDB6Dc4ED8803cBA7, 1000000, true));\r\n        require(_setup(0xe2f7A1218E5d4a362D1bee8d2eda2cd285aAE87A, 1000000, true));\r\n        require(_setup(0xAcceDE2eFD2765520952B7Cb70406A43FC17e4fb, 1000000, true));\r\n    }\r\n\r\n    /**\r\n    @return accountsList length\r\n     */\r\n    function accountsListLength() external constant returns (uint256) {\r\n        return accountsList.length;\r\n    }\r\n\r\n    /**\r\n    @dev Gets the address of any account in 'accountList'.\r\n    @param _index The index to query the address of\r\n    @return An address pointing to a registered account\r\n    */\r\n    function getAccountAddress(uint256 _index) external constant returns (address) {\r\n        return accountsList[_index];\r\n    }\r\n\r\n    /**\r\n    @dev Checks if an accounts is registered.\r\n    @param _address The address to check\r\n    @return A bool set true if the account is registered, false otherwise\r\n     */\r\n    function isSet(address _address) external constant returns (bool) {\r\n        return accounts[_address].isSet;\r\n    }\r\n\r\n    /**\r\n    @dev Gets the balance of the specified address at the first block minor or equal the specified block\r\n    @param _owner The address to query the the balance of\r\n    @param _block The block\r\n    @return An uint256 representing the amount owned by the passed address at the specified block.\r\n    */\r\n    function balanceAt(address _owner, uint256 _block) external constant returns (uint256 balance) {\r\n        uint256 i = accounts[_owner].history.length;\r\n        do {\r\n            i--;\r\n        } while (i > 0 && accounts[_owner].history[i].block > _block);\r\n        uint256 matchingBlock = accounts[_owner].history[i].block;\r\n        uint256 matchingBalance = accounts[_owner].history[i].balance;\r\n        return (i == 0 && matchingBlock > _block) ? 0 : matchingBalance;\r\n    }\r\n\r\n    /**\r\n    @dev Authorized contracts can burn tokens.\r\n    @param _amount Quantity of tokens to burn\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function burn(address _address, uint256 _amount) onlyBurners disabledInMaintenance external returns (bool) {\r\n        require(burnAllowed);\r\n\r\n        var _balance = accounts[_address].balance;\r\n        accounts[_address].balance = _balance.sub(_amount);\r\n\r\n        // update history with recent burn\r\n        require(_updateHistory(_address));\r\n\r\n        totalSupply = totalSupply.sub(_amount);\r\n        Burn(_address,_amount);\r\n        Transfer(_address, 0x0, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Send a specified amount of tokens from sender address to '_recipient'.\r\n    @param _recipient address receiving tokens\r\n    @param _amount the amount of tokens to be transferred\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function transfer(address _recipient, uint256 _amount) returns (bool) {\r\n        require(!isLocked(msg.sender));\r\n        return _transfer(msg.sender,_recipient,_amount);\r\n    }\r\n\r\n    /**\r\n    @dev Transfer tokens from one address to another\r\n    @param _from address The address which you want to send tokens from\r\n    @param _to address The address which you want to transfer to\r\n    @param _amount the amount of tokens to be transferred\r\n    @return A bool set true if successful, false otherwise\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool) {\r\n        require(!isLocked(_from));\r\n        require(_to != address(0));\r\n\r\n        var _allowance = accounts[_from].allowed[msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _amount) will already throw if this condition is not met\r\n        // require (_amount <= _allowance);\r\n        accounts[_from].allowed[msg.sender] = _allowance.sub(_amount);\r\n        return _transfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    @param _spender The address which will spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n        //  To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition\r\n        require((_value == 0) || (accounts[msg.sender].allowed[_spender] == 0));\r\n\r\n        accounts[msg.sender].allowed[_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Approve should be called when allowed[_spender] == 0. To increment\r\n         allowed value is better to use this function to avoid 2 calls (and wait until\r\n         the first transaction is mined)\r\n    @param _spender The address which will spend the funds\r\n    @param _addedValue The value which will be added from the allowed balance\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\r\n        uint256 _allowance = accounts[msg.sender].allowed[_spender];\r\n        accounts[msg.sender].allowed[_spender] = _allowance.add(_addedValue);\r\n        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Approve should be called when allowed[_spender] == 0. To decrement\r\n         allowed value is better to use this function to avoid 2 calls (and wait until\r\n         the first transaction is mined)\r\n    @param _spender The address which will spend the funds\r\n    @param _subtractedValue The value which will be subtracted from the allowed balance\r\n    @return A bool set true if successful, false otherwise\r\n    */\r\n    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\r\n        uint oldValue = accounts[msg.sender].allowed[_spender];\r\n        accounts[msg.sender].allowed[_spender] = (_subtractedValue > oldValue) ? 0 : oldValue.sub(_subtractedValue);\r\n        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Sets a contract authorization to burn tokens.\r\n    @param _address The address to authorize/deauthorize\r\n    @param _auth True for authorization, false otherwise\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function setBurner(address _address, bool _auth) onlyOwner returns (bool) {\r\n        require(burnAllowed);\r\n        assert(Utils.isContract(_address));\r\n        burners[_address] = _auth;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Checks if the provided contract can burn tokens.\r\n    @param _address The address to check\r\n    @return A bool set true if authorized, false otherwise\r\n     */\r\n    function isBurner(address _address) constant returns (bool) {\r\n        return burnAllowed ? burners[_address] : false;\r\n    }\r\n\r\n    /**\r\n    @dev Checks if the token owned by the provided address are locked.\r\n    @param _address The address to check\r\n    @return A bool set true if locked, false otherwise\r\n     */\r\n    function isLocked(address _address) constant returns (bool) {\r\n        return now >= lockExpiration ? false : locked[_address];\r\n    }\r\n\r\n    /**\r\n    @dev Function permanently disabling 'burn()' and 'setBurner()'.\r\n    @dev Already burned tokens are not recoverable.\r\n    @dev Effects of this transaction are irreversible.\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function burnFeatureDeactivation() onlyOwner returns (bool) {\r\n        require(burnAllowed);\r\n        burnAllowed = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Gets the balance of the specified address.\r\n    @param _owner The address to query the the balance of.\r\n    @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return accounts[_owner].balance;\r\n    }\r\n\r\n    /**\r\n    @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    @param _owner address The address which owns the funds.\r\n    @param _spender address The address which will spend the funds.\r\n    @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return accounts[_owner].allowed[_spender];\r\n    }\r\n\r\n    /**\r\n    @dev Sets the maintenance mode. During maintenance operations modifying balances are frozen.\r\n    @param _state true if maintenance is on, false otherwise\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function setMaintenance(bool _state) onlyOwner returns (bool) {\r\n        maintenance = _state;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Maintenance function, if accountsList grows too long back end can safely clean unused accounts\r\n        and push the renewed list into the contract.\r\n    @dev Accounts removed from the list must be deactivated with maintenanceDeactivateUser(_user)\r\n    @param _accountsList A list containing the accounts' addresses\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function maintenanceSetAccountsList(address[] _accountsList) onlyOwner onlyUnderMaintenance returns (bool) {\r\n        accountsList = _accountsList;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Maintenance function reserved to back end, removes an account from the list.\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function maintenanceDeactivateUser(address _user) onlyOwner onlyUnderMaintenance returns (bool) {\r\n        accounts[_user].isSet = false;\r\n        delete accounts[_user].history;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Auxiliary method used in constructor to reserve some tokens and lock them in some cases.\r\n    @param _address The address to assign tokens\r\n    @param _amount The amount of tokens\r\n    @param _lock True to lock until 'lockExpiration', false to not\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function _setup(address _address, uint256 _amount, bool _lock) internal returns (bool) {\r\n        locked[_address] = _lock;\r\n        accounts[_address].balance = _amount;\r\n        accounts[_address].isSet = true;\r\n        require(_updateHistory(_address));\r\n        accountsList.push(_address);\r\n        Transfer(this, _address, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Function implementing the shared logic of 'transfer()' and 'transferFrom()'\r\n    @param _from address sending tokens\r\n    @param _recipient address receiving tokens\r\n    @param _amount tokens to send\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function _transfer(address _from, address _recipient, uint256 _amount) internal disabledInMaintenance trackNewUsers(_recipient) returns (bool) {\r\n\r\n        accounts[_from].balance = balanceOf(_from).sub(_amount);\r\n        accounts[_recipient].balance = balanceOf(_recipient).add(_amount);\r\n\r\n        // save this transaction in both accounts history\r\n        require(_updateHistory(_from));\r\n        require(_updateHistory(_recipient));\r\n\r\n        Transfer(_from, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @dev Updates the user history with the latest balance.\r\n    @param _address The Account's address to update\r\n    @return A bool set true if successful, false otherwise\r\n     */\r\n    function _updateHistory(address _address) internal returns (bool) {\r\n        accounts[_address].history.push(Snapshot(block.number, balanceOf(_address)));\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_auth\",\"type\":\"bool\"}],\"name\":\"setBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountsList\",\"type\":\"address[]\"}],\"name\":\"maintenanceSetAccountsList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maintenanceDeactivateUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceAt\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountsListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMaintenance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockExpiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAccountAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnFeatureDeactivation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LWFToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e6521b49e449e6f2abdba4ffeefb587bd345b47d94c1b8d9a5612ce667ce2dba"}]}