{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20 {\r\n    function transfer(address _to, uint256 _value) public returns(bool);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Airdropper is Ownable {\r\n\r\n    address public tokenAddr = 0x0;\r\n    uint256 public numOfTokens;\r\n    ERC20 public token;\r\n\r\n    function Airdropper(address _tokenAddr, uint256 _numOfTokens) public {\r\n        tokenAddr = _tokenAddr;\r\n        numOfTokens = _numOfTokens;\r\n        token = ERC20(_tokenAddr);\r\n    }\r\n\r\n    function multisend(address[] dests) public onlyOwner returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n           require(token.transfer(dests[i], numOfTokens));\r\n           i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n\r\n    function getLendTokenBalance() public constant returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    //Function to get the locked tokens back, in case of any issue\r\n    //Return the tokens to the owner's address\r\n    function withdrawRemainingTokens() public onlyOwner  {\r\n        uint contractTokenBalance = token.balanceOf(this);\r\n        require(contractTokenBalance > 0);        \r\n        token.transfer(owner, contractTokenBalance);\r\n    }\r\n\r\n\r\n    // Method to get any locked ERC20 tokens\r\n    function withdrawERC20ToOwner(address _erc20) public onlyOwner {\r\n        ERC20 erc20Token = ERC20(_erc20);\r\n        uint contractTokenBalance = erc20Token.balanceOf(this);\r\n        require(contractTokenBalance > 0);\r\n        erc20Token.transfer(owner, contractTokenBalance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"withdrawERC20ToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLendTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_numOfTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Airdropper","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000080fb784b7ed66730e8b1dbd9820afd29931aab03000000000000000000000000000000000000000000000004bc734bb175d4b822","Library":"","SwarmSource":"bzzr://8fa71fb275968a4bd97fb8ccf96d428ab16691dcdeff5f491beec2339aee09eb"}]}