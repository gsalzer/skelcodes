{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract owned {\r\n    /* Owner definition. */\r\n    address public owner; // Owner address.\r\n    function owned() { owner = msg.sender; }\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n    function transferOwnership(address newOwner) onlyOwner { owner = newOwner; }\r\n}\r\ncontract token { \r\n    /* Base token definition. */\r\n    string  public name;        // Name for the token.\r\n    string  public symbol;      // Symbol for the token.\r\n    uint8   public decimals;    // Number of decimals of the token.\r\n    uint256 public totalSupply; // Total of tokens created.\r\n\r\n    // Array containing the balance foreach address.\r\n    mapping (address => uint256) public balanceOf;\r\n    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify about a transfer done. */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Initializes the contract */\r\n    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) {\r\n        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\r\n        totalSupply           = initialSupply; // Update total supply.\r\n        name                  = tokenName;     // Set the name for display purposes.\r\n        symbol                = tokenSymbol;   // Set the symbol for display purposes.\r\n        decimals              = decimalUnits;  // Amount of decimals for display purposes.\r\n    }\r\n\r\n    /* Internal transfer, only can be called by this contract. */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead.\r\n        require(balanceOf[_from] > _value);                // Check if the sender has enough.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\r\n        balanceOf[_from] -= _value; // Subtract from the sender.\r\n        balanceOf[_to]   += _value; // Add the same to the recipient.\r\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from your account.\r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to send.\r\n    function transfer(address _to, uint256 _value) {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\r\n    /// @param _from The address of the sender.\r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to send.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); // Check allowance.\r\n        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\r\n        _transfer(_from, _to, _value); // Makes the transfer.\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\r\n    /// @param _spender The address authorized to spend.\r\n    /// @param _value The max amount they can spend.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BSCToken is owned, token {\r\n    /* Specific token definition for -Bitcoin StartUp Capital S.A.- company. */\r\n    uint256 public sellPrice         = 5000000000000000;  // Price applied if someone wants to sell a token.\r\n    uint256 public buyPrice          = 10000000000000000; // Price applied if someone wants to buy a token.\r\n    bool    public closeBuy          = false;             // If true, nobody will be able to buy.\r\n    bool    public closeSell         = false;             // If true, nobody will be able to sell.\r\n    uint256 public tokensAvailable   = balanceOf[this];   // Number of tokens available for sell.\r\n    uint256 public distributedTokens = 0;                 // Number of tokens distributed.\r\n    uint256 public solvency          = this.balance;      // Amount of Ether available to pay sales.\r\n    uint256 public profit            = 0;                 // Shows the actual profit for the company.\r\n\r\n    // Array containing foreach address if it's frozen or not.\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify about an address being freezed. */\r\n    event FrozenFunds(address target, bool frozen);\r\n    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\r\n    event LogDeposit(address sender, uint amount);\r\n    /* This generates a public event on the blockchain that will notify about a migration has been completed. */\r\n    event LogMigration(address receiver, uint amount);\r\n    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\r\n    event LogWithdrawal(address receiver, uint amount);\r\n\r\n    /* Initializes the contract */\r\n    function BSCToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. User should use burn() instead.\r\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\r\n        require(!frozenAccount[_from]);                    // Check if sender is frozen.\r\n        require(!frozenAccount[_to]);                      // Check if recipient is frozen.\r\n        \r\n        balanceOf[_from] -= _value; // Subtracts from the sender.\r\n        balanceOf[_to]   += _value; // Adds the same to the recipient.\r\n\r\n        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\r\n        \r\n        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\r\n    }\r\n\r\n    /* Internal, updates the balance of tokens available. */\r\n    function _updateTokensAvailable(uint256 _tokensAvailable) internal {\r\n        tokensAvailable = _tokensAvailable;\r\n    }\r\n\r\n    /* Internal, updates the balance of Ether available in order to cover potential sales. */\r\n    function _updateSolvency(uint256 _solvency) internal {\r\n        solvency = _solvency;\r\n    }\r\n\r\n    /* Internal, updates the profit value */\r\n    function _updateProfit(uint256 _increment, bool add) internal{\r\n        if (add){\r\n            // Increase the profit value\r\n            profit = profit + _increment;\r\n        }else{\r\n            // Decrease the profit value\r\n            if(_increment > profit){\r\n                profit = 0;\r\n            }else{\r\n                profit = profit - _increment;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice The owner sends `_value` tokens to `_to`, because `_to` have the right. The tokens migrated count as pre-distributed ones.\r\n    /// @param _to The address of the recipient.\r\n    /// @param _value The amount to send.\r\n    function completeMigration(address _to, uint256 _value) onlyOwner payable{\r\n        require( msg.value >= (_value * sellPrice) );       // Owner has to send enough ETH to proceed.\r\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\r\n        \r\n        //Contract has already received the Ether when this function is executed.\r\n        _updateSolvency(this.balance);   // Updates the value of solvency of the contract.\r\n        _updateProfit(msg.value, false); // Decrease profit value.\r\n        // Decrease because the owner invests his own Ether in order to guarantee the solvency.\r\n\r\n        _transfer(msg.sender, _to, _value); // Transfers the tokens to the investor's address.\r\n        distributedTokens = distributedTokens + _value; // Increase the number of tokens distributed.\r\n\r\n        LogMigration( _to, _value); // Notifies the blockchain about the migration taking place.\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`.\r\n    /// @param target Address to receive the tokens.\r\n    /// @param mintedAmount The amount of tokens target will receive.\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n        balanceOf[target] += mintedAmount; // Updates target's balance.\r\n        totalSupply       += mintedAmount; // Updates totalSupply.\r\n\r\n        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\r\n        \r\n        Transfer(0, this, mintedAmount);      // Notifies the blockchain about the tokens created.\r\n        Transfer(this, target, mintedAmount); // Notifies the blockchain about the transfer to target.\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\r\n    /// @param target Address to be frozen.\r\n    /// @param freeze Either to freeze target or not.\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze; // Sets the target status. True if it's frozen, False if it's not.\r\n        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\r\n    }\r\n\r\n    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\r\n    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10¹⁸WEI).\r\n    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10¹⁸WEI).\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n        sellPrice = newSellPrice; // Updates the buying price.\r\n        buyPrice = newBuyPrice;   // Updates the selling price.\r\n    }\r\n\r\n    /// @notice Sets the state of buy and sell operations\r\n    /// @param isClosedBuy True if buy operations are closed, False if opened.\r\n    /// @param isClosedSell True if sell operations are closed, False if opened.\r\n    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner {\r\n        closeBuy = isClosedBuy;   // Updates the state of buy operations.\r\n        closeSell = isClosedSell; // Updates the state of sell operations.\r\n    }\r\n\r\n    /// @notice Deposits Ether to the contract\r\n    function deposit() payable returns(bool success) {\r\n        require((this.balance + msg.value) > this.balance); // Checks for overflows.\r\n        \r\n        //Contract has already received the Ether when this function is executed.\r\n        _updateSolvency(this.balance);   // Updates the value of solvency of the contract.\r\n        _updateProfit(msg.value, false); // Decrease profit value.\r\n        // Decrease because deposits will be done mostly by the owner.\r\n        // Possible donations won't count as profit. Atleast not for the company, but in favor of the investors.\r\n\r\n        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\r\n        return true;\r\n    }\r\n\r\n    /// @notice The owner withdraws Ether from the contract.\r\n    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\r\n    function withdraw(uint amountInWeis) onlyOwner {\r\n        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\r\n        _updateSolvency( (this.balance - amountInWeis) ); // Updates the value of solvency of the contract.\r\n        _updateProfit(amountInWeis, true);                // Increase the profit value.\r\n        owner.transfer(amountInWeis); // Sends the Ether to owner address.\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending Ether.\r\n    function buy() payable {\r\n        require(!closeBuy); // Buy operations must be opened.\r\n        uint amount = msg.value / buyPrice; // Calculates the amount of tokens to be sent.\r\n        uint256 profit_in_transaction = msg.value - (amount * sellPrice); // Calculates the relative profit for this transaction.\r\n        require( profit_in_transaction > 0 );\r\n\r\n        //Contract has already received the Ether when this function is executed.\r\n        _transfer(this, msg.sender, amount); // Makes the transfer of tokens.\r\n        distributedTokens = distributedTokens + amount; // Increase the number of tokens distributed.\r\n        _updateSolvency(this.balance - profit_in_transaction);   // Updates the value of solvency of the contract.\r\n        _updateProfit(profit_in_transaction, true);              // Increase the profit value.\r\n        owner.transfer(profit_in_transaction); // Sends profit to the owner of the contract.\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to the contract.\r\n    /// @param amount amount of tokens to be sold.\r\n    function sell(uint256 amount) {\r\n        require(!closeSell); // Sell operations must be opened.\r\n        require(this.balance >= amount * sellPrice); // Checks if the contract has enough Ether to buy.\r\n        \r\n        _transfer(msg.sender, this, amount); // Makes the transfer of tokens, the contract receives the tokens.\r\n        distributedTokens = distributedTokens - amount; // Decrease the number of tokens distributed.\r\n        _updateSolvency( (this.balance - (amount * sellPrice)) ); // Updates the value of solvency of the contract.\r\n        msg.sender.transfer(amount * sellPrice); // Sends Ether to the seller.\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWeis\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"solvency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"completeMigration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isClosedBuy\",\"type\":\"bool\"},{\"name\":\"isClosedSell\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BSCToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000017426974636f696e2053746172747570204361706974616c00000000000000000000000000000000000000000000000000000000000000000000000000000000034253430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://14514b5c2bdc772b3ea28a9ea7c667b61a7a7c9db91d2283a8d8f84d802c421e"}]}