{"status":"1","message":"OK","result":[{"SourceCode":"/******************************************************************************\\\r\n\r\nfile:   RegBase.sol\r\nver:    0.3.3\r\nupdated:12-Sep-2017\r\nauthor: Darryl Morris (o0ragman0o)\r\nemail:  o0ragman0o AT gmail.com\r\n\r\nThis file is part of the SandalStraps framework\r\n\r\n`RegBase` provides an inheriting contract the minimal API to be compliant with \r\n`Registrar`.  It includes a set-once, `bytes32 public regName` which is refered\r\nto by `Registrar` lookups.\r\n\r\nAn owner updatable `address public owner` state variable is also provided and is\r\nrequired by `Factory.createNew()`.\r\n\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease notes:\r\n* Framworking changing to Factory v0.3.3 usage\r\n\\******************************************************************************/\r\n\r\npragma solidity ^0.4.13;\r\n\r\ncontract RegBaseAbstract\r\n{\r\n    /// @dev A static identifier, set in the constructor and used for registrar\r\n    /// lookup\r\n    /// @return Registrar name SandalStraps registrars\r\n    bytes32 public regName;\r\n\r\n    /// @dev An general purpose resource such as short text or a key to a\r\n    /// string in a StringsMap\r\n    /// @return resource\r\n    bytes32 public resource;\r\n    \r\n    /// @dev An address permissioned to enact owner restricted functions\r\n    /// @return owner\r\n    address public owner;\r\n    \r\n    /// @dev An address permissioned to take ownership of the contract\r\n    /// @return newOwner\r\n    address public newOwner;\r\n\r\n//\r\n// Events\r\n//\r\n\r\n    /// @dev Triggered on initiation of change owner address\r\n    event ChangeOwnerTo(address indexed _newOwner);\r\n\r\n    /// @dev Triggered on change of owner address\r\n    event ChangedOwner(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    /// @dev Triggered when the contract accepts ownership of another contract.\r\n    event ReceivedOwnership(address indexed _kAddr);\r\n\r\n    /// @dev Triggered on change of resource\r\n    event ChangedResource(bytes32 indexed _resource);\r\n\r\n//\r\n// Function Abstracts\r\n//\r\n\r\n    /// @notice Will selfdestruct the contract\r\n    function destroy() public;\r\n\r\n    /// @notice Initiate a change of owner to `_owner`\r\n    /// @param _owner The address to which ownership is to be transfered\r\n    function changeOwner(address _owner) public returns (bool);\r\n\r\n    /// @notice Finalise change of ownership to newOwner\r\n    function acceptOwnership() public returns (bool);\r\n\r\n    /// @notice Change the resource to `_resource`\r\n    /// @param _resource A key or short text to be stored as the resource.\r\n    function changeResource(bytes32 _resource) public returns (bool);\r\n}\r\n\r\n\r\ncontract RegBase is RegBaseAbstract\r\n{\r\n//\r\n// Constants\r\n//\r\n\r\n    bytes32 constant public VERSION = \"RegBase v0.3.3\";\r\n\r\n//\r\n// State Variables\r\n//\r\n\r\n    // Declared in RegBaseAbstract for reasons that an inherited abstract\r\n    // function is not seen as implimented by a public state identifier of\r\n    // the same name.\r\n    \r\n//\r\n// Modifiers\r\n//\r\n\r\n    // Permits only the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    /// @param _creator The calling address passed through by a factory,\r\n    /// typically msg.sender\r\n    /// @param _regName A static name referenced by a Registrar\r\n    /// @param _owner optional owner address if creator is not the intended\r\n    /// owner\r\n    /// @dev On 0x0 value for owner, ownership precedence is:\r\n    /// `_owner` else `_creator` else msg.sender\r\n    function RegBase(address _creator, bytes32 _regName, address _owner)\r\n    {\r\n        require(_regName != 0x0);\r\n        regName = _regName;\r\n        owner = _owner != 0x0 ? _owner : \r\n                _creator != 0x0 ? _creator : msg.sender;\r\n    }\r\n    \r\n    /// @notice Will selfdestruct the contract\r\n    function destroy()\r\n        public\r\n        onlyOwner\r\n    {\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    /// @notice Initiate a change of owner to `_owner`\r\n    /// @param _owner The address to which ownership is to be transfered\r\n    function changeOwner(address _owner)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        ChangeOwnerTo(_owner);\r\n        newOwner = _owner;\r\n        return true;\r\n    }\r\n    \r\n    /// @notice Finalise change of ownership to newOwner\r\n    function acceptOwnership()\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == newOwner);\r\n        ChangedOwner(owner, msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Change the resource to `_resource`\r\n    /// @param _resource A key or short text to be stored as the resource.\r\n    function changeResource(bytes32 _resource)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        resource = _resource;\r\n        ChangedResource(_resource);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************************************************\\\r\n\r\nfile:   Factory.sol\r\nver:    0.3.3\r\nupdated:12-Sep-2017\r\nauthor: Darryl Morris (o0ragman0o)\r\nemail:  o0ragman0o AT gmail.com\r\n\r\nThis file is part of the SandalStraps framework\r\n\r\nFactories are a core but independant concept of the SandalStraps framework and \r\ncan be used to create SandalStraps compliant 'product' contracts from embed\r\nbytecode.\r\n\r\nThe abstract Factory contract is to be used as a SandalStraps compliant base for\r\nproduct specific factories which must impliment the createNew() function.\r\n\r\nis itself compliant with `Registrar` by inhereting `RegBase` and\r\ncompiant with `Factory` through the `createNew(bytes32 _name, address _owner)`\r\nAPI.\r\n\r\nAn optional creation fee can be set and manually collected by the owner.\r\n\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease Notes\r\n-------------\r\n* Changed from`withdaw(<value>)` to `withdrawAll()`\r\n\\******************************************************************************/\r\n\r\npragma solidity ^0.4.13;\r\n\r\n// import \"./RegBase.sol\";\r\n\r\ncontract Factory is RegBase\r\n{\r\n//\r\n// Constants\r\n//\r\n\r\n    // Deriving factories should have `bytes32 constant public regName` being\r\n    // the product's contract name, e.g for products \"Foo\":\r\n    // bytes32 constant public regName = \"Foo\";\r\n\r\n    // Deriving factories should have `bytes32 constant public VERSION` being\r\n    // the product's contract name appended with 'Factory` and the version\r\n    // of the product, e.g for products \"Foo\":\r\n    // bytes32 constant public VERSION \"FooFactory 0.0.1\";\r\n\r\n//\r\n// State Variables\r\n//\r\n\r\n    /// @return The payment in wei required to create the product contract.\r\n    uint public value;\r\n\r\n//\r\n// Events\r\n//\r\n\r\n    // Is triggered when a product is created\r\n    event Created(address indexed _creator, bytes32 indexed _regName, address indexed _addr);\r\n\r\n//\r\n// Modifiers\r\n//\r\n\r\n    // To check that the correct fee has bene paid\r\n    modifier feePaid() {\r\n        require(msg.value == value || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    /// @param _creator The calling address passed through by a factory,\r\n    /// typically msg.sender\r\n    /// @param _regName A static name referenced by a Registrar\r\n    /// @param _owner optional owner address if creator is not the intended\r\n    /// owner\r\n    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\r\n    /// `_owner` else `_creator` else msg.sender\r\n    function Factory(address _creator, bytes32 _regName, address _owner)\r\n        RegBase(_creator, _regName, _owner)\r\n    {\r\n        // nothing left to construct\r\n    }\r\n    \r\n    /// @notice Set the product creation fee\r\n    /// @param _fee The desired fee in wei\r\n    function set(uint _fee) \r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        value = _fee;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send contract balance to `owner`\r\n    function withdrawAll()\r\n        public\r\n        returns (bool)\r\n    {\r\n        owner.transfer(this.balance);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Create a new product contract\r\n    /// @param _regName A unique name if the the product is to be registered in\r\n    /// a SandalStraps registrar\r\n    /// @param _owner An address of a third party owner.  Will default to\r\n    /// msg.sender if 0x0\r\n    /// @return kAddr_ The address of the new product contract\r\n    function createNew(bytes32 _regName, address _owner) \r\n        payable returns(address kAddr_);\r\n}\r\n\r\n/******************************************************************************\\\r\n\r\nfile:   Forwarder.sol\r\nver:    0.3.0\r\nupdated:4-Oct-2017\r\nauthor: Darryl Morris (o0ragman0o)\r\nemail:  o0ragman0o AT gmail.com\r\n\r\nThis file is part of the SandalStraps framework\r\n\r\nForwarder acts as a proxy address for payment pass-through.\r\n\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease Notes\r\n-------------\r\n* Name change from 'Redirector' to 'Forwarder'\r\n* Changes state name from 'payTo' to 'forwardTo'\r\n\r\n\\******************************************************************************/\r\n\r\npragma solidity ^0.4.13;\r\n\r\n// import \"https://github.com/o0ragman0o/SandalStraps/contracts/Factory.sol\";\r\n\r\ncontract Forwarder is RegBase {\r\n//\r\n// Constants\r\n//\r\n\r\n    bytes32 constant public VERSION = \"Forwarder v0.3.0\";\r\n\r\n//\r\n// State\r\n//\r\n\r\n    address public forwardTo;\r\n    \r\n//\r\n// Events\r\n//\r\n    \r\n    event Forwarded(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint _value);\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    function Forwarder(address _creator, bytes32 _regName, address _owner)\r\n        public\r\n        RegBase(_creator, _regName, _owner)\r\n    {\r\n        // forwardTo will be set to msg.sender of if _owner == 0x0 or _owner\r\n        // otherwise\r\n        forwardTo = owner;\r\n    }\r\n    \r\n    function ()\r\n        public\r\n        payable \r\n    {\r\n        Forwarded(msg.sender, forwardTo, msg.value);\r\n        require(forwardTo.call.value(msg.value)(msg.data));\r\n    }\r\n    \r\n    function changeForwardTo(address _forwardTo)\r\n        public\r\n        returns (bool)\r\n    {\r\n        // Only owner or forwarding address can change forwarding address \r\n        require(msg.sender == owner || msg.sender == forwardTo);\r\n        forwardTo = _forwardTo;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ForwarderFactory is Factory\r\n{\r\n//\r\n// Constants\r\n//\r\n\r\n    /// @return registrar name\r\n    bytes32 constant public regName = \"forwarder\";\r\n    \r\n    /// @return version string\r\n    bytes32 constant public VERSION = \"ForwarderFactory v0.3.0\";\r\n\r\n//\r\n// Functions\r\n//\r\n\r\n    /// @param _creator The calling address passed through by a factory,\r\n    /// typically msg.sender\r\n    /// @param _regName A static name referenced by a Registrar\r\n    /// @param _owner optional owner address if creator is not the intended\r\n    /// owner\r\n    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\r\n    /// `_owner` else `_creator` else msg.sender\r\n    function ForwarderFactory(\r\n            address _creator, bytes32 _regName, address _owner) public\r\n        Factory(_creator, regName, _owner)\r\n    {\r\n        // _regName is ignored as `regName` is already a constant\r\n        // nothing to construct\r\n    }\r\n\r\n    /// @notice Create a new product contract\r\n    /// @param _regName A unique name if the the product is to be registered in\r\n    /// a SandalStraps registrar\r\n    /// @param _owner An address of a third party owner.  Will default to\r\n    /// msg.sender if 0x0\r\n    /// @return kAddr_ The address of the new product contract\r\n    function createNew(bytes32 _regName, address _owner)\r\n        public\r\n        payable\r\n        feePaid\r\n        returns (address kAddr_)\r\n    {\r\n        kAddr_ = address(new Forwarder(msg.sender, _regName, _owner));\r\n        Created(msg.sender, _regName, kAddr_);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_resource\",\"type\":\"bytes32\"}],\"name\":\"changeResource\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resource\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regName\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNew\",\"outputs\":[{\"name\":\"kAddr_\",\"type\":\"address\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_regName\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_regName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwnerTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_kAddr\",\"type\":\"address\"}],\"name\":\"ReceivedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_resource\",\"type\":\"bytes32\"}],\"name\":\"ChangedResource\",\"type\":\"event\"}]","ContractName":"ForwarderFactory","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bea4d1fecceb520fbfa780c682a927c881cae4d1f5e6b8c95dce63e01d696eec"}]}