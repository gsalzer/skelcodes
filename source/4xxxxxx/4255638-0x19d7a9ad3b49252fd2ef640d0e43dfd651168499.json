{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract BMToken\r\n{\r\n    function totalSupply() constant external returns (uint256);\r\n    function mintTokens(address holder, uint256 amount) external;\r\n}\r\n\r\ncontract BMmkPreICO\r\n{\r\n    function getDataHolders(address holder) external constant returns(uint256);\r\n}\r\n\r\ncontract BMPreICO\r\n{\r\n    function getDataHolders(address holder) external constant returns(uint256);\r\n}\r\n\r\ncontract BMPreICOAffiliateProgramm\r\n{\r\n    function refferalPreICOBonus(address referral) constant external returns (uint256 bonus);\r\n    function partnerPreICOBonus(address partner) constant external returns (uint256 bonus);\r\n}\r\n\r\ncontract BMICOAffiliateProgramm\r\n{\r\n    function add_referral(address referral, string promo, uint256 amount) external returns(address, uint256, uint256);\r\n}\r\n\r\ncontract BM_ICO\r\n{\r\n    BMToken    contractTokens;\r\n    BMmkPreICO contractMKPreICO;\r\n    BMPreICO   contractPreICO;\r\n    BMPreICOAffiliateProgramm contractAffiliatePreICO;\r\n    BMICOAffiliateProgramm contractAffiliateICO;\r\n\r\n    address public owner;\r\n    address public exchangesOwner;\r\n\r\n    mapping (uint8 => uint256)                       public holdersBonus;\r\n    mapping (address => bool)                        public claimedMK;\r\n    mapping (address => bool)                        public claimedPreICO;\r\n\r\n    mapping (uint8 => uint256)                       public partnerBonus;\r\n    mapping (address => bool)                        public claimedPartnerPreICO;\r\n\r\n    uint256 public startDate      = 1505001600; //10.09.2017 00:00 GMT\r\n    uint256 public endDate        = 1507593600; //10.10.2017 00:00 GMT\r\n\r\n    bool isOwnerEmit = false;\r\n\r\n    uint256 public icoTokenSupply = 7*(10**26);\r\n\r\n    mapping (uint8 => uint256) public priceRound;\r\n\r\n    mapping(address => bool) exchanges;\r\n\r\n    function BM_ICO()\r\n    {\r\n        owner          = msg.sender;\r\n        exchangesOwner = address(0xCa92b75B7Ada1B460Eb5C012F1ebAd72c27B19D9);\r\n\r\n        contractTokens          = BMToken(0xf028adee51533b1b47beaa890feb54a457f51e89);\r\n        contractAffiliatePreICO = BMPreICOAffiliateProgramm(0x6203188c0dd1a4607614dbc8af409e91ed46def0);\r\n        contractAffiliateICO    = BMICOAffiliateProgramm(0xbe44459058383729be8247802d4314ea76ca9e5a);\r\n        contractMKPreICO        = BMmkPreICO(0xe9958afac6a3e16d32d3cb62a82f84d3c43c8012);\r\n        contractPreICO          = BMPreICO(0x7600431745bd5bb27315f8376971c81cc8026a78);\r\n\r\n        priceRound[0] = 0.000064 ether; //MK\r\n        priceRound[1] = 0.000071 ether; //PreICO\r\n        priceRound[2] = 0.000107 ether; //1 round 10.09.2017-20.09.2017\r\n        priceRound[3] = 0.000114 ether; //2 round 20.09.2017-25.09.2017\r\n        priceRound[4] = 0.000121 ether; //3 round 25.09.2017-30.09.2017\r\n        priceRound[5] = 0.000143 ether; //4 round 30.09.2017-10.10.2017\r\n    }\r\n\r\n    modifier isOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address new_owner) isOwner {\r\n        assert(new_owner!=address(0x0));\r\n        assert(new_owner!=address(this));\r\n        owner = new_owner;\r\n    }\r\n\r\n    function addExchange(address new_exchange) isOwner\r\n    {\r\n        assert(new_exchange!=address(0x0));\r\n        assert(new_exchange!=address(this));\r\n        assert(exchanges[new_exchange]==false);\r\n        exchanges[new_exchange] = true;\r\n    }\r\n\r\n    function cast(uint256 x) constant internal returns (uint128 z)\r\n    {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n\r\n    function etherToTokens(uint256 etherAmount, uint256 tokenPrice) constant returns(uint256)\r\n    {\r\n        return uint256(cast((etherAmount * (10**18) + cast(tokenPrice) / 2) / cast(tokenPrice)));\r\n    }\r\n\r\n    function tokensToEther(uint256 tokenAmount, uint256 tokenPrice) constant returns(uint256)\r\n    {\r\n        return uint256(cast((tokenPrice * cast(tokenAmount) + (10**18) / 2) / (10**18)));\r\n    }\r\n\r\n    function periodNow() constant returns (uint8 period) {\r\n        if(now >= 1505001600 && now < 1505865600){\r\n            period = 2;\r\n        }\r\n        else if(now >= 1505865600 && now < 1506297600){\r\n            period = 3;\r\n        }\r\n        else if(now >= 1506297600 && now < 1506729600){\r\n            period = 4;\r\n        }\r\n        else if(now >= 1506729600 && now < 1507593600){\r\n            period = 5;\r\n        }\r\n        else {\r\n            period = 6;\r\n        }\r\n    }\r\n\r\n    function claim_PreICOTokens(address holder)\r\n    {\r\n        uint256 reward = 0;\r\n\r\n        if(claimedMK[holder]==false){\r\n            reward = etherToTokens(contractMKPreICO.getDataHolders(holder), priceRound[0]);\r\n            icoTokenSupply -= reward;\r\n            claimedMK[holder] = true;\r\n        }\r\n\r\n        if(claimedPreICO[holder]==false){\r\n            uint256 preico_reward = etherToTokens(contractPreICO.getDataHolders(holder), priceRound[1]);\r\n            reward += preico_reward;\r\n            icoTokenSupply -= preico_reward;\r\n            reward += etherToTokens(contractAffiliatePreICO.refferalPreICOBonus(holder), priceRound[1]);\r\n            claimedPreICO[holder] = true;\r\n        }\r\n\r\n        assert(reward>0);\r\n\r\n        if(exchanges[holder] == true)\r\n        {\r\n            contractTokens.mintTokens(exchangesOwner, reward);\r\n        }\r\n        else\r\n        {\r\n            contractTokens.mintTokens(holder, reward);\r\n        }\r\n    }\r\n\r\n    function claim_partnerPreICOTokens(address partner)\r\n    {\r\n        assert(claimedPartnerPreICO[partner]==false);\r\n        uint256 reward = etherToTokens(contractAffiliatePreICO.partnerPreICOBonus(partner), priceRound[1]);\r\n\r\n        assert(reward>0);\r\n\r\n        contractTokens.mintTokens(partner, reward);\r\n        claimedPartnerPreICO[partner] = true;\r\n    }\r\n\r\n    function buy(string promo) payable\r\n    {\r\n        uint8 period_number = periodNow();\r\n        assert(exchanges[msg.sender]==false);\r\n        assert(period_number >= 2 && period_number <= 5);\r\n        assert(icoTokenSupply > 0);\r\n        assert(msg.value >= 0.1 ether);\r\n\r\n        uint256 amount_invest = msg.value;\r\n        uint256 reward = etherToTokens(amount_invest, priceRound[period_number]);\r\n\r\n        if(reward > icoTokenSupply)\r\n        {\r\n            reward = icoTokenSupply;\r\n            amount_invest = tokensToEther(reward, priceRound[period_number]);\r\n            assert(msg.value > amount_invest);\r\n            msg.sender.transfer(msg.value - amount_invest);\r\n        }\r\n\r\n        icoTokenSupply -= reward;\r\n\r\n        if (bytes(promo).length > 0)\r\n\t\t{\r\n            var (partner_address, partner_bonus, referral_bonus) = contractAffiliateICO.add_referral(msg.sender, promo, amount_invest);\r\n\r\n            if(partner_bonus > 0 && partner_address != address(0x0))\r\n            {\r\n                uint256 p_bonus = etherToTokens(partner_bonus, priceRound[period_number]);\r\n                partnerBonus[period_number] += p_bonus;\r\n                contractTokens.mintTokens(partner_address, p_bonus);\r\n            }\r\n\r\n            if(referral_bonus > 0)\r\n            {\r\n                uint256 bonus = etherToTokens(referral_bonus, priceRound[period_number]);\r\n                holdersBonus[period_number] += bonus;\r\n                reward += bonus;\r\n            }\r\n        }\r\n        contractTokens.mintTokens(msg.sender, reward);\r\n    }\r\n\r\n    function () payable\r\n    {\r\n        buy('');\r\n    }\r\n\r\n    function collect() isOwner\r\n    {\r\n        assert(this.balance > 0);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function ownerEmit() isOwner\r\n    {\r\n        assert(now > endDate);\r\n        assert(isOwnerEmit==false);\r\n\r\n        uint256 users_emit = ((7*(10**26))-icoTokenSupply); // 700 000 000\r\n        // ico amount   - 70% supply\r\n        // funds amount - 30% supply\r\n        // funds amount = ico amount * 3 / 7\r\n        uint256 dev_emit = users_emit * 30 / 70;\r\n\r\n        // contractTokens.totalSupply() = users_emit + partner_rewards + users_bouns\r\n        // uint256 partner_and_bouns_rewards = contractTokens.totalSupply() - users_emit;\r\n        // dev_emit = dev_emit - partner_and_bouns_rewards;\r\n        dev_emit = dev_emit + users_emit - contractTokens.totalSupply();\r\n\r\n        isOwnerEmit = true;\r\n        contractTokens.mintTokens(msg.sender, dev_emit);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"etherToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claim_PreICOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodNow\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPartnerPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangesOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"promo\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerEmit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"claim_partnerPreICOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"priceRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_exchange\",\"type\":\"address\"}],\"name\":\"addExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedMK\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"holdersBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"partnerBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"tokensToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BM_ICO","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://462ebadeaba1b05bce3195c9e7f5b2cbb1443f515c8d6fcf0fe53bc54f3695b5"}]}