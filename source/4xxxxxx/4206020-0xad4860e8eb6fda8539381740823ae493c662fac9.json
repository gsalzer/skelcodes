{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20 {\r\n    function TotalSupply() constant returns (uint totalSupply);\r\n   function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a * b;\r\n   assert(a == 0 || c / a == b);\r\n   return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n   uint256 c = a / b;\r\n   // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n   return c;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   assert(b <= a);\r\n   return a - b;\r\n }\r\n\r\n function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n   uint256 c = a + b;\r\n   assert(c >= a);\r\n   return c;\r\n }\r\n}\r\n\r\n\r\n\r\ncontract ItalyToken is ERC20{\r\n  using SafeMath for uint256;\r\n  \r\n  uint256 public _totalSupply = 0;\r\n  \r\n  \r\n  string public symbol = \"ITK\";//Simbolo del token es. ETH\r\n  string public constant name = \"ItalyToken\"; //Nome del token es. Ethereum\r\n  uint256 public constant decimals = 18; //Numero di decimali del token, il bitcoin ne ha 8, ethereum 18\r\n  \r\n  uint256 public MAX_SUPPLY = 2281000000 * 10**decimals; //Numero massimo di token da emettere ( 1000 )\r\n  uint256 public TOKEN_TO_CREATOR = 114050000 * 10**decimals; //Token da inviare al creatore del contratto\r\n\r\n  uint256 public constant RATE = 25000; //Quanti token inviare per ogni ether ricevuto\r\n  address public owner;\r\n  \r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint256)) allowed;\r\n  \r\n  //Funzione che permette di ricevere token solo specificando l'indirizzo\r\n  function() payable{\r\n      createTokens();\r\n  }\r\n  \r\n  //Salviamo l'indirizzo del creatore del contratto per inviare gli ether ricevuti\r\n  function ItalyToken(){\r\n      owner = msg.sender;\r\n      balances[msg.sender] = TOKEN_TO_CREATOR;\r\n      _totalSupply = _totalSupply.add(TOKEN_TO_CREATOR);\r\n  }\r\n  \r\n  //Creazione dei token\r\n  function createTokens() payable{\r\n      //Controlliamo che gli ether ricevuti siano maggiori di 0\r\n      require(msg.value >= 0);\r\n      \r\n      //Creiamo una variabile che contiene gli ether ricevuti moltiplicati per il RATE\r\n      uint256 tokens = msg.value.mul(10 ** decimals);\r\n      tokens = tokens.mul(RATE);\r\n      tokens = tokens.div(10 ** 18);\r\n\r\n      uint256 sum = _totalSupply.add(tokens);\r\n      require(sum <= MAX_SUPPLY);\r\n      //Aggiungiamo i token al bilancio di chi ci ha inviato gli ether ed aumentiamo la variabile totalSupply\r\n      balances[msg.sender] = balances[msg.sender].add(tokens);\r\n      _totalSupply = sum;\r\n      \r\n      //Inviamo gli ether a chi ha creato il contratto\r\n      owner.transfer(msg.value);\r\n  }\r\n\r\n  \r\n  //Ritorna il numero totale di token\r\n  function TotalSupply() constant returns (uint totalSupply){\r\n      return _totalSupply;\r\n  }\r\n  \r\n  //Ritorna il bilancio dell'utente di un indirizzo\r\n  function balanceOf(address _owner) constant returns (uint balance){\r\n      return balances[_owner];\r\n  }\r\n  \r\n  //Per inviare i Token\r\n  function transfer(address _to, uint256 _value) returns (bool success){\r\n      //Controlliamo che chi voglia inviare i token ne abbia a sufficienza e che ne voglia inviare più di 0\r\n      require(\r\n          balances[msg.sender] >= _value\r\n          && _value > 0\r\n      );\r\n      //Togliamo i token inviati dal suo bilancio\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      //Li aggiungiamo al bilancio del ricevente\r\n      balances[_to] = balances[_to].add(_value);\r\n      //Chiamiamo l evento transfer\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n  \r\n  //Invio dei token con delega\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n      //Controlliamo che chi voglia inviare token da un indirizzo non suo abbia la delega per farlo, che\r\n      //l'account da dove vngono inviati i token abbia token a sufficienza e\r\n      //che i token inviati siano maggiori di 0\r\n      require(\r\n          allowed[_from][msg.sender] >= _value\r\n          && balances[msg.sender] >= _value\r\n          && _value > 0\r\n      );\r\n      //togliamo i token da chi li invia\r\n      balances[_from] = balances[_from].sub(_value);\r\n      //Aggiungiamoli al rcevente\r\n      balances[_to] = balances[_to].add(_value);\r\n      //Diminuiamo il valore dei token che il delegato può inviare in favore del delegante\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      //Chiamaiamo l'evento transfer\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n  \r\n  //Delegare qualcuno all'invio di token\r\n  function approve(address _spender, uint256 _value) returns (bool success){\r\n      //Inseriamo l'indirizzo del delegato e il massimo che può inviare\r\n      allowed[msg.sender][_spender] = _value;\r\n      //Chiamiamo l'evento approval\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n  \r\n  //Ritorna il numero di token che un delegato può ancora inviare\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining){\r\n      return allowed[_owner][_spender];\r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TO_CREATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ItalyToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad614a8d41ced8cc478cacf734a96711325f84c87a9b6aff40aa7ab3ab8297e9"}]}