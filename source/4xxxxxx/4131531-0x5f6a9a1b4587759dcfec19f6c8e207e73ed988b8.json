{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ================= Ownable Contract start =============================\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    \r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n// ================= Ownable Contract end ===============================\r\n\r\n// ================= Safemath Contract start ============================\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n}\r\n// ================= Safemath Contract end ==============================\r\n\r\n// ================= ERC20 Token Contract start =========================\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n// ================= ERC20 Token Contract end ===========================\r\n\r\n// ================= Standard Token Contract start ======================\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     require(msg.data.length >= size + 4) ;\r\n     _;\r\n  }\r\n\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)  returns (bool success){\r\n    balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSubtract(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSubtract(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n// ================= Standard Token Contract end ========================\r\n\r\n// ================= Pausable Token Contract start ======================\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require (!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require (paused) ;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n// ================= Pausable Token Contract end ========================\r\n\r\n// ================= Indorse Token Contract start =======================\r\ncontract IndorseToken is SafeMath, StandardToken, Pausable {\r\n    // metadata\r\n    string public constant name = \"Indorse Token\";\r\n    string public constant symbol = \"IND\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public indSaleDeposit        = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;      // deposit address for Indorse Sale contract\r\n    address public indSeedDeposit        = 0x0083fdFB328fC8D07E2a7933e3013e181F9798Ad;      // deposit address for Indorse Seed Contributors\r\n    address public indPresaleDeposit     = 0x007AB99FBf023Cb41b50AE7D24621729295EdBFA;      // deposit address for Indorse Presale Contributors\r\n    address public indVestingDeposit     = 0x0011349f715cf59F75F0A00185e7B1c36f55C3ab;      // deposit address for Indorse Vesting for team and advisors\r\n    address public indCommunityDeposit   = 0x0097ec8840E682d058b24E6e19E68358d97A6E5C;      // deposit address for Indorse Marketing, etc\r\n    address public indFutureDeposit      = 0x00d1bCbCDE9Ca431f6dd92077dFaE98f94e446e4;      // deposit address for Indorse Future token sale\r\n    address public indInflationDeposit   = 0x00D31206E625F1f30039d1Fa472303E71317870A;      // deposit address for Indorse Inflation pool\r\n    \r\n    uint256 public constant indSale      = 31603785 * 10**decimals;                         \r\n    uint256 public constant indSeed      = 3566341  * 10**decimals; \r\n    uint256 public constant indPreSale   = 22995270 * 10**decimals;                       \r\n    uint256 public constant indVesting   = 28079514 * 10**decimals;  \r\n    uint256 public constant indCommunity = 10919811 * 10**decimals;  \r\n    uint256 public constant indFuture    = 58832579 * 10**decimals;  \r\n    uint256 public constant indInflation = 14624747 * 10**decimals;  \r\n   \r\n    // constructor\r\n    function IndorseToken()\r\n    {\r\n      balances[indSaleDeposit]           = indSale;                                         // Deposit IND share\r\n      balances[indSeedDeposit]           = indSeed;                                         // Deposit IND share\r\n      balances[indPresaleDeposit]        = indPreSale;                                      // Deposit IND future share\r\n      balances[indVestingDeposit]        = indVesting;                                      // Deposit IND future share\r\n      balances[indCommunityDeposit]      = indCommunity;                                    // Deposit IND future share\r\n      balances[indFutureDeposit]         = indFuture;                                       // Deposit IND future share\r\n      balances[indInflationDeposit]      = indInflation;                                    // Deposit for inflation\r\n\r\n      totalSupply = indSale + indSeed + indPreSale + indVesting + indCommunity + indFuture + indInflation;\r\n\r\n      Transfer(0x0,indSaleDeposit,indSale);\r\n      Transfer(0x0,indSeedDeposit,indSeed);\r\n      Transfer(0x0,indPresaleDeposit,indPreSale);\r\n      Transfer(0x0,indVestingDeposit,indVesting);\r\n      Transfer(0x0,indCommunityDeposit,indCommunity);\r\n      Transfer(0x0,indFutureDeposit,indFuture);\r\n      Transfer(0x0,indInflationDeposit,indInflation);\r\n   }\r\n\r\n  function transfer(address _to, uint _value) whenNotPaused returns (bool success)  {\r\n    return super.transfer(_to,_value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) whenNotPaused returns (bool success)  {\r\n    return super.approve(_spender,_value);\r\n  }\r\n}\r\n// ================= Indorse Token Contract end =======================\r\n\r\n// ================= Actual Sale Contract Start ====================\r\ncontract IndorseSaleContract is  Ownable,SafeMath,Pausable {\r\n    IndorseToken    ind;\r\n\r\n    // crowdsale parameters\r\n    uint256 public fundingStartTime = 1502193600;\r\n    uint256 public fundingEndTime   = 1504785600;\r\n    uint256 public totalSupply;\r\n    address public ethFundDeposit   = 0x26967201d4D1e1aA97554838dEfA4fC4d010FF6F;      // deposit address for ETH for Indorse Fund\r\n    address public indFundDeposit   = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;      // deposit address for Indorse reserve\r\n    address public indAddress       = 0xf8e386EDa857484f5a12e4B5DAa9984E06E73705;\r\n\r\n    bool public isFinalized;                                                            // switched to true in operational state\r\n    uint256 public constant decimals = 18;                                              // #dp in Indorse contract\r\n    uint256 public tokenCreationCap;\r\n    uint256 public constant tokenExchangeRate = 1000;                                   // 1000 IND tokens per 1 ETH\r\n    uint256 public constant minContribution = 0.05 ether;\r\n    uint256 public constant maxTokens = 1 * (10 ** 6) * 10**decimals;\r\n    uint256 public constant MAX_GAS_PRICE = 50000000000 wei;                            // maximum gas price for contribution transactions\r\n \r\n    function IndorseSaleContract() {\r\n        ind = IndorseToken(indAddress);\r\n        tokenCreationCap = ind.balanceOf(indFundDeposit);\r\n        isFinalized = false;\r\n    }\r\n\r\n    event MintIND(address from, address to, uint256 val);\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n\r\n    function CreateIND(address to, uint256 val) internal returns (bool success){\r\n        MintIND(indFundDeposit,to,val);\r\n        return ind.transferFrom(indFundDeposit,to,val);\r\n    }\r\n\r\n    function () payable {    \r\n        createTokens(msg.sender,msg.value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new IND tokens.\r\n    function createTokens(address _beneficiary, uint256 _value) internal whenNotPaused {\r\n      require (tokenCreationCap > totalSupply);                                         // CAP reached no more please\r\n      require (now >= fundingStartTime);\r\n      require (now <= fundingEndTime);\r\n      require (_value >= minContribution);                                              // To avoid spam transactions on the network    \r\n      require (!isFinalized);\r\n      require (tx.gasprice <= MAX_GAS_PRICE);\r\n\r\n      uint256 tokens = safeMult(_value, tokenExchangeRate);                             // check that we're not over totals\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      require (ind.balanceOf(msg.sender) + tokens <= maxTokens);\r\n      \r\n      // DA 8/6/2017 to fairly allocate the last few tokens\r\n      if (tokenCreationCap < checkedSupply) {        \r\n        uint256 tokensToAllocate = safeSubtract(tokenCreationCap,totalSupply);\r\n        uint256 tokensToRefund   = safeSubtract(tokens,tokensToAllocate);\r\n        totalSupply = tokenCreationCap;\r\n        uint256 etherToRefund = tokensToRefund / tokenExchangeRate;\r\n\r\n        require(CreateIND(_beneficiary,tokensToAllocate));                              // Create IND\r\n        msg.sender.transfer(etherToRefund);\r\n        LogRefund(msg.sender,etherToRefund);\r\n        ethFundDeposit.transfer(this.balance);\r\n        return;\r\n      }\r\n      // DA 8/6/2017 end of fair allocation code\r\n\r\n      totalSupply = checkedSupply;\r\n      require(CreateIND(_beneficiary, tokens));                                         // logs token creation\r\n      ethFundDeposit.transfer(this.balance);\r\n    }\r\n    \r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external onlyOwner {\r\n      require (!isFinalized);\r\n      // move to operational\r\n      isFinalized = true;\r\n      ethFundDeposit.transfer(this.balance);                                            // send the eth to Indorse multi-sig\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"MintIND\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"IndorseSaleContract","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://221b74c8c85576c80cae7e37f4c8084386136778142af100baeb41c218e07d8f"}]}