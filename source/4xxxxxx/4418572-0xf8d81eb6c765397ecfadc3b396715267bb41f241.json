{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Crowdsale {\r\n    function buyTokens(address _recipient) payable;\r\n}\r\n\r\ncontract CapWhitelist {\r\n    address public owner;\r\n    mapping (address => uint256) public whitelist;\r\n\r\n    event Set(address _address, uint256 _amount);\r\n\r\n    function CapWhitelist() {\r\n        owner = msg.sender;\r\n        // Set in prod\r\n    }\r\n\r\n    function destruct() {\r\n        require(msg.sender == owner);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function setWhitelisted(address _address, uint256 _amount) {\r\n        require(msg.sender == owner);\r\n        setWhitelistInternal(_address, _amount);\r\n    }\r\n\r\n    function setWhitelistInternal(address _address, uint256 _amount) private {\r\n        whitelist[_address] = _amount;\r\n        Set(_address, _amount);\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint256;\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender,  uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  using SafeMath for uint256;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   */\r\n  function finishMinting() onlyOwner public {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n  }\r\n}\r\ncontract RCNToken is MintableToken {\r\n    string public constant name = \"Ripio Credit Network Token\";\r\n    string public constant symbol = \"RCN\";\r\n    uint8 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n}\r\n\r\ncontract PreallocationsWhitelist {\r\n    address public owner;\r\n    mapping (address => bool) public whitelist;\r\n\r\n    event Set(address _address, bool _enabled);\r\n\r\n    function PreallocationsWhitelist() {\r\n        owner = msg.sender;\r\n        // Set in prod\r\n    }\r\n\r\n    function destruct() {\r\n        require(msg.sender == owner);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function setWhitelisted(address _address, bool _enabled) {\r\n        require(msg.sender == owner);\r\n        setWhitelistInternal(_address, _enabled);\r\n    }\r\n\r\n    function setWhitelistInternal(address _address, bool _enabled) private {\r\n        whitelist[_address] = _enabled;\r\n        Set(_address, _enabled);\r\n    }\r\n}\r\n\r\ncontract RCNCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // metadata\r\n    uint256 public constant decimals = 18;\r\n\r\n    // contracts\r\n    address public ethFundDeposit;      // deposit address for ETH for Ripio\r\n    address public rcnFundDeposit;      // deposit address for Ripio use and RCN User Fund\r\n\r\n    // crowdsale parameters\r\n    bool public isFinalized;              // switched to true in operational state\r\n    uint256 public fundingStartTimestamp;\r\n    uint256 public fundingEndTimestamp;\r\n    uint256 public constant rcnFund = 490 * (10**6) * 10**decimals;   // 490m RCN reserved for Ripio use\r\n    uint256 public constant tokenExchangeRate = 4000; // 4000 RCN tokens per 1 ETH\r\n    uint256 public constant tokenCreationCap =  1000 * (10**6) * 10**decimals;\r\n    uint256 public constant minBuyTokens = 400 * 10**decimals; // 0.1 ETH\r\n    uint256 public constant gasPriceLimit = 60 * 10**9; // Gas limit 60 gwei\r\n\r\n    // events\r\n    event CreateRCN(address indexed _to, uint256 _value);\r\n\r\n    mapping (address => uint256) bought; // cap map\r\n\r\n    CapWhitelist public whiteList;\r\n    PreallocationsWhitelist public preallocationsWhitelist;\r\n    RCNToken public token;\r\n\r\n    // constructor\r\n    function RCNCrowdsale(address _ethFundDeposit,\r\n          address _rcnFundDeposit,\r\n          uint256 _fundingStartTimestamp,\r\n          uint256 _fundingEndTimestamp) {\r\n      token = new RCNToken();\r\n      whiteList = new CapWhitelist();\r\n      preallocationsWhitelist = new PreallocationsWhitelist();\r\n\r\n      // sanity checks\r\n      assert(_ethFundDeposit != 0x0);\r\n      assert(_rcnFundDeposit != 0x0);\r\n      assert(_fundingStartTimestamp < _fundingEndTimestamp);\r\n      assert(uint256(token.decimals()) == decimals); \r\n\r\n      isFinalized = false;                   //controls pre through crowdsale state\r\n      ethFundDeposit = _ethFundDeposit;\r\n      rcnFundDeposit = _rcnFundDeposit;\r\n      fundingStartTimestamp = _fundingStartTimestamp;\r\n      fundingEndTimestamp = _fundingEndTimestamp;\r\n      token.mint(rcnFundDeposit, rcnFund);\r\n      CreateRCN(rcnFundDeposit, rcnFund);  // logs Ripio Intl fund\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable {\r\n      buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) payable {\r\n      require (!isFinalized);\r\n      require (block.timestamp >= fundingStartTimestamp || preallocationsWhitelist.whitelist(msg.sender));\r\n      require (block.timestamp <= fundingEndTimestamp);\r\n      require (msg.value != 0);\r\n      require (beneficiary != 0x0);\r\n      require (tx.gasprice <= gasPriceLimit);\r\n\r\n      uint256 tokens = msg.value.mul(tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = token.totalSupply().add(tokens);\r\n      uint256 checkedBought = bought[msg.sender].add(tokens);\r\n\r\n      // if sender is not whitelisted or exceeds their cap, cancel the transaction\r\n      require (checkedBought <= whiteList.whitelist(msg.sender) || preallocationsWhitelist.whitelist(msg.sender));\r\n\r\n      // return money if something goes wrong\r\n      require (tokenCreationCap >= checkedSupply);\r\n\r\n      // return money if tokens is less than the min amount and the token is not finalizing\r\n      // the min amount does not apply if the availables tokens are less than the min amount.\r\n      require (tokens >= minBuyTokens || (tokenCreationCap - token.totalSupply()) <= minBuyTokens);\r\n\r\n      token.mint(beneficiary, tokens);\r\n      bought[msg.sender] = checkedBought;\r\n      CreateRCN(beneficiary, tokens);  // logs token creation\r\n\r\n      forwardFunds();\r\n    }\r\n\r\n    function finalize() {\r\n      require (!isFinalized);\r\n      require (block.timestamp > fundingEndTimestamp || token.totalSupply() == tokenCreationCap);\r\n      require (msg.sender == ethFundDeposit);\r\n      isFinalized = true;\r\n      token.finishMinting();\r\n      whiteList.destruct();\r\n      preallocationsWhitelist.destruct();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n      ethFundDeposit.transfer(msg.value);\r\n    }\r\n\r\n    function setWhitelist(address _address, uint256 _amount) {\r\n      require (msg.sender == ethFundDeposit);\r\n      whiteList.setWhitelisted(_address, _amount);\r\n    }\r\n\r\n    function setPreallocationWhitelist(address _address, bool _status) {\r\n      require (msg.sender == ethFundDeposit);\r\n      preallocationsWhitelist.setWhitelisted(_address, _status);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPreallocationWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rcnFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rcnFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preallocationsWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethFundDeposit\",\"type\":\"address\"},{\"name\":\"_rcnFundDeposit\",\"type\":\"address\"},{\"name\":\"_fundingStartTimestamp\",\"type\":\"uint256\"},{\"name\":\"_fundingEndTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateRCN\",\"type\":\"event\"}]","ContractName":"RCNCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000005cf67329a262818e67c080e9d511a34d36152c000000000000000000000000005cf67329a262818e67c080e9d511a34d36152c00000000000000000000000000000000000000000000000000000000059ef39500000000000000000000000000000000000000000000000000000000059ff0b14","Library":"","SwarmSource":"bzzr://fb92d0c84aaa0859adc32373c668c3da3e4def13108c46346ca0d24fe5d03c4a"}]}