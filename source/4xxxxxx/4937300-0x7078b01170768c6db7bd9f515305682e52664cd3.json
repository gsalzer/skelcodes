{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/** GitHub repository: https://github.com/dggventures/syndicate/tree/master/tari */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract TariInvestment is Ownable {\r\n\r\n  // These are addresses that shouldn't consume too much gas in their fallback functions if they are contracts.\r\n  // Address of the target contract\r\n  address public investmentAddress = 0x33eFC5120D99a63bdF990013ECaBbd6c900803CE;\r\n  // Major partner address\r\n  address public majorPartnerAddress = 0x8f0592bDCeE38774d93bC1fd2c97ee6540385356;\r\n  // Minor partner address\r\n  address public minorPartnerAddress = 0xC787C3f6F75D7195361b64318CE019f90507f806;\r\n  // Record balances to allow refunding\r\n  mapping(address => uint) public balances;\r\n  // Total received. Used for refunding.\r\n  uint totalInvestment;\r\n  // Available refunds. Used for refunding.\r\n  uint availableRefunds;\r\n  // Deadline when refunding starts.\r\n  uint refundingDeadline;\r\n  // States: Open for investments - allows ether investments; transitions to Closed as soon as\r\n  //                                a transfer to the target investment address is made,\r\n  //         Closed for investments - only transfers to target investment address are allowed,\r\n  //         Refunding investments - any state can transition to refunding state\r\n  enum State{Open, Closed, Refunding}\r\n\r\n\r\n  State public state = State.Open;\r\n\r\n  function TariInvestment() public {\r\n    refundingDeadline = now + 10 days;\r\n  }\r\n\r\n  // Payments to this contract require a bit of gas. 100k should be enough.\r\n  function() payable public {\r\n    // Reject any value transfers once we have finished sending the balance to the target contract.\r\n    require(state == State.Open);\r\n    balances[msg.sender] += msg.value;\r\n    totalInvestment += msg.value;\r\n  }\r\n\r\n  // Transfer some funds to the target investment address.\r\n  // It is expected of all addresses to allow low gas transferrals of ether.\r\n  function execute_transfer(uint transfer_amount) public onlyOwner {\r\n    // Close down investments. Transferral of funds shouldn't be possible during refunding.\r\n    State current_state = state;\r\n    if (current_state == State.Open)\r\n      state = State.Closed;\r\n    require(state == State.Closed);\r\n\r\n    // Major fee is 1,50% = 15 / 1000\r\n    uint major_fee = transfer_amount * 15 / 1000;\r\n    // Minor fee is 1% = 10 / 1000\r\n    uint minor_fee = transfer_amount * 10 / 1000;\r\n    majorPartnerAddress.transfer(major_fee);\r\n    minorPartnerAddress.transfer(minor_fee);\r\n\r\n    // Send the rest \r\n    investmentAddress.transfer(transfer_amount - major_fee - minor_fee);\r\n  }\r\n\r\n  // Convenience function to transfer all available balance.\r\n  function execute_transfer() public onlyOwner {\r\n    execute_transfer(this.balance);\r\n  }\r\n\r\n  // Refund an investor when he sends a withdrawal transaction.\r\n  // Only available once refunds are enabled.\r\n  function withdraw() public {\r\n    if (state != State.Refunding) {\r\n      require(refundingDeadline <= now);\r\n      state = State.Refunding;\r\n      availableRefunds = this.balance;\r\n    }\r\n\r\n    uint withdrawal = availableRefunds * balances[msg.sender] / totalInvestment;\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(withdrawal);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"majorPartnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"execute_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minorPartnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"execute_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TariInvestment","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e59217734d48022b8b4dd2618f6c209e4e2218816ba01ab91ec8d29bdbf6bb03"}]}