{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\r\ncontract ERC223ReceivingContract {\r\n\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _from Transaction initiator, analogue of msg.sender\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data containig a function signature and/or parameters\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract Token {\r\n    /*\r\n     * Implements ERC 20 standard.\r\n     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\r\n     * https://github.com/ethereum/EIPs/issues/20\r\n     *\r\n     *  Added support for the ERC 223 \"tokenFallback\" method in a \"transfer\" function with a payload.\r\n     *  https://github.com/ethereum/EIPs/issues/223\r\n     */\r\n\r\n    /*\r\n     * This is a slight change to the ERC20 base standard.\r\n     * function totalSupply() constant returns (uint256 supply);\r\n     * is replaced with:\r\n     * uint256 public totalSupply;\r\n     * This automatically creates a getter function for the totalSupply.\r\n     * This is moved to the base contract since public getter functions are not\r\n     * currently recognised as an implementation of the matching abstract\r\n     * function by the compiler.\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     * ERC 20\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    /*\r\n     * ERC 223\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n\r\n    /*\r\n     * Events\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // There is no ERC223 compatible Transfer event, with `_data` included.\r\n}\r\n\r\n\r\n/// @title Standard token contract - Standard token implementation.\r\ncontract StandardToken is Token {\r\n\r\n    /*\r\n     * Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\r\n    /// tokenFallback if sender is a contract.\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data to be sent to tokenFallback\r\n    /// @return Returns success of function call.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(transfer(_to, _value));\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly.\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        if (codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\r\n    /// @dev Allows for an approved third party to transfer tokens from one\r\n    /// address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @return Returns success of function call.\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_to != address(this));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    /// @return Returns success of function call.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != 0x0);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        // already 0 to mitigate the race condition described here:\r\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read functions\r\n     */\r\n    /// @dev Returns number of allowed tokens that a spender can transfer on\r\n    /// behalf of a token owner.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    /// @return Returns remaining allowance for spender.\r\n    function allowance(address _owner, address _spender)\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by the given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @return Returns balance of owner.\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/// @title Raiden Token\r\ncontract RaidenToken is StandardToken {\r\n\r\n    /*\r\n     *  Terminology:\r\n     *  1 token unit = Rei\r\n     *  1 token = RDN = Rei * multiplier\r\n     *  multiplier set from token's number of decimals (i.e. 10 ** decimals)\r\n     */\r\n\r\n    /*\r\n     *  Token metadata\r\n     */\r\n    string constant public name = \"Raiden Token\";\r\n    string constant public symbol = \"RDN\";\r\n    uint8 constant public decimals = 18;\r\n    uint constant multiplier = 10 ** uint(decimals);\r\n\r\n    event Deployed(uint indexed _total_supply);\r\n    event Burnt(\r\n        address indexed _receiver,\r\n        uint indexed _num,\r\n        uint indexed _total_supply\r\n    );\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets dutch auction contract address\r\n    /// and assigns all tokens to dutch auction.\r\n    /// @param auction_address Address of dutch auction contract.\r\n    /// @param wallet_address Address of wallet.\r\n    /// @param initial_supply Number of initially provided token units (Rei).\r\n    function RaidenToken(\r\n        address auction_address,\r\n        address wallet_address,\r\n        uint initial_supply)\r\n        public\r\n    {\r\n        // Auction address should not be null.\r\n        require(auction_address != 0x0);\r\n        require(wallet_address != 0x0);\r\n\r\n        // Initial supply is in Rei\r\n        require(initial_supply > multiplier);\r\n\r\n        // Total supply of Rei at deployment\r\n        totalSupply = initial_supply;\r\n\r\n        balances[auction_address] = initial_supply / 2;\r\n        balances[wallet_address] = initial_supply / 2;\r\n\r\n        Transfer(0x0, auction_address, balances[auction_address]);\r\n        Transfer(0x0, wallet_address, balances[wallet_address]);\r\n\r\n        Deployed(totalSupply);\r\n\r\n        assert(totalSupply == balances[auction_address] + balances[wallet_address]);\r\n    }\r\n\r\n    /// @notice Allows `msg.sender` to simply destroy `num` token units (Rei). This means the total\r\n    /// token supply will decrease.\r\n    /// @dev Allows to destroy token units (Rei).\r\n    /// @param num Number of token units (Rei) to burn.\r\n    function burn(uint num) public {\r\n        require(num > 0);\r\n        require(balances[msg.sender] >= num);\r\n        require(totalSupply >= num);\r\n\r\n        uint pre_balance = balances[msg.sender];\r\n\r\n        balances[msg.sender] -= num;\r\n        totalSupply -= num;\r\n        Burnt(msg.sender, num, totalSupply);\r\n        Transfer(msg.sender, 0x0, num);\r\n\r\n        assert(balances[msg.sender] == pre_balance - num);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Dutch auction contract - distribution of a fixed number of tokens using an auction.\r\n/// The contract code is inspired by the Gnosis auction contract. Main difference is that the\r\n/// auction ends if a fixed number of tokens was sold.\r\ncontract DutchAuction {\r\n    /*\r\n     * Auction for the RDN Token.\r\n     *\r\n     * Terminology:\r\n     * 1 token unit = Rei\r\n     * 1 token = RDN = Rei * token_multiplier\r\n     * token_multiplier set from token's number of decimals (i.e. 10 ** decimals)\r\n     */\r\n\r\n    // Wait 7 days after the end of the auction, before anyone can claim tokens\r\n    uint constant public token_claim_waiting_period = 15 minutes;\r\n\r\n    // Bid value over which the address has to be whitelisted\r\n    // At deployment moment, less than 1k$\r\n    uint constant public bid_threshold = 2.5 ether;\r\n\r\n    /*\r\n     * Storage\r\n     */\r\n\r\n    RaidenToken public token;\r\n    address public owner_address;\r\n    address public wallet_address;\r\n    address public whitelister_address;\r\n\r\n    // Price decay function parameters to be changed depending on the desired outcome\r\n\r\n    // Starting price in WEI; e.g. 2 * 10 ** 18\r\n    uint public price_start;\r\n\r\n    // Divisor constant; e.g. 524880000\r\n    uint public price_constant;\r\n\r\n    // Divisor exponent; e.g. 3\r\n    uint32 public price_exponent;\r\n\r\n    // For calculating elapsed time for price\r\n    uint public start_time;\r\n    uint public end_time;\r\n    uint public start_block;\r\n\r\n    // Keep track of all ETH received in the bids\r\n    uint public received_wei;\r\n\r\n    // Keep track of cumulative ETH funds for which the tokens have been claimed\r\n    uint public funds_claimed;\r\n\r\n    uint public token_multiplier;\r\n\r\n    // Total number of Rei (RDN * token_multiplier) that will be auctioned\r\n    uint public num_tokens_auctioned;\r\n\r\n    // Wei per RDN (Rei * token_multiplier)\r\n    uint public final_price;\r\n\r\n    // Bidder address => bid value\r\n    mapping (address => uint) public bids;\r\n\r\n    // Whitelist for addresses that want to bid more than bid_threshold\r\n    mapping (address => bool) public whitelist;\r\n\r\n    Stages public stage;\r\n\r\n    /*\r\n     * Enums\r\n     */\r\n    enum Stages {\r\n        AuctionDeployed,\r\n        AuctionSetUp,\r\n        AuctionStarted,\r\n        AuctionEnded,\r\n        TokensDistributed\r\n    }\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner_address);\r\n        _;\r\n    }\r\n\r\n    modifier isWhitelister() {\r\n        require(msg.sender == whitelister_address);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event Deployed(\r\n        uint indexed _price_start,\r\n        uint indexed _price_constant,\r\n        uint32 indexed _price_exponent\r\n    );\r\n    event Setup();\r\n    event AuctionStarted(uint indexed _start_time, uint indexed _block_number);\r\n    event BidSubmission(\r\n        address indexed _sender,\r\n        uint _amount,\r\n        uint _missing_funds\r\n    );\r\n    event ClaimedTokens(address indexed _recipient, uint _sent_amount);\r\n    event AuctionEnded(uint _final_price);\r\n    event TokensDistributed();\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n\r\n    /// @dev Contract constructor function sets the starting price, divisor constant and\r\n    /// divisor exponent for calculating the Dutch Auction price.\r\n    /// @param _wallet_address Wallet address to which all contributed ETH will be forwarded.\r\n    /// @param _price_start High price in WEI at which the auction starts.\r\n    /// @param _price_constant Auction price divisor constant.\r\n    /// @param _price_exponent Auction price divisor exponent.\r\n    function DutchAuction(\r\n        address _wallet_address,\r\n        address _whitelister_address,\r\n        uint _price_start,\r\n        uint _price_constant,\r\n        uint32 _price_exponent)\r\n        public\r\n    {\r\n        require(_wallet_address != 0x0);\r\n        require(_whitelister_address != 0x0);\r\n        wallet_address = _wallet_address;\r\n        whitelister_address = _whitelister_address;\r\n\r\n        owner_address = msg.sender;\r\n        stage = Stages.AuctionDeployed;\r\n        changeSettings(_price_start, _price_constant, _price_exponent);\r\n        Deployed(_price_start, _price_constant, _price_exponent);\r\n    }\r\n\r\n    /// @dev Fallback function for the contract, which calls bid() if the auction has started.\r\n    function () public payable atStage(Stages.AuctionStarted) {\r\n        bid();\r\n    }\r\n\r\n    /// @notice Set `_token_address` as the token address to be used in the auction.\r\n    /// @dev Setup function sets external contracts addresses.\r\n    /// @param _token_address Token address.\r\n    function setup(address _token_address) public isOwner atStage(Stages.AuctionDeployed) {\r\n        require(_token_address != 0x0);\r\n        token = RaidenToken(_token_address);\r\n\r\n        // Get number of Rei (RDN * token_multiplier) to be auctioned from token auction balance\r\n        num_tokens_auctioned = token.balanceOf(address(this));\r\n\r\n        // Set the number of the token multiplier for its decimals\r\n        token_multiplier = 10 ** uint(token.decimals());\r\n\r\n        stage = Stages.AuctionSetUp;\r\n        Setup();\r\n    }\r\n\r\n    /// @notice Set `_price_start`, `_price_constant` and `_price_exponent` as\r\n    /// the new starting price, price divisor constant and price divisor exponent.\r\n    /// @dev Changes auction price function parameters before auction is started.\r\n    /// @param _price_start Updated start price.\r\n    /// @param _price_constant Updated price divisor constant.\r\n    /// @param _price_exponent Updated price divisor exponent.\r\n    function changeSettings(\r\n        uint _price_start,\r\n        uint _price_constant,\r\n        uint32 _price_exponent)\r\n        internal\r\n    {\r\n        require(stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp);\r\n        require(_price_start > 0);\r\n        require(_price_constant > 0);\r\n\r\n        price_start = _price_start;\r\n        price_constant = _price_constant;\r\n        price_exponent = _price_exponent;\r\n    }\r\n\r\n    /// @notice Adds account addresses to whitelist.\r\n    /// @dev Adds account addresses to whitelist.\r\n    /// @param _bidder_addresses Array of addresses.\r\n    function addToWhitelist(address[] _bidder_addresses) public isWhitelister {\r\n        for (uint32 i = 0; i < _bidder_addresses.length; i++) {\r\n            whitelist[_bidder_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @notice Removes account addresses from whitelist.\r\n    /// @dev Removes account addresses from whitelist.\r\n    /// @param _bidder_addresses Array of addresses.\r\n    function removeFromWhitelist(address[] _bidder_addresses) public isWhitelister {\r\n        for (uint32 i = 0; i < _bidder_addresses.length; i++) {\r\n            whitelist[_bidder_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    /// @notice Start the auction.\r\n    /// @dev Starts auction and sets start_time.\r\n    function startAuction() public isOwner atStage(Stages.AuctionSetUp) {\r\n        stage = Stages.AuctionStarted;\r\n        start_time = now;\r\n        start_block = block.number;\r\n        AuctionStarted(start_time, start_block);\r\n    }\r\n\r\n    /// @notice Finalize the auction - sets the final RDN token price and changes the auction\r\n    /// stage after no bids are allowed anymore.\r\n    /// @dev Finalize auction and set the final RDN token price.\r\n    function finalizeAuction() public atStage(Stages.AuctionStarted)\r\n    {\r\n        // Missing funds should be 0 at this point\r\n        uint missing_funds = missingFundsToEndAuction();\r\n        require(missing_funds == 0);\r\n\r\n        // Calculate the final price = WEI / RDN = WEI / (Rei / token_multiplier)\r\n        // Reminder: num_tokens_auctioned is the number of Rei (RDN * token_multiplier) that are auctioned\r\n        final_price = token_multiplier * received_wei / num_tokens_auctioned;\r\n\r\n        end_time = now;\r\n        stage = Stages.AuctionEnded;\r\n        AuctionEnded(final_price);\r\n\r\n        assert(final_price > 0);\r\n    }\r\n\r\n    /// --------------------------------- Auction Functions ------------------\r\n\r\n\r\n    /// @notice Send `msg.value` WEI to the auction from the `msg.sender` account.\r\n    /// @dev Allows to send a bid to the auction.\r\n    function bid()\r\n        public\r\n        payable\r\n        atStage(Stages.AuctionStarted)\r\n    {\r\n        require(msg.value > 0);\r\n        require(bids[msg.sender] + msg.value <= bid_threshold || whitelist[msg.sender]);\r\n        assert(bids[msg.sender] + msg.value >= msg.value);\r\n\r\n        // Missing funds without the current bid value\r\n        uint missing_funds = missingFundsToEndAuction();\r\n\r\n        // We require bid values to be less than the funds missing to end the auction\r\n        // at the current price.\r\n        require(msg.value <= missing_funds);\r\n\r\n        bids[msg.sender] += msg.value;\r\n        received_wei += msg.value;\r\n\r\n        // Send bid amount to wallet\r\n        wallet_address.transfer(msg.value);\r\n\r\n        BidSubmission(msg.sender, msg.value, missing_funds);\r\n\r\n        assert(received_wei >= msg.value);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `msg.sender` after the auction has ended.\r\n    /// @dev Claims tokens for `msg.sender` after auction. To be used if tokens can\r\n    /// be claimed by beneficiaries, individually.\r\n    function claimTokens() public atStage(Stages.AuctionEnded) returns (bool) {\r\n        return proxyClaimTokens(msg.sender);\r\n    }\r\n\r\n    /// @notice Claim auction tokens for `receiver_address` after the auction has ended.\r\n    /// @dev Claims tokens for `receiver_address` after auction has ended.\r\n    /// @param receiver_address Tokens will be assigned to this address if eligible.\r\n    function proxyClaimTokens(address receiver_address)\r\n        public\r\n        atStage(Stages.AuctionEnded)\r\n        returns (bool)\r\n    {\r\n        // Waiting period after the end of the auction, before anyone can claim tokens\r\n        // Ensures enough time to check if auction was finalized correctly\r\n        // before users start transacting tokens\r\n        require(now > end_time + token_claim_waiting_period);\r\n        require(receiver_address != 0x0);\r\n\r\n        if (bids[receiver_address] == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Number of Rei = bid_wei / Rei = bid_wei / (wei_per_RDN * token_multiplier)\r\n        uint num = (token_multiplier * bids[receiver_address]) / final_price;\r\n\r\n        // Due to final_price floor rounding, the number of assigned tokens may be higher\r\n        // than expected. Therefore, the number of remaining unassigned auction tokens\r\n        // may be smaller than the number of tokens needed for the last claimTokens call\r\n        uint auction_tokens_balance = token.balanceOf(address(this));\r\n        if (num > auction_tokens_balance) {\r\n            num = auction_tokens_balance;\r\n        }\r\n\r\n        // Update the total amount of funds for which tokens have been claimed\r\n        funds_claimed += bids[receiver_address];\r\n\r\n        // Set receiver bid to 0 before assigning tokens\r\n        bids[receiver_address] = 0;\r\n\r\n        require(token.transfer(receiver_address, num));\r\n\r\n        ClaimedTokens(receiver_address, num);\r\n\r\n        // After the last tokens are claimed, we change the auction stage\r\n        // Due to the above logic, rounding errors will not be an issue\r\n        if (funds_claimed == received_wei) {\r\n            stage = Stages.TokensDistributed;\r\n            TokensDistributed();\r\n        }\r\n\r\n        assert(token.balanceOf(receiver_address) >= num);\r\n        assert(bids[receiver_address] == 0);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get the RDN price in WEI during the auction, at the time of\r\n    /// calling this function. Returns `0` if auction has ended.\r\n    /// Returns `price_start` before auction has started.\r\n    /// @dev Calculates the current RDN token price in WEI.\r\n    /// @return Returns WEI per RDN (token_multiplier * Rei).\r\n    function price() public constant returns (uint) {\r\n        if (stage == Stages.AuctionEnded ||\r\n            stage == Stages.TokensDistributed) {\r\n            return 0;\r\n        }\r\n        return calcTokenPrice();\r\n    }\r\n\r\n    /// @notice Get the missing funds needed to end the auction,\r\n    /// calculated at the current RDN price in WEI.\r\n    /// @dev The missing funds amount necessary to end the auction at the current RDN price in WEI.\r\n    /// @return Returns the missing funds amount in WEI.\r\n    function missingFundsToEndAuction() constant public returns (uint) {\r\n\r\n        // num_tokens_auctioned = total number of Rei (RDN * token_multiplier) that is auctioned\r\n        uint required_wei_at_price = num_tokens_auctioned * price() / token_multiplier;\r\n        if (required_wei_at_price <= received_wei) {\r\n            return 0;\r\n        }\r\n\r\n        // assert(required_wei_at_price - received_wei > 0);\r\n        return required_wei_at_price - received_wei;\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n\r\n    /// @dev Calculates the token price (WEI / RDN) at the current timestamp\r\n    /// during the auction; elapsed time = 0 before auction starts.\r\n    /// Based on the provided parameters, the price does not change in the first\r\n    /// `price_constant^(1/price_exponent)` seconds due to rounding.\r\n    /// Rounding in `decay_rate` also produces values that increase instead of decrease\r\n    /// in the beginning; these spikes decrease over time and are noticeable\r\n    /// only in first hours. This should be calculated before usage.\r\n    /// @return Returns the token price - Wei per RDN.\r\n    function calcTokenPrice() constant private returns (uint) {\r\n        uint elapsed;\r\n        if (stage == Stages.AuctionStarted) {\r\n            elapsed = now - start_time;\r\n        }\r\n\r\n        uint decay_rate = elapsed ** price_exponent / price_constant;\r\n        return price_start * (1 + elapsed) / (1 + elapsed + decay_rate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"num_tokens_auctioned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"final_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_exponent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bid_threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funds_claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_claim_waiting_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelister_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidder_addresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"received_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidder_addresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_constant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver_address\",\"type\":\"address\"}],\"name\":\"proxyClaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"missingFundsToEndAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet_address\",\"type\":\"address\"},{\"name\":\"_whitelister_address\",\"type\":\"address\"},{\"name\":\"_price_start\",\"type\":\"uint256\"},{\"name\":\"_price_constant\",\"type\":\"uint256\"},{\"name\":\"_price_exponent\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_price_start\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_price_constant\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_price_exponent\",\"type\":\"uint32\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_start_time\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_block_number\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_missing_funds\",\"type\":\"uint256\"}],\"name\":\"BidSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sent_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_final_price\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensDistributed\",\"type\":\"event\"}]","ContractName":"DutchAuction","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000c7122633a4ef0bc72f7d02456ee2b11e97561e000000000000000000000000f2ec5fbe5cb9eded1eb83956730c152b0447a3d70000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000044380000000000000000000000000000000000000000000000000000000000000004","Library":"","SwarmSource":"bzzr://3bf7004ad2e66cf2c350b10a6c6b757898621c190a44e88cbc14104db5865d04"}]}