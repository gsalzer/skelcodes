{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Etherboard {\r\n    // Contract owner\r\n    address owner;\r\n    // Bid must be multiples of minBid\r\n    uint256 public minBid;\r\n    // Max num of leaders on the board\r\n    uint public maxLeaders;\r\n    \r\n    // Linked list of leaders on the board\r\n    uint public numLeaders;\r\n    address public head;\r\n    address public tail;\r\n    mapping (address => Leader) public leaders;\r\n    \r\n    struct Leader {\r\n        // Data\r\n        uint256 amount;\r\n        string url;\r\n        string img_url;\r\n        \r\n        // Pointer to next and prev element in linked list\r\n        address next;\r\n        address previous;\r\n    }\r\n    \r\n    \r\n    // Set initial parameters\r\n    function Etherboard() {\r\n        owner = msg.sender;\r\n        minBid = 0.001 ether;\r\n        numLeaders = 0;\r\n        maxLeaders = 10;\r\n    }\r\n    \r\n    \r\n    /*\r\n        Default function, make a new bid or add to bid by sending Eth to contract\r\n    */\r\n    function () payable {\r\n        // Bid must be larger than minBid\r\n        require(msg.value >= minBid);\r\n        \r\n        // Bid must be multiple of minBid. Remainder is sent back.\r\n        uint256 remainder  = msg.value % minBid;\r\n        uint256 bid_amount = msg.value - remainder;\r\n        \r\n        // If leaderboard is full, bid needs to be larger than the lowest placed leader\r\n        require(!((numLeaders == maxLeaders) && (bid_amount <= leaders[tail].amount)));\r\n        \r\n        // Get leader\r\n        Leader memory leader = popLeader(msg.sender);\r\n        \r\n        // Add to leader's bid\r\n        leader.amount += bid_amount;\r\n        \r\n        // Insert leader in appropriate position\r\n        insertLeader(leader);\r\n        \r\n        // If leaderboard is full, drop last leader\r\n        if (numLeaders > maxLeaders) {\r\n            dropLast();\r\n        }\r\n        \r\n        // Return remainder to sender\r\n        if (remainder > 0) msg.sender.transfer(remainder);\r\n    }\r\n    \r\n    \r\n    /*\r\n        Set the urls for the link and image\r\n    */\r\n    function setUrls(string url, string img_url) {\r\n        var leader = leaders[msg.sender];\r\n        \r\n        require(leader.amount > 0);\r\n        \r\n        // Set leader's url if it is not an empty string\r\n        bytes memory tmp_url = bytes(url);\r\n        if (tmp_url.length != 0) {\r\n            // Set url\r\n            leader.url = url;\r\n        }\r\n        \r\n        // Set leader's img_url if it is not an empty string\r\n        bytes memory tmp_img_url = bytes(img_url);\r\n        if (tmp_img_url.length != 0) {\r\n            // Set image url\r\n            leader.img_url = img_url;\r\n        }\r\n    }\r\n    \r\n    \r\n    /*\r\n        Allow user to reset urls if he wants nothing to show on the board\r\n    */\r\n    function resetUrls(bool url, bool img_url) {\r\n        var leader = leaders[msg.sender];\r\n        \r\n        require(leader.amount > 0);\r\n        \r\n        // Reset urls\r\n        if (url) leader.url = \"\";\r\n        if (img_url) leader.img_url = \"\";\r\n    }\r\n    \r\n    \r\n    /*\r\n        Get a leader at position\r\n    */\r\n    function getLeader(address key) constant returns (uint amount, string url, string img_url, address next) {\r\n        amount  = leaders[key].amount;\r\n        url     = leaders[key].url;\r\n        img_url = leaders[key].img_url;\r\n        next    = leaders[key].next;\r\n    }\r\n    \r\n    \r\n    /*\r\n        Remove from leaderboard LL\r\n    */\r\n    function popLeader(address key) internal returns (Leader leader) {\r\n        leader = leaders[key];\r\n        \r\n        // If no leader - return\r\n        if (leader.amount == 0) {\r\n            return leader;\r\n        }\r\n        \r\n        if (numLeaders == 1) {\r\n            tail = 0x0;\r\n            head = 0x0;\r\n        } else if (key == head) {\r\n            head = leader.next;\r\n            leaders[head].previous = 0x0;\r\n        } else if (key == tail) {\r\n            tail = leader.previous;\r\n            leaders[tail].next = 0x0;\r\n        } else {\r\n            leaders[leader.previous].next = leader.next;\r\n            leaders[leader.next].previous = leader.previous;\r\n        }\r\n        \r\n        numLeaders--;\r\n        return leader;\r\n    }\r\n    \r\n    \r\n    /*\r\n        Insert in leaderboard LinkedList\r\n    */\r\n    function insertLeader(Leader leader) internal {\r\n        if (numLeaders == 0) {\r\n            head = msg.sender;\r\n            tail = msg.sender;\r\n        } else if (leader.amount <= leaders[tail].amount) {\r\n            leaders[tail].next = msg.sender;\r\n            tail = msg.sender;\r\n        } else if (leader.amount > leaders[head].amount) {\r\n            leader.next = head;\r\n            leaders[head].previous = msg.sender;\r\n            head = msg.sender;\r\n        } else {\r\n            var current_addr = head;\r\n            var current = leaders[current_addr];\r\n            \r\n            while (current.amount > 0) {\r\n                if (leader.amount > current.amount) {\r\n                    leader.next = current_addr;\r\n                    leader.previous = current.previous;\r\n                    current.previous = msg.sender;\r\n                    leaders[current.previous].next = msg.sender;\r\n                    break;\r\n                }\r\n                \r\n                current_addr = current.next;\r\n                current = leaders[current_addr];\r\n            }\r\n        }\r\n        \r\n        leaders[msg.sender] = leader;\r\n        numLeaders++;\r\n    }\r\n    \r\n    \r\n    /*\r\n        Drop last leader from board and return his/her funds\r\n    */\r\n    function dropLast() internal {\r\n        // Get last leader\r\n        address leader_addr = tail;\r\n        var leader = popLeader(leader_addr);\r\n        \r\n        uint256 refund_amount = leader.amount;\r\n        \r\n        // Delete leader from board\r\n        delete leader;\r\n        \r\n        // Return funds to leader\r\n        leader_addr.transfer(refund_amount);\r\n    }\r\n\r\n    \r\n    /*\r\n        Modifier that only allows the owner to call certain functions\r\n    */\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    /*\r\n        Lets owner withdraw Eth from the contract. Owner can withdraw all funds,\r\n        because leaders who fall of the board can always be refunded with the new\r\n        bid: (newBid > refund).\r\n    */\r\n    function withdraw() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    \r\n    /*\r\n        Set new maximum for amount of leaders\r\n    */\r\n    function setMaxLeaders(uint newMax) onlyOwner {\r\n        maxLeaders = newMax;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"bool\"},{\"name\":\"img_url\",\"type\":\"bool\"}],\"name\":\"resetUrls\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaders\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"img_url\",\"type\":\"string\"},{\"name\":\"next\",\"type\":\"address\"},{\"name\":\"previous\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxLeaders\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getLeader\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"img_url\",\"type\":\"string\"},{\"name\":\"next\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"img_url\",\"type\":\"string\"}],\"name\":\"setUrls\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Etherboard","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f6322b0d5f2f5b78db290b9fe05176c09a794138047ec3374675ef913a1ec014"}]}