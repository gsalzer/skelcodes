{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\n\n\n/// @title etherfund.me ERC20 tokens issued crowdfunding contract\ncontract EtherFundMeIssueTokensCrowdfunding {\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// ERC20 Token fields\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Returns the name of the token - e.g. \"MyToken\".\n    string public name;\n\n    /// Returns the symbol of the token. E.g. \"HIX\".\n    string public symbol;\n\n    /// Returns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation\n    uint public decimals;\n\n    /// Returns the total token supply\n    uint public totalSupply;\n\n    /// approve() allowances\n    mapping (address => mapping (address => uint)) allowed;\n\n    /// holder balances\n    mapping(address => uint) balances;\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Crowdfunding fields\n    ///////////////////////////////////////////////////////////////////////////////\n    /// The crowdfunding project name\n    string public projectName;\n\n    /// The crowdfunding project description\n    string public projectDescription;\n\n    /// The crowdfunding team contact\n    string public teamEmail;\n\n    /// The start time of crowdfunding\n    uint public startsAt;\n\n    /// The end time of crowdfunding\n    uint public endsAt;\n\n    /// Crowdfunding team wallet\n    address public teamWallet;\n\n    /// etherfund.me fee wallet\n    address public feeReceiverWallet;\n\n    /// etherfund.me deploy agent\n    address public deployAgentWallet;\n\n    /// How much tokens will team will receive\n    uint teamTokensAmount;\n\n    /// How much tokens remain for sale\n    uint tokensForSale = totalSupply - teamTokensAmount;\n\n    /// How much token cost in wei \n    uint public tokenPrice;\n\n    /// if the funding goal is not reached, investors may withdraw their funds\n    uint public fundingGoal;\n\n    ///  How many distinct addresses have invested\n    uint public investorCount = 0;\n\n    ///  Has this crowdfunding been finalized\n    bool public finalized;\n\n    ///  Has this crowdfunding been paused\n    bool public halted;\n\n    ///  How much ETH each address has invested to this crowdfunding\n    mapping (address => uint256) public investedAmountOf;\n\n    ///  How much tokens each address has invested to this crowdfunding\n    mapping (address => uint256) public tokenAmountOf;\n\n    /// etherfund.me final fee in %\n    uint public constant ETHERFUNDME_FEE = 3;\n\n    /// etherfund.me each transaction fee in %\n    uint public constant ETHERFUNDME_ONLINE_FEE = 1;\n\n    /// if a project reach 60% of their funding goal it becomes successful\n    uint public constant GOAL_REACHED_CRITERION = 80;\n\n    /// Define pricing schedule using milestones.\n    struct Milestone {\n        // UNIX timestamp when this milestone kicks in\n        uint start;\n        // UNIX timestamp when this milestone kicks out\n        uint end;\n        // How many % tokens will add\n        uint bonus;\n    }\n\n    /// Define a structure for one investment event occurrence\n    struct Investment {\n        /// Who invested\n        address source;\n\n        /// Tokens count\n        uint tokensAmount;\n    }\n \n    /// Milestones list\n    Milestone[] public milestones;\n\n    /// Array element counter for investments\n    uint public investmentsCount;\n\n    /// How much tokens each address has invested to this contract\n    Investment[] public investments;\n\n    /// State machine\n    /// Preparing: All contract initialization calls and variables have not been set yet\n    /// Funding: Active crowdsale\n    /// Success: Minimum funding goal reached\n    /// Failure: Minimum funding goal not reached before ending time\n    /// Finalized: The finalized has been called and succesfully executed\n    /// Refunding: Refunds are loaded on the contract for reclaim\n    enum State { Unknown, Preparing, Funding, Success, Failure, Finalized, Refunding }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Crowdfunding events\n    ///////////////////////////////////////////////////////////////////////////////\n    /// A new investment was made\n    event Invested(address investor, uint weiAmount);\n    /// Withdraw was processed for a contributor\n    event Withdraw(address receiver, uint weiAmount);\n    /// Returning funds for a contributor\n    event Refund(address receiver, uint weiAmount);\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// ERC20 Token events\n    ///////////////////////////////////////////////////////////////////////////////\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// ERC20 Token modifiers\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @dev Modified allowing execution only if the crowdfunding is currently running\n    modifier inState(State state) {\n        require(getState() == state);\n        _;\n    }\n\n    /// @dev Limit token transfer until the sale is over.\n    modifier canTransfer() {\n        require(finalized);\n        _;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Crowdfunding modifiers\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @dev Modified allowing execution only if deploy agent call\n    modifier onlyDeployAgent() {\n        require(msg.sender == deployAgentWallet);\n        _;\n    }\n\n    /// @dev Modified allowing execution only if not stopped\n    modifier stopInEmergency {\n        require(!halted);\n        _;\n    }\n\n    /// @dev Modified allowing execution only if stopped\n    modifier onlyInEmergency {\n        require(halted);\n        _;\n    }\n\n    /// @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n    /// @param size payload size\n    modifier onlyPayloadSize(uint size) {\n       require(msg.data.length >= size + 4);\n       _;\n    }\n\n    /// @dev Constructor\n    /// @param _projectName crowdfunding project name\n    /// @param _projectDescription crowdfunding project short description\n    /// @param _teamEmail crowdfunding team contact\n    /// @param _startsAt crowdfunding start time\n    /// @param _endsAt crowdfunding end time\n    /// @param _fundingGoal funding goal in wei\n    /// @param _teamWallet  team address\n    /// @param _feeReceiverWallet  fee receiver address\n    /// @param _name ERC20 token name\n    /// @param _symbol ERC20 token symbol\n    /// @param _decimals  ERC20 token decimal\n    /// @param _totalSupply  ERC20 token amount\n    /// @param _tokenPrice token price in wei\n    /// @param _teamTokensAmount token amount for team\n    function EtherFundMeIssueTokensCrowdfunding(\n      string _projectName,\n      string _projectDescription,\n      string _teamEmail,\n      uint _startsAt,\n      uint _endsAt,\n      uint _fundingGoal,\n      address _teamWallet,\n      address _feeReceiverWallet,\n      string _name,\n      string _symbol,\n      uint _decimals,\n      uint _totalSupply,\n      uint _tokenPrice,\n      uint _teamTokensAmount) {\n        require(_startsAt != 0);\n        require(_endsAt != 0);\n        require(_fundingGoal != 0);\n        require(_teamWallet != 0);\n        require(_feeReceiverWallet != 0);\n        require(_decimals >= 2);\n        require(_totalSupply > 0);\n        require(_tokenPrice > 0);\n\n        deployAgentWallet = msg.sender;\n        projectName = _projectName;\n        projectDescription = _projectDescription;\n        teamEmail = _teamEmail;\n        startsAt = _startsAt;\n        endsAt = _endsAt;\n        fundingGoal = _fundingGoal;\n        teamWallet = _teamWallet;\n        feeReceiverWallet = _feeReceiverWallet;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        tokenPrice = _tokenPrice;\n        teamTokensAmount = _teamTokensAmount;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////\n    /// Crowdfunding methods\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @dev Crowdfund state machine management.\n    /// @return State current state\n    function getState() public constant returns (State) {\n        if (finalized)\n            return State.Finalized;\n        if (startsAt > now)\n            return State.Preparing;\n        if (now >= startsAt && now < endsAt)\n            return State.Funding;\n        if (isGoalReached())\n            return State.Success;\n        if (!isGoalReached() && this.balance > 0)\n            return State.Refunding;\n        return State.Failure;\n    }\n\n    /// @dev Goal was reached\n    /// @return true if the crowdsale has raised enough money to be a succes\n    function isGoalReached() public constant returns (bool reached) {\n        return this.balance >= (fundingGoal * GOAL_REACHED_CRITERION) / 100;\n    }\n\n    /// @dev Fallback method\n    function() payable {\n        invest();\n    }\n\n    /// @dev Allow contributions to this crowdfunding.\n    function invest() public payable stopInEmergency  {\n        require(getState() == State.Funding);\n        require(msg.value > 0);\n\n        uint weiAmount = msg.value;\n        address investor = msg.sender;\n\n        if(investedAmountOf[investor] == 0) {\n            // A new investor\n            investorCount++;\n        } \n\n        uint multiplier = 10 ** decimals;\n        uint tokensAmount = (weiAmount * multiplier) / tokenPrice;\n        assert(tokensAmount > 0);\n        \n        if(getCurrentMilestone().bonus > 0) {\n            tokensAmount += (tokensAmount * getCurrentMilestone().bonus) / 100;\n        }\n\n        assert(tokensForSale - tokensAmount >= 0);\n        tokensForSale -= tokensAmount;\n        investments.push(Investment(investor, tokensAmount));\n        investmentsCount++;\n        tokenAmountOf[investor] += tokensAmount;\n\n        // calculate online fee\n        uint onlineFeeAmount = (weiAmount * ETHERFUNDME_ONLINE_FEE) / 100;\n        Withdraw(feeReceiverWallet, onlineFeeAmount);\n        // send online fee\n        feeReceiverWallet.transfer(onlineFeeAmount);\n\n        uint investedAmount = weiAmount - onlineFeeAmount;\n        // Update investor\n        investedAmountOf[investor] += investedAmount;\n        // Tell us invest was success\n        Invested(investor, investedAmount);\n    }\n\n    /// @dev Finalize a succcesful crowdfunding. The team can triggre a call the contract that provides post-crowdfunding actions, like releasing the funds.\n    function finalize() public inState(State.Success) stopInEmergency  {\n        require(msg.sender == deployAgentWallet || msg.sender == teamWallet);\n        require(!finalized);\n\n        finalized = true;\n\n        uint feeAmount = (this.balance * ETHERFUNDME_FEE) / 100;\n        uint teamAmount = this.balance - feeAmount;\n\n        Withdraw(teamWallet, teamAmount);\n        teamWallet.transfer(teamAmount);\n\n        Withdraw(feeReceiverWallet, feeAmount);\n        feeReceiverWallet.transfer(feeAmount);\n\n        // assign team tokens \n        balances[teamWallet] += (teamTokensAmount + tokensForSale);\n        \n        // Distribute tokens to investors\n        for (uint i = 0; i < investments.length; i++) {\n            balances[investments[i].source] += investments[i].tokensAmount;\n            Transfer(0, investments[i].source, investments[i].tokensAmount);\n        }\n    }\n\n    /// @dev Investors can claim refund.\n    function refund() public inState(State.Refunding) {\n        uint weiValue = investedAmountOf[msg.sender];\n        if (weiValue == 0) revert();\n        investedAmountOf[msg.sender] = 0;\n        Refund(msg.sender, weiValue);\n        msg.sender.transfer(weiValue);\n    }\n    \n    \n    /// @dev Called by the deploy agent on emergency, triggers stopped state\n    function halt() public onlyDeployAgent {\n        halted = true;\n    }\n\n    /// @dev Called by the deploy agent on end of emergency, returns to normal state\n    function unhalt() public onlyDeployAgent onlyInEmergency {\n        halted = false;\n    }\n\n    /// @dev Add a milestone\n    /// @param _start start bonus time \n    /// @param _end end bonus  time\n    /// @param _bonus bonus percent\n    function addMilestone(uint _start, uint _end, uint _bonus) public onlyDeployAgent {\n        require(_bonus > 0 && _end > _start);\n        milestones.push(Milestone(_start, _end, _bonus));\n    }\n\n    /// @dev Get the current milestone or bail out if we are not in the milestone periods.\n    /// @return Milestone current bonus milestone\n    function getCurrentMilestone() private constant returns (Milestone) {\n        for (uint i = 0; i < milestones.length; i++) {\n            if (milestones[i].start <= now && milestones[i].end > now) {\n                return milestones[i];\n            }\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////////////\n    /// ERC20 Token methods\n    ///////////////////////////////////////////////////////////////////////////////\n    /// @dev Returns the account balance of another account with address _owner\n    /// @param _owner holder address\n    /// @return balance amount\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n    /// @param _to dest address\n    /// @param _value tokens amount\n    /// @return transfer result\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n        require((_to != 0) && (_to != address(this)));\n        require(balances[msg.sender] >= _value);\n\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n    /// @param _from source address\n    /// @param _to dest address\n    /// @param _value tokens amount\n    /// @return transfer result\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value.\n    /// @param _spender holder address\n    /// @param _value tokens amount\n    /// @return result\n    function approve(address _spender, uint _value) returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require ((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n    /// @param _owner holder address\n    /// @param _spender spender address\n    /// @return remain amount\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHERFUNDME_ONLINE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamEmail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReceiverWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOAL_REACHED_CRITERION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"addMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGoalReached\",\"outputs\":[{\"name\":\"reached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHERFUNDME_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployAgentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_projectName\",\"type\":\"string\"},{\"name\":\"_projectDescription\",\"type\":\"string\"},{\"name\":\"_teamEmail\",\"type\":\"string\"},{\"name\":\"_startsAt\",\"type\":\"uint256\"},{\"name\":\"_endsAt\",\"type\":\"uint256\"},{\"name\":\"_fundingGoal\",\"type\":\"uint256\"},{\"name\":\"_teamWallet\",\"type\":\"address\"},{\"name\":\"_feeReceiverWallet\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_teamTokensAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherFundMeIssueTokensCrowdfunding","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000059e153800000000000000000000000000000000000000000000000000000000059f51a000000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000021ae08a104c6bcde90124626d8862d6335f04c14000000000000000000000000f56d349b72263388e9a3edc426c43be48deffd8e00000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000004a9b638448800000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000049e57d63540000000000000000000000000000000000000000000000000000000000000000006556e694269740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004741206469676974616c2061737365742f746f6b656e20746861742063616e206265207573656420696e20636f6e6a756e6374696f6e207769746820756e69626974206c6162732e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013756e696269746c616273406d61696c2e636f6d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e6942697420455243323020546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006554e494249540000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c9f105d339408ed716e51d3fc001430ed591d046460a26016cb09c74798c358d"}]}