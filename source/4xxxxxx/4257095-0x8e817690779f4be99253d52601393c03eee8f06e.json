{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\n */\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    /**\r\n     * Reviewed:\r\n     * - Interger overflow = OK, checked\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\n/**\r\n * CTest1 crowdsale contract.\r\n *\r\n * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\r\n *\r\n *\r\n */\r\ncontract CTest1 is StandardToken, SafeMath {\r\n\r\n    string public name = \"CTest1 Token\";\r\n    string public symbol = \"CTest1\";\r\n    uint public decimals = 18;\r\n    \r\n    uint256 public totalSupply = 1000000;\r\n\r\n\r\n    // Set the contract controller address\r\n    // Set the 3 Founder addresses\r\n    address public owner = msg.sender;\r\n    address public Founder1 = 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E;\r\n    address public Founder2 = 0x00A591199F53907480E1f5A00958b93B43200Fe4;\r\n    address public Founder3 = 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D;\r\n\r\n\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    \r\n   \r\n// CTest1 TOKEN FOUNDER ETH ADDRESSES \r\n// 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E\r\n// 0x00A591199F53907480E1f5A00958b93B43200Fe4\r\n// 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D\r\n    \r\n    \r\n    function () payable {\r\n        \r\n        \r\n        //If all the tokens are gone, stop!\r\n        if (totalSupply < 1)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        uint256 rate = 0;\r\n        address recipient = msg.sender;\r\n        \r\n        \r\n        //Set the price to 0.0003 ETH/CTest1\r\n        //$0.10 per\r\n        if (totalSupply > 975000)\r\n        {\r\n            rate = 3340;\r\n        }\r\n        \r\n        //Set the price to 0.0015 ETH/CTest1\r\n        //$0.50 per\r\n        if (totalSupply < 975001)\r\n        {\r\n            rate = 668;\r\n        }\r\n        \r\n        //Set the price to 0.0030 ETH/CTest1\r\n        //$1.00 per\r\n        if (totalSupply < 875001)\r\n        {\r\n            rate = 334;\r\n        }\r\n        \r\n        //Set the price to 0.0075 ETH/CTest1\r\n        //$2.50 per\r\n        if (totalSupply < 475001)\r\n        {\r\n            rate = 134;\r\n        }\r\n        \r\n        \r\n       \r\n\r\n        \r\n        uint256 tokens = safeMul(msg.value, rate);\r\n        tokens = tokens/1 ether;\r\n        \r\n        \r\n        //Make sure they send enough to buy atleast 1 token.\r\n        if (tokens < 1)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Make sure someone isn't buying more than the remaining supply\r\n        uint256 check = safeSub(totalSupply, tokens);\r\n        if (check < 0)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 975000 && check < 975000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 875000 && check < 875000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        //Make sure someone isn't buying more than the current tier\r\n        if (totalSupply > 475000 && check < 475000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        //Prevent any ETH address from buying more than 50 CTest1 during the pre-sale\r\n        if ((balances[recipient] + tokens) > 50 && totalSupply > 975000)\r\n        {\r\n            throw;\r\n        }\r\n        \r\n        \r\n        balances[recipient] = safeAdd(balances[recipient], tokens);\r\n        \r\n        totalSupply = safeSub(totalSupply, tokens);\r\n\r\n    \r\n\t    Founder1.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n\t    Founder2.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n\t    Founder3.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\r\n\r\n        Buy(recipient, msg.value, tokens);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    //Burn all remaining tokens.\r\n    //Only contract creator can do this.\r\n    function Burn () {\r\n        \r\n        if (msg.sender == owner && totalSupply > 0)\r\n        {\r\n            totalSupply = 0;\r\n        } else {throw;}\r\n\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Founder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CTest1","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://619f68b775ef6c544f08936fb6a1834835938b545826e7c7bb1a6f1d46bf8fa8"}]}