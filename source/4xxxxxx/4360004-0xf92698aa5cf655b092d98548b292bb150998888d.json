{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  NotaryPlatformToken.sol v1.0.1\r\n * \r\n *  Bilal Arif - https://twitter.com/furusiyya_\r\n *  Notary Platform\r\n */\r\n\r\npragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n     /*\r\n      @title Ownable\r\n      @dev The Ownable contract has an owner address, and provides basic authorization control\r\n      functions, this simplifies the implementation of \"user permissions\".\r\n    */\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable(address _owner){\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n\r\n}\r\ncontract Pausable is Ownable {\r\n  \r\n  event Pause(bool indexed state);\r\n\r\n  bool private paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev return the current state of contract\r\n   */\r\n  function Paused() external constant returns(bool){ return paused; }\r\n\r\n  /**\r\n   * @dev called by the owner to pause or unpause, triggers stopped state\r\n   * on first call and returns to normal state on second call\r\n   */\r\n  function tweakState() external onlyOwner {\r\n    paused = !paused;\r\n    Pause(paused);\r\n  }\r\n\r\n}\r\ncontract Allocations{\r\n\r\n\t// timestamp when token release is enabled\r\n  \tuint256 private releaseTime;\r\n\r\n\tmapping (address => uint256) private allocations;\r\n\r\n\tfunction Allocations(){\r\n\t\treleaseTime = now + 198 days;\r\n\t\tallocate();\r\n\t}\r\n\r\n\t/**\r\n\t * @notice NTRY Token distribution between team members.\r\n\t */\r\n    function allocate() private {\r\n      allocations[0xab1cb1740344A9280dC502F3B8545248Dc3045eA] = 4000000 * 1 ether;\r\n      allocations[0x330709A59Ab2D1E1105683F92c1EE8143955a357] = 4000000 * 1 ether;\r\n      allocations[0xAa0887fc6e8896C4A80Ca3368CFd56D203dB39db] = 3000000 * 1 ether;\r\n      allocations[0x1fbA1d22435DD3E7Fa5ba4b449CC550a933E72b3] = 200000 * 1 ether;\r\n      allocations[0xC9d5E2c7e40373ae576a38cD7e62E223C95aBFD4] = 200000 * 1 ether;\r\n      allocations[0xabc0B64a38DE4b767313268F0db54F4cf8816D9C] = 220000 * 1 ether;\r\n      allocations[0x5d85bCDe5060C5Bd00DBeDF5E07F43CE3Ccade6f] = 50000 * 1 ether;\r\n      allocations[0xecb1b0231CBC0B04015F9e5132C62465C128B578] = 500000 * 1 ether;\r\n      allocations[0xFF22FA2B3e5E21817b02a45Ba693B7aC01485a9C] = 2955000 * 1 ether;\r\n    }\r\n\r\n\t/**\r\n\t * @notice Transfers tokens held by timelock to beneficiary.\r\n\t */\r\n\tfunction release() internal returns (uint256 amount){\r\n\t\tamount = allocations[msg.sender];\r\n\t\tallocations[msg.sender] = 0;\r\n\t\treturn amount;\r\n\t}\r\n\r\n\t/**\r\n  \t * @dev returns releaseTime\r\n  \t */\r\n\tfunction RealeaseTime() external constant returns(uint256){ return releaseTime; }\r\n\r\n    modifier timeLock() { \r\n\t\trequire(now >= releaseTime);\r\n\t\t_; \r\n\t}\r\n\r\n\tmodifier isTeamMember() { \r\n\t\trequire(allocations[msg.sender] >= 10000 * 1 ether); \r\n\t\t_; \r\n\t}\r\n\r\n}\r\n\r\ncontract NotaryPlatformToken is Pausable, Allocations, ReentrancyGuard{\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string constant public name = \"Notary Platform Token\";\r\n  string constant public symbol = \"NTRY\";\r\n  uint8 constant public decimals = 18;\r\n  uint256 public totalSupply = 150000000 * 1 ether;\r\n  string constant version = \"v1.0.1\";\r\n\r\n  mapping(address => uint256) private balances;\r\n  mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function NotaryPlatformToken() Ownable(0x1538EF80213cde339A333Ee420a85c21905b1b2D){\r\n    // Allocate initial balance to the owner //\r\n    balances[0x244092a2FECFC48259cf810b63BA3B3c0B811DCe] = 134875000 * 1 ether;\r\n    require(ICOParticipants(0x244092a2FECFC48259cf810b63BA3B3c0B811DCe));\r\n  }\r\n\r\n\r\n  /** Externals **/\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) external whenNotPaused onlyPayloadSize(2 * 32) returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) external whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) external whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) external whenNotPaused returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) external whenNotPaused returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @notice Transfers tokens held by timelock to beneficiary.\r\n  */\r\n  function claim() external whenNotPaused nonReentrant timeLock isTeamMember {\r\n    balances[msg.sender] = balances[msg.sender].add(release());\r\n  }\r\n\r\n  /**\r\n   *                  ========== Token migration support ========\r\n   */\r\n  uint256 public totalMigrated;\r\n  bool private upgrading = false;\r\n  MigrationAgent private agent;\r\n  event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n  event Upgrading(bool status);\r\n\r\n  function migrationAgent() external constant returns(address){ return agent; }\r\n  function upgradingEnabled()  external constant returns(bool){ return upgrading; }\r\n\r\n  /**\r\n   * @notice Migrate tokens to the new token contract.\r\n   * @dev Required state: Operational Migration\r\n   * @param _value The amount of token to be migrated\r\n   */\r\n  function migrate(uint256 _value) external nonReentrant isUpgrading {\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    require(agent.isMigrationAgent());\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    totalMigrated = totalMigrated.add(_value);\r\n    \r\n    if(!agent.migrateFrom(msg.sender, _value)){\r\n      revert();\r\n    }\r\n    Migrate(msg.sender, agent, _value);\r\n  }\r\n\r\n  /**\r\n   * @notice Set address of migration target contract and enable migration\r\n   * process.\r\n   * @param _agent The address of the MigrationAgent contract\r\n   */\r\n  function setMigrationAgent(address _agent) external isUpgrading onlyOwner {\r\n    require(_agent != 0x00);\r\n    agent = MigrationAgent(_agent);\r\n    if(!agent.isMigrationAgent()){\r\n      revert();\r\n    }\r\n    \r\n    if(agent.originalSupply() != totalSupply){\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Enable upgrading to allow tokens migration to new contract\r\n   * process.\r\n   */\r\n  function tweakUpgrading() external onlyOwner{\r\n      upgrading = !upgrading;\r\n      Upgrading(upgrading);\r\n  }\r\n\r\n\r\n  /** Interface marker */\r\n  function isTokenContract() external constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  modifier isUpgrading() { \r\n    require(upgrading); \r\n    _; \r\n  }\r\n\r\n\r\n  /**\r\n   * Fix for the ERC20 short address attack\r\n   *\r\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     require(msg.data.length == size + 4);\r\n     _;\r\n  }\r\n\r\n  function () {\r\n    //if ether is sent to this address, send it back.\r\n    revert();\r\n  }\r\n  \r\n  \r\n\r\n   function ICOParticipants(address _supplyOwner) private returns(bool){\r\n        /**\r\n         * Adresses who participated in first day of ICO and got first version of\r\n         * token. They will automatically get this latest version of token.\r\n         * ICO Contract: https://etherscan.io/address/0x34a3deb32b4705018f1e543a5867cf01aff3f15b\r\n         * Latest transaction hash: https://etherscan.io/tx/0x1d179fb045a86eed7a78e2e247c0822fc43f1a163f893996f88fdccd455d515b\r\n        */\r\n        balances[0xd0780ab2aa7309e139a1513c49fb2127ddc30d3d] = 15765750000000000000000;\r\n        balances[0x196a484db36d2f2049559551c182209143db4606] = 2866500000000000000000;\r\n        balances[0x36cfb5a6be6b130cfceb934d3ca72c1d72c3a7d8] = 28665000000000000000000;\r\n        balances[0x21c4ff1738940b3a4216d686f2e63c8dbcb7dc44] = 2866500000000000000000;\r\n        balances[0xd1f3a1a16f4ab35e5e795ce3f49ee2dff2dd683b] = 1433250000000000000000;\r\n        balances[0xd45bf2debd1c4196158dcb177d1ae910949dc00a] = 5733000000000000000000;\r\n        balances[0xdc5984a2673c46b68036076026810ffdffb695b8] = 1433250000000000000000;\r\n        balances[0x6ee541808c463116a82d76649da0502935fa8d08] = 57330000000000000000000;\r\n        balances[0xde3270049c833ff2a52f18c7718227eb36a92323] = 4948241046840000000000;\r\n        balances[0x51a51933721e4ada68f8c0c36ca6e37914a8c609] = 17199000000000000000000;\r\n        balances[0x737069e6f9f02062f4d651c5c8c03d50f6fc99c6] = 2866500000000000000000;\r\n        balances[0xa6a14a81ec752e0ed5391a22818f44aa240ffbb1] = 2149875000000000000000;\r\n        balances[0xeac8483261078517528de64956dbd405f631265c] = 11466000000000000000000;\r\n        balances[0x7736154662ba56c57b2be628fe0e44a609d33dfb] = 2866500000000000000000;\r\n        balances[0xc1c113c60ebf7d92a3d78ff7122435a1e307ce05] = 5733000000000000000000;\r\n        balances[0xfffdfaef43029d6c749ceff04f65187bd50a5311] = 2293200000000000000000;\r\n        balances[0x8854f86f4fbd88c4f16c4f3d5a5500de6d082adc] = 2866500000000000000000;\r\n        balances[0x26c32811447c8d0878b2dae7f4538ae32de82d57] = 2436525000000000000000;\r\n        balances[0xe752737dd519715ab0fa9538949d7f9249c7c168] = 2149875000000000000000;\r\n        balances[0x01ed3975993c8bebff2fb6a7472679c6f7b408fb] = 11466000000000000000000;\r\n        balances[0x7924c67c07376cf7c4473d27bee92fe82dfd26c5] = 11466000000000000000000;\r\n        balances[0xf360b24a530d29c96a26c2e34c0dabcab12639f4] = 8599500000000000000000;\r\n        balances[0x6a7f63709422a986a953904c64f10d945c8afba1] = 2866500000000000000000;\r\n        balances[0xa68b4208e0b7aacef5e7cf8d6691d5b973bad119] = 2149875000000000000000;\r\n        balances[0xb9bd4f154bb5f2be5e7db0357c54720c7f35405d] = 2149875000000000000000;\r\n        balances[0x6723f81cdc9a5d5ef2fe1bfbedb4f83bd017d3dc] = 5446350000000000000000;\r\n        balances[0x8f066f3d9f75789d9f126fdd7cfbcc38a768985d] = 146737500000000000000000;\r\n        balances[0xf49c6e7e36a714bbc162e31ca23a04e44dcaf567] = 25769835000000000000000;\r\n        balances[0x1538ef80213cde339a333ee420a85c21905b1b2d] = 2730000000000000000000;\r\n        balances[0x81a837cc83b55a67351c1070920f061dda307348] = 25511850000000000000000;\r\n        balances[_supplyOwner] -= 417961751000000000000000;\r\n        return true;\r\n \t}\r\n\r\n}\r\n\r\n/// @title Migration Agent interface\r\ncontract MigrationAgent {\r\n\r\n  uint256 public originalSupply;\r\n  \r\n  function migrateFrom(address _from, uint256 _value) external returns(bool);\r\n  \r\n  /** Interface marker */\r\n  function isMigrationAgent() external constant returns (bool) {\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tweakUpgrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tweakState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RealeaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Upgrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NotaryPlatformToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6af453e855522ba429ffa1f348afeebf75845f0b2fea12a051e5a369af9e8464"}]}