{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract SOUL is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"SOUL COIN\";\r\n    string public symbol = \"SIN\";\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 public totalSupply = 736303 * (uint256(10) ** decimals);\r\n    uint256 public totalRaised; // total ether raised (in wei)\r\n\r\n    uint256 public startTimestamp; // timestamp after which ICO will start\r\n    uint256 public durationSeconds = 51 * 24 * 60 * 60; // 51 days\r\n\r\n    uint256 public minCap; // the ICO ether goal (in wei)\r\n    uint256 public maxCap; // the ICO ether max cap (in wei)\r\n\r\n    /**\r\n     * Address which will receive raised funds \r\n     * and owns the total supply of tokens\r\n     */\r\n    address public fundsWallet;\r\n\r\n    function SOUL(\r\n        address _fundsWallet,\r\n        uint256 _startTimestamp,\r\n        uint256 _minCap,\r\n        uint256 _maxCap) {\r\n        fundsWallet = _fundsWallet;\r\n        startTimestamp = _startTimestamp;\r\n        minCap = _minCap;\r\n        maxCap = _maxCap;\r\n\r\n        // initially assign all tokens to the fundsWallet\r\n        balances[fundsWallet] = totalSupply;\r\n        Transfer(0x0, fundsWallet, totalSupply);\r\n    }\r\n\r\n    function() isIcoOpen payable {\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        uint256 tokenAmount = calculateTokenAmount(msg.value);\r\n        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n        Transfer(fundsWallet, msg.sender, tokenAmount);\r\n\r\n        // immediately transfer ether to fundsWallet\r\n        fundsWallet.transfer(msg.value);\r\n    }\r\n\r\n    function calculateTokenAmount(uint256 weiAmount) constant returns(uint256) {\r\n        // standard rate: 1 ETH : 666 SIN\r\n        uint256 tokenAmount = weiAmount.mul(666);\r\n        if (now <= startTimestamp + 12 days) {\r\n            // +66% bonus during first 12 days\r\n            return tokenAmount.mul(166).div(100);\r\n        } else {\r\n            return tokenAmount;\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) isIcoFinished returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) isIcoFinished returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    modifier isIcoOpen() {\r\n        require(now >= startTimestamp);\r\n        require(now <= (startTimestamp + durationSeconds) || totalRaised < minCap);\r\n        require(totalRaised <= maxCap);\r\n        _;\r\n    }\r\n\r\n    modifier isIcoFinished() {\r\n        require(now >= startTimestamp);\r\n        require(totalRaised >= maxCap || (now >= (startTimestamp + durationSeconds) && totalRaised >= minCap));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Factory {\r\n\r\n    function createContract(\r\n        address _fundsWallet,\r\n        uint256 _startTimestamp,\r\n        uint256 _minCapEth,\r\n        uint256 _maxCapEth) returns(address created) \r\n    {\r\n        return new SOUL(\r\n            _fundsWallet,\r\n            _startTimestamp,\r\n            _minCapEth * 1 ether,\r\n            _maxCapEth * 1 ether\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_minCapEth\",\"type\":\"uint256\"},{\"name\":\"_maxCapEth\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[{\"name\":\"created\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d949078960924e5f41ba9d7e157eb8b5cf17ba6f8582067b31943077b3fbbbc9"}]}