{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * Virtual Cash (VCA) Token \r\n *\r\n * This is a very simple token with the following properties:\r\n *  - 20.000.000 tokens maximum supply\r\n *  - 15.000.000 crowdsale allocation\r\n *  - 5.000.000 initial supply to be use for Bonus, Airdrop, Marketing, Ads, Bounty, Future Dev, Reserved tokens\r\n *  - Investor receives bonus tokens from Company Wallet during bonus phases\r\n * \r\n * Visit https://virtualcash.shop for more information and token holder benefits.\r\n */\r\n\r\n\t/**\r\n\t* @title SafeMath\r\n\t* @dev Math operations with safety checks that throw on error\r\n\t*/\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\t/**\r\n\t* @title ERC20Basic\r\n\t* @dev Simpler version of ERC20 interface\r\n\t* @dev see https://github.com/ethereum/EIPs/issues/179\r\n\t*/\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\t/**\r\n\t* @title Basic token\r\n\t* @dev Basic version of StandardToken, with no allowances.\r\n\t*/\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\t/**\r\n\t* @title ERC20 interface\r\n\t* @dev see https://github.com/ethereum/EIPs/issues/20\r\n\t*/\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\t/**\r\n\t* @title Standard ERC20 token\r\n\t*\r\n\t* @dev Implementation of the basic standard token.\r\n\t* @dev https://github.com/ethereum/EIPs/issues/20\r\n\t* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\t*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t*\r\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param _owner address The address which owns the funds.\r\n\t* @param _spender address The address which will spend the funds.\r\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t*/\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\t/**\r\n\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t*/\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\t/**\r\n\t* @title Ownable\r\n\t* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\t* functions, this simplifies the implementation of \"user permissions\".\r\n\t*/\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t* account.\r\n\t*/\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\t/**\r\n\t* @dev VCA_Token is StandardToken, Ownable\r\n\t*/\r\ncontract VCA_Token is StandardToken, Ownable {\r\n  string public constant name = \"Virtual Cash\";\r\n  string public constant symbol = \"VCA\";\r\n  uint256 public constant decimals = 8;\r\n\r\n  uint256 public constant UNIT = 10 ** decimals;\r\n\r\n  address public companyWallet;\r\n  address public admin;\r\n\r\n  uint256 public tokenPrice = 0.00025 ether;\r\n  uint256 public maxSupply = 20000000 * UNIT;\r\n  uint256 public totalSupply = 0;\r\n  uint256 public totalWeiReceived = 0;\r\n\r\n  uint256 startDate  = 1517443260; //\t12:01 GMT February 1 2018\r\n  uint256 endDate    = 1522537260; //\t12:00 GMT March 15 2018\r\n\r\n  uint256 bonus35end = 1517702460; //\t12:01 GMT February 4 2018\r\n  uint256 bonus32end = 1517961660; //\t12:01 GMT February 7 2018\r\n  uint256 bonus29end = 1518220860; //\t12:01 GMT February 10 2018\r\n  uint256 bonus26end = 1518480060; //\t12:01 GMT February 13 2018\r\n  uint256 bonus23end = 1518825660; //\t12:01 GMT February 17 2018\r\n  uint256 bonus20end = 1519084860; //\t12:01 GMT February 20 2018\r\n  uint256 bonus17end = 1519344060; //\t12:01 GMT February 23 2018\r\n  uint256 bonus14end = 1519603260; //\t12:01 GMT February 26 2018\r\n  uint256 bonus11end = 1519862460; //\t12:01 GMT March 1 2018\r\n  uint256 bonus09end = 1520121660; //\t12:01 GMT March 4 2018\r\n  uint256 bonus06end = 1520380860; //\t12:01 GMT March 7 2018\r\n  uint256 bonus03end = 1520640060; //\t12:01 GMT March 10 2018\r\n\r\n\t/**\r\n\t* event for token purchase logging\r\n\t* @param purchaser - who paid for the tokens\r\n\t* @param beneficiary - who got the tokens\r\n\t* @param value - weis paid for purchase\r\n\t* @param amount - amount of tokens purchased\r\n\t*/\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  event NewSale();\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  function VCA_Token(address _companyWallet, address _admin) public {\r\n    companyWallet = _companyWallet;\r\n    admin = _admin;\r\n    balances[companyWallet] = 5000000 * UNIT;\r\n    totalSupply = totalSupply.add(5000000 * UNIT);\r\n    Transfer(address(0x0), _companyWallet, 5000000 * UNIT);\r\n  }\r\n\r\n  function setAdmin(address _admin) public onlyOwner {\r\n    admin = _admin;\r\n  }\r\n\r\n  function calcBonus(uint256 _amount) internal view returns (uint256) {\r\n\t              uint256 bonusPercentage = 35;\r\n    if (now > bonus35end) bonusPercentage = 32;\r\n    if (now > bonus32end) bonusPercentage = 29;\r\n    if (now > bonus29end) bonusPercentage = 26;\r\n    if (now > bonus26end) bonusPercentage = 23;\r\n    if (now > bonus23end) bonusPercentage = 20;\r\n    if (now > bonus20end) bonusPercentage = 17;\r\n    if (now > bonus17end) bonusPercentage = 14;\r\n    if (now > bonus14end) bonusPercentage = 11;\r\n    if (now > bonus11end) bonusPercentage = 9;\r\n    if (now > bonus09end) bonusPercentage = 6;\r\n    if (now > bonus06end) bonusPercentage = 3;\r\n    if (now > bonus03end) bonusPercentage = 0;\r\n    return _amount * bonusPercentage / 100;\r\n  }\r\n\r\n  function buyTokens() public payable {\r\n    require(now < endDate);\r\n    require(now >= startDate);\r\n    require(msg.value > 0);\r\n\r\n    uint256 amount = msg.value * UNIT / tokenPrice;\r\n    uint256 bonus = calcBonus(msg.value) * UNIT / tokenPrice;\r\n    \r\n    totalSupply = totalSupply.add(amount);\r\n    \r\n    require(totalSupply <= maxSupply);\r\n\r\n    totalWeiReceived = totalWeiReceived.add(msg.value);\r\n\r\n    balances[msg.sender] = balances[msg.sender].add(amount);\r\n    \r\n    TokenPurchase(msg.sender, msg.sender, msg.value, amount);\r\n    \r\n    Transfer(address(0x0), msg.sender, amount);\r\n\r\n    if (bonus > 0) {\r\n      Transfer(companyWallet, msg.sender, bonus);\r\n      balances[companyWallet] -= bonus;\r\n      balances[msg.sender] = balances[msg.sender].add(bonus);\r\n    }\r\n\r\n    companyWallet.transfer(msg.value);\r\n  }\r\n\r\n  function() public payable {\r\n    buyTokens();\r\n  }\r\n\r\n\t/***\r\n\t* This function is used to transfer tokens that have been bought through other means (credit card, bitcoin, etc), and to burn tokens after the sale.\r\n\t*/\r\n  function sendTokens(address receiver, uint256 tokens) public onlyAdmin {\r\n    require(now < endDate);\r\n    require(now >= startDate);\r\n    require(totalSupply + tokens * UNIT <= maxSupply);\r\n\r\n    uint256 amount = tokens * UNIT;\r\n    balances[receiver] += amount;\r\n    totalSupply += amount;\r\n    Transfer(address(0x0), receiver, amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_companyWallet\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VCA_Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003b4f2e5aced5bf84c54e53a39cbdd9ba41b173cf0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://fb18b7d8bc7d4695b3f89e0b55d5220e2e38769883d93b1c95cbcf08d7df77a9"}]}