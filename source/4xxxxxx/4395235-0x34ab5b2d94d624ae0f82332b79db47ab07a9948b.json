{"status":"1","message":"OK","result":[{"SourceCode":"contract FlightDelayControllerInterface {\r\n\r\n    function isOwner(address _addr) returns (bool _isOwner);\r\n\r\n    function selfRegister(bytes32 _id) returns (bool result);\r\n\r\n    function getContract(bytes32 _id) returns (address _addr);\r\n}\r\n\r\ncontract FlightDelayDatabaseModel {\r\n\r\n    // Ledger accounts.\r\n    enum Acc {\r\n        Premium,      // 0\r\n        RiskFund,     // 1\r\n        Payout,       // 2\r\n        Balance,      // 3\r\n        Reward,       // 4\r\n        OraclizeCosts // 5\r\n    }\r\n\r\n    // policy Status Codes and meaning:\r\n    //\r\n    // 00 = Applied:\t  the customer has payed a premium, but the oracle has\r\n    //\t\t\t\t\t        not yet checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 01 = Accepted:\t  the oracle has checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 02 = Revoked:\t  The customer has revoked the policy.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 03 = PaidOut:\t  The flight has ended with delay.\r\n    //\t\t\t\t\t        The oracle has checked and payed out.\r\n    // 04 = Expired:\t  The flight has endet with <15min. delay.\r\n    //\t\t\t\t\t        No payout.\r\n    // 05 = Declined:\t  The application was invalid.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 06 = SendFailed:\tDuring Revoke, Decline or Payout, sending ether failed\r\n    //\t\t\t\t\t        for unknown reasons.\r\n    //\t\t\t\t\t        The funds remain in the contracts RiskFund.\r\n\r\n\r\n    //                   00       01        02       03        04      05           06\r\n    enum policyState { Applied, Accepted, Revoked, PaidOut, Expired, Declined, SendFailed }\r\n\r\n    // oraclize callback types:\r\n    enum oraclizeState { ForUnderwriting, ForPayout }\r\n\r\n    //               00   01   02   03\r\n    enum Currency { ETH, EUR, USD, GBP }\r\n\r\n    // the policy structure: this structure keeps track of the individual parameters of a policy.\r\n    // typically customer address, premium and some status information.\r\n    struct Policy {\r\n        // 0 - the customer\r\n        address customer;\r\n\r\n        // 1 - premium\r\n        uint premium;\r\n        // risk specific parameters:\r\n        // 2 - pointer to the risk in the risks mapping\r\n        bytes32 riskId;\r\n        // custom payout pattern\r\n        // in future versions, customer will be able to tamper with this array.\r\n        // to keep things simple, we have decided to hard-code the array for all policies.\r\n        // uint8[5] pattern;\r\n        // 3 - probability weight. this is the central parameter\r\n        uint weight;\r\n        // 4 - calculated Payout\r\n        uint calculatedPayout;\r\n        // 5 - actual Payout\r\n        uint actualPayout;\r\n\r\n        // status fields:\r\n        // 6 - the state of the policy\r\n        policyState state;\r\n        // 7 - time of last state change\r\n        uint stateTime;\r\n        // 8 - state change message/reason\r\n        bytes32 stateMessage;\r\n        // 9 - TLSNotary Proof\r\n        bytes proof;\r\n        // 10 - Currency\r\n        Currency currency;\r\n        // 10 - External customer id\r\n        bytes32 customerExternalId;\r\n    }\r\n\r\n    // the risk structure; this structure keeps track of the risk-\r\n    // specific parameters.\r\n    // several policies can share the same risk structure (typically\r\n    // some people flying with the same plane)\r\n    struct Risk {\r\n        // 0 - Airline Code + FlightNumber\r\n        bytes32 carrierFlightNumber;\r\n        // 1 - scheduled departure and arrival time in the format /dep/YYYY/MM/DD\r\n        bytes32 departureYearMonthDay;\r\n        // 2 - the inital arrival time\r\n        uint arrivalTime;\r\n        // 3 - the final delay in minutes\r\n        uint delayInMinutes;\r\n        // 4 - the determined delay category (0-5)\r\n        uint8 delay;\r\n        // 5 - we limit the cumulated weighted premium to avoid cluster risks\r\n        uint cumulatedWeightedPremium;\r\n        // 6 - max cumulated Payout for this risk\r\n        uint premiumMultiplier;\r\n    }\r\n\r\n    // the oraclize callback structure: we use several oraclize calls.\r\n    // all oraclize calls will result in a common callback to __callback(...).\r\n    // to keep track of the different querys we have to introduce this struct.\r\n    struct OraclizeCallback {\r\n        // for which policy have we called?\r\n        uint policyId;\r\n        // for which purpose did we call? {ForUnderwrite | ForPayout}\r\n        oraclizeState oState;\r\n        // time\r\n        uint oraclizeTime;\r\n    }\r\n\r\n    struct Customer {\r\n        bytes32 customerExternalId;\r\n        bool identityConfirmed;\r\n    }\r\n}\r\n\r\ncontract FlightDelayControlledContract is FlightDelayDatabaseModel {\r\n\r\n    address public controller;\r\n    FlightDelayControllerInterface FD_CI;\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    function setController(address _controller) internal returns (bool _result) {\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }\r\n\r\n    function destruct() onlyController {\r\n        selfdestruct(controller);\r\n    }\r\n\r\n    function setContracts() onlyController {}\r\n\r\n    function getContract(bytes32 _id) internal returns (address _addr) {\r\n        _addr = FD_CI.getContract(_id);\r\n    }\r\n}\r\n\r\ncontract FlightDelayDatabaseInterface is FlightDelayDatabaseModel {\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm);\r\n\r\n    function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    );\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) returns (bool _allowed);\r\n\r\n    function setLedger(uint8 _index, int _value);\r\n\r\n    function getLedger(uint8 _index) returns (int _value);\r\n\r\n    function getCustomerPremium(uint _policyId) returns (address _customer, uint _premium);\r\n\r\n    function getPolicyData(uint _policyId) returns (address _customer, uint _premium, uint _weight);\r\n\r\n    function getPolicyState(uint _policyId) returns (policyState _state);\r\n\r\n    function getRiskId(uint _policyId) returns (bytes32 _riskId);\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) returns (uint _policyId);\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof);\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout);\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes);\r\n\r\n    function getRiskParameters(bytes32 _riskId)\r\n        returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime);\r\n\r\n    function getPremiumFactors(bytes32 _riskId)\r\n        returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier);\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)\r\n        returns (bytes32 _riskId);\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier);\r\n\r\n    function getOraclizeCallback(bytes32 _queryId)\r\n        returns (uint _policyId, uint _arrivalTime);\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId)\r\n    returns (uint _policyId);\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    );\r\n\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset)\r\n        returns (bool _result);\r\n}\r\n\r\ncontract FlightDelayAccessControllerInterface {\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id);\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id, bool _access);\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr);\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr, bool _access);\r\n\r\n    function checkPermission(uint8 _perm, address _addr) returns (bool _success);\r\n}\r\n\r\ncontract FlightDelayConstants {\r\n\r\n    /*\r\n    * General events\r\n    */\r\n\r\n// --> test-mode\r\n//        event LogUint(string _message, uint _uint);\r\n//        event LogUintEth(string _message, uint ethUint);\r\n//        event LogUintTime(string _message, uint timeUint);\r\n//        event LogInt(string _message, int _int);\r\n//        event LogAddress(string _message, address _address);\r\n//        event LogBytes32(string _message, bytes32 hexBytes32);\r\n//        event LogBytes(string _message, bytes hexBytes);\r\n//        event LogBytes32Str(string _message, bytes32 strBytes32);\r\n//        event LogString(string _message, string _string);\r\n//        event LogBool(string _message, bool _bool);\r\n//        event Log(address);\r\n// <-- test-mode\r\n\r\n    event LogPolicyApplied(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    );\r\n    event LogPolicyAccepted(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    );\r\n    event LogPolicyPaidOut(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    );\r\n    event LogPolicyExpired(\r\n        uint _policyId\r\n    );\r\n    event LogPolicyDeclined(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogPolicyManualPayout(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogSendFunds(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    );\r\n    event LogReceiveFunds(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    );\r\n    event LogSendFail(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogOraclizeCall(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl\r\n    );\r\n    event LogOraclizeCallback(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    );\r\n    event LogSetState(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );\r\n    event LogExternal(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    );\r\n\r\n    /*\r\n    * General constants\r\n    */\r\n\r\n    // minimum observations for valid prediction\r\n    uint constant MIN_OBSERVATIONS = 10;\r\n    // minimum premium to cover costs\r\n    uint constant MIN_PREMIUM = 50 finney;\r\n    // maximum premium\r\n    uint constant MAX_PREMIUM = 1 ether;\r\n    // maximum payout\r\n    uint constant MAX_PAYOUT = 1100 finney;\r\n\r\n    uint constant MIN_PREMIUM_EUR = 1500 wei;\r\n    uint constant MAX_PREMIUM_EUR = 29000 wei;\r\n    uint constant MAX_PAYOUT_EUR = 30000 wei;\r\n\r\n    uint constant MIN_PREMIUM_USD = 1700 wei;\r\n    uint constant MAX_PREMIUM_USD = 34000 wei;\r\n    uint constant MAX_PAYOUT_USD = 35000 wei;\r\n\r\n    uint constant MIN_PREMIUM_GBP = 1300 wei;\r\n    uint constant MAX_PREMIUM_GBP = 25000 wei;\r\n    uint constant MAX_PAYOUT_GBP = 270 wei;\r\n\r\n    // maximum cumulated weighted premium per risk\r\n    uint constant MAX_CUMULATED_WEIGHTED_PREMIUM = 300 ether;\r\n    // 1 percent for DAO, 1 percent for maintainer\r\n    uint8 constant REWARD_PERCENT = 2;\r\n    // reserve for tail risks\r\n    uint8 constant RESERVE_PERCENT = 1;\r\n    // the weight pattern; in future versions this may become part of the policy struct.\r\n    // currently can't be constant because of compiler restrictions\r\n    // WEIGHT_PATTERN[0] is not used, just to be consistent\r\n    uint8[6] WEIGHT_PATTERN = [\r\n        0,\r\n        10,\r\n        20,\r\n        30,\r\n        50,\r\n        50\r\n    ];\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    // minimum time before departure for applying\r\n    uint constant MIN_TIME_BEFORE_DEPARTURE = 24 hours; // for production\r\n    // check for delay after .. minutes after scheduled arrival\r\n    uint constant CHECK_PAYOUT_OFFSET = 15 minutes; // for production\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        // minimum time before departure for applying\r\n//        uint constant MIN_TIME_BEFORE_DEPARTURE = 1 seconds; // for testing\r\n//        // check for delay after .. minutes after scheduled arrival\r\n//        uint constant CHECK_PAYOUT_OFFSET = 1 seconds; // for testing\r\n// <-- test-mode\r\n\r\n    // maximum duration of flight\r\n    uint constant MAX_FLIGHT_DURATION = 2 days;\r\n    // Deadline for acceptance of policies: 31.12.2030 (Testnet)\r\n    uint constant CONTRACT_DEAD_LINE = 1922396399;\r\n\r\n    uint constant MIN_DEPARTURE_LIM = 1508198400;\r\n\r\n    uint constant MAX_DEPARTURE_LIM = 1509494400;\r\n\r\n    // gas Constants for oraclize\r\n    uint constant ORACLIZE_GAS = 1000000;\r\n\r\n\r\n    /*\r\n    * URLs and query strings for oraclize\r\n    */\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    string constant ORACLIZE_RATINGS_BASE_URL =\r\n        // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n        \"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\";\r\n    string constant ORACLIZE_RATINGS_QUERY =\r\n        \"?${[decrypt] <!--PUT ENCRYPTED_QUERY HERE--> }).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode']\";\r\n    string constant ORACLIZE_STATUS_BASE_URL =\r\n        // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n        \"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n    string constant ORACLIZE_STATUS_QUERY =\r\n        // pattern:\r\n        \"?${[decrypt] <!--PUT ENCRYPTED_QUERY HERE--> }&utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        string constant ORACLIZE_RATINGS_BASE_URL =\r\n//            // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/ratings/rest/v1/json/flight/\";\r\n//        string constant ORACLIZE_RATINGS_QUERY =\r\n//            // for testrpc:\r\n//            \").ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode']\";\r\n//        string constant ORACLIZE_STATUS_BASE_URL =\r\n//            // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n//        string constant ORACLIZE_STATUS_QUERY =\r\n//            // for testrpc:\r\n//            \"?utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- test-mode\r\n}\r\n\r\ncontract FlightDelayDatabase is FlightDelayControlledContract, FlightDelayDatabaseInterface, FlightDelayConstants {\r\n\r\n    // Table of policies\r\n    Policy[] public policies;\r\n\r\n    mapping (bytes32 => uint[]) public extCustomerPolicies;\r\n\r\n    mapping (address => Customer) public customers;\r\n\r\n    // Lookup policyIds from customer addresses\r\n    mapping (address => uint[]) public customerPolicies;\r\n\r\n    // Lookup policy Ids from queryIds\r\n    mapping (bytes32 => OraclizeCallback) public oraclizeCallbacks;\r\n\r\n    // Lookup risks from risk IDs\r\n    mapping (bytes32 => Risk) public risks;\r\n\r\n    // Lookup AccessControl\r\n    mapping(address => mapping(address => mapping(uint8 => bool))) public accessControl;\r\n\r\n    // Lookup accounts of internal ledger\r\n    int[6] public ledger;\r\n\r\n    FlightDelayAccessControllerInterface FD_AC;\r\n\r\n    function FlightDelayDatabase (address _controller) {\r\n        setController(_controller);\r\n    }\r\n\r\n    function setContracts() onlyController {\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(101, \"FD.Underwrite\");\r\n\r\n        FD_AC.setPermissionById(101, \"FD.Payout\");\r\n        FD_AC.setPermissionById(101, \"FD.Ledger\");\r\n\r\n    }\r\n\r\n    // Getter and Setter for AccessControl\r\n    function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) {\r\n        // one and only hardcoded accessControl\r\n        require(msg.sender == FD_CI.getContract(\"FD.AccessController\"));\r\n        accessControl[_contract][_caller][_perm] = _access;\r\n    }\r\n\r\n// --> test-mode\r\n//        function setAccessControlTestOnly(\r\n//            address _contract,\r\n//            address _caller,\r\n//            uint8 _perm,\r\n//            bool _access\r\n//        ) {\r\n//            accessControl[_contract][_caller][_perm] = _access;\r\n//        }\r\n// <-- test-mode\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm) {\r\n        setAccessControl(\r\n            _contract,\r\n            _caller,\r\n            _perm,\r\n            true\r\n        );\r\n    }\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) returns (bool _allowed) {\r\n        _allowed = accessControl[_contract][_caller][_perm];\r\n    }\r\n\r\n    // Getter and Setter for ledger\r\n    function setLedger(uint8 _index, int _value) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        int previous = ledger[_index];\r\n        ledger[_index] += _value;\r\n\r\n// --> debug-mode\r\n//            LogInt(\"previous\", previous);\r\n//            LogInt(\"ledger[_index]\", ledger[_index]);\r\n//            LogInt(\"_value\", _value);\r\n// <-- debug-mode\r\n\r\n        // check for int overflow\r\n        if (_value < 0) {\r\n            assert(ledger[_index] < previous);\r\n        } else if (_value > 0) {\r\n            assert(ledger[_index] > previous);\r\n        }\r\n    }\r\n\r\n    function getLedger(uint8 _index) returns (int _value) {\r\n        _value = ledger[_index];\r\n    }\r\n\r\n    // Getter and Setter for policies\r\n    function getCustomerPremium(uint _policyId) returns (address _customer, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _premium = p.premium;\r\n    }\r\n\r\n    function getPolicyData(uint _policyId) returns (address _customer, uint _weight, uint _premium) {\r\n        Policy storage p = policies[_policyId];\r\n        _customer = p.customer;\r\n        _weight = p.weight;\r\n        _premium = p.premium;\r\n    }\r\n\r\n    function getPolicyState(uint _policyId) returns (policyState _state) {\r\n        Policy storage p = policies[_policyId];\r\n        _state = p.state;\r\n    }\r\n\r\n    function getRiskId(uint _policyId) returns (bytes32 _riskId) {\r\n        Policy storage p = policies[_policyId];\r\n        _riskId = p.riskId;\r\n    }\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) returns (uint _policyId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _policyId = policies.length++;\r\n\r\n        //todo: check for ovewflows\r\n\r\n// --> test-mode\r\n//            LogUint(\"_policyId\", _policyId);\r\n// <-- test-mode\r\n\r\n        customerPolicies[_customer].push(_policyId);\r\n        extCustomerPolicies[_customerExternalId].push(_policyId);\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.customer = _customer;\r\n        p.currency = _currency;\r\n        p.customerExternalId = _customerExternalId;\r\n        p.premium = _premium;\r\n        p.riskId = _riskId;\r\n    }\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        LogSetState(\r\n            _policyId,\r\n            uint8(_state),\r\n            _stateTime,\r\n            _stateMessage\r\n        );\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.state = _state;\r\n        p.stateTime = _stateTime;\r\n        p.stateMessage = _stateMessage;\r\n    }\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.weight = _weight;\r\n        p.proof = _proof;\r\n    }\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Policy storage p = policies[_policyId];\r\n\r\n        p.calculatedPayout = _calculatedPayout;\r\n        p.actualPayout = _actualPayout;\r\n    }\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[policies[_policyId].riskId];\r\n\r\n        r.delay = _delay;\r\n        r.delayInMinutes = _delayInMinutes;\r\n    }\r\n\r\n    // Getter and Setter for risks\r\n    function getRiskParameters(bytes32 _riskId) returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) {\r\n        Risk storage r = risks[_riskId];\r\n        _carrierFlightNumber = r.carrierFlightNumber;\r\n        _departureYearMonthDay = r.departureYearMonthDay;\r\n        _arrivalTime = r.arrivalTime;\r\n    }\r\n\r\n    function getPremiumFactors(bytes32 _riskId) returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier) {\r\n        Risk storage r = risks[_riskId];\r\n        _cumulatedWeightedPremium = r.cumulatedWeightedPremium;\r\n        _premiumMultiplier = r.premiumMultiplier;\r\n    }\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) returns (bytes32 _riskId) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        _riskId = sha3(\r\n            _carrierFlightNumber,\r\n            _departureYearMonthDay,\r\n            _arrivalTime\r\n        );\r\n\r\n// --> test-mode\r\n//            LogBytes32(\"riskId\", _riskId);\r\n// <-- test-mode\r\n\r\n        Risk storage r = risks[_riskId];\r\n\r\n        if (r.premiumMultiplier == 0) {\r\n            r.carrierFlightNumber = _carrierFlightNumber;\r\n            r.departureYearMonthDay = _departureYearMonthDay;\r\n            r.arrivalTime = _arrivalTime;\r\n        }\r\n    }\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        Risk storage r = risks[_riskId];\r\n        r.cumulatedWeightedPremium = _cumulatedWeightedPremium;\r\n        r.premiumMultiplier = _premiumMultiplier;\r\n    }\r\n\r\n    // Getter and Setter for oraclizeCallbacks\r\n    function getOraclizeCallback(bytes32 _queryId) returns (uint _policyId, uint _arrivalTime) {\r\n        _policyId = oraclizeCallbacks[_queryId].policyId;\r\n        _arrivalTime = risks[policies[_policyId].riskId].arrivalTime;\r\n    }\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId) returns (uint _policyId) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        _policyId = o.policyId;\r\n    }\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime) {\r\n\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        oraclizeCallbacks[_queryId] = OraclizeCallback(_policyId, _oraclizeState, _oraclizeTime);\r\n    }\r\n\r\n    // mixed\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset) returns (bool _result) {\r\n        OraclizeCallback storage o = oraclizeCallbacks[_queryId];\r\n        Risk storage r = risks[_riskId];\r\n\r\n        _result = o.oraclizeTime > r.arrivalTime + _offset;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_calculatedPayout\",\"type\":\"uint256\"},{\"name\":\"_actualPayout\",\"type\":\"uint256\"}],\"name\":\"setPayouts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carrierFlightNumber\",\"type\":\"bytes32\"},{\"name\":\"_departureYearMonthDay\",\"type\":\"bytes32\"},{\"name\":\"_arrivalTime\",\"type\":\"uint256\"}],\"name\":\"createUpdateRisk\",\"outputs\":[{\"name\":\"_riskId\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"accessControl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getLedger\",\"outputs\":[{\"name\":\"_value\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_delay\",\"type\":\"uint8\"},{\"name\":\"_delayInMinutes\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_oraclizeState\",\"type\":\"uint8\"},{\"name\":\"_oraclizeTime\",\"type\":\"uint256\"}],\"name\":\"createOraclizeCallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customers\",\"outputs\":[{\"name\":\"customerExternalId\",\"type\":\"bytes32\"},{\"name\":\"identityConfirmed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setLedger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customerPolicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extCustomerPolicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_stateTime\",\"type\":\"uint256\"},{\"name\":\"_stateMessage\",\"type\":\"bytes32\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oraclizeCallbacks\",\"outputs\":[{\"name\":\"policyId\",\"type\":\"uint256\"},{\"name\":\"oState\",\"type\":\"uint8\"},{\"name\":\"oraclizeTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getPolicyState\",\"outputs\":[{\"name\":\"_state\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getOraclizePolicyId\",\"outputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getPolicyData\",\"outputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_premium\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getOraclizeCallback\",\"outputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_arrivalTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_riskId\",\"type\":\"bytes32\"},{\"name\":\"_cumulatedWeightedPremium\",\"type\":\"uint256\"},{\"name\":\"_premiumMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPremiumFactors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"risks\",\"outputs\":[{\"name\":\"carrierFlightNumber\",\"type\":\"bytes32\"},{\"name\":\"departureYearMonthDay\",\"type\":\"bytes32\"},{\"name\":\"arrivalTime\",\"type\":\"uint256\"},{\"name\":\"delayInMinutes\",\"type\":\"uint256\"},{\"name\":\"delay\",\"type\":\"uint8\"},{\"name\":\"cumulatedWeightedPremium\",\"type\":\"uint256\"},{\"name\":\"premiumMultiplier\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"name\":\"_riskId\",\"type\":\"bytes32\"},{\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"checkTime\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_riskId\",\"type\":\"bytes32\"}],\"name\":\"getPremiumFactors\",\"outputs\":[{\"name\":\"_cumulatedWeightedPremium\",\"type\":\"uint256\"},{\"name\":\"_premiumMultiplier\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getCustomerPremium\",\"outputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_premium\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_perm\",\"type\":\"uint8\"},{\"name\":\"_access\",\"type\":\"bool\"}],\"name\":\"setAccessControl\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_perm\",\"type\":\"uint8\"}],\"name\":\"setAccessControl\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_riskId\",\"type\":\"bytes32\"}],\"name\":\"getRiskParameters\",\"outputs\":[{\"name\":\"_carrierFlightNumber\",\"type\":\"bytes32\"},{\"name\":\"_departureYearMonthDay\",\"type\":\"bytes32\"},{\"name\":\"_arrivalTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policies\",\"outputs\":[{\"name\":\"customer\",\"type\":\"address\"},{\"name\":\"premium\",\"type\":\"uint256\"},{\"name\":\"riskId\",\"type\":\"bytes32\"},{\"name\":\"weight\",\"type\":\"uint256\"},{\"name\":\"calculatedPayout\",\"type\":\"uint256\"},{\"name\":\"actualPayout\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"stateTime\",\"type\":\"uint256\"},{\"name\":\"stateMessage\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes\"},{\"name\":\"currency\",\"type\":\"uint8\"},{\"name\":\"customerExternalId\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_caller\",\"type\":\"address\"},{\"name\":\"_perm\",\"type\":\"uint8\"}],\"name\":\"getAccessControl\",\"outputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getRiskId\",\"outputs\":[{\"name\":\"_riskId\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_premium\",\"type\":\"uint256\"},{\"name\":\"_currency\",\"type\":\"uint8\"},{\"name\":\"_customerExternalId\",\"type\":\"bytes32\"},{\"name\":\"_riskId\",\"type\":\"bytes32\"}],\"name\":\"createPolicy\",\"outputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"setWeight\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"strCarrierFlightNumber\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethPremium\",\"type\":\"uint256\"}],\"name\":\"LogPolicyApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics4\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics5\",\"type\":\"uint256\"}],\"name\":\"LogPolicyAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogPolicyPaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"LogPolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyManualPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogSendFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogReceiveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogSendFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_oraclizeUrl\",\"type\":\"string\"}],\"name\":\"LogOraclizeCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hexProof\",\"type\":\"bytes\"}],\"name\":\"LogOraclizeCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_policyState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_stateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stateMessage\",\"type\":\"bytes32\"}],\"name\":\"LogSetState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_externalId\",\"type\":\"bytes32\"}],\"name\":\"LogExternal\",\"type\":\"event\"}]","ContractName":"FlightDelayDatabase","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f5c3086d42cb2857ad5f52c134fc3e698e8e9edd","Library":"","SwarmSource":"bzzr://8b0cf13b3634e1e5e772218634bcdacab2313e87267c6274a85f04f92d158972"}]}