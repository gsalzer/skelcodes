{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/* Owner setter */\r\ncontract OwnableToken\r\n{\r\n    address owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function OwnableToken() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address _new_owner) payable public onlyOwner {\r\n        require(_new_owner != address(0));\r\n        owner = _new_owner;\r\n    }\r\n}\r\n\r\n/**\r\n * Abstract contract for the full ERC 20 Token standard\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20I\r\n{\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/* ERC 20 Token implementation */\r\ncontract ERC20 is ERC20I {\r\n\r\n    uint256 constant MAX_UINT256 = 2**256 - 1;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) view public\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/* airdopable promo smart contract */\r\ncontract ANtokContractAirdrop is ERC20, OwnableToken\r\n{\r\n    event Wasted(address to, uint256 value, uint256 date);  // Wasted(_to, _amount, now);\r\n\r\n    string public version = '1.2'; //Just an arbitrary versioning scheme.\r\n\r\n    uint8  public decimals;\r\n    string public name;\r\n    string public symbol;  //An identifier: eg SBX length 6 symbols max\r\n\r\n    uint256 public paySize = 1 * 10 ** 18;  // show size of payment in mass transfer\r\n    uint256 public holdersCount;\r\n    uint256 public tokensSpent;\r\n\r\n    mapping (address => bool) bounty; // show who got bounty\r\n\r\n    /* Autoconstructor */\r\n    function ANtokContractAirdrop() public payable {\r\n        decimals = 18;  // Amount of decimals for display purposes\r\n        name = \"ALFA NTOK\";  // Set the name for display purposes\r\n        symbol = \"Ð°NTOK\";  // Set the symbol for display purposes\r\n        balances[msg.sender] = 20180000 * 10 ** uint(decimals); // Give the creator promo tokens (100000 for example)\r\n        balances[this] = 50000 * 10 ** uint(decimals); // Stay some tokens for bounty from contract\r\n        totalSupply = balances[msg.sender] + balances[this]; // Update total supply (100000 for example)\r\n    }\r\n\r\n    /**\r\n     * @dev notify owners about their balances was in promo action.\r\n     * @param _holders addresses of the owners to be notified\r\n     */\r\n    function massTransfer(address [] _holders) public onlyOwner {\r\n\r\n        uint256 count = _holders.length;\r\n        assert(paySize * count <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n        }\r\n        Wasted(owner, tokensSpent, now);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens from the contract.\r\n    */\r\n    function withdrawTo(address _recipient, uint256 _amount) public onlyOwner {\r\n        this.transfer(_recipient, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens from the contract.\r\n    */\r\n    function setPaySize(uint256 _value) public onlyOwner\r\n        returns (uint256)\r\n    {\r\n        paySize = _value;\r\n        return paySize;\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw tokens as bounty.\r\n    */\r\n    function withdrawBounty(address _recipient, uint256 _amount) internal {\r\n        this.transfer(_recipient, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev get bounty for the people.\r\n    */\r\n    function getBounty() public payable {\r\n        require(bounty[msg.sender] != true); // 1 address = 1 token\r\n        require(balances[this] != 0);\r\n        bounty[msg.sender] = true;\r\n        withdrawBounty(msg.sender, 1 * 10 ** uint(decimals));\r\n    }\r\n\r\n    /**\r\n    * @dev is bounty address.\r\n    */\r\n    function bountyOf(address _bountist) view public\r\n        returns (bool thanked)\r\n    {\r\n        return bounty[_bountist];\r\n    }\r\n\r\n    function() public {\r\n        revert(); // revert all incoming transactions\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paySize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"massTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPaySize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bountist\",\"type\":\"address\"}],\"name\":\"bountyOf\",\"outputs\":[{\"name\":\"thanked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBounty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Wasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ANtokContractAirdrop","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e5edadde51c3540ad833b653edd09c0fac60eae978c04147dfb1a2bafb58b16"}]}