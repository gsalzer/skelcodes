{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint _value)\r\n        public\r\n    {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n    event Burn(address indexed burner, uint indexed value);\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BearCoin is BurnableToken, MintableToken, LimitedTransferToken, Pausable, HasNoEther {\r\n\tstruct Tether {\r\n\t\tbytes5 currency;\r\n\t\tuint32 amount;\r\n\t\tuint32 price;\r\n\t\tuint32 startBlock;\r\n\t\tuint32 endBlock;\r\n\t}\r\n\r\n\taddress[] public addressById;\r\n\tmapping (string => uint256) idByName;\r\n\tmapping (address => string) nameByAddress;\r\n\r\n\t// Ether/Wei have the same conversion as Bear/Cub\r\n\tuint256 public constant INITIAL_SUPPLY = 2000000 ether;\r\n\r\n\tstring public constant symbol = \"BEAR\";\r\n\tuint256 public constant decimals = 18;\r\n\tstring public constant name = \"BearCoin\";\r\n\r\n\tstring constant genesis = \"CR30001\";\r\n\tuint256 public genesisBlock = 0;\r\n\r\n\tmapping (address => Tether[]) public currentTethers;\r\n\taddress public controller;\r\n\r\n\tevent Tethered(address indexed holder, string holderName, string currency, uint256 amount, uint32 price, uint256 indexed tetherID, uint timestamp, string message);\r\n\tevent Untethered(address indexed holder,string holderName, string currency, uint256 amount, uint32 price, uint32 finalPrice, uint256 outcome, uint256 indexed tetherID, uint timestamp);\r\n\tevent NameRegistered(address indexed a, uint256 id, string userName, uint timestamp);\r\n\tevent NameChanged(address indexed a, uint256 id, string newUserName, string oldUserName, uint timestamp);\r\n\r\n\tfunction BearCoin() {\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\r\n\t\ttotalSupply = INITIAL_SUPPLY;\r\n\t\taddressById.push(0x0);\r\n\t\tidByName[genesis] = 0;\r\n\t\tnameByAddress[0x0] = genesis;\r\n\t\tgenesisBlock = block.number;\r\n\t}\r\n\r\n\t// Non-upgradable function required for LimitedTransferToken\r\n\tfunction transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n\t\tuint256 count = tetherCount(holder);\r\n\r\n\t\tif (count == 0) return super.transferableTokens(holder, time);\r\n\r\n\t\tuint256 tetheredTokens = 0;\r\n\t\tfor (uint256 i = 0; i < count; i++) {\r\n\t\t\t// All tethers are initialized with an endBlock of 0\r\n\t\t\tif (currentTethers[holder][i].endBlock == 0) {\r\n\t\t\t\ttetheredTokens = tetheredTokens.add(_finneyToWei(currentTethers[holder][i].amount));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn balances[holder].sub(tetheredTokens);\r\n\t}\r\n\r\n\t// only x modifiers\r\n\tmodifier onlyController() {\r\n\t\trequire(msg.sender == controller);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Set roles\r\n\tfunction setController(address a) onlyOwner {\r\n\t\tcontroller = a;\r\n\t}\r\n\r\n\t// Controller-only functions\r\n\tfunction addTether(address a, string _currency, uint256 amount, uint32 price, string m) external onlyController whenNotPaused {\r\n\t\t// Make sure there are enough BearCoins to tether\r\n\t\trequire(transferableTokens(a, 0) >= amount);\r\n\t\tbytes5 currency = _stringToBytes5(_currency);\r\n\t\tuint256 count = currentTethers[a].push(Tether(currency, _weiToFinney(amount), price, uint32(block.number.sub(genesisBlock)), 0));\r\n\t\tTethered(a, nameByAddress[a], _currency, amount, price, count - 1, now, m);\r\n\t}\r\n\tfunction setTether(address a, uint256 tetherID, uint32 finalPrice, uint256 outcome) external onlyController whenNotPaused {\r\n\t\tcurrentTethers[a][tetherID].endBlock = uint32(block.number.sub(genesisBlock));\r\n\t\tTether memory tether = currentTethers[a][tetherID];\r\n\t\tUntethered(a, nameByAddress[a], _bytes5ToString(tether.currency), tether.amount, tether.price, finalPrice, outcome, tetherID, now);\r\n\t}\r\n\tfunction controlledMint(address _to, uint256 _amount) external onlyController whenNotPaused returns (bool) {\r\n\t\ttotalSupply = totalSupply.add(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\tMint(_to, _amount);\r\n\t\tTransfer(0x0, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\tfunction controlledBurn(address _from, uint256 _value) external onlyController whenNotPaused returns (bool) {\r\n\t\trequire(_value > 0);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\ttotalSupply = totalSupply.sub(_value);\r\n\t\tBurn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction registerName(address a, string n) external onlyController whenNotPaused {\r\n\t\trequire(!isRegistered(a));\r\n\t\trequire(getIdByName(n) == 0);\r\n\t\trequire(a != 0x0);\r\n\t\trequire(_nameValid(n));\r\n\t\tuint256 length = addressById.push(a);\r\n\t\tuint256 id = length - 1;\r\n\t\tidByName[_toLower(n)] = id;\r\n\t\tnameByAddress[a] = n;\r\n\t\tNameRegistered(a, id, n, now);\r\n\t}\r\n\tfunction changeName(address a, string n) external onlyController whenNotPaused {\r\n\t\trequire(isRegistered(a));\r\n\t\trequire(getIdByName(n) == 0);\r\n\t\trequire(a != 0x0);\r\n\t\trequire(_nameValid(n));\r\n\t\tstring memory old = nameByAddress[a];\r\n\t\tuint256 id = getIdByName(old);\r\n\t\tidByName[_toLower(old)] = 0;\r\n\t\tidByName[_toLower(n)] = id;\r\n\t\tnameByAddress[a] = n;\r\n\t\tNameChanged(a, id, n, old, now);\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction getTether(address a, uint256 tetherID) public constant returns (string, uint256, uint32, uint256, uint256) {\r\n\t\tTether storage tether = currentTethers[a][tetherID];\r\n\t\treturn (_bytes5ToString(tether.currency), _finneyToWei(tether.amount), tether.price, uint256(tether.startBlock).add(genesisBlock), uint256(tether.endBlock).add(genesisBlock));\r\n\t}\r\n\tfunction getTetherInts(address a, uint256 tetherID) public constant returns (uint256, uint32, uint32, uint32) {\r\n\t\tTether memory tether = currentTethers[a][tetherID];\r\n\t\treturn (_finneyToWei(tether.amount), tether.price, tether.startBlock, tether.endBlock);\r\n\t}\r\n\tfunction tetherCount(address a) public constant returns (uint256) {\r\n\t\treturn currentTethers[a].length;\r\n\t}\r\n\tfunction getAddressById(uint256 id) returns (address) {\r\n\t\treturn addressById[id];\r\n\t}\r\n\tfunction getIdByName(string n) returns (uint256) {\r\n\t\treturn idByName[_toLower(n)];\r\n\t}\r\n\tfunction getNameByAddress(address a) returns (string) {\r\n\t\treturn nameByAddress[a];\r\n\t}\r\n\tfunction getAddressCount() returns (uint256) {\r\n\t\treturn addressById.length;\r\n\t}\r\n\r\n\t// Utility functions\r\n\tfunction verifyTetherCurrency(address a, uint256 tetherID, string currency) public constant returns (bool) {\r\n\t\treturn currentTethers[a][tetherID].currency == _stringToBytes5(currency);\r\n\t}\r\n\tfunction verifyTetherLoss(address a, uint256 tetherID, uint256 price) public constant returns (bool) {\r\n\t\treturn currentTethers[a][tetherID].price < uint32(price);\r\n\t}\r\n\tfunction isRegistered(address a) returns (bool) {\r\n\t\treturn keccak256(nameByAddress[a]) != keccak256('');\r\n\t}\r\n\r\n\t// Internal helper functions\r\n\tfunction _nameValid(string s) internal returns (bool) {\r\n\t\treturn bytes(s).length != 0 && keccak256(s) != keccak256(genesis) && bytes(s).length <= 32;\r\n\t}\r\n\tfunction _bytes5ToString(bytes5 b) internal returns (string memory s) {\r\n\t\tbytes memory bs = new bytes(5);\r\n\t\tfor (uint8 i = 0; i < 5; i++) {\r\n\t\t\tbs[i] = b[i];\r\n\t\t}\r\n\t\ts = string(bs);\r\n\t}\r\n\tfunction _stringToBytes5(string memory s) internal returns (bytes5 b) {\r\n\t\tassembly {\r\n\t\t\tb := mload(add(s, 32))\r\n\t\t}\r\n\t}\r\n\tfunction _toLower(string str) internal returns (string) {\r\n\t\tbytes memory bStr = bytes(str);\r\n\t\tbytes memory bLower = new bytes(bStr.length);\r\n\t\tfor (uint i = 0; i < bStr.length; i++) {\r\n\t\t\t// Uppercase character...\r\n\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\r\n\t\t\t\t// So we add 32 to make it lowercase\r\n\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\r\n\t\t\t} else {\r\n\t\t\t\tbLower[i] = bStr[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string(bLower);\r\n\t}\r\n\tfunction _finneyToWei(uint32 _n) returns (uint256) {\r\n\t\tuint256 n = uint256(_n);\r\n\t\tuint256 f = 1 finney;\r\n\t\treturn n.mul(f);\r\n\t}\r\n\tfunction _weiToFinney(uint256 n) returns (uint32) {\r\n\t\tuint256 f = 1 finney;\r\n\t\tuint256 p = n.div(f);\r\n\t\treturn uint32(p);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"controlledMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"tetherID\",\"type\":\"uint256\"}],\"name\":\"getTether\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"tetherID\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"verifyTetherLoss\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"uint32\"}],\"name\":\"_finneyToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"string\"}],\"name\":\"getIdByName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"tetherID\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"verifyTetherCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"n\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"n\",\"type\":\"string\"}],\"name\":\"registerName\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controlledBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getNameByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"_weiToFinney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"tetherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"tetherID\",\"type\":\"uint256\"}],\"name\":\"getTetherInts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAddressCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTethers\",\"outputs\":[{\"name\":\"currency\",\"type\":\"bytes5\"},{\"name\":\"amount\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint32\"},{\"name\":\"startBlock\",\"type\":\"uint32\"},{\"name\":\"endBlock\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"tetherID\",\"type\":\"uint256\"},{\"name\":\"finalPrice\",\"type\":\"uint32\"},{\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"setTether\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint32\"},{\"name\":\"m\",\"type\":\"string\"}],\"name\":\"addTether\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"holderName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"tetherID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Tethered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"holderName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tetherID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Untethered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newUserName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldUserName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BearCoin","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://225f061c4d06302c81a4ab18423419c3764376d0636f2c6c005550861422703e"}]}