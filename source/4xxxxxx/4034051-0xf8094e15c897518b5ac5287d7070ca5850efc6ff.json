{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address public newOwner;\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner.\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n  event onEmergencyChanged(bool isStopped);\r\n\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n    onEmergencyChanged(stopped);\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n    onEmergencyChanged(stopped);\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() constant returns (uint);\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) returns (bool);\r\n  function approve(address spender, uint value) returns (bool);\r\n  function approveAndCall(address spender, uint256 value, bytes extraData) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n  function doTransfer(address _from, address _to, uint _amount) internal returns(bool);\r\n}\r\n\r\ncontract GrantsControlled {\r\n    modifier onlyGrantsController { if (msg.sender != grantsController) throw; _; }\r\n\r\n    address public grantsController;\r\n\r\n    function GrantsControlled() { grantsController = msg.sender;}\r\n\r\n    function changeGrantsController(address _newController) onlyGrantsController {\r\n        grantsController = _newController;\r\n    }\r\n}\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n  // Checks whether it can transfer or otherwise throws.\r\n  modifier canTransfer(address _sender, uint _value) {\r\n   if (_value > transferableTokens(_sender, uint64(now))) throw;\r\n   _;\r\n  }\r\n\r\n  // Checks modifier and allows transfer if tokens are not locked.\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  // Checks modifier and allows transfer if tokens are not locked.\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {\r\n   return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // Default transferable tokens function returns all tokens for a holder (no limit).\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { if (msg.sender != controller) throw; _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract MiniMeToken is ERC20, Controlled {\r\n    using SafeMath for uint;\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (!transfersEnabled) throw;\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            if (!transfersEnabled) throw;\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           if (parentSnapShotBlock >= block.number) throw;\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           if ((_to == 0) || (_to == address(this))) throw;\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               if (!TokenController(controller).onTransfer(_from, _to, _amount))\r\n               throw;\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom.sub(_amount));\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        if (!transfersEnabled) throw;\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\r\n                throw;\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        if (!approve(_spender, _amount)) throw;\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\r\n        var previousBalanceTo = balanceOf(_owner);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\r\n        if (curTotalSupply < _amount) throw;\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\r\n        var previousBalanceFrom = balanceOf(_owner);\r\n        if (previousBalanceFrom < _amount) throw;\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function ()  payable {\r\n        if (isContract(controller)) {\r\n            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\r\n                throw;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    //////////\r\n    // Safety Methods\r\n    //////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    /// @param _claimer Address that tokens will be send to\r\n    function claimTokens(address _token, address _claimer) onlyController {\r\n        if (_token == 0x0) {\r\n            _claimer.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(_claimer, balance);\r\n        ClaimedTokens(_token, _claimer, balance);\r\n    }\r\n\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _claimer, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\ncontract VestedToken is LimitedTransferToken, GrantsControlled {\r\n  using SafeMath for uint;\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) onlyGrantsController public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    if (_cliff < _start || _vesting < _cliff) {\r\n      throw;\r\n    }\r\n\r\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) throw;   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    uint count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n\r\n    transfer(_to, _value);\r\n\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint _grantId) public {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    if (!grant.revokable) { // Check if grant was revokable\r\n      throw;\r\n    }\r\n\r\n    if (grant.granter != msg.sender) { // Only granter can revoke it\r\n      throw;\r\n    }\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    // This will call MiniMe's doTransfer method, so token is transferred according to\r\n    // MiniMe Token logic\r\n    doTransfer(_holder, receiver, nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke all grants of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   */\r\n    function revokeAllTokenGrants(address _holder) {\r\n        var grandsCount = tokenGrantsCount(_holder);\r\n        for (uint i = 0; i < grandsCount; i++) {\r\n          revokeTokenGrant(_holder, 0);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specifc time.\r\n   * @param tokens uint256 The amount of tokens grantted.\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the begining of the grant\r\n   * @param cliff uint64 The cliff period.\r\n   * @param vesting uint64 The vesting period.\r\n   * @return An uint representing the amount of vested tokensof a specif grant.\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      // vestedTokens = tokens * (time - start) / (vesting - start)\r\n      uint256 vestedTokens = SafeMath.div(\r\n                                    SafeMath.mul(\r\n                                      tokens,\r\n                                      SafeMath.sub(time, start)\r\n                                      ),\r\n                                    SafeMath.sub(vesting, start)\r\n                                    );\r\n\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Get all information about a specifc grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return grant.value.sub(vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the date when the holder can trasfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = SafeMath.max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}\r\n\r\n\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\r\n\r\ncontract District0xNetworkToken is MiniMeToken, VestedToken {\r\n    function District0xNetworkToken(address _controller, address _tokenFactory)\r\n        MiniMeToken(\r\n            _tokenFactory,\r\n            0x0,                        // no parent token\r\n            0,                          // no snapshot block number from parent\r\n            \"district0x Network Token\", // Token name\r\n            18,                         // Decimals\r\n            \"DNT\",                      // Symbol\r\n            true                        // Enable transfers\r\n            )\r\n    {\r\n        changeController(_controller);\r\n        changeGrantsController(_controller);\r\n    }\r\n}\r\n\r\ncontract HasNoTokens is Ownable {\r\n\r\n  District0xNetworkToken public district0xNetworkToken;\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    throw;\r\n  }\r\n\r\n  function isTokenSaleToken(address tokenAddr) returns(bool);\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param tokenAddr address The address of the token contract\r\n   */\r\n  function reclaimToken(address tokenAddr) external onlyOwner {\r\n    require(!isTokenSaleToken(tokenAddr));\r\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\r\n    uint256 balance = tokenInst.balanceOf(this);\r\n    tokenInst.transfer(msg.sender, balance);\r\n  }\r\n}\r\n\r\n\r\ncontract District0xContribution is Pausable, HasNoTokens, TokenController {\r\n    using SafeMath for uint;\r\n\r\n    District0xNetworkToken public district0xNetworkToken;\r\n    address public multisigWallet;                                      // Wallet that receives all sale funds\r\n    address public founder1;                                            // Wallet of founder 1\r\n    address public founder2;                                            // Wallet of founder 2\r\n    address public earlySponsor;                                        // Wallet of early sponsor\r\n    address[] public advisers;                                          // 4 Wallets of advisors\r\n\r\n    uint public constant FOUNDER1_STAKE = 119000000 ether;              // 119M DNT\r\n    uint public constant FOUNDER2_STAKE = 79000000 ether;               // 79M  DNT\r\n    uint public constant EARLY_CONTRIBUTOR_STAKE = 5000000 ether;       // 5M   DNT\r\n    uint public constant ADVISER_STAKE = 5000000 ether;                 // 5M   DNT\r\n    uint public constant ADVISER_STAKE2 = 1000000 ether;                // 1M   DNT\r\n    uint public constant COMMUNITY_ADVISERS_STAKE = 5000000 ether;      // 5M   DNT\r\n    uint public constant CONTRIB_PERIOD1_STAKE = 600000000 ether;       // 600M DNT\r\n    uint public constant CONTRIB_PERIOD2_STAKE = 140000000 ether;       // 140M DNT\r\n    uint public constant CONTRIB_PERIOD3_STAKE = 40000000 ether;        // 40M  DNT\r\n\r\n    uint public minContribAmount = 0.01 ether;                          // 0.01 ether\r\n    uint public maxGasPrice = 50000000000;                              // 50 GWei\r\n\r\n    uint public constant TEAM_VESTING_CLIFF = 24 weeks;                 // 6 months vesting cliff for founders and advisors, except community advisors\r\n    uint public constant TEAM_VESTING_PERIOD = 96 weeks;                // 2 years vesting period for founders and advisors, except community advisors\r\n\r\n    uint public constant EARLY_CONTRIBUTOR_VESTING_CLIFF = 12 weeks;    // 3 months vesting cliff for early sponsor\r\n    uint public constant EARLY_CONTRIBUTOR_VESTING_PERIOD = 24 weeks;   // 6 months vesting cliff for early sponsor\r\n\r\n    bool public tokenTransfersEnabled = false;                          // DNT token transfers will be enabled manually\r\n                                                                        // after first contribution period\r\n                                                                        // Can't be disabled back\r\n    struct Contributor {\r\n        uint amount;                        // Amount of ETH contributed by an address in given contribution period\r\n        bool isCompensated;                 // Whether this contributor received DNT token for ETH contribution\r\n        uint amountCompensated;             // Amount of DNT received. Not really needed to store,\r\n                                            // but stored for accounting and security purposes\r\n    }\r\n\r\n    uint public softCapAmount;                                 // Soft cap of contribution period in wei\r\n    uint public afterSoftCapDuration;                          // Number of seconds to the end of sale from the moment of reaching soft cap (unless reaching hardcap)\r\n    uint public hardCapAmount;                                 // When reached this amount of wei, the contribution will end instantly\r\n    uint public startTime;                                     // Start time of contribution period in UNIX time\r\n    uint public endTime;                                       // End time of contribution period in UNIX time\r\n    bool public isEnabled;                                     // If contribution period was enabled by multisignature\r\n    bool public softCapReached;                                // If soft cap was reached\r\n    bool public hardCapReached;                                // If hard cap was reached\r\n    uint public totalContributed;                              // Total amount of ETH contributed in given period\r\n    address[] public contributorsKeys;                         // Addresses of all contributors in given contribution period\r\n    mapping (address => Contributor) public contributors;\r\n\r\n    event onContribution(uint totalContributed, address indexed contributor, uint amount,\r\n        uint contributorsCount);\r\n    event onSoftCapReached(uint endTime);\r\n    event onHardCapReached(uint endTime);\r\n    event onCompensated(address indexed contributor, uint amount);\r\n\r\n    modifier onlyMultisig() {\r\n        require(multisigWallet == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function District0xContribution(\r\n        address _multisigWallet,\r\n        address _founder1,\r\n        address _founder2,\r\n        address _earlySponsor,\r\n        address[] _advisers\r\n    ) {\r\n        require(_advisers.length == 5);\r\n        multisigWallet = _multisigWallet;\r\n        founder1 = _founder1;\r\n        founder2 = _founder2;\r\n        earlySponsor = _earlySponsor;\r\n        advisers = _advisers;\r\n    }\r\n\r\n    // @notice Returns true if contribution period is currently running\r\n    function isContribPeriodRunning() constant returns (bool) {\r\n        return !hardCapReached &&\r\n               isEnabled &&\r\n               startTime <= now &&\r\n               endTime > now;\r\n    }\r\n\r\n    function contribute()\r\n        payable\r\n        stopInEmergency\r\n    {\r\n        contributeWithAddress(msg.sender);\r\n    }\r\n\r\n    // @notice Function to participate in contribution period\r\n    //  Amounts from the same address should be added up\r\n    //  If soft or hard cap is reached, end time should be modified\r\n    //  Funds should be transferred into multisig wallet\r\n    // @param contributor Address that will receive DNT token\r\n    function contributeWithAddress(address contributor)\r\n        payable\r\n        stopInEmergency\r\n    {\r\n        require(tx.gasprice <= maxGasPrice);\r\n        require(msg.value >= minContribAmount);\r\n        require(isContribPeriodRunning());\r\n\r\n        uint contribValue = msg.value;\r\n        uint excessContribValue = 0;\r\n\r\n        uint oldTotalContributed = totalContributed;\r\n\r\n        totalContributed = oldTotalContributed.add(contribValue);\r\n\r\n        uint newTotalContributed = totalContributed;\r\n\r\n        // Soft cap was reached\r\n        if (newTotalContributed >= softCapAmount &&\r\n            oldTotalContributed < softCapAmount)\r\n        {\r\n            softCapReached = true;\r\n            endTime = afterSoftCapDuration.add(now);\r\n            onSoftCapReached(endTime);\r\n        }\r\n        // Hard cap was reached\r\n        if (newTotalContributed >= hardCapAmount &&\r\n            oldTotalContributed < hardCapAmount)\r\n        {\r\n            hardCapReached = true;\r\n            endTime = now;\r\n            onHardCapReached(endTime);\r\n\r\n            // Everything above hard cap will be sent back to contributor\r\n            excessContribValue = newTotalContributed.sub(hardCapAmount);\r\n            contribValue = contribValue.sub(excessContribValue);\r\n\r\n            totalContributed = hardCapAmount;\r\n        }\r\n\r\n        if (contributors[contributor].amount == 0) {\r\n            contributorsKeys.push(contributor);\r\n        }\r\n\r\n        contributors[contributor].amount = contributors[contributor].amount.add(contribValue);\r\n\r\n        multisigWallet.transfer(contribValue);\r\n        if (excessContribValue > 0) {\r\n            msg.sender.transfer(excessContribValue);\r\n        }\r\n        onContribution(newTotalContributed, contributor, contribValue, contributorsKeys.length);\r\n    }\r\n\r\n    // @notice This method is called by owner after contribution period ends, to distribute DNT in proportional manner\r\n    //  Each contributor should receive DNT just once even if this method is called multiple times\r\n    //  In case of many contributors must be able to compensate contributors in paginational way, otherwise might\r\n    //  run out of gas if wanted to compensate all on one method call. Therefore parameters offset and limit\r\n    // @param periodIndex Index of contribution period (0-2)\r\n    // @param offset Number of first contributors to skip.\r\n    // @param limit Max number of contributors compensated on this call\r\n    function compensateContributors(uint offset, uint limit)\r\n        onlyOwner\r\n    {\r\n        require(isEnabled);\r\n        require(endTime < now);\r\n\r\n        uint i = offset;\r\n        uint compensatedCount = 0;\r\n        uint contributorsCount = contributorsKeys.length;\r\n\r\n        uint ratio = CONTRIB_PERIOD1_STAKE\r\n            .mul(1000000000000000000)\r\n            .div(totalContributed);\r\n\r\n        while (i < contributorsCount && compensatedCount < limit) {\r\n            address contributorAddress = contributorsKeys[i];\r\n            if (!contributors[contributorAddress].isCompensated) {\r\n                uint amountContributed = contributors[contributorAddress].amount;\r\n                contributors[contributorAddress].isCompensated = true;\r\n\r\n                contributors[contributorAddress].amountCompensated =\r\n                    amountContributed.mul(ratio).div(1000000000000000000);\r\n\r\n                district0xNetworkToken.transfer(contributorAddress, contributors[contributorAddress].amountCompensated);\r\n                onCompensated(contributorAddress, contributors[contributorAddress].amountCompensated);\r\n\r\n                compensatedCount++;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // @notice Method for setting up contribution period\r\n    //  Only owner should be able to execute\r\n    //  Setting first contribution period sets up vesting for founders & advisors\r\n    //  Contribution period should still not be enabled after calling this method\r\n    // @param softCapAmount Soft Cap in wei\r\n    // @param afterSoftCapDuration Number of seconds till the end of sale in the moment of reaching soft cap (unless reaching hard cap)\r\n    // @param hardCapAmount Hard Cap in wei\r\n    // @param startTime Contribution start time in UNIX time\r\n    // @param endTime Contribution end time in UNIX time\r\n    function setContribPeriod(\r\n        uint _softCapAmount,\r\n        uint _afterSoftCapDuration,\r\n        uint _hardCapAmount,\r\n        uint _startTime,\r\n        uint _endTime\r\n    )\r\n        onlyOwner\r\n    {\r\n        require(_softCapAmount > 0);\r\n        require(_hardCapAmount > _softCapAmount);\r\n        require(_afterSoftCapDuration > 0);\r\n        require(_startTime > now);\r\n        require(_endTime > _startTime);\r\n        require(!isEnabled);\r\n\r\n        softCapAmount = _softCapAmount;\r\n        afterSoftCapDuration = _afterSoftCapDuration;\r\n        hardCapAmount = _hardCapAmount;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        district0xNetworkToken.revokeAllTokenGrants(founder1);\r\n        district0xNetworkToken.revokeAllTokenGrants(founder2);\r\n        district0xNetworkToken.revokeAllTokenGrants(earlySponsor);\r\n\r\n        for (uint j = 0; j < advisers.length; j++) {\r\n            district0xNetworkToken.revokeAllTokenGrants(advisers[j]);\r\n        }\r\n\r\n        uint64 vestingDate = uint64(startTime.add(TEAM_VESTING_PERIOD));\r\n        uint64 cliffDate = uint64(startTime.add(TEAM_VESTING_CLIFF));\r\n        uint64 earlyContribVestingDate = uint64(startTime.add(EARLY_CONTRIBUTOR_VESTING_PERIOD));\r\n        uint64 earlyContribCliffDate = uint64(startTime.add(EARLY_CONTRIBUTOR_VESTING_CLIFF));\r\n        uint64 startDate = uint64(startTime);\r\n\r\n        district0xNetworkToken.grantVestedTokens(founder1, FOUNDER1_STAKE, startDate, cliffDate, vestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(founder2, FOUNDER2_STAKE, startDate, cliffDate, vestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(earlySponsor, EARLY_CONTRIBUTOR_STAKE, startDate, earlyContribCliffDate, earlyContribVestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(advisers[0], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(advisers[1], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(advisers[2], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false);\r\n        district0xNetworkToken.grantVestedTokens(advisers[3], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false);\r\n\r\n        // Community advisors stake has no vesting, but we set it up this way, so we can revoke it in case of\r\n        // re-setting up contribution period\r\n        district0xNetworkToken.grantVestedTokens(advisers[4], COMMUNITY_ADVISERS_STAKE, startDate, startDate, startDate, true, false);\r\n    }\r\n\r\n    // @notice Enables contribution period\r\n    //  Must be executed by multisignature\r\n    function enableContribPeriod()\r\n        onlyMultisig\r\n    {\r\n        require(startTime > now);\r\n        isEnabled = true;\r\n    }\r\n\r\n    // @notice Sets new min. contribution amount\r\n    //  Only owner can execute\r\n    //  Cannot be executed while contribution period is running\r\n    // @param _minContribAmount new min. amount\r\n    function setMinContribAmount(uint _minContribAmount)\r\n        onlyOwner\r\n    {\r\n        require(_minContribAmount > 0);\r\n        require(startTime > now);\r\n        minContribAmount = _minContribAmount;\r\n    }\r\n\r\n    // @notice Sets new max gas price for contribution\r\n    //  Only owner can execute\r\n    //  Cannot be executed while contribution period is running\r\n    // @param _minContribAmount new min. amount\r\n    function setMaxGasPrice(uint _maxGasPrice)\r\n        onlyOwner\r\n    {\r\n        require(_maxGasPrice > 0);\r\n        require(startTime > now);\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n\r\n    // @notice Sets District0xNetworkToken contract\r\n    //  Generates all DNT tokens and assigns them to this contract\r\n    //  If token contract has already generated tokens, do not generate again\r\n    // @param _district0xNetworkToken District0xNetworkToken address\r\n    function setDistrict0xNetworkToken(address _district0xNetworkToken)\r\n        onlyOwner\r\n    {\r\n        require(_district0xNetworkToken != 0x0);\r\n        require(!isEnabled);\r\n        district0xNetworkToken = District0xNetworkToken(_district0xNetworkToken);\r\n        if (district0xNetworkToken.totalSupply() == 0) {\r\n            district0xNetworkToken.generateTokens(this, FOUNDER1_STAKE\r\n                .add(FOUNDER2_STAKE)\r\n                .add(EARLY_CONTRIBUTOR_STAKE)\r\n                .add(ADVISER_STAKE.mul(2))\r\n                .add(ADVISER_STAKE2.mul(2))\r\n                .add(COMMUNITY_ADVISERS_STAKE)\r\n                .add(CONTRIB_PERIOD1_STAKE));\r\n\r\n            district0xNetworkToken.generateTokens(multisigWallet, CONTRIB_PERIOD2_STAKE\r\n                .add(CONTRIB_PERIOD3_STAKE));\r\n        }\r\n    }\r\n\r\n    // @notice Enables transfers of DNT\r\n    //  Will be executed after first contribution period by owner\r\n    function enableDistrict0xNetworkTokenTransfers()\r\n        onlyOwner\r\n    {\r\n        require(endTime < now);\r\n        tokenTransfersEnabled = true;\r\n    }\r\n\r\n    // @notice Method to claim tokens accidentally sent to a DNT contract\r\n    //  Only multisig wallet can execute\r\n    // @param _token Address of claimed ERC20 Token\r\n    function claimTokensFromTokenDistrict0xNetworkToken(address _token)\r\n        onlyMultisig\r\n    {\r\n        district0xNetworkToken.claimTokens(_token, multisigWallet);\r\n    }\r\n\r\n    // @notice Kill method should not really be needed, but just in case\r\n    function kill(address _to) onlyMultisig external {\r\n        suicide(_to);\r\n    }\r\n\r\n    function()\r\n        payable\r\n        stopInEmergency\r\n    {\r\n        contributeWithAddress(msg.sender);\r\n    }\r\n\r\n    // MiniMe Controller default settings for allowing token transfers.\r\n    function proxyPayment(address _owner) payable public returns (bool) {\r\n        throw;\r\n    }\r\n\r\n    // Before transfers are enabled for everyone, only this contract is allowed to distribute DNT\r\n    function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\r\n        return tokenTransfersEnabled || _from == address(this) || _to == address(this);\r\n    }\r\n\r\n    function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\r\n        return tokenTransfersEnabled;\r\n    }\r\n\r\n    function isTokenSaleToken(address tokenAddr) returns(bool) {\r\n        return district0xNetworkToken == tokenAddr;\r\n    }\r\n\r\n    /*\r\n     Following constant methods are used for tests and contribution web app\r\n     They don't impact logic of contribution contract, therefor DOES NOT NEED TO BE AUDITED\r\n     */\r\n\r\n    // Used by contribution front-end to obtain contribution period properties\r\n    function getContribPeriod()\r\n        constant\r\n        returns (bool[3] boolValues, uint[8] uintValues)\r\n    {\r\n        boolValues[0] = isEnabled;\r\n        boolValues[1] = softCapReached;\r\n        boolValues[2] = hardCapReached;\r\n\r\n        uintValues[0] = softCapAmount;\r\n        uintValues[1] = afterSoftCapDuration;\r\n        uintValues[2] = hardCapAmount;\r\n        uintValues[3] = startTime;\r\n        uintValues[4] = endTime;\r\n        uintValues[5] = totalContributed;\r\n        uintValues[6] = contributorsKeys.length;\r\n        uintValues[7] = CONTRIB_PERIOD1_STAKE;\r\n\r\n        return (boolValues, uintValues);\r\n    }\r\n\r\n    // Used by contribution front-end to obtain contribution contract properties\r\n    function getConfiguration()\r\n        constant\r\n        returns (bool, address, address, address, address, address[] _advisers, bool, uint)\r\n    {\r\n        _advisers = new address[](advisers.length);\r\n        for (uint i = 0; i < advisers.length; i++) {\r\n            _advisers[i] = advisers[i];\r\n        }\r\n        return (stopped, multisigWallet, founder1, founder2, earlySponsor, _advisers, tokenTransfersEnabled,\r\n            maxGasPrice);\r\n    }\r\n\r\n    // Used by contribution front-end to obtain contributor's properties\r\n    function getContributor(address contributorAddress)\r\n        constant\r\n        returns(uint, bool, uint)\r\n    {\r\n        Contributor contributor = contributors[contributorAddress];\r\n        return (contributor.amount, contributor.isCompensated, contributor.amountCompensated);\r\n    }\r\n\r\n    // Function to verify if all contributors were compensated\r\n    function getUncompensatedContributors(uint offset, uint limit)\r\n        constant\r\n        returns (uint[] contributorIndexes)\r\n    {\r\n        uint contributorsCount = contributorsKeys.length;\r\n\r\n        if (limit == 0) {\r\n            limit = contributorsCount;\r\n        }\r\n\r\n        uint i = offset;\r\n        uint resultsCount = 0;\r\n        uint[] memory _contributorIndexes = new uint[](limit);\r\n\r\n        while (i < contributorsCount && resultsCount < limit) {\r\n            if (!contributors[contributorsKeys[i]].isCompensated) {\r\n                _contributorIndexes[resultsCount] = i;\r\n                resultsCount++;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        contributorIndexes = new uint[](resultsCount);\r\n        for (i = 0; i < resultsCount; i++) {\r\n            contributorIndexes[i] = _contributorIndexes[i];\r\n        }\r\n        return contributorIndexes;\r\n    }\r\n\r\n    function getNow()\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minContribAmount\",\"type\":\"uint256\"}],\"name\":\"setMinContribAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advisers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_CONTRIBUTOR_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isCompensated\",\"type\":\"bool\"},{\"name\":\"amountCompensated\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_ADVISERS_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softCapAmount\",\"type\":\"uint256\"},{\"name\":\"_afterSoftCapDuration\",\"type\":\"uint256\"},{\"name\":\"_hardCapAmount\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setContribPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISER_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokensFromTokenDistrict0xNetworkToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributorAddress\",\"type\":\"address\"}],\"name\":\"getContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISER_STAKE2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorsKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_VESTING_CLIFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_CONTRIBUTOR_VESTING_CLIFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableContribPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"afterSoftCapDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_advisers\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDER2_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIB_PERIOD2_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributeWithAddress\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlySponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIB_PERIOD3_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableDistrict0xNetworkTokenTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUncompensatedContributors\",\"outputs\":[{\"name\":\"contributorIndexes\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContribPeriodRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_district0xNetworkToken\",\"type\":\"address\"}],\"name\":\"setDistrict0xNetworkToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_VESTING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"district0xNetworkToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContribPeriod\",\"outputs\":[{\"name\":\"boolValues\",\"type\":\"bool[3]\"},{\"name\":\"uintValues\",\"type\":\"uint256[8]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"isTokenSaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIB_PERIOD1_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_CONTRIBUTOR_VESTING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDER1_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"compensateContributors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_founder1\",\"type\":\"address\"},{\"name\":\"_founder2\",\"type\":\"address\"},{\"name\":\"_earlySponsor\",\"type\":\"address\"},{\"name\":\"_advisers\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalContributed\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributorsCount\",\"type\":\"uint256\"}],\"name\":\"onContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onSoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onHardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onCompensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isStopped\",\"type\":\"bool\"}],\"name\":\"onEmergencyChanged\",\"type\":\"event\"}]","ContractName":"District0xContribution","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d20e4d854c71de2428e1268167753e4c7070ae680000000000000000000000000e90d8f85fc3107df47d20444244feaa824d1082000000000000000000000000a8dc2b53ecebeaa641ebb0601a69fbf936ee04f400000000000000000000000000e5cdd4b7b3a78a4277749957553371cb6b231000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000518611649ee8fefed0a4da3d47bab213c79ce9b5000000000000000000000000dbd6ffd3cb205576367915dd2f8de0af7edcceef00000000000000000000000061ef0722fb8c4f11cb2f0091ea1dc22b6dff89c10000000000000000000000008f077c8b4876004ef3549ceebf312d36f5b109ef000000000000000000000000b58f2c5431ba945d765e92c14990bed40990f719","Library":"","SwarmSource":"bzzr://f3367415b01d924ff09c28d982cfd787a3fa056a172635b4d22ae50077555eec"}]}