{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\n/*************************************************************************\\\r\n *  Autobid: Automatic Bidirectional Distribution contract\r\n *\r\n *  Allows users to exchange ETH for tokens (and vice versa) at a \r\n *  predefined rate until an expiration timestamp is reached or the\r\n *  contract token supply is fully depleted\r\n *\r\n *  Note: users must go through the approve() -> redeemTokens() process\r\n *  in order to successfully convert their token balances back to ETH\r\n *  (i.e. autobid contract will not recognize direct token transfers)\r\n *\r\n\\*************************************************************************/\r\ncontract Autobid {\r\n  /*************\\\r\n   *  Storage  *\r\n  \\*************/\r\n  address public admin;         // account with access to contract balance after expiration\r\n  address public token;         // the token address\r\n  uint public exchangeRate;     // number of tokens per ETH\r\n  uint public expirationTime;   // epoch timestamp at which the contract expires\r\n  bool public active;           // whether contract is still active (false after expiration)\r\n\r\n  /************\\\r\n   *  Events  *\r\n  \\************/\r\n  event TokenClaim(address tokenContract, address claimant, uint ethDeposited, uint tokensGranted);\r\n  event Redemption(address redeemer, uint tokensDeposited, uint redemptionAmount);\r\n\r\n  /**************\\\r\n   *  Modifiers\r\n  \\**************/\r\n  modifier autobidActive() {\r\n    // Check active variable\r\n    require(active);\r\n\r\n    // Also check current timestamp (edge condition sanity check)\r\n    require(now < expirationTime);\r\n    _;\r\n  }\r\n\r\n  modifier autobidExpired() {\r\n    require(!active);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  /*********************\\\r\n   *  Public functions\r\n   *********************************************************************************\\\r\n   *  @dev Constructor\r\n   *  @param _admin Account with access to contract balance after expiration\r\n   *  @param _token Token recognized by autobid contract\r\n   *  @param _exchangeRate Number of tokens granted per ETH sent\r\n   *  @param _expirationTime Epoch time at which contract expires\r\n   *\r\n  \\*********************************************************************************/\r\n  function Autobid(address _admin, address _token, uint _exchangeRate, uint _expirationTime) public {\r\n    admin = _admin;\r\n    token = _token;\r\n    exchangeRate = _exchangeRate;\r\n    expirationTime = _expirationTime;\r\n    active = true;\r\n  }\r\n\r\n  /********************************************\\\r\n   *  @dev Deposit function\r\n   *  Anyone can pay while contract is active\r\n  \\********************************************/\r\n  function () public payable autobidActive {\r\n    // Calculate number of tokens owed to sender\r\n    uint tokenQuantity = msg.value * exchangeRate;\r\n\r\n    // Ensure that sender receives their tokens\r\n    require(Token(token).transfer(msg.sender, tokenQuantity));\r\n\r\n    // Check if contract has now expired (i.e. is empty)\r\n    expirationCheck();\r\n\r\n    // Fire TokenClaim event\r\n    TokenClaim(token, msg.sender, msg.value, tokenQuantity);\r\n  }\r\n\r\n  /******************************************************\\\r\n   *  @dev Redeem function (exchange tokens back to ETH)\r\n   *  @param amount Number of tokens exchanged\r\n   *  Anyone can redeem while contract is active\r\n  \\******************************************************/\r\n  function redeemTokens(uint amount) public autobidActive {\r\n    // NOTE: redeemTokens will only work once the sender has approved \r\n    // the RedemptionContract address for the deposit amount \r\n    require(Token(token).transferFrom(msg.sender, this, amount));\r\n\r\n    uint redemptionValue = amount / exchangeRate; \r\n\r\n    msg.sender.transfer(redemptionValue);\r\n\r\n    // Fire Redemption event\r\n    Redemption(msg.sender, amount, redemptionValue);\r\n  }\r\n\r\n  /**************************************************************\\\r\n   *  @dev Expires contract if any expiration criteria is met\r\n   *  (declared as public function to allow direct manual call)\r\n  \\**************************************************************/\r\n  function expirationCheck() public {\r\n    // If expirationTime has been passed, contract expires\r\n    if (now > expirationTime) {\r\n      active = false;\r\n    }\r\n\r\n    // If the contract's token supply is depleted, it expires\r\n    uint remainingTokenSupply = Token(token).balanceOf(this);\r\n    if (remainingTokenSupply < exchangeRate) {\r\n      active = false;\r\n    }\r\n  }\r\n\r\n  /*****************************************************\\\r\n   *  @dev Withdraw function (ETH)\r\n   *  @param amount Quantity of ETH (in wei) withdrawn\r\n   *  Admin can only withdraw after contract expires\r\n  \\*****************************************************/\r\n  function adminWithdraw(uint amount) public autobidExpired onlyAdmin {\r\n    // Send ETH\r\n    msg.sender.transfer(amount);\r\n\r\n    // Fire Redemption event\r\n    Redemption(msg.sender, 0, amount);\r\n  }\r\n\r\n  /********************************************************\\\r\n   *  @dev Withdraw function (tokens)\r\n   *  @param amount Quantity of tokens withdrawn\r\n   *  Admin can only access tokens after contract expires\r\n  \\********************************************************/\r\n  function adminWithdrawTokens(uint amount) public autobidExpired onlyAdmin {\r\n    // Send tokens\r\n    require(Token(token).transfer(msg.sender, amount));\r\n\r\n    // Fire TokenClaim event\r\n    TokenClaim(token, msg.sender, 0, amount);\r\n  }\r\n\r\n  /********************************************************\\\r\n   *  @dev Withdraw function (for miscellaneous tokens)\r\n   *  @param tokenContract Address of the token contract\r\n   *  @param amount Quantity of tokens withdrawn\r\n   *  Admin can only access tokens after contract expires\r\n  \\********************************************************/\r\n  function adminWithdrawMiscTokens(address tokenContract, uint amount) public autobidExpired onlyAdmin {\r\n    // Send tokens\r\n    require(Token(tokenContract).transfer(msg.sender, amount));\r\n\r\n    // Fire TokenClaim event\r\n    TokenClaim(tokenContract, msg.sender, 0, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawMiscTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"expirationCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensGranted\",\"type\":\"uint256\"}],\"name\":\"TokenClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"redemptionAmount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"}]","ContractName":"Autobid","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000c3ba03b5671a17ea80056aec8bb7200d75d139000000000000000000000000c8fb9ad6f78ded4d9cf0fbdfcf3833f4b00ad7740000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000005b5fb940","Library":"","SwarmSource":"bzzr://1ee638d73b89d8b0e1074c98f927e2da135242e09a8d6b95b5312552ea2c667c"}]}