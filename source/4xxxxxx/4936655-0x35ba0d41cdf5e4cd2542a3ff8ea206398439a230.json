{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n* SMARTRealty\r\n* ERC-20 Token Standard Compliant + Crowdsale\r\n* @author Oyewole A. Samuel oyewoleabayomi@gmail.com\r\n*/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n* @title Admin parameters\r\n* @dev Define administration parameters for this contract\r\n*/\r\ncontract admined {\r\n    //This token contract is administered\r\n    address public admin; //Admin address is public\r\n    bool public lockSupply; //Mint and Burn Lock flag\r\n    bool public lockTransfer; //Transfer Lock flag\r\n    address public allowedAddress; //an address that can override lock condition\r\n    bool public lockTokenSupply;\r\n\r\n    /**\r\n    * @dev Contract constructor\r\n    * define initial administrator\r\n    */\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set an allowed address\r\n    * @param _to The address to give privileges.\r\n    */\r\n    function setAllowedAddress(address _to) public {\r\n        allowedAddress = _to;\r\n        AllowedSet(_to);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier supplyLock() { //A modifier to lock mint and burn transactions\r\n        require(lockSupply == false);\r\n        _;\r\n    }\r\n\r\n    modifier transferLock() { //A modifier to lock transactions\r\n        require(lockTransfer == false || allowedAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set new admin address\r\n    * @param _newAdmin The address to transfer administration to\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set mint and burn locks\r\n    * @param _set boolean flag (true | false)\r\n    */\r\n    function setSupplyLock(bool _set) onlyAdmin public { //Only the admin can set a lock on supply\r\n        lockSupply = _set;\r\n        SetSupplyLock(_set);\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set transfer lock\r\n    * @param _set boolean flag (true | false)\r\n    */\r\n    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\r\n        lockTransfer = _set;\r\n        SetTransferLock(_set);\r\n    }\r\n\r\n    function setLockTokenSupply(bool _set) onlyAdmin public {\r\n        lockTokenSupply = _set;\r\n        SetLockTokenSupply(_set);\r\n    }\r\n\r\n    function getLockTokenSupply() returns (bool) {\r\n        return lockTokenSupply;\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event AllowedSet(address _to);\r\n    event SetSupplyLock(bool _set);\r\n    event SetTransferLock(bool _set);\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n    event SetLockTokenSupply(bool _set);\r\n\r\n}\r\n\r\n/**\r\n * Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n* @title Token definition\r\n* @dev Define token paramters including ERC20 ones\r\n*/\r\ncontract StandardToken is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances; //A mapping of all balances per address\r\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\r\n    mapping (address => bool) frozen; //A mapping of frozen accounts\r\n\r\n    /**\r\n    * @dev Get the balance of an specified address.\r\n    * @param _owner The address to be query.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) transferLock public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(balances[msg.sender] >= _value);\r\n        require(frozen[msg.sender]==false);\r\n        balances[msg.sender] = balances[msg.sender].safeSub(_value);\r\n        balances[_to] = balances[_to].safeAdd(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token from an address to another specified address using allowance\r\n    * @param _from The address where token comes.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        require(frozen[_from]==false);\r\n        balances[_to] = balances[_to].safeAdd(_value);\r\n        balances[_from] = balances[_from].safeSub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Assign allowance to an specified address to use the owner balance\r\n    * @param _spender The address to be allowed to spend.\r\n    * @param _value The amount to be allowed.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the allowance of an specified address to use another address balance.\r\n    * @param _owner The address of the owner of the tokens.\r\n    * @param _spender The address of the allowed spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Mint token to an specified address.\r\n    * @param _target The address of the receiver of the tokens.\r\n    * @param _mintedAmount amount to mint.\r\n    */\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin supplyLock public {\r\n        balances[_target] = SafeMath.safeAdd(balances[_target], _mintedAmount);\r\n        totalSupply = SafeMath.safeAdd(totalSupply, _mintedAmount);\r\n        Transfer(0, this, _mintedAmount);\r\n        Transfer(this, _target, _mintedAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn token of an specified address.\r\n    * @param _target The address of the holder of the tokens.\r\n    * @param _burnedAmount amount to burn.\r\n    */\r\n    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin supplyLock public {\r\n        balances[_target] = SafeMath.safeSub(balances[_target], _burnedAmount);\r\n        totalSupply = SafeMath.safeSub(totalSupply, _burnedAmount);\r\n        Burned(_target, _burnedAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Frozen account.\r\n    * @param _target The address to being frozen.\r\n    * @param _flag The status of the frozen\r\n    */\r\n    function setFrozen(address _target,bool _flag) onlyAdmin public {\r\n        frozen[_target]=_flag;\r\n        FrozenStatus(_target,_flag);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n    event FrozenStatus(address _target,bool _flag);\r\n}\r\n\r\ncontract SMARTRealty is StandardToken{\r\n    //using SafeMath for uint256;\r\n    \r\n    string public name = \"SMARTRealty\";\r\n    string public symbol = \"RLTY\";\r\n    uint8 public decimals = 8;\r\n    string public version = \"1.0.0\";\r\n\r\n    uint public constant RATE = 1250; //1 RLTY = 0.0008 ETH\r\n    address public owner;\r\n    \r\n    // amount of raised money in wei\r\n    uint256 weiRaised;    \r\n    \r\n    struct ICOPhase {\r\n        uint fromTimestamp; //ico starting timestamp\r\n        uint toTimestamp; // ico end timestamp\r\n        uint256 minimum; // Minimum purchase for each phase\r\n        uint256 fundRaised;\r\n        uint bonus; // In percent, ie 10 is a 10% for bonus\r\n        uint totalNumberOfTokenPurchase; //number of token allowed for each phase\r\n    }\r\n    \r\n    mapping(uint => ICOPhase) phases;\r\n    uint icoPhaseCounter = 0;\r\n    \r\n    enum IcoStatus{Pending, Active, Inactive}\r\n    IcoStatus status;    \r\n    \r\n    function SMARTRealty() public payable {\r\n        \r\n        owner = msg.sender;\r\n        \r\n        totalSupply = 500000000 * (10**uint256(decimals));          //500 million initial token creation\r\n        \r\n        //Tokens to creator wallet - For distribution        \r\n        balances[owner] = 200000000 * (10**uint256(decimals)); //40% for public distribution\r\n        \r\n        //Initial Token Distribution\r\n        balances[0xF9568bd772C9B517193275b3C2E0CDAd38E586bB] = 50000000 * (10**uint256(decimals)); //10% Development, Executive, and Advisory Teams\r\n        balances[0x07ADB1D9399Bd1Fa4fD613D3179DFE883755Bb13] = 50000000 * (10**uint256(decimals)); //10% SMARTRealty Economy\r\n        balances[0xd35909DbeEb5255D65b1ea14602C7f00ce3872f6] = 50000000 * (10**uint256(decimals)); //10% Marketing\r\n        balances[0x9D2Fe4D5f1dc4FcA1f0Ea5f461C9fAA5D09b9CCE] = 50000000 * (10**uint256(decimals)); //10% SMARTMortgages\r\n        balances[0x8Bb41848B6dD3D98b8849049b780dC3549568c89] = 25000000 * (10**uint256(decimals)); //5% Admin\r\n        balances[0xC78DF195DE5717FB15FB3448D5C6893E8e7fB254] = 25000000 * (10**uint256(decimals)); //5% Contractors\r\n        balances[0x4690678926BCf9B30985c06806d4568C0C498123] = 25000000 * (10**uint256(decimals)); //5% Legal\r\n        balances[0x08AF803F0F90ccDBFCe046Bc113822cFf415e148] = 20000000 * (10**uint256(decimals)); //4% Bounties and Giveaways\r\n        balances[0x8661dFb67dE4E5569da9859f5CB4Aa676cd5F480] = 5000000 * (10**uint256(decimals)); //1% Charitable Use\r\n        \r\n    }\r\n    \r\n    //Set ICO Status\r\n    function activateICOStatus() public {\r\n        status = IcoStatus.Active;\r\n    }    \r\n    \r\n    //Set each Phase of your ICO here\r\n    function setICOPhase(uint _fromTimestamp, uint _toTimestamp, uint256 _min, uint _bonus) onlyAdmin public returns (uint ICOPhaseId) {\r\n        uint icoPhaseId = icoPhaseCounter++;\r\n        ICOPhase storage ico = phases[icoPhaseId];\r\n        ico.fromTimestamp = _fromTimestamp;\r\n        ico.toTimestamp = _toTimestamp;\r\n        ico.minimum = _min;\r\n        ico.bonus = _bonus;\r\n        //ico.totalNumberOfTokenPurchase = _numOfToken;\r\n\r\n        phases[icoPhaseId] = ico;\r\n\r\n        return icoPhaseId;\r\n    }\r\n    \r\n    //Get current ICO Phase\r\n    function getCurrentICOPhaseBonus() public view returns (uint _bonus, uint icoPhaseId) {\r\n        require(icoPhaseCounter > 0);\r\n        uint currentTimestamp = block.timestamp; //Get the current block timestamp\r\n\r\n        for (uint i = 0; i < icoPhaseCounter; i++) {\r\n            \r\n            ICOPhase storage ico = phases[i];\r\n\r\n            if (currentTimestamp >= ico.fromTimestamp && currentTimestamp <= ico.toTimestamp) {\r\n                return (ico.bonus, i);\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    // Override this method to have a way to add business logic to your crowdsale when buying\r\n    function getTokenAmount(uint256 weiAmount) internal returns(uint256 token, uint id) {\r\n        var (bonus, phaseId) = getCurrentICOPhaseBonus();       //get current ICO phase information\r\n        uint256 numOfTokens = weiAmount.safeMul(RATE);\r\n        uint256 bonusToken = (bonus / 100) * numOfTokens;\r\n        \r\n        uint256 totalToken = numOfTokens.safeAdd(bonusToken);               //Total tokens to transfer\r\n        return (totalToken, phaseId);\r\n    }    \r\n    \r\n    // low level token purchase function\r\n    function _buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0) && beneficiary != owner);\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        \r\n        // calculate token amount to be created\r\n        var (tokens, phaseId) = getTokenAmount(weiAmount);\r\n        \r\n        //update the current ICO Phase\r\n        ICOPhase storage ico = phases[phaseId]; //get phase\r\n        ico.fundRaised = ico.fundRaised.safeAdd(msg.value); //Update fundRaised for a particular phase\r\n        phases[phaseId] = ico;\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.safeAdd(weiAmount);\r\n        \r\n        _transferToken(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        \r\n        forwardFunds();\r\n    }\r\n    \r\n    function _transferToken(address _to, uint256 _amount) public returns (bool){\r\n        balances[owner] = balances[owner].safeSub(_amount);\r\n        balances[_to] = balances[_to].safeAdd(_amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;        \r\n    }\r\n    \r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        owner.transfer(msg.value);\r\n    }    \r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        _buyTokens(msg.sender);\r\n    } \r\n    \r\n    \r\n    event TokenPurchase(address _sender, address _beneficiary, uint256 weiAmount, uint256 tokens);\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"_buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentICOPhaseBonus\",\"outputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"icoPhaseId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromTimestamp\",\"type\":\"uint256\"},{\"name\":\"_toTimestamp\",\"type\":\"uint256\"},{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setICOPhase\",\"outputs\":[{\"name\":\"ICOPhaseId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setLockTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateICOStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getLockTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setSupplyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"FrozenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetSupplyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetLockTokenSupply\",\"type\":\"event\"}]","ContractName":"SMARTRealty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b3979d5ff8d6ec0775cc6ebb0982f22ee085a646a419c785406b7f7bb3ff9efd"}]}