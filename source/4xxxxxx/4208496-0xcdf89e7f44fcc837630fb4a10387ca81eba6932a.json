{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\n\r\n/// @title Multi signature token wallet - Allows multiple parties to approve tokens transfer\r\n/// @author popofe (Avalon Platform) - <popofe@avalon.nu>\r\n\r\ncontract MultiSigTokenWallet {\r\n    /// @dev No fallback function to prevent ether deposit\r\n\r\n    address constant public TOKEN = 0xeD247980396B10169BB1d36f6e278eD16700a60f;\r\n\r\n    event Confirmation(address source, uint actionId);\r\n    event Revocation(address source, uint actionId);\r\n    event NewAction(uint actionId);\r\n    event Execution(uint actionId);\r\n    event ExecutionFailure(uint actionId);\r\n    event OwnerAddition(address owner);\r\n    event OwnerWithdraw(address owner);\r\n    event QuorumChange(uint quorum);\r\n\r\n    enum ActionChoices { AddOwner, ChangeQuorum, DeleteAction, TransferToken, WithdrawOwner}\r\n    mapping (uint => Action) public actions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint public quorum;\r\n    uint public actionCount;\r\n\r\n    struct Action {\r\n        address addressField;\r\n        uint value;\r\n        ActionChoices actionType;\r\n        bool executed;\r\n        bool deleted;\r\n    }\r\n\r\n    modifier ownerDeclared(address owner) {\r\n        require (isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier actionSubmitted(uint actionId) {\r\n        require (   actions[actionId].addressField != 0\r\n                 || actions[actionId].value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint actionId, address owner) {\r\n        require (confirmations[actionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint actionId, address owner) {\r\n        require (!confirmations[actionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint actionId) {\r\n        require (!actions[actionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notDeleted(uint actionId) {\r\n        require (!actions[actionId].deleted);\r\n        _;\r\n    }\r\n\r\n    modifier validQuorum(uint ownerCount, uint _quorum) {\r\n        require (_quorum <= ownerCount && _quorum > 0);\r\n        _;\r\n    }\r\n\r\n    modifier validAction(address  addressField, uint value, ActionChoices actionType) {\r\n        require ((actionType == ActionChoices.AddOwner && addressField != 0 && value == 0)\r\n                || (actionType == ActionChoices.ChangeQuorum && addressField == 0 && value > 0)\r\n                || (actionType == ActionChoices.DeleteAction && addressField == 0 && value > 0)\r\n                || (actionType == ActionChoices.TransferToken && addressField != 0 && value > 0)\r\n                || (actionType == ActionChoices.WithdrawOwner && addressField != 0 && value == 0));\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _quorum Number of required confirmations.\r\n    function MultiSigTokenWallet(address[] _owners, uint _quorum)\r\n        public\r\n        validQuorum(_owners.length, _quorum)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            require (!isOwner[_owners[i]] && _owners[i] != 0);\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        quorum = _quorum;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. \r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        private\r\n    {\r\n        require(!isOwner[owner]);\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to withdraw an owner. \r\n    /// @param owner Address of owner.\r\n    function withdrawOwner(address owner)\r\n        private\r\n    {\r\n        require (isOwner[owner]);\r\n        require (owners.length - 1 >= quorum);\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        OwnerWithdraw(owner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations.\r\n    /// @param _quorum Number of required confirmations.\r\n    function changeQuorum(uint _quorum)\r\n        private\r\n    {\r\n        require (_quorum > 0 && _quorum <= owners.length);\r\n        quorum = _quorum;\r\n        QuorumChange(_quorum);\r\n    }\r\n\r\n    /// @dev Allows to delete a previous action not executed\r\n    /// @param _actionId Number of required confirmations.\r\n    function deleteAction(uint _actionId)\r\n        private\r\n        notExecuted(_actionId)\r\n    {\r\n        actions[_actionId].deleted = true;\r\n    }\r\n\r\n    /// @dev Allows to delete a previous action not executed\r\n    /// @param _destination address that receive tokens.\r\n    /// @param _value Number of tokens.\r\n    function transferToken(address _destination, uint _value)\r\n        private\r\n        returns (bool)\r\n    {\r\n        ERC20Basic ERC20Contract = ERC20Basic(TOKEN);\r\n        return ERC20Contract.transfer(_destination, _value);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param addressField Action target address.\r\n    /// @param value Number of token / new quorum to reach.\r\n    /// @return Returns transaction ID.\r\n    function submitAction(address addressField, uint value, ActionChoices actionType)\r\n        public\r\n        ownerDeclared(msg.sender)\r\n        validAction(addressField, value, actionType)\r\n        returns (uint actionId)\r\n    {\r\n        actionId = addAction(addressField, value, actionType);\r\n        confirmAction(actionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param actionId Action ID.\r\n    function confirmAction(uint actionId)\r\n        public\r\n        ownerDeclared(msg.sender)\r\n        actionSubmitted(actionId)\r\n        notConfirmed(actionId, msg.sender)\r\n    {\r\n        confirmations[actionId][msg.sender] = true;\r\n        Confirmation(msg.sender, actionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param actionId Action ID.\r\n    function revokeConfirmation(uint actionId)\r\n        public\r\n        ownerDeclared(msg.sender)\r\n        confirmed(actionId, msg.sender)\r\n        notExecuted(actionId)\r\n    {\r\n        confirmations[actionId][msg.sender] = false;\r\n        Revocation(msg.sender, actionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param actionId Action ID.\r\n    function executeAction(uint actionId)\r\n        public\r\n        ownerDeclared(msg.sender)\r\n        actionSubmitted(actionId)\r\n        notExecuted(actionId)\r\n        notDeleted(actionId)\r\n    {\r\n        if (isConfirmed(actionId)) {\r\n            Action memory action = actions[actionId];\r\n            action.executed = true;\r\n            if (action.actionType == ActionChoices.AddOwner)\r\n                addOwner(action.addressField);\r\n            else if (action.actionType == ActionChoices.ChangeQuorum)\r\n                changeQuorum(action.value);\r\n            else if (action.actionType == ActionChoices.DeleteAction)\r\n                deleteAction(action.value);\r\n            else if (action.actionType == ActionChoices.TransferToken)\r\n                if (transferToken(action.addressField, action.value))\r\n                    Execution(actionId);\r\n                else {    \r\n                    ExecutionFailure(actionId);\r\n                    action.executed = false;\r\n                }\r\n            else if (action.actionType == ActionChoices.WithdrawOwner)\r\n                withdrawOwner(action.addressField);\r\n            else\r\n                revert();\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param actionId Action ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint actionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[actionId][owners[i]])\r\n                count += 1;\r\n            if (count == quorum)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Adds a new action to the transaction list, if action does not exist yet.\r\n    /// @param addressField address to send token or too add or withadraw as owner.\r\n    /// @param value number of tokens (useful only for token transfer).\r\n    /// @return Returns transaction ID.\r\n    function addAction(address addressField, uint value, ActionChoices actionType)\r\n        private\r\n        returns (uint)\r\n    {\r\n        actionCount += 1;\r\n        uint actionId = actionCount;\r\n        actions[actionId] = Action({\r\n            addressField: addressField,\r\n            value: value,\r\n            actionType: actionType,\r\n            executed: false,\r\n            deleted: false\r\n        });\r\n        NewAction(actionId);\r\n        return actionId;\r\n    }\r\n\r\n    /// @dev Returns number of confirmations of an action.\r\n    /// @param actionId Action ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint actionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[actionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of actions after filers are applied.\r\n    /// @param pending Include pending actions.\r\n    /// @param executed Include executed actions.\r\n    /// @return Total number of actions after filters are applied.\r\n    function getActionCount(bool pending, bool executed, bool exceptDeleted)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<actionCount; i++)\r\n            if (   ((pending && !actions[i].executed)\r\n                    || (executed && actions[i].executed))\r\n                && (!exceptDeleted || !actions[i].deleted))\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param actionId Action ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint actionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[actionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of action IDs in defined range.\r\n    /// @param pending Include pending actions.\r\n    /// @param executed Include executed actions.\r\n    /// @param exceptDeleted Exclude deleted actions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getActionIds(bool pending, bool executed, bool exceptDeleted)\r\n        public\r\n        constant\r\n        returns (uint[] memory)\r\n    {\r\n        uint[] memory actionIds;\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<actionCount; i++)\r\n            if (((pending && !actions[i].executed)\r\n                 || (executed && actions[i].executed))\r\n                && (!exceptDeleted || !actions[i].deleted))\r\n            {\r\n                actionIds[count] = i;\r\n                count += 1;\r\n            }\r\n            \r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"name\":\"addressField\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"deleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"confirmAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"executeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressField\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"actionType\",\"type\":\"uint8\"}],\"name\":\"submitAction\",\"outputs\":[{\"name\":\"actionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"exceptDeleted\",\"type\":\"bool\"}],\"name\":\"getActionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"exceptDeleted\",\"type\":\"bool\"}],\"name\":\"getActionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_quorum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"NewAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChange\",\"type\":\"event\"}]","ContractName":"MultiSigTokenWallet","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000B514431d5F4829fDb0390D7B280c9b7D2201206a","Library":"","SwarmSource":"bzzr://8101a07315b253ce6b2618ebc62df94aa4122b5856ab8f42be04cfef65806de6"}]}