{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n * Overflow aware uint math functions.\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function pct(uint numerator, uint denominator, uint precision) internal returns(uint quotient) {\r\n    uint _numerator = numerator * 10 ** (precision+1);\r\n    uint _quotient = ((_numerator / denominator) + 5) / 10;\r\n    return (_quotient);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n */\r\ncontract Token is SafeMath {\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = sub(balances[msg.sender], _value);\r\n            balances[_to] = add(balances[_to], _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = add(balances[_to], _value);\r\n            balances[_from] = sub(balances[_from], _value);\r\n            allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    // A vulernability of the approve method in the ERC20 standard was identified by\r\n    // Mikhail Vladimirov and Dmitry Khovratovich here:\r\n    // https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\r\n    // It's better to use this method which is not susceptible to over-withdrawing by the approvee.\r\n    /// @param _spender The address to approve\r\n    /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\r\n    /// @param _newValue The new value to approve, this will replace the _currentValue\r\n    /// @return bool Whether the approval was a success (see ERC20's `approve`)\r\n    function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\r\n        if (allowed[msg.sender][_spender] != _currentValue) {\r\n            return false;\r\n        }\r\n            return approve(_spender, _newValue);\r\n    }\r\n}\r\n\r\ncontract CHEXToken is Token {\r\n\r\n    string public constant name = \"CHEX Token\";\r\n    string public constant symbol = \"CHX\";\r\n    uint public constant decimals = 18;\r\n    uint public startBlock; //crowdsale start block\r\n    uint public endBlock; //crowdsale end block\r\n\r\n    address public founder;\r\n    address public owner;\r\n    \r\n    uint public totalSupply = 2000000000 * 10**decimals; // 2b tokens, each divided to up to 10^decimals units.\r\n    uint public etherCap = 2500000 * 10**decimals;\r\n    \r\n    uint public totalTokens = 0;\r\n    uint public presaleSupply = 0;\r\n    uint public presaleEtherRaised = 0;\r\n\r\n    event Buy(address indexed recipient, uint eth, uint chx);\r\n    event Deliver(address indexed recipient, uint chx, bytes32 _for);\r\n\r\n    uint public presaleAllocation = totalSupply / 2; //50% of token supply allocated for crowdsale\r\n    uint public strategicAllocation = totalSupply / 4; //25% of token supply allocated post-crowdsale for strategic supply\r\n    uint public reserveAllocation = totalSupply / 4; //25% of token supply allocated post-crowdsale for internal\r\n    bool public strategicAllocated = false;\r\n    bool public reserveAllocated = false;\r\n\r\n    uint public transferLockup = 5760; //no transfers until 1 day after sale is over\r\n    uint public strategicLockup = 80640; //strategic supply locked until 14 days after sale is over\r\n    uint public reserveLockup = 241920; //first wave of reserve locked until 42 days after sale is over\r\n\r\n    uint public reserveWave = 0; //increments each time 10% of reserve is allocated, to a max of 10\r\n    uint public reserveWaveTokens = reserveAllocation / 10; //10% of reserve will be released on each wave\r\n    uint public reserveWaveLockup = 172800; //30 day intervals before subsequent wave of reserve tokens can be released\r\n\r\n    uint public constant MIN_ETHER = 1 finney;\r\n\r\n    enum TokenSaleState {\r\n        Initial,    //contract initialized, bonus token\r\n        Presale,    //limited time crowdsale\r\n        Live,       //default price\r\n        Frozen      //prevent sale of tokens\r\n    }\r\n\r\n    TokenSaleState public _saleState = TokenSaleState.Initial;\r\n\r\n    function CHEXToken(address founderInput, address ownerInput, uint startBlockInput, uint endBlockInput) {\r\n        founder = founderInput;\r\n        owner = ownerInput;\r\n        startBlock = startBlockInput;\r\n        endBlock = endBlockInput;\r\n        \r\n        updateTokenSaleState();\r\n    }\r\n\r\n    function price() constant returns(uint) {\r\n        if (_saleState == TokenSaleState.Initial) return 6001;\r\n        if (_saleState == TokenSaleState.Presale) {\r\n            uint percentRemaining = pct((endBlock - block.number), (endBlock - startBlock), 3);\r\n            return 3000 + 3 * percentRemaining;\r\n        }\r\n        return 3000;\r\n    }\r\n\r\n    function updateTokenSaleState () {\r\n        if (_saleState == TokenSaleState.Frozen) return;\r\n\r\n        if (_saleState == TokenSaleState.Live && block.number > endBlock) return;\r\n        \r\n        if (_saleState == TokenSaleState.Initial && block.number >= startBlock) {\r\n            _saleState = TokenSaleState.Presale;\r\n        }\r\n        \r\n        if (_saleState == TokenSaleState.Presale && block.number > endBlock) {\r\n            _saleState = TokenSaleState.Live;\r\n        }\r\n    }\r\n\r\n    function() payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function buy(address recipient) payable {\r\n        if (recipient == 0x0) throw;\r\n        if (msg.value < MIN_ETHER) throw;\r\n        if (_saleState == TokenSaleState.Frozen) throw;\r\n        if ((_saleState == TokenSaleState.Initial || _saleState == TokenSaleState.Presale) && presaleSupply >= presaleAllocation) throw;\r\n        if ((_saleState == TokenSaleState.Initial || _saleState == TokenSaleState.Presale) && presaleEtherRaised >= etherCap) throw;\r\n\r\n        updateTokenSaleState();\r\n        uint tokens = mul(msg.value, price());\r\n\r\n        if (tokens <= 0) throw;\r\n        \r\n        balances[recipient] = add(balances[recipient], tokens);\r\n        totalTokens = add(totalTokens, tokens);\r\n\r\n        if (_saleState == TokenSaleState.Initial || _saleState == TokenSaleState.Presale) {\r\n            presaleEtherRaised = add(presaleEtherRaised, msg.value);\r\n            presaleSupply = add(presaleSupply, tokens);\r\n        }\r\n\r\n        founder.transfer(msg.value);\r\n        \r\n        Transfer(0, recipient, tokens);\r\n        Buy(recipient, msg.value, tokens);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= endBlock + transferLockup && msg.sender != founder && msg.sender != owner) throw;\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= endBlock + transferLockup && msg.sender != founder && msg.sender != owner) throw;\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    modifier onlyInternal {\r\n        require(msg.sender == owner || msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    function deliver(address recipient, uint tokens, bytes32 _for) onlyInternal {\r\n        if (tokens <= 0) throw;\r\n        if (_for == 0) throw;\r\n        if (totalTokens >= totalSupply) throw;\r\n        if (_saleState == TokenSaleState.Frozen) throw;\r\n        if ((_saleState == TokenSaleState.Initial || _saleState == TokenSaleState.Presale) && presaleSupply >= presaleAllocation) throw;\r\n\r\n        updateTokenSaleState();\r\n\r\n        balances[recipient] = add(balances[recipient], tokens);\r\n        totalTokens = add(totalTokens, tokens);\r\n\r\n        if (_saleState == TokenSaleState.Initial || _saleState == TokenSaleState.Presale) {\r\n            presaleSupply = add(presaleSupply, tokens);\r\n        }\r\n\r\n        Transfer(0, recipient, tokens);    \r\n        Deliver(recipient, tokens, _for);\r\n    }\r\n\r\n    function allocateStrategicTokens() onlyInternal {\r\n        if (block.number <= endBlock + strategicLockup) throw;\r\n        if (strategicAllocated) throw;\r\n\r\n        balances[owner] = add(balances[owner], strategicAllocation);\r\n        totalTokens = add(totalTokens, strategicAllocation);\r\n\r\n        strategicAllocated = true;\r\n    }\r\n\r\n    function allocateReserveTokens() onlyInternal {\r\n        if (block.number <= endBlock + reserveLockup + (reserveWaveLockup * reserveWave)) throw;\r\n        if (reserveAllocated) throw;\r\n\r\n        balances[founder] = add(balances[founder], reserveWaveTokens);\r\n        totalTokens = add(totalTokens, reserveWaveTokens);\r\n\r\n        reserveWave++;\r\n        if (reserveWave >= 10) {\r\n            reserveAllocated = true;\r\n        }\r\n    }\r\n\r\n    function freeze() onlyInternal {\r\n        _saleState = TokenSaleState.Frozen;\r\n    }\r\n\r\n    function unfreeze() onlyInternal {\r\n        _saleState = TokenSaleState.Presale;\r\n        updateTokenSaleState();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateStrategicTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateReserveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenSaleState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategicAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"compareAndApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategicAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_saleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategicLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWave\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWaveLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWaveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"founderInput\",\"type\":\"address\"},{\"name\":\"ownerInput\",\"type\":\"address\"},{\"name\":\"startBlockInput\",\"type\":\"uint256\"},{\"name\":\"endBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chx\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_for\",\"type\":\"bytes32\"}],\"name\":\"Deliver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CHEXToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074031094ba9b590fe4a3b4594a3a682dc05eecbc00000000000000000000000091dc241c0ec3129a7a6a46d52a51efd6ae4f45b500000000000000000000000000000000000000000000000000000000003de516000000000000000000000000000000000000000000000000000000000046af64","Library":"","SwarmSource":"bzzr://0d5e608889f967bb2fa4cbb6f62d1852c05bbf400423b8c2036640a1e02fe1c2"}]}