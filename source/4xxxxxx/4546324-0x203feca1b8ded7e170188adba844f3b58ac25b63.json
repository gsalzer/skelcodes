{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MilkCoinToken is MintableToken {\t\r\n \r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  uint public constant PERCENT_RATE = 100;\r\n\r\n  uint public constant BUY_BACK_BONUS = 20;\r\n   \r\n  string public constant name = \"Milkcoin\";\r\n   \r\n  string public constant symbol = \"MLCN\";\r\n    \r\n  uint8 public constant decimals = 2;\r\n\r\n  uint public invested;\r\n\r\n  uint public tokensAfterCrowdsale;\r\n\r\n  uint public startBuyBackDate;\r\n\r\n  uint public endBuyBackDate;\r\n\r\n  uint public toBuyBack;\r\n\r\n  bool public dividendsCalculated;\r\n\r\n  uint public dividendsIndex;\r\n\r\n  uint public dividendsPayedIndex;\r\n      \r\n  bool public dividendsPayed;\r\n\r\n  uint public ethToDividendsNeeds;\r\n\r\n  uint public buyBackInvestedValue;\r\n\r\n  address[] public addresses;\r\n\r\n  mapping(address => bool) public savedAddresses;\r\n\r\n  mapping(address => uint) public dividends;\r\n\r\n  mapping(address => bool) public lockAddresses;\r\n\r\n  function addAddress(address addr) internal {\r\n    if(!savedAddresses[addr]) {\r\n       savedAddresses[addr] = true;\r\n       addresses.push(addr); \r\n    }\r\n  }\r\n\r\n  function countOfAddresses() public constant returns(uint) {\r\n    return addresses.length;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    bool result = super.mint(_to, _amount);\r\n    if(result) {\r\n      addAddress(_to);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    return postProcessTransfer(super.transfer(_to, _value), msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    return postProcessTransfer(super.transferFrom(_from, _to, _value), _from, _to, _value);\r\n  }\r\n\r\n  function postProcessTransfer(bool result, address _from, address _to, uint256 _value) internal returns (bool) {\r\n    if(result) {\r\n      if(_to == address(this)) {\r\n        buyBack(_from, _value);\r\n      } else { \r\n        addAddress(_to);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function buyBack(address from, uint amount) internal {\r\n    if(now > endBuyBackDate) {\r\n      startBuyBackDate = endBuyBackDate;\r\n      endBuyBackDate = startBuyBackDate + 1 years;      \r\n      toBuyBack = tokensAfterCrowdsale.div(10);\r\n    }\r\n    require(now > startBuyBackDate && now < endBuyBackDate && amount <= toBuyBack); \r\n    balances[this] = balances[this].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n    Burn(this, amount);\r\n    toBuyBack = toBuyBack.sub(amount);\r\n    uint valueInWei = amount.mul(buyBackInvestedValue).mul(PERCENT_RATE.add(BUY_BACK_BONUS)).div(PERCENT_RATE).div(totalSupply);\r\n    buyBackInvestedValue = buyBackInvestedValue.sub(amount.mul(buyBackInvestedValue).div(totalSupply));\r\n    from.transfer(valueInWei);\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    require(anotherToken != address(this));\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(owner, alienToken.balanceOf(this));\r\n  }\r\n\r\n  function finishMinting(uint newInvested) onlyOwner public returns (bool) {\r\n    invested = newInvested;\r\n    buyBackInvestedValue = newInvested;\r\n    tokensAfterCrowdsale = totalSupply;    \r\n    startBuyBackDate = now;\r\n    endBuyBackDate = startBuyBackDate + 365 * 1 days;      \r\n    toBuyBack = tokensAfterCrowdsale.div(10);\r\n    return super.finishMinting();\r\n  }\r\n\r\n  function lockAddress(address toLock) public onlyOwner {\r\n    lockAddresses[toLock] = true;\r\n  }\r\n\r\n  function unlockAddress(address toLock) public onlyOwner {\r\n    lockAddresses[toLock] = false;\r\n  }\r\n\r\n  // should use when payDividends is under re-entrance freeze\r\n  function payDividendsManually() public {\r\n    require(dividends[msg.sender] > 0);\r\n    uint dividendsValue = dividends[msg.sender];\r\n    dividends[msg.sender] = 0;\r\n    ethToDividendsNeeds = ethToDividendsNeeds.sub(dividendsValue);\r\n    msg.sender.transfer(dividendsValue);\r\n  }\r\n\r\n  // should use when payDividends is under re-entrance freeze\r\n  function resetDividendsCalculation() public onlyOwner {\r\n    dividendsCalculated = false;\r\n    dividendsPayed = false;\r\n  }\r\n\r\n  // re-entrance attack can freeze all dividends calculation\r\n  function payDividends(uint count) public onlyOwner {\r\n    require(!dividendsPayed && dividendsCalculated);\r\n    for(uint i = 0; dividendsPayedIndex < addresses.length && i < count; i++) {\r\n      address tokenHolder = addresses[dividendsPayedIndex];\r\n      if(!lockAddresses[tokenHolder] && dividends[tokenHolder] != 0) {\r\n        uint value = dividends[tokenHolder];\r\n        dividends[tokenHolder] = 0;\r\n        ethToDividendsNeeds = ethToDividendsNeeds.sub(value);\r\n        tokenHolder.transfer(value);\r\n      }\r\n      dividendsPayedIndex++;\r\n    }\r\n    if(dividendsPayedIndex == addresses.length) {  \r\n      dividendsPayedIndex = 0;\r\n      dividendsPayed = true;\r\n      dividendsCalculated = false;\r\n    }\r\n  }\r\n  \r\n\r\n  // re-entrance attack can freeze all dividends calculation\r\n  function calculateDividends(uint percent, uint count) public onlyOwner {\r\n    require(!dividendsCalculated);\r\n    for(uint i = 0; dividendsIndex < addresses.length && i < count; i++) {\r\n      address tokenHolder = addresses[dividendsIndex];\r\n      if(balances[tokenHolder] != 0) {\r\n        uint valueInWei = balances[tokenHolder].mul(invested).mul(percent).div(PERCENT_RATE).div(totalSupply);\r\n        ethToDividendsNeeds = ethToDividendsNeeds.add(valueInWei);\r\n        dividends[tokenHolder] = dividends[tokenHolder].add(valueInWei);\r\n      }\r\n      dividendsIndex++;\r\n    }\r\n    if(dividendsIndex == addresses.length) {  \r\n      dividendsIndex = 0;\r\n      dividendsCalculated = true;\r\n      dividendsPayed = false;\r\n    }\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  function deposit() public payable {\r\n  }\r\n\r\n  function () public payable {\r\n    deposit();\r\n  }\r\n\r\n}\r\n\r\ncontract CommonCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n \r\n  uint public constant DIVIDER = 10000000000000000;\r\n\r\n  uint public constant PERCENT_RATE = 100;\r\n\r\n  uint public price = 1500;\r\n\r\n  uint public minInvestedLimit = 100000000000000000;\r\n\r\n  uint public hardcap = 250000000000000000000000;\r\n\r\n  uint public start = 1510758000;\r\n\r\n  uint public invested;\r\n\r\n  address public wallet;\r\n\r\n  struct Milestone {\r\n    uint periodInDays;\r\n    uint bonus;\r\n  }\r\n\r\n  Milestone[] public milestones;\r\n\r\n  MilkCoinToken public token = new MilkCoinToken();\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner { \r\n    hardcap = newHardcap;\r\n  }\r\n \r\n  function setStart(uint newStart) public onlyOwner { \r\n    start = newStart;\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner { \r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n \r\n  function milestonesCount() public constant returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function addMilestone(uint limit, uint bonus) public onlyOwner {\r\n    milestones.push(Milestone(limit, bonus));\r\n  }\r\n\r\n  function end() public constant returns(uint) {\r\n    uint last = start;\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      Milestone storage milestone = milestones[i];\r\n      last += milestone.periodInDays * 1 days;\r\n    }\r\n    return last;\r\n  }\r\n\r\n  function getMilestoneBonus() public constant returns(uint) {\r\n    uint prevTimeLimit = start;\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      Milestone storage milestone = milestones[i];\r\n      prevTimeLimit += milestone.periodInDays * 1 days;\r\n      if (now < prevTimeLimit)\r\n        return milestone.bonus;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function createTokensManually(address to, uint amount) public onlyOwner {\r\n    require(now >= start && now < end());\r\n    token.mint(to, amount);\r\n  }\r\n\r\n  function createTokens() public payable {\r\n    require(now >= start && now < end() && invested < hardcap);\r\n    wallet.transfer(msg.value);\r\n    invested = invested.add(msg.value);\r\n    uint tokens = price.mul(msg.value).div(DIVIDER);\r\n    uint bonusPercent = getMilestoneBonus();    \r\n    if(bonusPercent > 0) {\r\n      tokens = tokens.add(tokens.mul(bonusPercent).div(PERCENT_RATE));\r\n    }\r\n    token.mint(msg.sender, tokens);\r\n  }\r\n\r\n  function finishMinting() public onlyOwner {\r\n    token.finishMinting(invested);\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(wallet, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\ncontract MilkCoinTokenCrowdsale is CommonCrowdsale {\r\n\r\n  function MilkCoinTokenCrowdsale() public {\r\n    setHardcap(250000000000000000000000);\r\n    setStart(1510758000);\r\n    setPrice(1500);\r\n    setWallet(0x87127Cb2a73eA9ba842b208455fa076cab03E844);\r\n    addMilestone(3, 100);\r\n    addMilestone(5, 67);\r\n    addMilestone(5, 43);\r\n    addMilestone(5, 25);\r\n    addMilestone(12, 0);\r\n    transferOwnership(0xb794B6c611bFC09ABD206184417082d3CA570FB7);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAfterCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvested\",\"type\":\"uint256\"}],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUY_BACK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackInvestedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"payDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToDividendsNeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividendsManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPayedIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsCalculated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBuyBackDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toBuyBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetDividendsCalculation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"calculateDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBuyBackDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"savedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MilkCoinToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://37d9750961bd7aa035565a1cd220720436c859681339911e60cfc26d7211c427"}]}