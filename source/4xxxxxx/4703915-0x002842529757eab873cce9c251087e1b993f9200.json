{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract StupidToken {\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\ncontract StupidCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    StupidToken public token;\r\n\r\n    //Tokens per 1 eth\r\n    uint256 constant public rate = 10000;\r\n    \r\n    uint256 constant public goal = 20000000 * (10 ** 18);\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public weiRaised;\r\n    uint256 public tokensSold;\r\n\r\n    bool public crowdsaleActive = true;\r\n\r\n    address public wallet;\r\n    address public tokenOwner;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * @param _startTime Unix timestamp\r\n    * @param _endTime Unix timestamp\r\n    * @param _wallet Ethereum address to which the invested funds are forwarded\r\n    * @param _token Address of the token that will be rewarded for the investors\r\n    * @param _tokenOwner Address of the token owner who can execute restricted functions\r\n    */\r\n    function StupidCrowdsale(uint256 _startTime, uint256 _endTime, address _wallet, address _token, address _tokenOwner) public {\r\n        require(_startTime < _endTime);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n        require(_tokenOwner != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        wallet = _wallet;\r\n        tokenOwner = _tokenOwner;\r\n        token = StupidToken(_token);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address investor) public payable {\r\n        require(investor != address(0));\r\n        require(now >= startTime && now <= endTime);\r\n        require(crowdsaleActive);\r\n        require(msg.value != 0);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        require(tokensSold.add(tokens) <= goal);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokensSold = tokensSold.add(tokens);\r\n        balances[investor] = balances[investor].add(weiAmount);\r\n\r\n        assert(token.transferFrom(tokenOwner, investor, tokens));\r\n        TokenPurchase(msg.sender, investor, weiAmount, tokens);\r\n\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function setCrowdsaleActive(bool _crowdsaleActive) public {\r\n        require(msg.sender == tokenOwner);\r\n        crowdsaleActive = _crowdsaleActive;\r\n    }\r\n\r\n    /**\r\n        * @dev Gets the balance of the specified address.\r\n        * @param _owner The address to query the the balance of.\r\n        * @return An uint256 representing the amount owned by the passed address.\r\n        */\r\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleActive\",\"type\":\"bool\"}],\"name\":\"setCrowdsaleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"StupidCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a2c2ba8000000000000000000000000000000000000000000000000000000005a2d7d280000000000000000000000003701bbdc86bb0d0d13304477fe4f797e5e6227e500000000000000000000000041775c5783d6d04d4ad31cabdb1596d6625a12d2000000000000000000000000849d9ee8bcf5c59818179c6457a7a2354829f868","Library":"","SwarmSource":"bzzr://780a2ba6ae9d7656cd79dc29116fcd87c3139e0aa23d1e530a91062481b4c18c"}]}