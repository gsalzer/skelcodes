{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2018 TosChain Foundation.\r\n */\r\n\r\npragma solidity ^0.4.16;\r\n\r\n/** Owner permissions */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n/// ERC20 standardï¼ŒDefine the minimum unit of money to 18 decimal places,\r\n/// transfer out, destroy coins, others use your account spending pocket money.\r\ncontract TokenERC20 {\r\n    uint256 public totalSupply;\r\n    // This creates an array with all balances.\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt.\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract.\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead.\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough.\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future.\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender.\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient.\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail.\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account.\r\n     *\r\n     * @param _to The address of the recipient.\r\n     * @param _value the amount to send.\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address.\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`.\r\n     *\r\n     * @param _from The address of the sender.\r\n     * @param _to The address of the recipient.\r\n     * @param _value the amount to send.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address.\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf.\r\n     *\r\n     * @param _spender The address authorized to spend.\r\n     * @param _value the max amount they can spend.\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify.\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it.\r\n     *\r\n     * @param _spender The address authorized to spend.\r\n     * @param _value the max amount they can spend.\r\n     * @param _extraData some extra information to send to the approved contract.\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly.\r\n     *\r\n     * @param _value the amount of money to burn.\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        // Check if the sender has enough\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // Subtract from the sender\r\n        balanceOf[msg.sender] -= _value;\r\n        // Updates totalSupply\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account.\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender.\r\n     * @param _value the amount of money to burn.\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        // Check if the targeted balance is enough.\r\n        require(balanceOf[_from] >= _value);\r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Subtract from the targeted balance.\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the sender's allowance.\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Update totalSupply\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       TOS TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\n/// @title TOS Protocol Token.\r\ncontract TosToken is owned, TokenERC20 {\r\n\r\n    /// The full name of the TOS token.\r\n    string public constant name = \"ThingsOpreatingSystem\";\r\n    /// Symbol of the TOS token.\r\n    string public constant symbol = \"TOS\";\r\n    /// 18 decimals is the strongly suggested default, avoid changing it.\r\n    uint8 public constant decimals = 18;\r\n\r\n\r\n    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\r\n    /// Amount of TOS token to first issue.\r\n    uint256 public MAX_FUNDING_SUPPLY = totalSupply * 500 / 1000;\r\n\r\n    /**\r\n     *  Locked tokens system\r\n     */\r\n    /// Stores the address of the locked tokens.\r\n    address public lockJackpots;\r\n    /// Reward for depositing the TOS token into a locked tokens.\r\n    /// uint256 public totalLockReward = totalSupply * 50 / 1000;\r\n    /// Remaining rewards in the locked tokens.\r\n    uint256 public remainingReward;\r\n\r\n    /// The start time to lock tokens. 2018/03/15 0:0:0\r\n    uint256 public lockStartTime = 1521043200;\r\n    /// The last time to lock tokens. 2018/04/29 0:0:0\r\n    uint256 public lockDeadline = 1524931200;\r\n    /// Release tokens lock time,Timestamp format 1544803200 ==  2018/12/15 0:0:0\r\n    uint256 public unLockTime = 1544803200;\r\n\r\n    /// Reward factor for locked tokens \r\n    uint public constant NUM_OF_PHASE = 3;\r\n    uint[3] public lockRewardsPercentages = [\r\n        1000,   //100%\r\n        500,    //50%\r\n        300    //30%\r\n    ];\r\n\r\n    /// Locked account details\r\n    mapping (address => uint256) public lockBalanceOf;\r\n\r\n    /**\r\n     *  Freeze the account system\r\n     */\r\n    /* This generates a public event on the blockchain that will notify clients. */\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract. */\r\n    function TosToken() public {\r\n        /// Give the creator all initial tokens.\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    /**\r\n     * transfer token for a specified address.\r\n     *\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        /// Locked account can not complete the transfer.\r\n        require(!(lockJackpots != 0x0 && msg.sender == lockJackpots));\r\n\r\n        /// Transponding the TOS token to a locked tokens account will be deemed a lock-up activity.\r\n        if (lockJackpots != 0x0 && _to == lockJackpots) {\r\n            _lockToken(_value);\r\n        }\r\n        else {\r\n            /// To unlock the time, automatically unlock tokens.\r\n            if (unLockTime <= now && lockBalanceOf[msg.sender] > 0) {\r\n                lockBalanceOf[msg.sender] = 0;\r\n            }\r\n\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * transfer token for a specified address.Internal transfer, only can be called by this contract.\r\n     *\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead.\r\n        require(_to != 0x0);\r\n        //Check for overflows.\r\n        require(lockBalanceOf[_from] + _value > lockBalanceOf[_from]);\r\n        // Check if the sender has enough.\r\n        require(balanceOf[_from] >= lockBalanceOf[_from] + _value);\r\n        // Check for overflows.\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Check if sender is frozen.\r\n        require(!frozenAccount[_from]);\r\n        // Check if recipient is frozen.\r\n        require(!frozenAccount[_to]);\r\n        // Subtract from the sender.\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient.\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * `freeze? Prevent | Allow` `target` from sending & receiving tokens.\r\n     *\r\n     * @param target Address to be frozen.\r\n     * @param freeze either to freeze it or not.\r\n     */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * Increase the token reward.\r\n     *\r\n     * @param _value Increase the amount of tokens awarded.\r\n     */\r\n    function increaseLockReward(uint256 _value) public{\r\n        require(_value > 0);\r\n        _transfer(msg.sender, lockJackpots, _value * 10 ** uint256(decimals));\r\n        _calcRemainReward();\r\n    }\r\n\r\n    /**\r\n     * Locked tokens, in the locked token reward calculation and distribution.\r\n     *\r\n     * @param _lockValue Lock token reward.\r\n     */\r\n    function _lockToken(uint256 _lockValue) internal {\r\n        /// Lock the tokens necessary safety checks.\r\n        require(lockJackpots != 0x0);\r\n        require(now >= lockStartTime);\r\n        require(now <= lockDeadline);\r\n        require(lockBalanceOf[msg.sender] + _lockValue > lockBalanceOf[msg.sender]);\r\n        /// Check account tokens must be sufficient.\r\n        require(balanceOf[msg.sender] >= lockBalanceOf[msg.sender] + _lockValue);\r\n\r\n        uint256 _reward =  _lockValue * _calcLockRewardPercentage() / 1000;\r\n        /// Distribute bonus tokens.\r\n        _transfer(lockJackpots, msg.sender, _reward);\r\n\r\n        /// Save locked accounts and rewards.\r\n        lockBalanceOf[msg.sender] += _lockValue + _reward;\r\n        _calcRemainReward();\r\n    }\r\n\r\n    uint256 lockRewardFactor;\r\n    /* Calculate locked token reward percentageï¼ŒActual value: rewardFactor/1000 */\r\n    function _calcLockRewardPercentage() internal returns (uint factor){\r\n\r\n        uint phase = NUM_OF_PHASE * (now - lockStartTime)/( lockDeadline - lockStartTime);\r\n        if (phase  >= NUM_OF_PHASE) {\r\n            phase = NUM_OF_PHASE - 1;\r\n        }\r\n    \r\n        lockRewardFactor = lockRewardsPercentages[phase];\r\n        return lockRewardFactor;\r\n    }\r\n\r\n    /** The activity is over and the token in the prize pool is sent to the manager for fund development. */\r\n    function rewardActivityEnd() onlyOwner public {\r\n        /// The activity is over.\r\n        require(unLockTime < now);\r\n        /// Send the token from the prize pool to the manager.\r\n        _transfer(lockJackpots, owner, balanceOf[lockJackpots]);\r\n        _calcRemainReward();\r\n    }\r\n\r\n    function() payable public {}\r\n\r\n    /**\r\n     * Set lock token address,only once.\r\n     *\r\n     * @param newLockJackpots The lock token address.\r\n     */\r\n    function setLockJackpots(address newLockJackpots) onlyOwner public {\r\n        require(lockJackpots == 0x0 && newLockJackpots != 0x0 && newLockJackpots != owner);\r\n        lockJackpots = newLockJackpots;\r\n        _calcRemainReward();\r\n    }\r\n\r\n    /** Remaining rewards in the locked tokens. */\r\n    function _calcRemainReward() internal {\r\n        remainingReward = balanceOf[lockJackpots];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        require(_from != lockJackpots);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        require(msg.sender != lockJackpots);\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        require(msg.sender != lockJackpots);\r\n        return super.approveAndCall(_spender, _value, _extraData);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(msg.sender != lockJackpots);\r\n        return super.burn(_value);\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(_from != lockJackpots);\r\n        return super.burnFrom(_from, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLockJackpots\",\"type\":\"address\"}],\"name\":\"setLockJackpots\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockRewardsPercentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockJackpots\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_OF_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rewardActivityEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TosToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45401a9affd6a5e5f67dd0a9a65ad59f93e78d6b824637741fae1b41fafb4c1b"}]}