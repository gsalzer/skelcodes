{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/*\r\nETHB Crowdsale Contract\r\n\r\nContract developer: Fares A. Akel C.\r\nf.antonio.akel@gmail.com\r\nMIT PGP KEY ID: 078E41CB\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n  }\r\n}\r\n\r\ncontract ERC20Token {\r\n\r\n\tfunction balanceOf(address who) public constant returns (uint);\r\n\tfunction transfer(address to, uint value) public;\t\r\n}\r\n\r\n/**\r\n * This contract is administered\r\n */\r\n\r\ncontract admined {\r\n    address public admin; //Admin address is public\r\n    /**\r\n    * @dev This constructor set the initial admin of the contract\r\n    */\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-allowed functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    /**\r\n    * @dev Transfer the adminship of the contract\r\n    * @param _newAdmin The address of the new admin.\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        require(_newAdmin != address(0));\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }\r\n    //All admin actions have a log for public review\r\n    event TransferAdminship(address newAdmin);\r\n    event Admined(address administrador);\r\n}\r\n\r\n\r\ncontract ETHBCrowdsale is admined{\r\n\t/**\r\n    * Variables definition - Public\r\n    */\r\n    uint256 public startTime = now; //block-time when it was deployed\r\n    uint256 public totalDistributed = 0;\r\n    uint256 public currentBalance = 0;\r\n    ERC20Token public tokenReward;\r\n    address public creator;\r\n    address public ethWallet;\r\n    string public campaignUrl;\r\n    uint256 public constant version = 1;\r\n    uint256 public exchangeRate = 10**7; //1 ETH (18decimals) = 1000 ETHB (8decimals)\r\n    \t\t\t\t\t\t\t\t\t //(1*10^18)/(1000*10^8) = 1*10^7 ETH/ETHB\r\n\r\n    event TokenWithdrawal(address _to,uint256 _withdraw);\r\n\tevent PayOut(address _to,uint256 _withdraw);\r\n\tevent TokenBought(address _buyer, uint256 _amount);\r\n\r\n    /**\r\n    * @dev Transfer the adminship of the contract\r\n    * @param _ethWallet The address of the wallet used to payout ether.\r\n    * @param _campaignUrl URL of this crowdsale.\r\n    */\r\n    function ETHBCrowdsale(\r\n    \taddress _ethWallet,\r\n    \tstring _campaignUrl) public {\r\n\r\n    \ttokenReward = ERC20Token(0x3a26746Ddb79B1B8e4450e3F4FFE3285A307387E);\r\n    \tcreator = msg.sender;\r\n    \tethWallet = _ethWallet;\r\n    \tcampaignUrl = _campaignUrl;\r\n    }\r\n    /**\r\n    * @dev Exchange function\r\n    */\r\n    function exchange() public payable {\r\n    \trequire (tokenReward.balanceOf(this) > 0);\r\n    \trequire (msg.value > 1 finney);\r\n\r\n    \tuint256 tokenBought = SafeMath.div(msg.value,exchangeRate);\r\n\r\n    \trequire(tokenReward.balanceOf(this) >= tokenBought );\r\n    \tcurrentBalance = SafeMath.add(currentBalance,msg.value);\r\n    \ttotalDistributed = SafeMath.add(totalDistributed,tokenBought);\r\n    \ttokenReward.transfer(msg.sender,tokenBought);\r\n\t\tTokenBought(msg.sender, tokenBought);\r\n\r\n    }\r\n    /**\r\n    * @dev Withdraw remaining tokens to an specified address\r\n    * @param _to address to transfer tokens.\r\n    */\r\n    function tokenWithdraw (address _to) onlyAdmin public {\r\n    \trequire( _to != 0x0 );\r\n    \trequire(tokenReward.balanceOf(this)>0);\r\n    \tuint256 withdraw = tokenReward.balanceOf(this);\r\n    \ttokenReward.transfer(_to,withdraw);\r\n    \tTokenWithdrawal(_to,withdraw);\r\n    }\r\n    /**\r\n    * @dev Withdraw collected ether to ethWallet\r\n    */\r\n    function ethWithdraw () onlyAdmin public {\r\n    \trequire(this.balance > 0);\r\n    \tuint256 withdraw = this.balance;\r\n    \tcurrentBalance = 0;\r\n    \trequire(ethWallet.send(withdraw));\r\n    \tPayOut(ethWallet,withdraw);\r\n    }\r\n    /**\r\n    * @dev callback function to deal with direct transfers\r\n    */\r\n    function () public payable{\r\n        exchange();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethWallet\",\"type\":\"address\"},{\"name\":\"_campaignUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"name\":\"PayOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administrador\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"ETHBCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f05c1e92ac00a96cc8fbaf6ad3ae226989777bf70000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b65746865726274632e696f000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://59e644cf4dbc13368e60cce89275da36b9c929112f41084612cc60618fd1d5f8"}]}