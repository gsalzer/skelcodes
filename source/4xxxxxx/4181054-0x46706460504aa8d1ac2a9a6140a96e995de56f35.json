{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract safeMath {\r\n    function add(uint a, uint b) returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a || c >= b);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint a, uint b) returns (uint) {\r\n        assert( b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { \r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n} \r\n\r\ncontract ERC20Token {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract MCTContractToken is ERC20Token, Owned{\r\n\r\n    /* Public variables of the token */\r\n    string  public standard = \"Mammoth Casino Contract Token\";\r\n    string  public name = \"Mammoth Casino Token\";\r\n    string  public symbol = \"MCT\";\r\n    uint8   public decimals = 0;\r\n    address public icoContractAddress;\r\n    uint256 public tokenFrozenUntilTime;\r\n    uint256 public blackListFreezeTime;\r\n    struct frozen {\r\n        bool accountFreeze;\r\n        uint256 freezeUntilTime;\r\n    }\r\n    \r\n    /* Variables of the token */\r\n    uint256 public totalSupply;\r\n    uint256 public totalRemainSupply;\r\n    uint256 public foundingTeamSupply;\r\n    uint256 public gameDeveloperSupply;\r\n    uint256 public communitySupply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n    mapping (address => frozen) blackListFreezeTokenAccounts;\r\n    /* Events */\r\n    event mintToken(address indexed _to, uint256 _value);\r\n    event burnToken(address indexed _from, uint256 _value);\r\n    event frozenToken(uint256 _frozenUntilBlock, string _reason);\r\n    \r\n    /* Initializes contract and  sets restricted addresses */\r\n    function MCTContractToken(uint256 _totalSupply, address _icoAddress) {\r\n        owner = msg.sender;\r\n        totalSupply = _totalSupply;\r\n        totalRemainSupply = totalSupply;\r\n        foundingTeamSupply = totalSupply * 2 / 10;\r\n        gameDeveloperSupply = totalSupply * 1 / 10;\r\n        communitySupply = totalSupply * 1 / 10;\r\n        icoContractAddress = _icoAddress;\r\n        blackListFreezeTime = 12 hours;\r\n    }\r\n\r\n    /* Returns total supply of issued tokens */\r\n    function mctTotalSupply() returns (uint256) {   \r\n        return totalSupply - totalRemainSupply;\r\n    }\r\n\r\n    /* Returns balance of address */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfers tokens from your address to other */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\r\n        require (now > blackListFreezeTokenAccounts[msg.sender].freezeUntilTime);             // Throw if recipient is frozen address\r\n        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is frozen address\r\n        require (balances[msg.sender] > _value);           // Throw if sender has insufficient balance\r\n        require (balances[_to] + _value > balances[_to]);  // Throw if owerflow detected\r\n        balances[msg.sender] -= _value;                     // Deduct senders balance\r\n        balances[_to] += _value;                            // Add recivers blaance \r\n        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n    /* Approve other address to spend tokens on your account */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        require (now > tokenFrozenUntilTime);               // Throw if token is frozen        \r\n        allowances[msg.sender][_spender] = _value;          // Set allowance         \r\n        Approval(msg.sender, _spender, _value);             // Raise Approval event         \r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */ \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \r\n        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \r\n        approve(_spender, _value);                                      // Set approval to contract for _value         \r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \r\n        return true;     \r\n    }     \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      \r\n        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\r\n        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is restricted address  \r\n        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \r\n        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \r\n        require (_value > allowances[_from][msg.sender]);  // Throw if you do not have allowance       \r\n        balances[_from] -= _value;                          // Deduct senders balance    \r\n        balances[_to] += _value;                            // Add recipient blaance         \r\n        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \r\n        Transfer(_from, _to, _value);                       // Raise Transfer event\r\n        return true;     \r\n    }         \r\n\r\n    /* Get the amount of allowed tokens to spend */     \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \r\n        return allowances[_owner][_spender];\r\n    }         \r\n\r\n    /* Issue new tokens */     \r\n    function mintTokens(address _to, uint256 _amount) {         \r\n        require (msg.sender == icoContractAddress);             // Only ICO address can mint tokens        \r\n        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                        // Throw if user wants to send to restricted address       \r\n        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\r\n        require (totalRemainSupply > _amount);\r\n        totalRemainSupply -= _amount;                           // Update total supply\r\n        balances[_to] += _amount;                               // Set minted coins to target\r\n        mintToken(_to, _amount);                                // Create Mint event       \r\n        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\r\n    }     \r\n  \r\n    /* Destroy tokens from owners account */\r\n    function burnTokens(address _addr, uint256 _amount) onlyOwner {\r\n        require (balances[msg.sender] < _amount);               // Throw if you do not have enough balance\r\n        totalRemainSupply += _amount;                           // Deduct totalSupply\r\n        balances[_addr] -= _amount;                             // Destroy coins on senders wallet\r\n        burnToken(_addr, _amount);                              // Raise Burn event\r\n        Transfer(_addr, 0x0, _amount);                          // Raise transfer to 0x0\r\n    }\r\n    \r\n    /* Destroy tokens if MCT not sold out */\r\n    function burnLeftTokens() onlyOwner {\r\n        require (totalRemainSupply > 0);\r\n        totalRemainSupply = 0;\r\n    }\r\n    \r\n    /* Stops all token transfers in case of emergency */\r\n    function freezeTransfersUntil(uint256 _frozenUntilTime, string _freezeReason) onlyOwner {      \r\n        tokenFrozenUntilTime = _frozenUntilTime;\r\n        frozenToken(_frozenUntilTime, _freezeReason);\r\n    }\r\n    \r\n    /*Freeze player accounts for \"blackListFreezeTime\" */\r\n    function freezeAccounts(address _freezeAddress, bool _freeze) onlyOwner {\r\n        blackListFreezeTokenAccounts[_freezeAddress].accountFreeze = _freeze;\r\n        blackListFreezeTokenAccounts[_freezeAddress].freezeUntilTime = now + blackListFreezeTime;\r\n    }\r\n    \r\n    /*mint ICO Left Token*/\r\n    function mintUnICOLeftToken(address _foundingTeamAddr, address _gameDeveloperAddr, address _communityAddr) onlyOwner {\r\n        balances[_foundingTeamAddr] += foundingTeamSupply;           // Give balance to _foundingTeamAddr;\r\n        balances[_gameDeveloperAddr] += gameDeveloperSupply;         // Give balance to _gameDeveloperAddr;\r\n        balances[_communityAddr] += communitySupply;                 // Give balance to _communityAddr;\r\n        totalRemainSupply -= (foundingTeamSupply + gameDeveloperSupply + communitySupply);\r\n        mintToken(_foundingTeamAddr, foundingTeamSupply);            // Create Mint event       \r\n        mintToken(_gameDeveloperAddr, gameDeveloperSupply);          // Create Mint event \r\n        mintToken(_communityAddr, communitySupply);                  // Create Mint event \r\n    }\r\n    \r\n}\r\n\r\ncontract MCTContract {\r\n  function mintTokens(address _to, uint256 _amount);\r\n}\r\n\r\ncontract MCTCrowdsale is Owned, safeMath {\r\n    uint256 public tokenSupportLimit = 30000 ether;              \r\n    uint256 public tokenSupportSoftLimit = 20000 ether;          \r\n    uint256 constant etherChange = 10**18;                       \r\n    uint256 public crowdsaleTokenSupply;                         \r\n    uint256 public crowdsaleTokenMint;                                      \r\n    uint256 public crowdsaleStartDate;\r\n    uint256 public crowdsaleStopDate;\r\n    address public MCTTokenAddress;\r\n    address public multisigAddress;\r\n    uint256 private totalCrowdsaleEther;\r\n    uint256 public nextParticipantIndex;\r\n    bool    public crowdsaleContinue;\r\n    bool    public crowdsaleSuccess;\r\n    struct infoUsersBuy{\r\n        uint256 value;\r\n        uint256 token;\r\n    }\r\n    mapping (address => infoUsersBuy) public tokenUsersSave;\r\n    mapping (uint256 => address) public participantIndex;\r\n    MCTContract mctTokenContract;\r\n    \r\n    /*Get Ether while anyone send Ether to ico contract address*/\r\n    function () payable crowdsaleOpen {\r\n        // Throw if the value = 0 \r\n        require (msg.value != 0);\r\n        // Check if the sender is a new user \r\n        if (tokenUsersSave[msg.sender].token == 0){          \r\n            // Add a new user to the participant index   \r\n            participantIndex[nextParticipantIndex] = msg.sender;             \r\n            nextParticipantIndex += 1;\r\n        }\r\n        uint256 priceAtNow = 0;\r\n        uint256 priceAtNowLimit = 0;\r\n        (priceAtNow, priceAtNowLimit) = priceAt(now);\r\n        require(msg.value >= priceAtNowLimit);\r\n        buyMCTTokenProxy(msg.sender, msg.value, priceAtNow);\r\n\r\n    }\r\n    \r\n    /*Require crowdsale open*/\r\n    modifier crowdsaleOpen() {\r\n        require(crowdsaleContinue == true);\r\n        require(now >= crowdsaleStartDate);\r\n        require(now <= crowdsaleStopDate);\r\n        _;\r\n    }\r\n    \r\n    /*Initial MCT Crowdsale*/\r\n    function MCTCrowdsale(uint256 _crowdsaleStartDate,\r\n        uint256 _crowdsaleStopDate,\r\n        uint256 _totalTokenSupply\r\n        ) {\r\n            owner = msg.sender;\r\n            crowdsaleStartDate = _crowdsaleStartDate;\r\n            crowdsaleStopDate = _crowdsaleStopDate;\r\n            require(_totalTokenSupply != 0);\r\n            crowdsaleTokenSupply = _totalTokenSupply;\r\n            crowdsaleContinue=true;\r\n    }\r\n    \r\n    /*Get the  price according to the present time*/\r\n    function priceAt(uint256 _atTime) internal returns(uint256, uint256) {\r\n        if(_atTime < crowdsaleStartDate) {\r\n            return (0, 0);\r\n        }\r\n        else if(_atTime < (crowdsaleStartDate + 7 days)) {\r\n            return (30000, 20*10**18);\r\n        }\r\n        else if(_atTime < (crowdsaleStartDate + 16 days)) {\r\n            return (24000, 1*10**17);\r\n        }\r\n        else if(_atTime < (crowdsaleStartDate + 31 days)) {\r\n            return (20000, 1*10**17);\r\n        }\r\n        else {\r\n            return (0, 0);\r\n        }\r\n   }\r\n   \r\n    /*Buy MCT Token*/        \r\n    function buyMCTTokenProxy(address _msgSender, uint256 _msgValue, \r\n        uint256 _priceAtNow)  internal crowdsaleOpen returns (bool) {\r\n        require(_msgSender != 0x0);\r\n        require(crowdsaleTokenMint <= crowdsaleTokenSupply);                    // Require token not sold out\r\n        uint256 tokenBuy = _msgValue * _priceAtNow / etherChange;               // Calculate the token  \r\n        if(tokenBuy > (crowdsaleTokenSupply - crowdsaleTokenMint)){             // Require tokenBuy less than crowdsale token left \r\n            uint256 needRetreat = (tokenBuy - crowdsaleTokenSupply + crowdsaleTokenMint) * etherChange / _priceAtNow;\r\n            _msgSender.transfer(needRetreat);\r\n            _msgValue -= needRetreat;\r\n            tokenBuy = _msgValue * _priceAtNow / etherChange;\r\n        }\r\n        if(buyMCT(_msgSender, tokenBuy)) {                                      // Buy MCT Token\r\n            totalCrowdsaleEther += _msgValue;\r\n            tokenUsersSave[_msgSender].value += _msgValue;                      // Store each person's Ether\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /*Buy MCT Token*/\r\n    function buyMCT(address _sender, uint256 _tokenBuy) internal returns (bool) {\r\n        tokenUsersSave[_sender].token += _tokenBuy;\r\n        mctTokenContract.mintTokens(_sender, _tokenBuy);\r\n        crowdsaleTokenMint += _tokenBuy;\r\n        return true;\r\n    }\r\n    \r\n    /*Set final period of MCT crowdsale*/\r\n    function setFinalICOPeriod() onlyOwner {\r\n        require(now > crowdsaleStopDate);\r\n        crowdsaleContinue = false;\r\n        if(this.balance >= tokenSupportSoftLimit * 4 / 10){                     // if crowdsale ether more than 8000Ether, MCT crowdsale will be Success\r\n            crowdsaleSuccess = true;\r\n        }\r\n    }\r\n    \r\n    /* Set token contract where mints will be done (tokens will be issued)*/  \r\n    function setTokenContract(address _MCTContractAddress) onlyOwner {     \r\n        mctTokenContract = MCTContract(_MCTContractAddress);\r\n        MCTTokenAddress  = _MCTContractAddress;\r\n    }\r\n    \r\n    /*withdraw Ether to a multisig address*/\r\n    function withdraw(address _multisigAddress, uint256 _balance) onlyOwner {    \r\n        require(_multisigAddress != 0x0);\r\n        multisigAddress = _multisigAddress;\r\n        multisigAddress.transfer(_balance);\r\n    }  \r\n    \r\n    function crowdsaleEther() returns(uint256) {\r\n        return totalCrowdsaleEther;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"mctTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blackListFreezeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezeAddress\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnLeftTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemainSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDeveloperSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundingTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilTime\",\"type\":\"uint256\"},{\"name\":\"_freezeReason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundingTeamAddr\",\"type\":\"address\"},{\"name\":\"_gameDeveloperAddr\",\"type\":\"address\"},{\"name\":\"_communityAddr\",\"type\":\"address\"}],\"name\":\"mintUnICOLeftToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"frozenToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MCTContractToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000be66ccd76e2007a2af8ae7134ad5ab4b08cc0102","Library":"","SwarmSource":"bzzr://9153cc440f3583eee3ddee4b40ec39c27964efb1a58354c4f60cd708ae11a65b"}]}