{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*\r\nPostManager\r\n*/\r\ncontract PostManager {\r\n    \r\n    // MARK:- Enums\r\n\t\r\n\tenum State { Inactive, Created, Completed }\r\n    \r\n    // MARK:- Structs\r\n    \r\n    struct Post {\r\n \t    bytes32 jsonHash;   // JSON Hash\r\n \t    uint value;         // Value\r\n    }\r\n\r\n\t// MARK:- Modifiers\r\n\r\n    /*\r\n    Is the actor the owner of this contract?\r\n    */\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n     /*\r\n    Is the actor part of the admin group, or are they the owner?\r\n    */\r\n    modifier isAdminGroupOrOwner() {\r\n        require(containsAdmin(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\t// MARK:- Properties\r\n\t\r\n\tuint constant version = 1;                  // Version\r\n\r\n\taddress owner;                              // Creator of the contract\r\n\tmapping(address => Post) posts;             // Posts\r\n\tmapping(address => address) administrators; // Administrators\r\n    \r\n    // MARK:- Events\r\n\tevent AdminAdded(address _adminAddress);\r\n\tevent AdminDeleted(address _adminAddress);\r\n\tevent PostAdded(address _fromAddress);\r\n\tevent PostCompleted(address _fromAddress, address _toAddress);\r\n\r\n    // MARK:- Methods\r\n    \r\n    /*\r\n    Constructor\r\n    */\r\n    function PostManager() public {\r\n       owner = msg.sender;\r\n    } \r\n    \r\n    /*\r\n\tGet contract version\r\n\t*/\r\n\tfunction getVersion() public constant returns (uint) {\r\n\t\treturn version;\r\n\t}\r\n        \r\n    // MARK:- Admin\r\n    \r\n    /*\r\n    Add an administrator\r\n    */\r\n    function addAdmin(address _adminAddress) public isOwner {\r\n        administrators[_adminAddress] = _adminAddress;\r\n        AdminAdded(_adminAddress);\r\n    }\r\n    \r\n    /*\r\n    Delete an administrator\r\n    */\r\n    function deleteAdmin(address _adminAddress) public isOwner {\r\n        delete administrators[_adminAddress];\r\n        AdminDeleted(_adminAddress);\r\n    }\r\n    \r\n    /*\r\n    Check if an address is an administrator\r\n    */\r\n    function containsAdmin(address _adminAddress) public constant returns (bool) {\r\n        return administrators[_adminAddress] != 0;\r\n    }\r\n    \r\n    /*\r\n    Add a post\r\n    */\r\n    function addPost(bytes32 _jsonHash) public payable {\r\n        \r\n        // Ensure post not already created\r\n        require(posts[msg.sender].value != 0);\r\n        \r\n        // Create post\r\n        var post = Post(_jsonHash, msg.value);\r\n        posts[msg.sender] = post;\r\n\r\n        PostAdded(msg.sender);\r\n    }\r\n    \r\n    /*\r\n\tComplete post\r\n\t*/\r\n\tfunction completePost(address _fromAddress, address _toAddress) public isAdminGroupOrOwner() {\r\n\t\r\n\t\t// If owner wants funds, ignore\r\n\t\trequire(_toAddress != _fromAddress);\r\n\r\n        var post = posts[_fromAddress];\r\n        \r\n        // Make sure post exists\r\n        require(post.value != 0);\r\n\r\n        // Transfer funds\r\n        _toAddress.transfer(post.value);\r\n        \r\n        // Mark complete\r\n        delete posts[_fromAddress];\r\n        \r\n        // Send event\r\n        PostCompleted(_fromAddress, _toAddress);\r\n    }\r\n    \r\n    function() public payable {\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromAddress\",\"type\":\"address\"},{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"completePost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"containsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jsonHash\",\"type\":\"bytes32\"}],\"name\":\"addPost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"AdminDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fromAddress\",\"type\":\"address\"}],\"name\":\"PostAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"PostCompleted\",\"type\":\"event\"}]","ContractName":"PostManager","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5fbdba3b1bee3997695b65386025dacc43d1439189426bc8ec50a94fa4a52aef"}]}