{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = true;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n/**\r\n * contract CryptoTradeCoin\r\n **/\r\ncontract CryptoTradeCoin is PausableToken, MintableToken {\r\n\r\n  string public constant name = \"CryptoTradeCoin\";\r\n  string public constant symbol = \"CTC\";\r\n  uint8 public constant decimals = 18;\r\n}\r\n/**\r\n * contract CryptoTradeCrowdsale\r\n **/\r\ncontract CryptoTradeCrowdsale is Ownable {\r\n\r\nusing SafeMath for uint;\r\n\r\naddress public multisigWallet;\r\naddress public founderTokenWallet;\r\naddress public bountyTokenWallet;\r\nuint public founderPercent;\r\nuint public bountyPercent;\r\nuint public startRound;\r\nuint public periodRound;\r\nuint public capitalization;\r\nuint public altCapitalization;\r\nuint public totalCapitalization;\r\nuint public price;\r\nuint public discountTime;\r\nbool public isDiscountValue;\r\nuint public targetDiscountValue1;\r\nuint public targetDiscountValue2;\r\nuint public targetDiscountValue3;\r\nuint public targetDiscountValue4;\r\nuint public targetDiscountValue5;\r\nuint public targetDiscountValue6;\r\nuint public targetDiscountValue7;\r\nuint public targetDiscountValue8;\r\nuint public targetDiscountValue9;\r\nuint public targetDiscountValue10;\r\n\r\nCryptoTradeCoin public token = new CryptoTradeCoin ();\r\n\r\nfunction CryptoTradeCrowdsale () public {\r\n\tmultisigWallet = 0xdee04DfdC6C93D51468ba5cd90457Ac0B88055FD;\r\n\tfounderTokenWallet = 0x874297a0eDaB173CFdDeD1e890842A5564191D36;\r\n\tbountyTokenWallet = 0x77C99A76B3dF279a73396fE9ae0A072B428b63Fe;\r\n\tfounderPercent = 10;\r\n\tbountyPercent = 5;\r\n\tstartRound = 1509584400;\r\n\tperiodRound = 90;\r\n\tcapitalization = 3300 ether;\r\n\taltCapitalization = 0;\r\n\ttotalCapitalization = 200000 ether;\r\n\tprice = 1000000000000000000000000; \r\n\tdiscountTime = 50;\r\n\tisDiscountValue = false;\r\n\ttargetDiscountValue1 = 2    ether;\r\n\ttargetDiscountValue2 = 4    ether;\r\n\ttargetDiscountValue3 = 8    ether;\r\n\ttargetDiscountValue4 = 16   ether;\r\n\ttargetDiscountValue5 = 32   ether;\r\n\ttargetDiscountValue6 = 64   ether;\r\n\ttargetDiscountValue7 = 128  ether;\r\n\ttargetDiscountValue8 = 256  ether;\r\n\ttargetDiscountValue9 = 512  ether;\r\n\ttargetDiscountValue10= 1024 ether;\r\n\t}\r\n\r\nmodifier CrowdsaleIsOn() {\r\n\trequire(now >= startRound && now <= startRound + periodRound * 1 days);\r\n\t_;\r\n\t}\r\nmodifier TotalCapitalization() {\r\n\trequire(multisigWallet.balance + altCapitalization <= totalCapitalization);\r\n\t_;\r\n\t}\r\nmodifier RoundCapitalization() {\r\n\trequire(multisigWallet.balance + altCapitalization <= capitalization);\r\n\t_;\r\n\t}\r\n\r\nfunction setMultisigWallet (address newMultisigWallet) public onlyOwner {\r\n\trequire(newMultisigWallet != 0X0);\r\n\tmultisigWallet = newMultisigWallet;\r\n\t}\r\nfunction setFounderTokenWallet (address newFounderTokenWallet) public onlyOwner {\r\n\trequire(newFounderTokenWallet != 0X0);\r\n\tfounderTokenWallet = newFounderTokenWallet;\r\n\t}\r\nfunction setBountyTokenWallet (address newBountyTokenWallet) public onlyOwner {\r\n\trequire(newBountyTokenWallet != 0X0);\r\n\tbountyTokenWallet = newBountyTokenWallet;\r\n\t}\r\n\t\r\nfunction setFounderPercent (uint newFounderPercent) public onlyOwner {\r\n\tfounderPercent = newFounderPercent;\r\n\t}\r\nfunction setBountyPercent (uint newBountyPercent) public onlyOwner {\r\n\tbountyPercent = newBountyPercent;\r\n\t}\r\n\t\r\nfunction setStartRound (uint newStartRound) public onlyOwner {\r\n\tstartRound = newStartRound;\r\n\t}\r\nfunction setPeriodRound (uint newPeriodRound) public onlyOwner {\r\n\tperiodRound = newPeriodRound;\r\n\t} \r\n\t\r\nfunction setCapitalization (uint newCapitalization) public onlyOwner {\r\n\tcapitalization = newCapitalization;\r\n\t}\r\nfunction setAltCapitalization (uint newAltCapitalization) public onlyOwner {\r\n\taltCapitalization = newAltCapitalization;\r\n\t}\r\nfunction setTotalCapitalization (uint newTotalCapitalization) public onlyOwner {\r\n\ttotalCapitalization = newTotalCapitalization;\r\n\t}\r\n\t\r\nfunction setPrice (uint newPrice) public onlyOwner {\r\n\tprice = newPrice;\r\n\t}\r\nfunction setDiscountTime (uint newDiscountTime) public onlyOwner {\r\n\tdiscountTime = newDiscountTime;\r\n\t}\r\n\t\r\nfunction setDiscountValueOn () public onlyOwner {\r\n\trequire(!isDiscountValue);\r\n\tisDiscountValue = true;\r\n\t}\r\nfunction setDiscountValueOff () public onlyOwner {\r\n\trequire(isDiscountValue);\r\n\tisDiscountValue = false;\r\n\t}\r\n\t\r\nfunction setTargetDiscountValue1  (uint newTargetDiscountValue1)  public onlyOwner {\r\n\trequire(newTargetDiscountValue1 > 0);\r\n\ttargetDiscountValue1 = newTargetDiscountValue1;\r\n\t}\r\nfunction setTargetDiscountValue2  (uint newTargetDiscountValue2)  public onlyOwner {\r\n\trequire(newTargetDiscountValue2 > 0);\r\n\ttargetDiscountValue2 = newTargetDiscountValue2;\r\n\t}\r\nfunction setTargetDiscountValue3  (uint newTargetDiscountValue3)  public onlyOwner {\r\n\trequire(newTargetDiscountValue3 > 0);\r\n\ttargetDiscountValue3 = newTargetDiscountValue3;\r\n\t}\r\nfunction setTargetDiscountValue4  (uint newTargetDiscountValue4)  public onlyOwner {\r\n\trequire(newTargetDiscountValue4 > 0);\r\n\ttargetDiscountValue4 = newTargetDiscountValue4;\r\n\t}\r\nfunction setTargetDiscountValue5  (uint newTargetDiscountValue5)  public onlyOwner {\r\n\trequire(newTargetDiscountValue5 > 0);\r\n\ttargetDiscountValue5 = newTargetDiscountValue5;\r\n\t}\r\nfunction setTargetDiscountValue6  (uint newTargetDiscountValue6)  public onlyOwner {\r\n\trequire(newTargetDiscountValue6 > 0);\r\n\ttargetDiscountValue6 = newTargetDiscountValue6;\r\n\t}\r\nfunction setTargetDiscountValue7  (uint newTargetDiscountValue7)  public onlyOwner {\r\n\trequire(newTargetDiscountValue7 > 0);\r\n\ttargetDiscountValue7 = newTargetDiscountValue7;\r\n\t}\r\nfunction setTargetDiscountValue8  (uint newTargetDiscountValue8)  public onlyOwner {\r\n\trequire(newTargetDiscountValue8 > 0);\r\n\ttargetDiscountValue8 = newTargetDiscountValue8;\r\n\t}\r\nfunction setTargetDiscountValue9  (uint newTargetDiscountValue9)  public onlyOwner {\r\n\trequire(newTargetDiscountValue9 > 0);\r\n\ttargetDiscountValue9 = newTargetDiscountValue9;\r\n\t}\r\nfunction setTargetDiscountValue10 (uint newTargetDiscountValue10) public onlyOwner {\r\n\trequire(newTargetDiscountValue10 > 0);\r\n\ttargetDiscountValue10 = newTargetDiscountValue10;\r\n\t}\r\n\t\r\nfunction () external payable {\r\n\tcreateTokens (msg.sender, msg.value);\r\n\t}\r\n\r\nfunction createTokens (address recipient, uint etherDonat) internal CrowdsaleIsOn RoundCapitalization TotalCapitalization {\r\n\trequire(etherDonat > 0); // etherDonat in wei\r\n\trequire(recipient != 0X0);\r\n\trequire(price > 0);\r\n\tmultisigWallet.transfer(etherDonat);\r\n\tuint discountValue = discountValueSolution (etherDonat);\r\n\tuint bonusDiscountValue = (etherDonat.mul(price).div(1 ether)).mul(discountValue).div(100);\r\n\tuint bonusDiscountTime  = (etherDonat.mul(price).div(1 ether)).mul(discountTime).div(100);\r\n    uint tokens = (etherDonat.mul(price).div(1 ether)).add(bonusDiscountTime).add(bonusDiscountValue);\r\n\ttoken.mint(recipient, tokens);\r\n\t}\r\n\r\nfunction customCreateTokens(address recipient, uint etherDonat) public CrowdsaleIsOn RoundCapitalization TotalCapitalization onlyOwner {\r\n\trequire(etherDonat > 0); // etherDonat in wei\r\n\trequire(recipient != 0X0);\r\n\trequire(price > 0);\r\n\tuint discountValue = discountValueSolution (etherDonat);\r\n\tuint bonusDiscountValue = (etherDonat.mul(price).div(1 ether)).mul(discountValue).div(100);\r\n\tuint bonusDiscountTime  = (etherDonat.mul(price).div(1 ether)).mul(discountTime).div(100);\r\n    uint tokens = (etherDonat.mul(price).div(1 ether)).add(bonusDiscountTime).add(bonusDiscountValue);\r\n\ttoken.mint(recipient, tokens);\r\n\taltCapitalization += etherDonat;\r\n\t}\r\n\r\nfunction retrieveTokens (address addressToken, address wallet) public onlyOwner {\r\n\tERC20 alientToken = ERC20 (addressToken);\r\n\talientToken.transfer(wallet, alientToken.balanceOf(this));\r\n\t}\r\n\r\nfunction finishMinting () public onlyOwner {\r\n\tuint issuedTokenSupply = token.totalSupply(); \r\n\tuint tokensFounders = issuedTokenSupply.mul(founderPercent).div(100);\r\n\tuint tokensBounty = issuedTokenSupply.mul(bountyPercent).div(100);\r\n\ttoken.mint(founderTokenWallet, tokensFounders);\r\n\ttoken.mint(bountyTokenWallet, tokensBounty);\r\n\ttoken.finishMinting();\r\n\t}\r\n\r\nfunction setOwnerToken (address newOwnerToken) public onlyOwner {\r\n\trequire(newOwnerToken != 0X0);\r\n\ttoken.transferOwnership(newOwnerToken); \r\n\t}\r\n\r\nfunction coefficientSolution (uint _donat) internal constant returns (uint) {  \r\n\trequire(isDiscountValue);\r\n \tuint _discountValue;\r\n\tif (_donat < targetDiscountValue1) { \r\n\t\treturn _discountValue = 0;\r\n\t} else if (_donat >= targetDiscountValue1 && _donat < targetDiscountValue2) { \r\n\t\treturn _discountValue = 2;\r\n\t} else if (_donat >= targetDiscountValue2 && _donat < targetDiscountValue3) { \r\n\t\treturn _discountValue = 4;\r\n\t} else if (_donat >= targetDiscountValue3 && _donat < targetDiscountValue4) { \r\n\t\treturn _discountValue = 6;\r\n\t} else if (_donat >= targetDiscountValue4 && _donat < targetDiscountValue5) { \r\n\t\treturn _discountValue = 8;\r\n\t} else if (_donat >= targetDiscountValue5 && _donat < targetDiscountValue6) { \r\n\t\treturn _discountValue = 10;\r\n\t} else if (_donat >= targetDiscountValue6 && _donat < targetDiscountValue7) { \r\n\t\treturn _discountValue = 12;\r\n\t} else if (_donat >= targetDiscountValue7 && _donat < targetDiscountValue8) { \r\n\t\treturn _discountValue = 14;\r\n\t} else if (_donat >= targetDiscountValue8 && _donat < targetDiscountValue9) { \r\n\t\treturn _discountValue = 16;\r\n\t} else if (_donat >= targetDiscountValue9 && _donat < targetDiscountValue10){ \r\n\t\treturn _discountValue = 18;\r\n\t} else {   \r\n\t\treturn _discountValue = 20;\r\n\t}\r\n   }\r\n\r\nfunction discountValueSolution (uint Donat) internal constant returns (uint) {\r\n\tuint DiscountValue;\r\n\tif (!isDiscountValue) {\r\n\t\tDiscountValue = 0;\r\n\t\treturn DiscountValue;\r\n\t} else {\r\n\t\tDiscountValue = coefficientSolution (Donat);\r\n\t\treturn DiscountValue;\r\n\t}\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoTradeCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f5833bf044b3c2e3564d022a2df3484fbd723a6e19b2d7a05788d5ab51460567"}]}