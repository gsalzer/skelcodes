{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {\r\n    return 0;\r\n  }\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    _owner = _owner;\r\n    return 0;\r\n  }\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    _to = _to;\r\n    _value = _value;\r\n    return false;\r\n  }\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    _from = _from;\r\n    _to = _to;\r\n    _value = _value;\r\n    return false;\r\n  }\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    _spender = _spender;\r\n    _value = _value;\r\n    return false;\r\n  }\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    _owner = _owner;\r\n    _spender = _spender;\r\n    return 0;\r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    //Default assumes totalSupply can't be over max (2^256 - 1).\r\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n    //Replace the if with this one instead.\r\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n    //if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract EtherPush is SafeMath {\r\n  struct Order {\r\n    uint    id;\r\n    address sell;\r\n    uint    sellamount;\r\n    address buy;\r\n    uint    buyamount;\r\n    address seller;\r\n    address buyer;\r\n    uint    created;\r\n    uint    expired;\r\n    uint    timestamp;\r\n  }\r\n\r\n  mapping (address => mapping (address => uint))            public tokens;\r\n  mapping (uint => mapping (address => Order))              public orders;\r\n\r\n  string  public constant  name = \"EtherPush\";\r\n  string  public constant  version = \"20170913\";\r\n\r\n  bool    public           running = true;\r\n\r\n  uint    public           sellerfee = 0.005 ether;\r\n  uint    public constant    sellerfeeDivide = 1 ether;\r\n\r\n  uint    public           buyerfee = 0.005 ether;\r\n  uint    public constant    buyerfeeDivide = 1 ether;\r\n\r\n  uint    private          _id = 0;\r\n  uint    private          _nonce = 0;\r\n  address  private          owner;\r\n\r\n  event onSell(bytes32 nonce, uint id, address sell, uint sellamount, address buy, uint buyamount, address seller, address buyer, uint created, uint expired, uint timestamp);\r\n  event onBuy(bytes32 nonce, uint id, address sell, uint sellamount, uint balanceSellamount,\r\n              address buy, uint buyamount, uint balanceBuyamount, address seller, address buyer,\r\n              uint created, uint timestamp);\r\n  event onCancel(bytes32 nonce, uint id, address seller);\r\n  event onDeposit(address token, address user, uint amount, uint balance);\r\n  event onWithdraw(address token, address user, uint amount, uint balance);\r\n\r\n  modifier onlyRunning() {\r\n    require(running);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function EtherPush() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function ownerChangeRunning(bool _running)\r\n    public\r\n    onlyOwner\r\n  {\r\n    running = _running;\r\n  }\r\n\r\n  function ownerChangeSellerfee(uint _fee)\r\n    public\r\n    onlyOwner\r\n  {\r\n    /*\r\n     * between [0.1%, 2%]\r\n     */\r\n    require (_fee >= 0.001 ether && _fee <= 0.02 ether);\r\n\r\n    sellerfee = _fee;\r\n  }\r\n\r\n  function ownerChangeBuyerfee(uint _fee)\r\n    public\r\n    onlyOwner\r\n  {\r\n    /*\r\n     * between [0.1%, 2%]\r\n     */\r\n    require (_fee >= 0.001 ether && _fee <= 0.02 ether);\r\n    buyerfee = _fee;\r\n  }\r\n\r\n  function ownerChangeOwner(address _owner)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require (_owner > 0);\r\n    owner = _owner;\r\n  }\r\n\r\n  function ownerWithdrawAccount(address account)\r\n    public\r\n    onlyOwner\r\n  {\r\n    account.transfer(this.balance);\r\n  }\r\n\r\n  function ownerWithdraw()\r\n    public\r\n    onlyOwner\r\n  {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  function getRunning() public constant returns (bool) {\r\n    return running;\r\n  }\r\n\r\n  function getSellerfee() public constant returns (uint) {\r\n    return sellerfee;\r\n  }\r\n\r\n  function getBuyerfee() public constant returns (uint) {\r\n    return buyerfee;\r\n  }\r\n\r\n  function withdrawAmountETH(uint amount) {\r\n    if (tokens[0][msg.sender] < amount) {\r\n      revert();\r\n    }\r\n\r\n    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    onWithdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n  }\r\n\r\n  function withdrawETH() {\r\n    uint amount = tokens[0][msg.sender];\r\n    tokens[0][msg.sender] = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    onWithdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n  }\r\n\r\n  function withdrawToken(address token) {\r\n    if (token == address(0)) {\r\n      revert();\r\n    }\r\n\r\n    uint amount = tokens[token][msg.sender];\r\n    tokens[token][msg.sender] = 0;\r\n\r\n    if (!Token(token).transfer(msg.sender, amount)) {\r\n      revert();\r\n    }\r\n\r\n    onWithdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function withdrawAmountToken(address token, uint amount) {\r\n    if (token == address(0)) {\r\n      revert();\r\n    }\r\n\r\n    if (tokens[token][msg.sender] < amount) {\r\n      revert();\r\n    }\r\n\r\n    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\r\n\r\n    if (!Token(token).transfer(msg.sender, amount)) {\r\n      revert();\r\n    }\r\n\r\n    onWithdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function depositETH()\r\n    public\r\n    payable\r\n  {\r\n    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\r\n    onDeposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\r\n  }\r\n\r\n  function depositToken(address token, uint amount)\r\n    public\r\n  {\r\n    if (token == address(0)) {\r\n      revert();\r\n    }\r\n\r\n    if (!Token(token).transferFrom(msg.sender, this, amount)) {\r\n      revert();\r\n    }\r\n\r\n    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\r\n    onDeposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n  }\r\n\r\n  function balanceOf(address token, address user)\r\n    public\r\n    constant\r\n    returns\r\n    (uint)\r\n  {\r\n    return tokens[token][user];\r\n  }\r\n\r\n  function tobuy(uint id, address seller, uint buyamount)\r\n    public\r\n    onlyRunning\r\n  {\r\n    if (orders[id][seller].expired < block.number) {\r\n      revert();\r\n    }\r\n\r\n    if (orders[id][seller].buyer > 0) {\r\n      if (orders[id][seller].buyer != msg.sender) {\r\n        revert();\r\n      }\r\n    }\r\n\r\n    if (orders[id][seller].buyamount < buyamount) {\r\n      revert();\r\n    }\r\n\r\n    address sell = orders[id][seller].sell;\r\n    address buy = orders[id][seller].buy;\r\n    uint    ordersellamount = orders[id][seller].sellamount;\r\n    uint    orderbuyamount = orders[id][seller].buyamount;\r\n    uint    sellamount = safeMul(ordersellamount, buyamount) / orderbuyamount;\r\n    buyamount = safeMul(sellamount, orderbuyamount) / ordersellamount;\r\n\r\n    if (ordersellamount < sellamount) {\r\n      revert();\r\n    }\r\n\r\n    if (tokens[sell][seller] < sellamount) {\r\n      revert();\r\n    }\r\n\r\n    if (tokens[buy][msg.sender] < buyamount) {\r\n      revert();\r\n    }\r\n\r\n    uint _sellerfee = safeMul(sellamount, sellerfee) / sellerfeeDivide;\r\n    uint _buyerfee = safeMul(buyamount, buyerfee) / buyerfeeDivide;\r\n\r\n    /*\r\n     * order\r\n     */\r\n\r\n    orders[id][seller].sellamount = safeSub(orders[id][seller].sellamount, sellamount);\r\n    orders[id][seller].buyamount = safeSub(orders[id][seller].buyamount, buyamount);\r\n\r\n    /*\r\n     * balance sell token\r\n     */\r\n\r\n    tokens[sell][seller] = safeSub(tokens[sell][seller], sellamount);\r\n    tokens[sell][owner] = safeAdd(tokens[sell][owner], _sellerfee);\r\n    tokens[sell][msg.sender] = safeAdd(tokens[sell][msg.sender], safeSub(sellamount, _sellerfee));\r\n\r\n    /*\r\n     * balance buy token\r\n     */\r\n\r\n    tokens[buy][msg.sender] = safeSub(tokens[buy][msg.sender], buyamount);\r\n    tokens[buy][owner] = safeAdd(tokens[buy][owner], _buyerfee);\r\n    tokens[buy][seller] = safeAdd(tokens[buy][seller], safeSub(buyamount, _buyerfee));\r\n\r\n    /*\r\n     * call to buy function to clear stack\r\n     */\r\n\r\n    _tobuy(id, seller, sellamount, buyamount);\r\n  }\r\n\r\n  function _tobuy(uint id, address seller, uint sellamount, uint buyamount)\r\n    private\r\n  {\r\n    bytes32 nonce = sha3(block.number, msg.data, _nonce++);\r\n    onBuy(\r\n         nonce,\r\n         id,\r\n         orders[id][seller].sell,\r\n         sellamount,\r\n         orders[id][seller].sellamount,\r\n         orders[id][seller].buy,\r\n         buyamount,\r\n         orders[id][seller].buyamount,\r\n         seller,\r\n         msg.sender,\r\n         block.number,\r\n         now\r\n         );\r\n  }\r\n\r\n  function tosell(address sell, uint sellamount, address buy, uint buyamount,\r\n               address buyer, uint expire, uint broadcast)\r\n    public\r\n    onlyRunning\r\n  {\r\n\r\n    if (tokens[sell][msg.sender] < sellamount) {\r\n      revert();\r\n    }\r\n\r\n    /*\r\n     * if buyer > 0, the order only can be purchased by the specified buyer.\r\n     * and here we do not check the token balance to imporve the poor performance\r\n     */\r\n\r\n    _id = _id + 1;\r\n    orders[_id][msg.sender].id = _id;\r\n    orders[_id][msg.sender].sell = sell;\r\n    orders[_id][msg.sender].sellamount = sellamount;\r\n    orders[_id][msg.sender].buy = buy;\r\n    orders[_id][msg.sender].buyamount = buyamount;\r\n    orders[_id][msg.sender].seller = msg.sender;\r\n    orders[_id][msg.sender].buyer = buyer;\r\n    orders[_id][msg.sender].created = block.number;\r\n    orders[_id][msg.sender].expired = safeAdd(block.number, expire);\r\n\r\n    bytes32 nonce = sha3(block.number, msg.data, _nonce++);\r\n\r\n    onSell(nonce, _id, sell, sellamount, buy, buyamount, msg.sender, buyer, block.number, orders[_id][msg.sender].expired, now);\r\n  }\r\n\r\n  function tocancel(uint id)\r\n    public\r\n  {\r\n    orders[id][msg.sender].sellamount = 0;\r\n\r\n    bytes32 nonce = sha3(block.number, msg.data, _nonce++);\r\n\r\n    onCancel(nonce, id, msg.sender);\r\n  }\r\n\r\n  function getOrder(uint id, address seller)\r\n    public\r\n    constant\r\n    returns\r\n    (address, uint, address, uint, address, uint)\r\n  {\r\n    return (orders[id][seller].sell,\r\n      orders[id][seller].sellamount,\r\n      orders[id][seller].buy,\r\n      orders[id][seller].buyamount,\r\n      orders[id][seller].buyer,\r\n      orders[id][seller].expired\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ownerChangeBuyerfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmountToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_running\",\"type\":\"bool\"}],\"name\":\"ownerChangeRunning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerfeeDivide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerfeeDivide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sell\",\"type\":\"address\"},{\"name\":\"sellamount\",\"type\":\"uint256\"},{\"name\":\"buy\",\"type\":\"address\"},{\"name\":\"buyamount\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"broadcast\",\"type\":\"uint256\"}],\"name\":\"tosell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"sell\",\"type\":\"address\"},{\"name\":\"sellamount\",\"type\":\"uint256\"},{\"name\":\"buy\",\"type\":\"address\"},{\"name\":\"buyamount\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"created\",\"type\":\"uint256\"},{\"name\":\"expired\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ownerChangeSellerfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerWithdrawAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyamount\",\"type\":\"uint256\"}],\"name\":\"tobuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tocancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmountETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expired\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sell\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceSellamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceBuyamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"onCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"EtherPush","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ca33f4b1439c113ca7b5f84c43b0832a4e05f00a49bd7cdaf7585bc85d37cfb"}]}