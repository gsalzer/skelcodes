{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Token {\r\n\r\n\t/// total amount of tokens\r\n    uint public totalSupply;\r\n\r\n\t/// return tokens balance\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n\r\n\t/// tranfer successful or not\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n\r\n\t/// tranfer successful or not\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n\r\n\t/// approval successful or not\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n\r\n\t/// amount of remaining tokens\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\r\n\t/// events\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length < size + 4) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\r\n\t  if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n}\r\n\r\n\r\n\r\ncontract LudumToken is StandardToken {\r\n\r\n    using SafeMath for uint;\r\n\r\n\tstring public constant name = \"Ludum\"; // Ludum tokens name\r\n    string public constant symbol = \"LDM\"; // Ludum tokens ticker\r\n    uint public constant decimals = 18; // Ludum tokens decimals\r\n\tuint public constant maximumSupply =  100000000000000000000000000; // Maximum 100M Ludum tokens can be created\r\n\r\n    address public ethDepositAddress;\r\n    address public teamFundAddress;\r\n\taddress public operationsFundAddress;\r\n\taddress public marketingFundAddress;\r\n\r\n    bool public isFinalized;\r\n\tuint public constant crowdsaleStart = 1503921600;\r\n\tuint public constant crowdsaleEnd = 1506340800;\r\n\t\r\n\tuint public constant teamPercent = 10;\r\n\tuint public constant operationsPercent = 10;\r\n\tuint public constant marketingPercent = 10;\r\n\r\n\r\n    function ludumTokensPerEther() constant returns(uint) {\r\n\r\n\t\tif (now < crowdsaleStart || now > crowdsaleEnd) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\tif (now < crowdsaleStart + 1 days) return 15000; // Ludum token sale with 50% bonus\r\n\t\t\tif (now < crowdsaleStart + 7 days) return 13000; // Ludum token sale with 30% bonus\r\n\t\t\tif (now < crowdsaleStart + 14 days) return 11000; // Ludum token sale with 10% bonus\r\n\t\t\treturn 10000; // Ludum token sale\r\n\t\t}\r\n\r\n    }\r\n\r\n\r\n    // events\r\n    event CreateLudumTokens(address indexed _to, uint _value);\r\n\r\n    // Ludum token constructor\r\n    function LudumToken()\r\n    {\r\n        isFinalized = false;\r\n\t    ethDepositAddress = \"0xD8E4FB6cC1BD2a8eF6E086152877E7ba540B5d9b\";\r\n\t    teamFundAddress = \"0xB6FCB6EF9b46B4ea0AC403e74b53e3962f6fc41d\";\r\n\t    operationsFundAddress = \"0x81B9c43a410C86620fbd85509c29E8C93995A8A9\";\r\n\t    marketingFundAddress = \"0x057CCb6A9061Aa61aEAE047fdCddeCb6511A0865\";\r\n    }\r\n\r\n\r\n    function makeTokens() payable  {\r\n        if (isFinalized) throw;\r\n        if (now < crowdsaleStart) throw;\r\n        if (now > crowdsaleEnd) throw;\r\n        if (msg.value < 10 finney) throw;\r\n\r\n        uint tokens = msg.value.mul(ludumTokensPerEther());\r\n\t    uint teamTokens = tokens.mul(teamPercent).div(100);\r\n\t    uint operationsTokens = tokens.mul(operationsPercent).div(100);\r\n\t    uint marketingTokens = tokens.mul(marketingPercent).div(100);\r\n\r\n\t    uint currentSupply = totalSupply.add(tokens).add(teamTokens).add(operationsTokens).add(marketingTokens);\r\n\r\n        if (maximumSupply < currentSupply) throw;\r\n\r\n        totalSupply = currentSupply;\r\n\r\n        balances[msg.sender] += tokens;\r\n        CreateLudumTokens(msg.sender, tokens);\r\n\t  \r\n\t    balances[teamFundAddress] += teamTokens;\r\n        CreateLudumTokens(teamFundAddress, teamTokens);\r\n\t  \r\n\t    balances[operationsFundAddress] += operationsTokens;\r\n        CreateLudumTokens(operationsFundAddress, operationsTokens);\r\n\t  \r\n\t    balances[marketingFundAddress] += marketingTokens;\r\n        CreateLudumTokens(marketingFundAddress, marketingTokens);\r\n    }\r\n\r\n\r\n    function() payable {\r\n        makeTokens();\r\n    }\r\n\r\n\r\n    function finalizeCrowdsale() external {\r\n        if (isFinalized) throw;\r\n        if (msg.sender != ethDepositAddress) throw;\r\n\r\n\t    if(now <= crowdsaleEnd && totalSupply != maximumSupply) throw;\r\n\r\n        isFinalized = true;\r\n        if(!ethDepositAddress.send(this.balance)) throw;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximumSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ludumTokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDepositAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateLudumTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LudumToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c0d3ede77dd99cfd24d399e87ae32a3351d3c087a8c37715babc383d0132f7c"}]}