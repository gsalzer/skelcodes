{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.17;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) \r\n            owner = newOwner;\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner)\r\n            _;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public stopped;\r\n\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        if (!stopped) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Called by the owner in emergency, triggers stopped state\r\n    function emergencyStop() external onlyOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    // Called by the owner to end of emergency, returns to normal state\r\n    function release() external onlyOwner onlyInEmergency {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns(uint);\r\n\r\n    function allowance(address owner, address spender) public view returns(uint);\r\n\r\n    function transfer(address to, uint value) public returns(bool ok);\r\n\r\n    function transferFrom(address from, address to, uint value) public returns(bool ok);\r\n\r\n    function approve(address spender, uint value) public returns(bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Token is ERC20, SafeMath, Ownable {\r\n\r\n    function transfer(address _to, uint _value) public returns(bool);\r\n}\r\n\r\n// Presale Smart Contract\r\n// This smart contract collects ETH and in return sends tokens to the backers\r\ncontract Presale is SafeMath, Pausable {\r\n\r\n    struct Backer {\r\n        uint weiReceived; // amount of ETH contributed\r\n        uint tokensToSend; // amount of tokens  sent\r\n        bool claimed;\r\n        bool refunded;\r\n    }\r\n   \r\n    address public multisig; // Multisig contract that will receive the ETH    \r\n    uint public ethReceived; // Number of ETH received\r\n    uint public tokensSent; // Number of tokens sent to ETH contributors\r\n    uint public startBlock; // Presale start block\r\n    uint public endBlock; // Presale end block\r\n\r\n    uint public minInvestment; // Minimum amount to invest\r\n    uint public maxInvestment; // Maximum investment\r\n    bool public presaleClosed; // Is presale still on going     \r\n    uint public tokenPriceWei; // price of token in wei\r\n    Token public token; // addresss of token contract\r\n\r\n\r\n    mapping(address => Backer) public backers; //backer list\r\n    address[] public backersIndex;  // to be able to iterate through backer list\r\n    uint public maxCap;  // max cap\r\n    uint public claimCount;  // number of contributors claming tokens\r\n    uint public refundCount;  // number of contributors receivig refunds\r\n    uint public totalClaimed;  // total of tokens claimed\r\n    uint public totalRefunded;  // total of tokens refunded\r\n    bool public mainSaleSuccessfull; // true if main sale was successfull\r\n    mapping(address => uint) public claimed; // Tokens claimed by contibutors\r\n    mapping(address => uint) public refunded; // Tokens refunded to contributors\r\n\r\n\r\n    // @notice to verify if action is not performed out of the campaing range\r\n    modifier respectTimeFrame() {\r\n        if ((block.number < startBlock) || (block.number > endBlock)) \r\n            revert();\r\n        _;\r\n    }\r\n\r\n    // @notice overwrting this function to ensure that money if any     is returned to authorized party. \r\n    function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(multisig);\r\n    }\r\n\r\n\r\n    // Events\r\n    event ReceivedETH(address backer, uint amount, uint tokenAmount);\r\n    event TokensClaimed(address backer, uint count);\r\n    event Refunded(address backer, uint amount);\r\n\r\n\r\n\r\n    // Presale  {constructor}\r\n    // @notice fired when contract is crated. Initilizes all needed variables.\r\n    function Presale() public {        \r\n        multisig = 0xF821Fd99BCA2111327b6a411C90BE49dcf78CE0f; \r\n        minInvestment = 5e17;  // 0.5 eth\r\n        maxInvestment = 75 ether;      \r\n        maxCap = 82500000e18;\r\n        startBlock = 0; // Should wait for the call of the function start\r\n        endBlock = 0; // Should wait for the call of the function start       \r\n        tokenPriceWei = 1100000000000000;      \r\n        tokensSent = 2534559883e16;         \r\n    }\r\n\r\n    // @notice​ ​return​ ​ number​ of​ ​contributors\r\n    //​ ​@return​ ​ ​{uint}​ ​ number​ ​ of contributors\r\n    function numberOfBackers() public view returns(uint) {\r\n        return backersIndex.length;\r\n    }\r\n\r\n    // @notice to populate website with status of the sale \r\n    function returnWebsiteData() external view returns(uint, uint, uint, uint, uint, uint, uint, uint, uint, bool, bool) {\r\n    \r\n        return (startBlock, endBlock, numberOfBackers(), ethReceived, maxCap, tokensSent, tokenPriceWei, minInvestment, maxInvestment, stopped, presaleClosed );\r\n    }\r\n\r\n    // @notice called to mark contributors when tokens are transfered to them after ICO manually. \r\n    // @param _backer {address} address of beneficiary\r\n    function claimTokensForUser(address _backer) onlyOwner() external returns(bool) {\r\n\r\n        require (!backer.refunded); // if refunded, don't allow tokens to be claimed           \r\n        require (!backer.claimed); // if tokens claimed, don't allow to be claimed again            \r\n        require (backer.tokensToSend != 0); // only continue if there are any tokens to send        \r\n        Backer storage backer = backers[_backer];\r\n        backer.claimed = true;  // mark record as claimed\r\n\r\n        if (!token.transfer(_backer, backer.tokensToSend)) \r\n            revert(); // send claimed tokens to contributor account\r\n\r\n        TokensClaimed(msg.sender, backer.tokensToSend);  \r\n        return true;\r\n    }\r\n\r\n\r\n    // {fallback function}\r\n    // @notice It will call internal function which handels allocation of Ether and calculates PPP tokens.\r\n    function () public payable {\r\n        contribute(msg.sender);\r\n    }\r\n\r\n    // @notice in case refunds are needed, money can be returned to the contract\r\n    function fundContract() external payable onlyOwner() returns (bool) {\r\n        mainSaleSuccessfull = false;\r\n        return true;\r\n    }\r\n\r\n    // @notice It will be called by owner to start the sale    \r\n    // block numbers will be calculated based on current block time average. \r\n    function start(uint _block) external onlyOwner() {\r\n        require(_block < 54000);  // 2.5*60*24*15 days = 54000  \r\n        startBlock = block.number;\r\n        endBlock = safeAdd(startBlock, _block);   \r\n    }\r\n\r\n    // @notice Due to changing average of block time\r\n    // this function will allow on adjusting duration of campaign closer to the end \r\n    // @param _block  number of blocks representing duration \r\n    function adjustDuration(uint _block) external onlyOwner() {\r\n        \r\n        require(_block <= 72000);  // 2.5*60*24*20 days = 72000     \r\n        require(_block > safeSub(block.number, startBlock)); // ensure that endBlock is not set in the past\r\n        endBlock = safeAdd(startBlock, _block);   \r\n    }\r\n\r\n    \r\n\r\n\r\n    // @notice set the address of the token contract\r\n    // @param _token  {Token} address of the token contract\r\n    function setToken(Token _token) public onlyOwner() returns(bool) {\r\n\r\n        token = _token;\r\n        mainSaleSuccessfull = true;\r\n        return true;\r\n    }\r\n\r\n    // @notice sets status of main ICO\r\n    // @param _status {bool} true if public ICO was successful\r\n    function setMainCampaignStatus(bool _status) public onlyOwner() {\r\n        mainSaleSuccessfull = _status;\r\n    }\r\n\r\n    // @notice It will be called by fallback function whenever ether is sent to it\r\n    // @param  _contributor {address} address of beneficiary\r\n    // @return res {bool} true if transaction was successful\r\n\r\n    function contribute(address _contributor) internal stopInEmergency respectTimeFrame returns(bool res) {\r\n         \r\n        require (msg.value >= minInvestment && msg.value <= maxInvestment);  // ensure that min and max contributions amount is met\r\n                   \r\n        uint tokensToSend = calculateNoOfTokensToSend();\r\n        \r\n        require (safeAdd(tokensSent, tokensToSend) <= maxCap);  // Ensure that max cap hasn't been reached\r\n\r\n        Backer storage backer = backers[_contributor];\r\n\r\n        if (backer.weiReceived == 0)\r\n            backersIndex.push(_contributor);\r\n\r\n        backer.tokensToSend = safeAdd(backer.tokensToSend, tokensToSend);\r\n        backer.weiReceived = safeAdd(backer.weiReceived, msg.value);\r\n        ethReceived = safeAdd(ethReceived, msg.value); // Update the total Ether recived\r\n        tokensSent = safeAdd(tokensSent, tokensToSend);\r\n\r\n        multisig.transfer(msg.value);  // send money to multisignature wallet\r\n\r\n        ReceivedETH(_contributor, msg.value, tokensToSend); // Register event\r\n        return true;\r\n    }\r\n\r\n    // @notice It is called by contribute to determine amount of tokens for given contribution    \r\n    // @return tokensToPurchase {uint} value of tokens to purchase\r\n\r\n    function calculateNoOfTokensToSend() view internal returns(uint) {\r\n         \r\n        uint tokenAmount = safeMul(msg.value, 1e18) / tokenPriceWei;\r\n        uint ethAmount = msg.value;\r\n\r\n        if (ethAmount >= 50 ether)\r\n            return tokenAmount + (tokenAmount * 5) / 100;  // 5% percent bonus\r\n        else if (ethAmount >= 15 ether)\r\n            return tokenAmount + (tokenAmount * 25) / 1000; // 2.5% percent bonus\r\n        else \r\n            return tokenAmount;\r\n    }\r\n\r\n    // @notice This function will finalize the sale.\r\n    // It will only execute if predetermined sale time passed \r\n\r\n    function finalize() external onlyOwner() {\r\n\r\n        require (!presaleClosed);           \r\n        require (block.number >= endBlock);                          \r\n        presaleClosed = true;\r\n    }\r\n\r\n\r\n    // @notice contributors can claim tokens after public ICO is finished\r\n    // tokens are only claimable when token address is available. \r\n\r\n    function claimTokens() external {\r\n\r\n        require(mainSaleSuccessfull);\r\n       \r\n        require (token != address(0));  // address of the token is set after ICO\r\n                                        // claiming of tokens will be only possible once address of token\r\n                                        // is set through setToken\r\n           \r\n        Backer storage backer = backers[msg.sender];\r\n\r\n        require (!backer.refunded); // if refunded, don't allow for another refund           \r\n        require (!backer.claimed); // if tokens claimed, don't allow refunding            \r\n        require (backer.tokensToSend != 0);   // only continue if there are any tokens to send           \r\n\r\n        claimCount++;\r\n        claimed[msg.sender] = backer.tokensToSend;  // save claimed tokens\r\n        backer.claimed = true;\r\n        totalClaimed = safeAdd(totalClaimed, backer.tokensToSend);\r\n        \r\n        if (!token.transfer(msg.sender, backer.tokensToSend)) \r\n            revert(); // send claimed tokens to contributor account\r\n\r\n        TokensClaimed(msg.sender, backer.tokensToSend);  \r\n    }\r\n\r\n    // @notice allow refund when ICO failed\r\n    // In such a case contract will need to be funded. \r\n    // Until contract is funded this function will throw\r\n\r\n    function refund() external {\r\n\r\n        require(!mainSaleSuccessfull);  // ensure that ICO failed\r\n        require(this.balance > 0);  // contract will hold 0 ether at the end of campaign.                                  \r\n                                    // contract needs to be funded through fundContract() \r\n        Backer storage backer = backers[msg.sender];\r\n\r\n        require (!backer.claimed); // check if tokens have been allocated already                   \r\n        require (!backer.refunded); // check if user has been already refunded     \r\n        require(backer.weiReceived != 0);  // check if user has actually sent any contributions        \r\n\r\n        backer.refunded = true; // mark contributor as refunded. \r\n        totalRefunded = safeAdd(totalRefunded, backer.weiReceived);\r\n        refundCount ++;\r\n        refunded[msg.sender] = backer.weiReceived;\r\n\r\n        msg.sender.transfer(backer.weiReceived);  // refund contribution        \r\n        Refunded(msg.sender, backer.weiReceived); // log event\r\n    }\r\n\r\n\r\n    // @notice Failsafe drain\r\n    function drain() external onlyOwner() {\r\n        multisig.transfer(this.balance);\r\n            \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backer\",\"type\":\"address\"}],\"name\":\"claimTokensForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnWebsiteData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleSuccessfull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"adjustDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"tokensToSend\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"},{\"name\":\"refunded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMainCampaignStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f155c4367607bc95f5d9f84f0200830925ce908003a767e874e1786aca70854d"}]}