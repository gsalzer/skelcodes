{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract DecenterHackathon {\r\n\r\n    struct Team {\r\n        string name;\r\n        string memberNames;\r\n        uint score;\r\n        uint reward;\r\n        bool rewardEligible;\r\n        bool submittedByAdmin;\r\n        bool disqualified;\r\n        mapping(address => bool) votedForByJuryMember;\r\n    }\r\n\r\n    struct JuryMember {\r\n        string name;\r\n        bool hasVoted;\r\n    }\r\n\r\n    struct Sponsor {\r\n        string name;\r\n        string siteUrl;\r\n        string logoUrl;\r\n        address ethAddress;\r\n        uint contribution;\r\n    }\r\n\r\n    enum Period { Registration, Competition, Voting, Verification, End }\r\n\r\n    uint public totalContribution;\r\n    Period public currentPeriod;\r\n\r\n    mapping(address => Team) teams;\r\n    mapping(address => JuryMember) juryMembers;\r\n\r\n    address administrator;\r\n    address[] teamAddresses;\r\n    address[] juryMemberAddresses;\r\n    Sponsor[] sponsors;\r\n\r\n    event PeriodChanged(Period newPeriod);\r\n    event TeamRegistered(string teamName, address teamAddress, string memberNames, bool rewardEligible);\r\n    event JuryMemberAdded(string juryMemberName, address juryMemberAddress);\r\n    event SponsorshipReceived(string sponsorName, string sponsorSite, string sponsorLogoUrl, uint amount);\r\n    event VoteReceived(string juryMemberName, address indexed teamAddress, uint points);\r\n    event PrizePaid(string teamName, uint amount);\r\n    event TeamDisqualified(address teamAddress);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    modifier onlyJury {\r\n        require(bytes(juryMembers[msg.sender].name).length > 0);\r\n        _;\r\n    }\r\n\r\n   function DecenterHackathon() {\r\n        administrator = msg.sender;\r\n        currentPeriod = Period.Registration;\r\n    }\r\n\r\n    // Administrator is able to switch between periods at any time\r\n    function switchToNextPeriod() onlyOwner {\r\n        if(currentPeriod == Period.Verification || currentPeriod == Period.End) {\r\n            return;\r\n        }\r\n\r\n        currentPeriod = Period(uint(currentPeriod) + 1);\r\n\r\n        PeriodChanged(currentPeriod);\r\n    }\r\n\r\n    // Administrator can add new teams during registration period, with an option to make a team non-eligible for the prize\r\n    function registerTeam(string _name, address _teamAddress, string _memberNames, bool _rewardEligible) onlyOwner {\r\n        require(currentPeriod == Period.Registration);\r\n        require(bytes(teams[_teamAddress].name).length == 0);\r\n\r\n        teams[_teamAddress] = Team({\r\n            name: _name,\r\n            memberNames: _memberNames,\r\n            score: 0,\r\n            reward: 0,\r\n            rewardEligible: _rewardEligible,\r\n            submittedByAdmin: false,\r\n            disqualified: false\r\n        });\r\n\r\n        teamAddresses.push(_teamAddress);\r\n        TeamRegistered(_name, _teamAddress, _memberNames, _rewardEligible);\r\n    }\r\n\r\n    // Administrator can add new jury members during registration period\r\n    function registerJuryMember(string _name, address _ethAddress) onlyOwner {\r\n        require(currentPeriod == Period.Registration);\r\n\r\n        juryMemberAddresses.push(_ethAddress);\r\n        juryMembers[_ethAddress] = JuryMember({\r\n            name: _name,\r\n            hasVoted: false\r\n        });\r\n\r\n        JuryMemberAdded(_name, _ethAddress);\r\n    }\r\n\r\n    // Anyone can contribute to the prize pool (i.e. either sponsor himself or administrator on behalf of the sponsor) during registration period\r\n    function contributeToPrizePool(string _name, string _siteUrl, string _logoUrl) payable {\r\n        require(currentPeriod != Period.End);\r\n        require(msg.value >= 0.1 ether);\r\n\r\n        sponsors.push(Sponsor({\r\n            name: _name,\r\n            siteUrl: _siteUrl,\r\n            logoUrl: _logoUrl,\r\n            ethAddress: msg.sender,\r\n            contribution: msg.value\r\n        }));\r\n\r\n        totalContribution += msg.value;\r\n        SponsorshipReceived(_name, _siteUrl, _logoUrl, msg.value);\r\n    }\r\n\r\n    // Jury members can vote during voting period\r\n    // The _votes parameter should be an array of team addresses, sorted by score from highest to lowest based on jury member's preferences\r\n    function vote(address[] _votes) onlyJury {\r\n        require(currentPeriod == Period.Voting);\r\n        require(_votes.length == teamAddresses.length);\r\n        require(juryMembers[msg.sender].hasVoted == false);\r\n\r\n        uint _points = _votes.length;\r\n\r\n        for(uint i = 0; i < _votes.length; i++) {\r\n            address teamAddress = _votes[i];\r\n\r\n            // All submitted teams must be registered\r\n            require(bytes(teams[teamAddress].name).length > 0);\r\n\r\n            // Judge should not be able to vote for the same team more than once\r\n            require(teams[teamAddress].votedForByJuryMember[msg.sender] == false);\r\n\r\n            teams[teamAddress].score += _points;\r\n            teams[teamAddress].votedForByJuryMember[msg.sender] = true;\r\n\r\n            VoteReceived(juryMembers[msg.sender].name, teamAddress, _points);\r\n            _points--;\r\n        }\r\n\r\n        // This will prevent jury members from voting more than once\r\n        juryMembers[msg.sender].hasVoted = true;\r\n    }\r\n\r\n    // Administrator can initiate prize payout during final period\r\n    // The _sortedTeams parameter should be an array of correctly sorted teams by score, from highest to lowest\r\n    function payoutPrizes(address[] _sortedTeams) onlyOwner {\r\n        require(currentPeriod == Period.Verification);\r\n        require(_sortedTeams.length == teamAddresses.length);\r\n\r\n        for(uint i = 0; i < _sortedTeams.length; i++) {\r\n            // All submitted teams must be registered\r\n            require(bytes(teams[_sortedTeams[i]].name).length > 0);\r\n\r\n            // Teams must be sorted correctly\r\n            require(i == _sortedTeams.length - 1 || teams[_sortedTeams[i + 1]].score <= teams[_sortedTeams[i]].score);\r\n\r\n            teams[_sortedTeams[i]].submittedByAdmin = true;\r\n        }\r\n\r\n        // Prizes are paid based on logarithmic scale, where first teams receives 1/2 of the prize pool, second 1/4 and so on\r\n        uint prizePoolDivider = 2;\r\n\r\n        for(i = 0; i < _sortedTeams.length; i++) {\r\n            // Make sure all teams are included in _sortedTeams array\r\n            // (i.e. the array should contain unique elements)\r\n            require(teams[_sortedTeams[i]].submittedByAdmin);\r\n\r\n            uint _prizeAmount = totalContribution / prizePoolDivider;\r\n\r\n            if(teams[_sortedTeams[i]].rewardEligible && !teams[_sortedTeams[i]].disqualified) {\r\n                _sortedTeams[i].transfer(_prizeAmount);\r\n                teams[_sortedTeams[i]].reward = _prizeAmount;\r\n                prizePoolDivider *= 2;\r\n                PrizePaid(teams[_sortedTeams[i]].name, _prizeAmount);\r\n            }\r\n        }\r\n\r\n        // Some small amount of ETH might remain in the contract after payout, becuase rewards are determened logarithmically\r\n        // This amount is returned to contract owner to cover deployment and transaction costs\r\n        // In case this amount turns out to be significantly larger than these costs, the administrator will distribute it to all teams equally\r\n        administrator.transfer(this.balance);\r\n\r\n        currentPeriod = Period.End;\r\n        PeriodChanged(currentPeriod);\r\n    }\r\n\r\n    // Administrator can disqualify team\r\n    function disqualifyTeam(address _teamAddress) onlyOwner {\r\n        require(bytes(teams[_teamAddress].name).length > 0);\r\n\r\n        teams[_teamAddress].disqualified = true;\r\n        TeamDisqualified(_teamAddress);\r\n    }\r\n\r\n    // In case something goes wrong and contract needs to be redeployed, this is a way to return all contributions to the sponsors\r\n    function returnContributionsToTheSponsors() onlyOwner {\r\n        for(uint i = i; i < sponsors.length; i++) {\r\n            sponsors[i].ethAddress.transfer(sponsors[i].contribution);\r\n        }\r\n    }\r\n\r\n    // Public function that returns user type for the given address\r\n    function getUserType(address _address) constant returns (string) {\r\n        if(_address == administrator) {\r\n            return \"administrator\";\r\n        } else if(bytes(juryMembers[_address].name).length > 0) {\r\n            return \"jury\";\r\n        } else {\r\n            return \"other\";\r\n        }\r\n    }\r\n\r\n    // Check if jury member voted\r\n    function checkJuryVoted(address _juryAddress) constant returns (bool){\r\n        require(bytes(juryMembers[_juryAddress].name).length != 0);\r\n\r\n        return juryMembers[_juryAddress].hasVoted;\r\n    }\r\n\r\n    // Returns total prize pool size\r\n    function getPrizePoolSize() constant returns (uint) {\r\n        return totalContribution;\r\n    }\r\n\r\n    function restartPeriod() onlyOwner {\r\n        currentPeriod = Period.Registration;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnContributionsToTheSponsors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_siteUrl\",\"type\":\"string\"},{\"name\":\"_logoUrl\",\"type\":\"string\"}],\"name\":\"contributeToPrizePool\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_memberNames\",\"type\":\"string\"},{\"name\":\"_rewardEligible\",\"type\":\"bool\"}],\"name\":\"registerTeam\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"registerJuryMember\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sortedTeams\",\"type\":\"address[]\"}],\"name\":\"payoutPrizes\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"disqualifyTeam\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchToNextPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrizePoolSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votes\",\"type\":\"address[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"checkJuryVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPeriod\",\"type\":\"uint8\"}],\"name\":\"PeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"memberNames\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"rewardEligible\",\"type\":\"bool\"}],\"name\":\"TeamRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"juryMemberName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"juryMemberAddress\",\"type\":\"address\"}],\"name\":\"JuryMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sponsorName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sponsorSite\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sponsorLogoUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SponsorshipReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"juryMemberName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"VoteReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"TeamDisqualified\",\"type\":\"event\"}]","ContractName":"DecenterHackathon","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f83d121c034edb0cb2982bbcbcb49eb5d01163f49f1d93752f1544e404d9324"}]}