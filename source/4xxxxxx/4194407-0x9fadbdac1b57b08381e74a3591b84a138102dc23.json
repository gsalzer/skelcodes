{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Ethraffle {\r\n    struct Contestant {\r\n        address addr;\r\n        uint raffleId;\r\n    }\r\n\r\n    event RaffleResult(\r\n        uint indexed raffleId,\r\n        uint winningNumber,\r\n        address winningAddress,\r\n        uint blockTimestamp,\r\n        uint blockNumber,\r\n        uint gasLimit,\r\n        uint difficulty,\r\n        uint gas,\r\n        uint value,\r\n        address msgSender,\r\n        address blockCoinbase,\r\n        bytes32 sha\r\n    );\r\n\r\n    event TicketPurchase(\r\n        uint indexed raffleId,\r\n        address contestant,\r\n        uint number\r\n    );\r\n\r\n    event TicketRefund(\r\n        uint indexed raffleId,\r\n        address contestant,\r\n        uint number\r\n    );\r\n\r\n    // Constants\r\n    address public rakeAddress;\r\n    uint constant public prize = 0.1 ether;\r\n    uint constant public rake = 0.02 ether;\r\n    uint constant public totalTickets = 6;\r\n    uint constant public pricePerTicket = (prize + rake) / totalTickets;\r\n\r\n    // Other internal variables\r\n    uint public raffleId = 1;\r\n    uint public nextTicket = 1;\r\n    mapping (uint => Contestant) public contestants;\r\n    uint[] public gaps;\r\n    bool public paused = false;\r\n\r\n    // Initialization\r\n    function Ethraffle() public {\r\n        rakeAddress = msg.sender;\r\n    }\r\n\r\n    // Call buyTickets() when receiving Ether outside a function\r\n    function () payable public {\r\n        buyTickets();\r\n    }\r\n\r\n    function buyTickets() payable public {\r\n        if (paused) {\r\n            msg.sender.transfer(msg.value);\r\n            return;\r\n        }\r\n\r\n        uint moneySent = msg.value;\r\n\r\n        while (moneySent >= pricePerTicket && nextTicket <= totalTickets) {\r\n            uint currTicket = 0;\r\n            if (gaps.length > 0) {\r\n                currTicket = gaps[gaps.length-1];\r\n                gaps.length--;\r\n            } else {\r\n                currTicket = nextTicket++;\r\n            }\r\n\r\n            contestants[currTicket] = Contestant(msg.sender, raffleId);\r\n            TicketPurchase(raffleId, msg.sender, currTicket);\r\n            moneySent -= pricePerTicket;\r\n        }\r\n\r\n        // Choose winner if we sold all the tickets\r\n        if (nextTicket > totalTickets) {\r\n            chooseWinner();\r\n        }\r\n\r\n        // Send back leftover money\r\n        if (moneySent > 0) {\r\n            msg.sender.transfer(moneySent);\r\n        }\r\n    }\r\n\r\n    function chooseWinner() private {\r\n        // Pseudorandom number generator\r\n        bytes32 sha = sha3(\r\n            block.timestamp,\r\n            block.number,\r\n            block.gaslimit,\r\n            block.difficulty,\r\n            msg.gas,\r\n            msg.value,\r\n            msg.sender,\r\n            block.coinbase\r\n        );\r\n\r\n        uint winningNumber = (uint(sha) % totalTickets) + 1;\r\n        address winningAddress = contestants[winningNumber].addr;\r\n        RaffleResult(\r\n            raffleId, winningNumber, winningAddress, block.timestamp,\r\n            block.number, block.gaslimit, block.difficulty, msg.gas,\r\n            msg.value, msg.sender, block.coinbase, sha\r\n        );\r\n\r\n        // Start next raffle and distribute prize\r\n        raffleId++;\r\n        nextTicket = 1;\r\n        winningAddress.transfer(prize);\r\n        rakeAddress.transfer(rake);\r\n    }\r\n\r\n    // Get your money back before the raffle occurs\r\n    function getRefund() public {\r\n        uint refunds = 0;\r\n        for (uint i = 1; i <= totalTickets; i++) {\r\n            if (msg.sender == contestants[i].addr && raffleId == contestants[i].raffleId) {\r\n                refunds++;\r\n                contestants[i] = Contestant(address(0), 0);\r\n                gaps.push(i);\r\n                TicketRefund(raffleId, msg.sender, i);\r\n            }\r\n        }\r\n\r\n        if (refunds > 0) {\r\n            msg.sender.transfer(refunds * pricePerTicket);\r\n        }\r\n    }\r\n\r\n    // Refund everyone's money, start a new raffle, then pause it\r\n    function endRaffle() public {\r\n        if (msg.sender == rakeAddress) {\r\n            paused = true;\r\n\r\n            for (uint i = 1; i <= totalTickets; i++) {\r\n                if (raffleId == contestants[i].raffleId) {\r\n                    TicketRefund(raffleId, contestants[i].addr, i);\r\n                    contestants[i].addr.transfer(pricePerTicket);\r\n                }\r\n            }\r\n\r\n            RaffleResult(raffleId, 0, address(0), 0, 0, 0, 0, 0, 0, address(0), address(0), 0);\r\n            raffleId++;\r\n            nextTicket = 1;\r\n            gaps.length = 0;\r\n        }\r\n    }\r\n\r\n    function togglePause() public {\r\n        if (msg.sender == rakeAddress) {\r\n            paused = !paused;\r\n        }\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == rakeAddress) {\r\n            selfdestruct(rakeAddress);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rakeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTickets\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contestants\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"raffleId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endRaffle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winningAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"difficulty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockCoinbase\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sha\",\"type\":\"bytes32\"}],\"name\":\"RaffleResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contestant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"TicketPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contestant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"TicketRefund\",\"type\":\"event\"}]","ContractName":"Ethraffle","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5aabd46ad706acca22abc4ddc5ded549ddc67423645173d425a630c29b84ecdc"}]}