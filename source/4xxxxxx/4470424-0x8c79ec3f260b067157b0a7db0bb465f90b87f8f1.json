{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    /// PURE function\r\n    function min(uint a, uint b) internal constant returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () public payable {\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\ncontract StakeTreeWithTokenization {\r\n  using SafeMath for uint256;\r\n\r\n  uint public version = 2;\r\n\r\n  struct Funder {\r\n    bool exists;\r\n    uint balance;\r\n    uint withdrawalEntry;\r\n    uint contribution;\r\n    uint contributionClaimed;\r\n  }\r\n\r\n  mapping(address => Funder) public funders;\r\n\r\n  bool public live = true; // For sunsetting contract\r\n  uint public totalCurrentFunders = 0; // Keeps track of total funders\r\n  uint public withdrawalCounter = 0; // Keeps track of how many withdrawals have taken place\r\n  uint public sunsetWithdrawDate;\r\n  \r\n  MiniMeToken public tokenContract;\r\n  MiniMeTokenFactory public tokenFactory;\r\n  bool public tokenized = false;\r\n  bool public canClaimTokens = false;\r\n\r\n  address public beneficiary; // Address for beneficiary\r\n  uint public sunsetWithdrawalPeriod; // How long it takes for beneficiary to swipe contract when put into sunset mode\r\n  uint public withdrawalPeriod; // How long the beneficiary has to wait withdraw\r\n  uint public minimumFundingAmount; // Setting used for setting minimum amounts to fund contract with\r\n  uint public lastWithdrawal; // Last withdrawal time\r\n  uint public nextWithdrawal; // Next withdrawal time\r\n\r\n  uint public contractStartTime; // For accounting purposes\r\n\r\n  event Payment(address indexed funder, uint amount);\r\n  event Refund(address indexed funder, uint amount);\r\n  event Withdrawal(uint amount);\r\n  event TokensClaimed(address indexed funder, uint amount);\r\n  event Sunset(bool hasSunset);\r\n\r\n  function StakeTreeWithTokenization(\r\n    address beneficiaryAddress, \r\n    uint withdrawalPeriodInit, \r\n    uint withdrawalStart, \r\n    uint sunsetWithdrawPeriodInit,\r\n    uint minimumFundingAmountInit) {\r\n\r\n    beneficiary = beneficiaryAddress;\r\n    withdrawalPeriod = withdrawalPeriodInit;\r\n    sunsetWithdrawalPeriod = sunsetWithdrawPeriodInit;\r\n\r\n    lastWithdrawal = withdrawalStart; \r\n    nextWithdrawal = lastWithdrawal + withdrawalPeriod;\r\n\r\n    minimumFundingAmount = minimumFundingAmountInit;\r\n\r\n    contractStartTime = now;\r\n  }\r\n\r\n  // Modifiers\r\n  modifier onlyByBeneficiary() {\r\n    require(msg.sender == beneficiary);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenTokenized() {\r\n    require(isTokenized());\r\n    _;\r\n  }\r\n\r\n  modifier onlyByFunder() {\r\n    require(isFunder(msg.sender));\r\n    _;\r\n  }\r\n\r\n  modifier onlyAfterNextWithdrawalDate() {\r\n    require(now >= nextWithdrawal);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenLive() {\r\n    require(live);\r\n    _;\r\n  }\r\n\r\n  modifier onlyWhenSunset() {\r\n    require(!live);\r\n    _;\r\n  }\r\n\r\n  /*\r\n  * External accounts can pay directly to contract to fund it.\r\n  */\r\n  function () payable {\r\n    fund();\r\n  }\r\n\r\n  /*\r\n  * Additional api for contracts to use as well\r\n  * Can only happen when live and over a minimum amount set by the beneficiary\r\n  */\r\n\r\n  function fund() public payable onlyWhenLive {\r\n    require(msg.value >= minimumFundingAmount);\r\n\r\n    // Only increase total funders when we have a new funder\r\n    if(!isFunder(msg.sender)) {\r\n      totalCurrentFunders = totalCurrentFunders.add(1); // Increase total funder count\r\n\r\n      funders[msg.sender] = Funder({\r\n        exists: true,\r\n        balance: msg.value,\r\n        withdrawalEntry: withdrawalCounter, // Set the withdrawal counter. Ie at which withdrawal the funder \"entered\" the patronage contract\r\n        contribution: 0,\r\n        contributionClaimed: 0\r\n      });\r\n    }\r\n    else { \r\n      consolidateFunder(msg.sender, msg.value);\r\n    }\r\n\r\n    Payment(msg.sender, msg.value);\r\n  }\r\n\r\n  // Pure functions\r\n\r\n  /*\r\n  * This function calculates how much the beneficiary can withdraw.\r\n  * Due to no floating points in Solidity, we will lose some fidelity\r\n  * if there's wei on the last digit. The beneficiary loses a neglibible amount\r\n  * to withdraw but this benefits the beneficiary again on later withdrawals.\r\n  * We multiply by 10 (which corresponds to the 10%) \r\n  * then divide by 100 to get the actual part.\r\n  */\r\n  function calculateWithdrawalAmount(uint startAmount) public returns (uint){\r\n    return startAmount.mul(10).div(100); // 10%\r\n  }\r\n\r\n  /*\r\n  * This function calculates the refund amount for the funder.\r\n  * Due to no floating points in Solidity, we will lose some fidelity.\r\n  * The funder loses a neglibible amount to refund. \r\n  * The left over wei gets pooled to the fund.\r\n  */\r\n  function calculateRefundAmount(uint amount, uint withdrawalTimes) public returns (uint) {    \r\n    for(uint i=0; i<withdrawalTimes; i++){\r\n      amount = amount.mul(9).div(10);\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  // Getter functions\r\n\r\n  /*\r\n  * To calculate the refund amount we look at how many times the beneficiary\r\n  * has withdrawn since the funder added their funds. \r\n  * We use that deduct 10% for each withdrawal.\r\n  */\r\n\r\n  function getRefundAmountForFunder(address addr) public constant returns (uint) {\r\n    // Only calculate on-the-fly if funder has not been updated\r\n    if(shouldUpdateFunder(addr)) {\r\n      uint amount = funders[addr].balance;\r\n      uint withdrawalTimes = getHowManyWithdrawalsForFunder(addr);\r\n      return calculateRefundAmount(amount, withdrawalTimes);\r\n    }\r\n    else {\r\n      return funders[addr].balance;\r\n    }\r\n  }\r\n\r\n  function getFunderContribution(address funder) public constant returns (uint) {\r\n    // Only calculate on-the-fly if funder has not been updated\r\n    if(shouldUpdateFunder(funder)) {\r\n      uint oldBalance = funders[funder].balance;\r\n      uint newBalance = getRefundAmountForFunder(funder);\r\n      uint contribution = oldBalance.sub(newBalance);\r\n      return funders[funder].contribution.add(contribution);\r\n    }\r\n    else {\r\n      return funders[funder].contribution;\r\n    }\r\n  }\r\n\r\n  function getBeneficiary() public constant returns (address) {\r\n    return beneficiary;\r\n  }\r\n\r\n  function getCurrentTotalFunders() public constant returns (uint) {\r\n    return totalCurrentFunders;\r\n  }\r\n\r\n  function getWithdrawalCounter() public constant returns (uint) {\r\n    return withdrawalCounter;\r\n  }\r\n\r\n  function getWithdrawalEntryForFunder(address addr) public constant returns (uint) {\r\n    return funders[addr].withdrawalEntry;\r\n  }\r\n\r\n  function getContractBalance() public constant returns (uint256 balance) {\r\n    balance = this.balance;\r\n  }\r\n\r\n  function getFunderBalance(address funder) public constant returns (uint256) {\r\n    return getRefundAmountForFunder(funder);\r\n  }\r\n\r\n  function getFunderContributionClaimed(address addr) public constant returns (uint) {\r\n    return funders[addr].contributionClaimed;\r\n  }\r\n\r\n  function isFunder(address addr) public constant returns (bool) {\r\n    return funders[addr].exists;\r\n  }\r\n\r\n  function isTokenized() public constant returns (bool) {\r\n    return tokenized;\r\n  }\r\n\r\n  function shouldUpdateFunder(address funder) public constant returns (bool) {\r\n    return getWithdrawalEntryForFunder(funder) < withdrawalCounter;\r\n  }\r\n\r\n  function getHowManyWithdrawalsForFunder(address addr) private constant returns (uint) {\r\n    return withdrawalCounter.sub(getWithdrawalEntryForFunder(addr));\r\n  }\r\n\r\n  // State changing functions\r\n  function setMinimumFundingAmount(uint amount) external onlyByBeneficiary {\r\n    require(amount > 0);\r\n    minimumFundingAmount = amount;\r\n  }\r\n\r\n  function withdraw() external onlyByBeneficiary onlyAfterNextWithdrawalDate onlyWhenLive  {\r\n    // Check\r\n    uint amount = calculateWithdrawalAmount(this.balance);\r\n\r\n    // Effects\r\n    withdrawalCounter = withdrawalCounter.add(1);\r\n    lastWithdrawal = now; // For tracking purposes\r\n    nextWithdrawal = nextWithdrawal + withdrawalPeriod; // Fixed period increase\r\n\r\n    // Interaction\r\n    beneficiary.transfer(amount);\r\n\r\n    Withdrawal(amount);\r\n  }\r\n\r\n  // Refunding by funder\r\n  // Only funders can refund their own funding\r\n  // Can only be sent back to the same address it was funded with\r\n  // We also remove the funder if they succesfully exit with their funds\r\n  function refund() external onlyByFunder {\r\n    // Check\r\n    uint walletBalance = this.balance;\r\n    uint amount = getRefundAmountForFunder(msg.sender);\r\n    require(amount > 0);\r\n\r\n    // Effects\r\n    removeFunder();\r\n\r\n    // Interaction\r\n    msg.sender.transfer(amount);\r\n\r\n    Refund(msg.sender, amount);\r\n\r\n    // Make sure this worked as intended\r\n    assert(this.balance == walletBalance-amount);\r\n  }\r\n\r\n  // Used when the funder wants to remove themselves as a funder\r\n  // without refunding. Their eth stays in the pool\r\n  function removeFunder() public onlyByFunder {\r\n    delete funders[msg.sender];\r\n    totalCurrentFunders = totalCurrentFunders.sub(1);\r\n  }\r\n\r\n  /*\r\n  * This is a bookkeeping function which updates the state for the funder\r\n  * when top up their funds.\r\n  */\r\n\r\n  function consolidateFunder(address funder, uint newPayment) private {\r\n    // Update contribution\r\n    funders[funder].contribution = getFunderContribution(funder);\r\n    // Update balance\r\n    funders[funder].balance = getRefundAmountForFunder(funder).add(newPayment);\r\n    // Update withdrawal entry\r\n    funders[funder].withdrawalEntry = withdrawalCounter;\r\n  }\r\n\r\n  function addTokenization(string tokenName, string tokenSymbol, uint8 tokenDecimals ) external onlyByBeneficiary {\r\n    require(!isTokenized());\r\n\r\n    tokenFactory = new MiniMeTokenFactory();\r\n    tokenContract = tokenFactory.createCloneToken(0x0, 0, tokenName, tokenDecimals, tokenSymbol, true);\r\n\r\n    tokenized = true;\r\n    canClaimTokens = true;\r\n  }\r\n\r\n  function claimTokens() external onlyByFunder onlyWhenTokenized {\r\n    require(canClaimTokens);\r\n\r\n    uint contributionAmount = getFunderContribution(msg.sender);\r\n    uint contributionClaimedAmount = getFunderContributionClaimed(msg.sender);\r\n\r\n    // Only claim tokens if they have some left to claim\r\n    uint claimAmount = contributionAmount.sub(contributionClaimedAmount);\r\n    require(claimAmount > 0);\r\n\r\n    // Claim tokens\r\n    funders[msg.sender].contributionClaimed = contributionAmount;\r\n    tokenContract.generateTokens(msg.sender, claimAmount);\r\n\r\n    TokensClaimed(msg.sender, claimAmount);\r\n  }\r\n\r\n  /*\r\n  * The beneficiary can stop/enable funders from claiming more tokens.\r\n  * This opens up opportunities for tokenizing only happening for a set periods.\r\n  */\r\n  function enableTokenClaiming(bool _enabled) external onlyWhenTokenized onlyByBeneficiary {\r\n    canClaimTokens = _enabled;\r\n  }\r\n\r\n  /* --- Sunsetting --- */\r\n  /*\r\n  * The beneficiary can decide to stop using this contract.\r\n  * They use this sunset function to put it into sunset mode.\r\n  * The beneficiary can then swipe rest of the funds after a set time\r\n  * if funders have not withdrawn their funds.\r\n  */\r\n\r\n  function sunset() external onlyByBeneficiary onlyWhenLive {\r\n    sunsetWithdrawDate = now.add(sunsetWithdrawalPeriod);\r\n    live = false;\r\n\r\n    Sunset(true);\r\n  }\r\n\r\n  function swipe(address recipient) external onlyWhenSunset onlyByBeneficiary {\r\n    require(now >= sunsetWithdrawDate);\r\n\r\n    recipient.transfer(this.balance);\r\n  }\r\n\r\n  /* --- Token Contract Forwarding Controller Functions --- */\r\n  /* \r\n  * Allows beneficiary to call two additional functions on the token contract:\r\n  * claimTokens\r\n  * enabledTransfers\r\n  * \r\n  */\r\n  function tokenContractClaimTokens(address _token) onlyByBeneficiary onlyWhenTokenized {\r\n    tokenContract.claimTokens(_token);\r\n  }\r\n  function tokenContractEnableTransfers(bool _transfersEnabled) onlyByBeneficiary onlyWhenTokenized {\r\n    tokenContract.enableTransfers(_transfersEnabled);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"sunset\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funders\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"withdrawalEntry\",\"type\":\"uint256\"},{\"name\":\"contribution\",\"type\":\"uint256\"},{\"name\":\"contributionClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunderContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startAmount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumFundingAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sunsetWithdrawalPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTotalFunders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefundAmountForFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getWithdrawalEntryForFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"tokenContractEnableTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCurrentFunders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunderBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenContractClaimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"shouldUpdateFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swipe\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeFunder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawalTimes\",\"type\":\"uint256\"}],\"name\":\"calculateRefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"addTokenization\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableTokenClaiming\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFunderContributionClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sunsetWithdrawDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"name\":\"withdrawalPeriodInit\",\"type\":\"uint256\"},{\"name\":\"withdrawalStart\",\"type\":\"uint256\"},{\"name\":\"sunsetWithdrawPeriodInit\",\"type\":\"uint256\"},{\"name\":\"minimumFundingAmountInit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hasSunset\",\"type\":\"bool\"}],\"name\":\"Sunset\",\"type\":\"event\"}]","ContractName":"StakeTreeWithTokenization","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000054c069bdc7ea8af577a57bdafccb097235bf07be0000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000059f9c3eb00000000000000000000000000000000000000000000000000000000004f1a00000000000000000000000000000000000000000000000000002386f26fc10000","Library":"","SwarmSource":"bzzr://0c8794fe697548acb1de53492b09424a2522ea0c1d55906a52eeb6be46424e48"}]}