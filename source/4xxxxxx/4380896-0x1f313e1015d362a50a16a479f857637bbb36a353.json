{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract LineOfTransfers {\r\n\r\n    address[] public accounts;\r\n    uint[] public values;\r\n    \r\n    uint public transferPointer = 0;\r\n\r\n    address public owner;\r\n\r\n    event Transfer(address to, uint amount);\r\n\r\n    modifier hasBalance(uint index) {\r\n        require(this.balance >= values[index]);\r\n        _;\r\n    }\r\n    \r\n    modifier existingIndex(uint index) {\r\n        assert(index < accounts.length);\r\n        assert(index < values.length);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function () payable public {}\r\n\r\n    function LineOfTransfers() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferTo(uint index) existingIndex(index) hasBalance(index) internal returns (bool) {\r\n        uint amount = values[index];\r\n        accounts[index].transfer(amount);\r\n\r\n        Transfer(accounts[index], amount);\r\n        return true;\r\n    }\r\n\r\n    function makeTransfer(uint times) public {\r\n        while(times > 0) {\r\n            transferTo(transferPointer);\r\n            transferPointer++;\r\n            times--;\r\n        }\r\n    }\r\n    \r\n    function getBalance() constant returns (uint balance) {\r\n        return this.balance;\r\n    }\r\n    \r\n    function addData(address[] _accounts, uint[] _values) onlyOwner {\r\n        require(_accounts.length == _values.length);\r\n        \r\n        for (uint i = 0; i < _accounts.length; i++) {\r\n            accounts.push(_accounts[i]);\r\n            values.push(_values[i]);\r\n        }\r\n    }\r\n    \r\n    \r\n    function terminate() onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"makeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"addData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LineOfTransfers","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://478e7c28d18e67881021e201eb3bc4d981d74132a55a59d3291bc850ac34595e"}]}