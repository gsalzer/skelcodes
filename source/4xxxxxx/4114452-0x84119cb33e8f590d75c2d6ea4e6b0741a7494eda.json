{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Giga Watt Token Smart Contract.  Copyright Â© 2016 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.4.1;\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n */\r\ncontract Token {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () constant returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n            owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) constant returns (uint256 balance);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens from the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n            message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  constant returns (uint256 remaining);\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n */\r\ncontract SafeMath {\r\n  uint256 constant private MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Add two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function safeAdd (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (x > MAX_UINT256 - y) throw;\r\n    return x + y;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   *\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function safeSub (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (x < y) throw;\r\n    return x - y;\r\n  }\r\n\r\n  /**\r\n   * Multiply two uint256 values, throw in case of overflow.\r\n   *\r\n   * @param x first value to multiply\r\n   * @param y second value to multiply\r\n   * @return x * y\r\n   */\r\n  function safeMul (uint256 x, uint256 y)\r\n  constant internal\r\n  returns (uint256 z) {\r\n    if (y == 0) return 0; // Prevent division by zero at the next line\r\n    if (x > MAX_UINT256 / y) throw;\r\n    return x * y;\r\n  }\r\n}\r\n\r\n/**\r\n * Abstract base contract for contracts implementing Token interface.\r\n */\r\ncontract AbstractToken is Token, SafeMath {\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () constant returns (uint256 supply) {\r\n    return tokensCount;\r\n  }\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n            owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens from the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    return doTransfer (msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success)\r\n  {\r\n    if (_value > approved [_from][msg.sender]) return false;\r\n    if (doTransfer (_from, _to, _value)) {\r\n      approved [_from][msg.sender] =\r\n        safeSub (approved[_from][msg.sender], _value);\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n            message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value) returns (bool success) {\r\n    approved [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  constant returns (uint256 remaining) {\r\n    return approved [_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Create given number of new tokens and give them to given owner.\r\n   *\r\n   * @param _owner address to given new created tokens to the owner of\r\n   * @param _value number of new tokens to create\r\n   */\r\n  function createTokens (address _owner, uint256 _value) internal {\r\n    if (_value > 0) {\r\n      accounts [_owner] = safeAdd (accounts [_owner], _value);\r\n      tokensCount = safeAdd (tokensCount, _value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform token transfer.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to to the owner of\r\n   * @param _value number of tokens to transfer\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function doTransfer (address _from, address _to, uint256 _value)\r\n  private returns (bool success) {\r\n    if (_value > accounts [_from]) return false;\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Total number of tokens in circulation.\r\n   */\r\n  uint256 tokensCount;\r\n\r\n  /**\r\n   * Maps addresses of token owners to states of their accounts.\r\n   */\r\n  mapping (address => uint256) accounts;\r\n\r\n  /**\r\n   * Maps addresses of token owners to mappings from addresses of spenders to\r\n   * how many tokens belonging to the owner, the spender is currently allowed to\r\n   * transfer.\r\n   */\r\n  mapping (address => mapping (address => uint256)) approved;\r\n}\r\n\r\n/**\r\n * Standard Token smart contract that provides the following features:\r\n * <ol>\r\n *   <li>Centralized creation of new tokens</li> \r\n *   <li>Freeze/unfreeze token transfers</li>\r\n *   <li>Change owner</li>\r\n * </ol>\r\n */\r\ncontract StandardToken is AbstractToken {\r\n  /**\r\n   * Maximum allowed tokens in circulation (2^64 - 1).\r\n   */\r\n  uint256 constant private MAX_TOKENS = 0xFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Address of the owner of the contract.\r\n   */\r\n  address owner;\r\n\r\n  /**\r\n   * Whether transfers are currently frozen.\r\n   */\r\n  bool frozen;\r\n\r\n  /**\r\n   * Instantiate the contract and make the message sender to be the owner.\r\n   */\r\n  function StandardToken () {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens from the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (frozen) return false;\r\n    else return AbstractToken.transfer (_to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n            recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (frozen) return false;\r\n    else return AbstractToken.transferFrom (_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Create certain number of new tokens and give them to the owner of the\r\n   * contract.\r\n   * \r\n   * @param _value number of new tokens to create\r\n   * @return true if tokens were created successfully, false otherwise\r\n   */\r\n  function createTokens (uint256 _value)\r\n  returns (bool success) {\r\n    if (msg.sender != owner) throw;\r\n\r\n    if (_value > MAX_TOKENS - totalSupply ()) return false;\r\n\r\n    AbstractToken.createTokens (owner, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Freeze token transfers.\r\n   */\r\n  function freezeTransfers () {\r\n    if (msg.sender != owner) throw;\r\n\r\n    if (!frozen)\r\n    {\r\n      frozen = true;\r\n      Freeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfreeze token transfers.\r\n   */\r\n  function unfreezeTransfers () {\r\n    if (msg.sender != owner) throw;\r\n\r\n    if (frozen) {\r\n      frozen = false;\r\n      Unfreeze ();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set new owner address.\r\n   *\r\n   * @param _newOwner new owner address\r\n   */\r\n  function setOwner (address _newOwner) {\r\n    if (msg.sender != owner) throw;\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * Logged when token transfers were freezed.\r\n   */\r\n  event Freeze ();\r\n\r\n  /**\r\n   * Logged when token transfers were unfreezed.\r\n   */\r\n  event Unfreeze ();\r\n}\r\n\r\n/**\r\n * Giga Watt Token Smart Contract.\r\n */\r\ncontract GigaWattToken is StandardToken {\r\n  /**\r\n   * Constructor just calls constructor of parent contract.\r\n   */\r\n  function GigaWattToken () StandardToken () {\r\n    // Do nothing\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GigaWattToken","CompilerVersion":"v0.4.6+commit.2dabbdf0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}