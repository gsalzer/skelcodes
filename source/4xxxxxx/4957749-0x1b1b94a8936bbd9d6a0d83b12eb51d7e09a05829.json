{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC20 {\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\nfunction totalSupply() external constant returns (uint);\r\n\r\nfunction balanceOf(address _owner) external constant returns (uint256);\r\n\r\nfunction transfer(address _to, uint256 _value) external returns (bool);\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\nfunction approve(address _spender, uint256 _value) external returns (bool);\r\n\r\nfunction allowance(address _owner, address _spender) external constant returns (uint256);\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /*\r\n        @return sum of a and b\r\n    */\r\n    function ADD (uint256 a, uint256 b) pure internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /*\r\n        @return difference of a and b\r\n    */\r\n    function SUB (uint256 a, uint256 b) pure internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n    \r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address owner;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n        OwnershipTransferred (address(0), owner);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n        notZeroAddress(_newOwner)\r\n    {\r\n        owner = _newOwner;\r\n        OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    //Only owner can call function\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, Ownable{\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    //Total amount of TheWolfCoin\r\n    uint256 _totalSupply = 5000000000; \r\n\r\n    //Balances for each account\r\n    mapping (address => uint256)  balances;\r\n    //Owner of the account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //Notifies users about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n\r\n    //return _totalSupply of the Token\r\n    function totalSupply() external constant returns (uint256 totalTokenSupply) {\r\n        totalTokenSupply = _totalSupply;\r\n    }\r\n\r\n    //What is the balance of a particular account?\r\n    function balanceOf(address _owner)\r\n        external\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    //Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount)\r\n        external\r\n        notZeroAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        //Require allowance to be not too big\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        balances[_from] = balances[_from].SUB(_amount);\r\n        balances[_to] = balances[_to].ADD(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)\r\n        external\r\n        notZeroAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    //Return how many tokens left that you can spend from\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\r\n        require(increased <= balances[msg.sender]);\r\n        //Cannot approve more coins then you have\r\n        allowed[msg.sender][_spender] = increased;\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) external returns (bool success) {\r\n        //Subtract from the sender\r\n        balances[msg.sender] = balances[msg.sender].SUB(_value);\r\n        //Update _totalSupply\r\n        _totalSupply = _totalSupply.SUB(_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract TheWolfCoin is StandardToken {\r\n\r\n    function ()\r\n   \tpublic\r\n    {\r\n    //if ether is sent to this address, send it back.\r\n    revert();\r\n    }\r\n\r\n    //Name of the token\r\n    string public constant name = \"TheWolfCoin\";\r\n    //Symbol of WolfCoin\r\n    string public constant symbol = \"TWC\";\r\n    //Number of decimals of WolfCoin\r\n    uint8 public constant decimals = 2;\r\n\r\n    //Funder Wolfpack Token Allocation\r\n\t//The first wolf is the creator of the contract\r\n\r\n    //2nd Wolf wallet\r\n    address public constant WOLF2 = 0xDB9504AC2E451f8dbB8990564e44B83B7be29045;\r\n    //3rd Wolf wallet\r\n    address public constant WOLF3 = 0xe623bED2b3A4cE7ba286737C8A03Ae0b27e01d8A;\r\n    //4th Wolf wallet\r\n    address public constant WOLF4 = 0x7bB34Edb32024C7Ce01a1c2C9A02bf9d3B5BdEf1;\r\n\r\n    //wolf2 wallet balance\r\n    uint256 public wolf2Balance;\r\n    //wolf3 wallet balance\r\n    uint256 public wolf3Balance;\r\n    //wolf4 wallet balance\r\n    uint256 public wolf4Balance;\r\n\r\n    //25%\r\n    uint256 private constant WOLF1_THOUSANDTH = 250;\r\n    //25%\r\n    uint256 private constant WOLF2_THOUSANDTH = 250;\r\n    //25%\r\n    uint256 private constant WOLF3_THOUSANDTH = 250;\r\n    //25%\r\n    uint256 private constant WOLF4_THOUSANDTH = 250;\r\n    //100%\r\n    uint256 private constant DENOMINATOR = 1000;\r\n\r\n    function TheWolfCoin() public {\r\n        //25% of _totalSupply\r\n        balances[msg.sender] = _totalSupply * WOLF1_THOUSANDTH / DENOMINATOR;\r\n        //25% of _totalSupply\r\n        wolf2Balance = _totalSupply * WOLF2_THOUSANDTH / DENOMINATOR;\r\n        //25%% of _totalSupply\r\n        wolf3Balance = _totalSupply * WOLF3_THOUSANDTH / DENOMINATOR;\r\n        //25%% of _totalSupply\r\n        wolf4Balance = _totalSupply * WOLF4_THOUSANDTH / DENOMINATOR;\r\n\r\n        Transfer (this, msg.sender, balances[msg.sender]);\r\n\r\n        balances[WOLF2] = wolf2Balance;\r\n        Transfer (this, WOLF2, balances[WOLF2]);\r\n\r\n        balances[WOLF3] = wolf3Balance;\r\n        Transfer (this, WOLF3, balances[WOLF3]);\r\n\r\n        balances[WOLF4] = wolf4Balance;\r\n        Transfer (this, WOLF4, balances[WOLF4]);\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WOLF2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wolf4Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wolf2Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WOLF4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WOLF3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wolf3Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TheWolfCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9defca00a0e307107d8c8d542955dc1d35d5266b9b3d8c25bdef4a051294ffb5"}]}