{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Postman {\r\n    struct data{address home; uint256 value; uint256 reward;bool delivered;}\r\n    address private owner;\r\n    uint public fee;\r\n    uint public fee2;\r\n    uint256 private balance;\r\n    data[] private que;\r\n    uint[] private undelivered;\r\n    event Report(string message,uint index);\r\n    function Postman(){owner = msg.sender;fee = 2;fee2=50;balance=0;}\r\n    function()payable{revert();}\r\n    function draw(){if(balance > 0){owner.transfer(balance);balance-=balance;}}\r\n    function mails_to_deliver()constant returns(uint[]){return undelivered;}\r\n    function get_mail(uint index)constant returns(uint256){return que[index].reward;}\r\n    function update_fee(uint new_fee,uint new_fee2){if(msg.sender != owner){revert();}fee = new_fee;fee2 =new_fee2;}\r\n    function post (address x,uint percent) payable \r\n        {\r\n            if(msg.value <= 0 || percent < 1 || percent > 1000 )revert();\r\n            balance += (msg.value * fee)/100;\r\n            que.push(data({delivered:false,home:x,reward:((msg.value - (msg.value * fee)/100) * percent)/1000,value: msg.value - (msg.value * fee)/100 - (((msg.value - (msg.value * fee)/100) * percent)/1000)}));\r\n            undelivered.push(1);\r\n        } \r\n    function deliver(uint index,uint direct)\r\n        {\r\n            if(undelivered[index] == 0)revert();\r\n            W w = new W();\r\n            w.boom.value(que[index].value)(que[index].home);\r\n            if((que[index].reward * 2) > msg.gas && direct == 1){this.post.value(que[index].reward)(msg.sender,fee2);}\r\n            else{msg.sender.transfer(que[index].reward);}\r\n            Report(\"Message Delivered:\",index);\r\n            delete undelivered[index];\r\n            delete que[index];\r\n        }\r\n}\r\n\r\ncontract W{function W(){}function boom(address x)payable{selfdestruct(x);}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_mail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_fee\",\"type\":\"uint256\"},{\"name\":\"new_fee2\",\"type\":\"uint256\"}],\"name\":\"update_fee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"direct\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mails_to_deliver\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Report\",\"type\":\"event\"}]","ContractName":"Postman","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3bf950b058f58fb4e9b1958dbd89bcea2aff9449cfed53ec18b348f95521fa1b"}]}