{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n    \r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n    \r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // write\r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public returns(ResultCode);\r\n    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);\r\n    function updateIndexOfArrayType(ArrayType _type, uint64 _id, uint _index, uint8 _value) onlyModerators public returns(uint);\r\n    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);\r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);\r\n    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;\r\n    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);\r\n    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);\r\n    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);\r\n    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);\r\n    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ncontract EtheremonGateway is EtheremonEnum, BasicAccessControl {\r\n    // using for battle contract later\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    \r\n    // read \r\n    function isGason(uint64 _objId) constant external returns(bool);\r\n    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \r\n        uint ancestorLength, uint xfactorsLength);\r\n    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint);\r\n    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32);\r\n}\r\n\r\ncontract EtheremonWorld is EtheremonGateway, SafeMath {\r\n    // old processor\r\n    address constant public ETHEREMON_PROCESSOR = address(0x8a60806F05876f4d6dB00c877B0558DbCAD30682);\r\n    uint8 constant public STAT_COUNT = 6;\r\n    uint8 constant public STAT_MAX = 32;\r\n    uint8 constant public GEN0_NO = 24;\r\n    \r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    // Gen0 has return price & no longer can be caught when this contract is deployed\r\n    struct Gen0Config {\r\n        uint32 classId;\r\n        uint256 originalPrice;\r\n        uint256 returnPrice;\r\n        uint32 total; // total caught (not count those from eggs)\r\n    }\r\n    \r\n    struct GenXProperty {\r\n        uint32 classId;\r\n        bool isGason;\r\n        uint32[] ancestors;\r\n        uint32[] xfactors;\r\n    }\r\n    \r\n    mapping(uint32 => Gen0Config) public gen0Config;\r\n    mapping(uint32 => GenXProperty) public genxProperty;\r\n    uint256 public totalCashout = 0; // for admin\r\n    uint256 public totalEarn = 0; // exclude gen 0\r\n    uint16 public priceIncreasingRatio = 1000;\r\n    uint public maxDexSize = 500;\r\n    \r\n    address private lastHunter = address(0x0);\r\n\r\n    // data contract\r\n    address public dataContract;\r\n    \r\n    // event\r\n    event EventCatchMonster(address indexed trainer, uint64 objId);\r\n    event EventCashOut(address indexed trainer, ResultCode result, uint256 amount);\r\n    event EventWithdrawEther(address indexed sendTo, ResultCode result, uint256 amount);\r\n    \r\n    function EtheremonWorld(address _dataContract) public {\r\n        dataContract = _dataContract;\r\n    }\r\n    \r\n     // admin & moderators\r\n    function setMaxDexSize(uint _value) onlyModerators external {\r\n        maxDexSize = _value;\r\n    }\r\n    \r\n    function setOriginalPriceGen0() onlyModerators external {\r\n        gen0Config[1] = Gen0Config(1, 0.3 ether, 0.003 ether, 374);\r\n        gen0Config[2] = Gen0Config(2, 0.3 ether, 0.003 ether, 408);\r\n        gen0Config[3] = Gen0Config(3, 0.3 ether, 0.003 ether, 373);\r\n        gen0Config[4] = Gen0Config(4, 0.2 ether, 0.002 ether, 437);\r\n        gen0Config[5] = Gen0Config(5, 0.1 ether, 0.001 ether, 497);\r\n        gen0Config[6] = Gen0Config(6, 0.3 ether, 0.003 ether, 380); \r\n        gen0Config[7] = Gen0Config(7, 0.2 ether, 0.002 ether, 345);\r\n        gen0Config[8] = Gen0Config(8, 0.1 ether, 0.001 ether, 518); \r\n        gen0Config[9] = Gen0Config(9, 0.1 ether, 0.001 ether, 447);\r\n        gen0Config[10] = Gen0Config(10, 0.2 ether, 0.002 ether, 380); \r\n        gen0Config[11] = Gen0Config(11, 0.2 ether, 0.002 ether, 354);\r\n        gen0Config[12] = Gen0Config(12, 0.2 ether, 0.002 ether, 346);\r\n        gen0Config[13] = Gen0Config(13, 0.2 ether, 0.002 ether, 351); \r\n        gen0Config[14] = Gen0Config(14, 0.2 ether, 0.002 ether, 338);\r\n        gen0Config[15] = Gen0Config(15, 0.2 ether, 0.002 ether, 341);\r\n        gen0Config[16] = Gen0Config(16, 0.35 ether, 0.0035 ether, 384);\r\n        gen0Config[17] = Gen0Config(17, 0.1 ether, 0.001 ether, 305); \r\n        gen0Config[18] = Gen0Config(18, 0.1 ether, 0.001 ether, 427);\r\n        gen0Config[19] = Gen0Config(19, 0.1 ether, 0.001 ether, 304);\r\n        gen0Config[20] = Gen0Config(20, 0.4 ether, 0.005 ether, 82);\r\n        gen0Config[21] = Gen0Config(21, 1, 1, 123);\r\n        gen0Config[22] = Gen0Config(22, 0.2 ether, 0.001 ether, 468);\r\n        gen0Config[23] = Gen0Config(23, 0.5 ether, 0.0025 ether, 302);\r\n        gen0Config[24] = Gen0Config(24, 1 ether, 0.005 ether, 195);\r\n    }\r\n\r\n    function getEarningAmount() constant public returns(uint256) {\r\n        // calculate value for gen0\r\n        uint256 totalValidAmount = 0;\r\n        for (uint32 classId=1; classId <= GEN0_NO; classId++) {\r\n            // make sure there is a class\r\n            Gen0Config storage gen0 = gen0Config[classId];\r\n            if (gen0.total >0 && gen0.classId == classId && gen0.originalPrice > 0 && gen0.returnPrice > 0) {\r\n                uint256 rate = gen0.originalPrice/gen0.returnPrice;\r\n                if (rate < gen0.total) {\r\n                    totalValidAmount += (gen0.originalPrice + gen0.returnPrice) * rate / 2;\r\n                    totalValidAmount += (gen0.total - rate) * gen0.returnPrice;\r\n                } else {\r\n                    totalValidAmount += (gen0.originalPrice + gen0.returnPrice * (rate - gen0.total + 1)) / 2 * gen0.total;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // add in earn from genx\r\n        totalValidAmount = safeAdd(totalValidAmount, totalEarn);\r\n        // deduct amount of cashing out \r\n        totalValidAmount = safeSubtract(totalValidAmount, totalCashout);\r\n        \r\n        return totalValidAmount;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators external returns(ResultCode) {\r\n        if (_amount > this.balance) {\r\n            EventWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\r\n            return ResultCode.ERROR_INVALID_AMOUNT;\r\n        }\r\n        \r\n        uint256 totalValidAmount = getEarningAmount();\r\n        if (_amount > totalValidAmount) {\r\n            EventWithdrawEther(_sendTo, ResultCode.ERROR_INVALID_AMOUNT, 0);\r\n            return ResultCode.ERROR_INVALID_AMOUNT;\r\n        }\r\n        \r\n        _sendTo.transfer(_amount);\r\n        totalCashout += _amount;\r\n        EventWithdrawEther(_sendTo, ResultCode.SUCCESS, _amount);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n\r\n    // convenient tool to add monster\r\n    function addMonsterClassBasic(uint32 _classId, uint8 _type, uint256 _price, uint256 _returnPrice,\r\n        uint8 _ss1, uint8 _ss2, uint8 _ss3, uint8 _ss4, uint8 _ss5, uint8 _ss6) onlyModerators external {\r\n        \r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        // can add only one time\r\n        if (_classId == 0 || class.classId == _classId)\r\n            revert();\r\n\r\n        data.setMonsterClass(_classId, _price, _returnPrice, true);\r\n        data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type);\r\n        \r\n        // add stat step\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss1);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss2);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss3);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss4);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss5);\r\n        data.addElementToArrayType(ArrayType.STAT_START, uint64(_classId), _ss6);\r\n        \r\n    }\r\n    \r\n    function addMonsterClassExtend(uint32 _classId, uint8 _type2, uint8 _type3, \r\n        uint8 _st1, uint8 _st2, uint8 _st3, uint8 _st4, uint8 _st5, uint8 _st6 ) onlyModerators external {\r\n\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        if (_classId == 0 || data.getSizeArrayType(ArrayType.STAT_STEP, uint64(_classId)) > 0)\r\n            revert();\r\n\r\n        if (_type2 > 0) {\r\n            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type2);\r\n        }\r\n        if (_type3 > 0) {\r\n            data.addElementToArrayType(ArrayType.CLASS_TYPE, uint64(_classId), _type3);\r\n        }\r\n        \r\n        // add stat base\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st1);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st2);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st3);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st4);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st5);\r\n        data.addElementToArrayType(ArrayType.STAT_STEP, uint64(_classId), _st6);\r\n    }\r\n    \r\n    function setCatchable(uint32 _classId, bool catchable) onlyModerators external {\r\n        // can not edit gen 0 - can not catch forever\r\n        Gen0Config storage gen0 = gen0Config[_classId];\r\n        if (gen0.classId == _classId)\r\n            revert();\r\n        \r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        data.setMonsterClass(class.classId, class.price, class.returnPrice, catchable);\r\n    }\r\n    \r\n    function setPriceIncreasingRatio(uint16 _ratio) onlyModerators external {\r\n        priceIncreasingRatio = _ratio;\r\n    }\r\n    \r\n    function setGason(uint32 _classId, bool _isGason) onlyModerators external {\r\n        GenXProperty storage pro = genxProperty[_classId];\r\n        pro.isGason = _isGason;\r\n    }\r\n    \r\n    function addClassProperty(uint32 _classId, PropertyType _type, uint32 value) onlyModerators external {\r\n        GenXProperty storage pro = genxProperty[_classId];\r\n        pro.classId = _classId;\r\n        if (_type == PropertyType.ANCESTOR) {\r\n            pro.ancestors.push(value);\r\n        } else {\r\n            pro.xfactors.push(value);\r\n        }\r\n    }\r\n    \r\n    // gate way \r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.increaseMonsterExp(_objId, amount);\r\n    }\r\n    \r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.decreaseMonsterExp(_objId, amount);\r\n    }\r\n    \r\n    // helper\r\n    function getRandom(uint8 maxRan, uint8 index, address priAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(priAddress);\r\n        for (uint8 i = 0; i < index && i < 6; i ++) {\r\n            genNum /= 256;\r\n        }\r\n        return uint8(genNum % maxRan);\r\n    }\r\n    \r\n    function () payable public {\r\n        if (msg.sender != ETHEREMON_PROCESSOR)\r\n            revert();\r\n    }\r\n    \r\n    // public\r\n    \r\n    function isGason(uint64 _objId) constant external returns(bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        GenXProperty storage pro = genxProperty[obj.classId];\r\n        return pro.isGason;\r\n    }\r\n    \r\n    function getObjIndex(uint64 _objId) constant public returns(uint32 classId, uint32 createIndex, uint32 lastClaimIndex) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        return (obj.classId, obj.createIndex, obj.lastClaimIndex);\r\n    }\r\n    \r\n    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \r\n        uint ancestorLength, uint xfactorsLength) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        GenXProperty storage pro = genxProperty[obj.classId];\r\n        return (obj.classId, obj.exp, pro.isGason, pro.ancestors.length, pro.xfactors.length);\r\n    }\r\n    \r\n    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint) {\r\n        if (_type == PropertyType.ANCESTOR) \r\n            return genxProperty[_classId].ancestors.length;\r\n        else\r\n            return genxProperty[_classId].xfactors.length;\r\n    }\r\n    \r\n    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32) {\r\n        if (_type == PropertyType.ANCESTOR)\r\n            return genxProperty[_classId].ancestors[index];\r\n        else\r\n            return genxProperty[_classId].xfactors[index];\r\n    }\r\n    \r\n    // only gen 0\r\n    function getGen0COnfig(uint32 _classId) constant public returns(uint32, uint256, uint32) {\r\n        Gen0Config storage gen0 = gen0Config[_classId];\r\n        return (gen0.classId, gen0.originalPrice, gen0.total);\r\n    }\r\n    \r\n    // only gen 0\r\n    function getReturnFromMonster(uint64 _objId) constant public returns(uint256 current, uint256 total) {\r\n        /*\r\n        1. Gen 0 can not be caught anymore.\r\n        2. Egg will not give return.\r\n        */\r\n        \r\n        uint32 classId = 0;\r\n        uint32 createIndex = 0;\r\n        uint32 lastClaimIndex = 0;\r\n        (classId, createIndex, lastClaimIndex) = getObjIndex(_objId);\r\n        Gen0Config storage gen0 = gen0Config[classId];\r\n        if (gen0.classId != classId) {\r\n            return (0, 0);\r\n        }\r\n        \r\n        uint32 currentGap = 0;\r\n        uint32 totalGap = 0;\r\n        if (lastClaimIndex < gen0.total)\r\n            currentGap = gen0.total - lastClaimIndex;\r\n        if (createIndex < gen0.total)\r\n            totalGap = gen0.total - createIndex;\r\n        return (safeMult(currentGap, gen0.returnPrice), safeMult(totalGap, gen0.returnPrice));\r\n    }\r\n    \r\n    // write access\r\n    \r\n    function moveDataContractBalanceToWorld() external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        data.withdrawEther(address(this), data.balance);\r\n    }\r\n    \r\n    function renameMonster(uint64 _objId, string name) isActive external {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        if (obj.monsterId != _objId || obj.trainer != msg.sender) {\r\n            revert();\r\n        }\r\n        data.setMonsterObj(_objId, name, obj.exp, obj.createIndex, obj.lastClaimIndex);\r\n    }\r\n    \r\n    function catchMonster(uint32 _classId, string _name) isActive external payable {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        \r\n        if (class.classId == 0 || class.catchable == false) {\r\n            revert();\r\n        }\r\n        \r\n        // can not keep too much etheremon \r\n        if (data.getMonsterDexSize(msg.sender) > maxDexSize)\r\n            revert();\r\n        \r\n        uint256 totalBalance = safeAdd(msg.value, data.getExtraBalance(msg.sender));\r\n        uint256 payPrice = class.price;\r\n        // increase price for each etheremon created\r\n        if (class.total > 0)\r\n            payPrice += class.price*(class.total-1)/priceIncreasingRatio;\r\n        if (payPrice > totalBalance) {\r\n            revert();\r\n        }\r\n        totalEarn += payPrice;\r\n        \r\n        // deduct the balance\r\n        data.setExtraBalance(msg.sender, safeSubtract(totalBalance, payPrice));\r\n        \r\n        // add monster\r\n        uint64 objId = data.addMonsterObj(_classId, msg.sender, _name);\r\n        // generate base stat for the previous one\r\n        for (uint i=0; i < STAT_COUNT; i+= 1) {\r\n            uint8 value = getRandom(STAT_MAX, uint8(i), lastHunter) + data.getElementInArrayType(ArrayType.STAT_START, uint64(_classId), i);\r\n            data.addElementToArrayType(ArrayType.STAT_BASE, objId, value);\r\n        }\r\n        \r\n        lastHunter = msg.sender;\r\n        EventCatchMonster(msg.sender, objId);\r\n    }\r\n\r\n\r\n    function cashOut(uint256 _amount) public returns(ResultCode) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        \r\n        uint256 totalAmount = data.getExtraBalance(msg.sender);\r\n        uint64 objId = 0;\r\n\r\n        // collect gen 0 return price \r\n        uint dexSize = data.getMonsterDexSize(msg.sender);\r\n        for (uint i = 0; i < dexSize; i++) {\r\n            objId = data.getMonsterObjId(msg.sender, i);\r\n            if (objId > 0) {\r\n                MonsterObjAcc memory obj;\r\n                (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(objId);\r\n                Gen0Config storage gen0 = gen0Config[obj.classId];\r\n                if (gen0.classId == obj.classId) {\r\n                    if (obj.lastClaimIndex < gen0.total) {\r\n                        uint32 gap = uint32(safeSubtract(gen0.total, obj.lastClaimIndex));\r\n                        if (gap > 0) {\r\n                            totalAmount += safeMult(gap, gen0.returnPrice);\r\n                            // reset total (except name is cleared :( )\r\n                            data.setMonsterObj(obj.monsterId, \" name me \", obj.exp, obj.createIndex, gen0.total);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // default to cash out all\r\n        if (_amount == 0) {\r\n            _amount = totalAmount;\r\n        }\r\n        if (_amount > totalAmount) {\r\n            revert();\r\n        }\r\n        \r\n        // check contract has enough money\r\n        if (this.balance + data.balance < _amount){\r\n            revert();\r\n        } else if (this.balance < _amount) {\r\n            data.withdrawEther(address(this), data.balance);\r\n        }\r\n        \r\n        if (_amount > 0) {\r\n            data.setExtraBalance(msg.sender, totalAmount - _amount);\r\n            if (!msg.sender.send(_amount)) {\r\n                data.setExtraBalance(msg.sender, totalAmount);\r\n                EventCashOut(msg.sender, ResultCode.ERROR_SEND_FAIL, 0);\r\n                return ResultCode.ERROR_SEND_FAIL;\r\n            }\r\n        }\r\n        \r\n        EventCashOut(msg.sender, ResultCode.SUCCESS, _amount);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n    \r\n    // read access\r\n    \r\n    function getTrainerEarn(address _trainer) constant public returns(uint256) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        uint256 returnFromMonster = 0;\r\n        // collect gen 0 return price \r\n        uint256 gen0current = 0;\r\n        uint256 gen0total = 0;\r\n        uint64 objId = 0;\r\n        uint dexSize = data.getMonsterDexSize(_trainer);\r\n        for (uint i = 0; i < dexSize; i++) {\r\n            objId = data.getMonsterObjId(_trainer, i);\r\n            if (objId > 0) {\r\n                (gen0current, gen0total) = getReturnFromMonster(objId);\r\n                returnFromMonster += gen0current;\r\n            }\r\n        }\r\n        return returnFromMonster;\r\n    }\r\n    \r\n    function getTrainerBalance(address _trainer) constant external returns(uint256) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        \r\n        uint256 userExtraBalance = data.getExtraBalance(_trainer);\r\n        uint256 returnFromMonster = getTrainerEarn(_trainer);\r\n\r\n        return (userExtraBalance + returnFromMonster);\r\n    }\r\n    \r\n    function getMonsterClassBasic(uint32 _classId) constant external returns(uint256, uint256, uint256, bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterClassAcc memory class;\r\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\r\n        return (class.price, class.returnPrice, class.total, class.catchable);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getObjBattleInfo\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"exp\",\"type\":\"uint32\"},{\"name\":\"isGason\",\"type\":\"bool\"},{\"name\":\"ancestorLength\",\"type\":\"uint256\"},{\"name\":\"xfactorsLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"addClassProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxDexSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"gen0Config\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"name\":\"returnPrice\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDexSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_returnPrice\",\"type\":\"uint256\"},{\"name\":\"_ss1\",\"type\":\"uint8\"},{\"name\":\"_ss2\",\"type\":\"uint8\"},{\"name\":\"_ss3\",\"type\":\"uint8\"},{\"name\":\"_ss4\",\"type\":\"uint8\"},{\"name\":\"_ss5\",\"type\":\"uint8\"},{\"name\":\"_ss6\",\"type\":\"uint8\"}],\"name\":\"addMonsterClassBasic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getObjIndex\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"createIndex\",\"type\":\"uint32\"},{\"name\":\"lastClaimIndex\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"decreaseMonsterExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRan\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint8\"},{\"name\":\"priAddress\",\"type\":\"address\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getReturnFromMonster\",\"outputs\":[{\"name\":\"current\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"increaseMonsterExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint16\"}],\"name\":\"setPriceIncreasingRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEarningAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClassPropertyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cashOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOriginalPriceGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"catchMonster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_NO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCashout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getClassPropertySize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"catchable\",\"type\":\"bool\"}],\"name\":\"setCatchable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"renameMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getMonsterClassBasic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"genxProperty\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"isGason\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getTrainerEarn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_type2\",\"type\":\"uint8\"},{\"name\":\"_type3\",\"type\":\"uint8\"},{\"name\":\"_st1\",\"type\":\"uint8\"},{\"name\":\"_st2\",\"type\":\"uint8\"},{\"name\":\"_st3\",\"type\":\"uint8\"},{\"name\":\"_st4\",\"type\":\"uint8\"},{\"name\":\"_st5\",\"type\":\"uint8\"},{\"name\":\"_st6\",\"type\":\"uint8\"}],\"name\":\"addMonsterClassExtend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moveDataContractBalanceToWorld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceIncreasingRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHEREMON_PROCESSOR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_isGason\",\"type\":\"bool\"}],\"name\":\"setGason\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getGen0COnfig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getTrainerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"isGason\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objId\",\"type\":\"uint64\"}],\"name\":\"EventCatchMonster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventWithdrawEther\",\"type\":\"event\"}]","ContractName":"EtheremonWorld","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e","Library":"","SwarmSource":"bzzr://de2c7d2b7c4c2667b06cd2cb9244d23d79668bf26275594b81a2a7437b49f241"}]}