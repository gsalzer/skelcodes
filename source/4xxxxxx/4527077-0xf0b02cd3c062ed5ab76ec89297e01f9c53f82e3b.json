{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.7;\r\n\r\ncontract bet_various_v2{\r\n    enum State { Started, Locked }\r\n  State public state = State.Started;\r\n  struct Guess{\r\n    address addr;\r\n    uint    guess;\r\n  }\r\n  uint arraysize=1000;\r\n  uint constant maxguess=1000000;\r\n  uint bettingprice = 0.01 ether;\r\n  uint statusprice = 0.01 ether;\r\n  Guess[1000] guesses;\r\n  uint    numguesses = 0;\r\n  bytes32 curhash = '';\r\n  \r\n  uint stasticsarrayitems = 20;\r\n  uint[20] statistics;\r\n\r\n  uint _gameindex = 1;\r\n  \r\n  struct Winner{\r\n    address addr;\r\n  }\r\n  Winner[1000] winnners;\r\n  uint    numwinners = 0;\r\n\r\n  modifier inState(State _state) {\r\n      require(state == _state);\r\n      _;\r\n  }\r\n \r\n  address developer = 0x0;\r\n  event SentPrizeToWinner(address winner, uint money, uint guess, uint gameindex, uint lotterynumber, uint timestamp);\r\n  event SentDeveloperFee(uint amount, uint balance);\r\n\r\n  function bet_various_v2() \r\n  {\r\n    if(developer==address(0)){\r\n      developer = msg.sender;\r\n    }\r\n  }\r\n\r\n  function setBettingCondition(uint _contenders, uint _bettingprice)\r\n  {\r\n    if(msg.sender != developer)\r\n      return;\r\n  \tarraysize  = _contenders;\r\n  \tif(arraysize>1000)\r\n  \t  arraysize = 1000;\r\n  \tbettingprice = _bettingprice;\r\n  }\r\n  \r\n  function getMaxContenders() constant returns(uint){\r\n  \treturn arraysize;\r\n  }\r\n\r\n  function getBettingPrice() constant returns(uint){\r\n  \treturn bettingprice;\r\n  }\r\n    \r\n  function findWinners(uint value) returns (uint)\r\n  {\r\n    numwinners = 0;\r\n    uint lastdiff = maxguess;\r\n    uint i = 0;\r\n    int diff = 0;\r\n    uint guess = 0;\r\n    for (i = 0; i < numguesses; i++) {\r\n      diff = (int)((int)(value)-(int)(guesses[i].guess));\r\n      if(diff<0)\r\n        diff = diff*-1;\r\n      if(lastdiff>(uint)(diff)){\r\n        guess = guesses[i].guess;\r\n        lastdiff = (uint)(diff);\r\n      }\r\n    }\r\n    \r\n    for (i = 0; i < numguesses; i++) {\r\n      diff = (int)((int)(value)-(int)(guesses[i].guess));\r\n      if(diff<0)\r\n        diff = diff*-1;\r\n      if(lastdiff==uint(diff)){\r\n        winnners[numwinners++].addr = guesses[i].addr;\r\n      }\r\n    }\r\n    return guess;\r\n  }\r\n  \r\n  function getDeveloperAddress() constant returns(address)\r\n  {\r\n    return developer;\r\n  }\r\n  \r\n  function getDeveloperFee() constant returns(uint)\r\n  {\r\n    uint developerfee = this.balance/100;\r\n    return developerfee;\r\n  }\r\n  \r\n  function getBalance() constant returns(uint)\r\n  {\r\n     return this.balance;\r\n  }\r\n  \r\n  function getLotteryMoney() constant returns(uint)\r\n  {\r\n    uint developerfee = getDeveloperFee();\r\n    uint prize = (this.balance - developerfee)/(numwinners<1?1:numwinners);\r\n    return prize;\r\n  }\r\n\r\n  function getBettingStastics() \r\n    payable\r\n    returns(uint[20])\r\n  {\r\n    require(msg.value == statusprice); // 0.01 eth\r\n    return statistics;\r\n  }\r\n  \r\n  function getBettingStatus()\r\n    constant\r\n    returns (uint, uint, uint, uint, uint)\r\n  {\r\n    return ((uint)(state), numguesses, getLotteryMoney(), this.balance, bettingprice);\r\n  }\r\n  \r\n  function setStatusPrice(uint value)\r\n  {\r\n      if(msg.sender != developer)\r\n        return;\r\n      statusprice = value;\r\n  }\r\n  function finish()\r\n  {\r\n    if(msg.sender != developer)\r\n      return;\r\n    _finish();\r\n  }\r\n  \r\n  function _finish() private\r\n  {\r\n    state = State.Locked;\r\n\r\n    uint lotterynumber = (uint(curhash)+block.timestamp)%(maxguess+1);\r\n    // now that we know the random number was safely generate, let's do something with the random number..\r\n    var guess = findWinners(lotterynumber);\r\n    uint prize = getLotteryMoney();\r\n    uint remain = this.balance - (prize*numwinners);\r\n    for (uint i = 0; i < numwinners; i++) {\r\n      address winner = winnners[i].addr;\r\n      winner.transfer(prize);\r\n      SentPrizeToWinner(winner, prize, guess, _gameindex, lotterynumber, block.timestamp);\r\n    }\r\n    // give delveoper the money left behind\r\n    SentDeveloperFee(remain, this.balance);\r\n    developer.transfer(remain); \r\n    \r\n    numguesses = 0;\r\n    for (i = 0; i < stasticsarrayitems; i++) {\r\n      statistics[i] = 0;\r\n    }\r\n    _gameindex++;\r\n    state = State.Started;\r\n  }\r\n\r\n  function addguess(uint guess) \r\n    inState(State.Started)\r\n    payable\r\n  {\r\n    require(msg.value == bettingprice);\r\n    \r\n    uint divideby = maxguess/stasticsarrayitems;\r\n    curhash = sha256(block.timestamp, block.coinbase, block.difficulty, curhash);\r\n    if((uint)(numguesses+1)<=arraysize) {\r\n      guesses[numguesses++] = Guess(msg.sender, guess);\r\n      uint statindex = guess / divideby;\r\n      if(statindex>=stasticsarrayitems) statindex = stasticsarrayitems-1;\r\n      statistics[statindex] ++;\r\n      if((uint)(numguesses)>=arraysize){\r\n        _finish();\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBettingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxContenders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBettingStastics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[20]\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBettingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contenders\",\"type\":\"uint256\"},{\"name\":\"_bettingprice\",\"type\":\"uint256\"}],\"name\":\"setBettingCondition\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"uint256\"}],\"name\":\"addguess\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStatusPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guess\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameindex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotterynumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SentPrizeToWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SentDeveloperFee\",\"type\":\"event\"}]","ContractName":"bet_various_v2","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://279340ff11bd95a6290bdc6e3a53381279e3cd32dad0750a2fa9b9e7b7bb69ca"}]}