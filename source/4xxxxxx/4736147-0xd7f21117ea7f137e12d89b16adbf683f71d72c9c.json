{"status":"1","message":"OK","result":[{"SourceCode":"/* Author: Victor Mezrin  victor@mezrin.com */\r\n\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMathInterface\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMathInterface {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256);\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256);\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256);\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath is SafeMathInterface {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CommonModifiersInterface\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool);\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the _targetAddress is a contract.\r\n   */\r\n  modifier onlyContractAddress(address _targetAddress) {\r\n    require(isContract(_targetAddress) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CommonModifiers\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiers is CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool) {\r\n    require (_targetAddress != address(0x0));\r\n\r\n    uint256 length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_targetAddress)\r\n    }\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetIDInterface\r\n * @dev Interface of a contract that assigned to an asset (JNT, jUSD etc.)\r\n * @dev Contracts for the same asset (like JNT, jUSD etc.) will have the same AssetID.\r\n * @dev This will help to avoid misconfiguration of contracts\r\n */\r\ncontract AssetIDInterface {\r\n  function getAssetID() public constant returns (string);\r\n  function getAssetIDHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title AssetID\r\n * @dev Base contract implementing AssetIDInterface\r\n */\r\ncontract AssetID is AssetIDInterface {\r\n\r\n  /* Storage */\r\n\r\n  string assetID;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  function AssetID(string _assetID) public {\r\n    require(bytes(_assetID).length > 0);\r\n\r\n    assetID = _assetID;\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  function getAssetID() public constant returns (string) {\r\n    return assetID;\r\n  }\r\n\r\n  function getAssetIDHash() public constant returns (bytes32) {\r\n    return keccak256(assetID);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title OwnableInterface\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableInterface {\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the current owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == getOwner());\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is OwnableInterface {\r\n\r\n  /* Storage */\r\n\r\n  address owner = address(0x0);\r\n  address proposedOwner = address(0x0);\r\n\r\n\r\n  /* Events */\r\n\r\n  event OwnerAssignedEvent(address indexed newowner);\r\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the initial `owner` to the passed account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n\r\n    OwnerAssignedEvent(owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner requests transfer ownership to the new owner.\r\n   * @param _proposedOwner The address to transfer ownership to.\r\n   */\r\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\r\n    require (proposedOwner == address(0x0));\r\n    require (_proposedOwner != address(0x0));\r\n    require (_proposedOwner != address(this));\r\n\r\n    proposedOwner = _proposedOwner;\r\n\r\n    OwnershipOfferCreatedEvent(owner, _proposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the new owner to accept an ownership offer to contract control.\r\n   */\r\n  //noinspection UnprotectedFunction\r\n  function acceptOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == proposedOwner);\r\n\r\n    address _oldOwner = owner;\r\n    owner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    OwnerAssignedEvent(owner);\r\n    OwnershipOfferAcceptedEvent(_oldOwner, owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner cancels transfer ownership to the new owner.\r\n   */\r\n  function cancelOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == owner || msg.sender == proposedOwner);\r\n\r\n    address _oldProposedOwner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"proposedOwner\" contract variable\r\n   */\r\n  function getProposedOwner() public constant returns (address) {\r\n    return proposedOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ManageableInterface\r\n * @dev Contract that allows to grant permissions to any address\r\n * @dev In real life we are no able to perform all actions with just one Ethereum address\r\n * @dev because risks are too high.\r\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\r\n * @dev stay able to revoke permissions at any time.\r\n */\r\ncontract ManageableInterface {\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\r\n\r\n  /**\r\n   * @dev Modifier to use in derived contracts\r\n   */\r\n  modifier onlyAllowedManager(string _permissionName) {\r\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Manageable is OwnableInterface,\r\n                       ManageableInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\r\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\r\n\r\n\r\n  /* Events */\r\n\r\n  event ManagerEnabledEvent(address indexed manager);\r\n  event ManagerDisabledEvent(address indexed manager);\r\n  event ManagerPermissionGrantedEvent(address indexed manager, string permission);\r\n  event ManagerPermissionRevokedEvent(address indexed manager, string permission);\r\n\r\n\r\n  /* Configure contract */\r\n\r\n  /**\r\n   * @dev Function to add new manager\r\n   * @param _manager address New manager\r\n   */\r\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == false);\r\n\r\n    managerEnabled[_manager] = true;\r\n    ManagerEnabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to remove existing manager\r\n   * @param _manager address Existing manager\r\n   */\r\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == true);\r\n\r\n    managerEnabled[_manager] = false;\r\n    ManagerDisabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to grant new permission to the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Granted permission name\r\n   */\r\n  function grantManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == false);\r\n\r\n    managerPermissions[_manager][_permissionName] = true;\r\n    ManagerPermissionGrantedEvent(_manager, _permissionName);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke permission of the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Revoked permission name\r\n   */\r\n  function revokeManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == true);\r\n\r\n    managerPermissions[_manager][_permissionName] = false;\r\n    ManagerPermissionRevokedEvent(_manager, _permissionName);\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev Function to check manager status\r\n   * @param _manager address Manager`s address\r\n   * @return True if manager is enabled\r\n   */\r\n  function isManagerEnabled(\r\n    address _manager\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    returns (bool)\r\n  {\r\n    return managerEnabled[_manager];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check permissions of a manager\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager has been granted needed permission\r\n   */\r\n  function isPermissionGranted(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return managerPermissions[_manager][_permissionName];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Modifier to check manager address\r\n   */\r\n  modifier onlyValidManagerAddress(address _manager) {\r\n    require(_manager != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidPermissionName(string _permissionName) {\r\n    require(bytes(_permissionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PausableInterface\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract PausableInterface {\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public;\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public;\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenContractNotPaused() {\r\n    require(getPaused() == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenContractPaused {\r\n    require(getPaused() == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract Pausable is ManageableInterface,\r\n                     PausableInterface {\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n\r\n  bool paused = true;\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\r\n    paused = true;\r\n    PauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\r\n    paused = false;\r\n    UnpauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool) {\r\n    return paused;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutorInterface interface\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutorInterface {\r\n\r\n  /* Events */\r\n\r\n  event CallExecutedEvent(address indexed target,\r\n                          uint256 suppliedGas,\r\n                          uint256 ethValue,\r\n                          bytes32 transactionBytecodeHash);\r\n  event DelegatecallExecutedEvent(address indexed target,\r\n                                  uint256 suppliedGas,\r\n                                  bytes32 transactionBytecodeHash);\r\n\r\n\r\n  /* Functions */\r\n\r\n  function executeCall(address _target, uint256 _suppliedGas, uint256 _ethValue, bytes _transactionBytecode) external;\r\n  function executeDelegatecall(address _target, uint256 _suppliedGas, bytes _transactionBytecode) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title BytecodeExecutor\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutor is ManageableInterface,\r\n                             BytecodeExecutorInterface {\r\n\r\n  /* Storage */\r\n\r\n  bool underExecution = false;\r\n\r\n\r\n  /* BytecodeExecutorInterface */\r\n\r\n  function executeCall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    uint256 _ethValue,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_call')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.call.gas(_suppliedGas).value(_ethValue)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    CallExecutedEvent(_target, _suppliedGas, _ethValue, keccak256(_transactionBytecode));\r\n  }\r\n\r\n  function executeDelegatecall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_delegatecall')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.delegatecall.gas(_suppliedGas)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    DelegatecallExecutedEvent(_target, _suppliedGas, keccak256(_transactionBytecode));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBaseInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageBaseInterface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrControllerChangedEvent(address indexed crydrcontroller);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrController(address _newController) public;\r\n  function getCrydrController() public constant returns (address);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBase\r\n */\r\ncontract CrydrStorageBase is CommonModifiersInterface,\r\n                             AssetIDInterface,\r\n                             ManageableInterface,\r\n                             PausableInterface,\r\n                             CrydrStorageBaseInterface {\r\n\r\n  /* Storage */\r\n\r\n  address crydrController = address(0x0);\r\n\r\n\r\n  /* CrydrStorageBaseInterface */\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrController(\r\n    address _crydrController\r\n  )\r\n    public\r\n    whenContractPaused\r\n    onlyContractAddress(_crydrController)\r\n    onlyAllowedManager('set_crydr_controller')\r\n  {\r\n    require(_crydrController != address(crydrController));\r\n    require(_crydrController != address(this));\r\n\r\n    crydrController = _crydrController;\r\n    CrydrControllerChangedEvent(_crydrController);\r\n  }\r\n\r\n  function getCrydrController() public constant returns (address) {\r\n    return address(crydrController);\r\n  }\r\n\r\n\r\n  /* PausableInterface */\r\n\r\n  /**\r\n   * @dev Override method to ensure that contract properly configured before it is unpaused\r\n   */\r\n  function unpauseContract() public {\r\n    require(isContract(crydrController) == true);\r\n    require(getAssetIDHash() == AssetIDInterface(crydrController).getAssetIDHash());\r\n\r\n    super.unpauseContract();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBlocksInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageBlocksInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountBlockedEvent(address indexed account);\r\n  event AccountUnblockedEvent(address indexed account);\r\n  event AccountFundsBlockedEvent(address indexed account, uint256 value);\r\n  event AccountFundsUnblockedEvent(address indexed account, uint256 value);\r\n\r\n\r\n  /* Low-level change of blocks and getters */\r\n\r\n  function blockAccount(address _account) public;\r\n  function unblockAccount(address _account) public;\r\n  function getAccountBlocks(address _account) public constant returns (uint256);\r\n\r\n  function blockAccountFunds(address _account, uint256 _value) public;\r\n  function unblockAccountFunds(address _account, uint256 _value) public;\r\n  function getAccountBlockedFunds(address _account) public constant returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBlocks\r\n */\r\ncontract CrydrStorageBlocks is SafeMathInterface,\r\n                               PausableInterface,\r\n                               CrydrStorageBaseInterface,\r\n                               CrydrStorageBlocksInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => uint256) accountBlocks;\r\n  mapping (address => uint256) accountBlockedFunds;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  function CrydrStorageBlocks() public {\r\n    accountBlocks[0x0] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n  }\r\n\r\n\r\n  /* Low-level change of blocks and getters */\r\n\r\n  function blockAccount(\r\n    address _account\r\n  )\r\n    public\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n\r\n    accountBlocks[_account] = safeAdd(accountBlocks[_account], 1);\r\n    AccountBlockedEvent(_account);\r\n  }\r\n\r\n  function unblockAccount(\r\n    address _account\r\n  )\r\n    public\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n\r\n    accountBlocks[_account] = safeSub(accountBlocks[_account], 1);\r\n    AccountUnblockedEvent(_account);\r\n  }\r\n\r\n  function getAccountBlocks(\r\n    address _account\r\n  )\r\n    public\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    require(_account != address(0x0));\r\n\r\n    return accountBlocks[_account];\r\n  }\r\n\r\n  function blockAccountFunds(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n    require(_value > 0);\r\n\r\n    accountBlockedFunds[_account] = safeAdd(accountBlockedFunds[_account], _value);\r\n    AccountFundsBlockedEvent(_account, _value);\r\n  }\r\n\r\n  function unblockAccountFunds(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n    require(_value > 0);\r\n\r\n    accountBlockedFunds[_account] = safeSub(accountBlockedFunds[_account], _value);\r\n    AccountFundsUnblockedEvent(_account, _value);\r\n  }\r\n\r\n  function getAccountBlockedFunds(\r\n    address _account\r\n  )\r\n    public\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    require(_account != address(0x0));\r\n\r\n    return accountBlockedFunds[_account];\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBalanceInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageBalanceInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountBalanceIncreasedEvent(address indexed account, uint256 value);\r\n  event AccountBalanceDecreasedEvent(address indexed account, uint256 value);\r\n\r\n\r\n  /* Low-level change of balance. Implied that totalSupply kept in sync. */\r\n\r\n  function increaseBalance(address _account, uint256 _value) public;\r\n  function decreaseBalance(address _account, uint256 _value) public;\r\n  function getBalance(address _account) public constant returns (uint256);\r\n  function getTotalSupply() public constant returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageBalance\r\n */\r\ncontract CrydrStorageBalance is SafeMathInterface,\r\n                                PausableInterface,\r\n                                CrydrStorageBaseInterface,\r\n                                CrydrStorageBalanceInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => uint256) balances;\r\n  uint256 totalSupply = 0;\r\n\r\n\r\n  /* Low-level change of balance and getters. Implied that totalSupply kept in sync. */\r\n\r\n  function increaseBalance(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n    require(_value > 0);\r\n\r\n    balances[_account] = safeAdd(balances[_account], _value);\r\n    totalSupply = safeAdd(totalSupply, _value);\r\n    AccountBalanceIncreasedEvent(_account, _value);\r\n  }\r\n\r\n  function decreaseBalance(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_account != address(0x0));\r\n    require(_value > 0);\r\n\r\n    balances[_account] = safeSub(balances[_account], _value);\r\n    totalSupply = safeSub(totalSupply, _value);\r\n    AccountBalanceDecreasedEvent(_account, _value);\r\n  }\r\n\r\n  function getBalance(address _account) public constant returns (uint256) {\r\n    require(_account != address(0x0));\r\n\r\n    return balances[_account];\r\n  }\r\n\r\n  function getTotalSupply() public constant returns (uint256) {\r\n    return totalSupply;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageAllowanceInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageAllowanceInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountAllowanceIncreasedEvent(address indexed owner, address indexed spender, uint256 value);\r\n  event AccountAllowanceDecreasedEvent(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n  /* Low-level change of allowance */\r\n\r\n  function increaseAllowance(address _owner, address _spender, uint256 _value) public;\r\n  function decreaseAllowance(address _owner, address _spender, uint256 _value) public;\r\n  function getAllowance(address _owner, address _spender) public constant returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageAllowance\r\n */\r\ncontract CrydrStorageAllowance is SafeMathInterface,\r\n                                  PausableInterface,\r\n                                  CrydrStorageBaseInterface,\r\n                                  CrydrStorageAllowanceInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /* Low-level change of allowance and getters */\r\n\r\n  function increaseAllowance(\r\n    address _owner,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_owner != address(0x0));\r\n    require(_spender != address(0x0));\r\n    require(_owner != _spender);\r\n    require(_value > 0);\r\n\r\n    allowed[_owner][_spender] = safeAdd(allowed[_owner][_spender], _value);\r\n    AccountAllowanceIncreasedEvent(_owner, _spender, _value);\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address _owner,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_owner != address(0x0));\r\n    require(_spender != address(0x0));\r\n    require(_owner != _spender);\r\n    require(_value > 0);\r\n\r\n    allowed[_owner][_spender] = safeSub(allowed[_owner][_spender], _value);\r\n    AccountAllowanceDecreasedEvent(_owner, _spender, _value);\r\n  }\r\n\r\n  function getAllowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    public\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0x0));\r\n    require(_spender != address(0x0));\r\n    require(_owner != _spender);\r\n\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageERC20Interface interface\r\n * @dev Interface of a contract that manages balance of an CryDR and have optimization for ERC20 controllers\r\n */\r\ncontract CrydrStorageERC20Interface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrTransferredEvent(address indexed from, address indexed to, uint256 value);\r\n  event CrydrTransferredFromEvent(address indexed spender, address indexed from, address indexed to, uint256 value);\r\n  event CrydrSpendingApprovedEvent(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n  /* ERC20 optimization. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(address _msgsender, address _to, uint256 _value) public;\r\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\r\n  function approve(address _msgsender, address _spender, uint256 _value) public;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrStorageERC20\r\n */\r\ncontract CrydrStorageERC20 is SafeMathInterface,\r\n                              PausableInterface,\r\n                              CrydrStorageBaseInterface,\r\n                              CrydrStorageBalanceInterface,\r\n                              CrydrStorageAllowanceInterface,\r\n                              CrydrStorageBlocksInterface,\r\n                              CrydrStorageERC20Interface {\r\n\r\n  function transfer(\r\n    address _msgsender,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(_msgsender != _to);\r\n    require(getAccountBlocks(_msgsender) == 0);\r\n    require(safeSub(getBalance(_msgsender), _value) >= getAccountBlockedFunds(_msgsender));\r\n\r\n    decreaseBalance(_msgsender, _value);\r\n    increaseBalance(_to, _value);\r\n    CrydrTransferredEvent(_msgsender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _msgsender,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(getAccountBlocks(_msgsender) == 0);\r\n    require(getAccountBlocks(_from) == 0);\r\n    require(safeSub(getBalance(_from), _value) >= getAccountBlockedFunds(_from));\r\n    require(_from != _to);\r\n\r\n    decreaseAllowance(_from, _msgsender, _value);\r\n    decreaseBalance(_from, _value);\r\n    increaseBalance(_to, _value);\r\n    CrydrTransferredFromEvent(_msgsender, _from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _msgsender,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n  {\r\n    require(msg.sender == getCrydrController());\r\n\r\n    require(getAccountBlocks(_msgsender) == 0);\r\n    require(getAccountBlocks(_spender) == 0);\r\n\r\n    uint256 currentAllowance = getAllowance(_msgsender, _spender);\r\n    require(currentAllowance != _value);\r\n    if (currentAllowance > _value) {\r\n      decreaseAllowance(_msgsender, _spender, safeSub(currentAllowance, _value));\r\n    } else {\r\n      increaseAllowance(_msgsender, _spender, safeSub(_value, currentAllowance));\r\n    }\r\n\r\n    CrydrSpendingApprovedEvent(_msgsender, _spender, _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title JCashCrydrStorage\r\n * @dev Implementation of a contract that manages data of an CryDR\r\n */\r\ncontract JCashCrydrStorage is SafeMath,\r\n                              CommonModifiers,\r\n                              AssetID,\r\n                              Ownable,\r\n                              Manageable,\r\n                              Pausable,\r\n                              BytecodeExecutor,\r\n                              CrydrStorageBase,\r\n                              CrydrStorageBalance,\r\n                              CrydrStorageAllowance,\r\n                              CrydrStorageBlocks,\r\n                              CrydrStorageERC20 {\r\n\r\n  /* Constructor */\r\n\r\n  function JCashCrydrStorage(string _assetID) AssetID(_assetID) public { }\r\n}\r\n\r\n\r\n\r\ncontract JNTStorage is JCashCrydrStorage {\r\n  function JNTStorage() JCashCrydrStorage('JNT') public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isManagerAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crydrController\",\"type\":\"address\"}],\"name\":\"setCrydrController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isPermissionGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"enableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"revokeManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unblockAccountFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"grantManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"createOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManagerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIDHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBlockedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"blockAccountFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrydrController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeDelegatecall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"disableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CrydrTransferredEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CrydrTransferredFromEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CrydrSpendingApprovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBlockedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountUnblockedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountFundsBlockedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountFundsUnblockedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountAllowanceIncreasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountAllowanceDecreasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceIncreasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountBalanceDecreasedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crydrcontroller\",\"type\":\"address\"}],\"name\":\"CrydrControllerChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"CallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"DelegatecallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerEnabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"string\"}],\"name\":\"ManagerPermissionGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"string\"}],\"name\":\"ManagerPermissionRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"OwnerAssignedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferAcceptedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCancelledEvent\",\"type\":\"event\"}]","ContractName":"JNTStorage","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6500ede71ec9cc54dae49f9a38711bb9cab89e0dbf77a37156c2d3a7b0191f48"}]}