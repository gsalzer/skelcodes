{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    \r\n    // These generate a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MNTToken is ERC20, Owned {\r\n    // Public variables of the token\r\n    string public name = \"Media Network Token\";\r\n    string public symbol = \"MNT\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 0; // 125 * 10**6 * 10**18;\r\n    uint256 public maxSupply = 125 * 10**6 * 10**18;\r\n    address public cjTeamWallet = 0x9887c2da3aC5449F3d62d4A04372a4724c21f54C;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // This creates an array with all allowances\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Gives ownership of all initial tokens to the Coin Joker Team. Sets ownership of contract\r\n     */\r\n    function MNTToken(\r\n        address cjTeam\r\n    ) public {\r\n        //balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\r\n        totalEthRaised = 0;\r\n        /*if (cjTeam != 0) {\r\n            owner = cjTeam;\r\n        }*/\r\n        cjTeamWallet = cjTeam;\r\n    }\r\n\t\r\n    function changeCJTeamWallet(address newWallet) public onlyOwner {\r\n        cjTeamWallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address\r\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n    ) public returns (bool success) \r\n    {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(\r\n        address _spender, \r\n        uint256 _value\r\n    ) public returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get current balance of account _owner\r\n     *\r\n     * @param _owner The owner of the account\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n     * Get allowance from _owner to _spender\r\n     *\r\n     * @param _owner The address that authorizes to spend\r\n     * @param _spender The address authorized to spend\r\n     */\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) public constant returns (uint256 remaining)\r\n    {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Get total supply of all tokens\r\n     */\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    // --------------------------------\r\n    // Token sale variables and methods\r\n    // --------------------------------\r\n\r\n    bool saleHasStarted = false;\r\n    bool saleHasEnded = false;\r\n    uint256 public saleEndTime   = 1518649200; // 15.2.2018, 0:00:00, GMT+1\r\n    uint256 public saleStartTime = 1513435000; // 16.12.2017, 15:36:40, GMT+1\r\n    uint256 public maxEthToRaise = 7500 * 10**18;\r\n    uint256 public totalEthRaised;\r\n    uint256 public ethAvailable;\r\n    uint256 public eth2mnt = 10000; // number of MNTs you get for 1 ETH - actually for 1/10**18 of ETH\r\n\r\n    /* Issue new tokens - internal function */     \r\n    function _mintTokens (address _to, uint256 _amount) internal {             \r\n        require(balanceOf[_to] + _amount >= balanceOf[_to]); // check for overflows\r\n        require(totalSupply + _amount <= maxSupply);\r\n        totalSupply += _amount;                                      // Update total supply\r\n        balanceOf[_to] += _amount;                               // Set minted coins to target\r\n        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\r\n    }\r\n\r\n\r\n    /* Users send ETH and enter the token sale*/  \r\n    function () public payable {\r\n        require(msg.value != 0);\r\n        require(!(saleHasEnded || now > saleEndTime)); // Throw if the token sale has ended\r\n        if (!saleHasStarted) {                                                // Check if this is the first token sale transaction   \r\n            if (now >= saleStartTime) {                             // Check if the token sale should start        \r\n                saleHasStarted = true;                                           // Set that the token sale has started         \r\n            } else {\r\n                require(false);\r\n            }\r\n        }     \r\n     \r\n        if (maxEthToRaise > (totalEthRaised + msg.value)) {                 // Check if the user sent too much ETH         \r\n            totalEthRaised += msg.value;                                    // Add to total eth Raised\r\n            ethAvailable += msg.value;\r\n            _mintTokens(msg.sender, msg.value * eth2mnt);\r\n            cjTeamWallet.transfer(msg.value); \r\n        } else {                                                              // If user sent to much eth       \r\n            uint maxContribution = maxEthToRaise - totalEthRaised;            // Calculate maximum contribution       \r\n            totalEthRaised += maxContribution;  \r\n            ethAvailable += maxContribution;\r\n            _mintTokens(msg.sender, maxContribution * eth2mnt);\r\n            uint toReturn = msg.value - maxContribution;                       // Calculate how much should be returned       \r\n            saleHasEnded = true;\r\n            msg.sender.transfer(toReturn);                                  // Refund the balance that is over the cap   \r\n            cjTeamWallet.transfer(msg.value-toReturn);       \r\n        }\r\n    } \r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Sends the raised amount to the CJ Team. Mints 40% of tokens to send to the CJ team.\r\n     */\r\n    function endOfSaleFullWithdrawal() public onlyOwner {\r\n        if (saleHasEnded || now > saleEndTime) {\r\n            //if (owner.send(ethAvailable)) {\r\n            cjTeamWallet.transfer(this.balance);\r\n            ethAvailable = 0;\r\n            //_mintTokens (owner, totalSupply * 2 / 3);\r\n            _mintTokens (cjTeamWallet, 50 * 10**6 * 10**18); // CJ team gets 40% of token supply\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Sends partial amount to the CJ Team\r\n     */\r\n    function partialWithdrawal(uint256 toWithdraw) public onlyOwner {\r\n        cjTeamWallet.transfer(toWithdraw);\r\n        ethAvailable -= toWithdraw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth2mnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeCJTeamWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toWithdraw\",\"type\":\"uint256\"}],\"name\":\"partialWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endOfSaleFullWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEthToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cjTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cjTeam\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MNTToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009887c2da3ac5449f3d62d4a04372a4724c21f54c","Library":"","SwarmSource":"bzzr://f48e227d30f46007654732962d76995c4be3e6cbb106fc441159fe1a96ecfc3e"}]}