{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract SafeMath {\r\n\tfunction safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n\t\tuint256 z = x + y;\r\n\t\tif (z < x || z < y) revert();\r\n\t\treturn z;\r\n\t}\r\n\tfunction safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n\t\tif (x < y) revert();\r\n\t\treturn x - y;\r\n\t}\r\n\tfunction safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n\t\tif (x == 0) return 0;\r\n\t\tuint256 z = x * y;\r\n\t\tif (z/x != y) revert();\r\n\t\treturn z;\r\n\t}\r\n}\r\n\r\ncontract AccessMgr {\r\n\taddress public mOwner;\r\n\t\r\n\tmapping(address => uint) public mModerators;\r\n\taddress[] public mModeratorKeys;\r\n\t\r\n\tfunction AccessMgr() public {\r\n\t\tmOwner = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier Owner {\r\n\t\tif (msg.sender != mOwner)\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier Moderators {\r\n\t\tif (msg.sender != mOwner && mModerators[msg.sender] == 0)\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction changeOwner(address owner) Owner public {\r\n\t\tif (owner != address(0x0))\r\n\t\t\tmOwner = owner;\r\n\t}\r\n\t\r\n\tfunction addModerator(address moderator) Owner public {\r\n\t\tif (moderator != address(0x0)) {\r\n\t\t\tif (mModerators[moderator] > 0)\r\n\t\t\t\treturn;\r\n\t\t\tmModerators[moderator] = mModeratorKeys.length;\r\n\t\t\tmModeratorKeys.push(moderator);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeModerator(address moderator) Owner public {\r\n\t\tuint256 index = mModerators[moderator];\r\n\t\tif (index == 0) return;\r\n\t\tuint256 last = mModeratorKeys.length - 1;\r\n\t\taddress lastMod = mModeratorKeys[last];\r\n\t\t\r\n\t\tindex--;\r\n\t\t\r\n\t\tmModeratorKeys[index] = lastMod;\r\n\t\tdelete mModeratorKeys[last];\r\n\t\tmModeratorKeys.length--;\r\n\t\t\r\n\t\tdelete mModerators[moderator];\r\n\t\t\r\n\t\tmModerators[lastMod] = index;\r\n\t}\r\n}\r\n\r\ncontract UserMgr is SafeMath {\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tuint256[] hostedItems;\r\n\t\tuint256[] inventory;\r\n\t}\r\n\r\n\tmapping(address => User) public mUsers;\r\n\t\r\n\tfunction UserMgr() public {}\r\n\t\r\n\tfunction getUser(address addr) public view returns (string name, uint256 balance, uint256[] hostedItems, uint256[] inventory) {\r\n\t\tUser memory user = mUsers[addr];\r\n\t\treturn (\r\n\t\t\t\"Anonymous\",\r\n\t\t\tuser.balance,\r\n\t\t\tuser.hostedItems,\r\n\t\t\tuser.inventory);\r\n\t}\r\n\t\r\n\tfunction userDeposit() payable public {\r\n\t\tUser storage user = mUsers[msg.sender];\r\n\t\tuser.balance = safeAdd(user.balance, msg.value);\r\n\t}\r\n\t\r\n\tfunction userWithdraw() payable public {\r\n\t\taddress sender = msg.sender;\r\n\t\tUser storage user = mUsers[sender];\r\n\t\tuint256 amount = user.balance;\r\n\t\tif (amount == 0) revert();\r\n\t\tuser.balance = msg.value;\r\n\t\trequire(sender.send(amount));\r\n\t}\r\n}\r\n\r\ncontract ItemMgr {\r\n\tstruct Item {\r\n\t\tstring name;\r\n\t\taddress hostAddress;\r\n\t\tuint256 price;\r\n\t\tuint256 numSold;\r\n\t\tuint256 basePrice;\r\n\t\tuint256 growthAmount;\r\n\t\tuint256 growthPeriod;\r\n\t\taddress[] purchases;\r\n\t}\r\n\r\n\tItem[] public mItems;\r\n\r\n\tfunction ItemMgr() public {}\r\n\r\n\tfunction getNumItems() public view returns (uint256 count) {\r\n\t\treturn mItems.length;\r\n\t}\r\n\r\n\tfunction getItem(uint256 index) public view\r\n\t\t\treturns (string name, address hostAddress, uint256 price, uint256 numSold,\r\n\t\t\t\t\tuint256 basePrice, uint256 growthAmount, uint256 growthPeriod) {\r\n\t\tuint256 length = mItems.length;\r\n\t\tif (index >= length) index = length-1;\r\n\t\tItem memory item = mItems[index];\r\n\t\treturn (\r\n\t\t\titem.name, item.hostAddress, item.price, item.numSold,\r\n\t\t\titem.basePrice, item.growthAmount, item.growthPeriod\r\n\t\t);\r\n\t}\r\n}\r\n\r\ncontract PonziBaseProcessor is SafeMath, AccessMgr, UserMgr, ItemMgr {\r\n\t\r\n\tuint256 public mHostFee = 0;\r\n\t\r\n\tevent ItemCreated(address host, uint256 itemId);\r\n\tevent ItemBought(address buyer, uint256 itemId, uint256 number, uint256 price, uint256 refund);\r\n\t\r\n\tfunction PonziBaseProcessor() public {\r\n\t\tmOwner = msg.sender;\r\n\t}\r\n\t\r\n\tfunction setHostFee(uint256 hostFee) Owner public {\r\n\t\tmHostFee = hostFee;\r\n\t}\r\n\t\r\n\tfunction createItem(string name, uint256 basePrice, uint256 growthAmount, uint256 growthPeriod) payable public returns (uint256 itemId) {\r\n\t\taddress sender = msg.sender;\r\n\t\tUser storage user = mUsers[sender];\r\n\t\tuint256 balance = user.balance;\r\n\t\t\r\n\t\tif (msg.value > 0)\r\n\t\t\tbalance = safeAdd(balance, msg.value);\r\n\t\t\r\n\t\tif (basePrice <= 0)\r\n\t\t\trevert(); // Base price must be non-zero.\r\n\t\t\r\n\t\t//if (growthAmount <= 0) Allow non-growing items.\r\n\t\t//\trevert(); // Growth amount must be non-zero.\r\n\t\t\r\n\t\tif (growthPeriod <= 0)\r\n\t\t\trevert(); // Growth period must be non-zero.\r\n\t\t\r\n\t\tif (bytes(name).length > 32)\r\n\t\t\trevert(); // Name must be 32 characters max.\r\n\t\t\r\n\t\tuint256 fee = basePrice;\r\n\t\tuint256 minFee = mHostFee;\r\n\t\tif (fee < minFee)\r\n\t\t\tfee = minFee;\r\n\t\t\r\n\t\tif (balance < fee)\r\n\t\t\trevert(); // Insufficient balance.\r\n\t\t\r\n\t\tuint256 id = mItems.length;\r\n\t\tmItems.length++;\r\n\t\t\r\n\t\tItem storage item = mItems[id];\r\n\t\titem.name = name;\r\n\t\titem.hostAddress = sender;\r\n\t\titem.price = basePrice;\r\n\t\titem.numSold = 0;\r\n\t\titem.basePrice = basePrice;\r\n\t\titem.growthAmount = growthAmount;\r\n\t\titem.growthPeriod = growthPeriod;\r\n\t\t\r\n\t\titem.purchases.push(mOwner);\r\n\t\titem.purchases.push(sender);\r\n\t\t\r\n\t\tbalance = safeSubtract(balance, fee);\r\n\t\tuser.balance = balance;\r\n\t\tuser.hostedItems.push(id);\r\n\t\tuser.inventory.push(id);\r\n\t\t\r\n\t\tUser storage owner = mUsers[mOwner];\r\n\t\towner.balance = safeAdd(owner.balance, fee);\r\n\t\t\r\n\t\tif (mOwner != sender) {\r\n\t\t\towner.inventory.push(id);\r\n\t\t}\r\n\t\t\r\n\t\tItemCreated(sender, id);\r\n\t\t\r\n\t\treturn id;\r\n\t}\r\n\t\r\n\tfunction buyItem(uint256 id) payable public {\r\n\t\taddress sender = msg.sender;\r\n\t\tUser storage user = mUsers[sender];\r\n\t\tuint256 balance = user.balance;\r\n\t\t\r\n\t\tif (msg.value > 0)\r\n\t\t\tbalance = safeAdd(balance, msg.value);\r\n\t\t\r\n\t\tItem storage item = mItems[id];\r\n\t\tuint256 price = item.price;\r\n\t\t\r\n\t\tif (price == 0)\r\n\t\t\trevert(); // Item not found.\r\n\t\t\r\n\t\tif (balance < price)\r\n\t\t\trevert(); // Insufficient balance.\r\n\t\t\r\n\t\tbalance = safeSubtract(balance, price);\r\n\t\tuser.balance = balance;\r\n\t\tuser.inventory.push(id);\r\n\t\t\r\n\t\tuint256 length = item.purchases.length;\r\n\t\t\r\n\t\tuint256 refund = price;\r\n\t\tuint256 dividend = price / length;\r\n\t\tfor (uint256 i=0; i<length; i++) {\r\n\t\t\tUser storage holder = mUsers[item.purchases[i]];\r\n\t\t\tholder.balance = safeAdd(holder.balance, dividend);\r\n\t\t\trefund -= dividend;\r\n\t\t}\r\n\t\t// Consume the lost fraction when dividing as insurance for the contract,\r\n\t\t// but still report the refund value in the event.\r\n\t\t// user.balance += refund;\r\n\t\t\r\n\t\titem.purchases.push(sender);\r\n\t\tuint256 numSold = item.numSold++;\r\n\t\t\r\n\t\tif (item.numSold % item.growthPeriod == 0)\r\n\t\t\titem.price = safeAdd(item.price, item.growthAmount);\r\n\t\t\r\n\t\tItemBought(sender, id, numSold, price, refund);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mItems\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"hostAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"numSold\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"growthAmount\",\"type\":\"uint256\"},{\"name\":\"growthPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"hostAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"numSold\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"growthAmount\",\"type\":\"uint256\"},{\"name\":\"growthPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"hostedItems\",\"type\":\"uint256[]\"},{\"name\":\"inventory\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mModeratorKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"growthAmount\",\"type\":\"uint256\"},{\"name\":\"growthPeriod\",\"type\":\"uint256\"}],\"name\":\"createItem\",\"outputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mHostFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mUsers\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hostFee\",\"type\":\"uint256\"}],\"name\":\"setHostFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumItems\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"host\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"}]","ContractName":"PonziBaseProcessor","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9bb20df4954fadc231c68c6df9ae4f0422b39bbda7d0cca490dbc8bf7e3a9ac8"}]}