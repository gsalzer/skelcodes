{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMathMod {// Partial SafeMath Library\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) < a);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) > a);\r\n    }\r\n}\r\n\r\ncontract Token {//is inherently ERC20\r\n    using SafeMathMod for uint256;\r\n\r\n    /**\r\n    * @constant name The name of the token\r\n    * @constant symbol  The symbol used to display the currency\r\n    * @constant decimals  The number of decimals used to dispay a balance\r\n    * @variable totalSupply The total number of tokens times 10 times of the number of decimals\r\n    * @variable presaleAddress  Address of the presale contract\r\n    * @variable crowdsaleAddress  Address of the crowdsale contract\r\n    * @variable crowdsaleSuccessful  has there been a successful crowdsale\r\n    * @constant MAX_UINT256 Magic number for unlimited allowance\r\n    * @storage balanceOf Holds the balances of all token holders\r\n    * @storage Approval Holds the allowed balance to be transferable by another address.\r\n    */\r\n\r\n    string constant public name = \"Smart City Token\";\r\n\r\n    string constant public symbol = \"SCT\";\r\n\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    address public presaleAddress;\r\n    \r\n    address public crowdsaleAddress;\r\n    \r\n    bool public crowdsaleSuccessful;\r\n    \r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Mint(address indexed _to, uint256 _value, uint256 _totalSupply);\r\n\r\n    event Burn(address indexed _from, uint256 _value, uint256 _totalSupply);\r\n\r\n\r\n\r\n    function Token(address _presaleAddress, address _crowdsaleAddress) public {\r\n        totalSupply = 0;\r\n        presaleAddress = _presaleAddress;\r\n        crowdsaleAddress = _crowdsaleAddress;\r\n    }\r\n    \r\n    /**\r\n    * @notice send `_value` tokens to `_to` address from `msg.sender`\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(crowdsaleSuccessful);\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        success = true;\r\n    }\r\n    \r\n    /**\r\n    * @notice send `_value` tokens to `_to` address from `_from` address if allowance allows\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(crowdsaleSuccessful);\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Ensures tokens are not sent to this contract */\r\n        require(_to != address(this));\r\n        \r\n        uint256 allowed = allowance[_from][msg.sender];\r\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\r\n        require(_value <= allowed || _from == msg.sender);\r\n\r\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n\r\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\r\n        /* Balance holder does not need allowance to send from self. */\r\n        if (allowed != MAX_UINT256 && _from != msg.sender) {\r\n            allowance[_from][msg.sender] = allowed.sub(_value);\r\n        }\r\n        Transfer(_from, _to, _value);\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n    * @notice approve `_value` tokens for `_spender` address to send from 'msg.sender'\r\n    *\r\n    * @param _spender The address of the approved\r\n    * @param _value The amount of token to be allowed\r\n    * @return Whether the allowance was successful\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        /* Ensures address \"0x0\" is not assigned allowance. */\r\n        require(_spender != address(0));\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        success = true;\r\n    }\r\n    \r\n    /**\r\n    * @notice mint `_value` tokens into `_to` address possession\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be minted\r\n    * @return Whether the minting was successful\r\n    */\r\n    function mintTokens(address _to, uint256 _value) external returns(bool success) {\r\n        require(msg.sender == presaleAddress || msg.sender == crowdsaleAddress);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n        Mint(_to,  _value, totalSupply);\r\n        success = true;\r\n    }\r\n    \r\n    /**\r\n    * @notice burn all tokens assigned to '_address'\r\n    *\r\n    * @param _address whose tokens will be burned\r\n    * @return Whether the burning was successful\r\n    */\r\n    function burnAllTokens(address _address) external returns(bool success) {\r\n        require(msg.sender == crowdsaleAddress);\r\n        uint256 amount = balanceOf[_address];\r\n        balanceOf[_address] = 0;\r\n        totalSupply = totalSupply.sub(amount);\r\n        Burn(_address,  amount, totalSupply);\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n    * @notice set crowdsaleSuccessful to true\r\n    */\r\n    function crowdsaleSucceeded() public {\r\n        require(msg.sender == crowdsaleAddress);\r\n        crowdsaleSuccessful = true;\r\n    }\r\n    \r\n    // revert on eth transfers to this contract\r\n    function() public payable {revert();}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsaleSucceeded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"burnAllTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"name\":\"_crowdsaleAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000057f82f1bc6c6ab01ddd9476ddaddfee6f03d193200000000000000000000000088f60db5e06f782560e647070c699847e2c55ecc","Library":"","SwarmSource":"bzzr://887349ce700c9b0652a1c2bb053dc1eaa75d14fef62f13a69aa1f51ad40fcff1"}]}