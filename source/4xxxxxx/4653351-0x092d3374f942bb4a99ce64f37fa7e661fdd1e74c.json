{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n//Developed by Zenos Pavlakou\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n        revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ACO tokens from the sender's account to another given account.\r\n     * \r\n     * @param _to The address of the recipient.\r\n     * @param _amount The amount of tokens to send.\r\n     * */\r\n    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the balance of a given address.\r\n     * \r\n     * @param _addr The address of the balance to query.\r\n     **/\r\n    function balanceOf(address _addr) public constant returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n}\r\n\r\n\r\ncontract AdvancedToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    /**\r\n     * Transfers tokens from the account of the owner by an approved spender. \r\n     * The spender cannot spend more than the approved amount. \r\n     * \r\n     * @param _from The address of the owners account.\r\n     * @param _amount The amount of tokens to transfer.\r\n     * */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool) {\r\n        require(allowances[_from][msg.sender] >= _amount && balances[_from] >= _amount);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allows another account to spend a given amount of tokens on behalf of the \r\n     * owner's account. If the owner has previously allowed a spender to spend\r\n     * tokens on his or her behalf and would like to change the approval amount,\r\n     * he or she will first have to set the allowance back to 0 and then update\r\n     * the allowance.\r\n     * \r\n     * @param _spender The address of the spenders account.\r\n     * @param _amount The amount of tokens the spender is allowed to spend.\r\n     * */\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowances[msg.sender][_spender] == 0));\r\n        allowances[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the approved allowance from an owners account to a spenders account.\r\n     * \r\n     * @param _owner The address of the owners account.\r\n     * @param _spender The address of the spenders account.\r\n     **/\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract MintableToken is AdvancedToken {\r\n\r\n    bool public mintingFinished;\r\n\r\n    event TokensMinted(address indexed to, uint256 amount);\r\n    event MintingFinished();\r\n\r\n    /**\r\n     * Generates new ACO tokens during the ICO, after which the minting period \r\n     * will terminate permenantly. This function can only be called by the ICO \r\n     * contract.\r\n     * \r\n     * @param _to The address of the account to mint new tokens to.\r\n     * @param _amount The amount of tokens to mint. \r\n     * */\r\n    function mint(address _to, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) returns (bool) {\r\n        require(_to != 0x0 && _amount > 0 && !mintingFinished);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        totalSupply = totalSupply.add(_amount);\r\n        Transfer(0x0, _to, _amount);\r\n        TokensMinted(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Terminates the minting period permenantly. This function can only be called\r\n     * by the ICO contract only when the duration of the ICO has ended. \r\n     * */\r\n    function finishMinting() external onlyOwner {\r\n        require(!mintingFinished);\r\n        mintingFinished = true;\r\n        MintingFinished();\r\n    }\r\n    \r\n    /**\r\n     * Returns true if the minting period has ended, false otherwhise.\r\n     * */\r\n    function mintingFinished() public constant returns (bool) {\r\n        return mintingFinished;\r\n    }\r\n}\r\n\r\n\r\ncontract ACO is MintableToken {\r\n\r\n    uint8 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    function ACO() public {\r\n        totalSupply = 0;\r\n        decimals = 18;\r\n        name = \"ACO\";\r\n        symbol = \"ACO\";\r\n    }\r\n}\r\n\r\n\r\ncontract MultiOwnable {\r\n    \r\n    address[2] public owners;\r\n\r\n    event OwnershipTransferred(address from, address to);\r\n    event OwnershipGranted(address to);\r\n\r\n    function MultiOwnable() public {\r\n        owners[0] = 0x1d554c421182a94E2f4cBD833f24682BBe1eeFe8; //R1\r\n        owners[1] = 0x0D7a2716466332Fc5a256FF0d20555A44c099453; //R2\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier will only execute if the the function is called by the \r\n     * owners of the contract.\r\n     * */ \r\n    modifier onlyOwners {\r\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Trasfers ownership from the owner who executes the function to another given address.\r\n     * \r\n     * @param _newOwner The address which will be granted ownership.\r\n     * */\r\n    function transferOwnership(address _newOwner) public onlyOwners {\r\n        require(_newOwner != 0x0 && _newOwner != owners[0] && _newOwner != owners[1]);\r\n        if (msg.sender == owners[0]) {\r\n            OwnershipTransferred(owners[0], _newOwner);\r\n            owners[0] = _newOwner;\r\n        } else {\r\n            OwnershipTransferred(owners[1], _newOwner);\r\n            owners[1] = _newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is MultiOwnable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ACO public ACO_Token;\r\n\r\n    address public constant MULTI_SIG = 0x3Ee28dA5eFe653402C5192054064F12a42EA709e;\r\n\r\n    bool public success;\r\n    uint256 public rate;\r\n    uint256 public rateWithBonus;\r\n    uint256 public tokensSold;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public minimumGoal;\r\n    uint256 public cap;\r\n    uint256[4] private bonusStages;\r\n\r\n    mapping (address => uint256) investments;\r\n    mapping (address => bool) hasAuthorizedWithdrawal;\r\n\r\n    event TokensPurchased(address indexed by, uint256 amount);\r\n    event RefundIssued(address indexed by, uint256 amount);\r\n    event FundsWithdrawn(address indexed by, uint256 amount);\r\n    event IcoSuccess();\r\n    event CapReached();\r\n\r\n    function Crowdsale() public {\r\n        ACO_Token = new ACO();\r\n        minimumGoal = 3000 ether;\r\n        cap = 87500 ether;\r\n        rate = 4000;\r\n        startTime = now.add(3 days);\r\n        endTime = startTime.add(90 days);\r\n        bonusStages[0] = startTime.add(14 days);\r\n\r\n        for (uint i = 1; i < bonusStages.length; i++) {\r\n            bonusStages[i] = bonusStages[i - 1].add(14 days);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fallback function calls the buyTokens function when ETH is sent to this \r\n     * contact.\r\n     * */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Allows investors to buy ACO tokens. Once ETH is sent to this contract, \r\n     * the investor will automatically receive tokens. \r\n     * \r\n     * @param _beneficiary The address the newly minted tokens will be sent to.\r\n     * */\r\n    function buyTokens(address _beneficiary) public payable {\r\n        require(_beneficiary != 0x0 && validPurchase() && weiRaised().sub(msg.value) < cap);\r\n        if (this.balance >= minimumGoal && !success) {\r\n            success = true;\r\n            IcoSuccess();\r\n        }\r\n        uint256 weiAmount = msg.value;\r\n        if (this.balance > cap) {\r\n            CapReached();\r\n            uint256 toRefund = this.balance.sub(cap);\r\n            msg.sender.transfer(toRefund);\r\n            weiAmount = weiAmount.sub(toRefund);\r\n        }\r\n        uint256 tokens = weiAmount.mul(getCurrentRateWithBonus());\r\n        ACO_Token.mint(_beneficiary, tokens);\r\n        tokensSold = tokensSold.add(tokens);\r\n        investments[_beneficiary] = investments[_beneficiary].add(weiAmount);\r\n        TokensPurchased(_beneficiary, tokens);\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of tokens 1 ETH equates to with the bonus percentage.\r\n     * */\r\n    function getCurrentRateWithBonus() public returns (uint256) {\r\n        rateWithBonus = (rate.mul(getBonusPercentage()).div(100)).add(rate);\r\n        return rateWithBonus;\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the bonus percentage based on how early an investment\r\n     * is made. If ETH is sent to the contract after the bonus period, the bonus \r\n     * percentage will default to 0\r\n     * */\r\n    function getBonusPercentage() internal view returns (uint256 bonusPercentage) {\r\n        uint256 timeStamp = now;\r\n        if (timeStamp > bonusStages[3]) {\r\n            bonusPercentage = 0;\r\n        } else { \r\n            bonusPercentage = 25;\r\n            for (uint i = 0; i < bonusStages.length; i++) {\r\n                if (timeStamp <= bonusStages[i]) {\r\n                    break;\r\n                } else {\r\n                    bonusPercentage = bonusPercentage.sub(5);\r\n                }\r\n            }\r\n        }\r\n        return bonusPercentage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current rate 1 ETH equates to including the bonus amount. \r\n     * */\r\n    function currentRate() public constant returns (uint256) {\r\n        return rateWithBonus;\r\n    }\r\n\r\n    /**\r\n     * Checks whether an incoming transaction from the buyTokens function is \r\n     * valid or not. For a purchase to be valid, investors have to buy tokens\r\n     * only during the ICO period and the value being transferred must be greater\r\n     * than 0.\r\n     * */\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n    \r\n    /**\r\n     * Issues a refund to a given address. This function can only be called if\r\n     * the duration of the ICO has ended and the minimum goal has not been reached.\r\n     * \r\n     * @param _addr The address that will receive a refund. \r\n     * */\r\n    function getRefund(address _addr) public {\r\n        if (_addr == 0x0) {\r\n            _addr = msg.sender;\r\n        }\r\n        require(!isSuccess() && hasEnded() && investments[_addr] > 0);\r\n        uint256 toRefund = investments[_addr];\r\n        investments[_addr] = 0;\r\n        _addr.transfer(toRefund);\r\n        RefundIssued(_addr, toRefund);\r\n    }\r\n\r\n    /**\r\n     * This function can only be called by the onwers of the ICO contract. There \r\n     * needs to be 2 approvals, one from each owner. Once two approvals have been \r\n     * made, the funds raised will be sent to a multi signature wallet. This \r\n     * function cannot be called if the ICO is not a success.\r\n     * */\r\n    function authorizeWithdrawal() public onlyOwners {\r\n        require(hasEnded() && isSuccess() && !hasAuthorizedWithdrawal[msg.sender]);\r\n        hasAuthorizedWithdrawal[msg.sender] = true;\r\n        if (hasAuthorizedWithdrawal[owners[0]] && hasAuthorizedWithdrawal[owners[1]]) {\r\n            FundsWithdrawn(owners[0], this.balance);\r\n            MULTI_SIG.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Generates newly minted ACO tokens and sends them to a given address. This \r\n     * function can only be called by the owners of the ICO contract during the \r\n     * minting period.\r\n     * \r\n     * @param _to The address to mint new tokens to.\r\n     * @param _amount The amount of tokens to mint.\r\n     * */\r\n    function issueBounty(address _to, uint256 _amount) public onlyOwners {\r\n        require(_to != 0x0 && _amount > 0);\r\n        ACO_Token.mint(_to, _amount);\r\n    }\r\n    \r\n    /**\r\n     * Terminates the minting period permanently. This function can only be \r\n     * executed by the owners of the ICO contract. \r\n     * */\r\n    function finishMinting() public onlyOwners {\r\n        require(hasEnded());\r\n        ACO_Token.finishMinting();\r\n    }\r\n\r\n    /**\r\n     * Returns the minimum goal of the ICO.\r\n     * */\r\n    function minimumGoal() public constant returns (uint256) {\r\n        return minimumGoal;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum amount of funds the ICO can receive.\r\n     * */\r\n    function cap() public constant returns (uint256) {\r\n        return cap;\r\n    }\r\n\r\n    /**\r\n     * Returns the time that the ICO duration will end.\r\n     * */\r\n    function endTime() public constant returns (uint256) {\r\n        return endTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of ETH a given address has invested.\r\n     * \r\n     * @param _addr The address to query the investment of. \r\n     * */\r\n    function investmentOf(address _addr) public constant returns (uint256) {\r\n        return investments[_addr];\r\n    }\r\n\r\n    /**\r\n     * Returns true if the duration of the ICO is over.\r\n     * */\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the ICO is a success.\r\n     * */\r\n    function isSuccess() public constant returns (bool) {\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of ETH raised in wei.\r\n     * */\r\n    function weiRaised() public constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issueBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"success\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"authorizeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTI_SIG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentRateWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investmentOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACO_Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipGranted\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ccd9f253dfd5de038536b3561ddac7c9bb23d6511a8ddece0edd3b3a63509f5"}]}