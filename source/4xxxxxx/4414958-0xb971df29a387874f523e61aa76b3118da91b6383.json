{"status":"1","message":"OK","result":[{"SourceCode":"contract MintInterface {\r\n  function mint(address recipient, uint amount) returns (bool success);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n * Reference: https://github.com/OpenZeppelin/zeppelin-solidity/commit/353285e5d96477b4abb86f7cde9187e84ed251ac\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal constant returns (uint) {    \r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal constant returns (uint) {\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n\r\n    assert(c>=a && c>=b);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\n * Mint tokens of a linked token\r\n * The tokens will be minted following a formula\r\n * The mining will start when an external address (a multisig) says so\r\n */\r\ncontract WithdrawTokensInput is SafeMath {\r\n  address public tokenContract; // address of the token\r\n  address public receiver; // receiver of the tokens\r\n  uint public numTokensLimit; // Max amount of tokens to be minted\r\n  uint public numTokensIssued; // Number of tokens issued so far\r\n\r\n  address public multisig; // external address that will start the minting of the tokens\r\n  bool public open; // If \"multisig\" has started the minting or not\r\n\r\n  uint public startDate; // Timestamp in which \"multisig\" starts the minting. 0 if !open\r\n\r\n  modifier input() {\r\n    require(open);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyMultisig() {\r\n    require(msg.sender == multisig);\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyReceiver() {\r\n    require(msg.sender == receiver);\r\n\r\n    _;\r\n  }\r\n\r\n  function WithdrawTokensInput(\r\n    address _tokenContract,\r\n    address _multisig,\r\n    address _receiver,\r\n    uint _numTokens\r\n  ) {\r\n    tokenContract = _tokenContract;\r\n    multisig = _multisig;\r\n    receiver = _receiver;\r\n    numTokensLimit = _numTokens;\r\n  }\r\n\r\n  // Creates tokens to \"receiver\" address following a formula\r\n  // Only executed if \"multisig\" has started the minting process\r\n  // The maximum amount of tokens is \"numTokensLimit\"\r\n  // Only executed by \"receiver\"\r\n  function withdraw() public input onlyReceiver {\r\n    uint tokensToIssue = safeSub(limit(safeDiv(safeSub(now, startDate), 24 hours)), numTokensIssued);\r\n\r\n    numTokensIssued += tokensToIssue;\r\n\r\n    // mint tokens\r\n    if (!MintInterface(tokenContract).mint(receiver, tokensToIssue))\r\n      revert();\r\n  }\r\n\r\n  // Number of tokens available to be minted at day \"d\"\r\n  function limit(uint d) public constant returns (uint tokensToIssue) {\r\n\r\n    if(d > 3650)\r\n      tokensToIssue = numTokensLimit;\r\n    else\r\n      tokensToIssue = (   (  ( (560791145 * d) >> 10 ) - ( d * (d-1) ) * 75  ) >> 1   ) * 10**18;\r\n  }\r\n\r\n  // Starts the minting process\r\n  // Only executed by \"multisig\"\r\n  function submitInput() public onlyMultisig {\r\n    require(!open);\r\n\r\n    open = true;\r\n    startDate = now;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"limit\",\"outputs\":[{\"name\":\"tokensToIssue\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitInput\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"WithdrawTokensInput","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009a2ba0ca74d505e5d7a853433eb01910dc628f40000000000000000000000000412790a9e6a6dd5b201bfa29af8d589cb85ff20c000000000000000000000000412790a9e6a6dd5b201bfa29af8d589cb85ff20c0000000000000000000000000000000000000000019d971e4fe8401e74000000","Library":"","SwarmSource":"bzzr://0ace3c442928488a50f9c083ea9e8c9597792c5df80c9c6ef5d9a19b8b027089"}]}