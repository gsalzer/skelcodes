{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\ncontract SafeMath {\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant BASE = 1000000000000000000;\r\n\r\n    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n        return div(mul(number, numerator), denominator);\r\n    }\r\n\r\n    // ICO date bonus calculation\r\n    function dateBonus(uint roundIco, uint endIco, uint256 amount) internal returns (uint256) {\r\n        if(endIco >= now && roundIco == 0){\r\n            return add(amount,mulByFraction(amount, 15, 100));\r\n        }else{\r\n            return amount;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) ownerAppended;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    address[] public owners;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\ncontract RobotTradingToken is StandardToken, SafeMath {\r\n    /*\r\n     * Token meta data\r\n     */\r\n     \r\n    string public constant name = \"Robot Trading\";\r\n    string public constant symbol = \"RTD\";\r\n    uint public constant decimals = 18;\r\n\r\n    // tottal supply\r\n\r\n    address public icoContract = 0x0;\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function RobotTradingToken(address _icoContract) {\r\n        assert(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        assert(_from != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = sub(balances[_from], _value);\r\n    }\r\n\r\n    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        assert(_to != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        if(!ownerAppended[_to]) {\r\n            ownerAppended[_to] = true;\r\n            owners.push(_to);\r\n        }\r\n\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint256) {\r\n        return (owners[index], balances[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract RobotTradingIco is SafeMath {\r\n    /*\r\n     * ICO meta data\r\n     */\r\n    RobotTradingToken public robottradingToken;\r\n\r\n    enum State{\r\n        Init,\r\n        Pause,\r\n        Running,\r\n        Stopped,\r\n        Migrated\r\n    }\r\n\r\n    State public currentState = State.Pause;\r\n\r\n    string public constant name = \"Robot Trading ICO\";\r\n\r\n    // Addresses of founders and other level\r\n    address public accManager;\r\n    address public accFounder;\r\n    address public accPartner;\r\n    address public accCompany;\r\n    address public accRecive;\r\n\r\n    // 10,000 M RDT tokens\r\n    uint public supplyLimit = 10000000000000000000000000000;\r\n\r\n    // BASE = 10^18\r\n    uint constant BASE = 1000000000000000000;\r\n\r\n    // current round ICO\r\n    uint public roundICO = 0;\r\n\r\n    struct RoundStruct {\r\n        uint round;//ICO round 0 is preICO other is normal ICO\r\n        uint price;//ICO price for this round 1 ETH = 10000 RDT\r\n        uint supply;//total supply start at 1%\r\n        uint recive;//total recive ETH\r\n        uint soldTokens;//total tokens sold\r\n        uint sendTokens;//total tokens sold\r\n        uint dateStart;//start ICO date\r\n        uint dateEnd; //end ICO date\r\n    }\r\n\r\n    RoundStruct[] public roundData;\r\n\r\n    bool public sentTokensToFounder = false;\r\n    bool public sentTokensToPartner = false;\r\n    bool public sentTokensToCompany = false;\r\n\r\n    uint public tokensToFunder = 0;\r\n    uint public tokensToPartner = 0;\r\n    uint public tokensToCompany = 0;\r\n    uint public etherRaised = 0;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenInitialized() {\r\n        // only when contract is initialized\r\n        require(currentState >= State.Init);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        // only ICO manager can do this action\r\n        require(msg.sender == accManager);\r\n        _;\r\n    }\r\n\r\n    modifier onIcoRunning() {\r\n        // Checks, if ICO is running and has not been stopped\r\n        require(currentState == State.Running);\r\n        _;\r\n    }\r\n\r\n    modifier onIcoStopped() {\r\n        // Checks if ICO was stopped or deadline is reached\r\n        require(currentState == State.Stopped);\r\n        _;\r\n    }\r\n\r\n    modifier notMigrated() {\r\n        // Checks if base can be migrated\r\n        require(currentState != State.Migrated);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor of ICO. Requires address of accManager,\r\n    /// @param _accManager Address of ICO manager\r\n    function RobotTradingIco(address _accManager) {\r\n        assert(_accManager != 0x0);\r\n\r\n        robottradingToken = new RobotTradingToken(this);\r\n        accManager = _accManager;\r\n    }\r\n\r\n    /// @dev Initialises addresses of founders, tokens owner, accRecive.\r\n    /// Initialises balances of tokens owner\r\n    /// @param _founder Address of founder\r\n    /// @param _partner Address of partner\r\n    /// @param _company Address of company\r\n    /// @param _recive Address of recive\r\n    function init(address _founder, address _partner, address _company, address _recive) onlyManager {\r\n        assert(currentState != State.Init);\r\n        assert(_founder != 0x0);\r\n        assert(_recive != 0x0);\r\n\r\n        accFounder = _founder;\r\n        accPartner = _partner;\r\n        accCompany = _company;\r\n        accRecive = _recive;\r\n\r\n        currentState = State.Init;\r\n    }\r\n\r\n    /// @dev Sets new state\r\n    /// @param _newState Value of new state\r\n    function setState(State _newState) public onlyManager\r\n    {\r\n        currentState = _newState;\r\n        if(currentState == State.Running) {\r\n            roundData[roundICO].dateStart = now;\r\n        }\r\n    }\r\n    /// @dev Sets new round ico\r\n    function setNewIco(uint _round, uint _price, uint _startDate, uint _endDate,  uint _newAmount) public onlyManager  whenInitialized {\r\n \r\n        require(roundData.length == _round);\r\n\r\n        RoundStruct memory roundStruct;\r\n        roundData.push(roundStruct);\r\n\r\n        roundICO = _round; // round 1 input 1\r\n        roundData[_round].round = _round;\r\n        roundData[_round].price = _price;\r\n        roundData[_round].supply = mul(_newAmount, BASE); //input 10000 got 10000 token for this ico\r\n        roundData[_round].recive = 0;\r\n        roundData[_round].soldTokens = 0;\r\n        roundData[_round].sendTokens = 0;\r\n        roundData[_round].dateStart = _startDate;\r\n        roundData[_round].dateEnd = _endDate;\r\n\r\n    }\r\n\r\n\r\n    /// @dev Sets manager. Only manager can do it\r\n    /// @param _accManager Address of new ICO manager\r\n    function setManager(address _accManager) onlyManager {\r\n        assert(_accManager != 0x0);\r\n        accManager = _accManager;\r\n    }\r\n\r\n    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    function buyTokens(address _buyer) private {\r\n        assert(_buyer != 0x0 && roundData[roundICO].dateEnd >= now && roundData[roundICO].dateStart <= now);\r\n        require(msg.value > 0);\r\n\r\n        uint tokensToEmit =  mul(msg.value, roundData[roundICO].price);\r\n\r\n        if(roundICO==0){\r\n            tokensToEmit =  dateBonus(roundICO, roundData[roundICO].dateEnd, tokensToEmit);\r\n        }\r\n        require(add(roundData[roundICO].soldTokens, tokensToEmit) <= roundData[roundICO].supply);\r\n        roundData[roundICO].soldTokens = add(roundData[roundICO].soldTokens, tokensToEmit);\r\n \r\n        //emit tokens to token holder\r\n        robottradingToken.emitTokens(_buyer, tokensToEmit);\r\n        etherRaised = add(etherRaised, msg.value);\r\n    }\r\n\r\n    /// @dev Fall back function ~50k-100k gas\r\n    function () payable onIcoRunning {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Burn tokens from accounts only in state \"not migrated\". Only manager can do it\r\n    /// @param _from Address of account\r\n    function burnTokens(address _from, uint _value) onlyManager notMigrated {\r\n        robottradingToken.burnTokens(_from, _value);\r\n    }\r\n\r\n    /// @dev Partial withdraw. Only manager can do it\r\n    function withdrawEther(uint _value) onlyManager {\r\n        require(_value > 0);\r\n        assert(_value <= this.balance);\r\n        // send 123 to get 1.23\r\n        accRecive.transfer(_value * 10000000000000000); // 10^16\r\n    }\r\n\r\n    /// @dev Ether withdraw. Only manager can do it\r\n    function withdrawAllEther() onlyManager {\r\n        if(this.balance > 0)\r\n        {\r\n            accRecive.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    ///@dev Send tokens to Partner.\r\n    function sendTokensToPartner() onlyManager whenInitialized {\r\n        require(!sentTokensToPartner);\r\n\r\n        uint tokensSold = add(roundData[0].soldTokens, roundData[1].soldTokens);\r\n        uint partnerTokens = mulByFraction(supplyLimit, 11, 100); // 11%\r\n\r\n        tokensToPartner = sub(partnerTokens,tokensSold);\r\n        robottradingToken.emitTokens(accPartner, partnerTokens);\r\n        sentTokensToPartner = true;\r\n    }\r\n\r\n    /// @dev Send limit tokens to Partner. Can't be sent no more limit 11%\r\n    function sendLimitTokensToPartner(uint _value) onlyManager whenInitialized {\r\n        require(!sentTokensToPartner);\r\n        uint partnerLimit = mulByFraction(supplyLimit, 11, 100); // calc token 11%\r\n        uint partnerReward = sub(partnerLimit, tokensToPartner); // calc token <= 11%\r\n        uint partnerValue = mul(_value, BASE); // send 123 to get 123 token no decimel\r\n\r\n        require(partnerReward >= partnerValue);\r\n        tokensToPartner = add(tokensToPartner, partnerValue);\r\n        robottradingToken.emitTokens(accPartner, partnerValue);\r\n    }\r\n\r\n    /// @dev Send all tokens to founders. Can't be sent no more limit 30%\r\n    function sendTokensToCompany() onlyManager whenInitialized {\r\n        require(!sentTokensToCompany);\r\n\r\n        //Calculate founder reward depending on total tokens sold\r\n        uint companyLimit = mulByFraction(supplyLimit, 30, 100); // calc token 30%\r\n        uint companyReward = sub(companyLimit, tokensToCompany); // 30% - tokensToCompany = amount for company\r\n\r\n        require(companyReward > 0);\r\n\r\n        tokensToCompany = add(tokensToCompany, companyReward);\r\n\r\n        robottradingToken.emitTokens(accCompany, companyReward);\r\n        sentTokensToCompany = true;\r\n    }\r\n\r\n    /// @dev Send limit tokens to company. Can't be sent no more limit 30%\r\n    function sendLimitTokensToCompany(uint _value) onlyManager whenInitialized {\r\n        require(!sentTokensToCompany);\r\n        uint companyLimit = mulByFraction(supplyLimit, 30, 100); // calc token 30%\r\n        uint companyReward = sub(companyLimit, tokensToCompany); // calc token <= 30%\r\n        uint companyValue = mul(_value, BASE); // send 123 to get 123 token no decimel\r\n\r\n        require(companyReward >= companyValue);\r\n        tokensToCompany = add(tokensToCompany, companyValue);\r\n        robottradingToken.emitTokens(accCompany, companyValue);\r\n    }\r\n\r\n    /// @dev Send all tokens to founders. \r\n    function sendAllTokensToFounder(uint _round) onlyManager whenInitialized {\r\n        require(roundData[_round].soldTokens>=1);\r\n\r\n        uint icoToken = add(roundData[_round].soldTokens,roundData[_round].sendTokens);\r\n        uint icoSupply = roundData[_round].supply;\r\n\r\n        uint founderValue = sub(icoSupply, icoToken);\r\n\r\n        roundData[_round].sendTokens = add(roundData[_round].sendTokens, founderValue);\r\n        tokensToFunder = add(tokensToFunder,founderValue);\r\n        robottradingToken.emitTokens(accFounder, founderValue);\r\n    }\r\n\r\n    /// @dev Send limit tokens to founders. \r\n    function sendLimitTokensToFounder(uint _round, uint _value) onlyManager whenInitialized {\r\n        require(roundData[_round].soldTokens>=1);\r\n\r\n        uint icoToken = add(roundData[_round].soldTokens,roundData[_round].sendTokens);\r\n        uint icoSupply = roundData[_round].supply;\r\n\r\n        uint founderReward = sub(icoSupply, icoToken);\r\n        uint founderValue = mul(_value, BASE); // send 123 to get 123 token no decimel\r\n\r\n        require(founderReward >= founderValue);\r\n\r\n        roundData[_round].sendTokens = add(roundData[_round].sendTokens, founderValue);\r\n        tokensToFunder = add(tokensToFunder,founderValue);\r\n        robottradingToken.emitTokens(accFounder, founderValue);\r\n    }\r\n\r\n    /// @dev inc Supply tokens . Can't be inc no more 35%\r\n    function incSupply(uint _percent) onlyManager whenInitialized {\r\n        require(_percent<=35);\r\n        supplyLimit = add(supplyLimit,mulByFraction(supplyLimit, _percent, 100));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"incSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_company\",\"type\":\"address\"},{\"name\":\"_recive\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendLimitTokensToCompany\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendLimitTokensToFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToCompany\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToPartner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accRecive\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"sendAllTokensToFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setNewIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToFunder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundData\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"recive\",\"type\":\"uint256\"},{\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"name\":\"sendTokens\",\"type\":\"uint256\"},{\"name\":\"dateStart\",\"type\":\"uint256\"},{\"name\":\"dateEnd\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"robottradingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendLimitTokensToPartner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_accManager\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"RobotTradingIco","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000020fc0d54ce82f614e7cf0bd8a74031061eaeb211","Library":"","SwarmSource":"bzzr://811c70e88f44d2775a8fa31722a53c41a05e00c585f6b878eef6c18de314d3d4"}]}