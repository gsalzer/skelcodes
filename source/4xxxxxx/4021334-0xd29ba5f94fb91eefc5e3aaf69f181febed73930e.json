{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n// ERC20 token interface is implemented only partially\r\n// (no SafeMath is used because contract code is very simple)\r\n// \r\n// Some functions left undefined:\r\n//  - transfer, transferFrom,\r\n//  - approve, allowance.\r\ncontract PresaleToken\r\n{\r\n/// Fields:\r\n    string public constant name = \"IMMLA Presale Token\";\r\n    string public constant symbol = \"IML\";\r\n    uint public constant decimals = 18;\r\n    uint public constant PRICE = 5200;  // per 1 Ether\r\n\r\n    //  price\r\n    // Cap is 2747 ETH\r\n    // 1 eth = 5200;  presale IMMLA tokens\r\n    // 1 IML = 0,000192 ETH\r\n    // ETH price ~220$ - 10.07.2017\r\n    uint public constant TOKEN_SUPPLY_LIMIT = PRICE * 2747 * (1 ether / 1 wei);\r\n\r\n    enum State{\r\n       Init,\r\n       Running,\r\n       Paused,\r\n       Migrating,\r\n       Migrated\r\n    }\r\n\r\n    State public currentState = State.Running;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow = 0;\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager = 0;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager = 0;\r\n\r\n    mapping (address => uint256) private balance;\r\n\r\n/// Modifiers:\r\n    modifier onlyTokenManager()     { if(msg.sender != tokenManager) throw; _; }\r\n    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) throw; _; }\r\n    modifier onlyInState(State state){ if(state != currentState) throw; _; }\r\n\r\n/// Events:\r\n    event LogBuy(address indexed owner, uint value);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogStateSwitch(State newState);\r\n\r\n/// Functions:\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    function PresaleToken(address _tokenManager, address _escrow) \r\n    {\r\n        if(_tokenManager==0) throw;\r\n        if(_escrow==0) throw;\r\n\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n    }\r\n\r\n    function buyTokens(address _buyer) public payable onlyInState(State.Running)\r\n    {\r\n        if(msg.value == 0) throw;\r\n        uint newTokens = msg.value * PRICE;\r\n\r\n        if (totalSupply + newTokens > TOKEN_SUPPLY_LIMIT) throw;\r\n\r\n        balance[_buyer] += newTokens;\r\n        totalSupply += newTokens;\r\n\r\n        LogBuy(_buyer, newTokens);\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public onlyCrowdsaleManager onlyInState(State.Migrating)\r\n    {\r\n        uint tokens = balance[_owner];\r\n        if(tokens == 0) throw;\r\n\r\n        balance[_owner] = 0;\r\n        totalSupply -= tokens;\r\n\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if(totalSupply == 0) \r\n        {\r\n            currentState = State.Migrated;\r\n            LogStateSwitch(State.Migrated);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256) \r\n    {\r\n        return balance[_owner];\r\n    }\r\n\r\n    function setPresaleState(State _nextState) public onlyTokenManager\r\n    {\r\n        // Init -> Running\r\n        // Running -> Paused\r\n        // Running -> Migrating\r\n        // Paused -> Running\r\n        // Paused -> Migrating\r\n        // Migrating -> Migrated\r\n        bool canSwitchState\r\n             =  (currentState == State.Init && _nextState == State.Running)\r\n             || (currentState == State.Running && _nextState == State.Paused)\r\n             // switch to migration phase only if crowdsale manager is set\r\n             || ((currentState == State.Running || currentState == State.Paused)\r\n                 && _nextState == State.Migrating\r\n                 && crowdsaleManager != 0x0)\r\n             || (currentState == State.Paused && _nextState == State.Running)\r\n             // switch to migrated only if everyting is migrated\r\n             || (currentState == State.Migrating && _nextState == State.Migrated\r\n                 && totalSupply == 0);\r\n\r\n        if(!canSwitchState) throw;\r\n\r\n        currentState = _nextState;\r\n        LogStateSwitch(_nextState);\r\n    }\r\n\r\n    function withdrawEther() public onlyTokenManager\r\n    {\r\n        if(this.balance > 0) \r\n        {\r\n            if(!escrow.send(this.balance)) throw;\r\n        }\r\n    }\r\n\r\n/// Setters/getters\r\n    function setTokenManager(address _mgr) public onlyTokenManager\r\n    {\r\n        tokenManager = _mgr;\r\n    }\r\n\r\n    function setCrowdsaleManager(address _mgr) public onlyTokenManager\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        if(currentState == State.Migrating) throw;\r\n\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    function getTokenManager()constant returns(address)\r\n    {\r\n        return tokenManager;\r\n    }\r\n\r\n    function getCrowdsaleManager()constant returns(address)\r\n    {\r\n        return crowdsaleManager;\r\n    }\r\n\r\n    function getCurrentState()constant returns(State)\r\n    {\r\n        return currentState;\r\n    }\r\n\r\n    function getPrice()constant returns(uint)\r\n    {\r\n        return PRICE;\r\n    }\r\n\r\n    function getTotalSupply()constant returns(uint)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    // Default fallback function\r\n    function() payable \r\n    {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setPresaleState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"}]","ContractName":"PresaleToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000312C43cBF189a4750395ab16fEf8227266dF8a5700000000000000000000000021716f38a4e1dabe019f2087f4a4a56dcc1fcd74","Library":"","SwarmSource":"bzzr://7d64665277c2f6f53250a5281b757ee4a7a25cfebca47f13ecef502c330c4916"}]}