{"status":"1","message":"OK","result":[{"SourceCode":"contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract ShareToken {\r\n    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    address public corporationContract;\r\n    mapping (address => bool) public identityApproved;\r\n    mapping (address => bool) public voteLock; // user must keep at least 1 share if they are involved in voting  True=locked\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    //event Transfer(address indexed from, address indexed to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time);\r\n\r\n    uint256 public transferCount = 0;\r\n\r\n\r\n    struct pasttransfer {\r\n      address  from;\r\n      address  to;\r\n      uint256 beforesender;\r\n      uint256 beforereceiver;\r\n      uint256 value;\r\n      uint256 time;\r\n    }\r\n\r\n    pasttransfer[] transfers;\r\n\r\n    modifier onlyCorp() {\r\n        require(msg.sender == corporationContract);\r\n        _;\r\n    }\r\n    // Sender: Corporation  --->\r\n    function ShareToken() {\r\n\r\n    }\r\n\r\n    function init(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address _owner) {\r\n      corporationContract = msg.sender;\r\n      balanceOf[_owner] = initialSupply;                     // Give the creator all initial tokens\r\n      identityApproved[_owner] = true;\r\n      totalSupply = initialSupply;                        // Update total supply\r\n      allowance[_owner][corporationContract] = (totalSupply - 1);   // Allow corporation to sell shares to new members if approved\r\n      name = tokenName;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n      decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n\r\n    function approveMember(address _newMember) public  returns (bool) {\r\n        identityApproved[_newMember] = true;\r\n        return true;\r\n    }\r\n\r\n    function Transfer(address from, address to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time) {\r\n      transferCount++;\r\n      pasttransfer memory t;\r\n      t.from = from;\r\n      t.to = to;\r\n      t.beforesender = beforesender;\r\n      t.beforereceiver = beforereceiver;\r\n      t.value = value;\r\n      t.time = time;\r\n      transfers.push(t);\r\n    }\r\n\r\n    // /* Send coins */\r\n    //  must have identityApproved + can't sell last token using transfer\r\n    function transfer(address _to, uint256 _value) public {\r\n        if (balanceOf[msg.sender] < (_value + 1)) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        require(identityApproved[_to]);\r\n        uint256 receiver = balanceOf[_to];\r\n        uint256 sender = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, sender, receiver, _value, now);                   // Notify anyone listening that this transfer took place\r\n    }\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    /* Approve and then comunicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balanceOf[_from] < (_value + 1)) revert();                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert();   // Check allowance\r\n        require(identityApproved[_to]);\r\n        uint256 receiver = balanceOf[_to];\r\n        uint256 sender = balanceOf[_from];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to,sender, receiver, _value, now);\r\n        return true;\r\n    }\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () {\r\n        revert();     // Prevents accidental sending of ether\r\n    }\r\n\r\n    function isApproved(address _user) constant returns (bool) {\r\n        return identityApproved[_user];\r\n    }\r\n\r\n    function getTransferCount() public view returns (uint256 count) {\r\n      return transferCount;\r\n    }\r\n\r\n    function getTransfer(uint256 i) public view returns (address from, address to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time) {\r\n      pasttransfer memory t = transfers[i];\r\n      return (t.from, t.to, t.beforesender, t.beforereceiver, t.value, t.time);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function getBalance(address _owner) public view returns (uint256 balance) {\r\n      return balanceOf[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTransferCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"identityApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"approveMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"beforesender\",\"type\":\"uint256\"},{\"name\":\"beforereceiver\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"corporationContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTransfer\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"beforesender\",\"type\":\"uint256\"},{\"name\":\"beforereceiver\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"ShareToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0448fe0d0b1d4405ed446b291ca2589b015ca2cc1978343087d9a49fe96cfb5a"}]}