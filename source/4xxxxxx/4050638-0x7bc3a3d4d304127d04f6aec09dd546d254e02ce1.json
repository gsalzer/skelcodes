{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title ERC20Lib\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.1\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The ERC20 Library is inspired by advice offered by Aragon at\r\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736 .\r\n * That version of the library has been modified to provide error messages\r\n * rather than throw errors. This allows the developer to decide how she wants\r\n * handle failed transactions. The developer can choose to assert a true return\r\n * value and allow automatic reversion of state changes or, if no state changes\r\n * have been made, she can trigger an event message to give the user a\r\n * descriptive outcome.\r\n *\r\n * Majoolr works on open source projects in the Ethereum community with the\r\n * purpose of testing, documenting, and deploying reusable code onto the\r\n * blockchain to improve security and usability of smart contracts. Majoolr\r\n * also strives to educate non-profits, schools, and other community members\r\n * about the application of blockchain technology.\r\n * For further information: majoolr.io, aragon.one\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary ERC20Lib {\r\n  using BasicMathLib for uint256;\r\n\r\n  struct TokenStorage {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint totalSupply;\r\n  }\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event ErrorMsg(string msg);\r\n\r\n  /// @dev Called by the Standard Token upon creation.\r\n  /// @param self Stored token from token contract\r\n  /// @param _initial_supply The initial token supply\r\n  function init(TokenStorage storage self, uint256 _initial_supply) {\r\n    require(self.totalSupply == 0);\r\n    self.totalSupply = _initial_supply;\r\n    self.balances[msg.sender] = _initial_supply;\r\n  }\r\n\r\n  /// @dev Transfer tokens from caller's account to another account.\r\n  /// @param self Stored token from token contract\r\n  /// @param _to Address to send tokens\r\n  /// @param _value Number of tokens to send\r\n  /// @return success True if completed, false otherwise\r\n  function transfer(TokenStorage storage self, address _to, uint256 _value) returns (bool success) {\r\n    bool err;\r\n    uint256 balance;\r\n\r\n    (err,balance) = self.balances[msg.sender].minus(_value);\r\n    if(err) {\r\n      ErrorMsg(\"Balance too low for transfer\");\r\n      return false;\r\n    }\r\n    self.balances[msg.sender] = balance;\r\n    //It's not possible to overflow token supply\r\n    self.balances[_to] = self.balances[_to] + _value;\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Authorized caller transfers tokens from one account to another\r\n  /// @param self Stored token from token contract\r\n  /// @param _from Address to send tokens from\r\n  /// @param _to Address to send tokens to\r\n  /// @param _value Number of tokens to send\r\n  /// @return success True if completed, false otherwise\r\n  function transferFrom(TokenStorage storage self,\r\n                        address _from,\r\n                        address _to,\r\n                        uint256 _value)\r\n                        returns (bool success) {\r\n    var _allowance = self.allowed[_from][msg.sender];\r\n    bool err;\r\n    uint256 balanceOwner;\r\n    uint256 balanceSpender;\r\n\r\n    (err,balanceOwner) = self.balances[_from].minus(_value);\r\n    if(err) {\r\n      ErrorMsg(\"Balance too low for transfer\");\r\n      return false;\r\n    }\r\n\r\n    (err,balanceSpender) = _allowance.minus(_value);\r\n    if(err) {\r\n      ErrorMsg(\"Transfer exceeds allowance\");\r\n      return false;\r\n    }\r\n    self.balances[_from] = balanceOwner;\r\n    self.allowed[_from][msg.sender] = balanceSpender;\r\n    self.balances[_to] = self.balances[_to] + _value;\r\n\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Retrieve token balance for an account\r\n  /// @param self Stored token from token contract\r\n  /// @param _owner Address to retrieve balance of\r\n  /// @return balance The number of tokens in the subject account\r\n  function balanceOf(TokenStorage storage self, address _owner) constant returns (uint256 balance) {\r\n    return self.balances[_owner];\r\n  }\r\n\r\n  /// @dev Authorize an account to send tokens on caller's behalf\r\n  /// @param self Stored token from token contract\r\n  /// @param _spender Address to authorize\r\n  /// @param _value Number of tokens authorized account may send\r\n  /// @return success True if completed, false otherwise\r\n  function approve(TokenStorage storage self, address _spender, uint256 _value) returns (bool success) {\r\n    self.allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Remaining tokens third party spender has to send\r\n  /// @param self Stored token from token contract\r\n  /// @param _owner Address of token holder\r\n  /// @param _spender Address of authorized spender\r\n  /// @return remaining Number of tokens spender has left in owner's account\r\n  function allowance(TokenStorage storage self, address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return self.allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Basic Math Library\r\n * @author Majoolr.io\r\n *\r\n * version 1.0.0\r\n * Copyright (c) 2017 Majoolr, LLC\r\n * The MIT License (MIT)\r\n * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The Basic Math Library is inspired by the Safe Math library written by\r\n * OpenZeppelin at https://github.com/OpenZeppelin/zeppelin-solidity/ .\r\n * Majoolr works on open source projects in the Ethereum community with the\r\n * purpose of testing, documenting, and deploying reusable code onto the\r\n * blockchain to improve security and usability of smart contracts. Majoolr\r\n * also strives to educate non-profits, schools, and other community members\r\n * about the application of blockchain technology.\r\n * For further information: majoolr.io, openzeppelin.org\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nlibrary BasicMathLib {\r\n  event Err(string typeErr);\r\n\r\n  /// @dev Multiplies two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The product of a and b, or 0 if there is overflow\r\n  function times(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := mul(a,b)\r\n      jumpi(allGood, or(iszero(b), eq(div(res,b), a)))\r\n      err := 1\r\n      res := 0\r\n      allGood:\r\n    }\r\n    if (err)\r\n      Err(\"times func overflow\");\r\n  }\r\n\r\n  /// @dev Divides two numbers but checks for 0 in the divisor first.\r\n  /// Does not throw but rather logs an Err event if 0 is in the divisor.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if `b` is 0\r\n  /// @return res The quotient of a and b, or 0 if `b` is 0\r\n  function dividedBy(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      jumpi(e, iszero(b))\r\n      res := div(a,b)\r\n      mstore(add(mload(0x40),0x20),res)\r\n      return(mload(0x40),0x40)\r\n      e:\r\n    }\r\n    Err(\"tried to divide by zero\");\r\n    return (true, 0);\r\n  }\r\n\r\n  /// @dev Adds two numbers and checks for overflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is overflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is overflow\r\n  /// @return res The sum of a and b, or 0 if there is overflow\r\n  function plus(uint256 a, uint256 b) constant returns (bool err, uint256 res) {\r\n    assembly{\r\n      res := add(a,b)\r\n      jumpi(allGood, and(eq(sub(res,b), a), gt(res,b)))\r\n      err := 1\r\n      res := 0\r\n      allGood:\r\n    }\r\n    if (err)\r\n      Err(\"plus func overflow\");\r\n  }\r\n\r\n  /// @dev Subtracts two numbers and checks for underflow before returning.\r\n  /// Does not throw but rather logs an Err event if there is underflow.\r\n  /// @param a First number\r\n  /// @param b Second number\r\n  /// @return err False normally, or true if there is underflow\r\n  /// @return res The difference between a and b, or 0 if there is underflow\r\n  function minus(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\r\n    assembly{\r\n      res := sub(a,b)\r\n      jumpi(allGood, eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1))\r\n      err := 1\r\n      res := 0\r\n      allGood:\r\n    }\r\n    if (err)\r\n      Err(\"minus func underflow\");\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_initial_supply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ERC20Lib.TokenStorage storage\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"ErrorMsg\",\"type\":\"event\"}]","ContractName":"ERC20Lib","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"BasicMathLib:3e25cde3fb9c93e4c617fe91c8c0d6720c87d61e","SwarmSource":"bzzr://1b78a47523a9bd5a3872b714981268b823c2c9f9a22559f7f8c2b3827042e727"}]}