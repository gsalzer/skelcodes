{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract token { function transfer(address receiver, uint amount){  } }\r\ncontract WaterCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // uint256 durationInMinutes;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // token address\r\n  address addressOfTokenUsedAsReward;\r\n\r\n  token tokenReward;\r\n\r\n\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTimeInMinutes;\r\n  uint256 public endTimeinMinutes;\r\n  uint public fundingGoal;\r\n  uint public minimumFundingGoal;\r\n  uint256 public price;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public firstWeekBonusInWeek;\r\n  uint256 public secondWeekBonusInWeek;\r\n  uint256 public thirdWeekBonusInWeek;\r\n \r\n  \r\n  mapping(address => uint256) public balanceOf;\r\n  bool fundingGoalReached = false;\r\n  bool crowdsaleClosed = false;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event FundTransfer(address backer, uint amount, bool isContribution);\r\n  event GoalReached(address recipient, uint totalAmountRaised);\r\n  \r\n  modifier isMinimum() {\r\n         if(msg.value < 500000000000000000) throw;\r\n        _;\r\n    }\r\n    \r\n  modifier afterDeadline() { \r\n      if (now <= endTimeinMinutes) throw;\r\n      _;\r\n  }    \r\n\r\n  function WaterCrowdsale(uint256 _startTimeInMinutes, \r\n  uint256 _endTimeInMinutes, \r\n  address _beneficiary, \r\n  address _addressTokenUsedAsReward,\r\n  uint256 _tokenConvertioninEther,\r\n  uint256 _fundingGoalInEther,\r\n  uint256 _minimumFundingGoalInEther,\r\n  uint256 _firstWeekBonusInWeek,\r\n  uint256 _secondWeekBonusInWeek,\r\n  uint256 _thirdWeekBonusInWeek ) {\r\n    wallet = _beneficiary;\r\n    // durationInMinutes = _durationInMinutes;\r\n    addressOfTokenUsedAsReward = _addressTokenUsedAsReward;\r\n    price = _tokenConvertioninEther;\r\n    fundingGoal = _fundingGoalInEther * 1 ether;\r\n    minimumFundingGoal = _minimumFundingGoalInEther * 1 ether;\r\n    tokenReward = token(addressOfTokenUsedAsReward);\r\n    //startTime = now + 28250 * 1 minutes;\r\n    startTimeInMinutes = now + _startTimeInMinutes * 1 minutes;\r\n    firstWeekBonusInWeek = startTimeInMinutes + _firstWeekBonusInWeek*7*24*60* 1 minutes;\r\n    secondWeekBonusInWeek = startTimeInMinutes + _secondWeekBonusInWeek*7*24*60* 1 minutes;\r\n    thirdWeekBonusInWeek = startTimeInMinutes + _thirdWeekBonusInWeek*7*24*60* 1 minutes;\r\n\r\n    endTimeinMinutes = startTimeInMinutes + _endTimeInMinutes * 1 minutes;\r\n    \r\n    //endTime = startTime + 64*24*60 * 1 minutes;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable isMinimum{\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be sent\r\n    uint256 tokens = (weiAmount) * price;\r\n    \r\n    if(now < firstWeekBonusInWeek){\r\n      tokens += (tokens * 20) / 100;\r\n    }else if(now < secondWeekBonusInWeek){\r\n      tokens += (tokens * 10) / 100;\r\n    }else if(now < thirdWeekBonusInWeek){\r\n      tokens += (tokens * 5) / 100;\r\n    }\r\n    // update state\r\n    balanceOf[msg.sender] += weiAmount;\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokenReward.transfer(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n  \r\n  \r\n  //withdrawal or refund for investor and beneficiary\r\n  function safeWithdrawal() afterDeadline {\r\n        if (weiRaised < fundingGoal && weiRaised < minimumFundingGoal) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                    /*tokenReward.burnFrom(msg.sender, price * amount);*/\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((weiRaised >= fundingGoal || weiRaised >= minimumFundingGoal) && wallet == msg.sender) {\r\n            if (wallet.send(weiRaised)) {\r\n                FundTransfer(wallet, weiRaised, false);\r\n                GoalReached(wallet, weiRaised);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTimeInMinutes && now <= endTimeinMinutes;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTimeinMinutes;\r\n  }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"secondWeekBonusInWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdWeekBonusInWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeinMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeekBonusInWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimeInMinutes\",\"type\":\"uint256\"},{\"name\":\"_endTimeInMinutes\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_addressTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_tokenConvertioninEther\",\"type\":\"uint256\"},{\"name\":\"_fundingGoalInEther\",\"type\":\"uint256\"},{\"name\":\"_minimumFundingGoalInEther\",\"type\":\"uint256\"},{\"name\":\"_firstWeekBonusInWeek\",\"type\":\"uint256\"},{\"name\":\"_secondWeekBonusInWeek\",\"type\":\"uint256\"},{\"name\":\"_thirdWeekBonusInWeek\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"}]","ContractName":"WaterCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000009e3000000000000000000000000000000000000000000000000000000000000c378000000000000000000000000d65966a52407eff77be170ba33e6c83a22abfd260000000000000000000000004f2db9cd7543eea193dc54d5bea3352c66680c76000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000a2c2b0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://10933d2c713e65776a44ad76c547d83b04c4f1a4fe446ea7000e654dc82f5a9e"}]}