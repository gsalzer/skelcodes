{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * VISTA FINTECH  \r\n * SMART CONTRACT FOR CROWNSALE http://www.vistafin.com\r\n * Edit by Ray Indinor\r\n * Approved by Jacky Hsieh\r\n */\r\n\r\npragma solidity ^0.4.11;\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b > 0);\r\n\t\tuint c = a / b;\r\n\t\tassert(a == b * c + a % b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction add(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\t\r\n\tfunction min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\t\r\n\tfunction max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\t\r\n\tfunction min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\t\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\tthrow;\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\t\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\t\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n * Pausable Function\r\n * Abstract contract that allows children to implement an emergency stop function. \r\n */\r\ncontract Pausable is Ownable {\r\n\tbool public stopped = false;\r\n\tmodifier stopInEmergency {\r\n\t\tif (stopped) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n  \r\n\tmodifier onlyInEmergency {\r\n\t\tif (!stopped) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n/*\r\n * EmergencyStop Function\r\n * called by the owner on emergency, triggers stopped state \r\n */\r\nfunction emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n\t}\r\n\r\n\t\r\n/*\r\n * Release EmergencyState Function\r\n * called by the owner on end of emergency, returns to normal state\r\n */  \r\n\r\nfunction release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n\t}\r\n}\r\n\r\n/*\r\n * ERC20Basic class\r\n * Abstract contract that allows children to implement ERC20basic persistent data in state variables.\r\n */ \t\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/*\r\n * ERC20 class\r\n * Abstract contract that allows children to implement ERC20 persistent data in state variables.\r\n */ \r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) constant returns (uint);\r\n\tfunction transferFrom(address from, address to, uint value);\r\n\tfunction approve(address spender, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n/*\r\n * BasicToken class\r\n * Abstract contract that allows children to implement BasicToken functions and  persistent data in state variables.\r\n */\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n\tusing SafeMath for uint;\r\n  \r\n\tmapping(address => uint) balances;\r\n  \r\n\t/*\r\n\t* Fix for the ERC20 short address attack  \r\n\t*/\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tif(msg.data.length < size + 4) {\r\n\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\n\r\n\r\n/*\r\n * StandardToken class\r\n * Abstract contract that allows children to implement StandToken functions and  persistent data in state variables.\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\tfunction approve(address _spender, uint _value) {\r\n\t\t// To change the approve amount you first have to reduce the addresses`\r\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n\t\t//  already 0 to mitigate the race condition described here:\r\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\tif ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * ================================================================================\r\n * VISTA token smart contract. Implements\r\n * VISTACOIN class\r\n */\r\ncontract VISTAcoin is StandardToken, Ownable {\r\n\tstring public constant name = \"VISTAcoin\";\r\n\tstring public constant symbol = \"VTA\";\r\n\tuint public constant decimals = 0;\r\n\t// Constructor\r\n\tfunction VISTAcoin() {\r\n\t\ttotalSupply = 50000000;\r\n\t\tbalances[msg.sender] = totalSupply; // Send all tokens to owner\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Crowdsale Smart Contract for VISTA FINTECH\r\n * This smart contract collects ETH, and in return emits VISTAcoin tokens to the backers\r\n */\r\ncontract VISTACrowdSaleP1 is Pausable {\r\n    \r\n    using SafeMath for uint;\r\n    struct Backer {\r\n        uint weiReceived; // Amount of Ether given\r\n        uint coinSent;\r\n    }\r\n\t\r\n    /*\r\n    * Constants\r\n    */\r\n    /* Minimum number of VISTAcoin to sell */\r\n    uint public constant MIN_CAP = 1; // 1 VISTAcoins\r\n    /* Maximum number of VISTAcoin to sell */\r\n    uint public constant MAX_CAP = 5000000; // 5000 VISTAcoins\r\n    /* Minimum amount to invest */\r\n    uint public constant MIN_INVEST_ETHER = 500 finney;\r\n    /* Crowdsale period */\r\n    uint private constant CROWDSALE_PERIOD = 15 days;\r\n    /* Number of VISTAcoins per Ether */\r\n    uint public constant COIN_PER_ETHER = 350; // 1 VISTAcoins/eth\r\n\t\r\n\t\r\n\t\r\n\t\r\n    /*\r\n    * Variables\r\n    */\r\n    /* VISTAcoin contract reference */\r\n    VISTAcoin public coin;\r\n    /* Multisig contract that will receive the Ether */\r\n    address public multisigEther;\r\n    /* Number of Ether received */\r\n    uint public etherReceived;\r\n    /* Number of VISTAcoins sent to Ether contributors */\r\n    uint public coinSentToEther;\r\n    /* Crowdsale start time */\r\n    uint public startTime;\r\n    /* Crowdsale end time */\r\n    uint public endTime;\r\n    /* Is crowdsale still on going */\r\n    bool public crowdsaleClosed = false;\r\n    /* Backers Ether indexed by their Ethereum address */\r\n    mapping(address => Backer) public backers;\r\n\t\r\n\t\r\n\t\r\n\t\r\n    /*\r\n    * Modifiers\r\n    */\r\n    modifier minCapNotReached() {\r\n        if ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\r\n        _;\r\n    }\r\n    modifier respectTimeFrame() {\r\n        if ((now < startTime) || (now > endTime )) throw;\r\n        _;\r\n    }\r\n\t\r\n\t\r\n    /*\r\n     * Event\r\n    */\r\n    event LogReceivedETH(address addr, uint value);\r\n    event LogCoinsEmited(address indexed from, uint amount);\r\n\t\r\n\t\r\n    /*\r\n     * Constructor\r\n    */\r\n    function VISTACrowdSaleP1(address _VISTAcoinAddress, address _to) {\r\n        coin = VISTAcoin(_VISTAcoinAddress);\r\n        multisigEther = _to;\r\n    }\r\n\t\r\n\t\r\n    /* \r\n     * The fallback function corresponds to a donation in ETH\r\n     */\r\n    function() stopInEmergency respectTimeFrame payable {\r\n        if (crowdsaleClosed) throw; //Crowdsale was closed.\r\n\t\treceiveETH(msg.sender);\r\n    }\r\n\t\r\n\t\r\n    /* \r\n     * To call to start the crowdsale\r\n     */\r\n    function start() onlyOwner {\r\n        if (startTime != 0) throw; // Crowdsale was already started\r\n        startTime = now ;            \r\n        endTime =  now + CROWDSALE_PERIOD;    \r\n    }\r\n\t\r\n\t\r\n    /*\r\n     *  Receives a donation in Ether\r\n    */\r\n    function receiveETH(address beneficiary) internal {\r\n        if (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold        \r\n        uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of VISTAcoin to send\r\n        if (coinToSend.add(coinSentToEther) > MAX_CAP) throw;    \r\n        Backer backer = backers[beneficiary];\r\n        coin.transfer(beneficiary, coinToSend); // Transfer VISTAcoins right now\r\n\t\tif (!multisigEther.send(this.balance)) throw; //Transfer ETH to VISTA ECC\t\t\r\n        backer.coinSent = backer.coinSent.add(coinToSend);\r\n        backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \r\n        etherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\r\n        coinSentToEther = coinSentToEther.add(coinToSend);\r\n        // Send events\r\n        LogCoinsEmited(msg.sender ,coinToSend);\r\n        LogReceivedETH(beneficiary, etherReceived); \r\n    }\r\n    \r\n    /*\r\n     *Compute the VISTAcoin BONUS according to the investment period\r\n     */\r\n    function bonus(uint amount) internal constant returns (uint) {\r\n        return amount.add(amount.div(5));   // bonus 20%\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t\r\n    /*  \r\n     * FINALIZE the crowdsale, should be called after ico period\r\n    */\r\n    function finalize() onlyOwner public {\r\n        if (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\r\n            if (coinSentToEther == MAX_CAP) {\r\n            } else {\r\n                throw;\r\n            }\r\n        }\r\n        if (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\r\n\t\tgetRemainCoins();\r\n        crowdsaleClosed = true;\r\n    }\r\n\t\r\n\t\r\n    /*  \r\n    * Failsafe drain\r\n    */\r\n    function drain() onlyOwner {\r\n        if (!owner.send(this.balance)) throw;\r\n    }\r\n\t\r\n\t\r\n    /**\r\n     * Allow to change the team multisig address in the case of emergency.\r\n     */\r\n    function setMultisig(address addr) onlyOwner public {\r\n        if (addr == address(0)) throw;\r\n        multisigEther = addr;\r\n    }\r\n\t\r\n\t\r\n    /**\r\n     * Manually back VISTAcoin owner address.\r\n     */\r\n    function backVISTAcoinOwner() onlyOwner public {\r\n        coin.transferOwnership(owner);\r\n    }\r\n\t\r\n\t\r\n    /**\r\n     * Get reamin coins back to owner\r\n     */\r\n    function getRemainCoins() onlyOwner public {\r\n        var remains = MAX_CAP - coinSentToEther;\r\n        Backer backer = backers[owner];\r\n        coin.transfer(owner, remains); // Transfer VISTAcoins right now \r\n        backer.coinSent = backer.coinSent.add(remains);\r\n        coinSentToEther = coinSentToEther.add(remains);\r\n        // Send events\r\n        LogCoinsEmited(this ,remains);\r\n        LogReceivedETH(owner, etherReceived); \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"backVISTAcoinOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSentToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"coinSent\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigEther\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRemainCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VISTAcoinAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCoinsEmited\",\"type\":\"event\"}]","ContractName":"VISTACrowdSaleP1","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000008DDf9bEFBD9d9B5a6caAB525eCf8C8CCA0b98400000000000000000000000008Ace2c94a0d5D243c25D0d29B6e370647A2B926C","Library":"","SwarmSource":"bzzr://4a3cd4ae2589f5d50d0e8647cfd38a83da8a3d9eb62cc2e8af6739948d22b5c8"}]}