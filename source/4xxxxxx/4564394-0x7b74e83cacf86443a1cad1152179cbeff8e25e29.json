{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract RaiseFundsForACause {\r\n\r\n    // Base definitions\r\n    address public owner;\r\n    address public receiver;\r\n    string public cause;\r\n    uint256 public expirationInSeconds;\r\n    bool public hasBeenClaimed;\r\n    uint256 public timeStarted;\r\n\r\n    // Dynamic data\r\n    uint256 public minimumAmountRequired;\r\n    uint256 public numPayments;\r\n    uint256 public totalAmountRaised;\r\n    mapping(address => uint256) donationData;\r\n\r\n    function RaiseFundsForACause(address beneficiary, string message, uint256 secondsUntilExpiration)\r\n        public\r\n    {\r\n        require(beneficiary != 0x0);\r\n        require(secondsUntilExpiration > 0);\r\n\r\n        owner = msg.sender;\r\n        receiver = beneficiary;\r\n        cause = message;\r\n        expirationInSeconds = secondsUntilExpiration;\r\n        hasBeenClaimed = false;\r\n\r\n        minimumAmountRequired = 0;\r\n        numPayments = 0;\r\n        totalAmountRaised = 0;\r\n        timeStarted = block.timestamp;\r\n    }\r\n\r\n    function ()\r\n        public\r\n    {\r\n        throw;\r\n    }\r\n\r\n    function donate()\r\n        public\r\n        payable\r\n    {\r\n        require(msg.sender != receiver);\r\n        require(block.timestamp < (timeStarted + expirationInSeconds));\r\n        require(msg.value > 0);\r\n        require(minimumAmountRequired != 0);\r\n        require(hasBeenClaimed == false);\r\n\r\n        assert(donationData[msg.sender] + msg.value >= donationData[msg.sender]);\r\n        assert(totalAmountRaised + msg.value >= totalAmountRaised);\r\n        assert(numPayments + 1 >= numPayments);\r\n\r\n        donationData[msg.sender] += msg.value;\r\n        totalAmountRaised += msg.value;\r\n        numPayments += 1;\r\n    }\r\n\r\n    // Note: can only be set once\r\n    function receiverSetAmountRequired(uint256 minimum)\r\n        public\r\n    {\r\n        require(msg.sender == receiver);\r\n        require(minimumAmountRequired == 0);\r\n        require(minimum > 0);\r\n\r\n        minimumAmountRequired = minimum;\r\n    }\r\n\r\n    function receiverWithdraw()\r\n        public\r\n    {\r\n        require(msg.sender == receiver);\r\n        require(totalAmountRaised >= minimumAmountRequired);\r\n        require(this.balance > 0);\r\n        require(block.timestamp < (timeStarted + expirationInSeconds));\r\n        require(hasBeenClaimed == false);\r\n\r\n        hasBeenClaimed = true;\r\n        receiver.transfer(this.balance);\r\n        // Expecting transfer to throw on error\r\n        // assert(this.balance == 0);\r\n    }\r\n\r\n    function withdraw()\r\n        public\r\n    {\r\n        require(donationData[msg.sender] > 0);\r\n        require(block.timestamp > (timeStarted + expirationInSeconds));\r\n        require(hasBeenClaimed == false);\r\n\r\n        var value = donationData[msg.sender];\r\n        donationData[msg.sender] = 0;\r\n        msg.sender.transfer(value);\r\n        // Expecting transfer to throw on error\r\n        // assert(donationData[donor] == 0);\r\n    }\r\n\r\n    function currentTotalExcess()\r\n        public\r\n        constant returns (uint256)\r\n    {\r\n        if (totalAmountRaised > minimumAmountRequired) {\r\n            return totalAmountRaised - minimumAmountRequired;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function expirationTimestamp()\r\n        public\r\n        constant returns (uint256)\r\n    {\r\n        assert((timeStarted + expirationInSeconds) >= timeStarted);\r\n        return (timeStarted + expirationInSeconds);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumAmountRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationInSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiverWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cause\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"receiverSetAmountRequired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalExcess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasBeenClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"secondsUntilExpiration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"RaiseFundsForACause","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fdb33f8ac7ce72d7d4795dd8610e323b4c122fbb000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000000000000000000000000000000000000000000002d53756d6d6f6e204e69636b204a6f686e736f6e20746f2054686520446563656e7472616c697a65642043616d7000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://68618151dc0a64646c9b0206a9e57f4a8ff204a6261a698667f42b6970527554"}]}