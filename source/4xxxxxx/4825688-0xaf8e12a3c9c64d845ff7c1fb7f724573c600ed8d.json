{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract REPOExchange is MintableToken {\r\n\r\n  uint public deal_cancel_rate = 0;\r\n\r\n  struct REPODeal {\r\n    address lender;\r\n    address borrower;\r\n\r\n    address collateral;\r\n    address pledge;\r\n\r\n    uint collateralAmount;\r\n    uint pledgeAmount;\r\n\r\n    uint interest;\r\n    uint lenderFee;\r\n    uint borrowerFee;\r\n\r\n    uint pledgeUntil;\r\n    uint collateralUntil;\r\n    uint endsAt;\r\n\r\n    int state;\r\n\r\n    /* 0 - inited\r\n       1 - pledge payed\r\n       2 - collateral transfered to contract and then to borrower, contract started\r\n       3 - collateral returned to contract in time, pledge and the rest of payment went back, collateral returned, contract successfully closed\r\n\r\n       negative codes mean negative result\r\n\r\n       0 -> -1 pledge was not success fully payed\r\n       0 -> -10 pledge was not success fully payed, but borrower paid in tokens\r\n\r\n       1 -> -2 refused to provide collateral, need to return pledge and payment\r\n       1 -> -20 refused to provide collateral, need to return pledge and payment, collateralter paid in tokens\r\n\r\n       2 -> -3 collateral was not returned in time, pledge and payment transfered to collateralter\r\n    */\r\n\r\n  }\r\n\r\n  event NewDeal(uint dealID, address lender, address borrower, address collateral, address pledge, uint collateralAmount, uint pledgeAmount,\r\n       uint interest, uint lenderFee_, uint borrowerFee_, uint pledgeUntil, uint collateralUntil, uint endsAt);\r\n\r\n  event PledgePayed(uint dealID);\r\n  event PledgeNotPayed(uint dealID);\r\n  event PledgePaymentCanceled(uint dealID);\r\n\r\n  event CollateralTransfered(uint dealID);\r\n  event CollateralNotTransfered(uint dealID);\r\n  event CollateralTransferCanceled(uint dealID);\r\n\r\n  event CollateralReturned(uint dealID);\r\n  event CollateralNotReturned(uint dealID);\r\n\r\n  event DealCancelRate(uint dealCancelRate);\r\n\r\n  function setDealCancelRate(uint deal_cancel_rate_) public {\r\n    require(msg.sender == owner);\r\n    deal_cancel_rate = deal_cancel_rate_;\r\n    DealCancelRate(deal_cancel_rate);\r\n  }\r\n\r\n  function getDealCancelRate() public constant returns (uint _deal_cancel_rate) {\r\n    return deal_cancel_rate;\r\n  }\r\n\r\n\r\n  uint lastDealID;\r\n  mapping (uint => REPODeal) deals;\r\n\r\n  function REPOExchange() public {\r\n  }\r\n\r\n  function() public {\r\n    revert();\r\n  }\r\n\r\n  function newDeal(address lender_, address borrower_, address collateral_, address pledge_, uint collateralAmount_, uint pledgeAmount_,\r\n    uint interest_, uint lenderFee_, uint borrowerFee_, uint pledgeUntil_, uint collateralUntil_, uint endsAt_) public returns (uint dealID) {\r\n    require(msg.sender == owner);\r\n    dealID = lastDealID++;\r\n    deals[dealID] = REPODeal(lender_, borrower_, collateral_, pledge_, collateralAmount_, pledgeAmount_,\r\n      interest_, lenderFee_, borrowerFee_, pledgeUntil_, collateralUntil_, endsAt_, 0);\r\n\r\n    NewDeal(dealID, lender_, borrower_, collateral_, pledge_, collateralAmount_, pledgeAmount_,\r\n      interest_, lenderFee_, borrowerFee_, pledgeUntil_, collateralUntil_, endsAt_);\r\n  }\r\n\r\n  function payPledge(uint dealID) public payable {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 0);\r\n    require(block.number < deal.pledgeUntil);\r\n    require(msg.sender == deal.borrower);\r\n\r\n    uint payment = deal.pledgeAmount + deal.borrowerFee;\r\n    if (deal.pledge == 0) {\r\n      require(msg.value == payment);\r\n    } else {\r\n      require(ERC20(deal.pledge).transferFrom(msg.sender, this, payment));\r\n    }\r\n    //all is ok, now contract has pledge\r\n    deal.state = 1;\r\n    PledgePayed(dealID);\r\n  }\r\n\r\n  function cancelPledgePayment(uint dealID) public {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 0);\r\n    require(msg.sender == deal.borrower);\r\n    require(this.transferFrom(msg.sender, owner, deal_cancel_rate));\r\n    deal.state = -10;\r\n    PledgePaymentCanceled(dealID);\r\n  }\r\n\r\n  function notifyPledgeNotPayed(uint dealID) public {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 0);\r\n    require(block.number >= deal.pledgeUntil);\r\n    deal.state = -1;\r\n    PledgeNotPayed(dealID);\r\n  }\r\n\r\n  function transferCollateral(uint dealID) public payable {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 1);\r\n    require(block.number < deal.collateralUntil);\r\n    require(msg.sender == deal.lender);\r\n\r\n    uint payment = deal.collateralAmount + deal.lenderFee;\r\n    if (deal.collateral == 0) {\r\n      require(msg.value == payment);\r\n      require(deal.borrower.send(deal.collateralAmount));\r\n      require(owner.send(deal.lenderFee));\r\n    } else {\r\n      require(ERC20(deal.collateral).transferFrom(msg.sender, deal.borrower, deal.collateralAmount));\r\n      require(ERC20(deal.collateral).transferFrom(msg.sender, owner, deal.lenderFee));\r\n    }\r\n\r\n    sendGoods(deal.pledge, owner, deal.borrowerFee);\r\n\r\n    deal.state = 2;\r\n    CollateralTransfered(dealID);\r\n  }\r\n\r\n  function cancelCollateralTransfer(uint dealID) public {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 1);\r\n    require(msg.sender == deal.lender);\r\n    require(this.transferFrom(msg.sender, owner, deal_cancel_rate));\r\n\r\n    sendGoods(deal.pledge, deal.borrower, deal.pledgeAmount + deal.borrowerFee);\r\n\r\n    deal.state = -20;\r\n    CollateralTransferCanceled(dealID);\r\n  }\r\n\r\n  function notifyCollateralNotTransfered(uint dealID) public {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 1);\r\n    require(block.number >= deal.collateralUntil);\r\n\r\n    sendGoods(deal.pledge, deal.borrower, deal.pledgeAmount + deal.borrowerFee);\r\n\r\n    deal.state = -2;\r\n    CollateralNotTransfered(dealID);\r\n  }\r\n\r\n  function sendGoods(address goods, address to, uint amount) private {\r\n    if (goods == 0) {\r\n      require(to.send(amount));\r\n    } else {\r\n      require(ERC20(goods).transfer(to, amount));\r\n    }\r\n  }\r\n\r\n  function returnCollateral(uint dealID) public payable {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 2);\r\n    require(block.number < deal.endsAt);\r\n    require(msg.sender == deal.borrower);\r\n\r\n    uint payment = deal.collateralAmount + deal.interest;\r\n    if (deal.collateral == 0) {\r\n      require(msg.value == payment);\r\n      require(deal.lender.send(msg.value));\r\n    } else {\r\n      require(ERC20(deal.collateral).transferFrom(msg.sender, deal.lender, payment));\r\n    }\r\n\r\n    sendGoods(deal.pledge, deal.borrower, deal.pledgeAmount);\r\n\r\n    deal.state = 3;\r\n    CollateralReturned(dealID);\r\n  }\r\n\r\n  function notifyCollateralNotReturned(uint dealID) public {\r\n    REPODeal storage deal = deals[dealID];\r\n    require(deal.state == 2);\r\n    require(block.number >= deal.endsAt);\r\n\r\n    sendGoods(deal.pledge, deal.lender, deal.pledgeAmount);\r\n\r\n    deal.state = -3;\r\n    CollateralNotReturned(dealID);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deal_cancel_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"notifyCollateralNotReturned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDealCancelRate\",\"outputs\":[{\"name\":\"_deal_cancel_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"returnCollateral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"notifyPledgeNotPayed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lender_\",\"type\":\"address\"},{\"name\":\"borrower_\",\"type\":\"address\"},{\"name\":\"collateral_\",\"type\":\"address\"},{\"name\":\"pledge_\",\"type\":\"address\"},{\"name\":\"collateralAmount_\",\"type\":\"uint256\"},{\"name\":\"pledgeAmount_\",\"type\":\"uint256\"},{\"name\":\"interest_\",\"type\":\"uint256\"},{\"name\":\"lenderFee_\",\"type\":\"uint256\"},{\"name\":\"borrowerFee_\",\"type\":\"uint256\"},{\"name\":\"pledgeUntil_\",\"type\":\"uint256\"},{\"name\":\"collateralUntil_\",\"type\":\"uint256\"},{\"name\":\"endsAt_\",\"type\":\"uint256\"}],\"name\":\"newDeal\",\"outputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deal_cancel_rate_\",\"type\":\"uint256\"}],\"name\":\"setDealCancelRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"cancelPledgePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"payPledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"cancelCollateralTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"notifyCollateralNotTransfered\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pledge\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pledgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lenderFee_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"borrowerFee_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pledgeUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collateralUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"NewDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"PledgePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"PledgeNotPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"PledgePaymentCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"CollateralTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"CollateralNotTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"CollateralTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"CollateralReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealID\",\"type\":\"uint256\"}],\"name\":\"CollateralNotReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dealCancelRate\",\"type\":\"uint256\"}],\"name\":\"DealCancelRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"REPOExchange","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://19d984497c28c8270bc7ec441af555876a61e739bade8f7e1ade8be42a64fb4f"}]}