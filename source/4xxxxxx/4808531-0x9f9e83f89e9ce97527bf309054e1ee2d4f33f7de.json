{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\tUtility functions for safe math operations.  See link below for more information:\r\n\thttps://ethereum.stackexchange.com/questions/15258/safemath-safe-add-function-assertions-against-overflows\r\n*/\r\npragma solidity ^0.4.19;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns (uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns (uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0) || (z / x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owner {\r\n\t\r\n\t// Token Name\r\n\tstring public name = \"FoodCoin\";\r\n\t// Token Symbol\r\n\tstring public symbol = \"FOOD\";\r\n\t// Decimals\r\n\tuint256 public decimals = 8;\r\n\t// Version \r\n\tstring public version = \"v1\";\r\n\t\r\n\t// Emission Address\r\n\taddress public emissionAddress = address(0);\r\n\t// Withdraw address\r\n\taddress public withdrawAddress = address(0);\r\n\t\r\n\t// Owners Addresses\r\n\tmapping ( address => bool ) public ownerAddressMap;\r\n\t// Owner Address/Number\r\n\tmapping ( address => uint256 ) public ownerAddressNumberMap;\r\n\t// Owners List\r\n\tmapping ( uint256 => address ) public ownerListMap;\r\n\t// Amount of owners\r\n\tuint256 public ownerCountInt = 0;\r\n\r\n\t// Modifier - Owner\r\n\tmodifier isOwner {\r\n        require( ownerAddressMap[msg.sender]==true );\r\n        _;\r\n    }\r\n\t\r\n\t// Owner Creation/Activation\r\n\tfunction ownerOn( address _onOwnerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// Check if it's a non-zero address\r\n\t\trequire( _onOwnerAddress != address(0) );\r\n\t\t// If the owner is already exist\r\n\t\tif ( ownerAddressNumberMap[ _onOwnerAddress ]>0 )\r\n\t\t{\r\n\t\t\t// If the owner is disablead, activate him again\r\n\t\t\tif ( !ownerAddressMap[ _onOwnerAddress ] )\r\n\t\t\t{\r\n\t\t\t\townerAddressMap[ _onOwnerAddress ] = true;\r\n\t\t\t\tretrnVal = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tretrnVal = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If the owner is not exist\r\n\t\telse\r\n\t\t{\r\n\t\t\townerAddressMap[ _onOwnerAddress ] = true;\r\n\t\t\townerAddressNumberMap[ _onOwnerAddress ] = ownerCountInt;\r\n\t\t\townerListMap[ ownerCountInt ] = _onOwnerAddress;\r\n\t\t\townerCountInt++;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Owner disabled\r\n\tfunction ownerOff( address _offOwnerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// If owner exist and he is not 0 and active\r\n\t\t// 0 owner can`t be off\r\n\t\tif ( ownerAddressNumberMap[ _offOwnerAddress ]>0 && ownerAddressMap[ _offOwnerAddress ] )\r\n\t\t{\r\n\t\t\townerAddressMap[ _offOwnerAddress ] = false;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Token name changing function\r\n\tfunction contractNameUpdate( string _newName, bool updateConfirmation ) external isOwner returns (bool retrnVal) {\r\n\t\t\r\n\t\tif ( updateConfirmation )\r\n\t\t{\r\n\t\t\tname = _newName;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Token symbol changing function\r\n\tfunction contractSymbolUpdate( string _newSymbol, bool updateConfirmation ) external isOwner returns (bool retrnVal) {\r\n\r\n\t\tif ( updateConfirmation )\r\n\t\t{\r\n\t\t\tsymbol = _newSymbol;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Token decimals changing function\r\n\tfunction contractDecimalsUpdate( uint256 _newDecimals, bool updateConfirmation ) external isOwner returns (bool retrnVal) {\r\n\t\t\r\n\t\tif ( updateConfirmation && _newDecimals != decimals )\r\n\t\t{\r\n\t\t\tdecimals = _newDecimals;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// New token emission address setting up \r\n\tfunction emissionAddressUpdate( address _newEmissionAddress ) external isOwner {\r\n\t\temissionAddress = _newEmissionAddress;\r\n\t}\r\n\t\r\n\t// New token withdrawing address setting up\r\n\tfunction withdrawAddressUpdate( address _newWithdrawAddress ) external isOwner {\r\n\t\twithdrawAddress = _newWithdrawAddress;\r\n\t}\r\n\r\n\t// Constructor adds owner to undeletable list\r\n\tfunction Owner() public {\r\n\t\t// Owner creation\r\n\t\townerAddressMap[ msg.sender ] = true;\r\n\t\townerAddressNumberMap[ msg.sender ] = ownerCountInt;\r\n\t\townerListMap[ ownerCountInt ] = msg.sender;\r\n\t\townerCountInt++;\r\n\t}\r\n}\r\n\r\ncontract SpecialManager is Owner {\r\n\r\n\t// Special Managers Addresses\r\n\tmapping ( address => bool ) public specialManagerAddressMap;\r\n\t// Special Manager Address/Number Mapping\r\n\tmapping ( address => uint256 ) public specialManagerAddressNumberMap;\r\n\t// Special Managers List\r\n\tmapping ( uint256 => address ) public specialManagerListMap;\r\n\t// Special Manager Amount\r\n\tuint256 public specialManagerCountInt = 0;\r\n\t\r\n\t// Special Manager or Owner modifier\r\n\tmodifier isSpecialManagerOrOwner {\r\n        require( specialManagerAddressMap[msg.sender]==true || ownerAddressMap[msg.sender]==true );\r\n        _;\r\n    }\r\n\t\r\n\t// Special Manager creation/actination\r\n\tfunction specialManagerOn( address _onSpecialManagerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// Check if it's a non-zero address\r\n\t\trequire( _onSpecialManagerAddress != address(0) );\r\n\t\t// If this special manager already exists\r\n\t\tif ( specialManagerAddressNumberMap[ _onSpecialManagerAddress ]>0 )\r\n\t\t{\r\n\t\t\t// If this special manager disabled, activate him again\r\n\t\t\tif ( !specialManagerAddressMap[ _onSpecialManagerAddress ] )\r\n\t\t\t{\r\n\t\t\t\tspecialManagerAddressMap[ _onSpecialManagerAddress ] = true;\r\n\t\t\t\tretrnVal = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tretrnVal = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If this special manager doesn`t exist\r\n\t\telse\r\n\t\t{\r\n\t\t\tspecialManagerAddressMap[ _onSpecialManagerAddress ] = true;\r\n\t\t\tspecialManagerAddressNumberMap[ _onSpecialManagerAddress ] = specialManagerCountInt;\r\n\t\t\tspecialManagerListMap[ specialManagerCountInt ] = _onSpecialManagerAddress;\r\n\t\t\tspecialManagerCountInt++;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Special manager disactivation\r\n\tfunction specialManagerOff( address _offSpecialManagerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// If this special manager exists and he is non-zero and also active \r\n\t\t// 0-number manager can`t be disactivated\r\n\t\tif ( specialManagerAddressNumberMap[ _offSpecialManagerAddress ]>0 && specialManagerAddressMap[ _offSpecialManagerAddress ] )\r\n\t\t{\r\n\t\t\tspecialManagerAddressMap[ _offSpecialManagerAddress ] = false;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Constructor adds owner to superowner list\r\n\tfunction SpecialManager() public {\r\n\t\t// owner creation\r\n\t\tspecialManagerAddressMap[ msg.sender ] = true;\r\n\t\tspecialManagerAddressNumberMap[ msg.sender ] = specialManagerCountInt;\r\n\t\tspecialManagerListMap[ specialManagerCountInt ] = msg.sender;\r\n\t\tspecialManagerCountInt++;\r\n\t}\r\n}\r\n\r\n\r\ncontract Manager is SpecialManager {\r\n\t\r\n\t// Managers addresses\r\n\tmapping ( address => bool ) public managerAddressMap;\r\n\t// Manager Address/Number Mapping\r\n\tmapping ( address => uint256 ) public managerAddressNumberMap;\r\n\t// Managers` List\r\n\tmapping ( uint256 => address ) public managerListMap;\r\n\t// Amount of managers\r\n\tuint256 public managerCountInt = 0;\r\n\t\r\n\t// Modifier - Manager Or Owner\r\n\tmodifier isManagerOrOwner {\r\n        require( managerAddressMap[msg.sender]==true || ownerAddressMap[msg.sender]==true );\r\n        _;\r\n    }\r\n\t\r\n\t// Owner Creation/Activation\r\n\tfunction managerOn( address _onManagerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// Check if it's a non-zero address\r\n\t\trequire( _onManagerAddress != address(0) );\r\n\t\t// If this special manager exists\r\n\t\tif ( managerAddressNumberMap[ _onManagerAddress ]>0 )\r\n\t\t{\r\n\t\t\t// If this special manager disabled, activate him again\r\n\t\t\tif ( !managerAddressMap[ _onManagerAddress ] )\r\n\t\t\t{\r\n\t\t\t\tmanagerAddressMap[ _onManagerAddress ] = true;\r\n\t\t\t\tretrnVal = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tretrnVal = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If this special manager doesn`t exist\r\n\t\telse\r\n\t\t{\r\n\t\t\tmanagerAddressMap[ _onManagerAddress ] = true;\r\n\t\t\tmanagerAddressNumberMap[ _onManagerAddress ] = managerCountInt;\r\n\t\t\tmanagerListMap[ managerCountInt ] = _onManagerAddress;\r\n\t\t\tmanagerCountInt++;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Manager disactivation\r\n\tfunction managerOff( address _offManagerAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// if it's a non-zero manager and already exists and active\r\n\t\t// 0-number manager can`t be disactivated\r\n\t\tif ( managerAddressNumberMap[ _offManagerAddress ]>0 && managerAddressMap[ _offManagerAddress ] )\r\n\t\t{\r\n\t\t\tmanagerAddressMap[ _offManagerAddress ] = false;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// Constructor adds owner to manager list \r\n\tfunction Manager() public {\r\n\t\t// manager creation\r\n\t\tmanagerAddressMap[ msg.sender ] = true;\r\n\t\tmanagerAddressNumberMap[ msg.sender ] = managerCountInt;\r\n\t\tmanagerListMap[ managerCountInt ] = msg.sender;\r\n\t\tmanagerCountInt++;\r\n\t}\r\n}\r\n\r\n\r\ncontract Management is Manager {\r\n\t\r\n\t// Description\r\n\tstring public description = \"\";\r\n\t\r\n\t// Current tansaction status \r\n\t// TRUE - tansaction available\r\n\t// FALSE - tansaction not available\r\n\tbool public transactionsOn = false;\r\n\t// Special permissions to allow/prohibit transactions to move tokens for specific accounts\r\n\t// 0 - depends on transactionsOn\r\n\t// 1 - always \"forbidden\"\r\n\t// 2 - always \"allowed\"\r\n\tmapping ( address => uint256 ) public transactionsOnForHolder;\r\n\t\r\n\t\r\n\t// Displaying tokens in the balanceOf function for all tokens\r\n\t// TRUE - Displaying available\r\n\t// FALSE - Displaying hidden, shows 0. Checking the token balance available in function balanceOfReal\r\n\tbool public balanceOfOn = true;\r\n\t// Displaying the token balance in function balanceOfReal for definit holder\r\n\t// 0 - depends on transactionsOn\r\n\t// 1 - always \"forbidden\"\r\n\t// 2 - always \"allowed\"\r\n\tmapping ( address => uint256 ) public balanceOfOnForHolder;\r\n\t\r\n\t\r\n\t// Current emission status\r\n\t// TRUE - emission is available, managers may add tokens to contract\r\n\t// FALSE - emission isn`t available, managers may not add tokens to contract\r\n\tbool public emissionOn = true;\r\n\r\n\t// emission cap\r\n\tuint256 public tokenCreationCap = 0;\r\n\t\r\n\t// Addresses list for verification of acoounts owners\r\n\t// Addresses\r\n\tmapping ( address => bool ) public verificationAddressMap;\r\n\t// Verification Address/Number Mapping\r\n\tmapping ( address => uint256 ) public verificationAddressNumberMap;\r\n\t// Verification List Mapping\r\n\tmapping ( uint256 => address ) public verificationListMap;\r\n\t// Amount of verifications\r\n\tuint256 public verificationCountInt = 1;\r\n\t\r\n\t// Verification holding\r\n\t// Verification Holders Timestamp\r\n\tmapping (address => uint256) public verificationHoldersTimestampMap;\r\n\t// Verification Holders Value\r\n\tmapping (address => uint256) public verificationHoldersValueMap;\r\n\t// Verification Holders Verifier Address\r\n\tmapping (address => address) public verificationHoldersVerifierAddressMap;\r\n\t// Verification Address Holders List Count\r\n\tmapping (address => uint256) public verificationAddressHoldersListCountMap;\r\n\t// Verification Address Holders List Number\r\n\tmapping (address => mapping ( uint256 => address )) public verificationAddressHoldersListNumberMap;\r\n\t\r\n\t// Modifier - Transactions On\r\n\tmodifier isTransactionsOn( address addressFrom ) {\r\n\t\t\r\n\t\trequire( transactionsOnNowVal( addressFrom ) );\r\n\t\t_;\r\n    }\r\n\t\r\n\t// Modifier - Emission On\r\n\tmodifier isEmissionOn{\r\n        require( emissionOn );\r\n        _;\r\n    }\r\n\t\r\n\t// Function transactions On now validate for definit address \r\n\tfunction transactionsOnNowVal( address addressFrom ) public view returns( bool )\r\n\t{\r\n\t\treturn ( transactionsOnForHolder[ addressFrom ]==0 && transactionsOn ) || transactionsOnForHolder[ addressFrom ]==2 ;\r\n\t}\r\n\t\r\n\t// transaction allow/forbidden for definit token holder\r\n\tfunction transactionsOnForHolderUpdate( address _to, uint256 _newValue ) external isOwner\r\n\t{\r\n\t\tif ( transactionsOnForHolder[ _to ] != _newValue )\r\n\t\t{\r\n\t\t\ttransactionsOnForHolder[ _to ] = _newValue;\r\n\t\t}\r\n\t}\r\n\r\n\t// Function of changing allow/forbidden transfer status\r\n\tfunction transactionsStatusUpdate( bool _on ) external isOwner\r\n\t{\r\n\t\ttransactionsOn = _on;\r\n\t}\r\n\t\r\n\t// Function of changing emission status\r\n\tfunction emissionStatusUpdate( bool _on ) external isOwner\r\n\t{\r\n\t\temissionOn = _on;\r\n\t}\r\n\t\r\n\t// Emission cap setting up\r\n\tfunction tokenCreationCapUpdate( uint256 _newVal ) external isOwner\r\n\t{\r\n\t\ttokenCreationCap = _newVal;\r\n\t}\r\n\t\r\n\t// balanceOfOnForHolder; balanceOfOn\r\n\t\r\n\t// Function on/off token displaying in function balanceOf\r\n\tfunction balanceOfOnUpdate( bool _on ) external isOwner\r\n\t{\r\n\t\tbalanceOfOn = _on;\r\n\t}\r\n\t\r\n\t// Function on/off token displaying in function balanceOf for definit token holder\r\n\tfunction balanceOfOnForHolderUpdate( address _to, uint256 _newValue ) external isOwner\r\n\t{\r\n\t\tif ( balanceOfOnForHolder[ _to ] != _newValue )\r\n\t\t{\r\n\t\t\tbalanceOfOnForHolder[ _to ] = _newValue;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t// Function adding of new verification address\r\n\tfunction verificationAddressOn( address _onVerificationAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// Check if it's a non-zero address\r\n\t\trequire( _onVerificationAddress != address(0) );\r\n\t\t// If this address is already exists\r\n\t\tif ( verificationAddressNumberMap[ _onVerificationAddress ]>0 )\r\n\t\t{\r\n\t\t\t// If address off, activate it again\r\n\t\t\tif ( !verificationAddressMap[ _onVerificationAddress ] )\r\n\t\t\t{\r\n\t\t\t\tverificationAddressMap[ _onVerificationAddress ] = true;\r\n\t\t\t\tretrnVal = true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tretrnVal = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If this address doesn`t exist\r\n\t\telse\r\n\t\t{\r\n\t\t\tverificationAddressMap[ _onVerificationAddress ] = true;\r\n\t\t\tverificationAddressNumberMap[ _onVerificationAddress ] = verificationCountInt;\r\n\t\t\tverificationListMap[ verificationCountInt ] = _onVerificationAddress;\r\n\t\t\tverificationCountInt++;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Function of disactivation of verification address\r\n\tfunction verificationOff( address _offVerificationAddress ) external isOwner returns (bool retrnVal) {\r\n\t\t// If this verification address exists and disabled\r\n\t\tif ( verificationAddressNumberMap[ _offVerificationAddress ]>0 && verificationAddressMap[ _offVerificationAddress ] )\r\n\t\t{\r\n\t\t\tverificationAddressMap[ _offVerificationAddress ] = false;\r\n\t\t\tretrnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tretrnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Event \"Description updated\"\r\n\tevent DescriptionPublished( string _description, address _initiator);\r\n\t\r\n\t// Description update\r\n\tfunction descriptionUpdate( string _newVal ) external isOwner\r\n\t{\r\n\t\tdescription = _newVal;\r\n\t\tDescriptionPublished( _newVal, msg.sender );\r\n\t}\r\n}\r\n\r\n// Token contract FoodCoin Ecosystem\r\ncontract FoodcoinEcosystem is SafeMath, Management {\r\n\t\r\n\t// Token total supply\r\n\tuint256 public totalSupply = 0;\r\n\t\r\n\t// Balance\r\n\tmapping ( address => uint256 ) balances;\r\n\t// Balances List Address\r\n\tmapping ( uint256 => address ) public balancesListAddressMap;\r\n\t// Balances List/Number Mapping\r\n\tmapping ( address => uint256 ) public balancesListNumberMap;\r\n\t// Balances Address Description\r\n\tmapping ( address => string ) public balancesAddressDescription;\r\n\t// Total amount of all balances\r\n\tuint256 balancesCountInt = 1;\r\n\t\r\n\t// Forwarding of address managing for definit amount of tokens\r\n\tmapping ( address => mapping ( address => uint256 ) ) allowed;\r\n\t\r\n\t\r\n\t// Standard ERC-20 events\r\n\t// Event - token transfer\r\n\tevent Transfer( address indexed from, address indexed to, uint value );\r\n\t// Event - Forwarding of address managing\r\n    event Approval( address indexed owner, address indexed spender, uint value );\r\n\t\r\n\t// Token transfer\r\n\tevent FoodTransferEvent( address from, address to, uint256 value, address initiator, uint256 newBalanceFrom, uint256 newBalanceTo );\r\n\t// Event - Emission\r\n\tevent FoodTokenEmissionEvent( address initiator, address to, uint256 value, bool result, uint256 newBalanceTo );\r\n\t// Event - Withdraw\r\n\tevent FoodWithdrawEvent( address initiator, address to, bool withdrawOk, uint256 withdraw, uint256 withdrawReal, uint256 newBalancesValue );\r\n\t\r\n\t\r\n\t// Balance View\r\n\tfunction balanceOf( address _owner ) external view returns ( uint256 )\r\n\t{\r\n\t\t// If allows to display balance for all or definit holder\r\n\t\tif ( ( balanceOfOnForHolder[ _owner ]==0 && balanceOfOn ) || balanceOfOnForHolder[ _owner ]==2 )\r\n\t\t{\r\n\t\t\treturn balances[ _owner ];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\t// Real Balance View\r\n\tfunction balanceOfReal( address _owner ) external view returns ( uint256 )\r\n\t{\r\n\t\treturn balances[ _owner ];\r\n\t}\r\n\t// Check if a given user has been delegated rights to perform transfers on behalf of the account owner\r\n\tfunction allowance( address _owner, address _initiator ) external view returns ( uint256 remaining )\r\n\t{\r\n\t\treturn allowed[ _owner ][ _initiator ];\r\n\t}\r\n\t// Total balances quantity\r\n\tfunction balancesQuantity() external view returns ( uint256 )\r\n\t{\r\n\t\treturn balancesCountInt - 1;\r\n\t}\r\n\t\r\n\t// Function of token transaction. For the first transaction will be created the detailed information\r\n\tfunction _addClientAddress( address _balancesAddress, uint256 _amount ) internal\r\n\t{\r\n\t\t// check if this address is not on the list yet\r\n\t\tif ( balancesListNumberMap[ _balancesAddress ] == 0 )\r\n\t\t{\r\n\t\t\t// add it to the list\r\n\t\t\tbalancesListAddressMap[ balancesCountInt ] = _balancesAddress;\r\n\t\t\tbalancesListNumberMap[ _balancesAddress ] = balancesCountInt;\r\n\t\t\t// increment account counter\r\n\t\t\tbalancesCountInt++;\r\n\t\t}\r\n\t\t// add tokens to the account \r\n\t\tbalances[ _balancesAddress ] = safeAdd( balances[ _balancesAddress ], _amount );\r\n\t}\r\n\t// Internal function that performs the actual transfer (cannot be called externally)\r\n\tfunction _transfer( address _from, address _to, uint256 _value ) internal isTransactionsOn( _from ) returns ( bool success )\r\n\t{\r\n\t\t// If the amount to transfer is greater than 0, and sender has funds available\r\n\t\tif ( _value > 0 && balances[ _from ] >= _value )\r\n\t\t{\r\n\t\t\t// Subtract from sender account\r\n\t\t\tbalances[ _from ] -= _value;\r\n\t\t\t// Add to receiver's account\r\n\t\t\t_addClientAddress( _to, _value );\r\n\t\t\t// Perform the transfer\r\n\t\t\tTransfer( _from, _to, _value );\r\n\t\t\tFoodTransferEvent( _from, _to, _value, msg.sender, balances[ _from ], balances[ _to ] );\r\n\t\t\t// Successfully completed transfer\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Return false if there are problems\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t// Function token transfer\r\n\tfunction transfer(address _to, uint256 _value) external returns ( bool success )\r\n\t{\r\n\t\t// If it is transfer to verification address\r\n\t\tif ( verificationAddressNumberMap[ _to ]>0 )\r\n\t\t{\r\n\t\t\t_verification(msg.sender, _to, _value);\r\n\t\t}\r\n\t\t// Regular transfer\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Call function transfer. \r\n\t\t\treturn _transfer( msg.sender, _to, _value );\r\n\t\t}\r\n\t}\r\n\t// Function of transferring tokens from a delegated account\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external isTransactionsOn( _from ) returns ( bool success )\r\n\t{\r\n\t\t// Regular transfer. Not to verification address\r\n\t\trequire( verificationAddressNumberMap[ _to ]==0 );\r\n\t\t// Check if the transfer initiator has permissions to move funds from the sender's account\r\n\t\tif ( allowed[_from][msg.sender] >= _value )\r\n\t\t{\r\n\t\t\t// If yes - perform transfer \r\n\t\t\tif ( _transfer( _from, _to, _value ) )\r\n\t\t\t{\r\n\t\t\t\t// Decrease the total amount that initiator has permissions to access\r\n\t\t\t\tallowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t// Function of delegating account management for a certain amount\r\n\tfunction approve( address _initiator, uint256 _value ) external isTransactionsOn( msg.sender ) returns ( bool success )\r\n\t{\r\n\t\t// Grant the rights for a certain amount of tokens only\r\n\t\tallowed[ msg.sender ][ _initiator ] = _value;\r\n\t\t// Initiate the Approval event\r\n\t\tApproval( msg.sender, _initiator, _value );\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// The emission function (the manager or contract owner creates tokens and sends them to a specific account)\r\n\tfunction _emission (address _reciever, uint256 _amount) internal isManagerOrOwner isEmissionOn returns ( bool returnVal )\r\n\t{\r\n\t\t// if non-zero address\r\n\t\tif ( _reciever != address(0) )\r\n\t\t{\r\n\t\t\t// Calculate number of tokens after generation\r\n\t\t\tuint256 checkedSupply = safeAdd( totalSupply, _amount );\r\n\t\t\t// Emission amount\r\n\t\t\tuint256 amountTmp = _amount;\r\n\t\t\t// If emission cap settled additional emission is impossible\r\n\t\t\tif ( tokenCreationCap > 0 && tokenCreationCap < checkedSupply )\r\n\t\t\t{\r\n\t\t\t\tamountTmp = 0;\r\n\t\t\t}\r\n\t\t\t// if try to add more than 0 tokens\r\n\t\t\tif ( amountTmp > 0 )\r\n\t\t\t{\r\n\t\t\t\t// If no error, add generated tokens to a given address\r\n\t\t\t\t_addClientAddress( _reciever, amountTmp );\r\n\t\t\t\t// increase total supply of tokens\r\n\t\t\t\ttotalSupply = checkedSupply;\r\n\t\t\t\t// event \"token transfer\"\r\n\t\t\t\tTransfer( emissionAddress, _reciever, amountTmp );\r\n\t\t\t\t// event \"emission successfull\"\r\n\t\t\t\tFoodTokenEmissionEvent( msg.sender, _reciever, _amount, true, balances[ _reciever ] );\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturnVal = false;\r\n\t\t\t\t// event \"emission failed\"\r\n\t\t\t\tFoodTokenEmissionEvent( msg.sender, _reciever, _amount, false, balances[ _reciever ] );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// emission to definit 1 address\r\n\tfunction tokenEmission(address _reciever, uint256 _amount) external isManagerOrOwner isEmissionOn returns ( bool returnVal )\r\n\t{\r\n\t\t// Check if it's a non-zero address\r\n\t\trequire( _reciever != address(0) );\r\n\t\t// emission in process\r\n\t\treturnVal = _emission( _reciever, _amount );\r\n\t}\r\n\t// adding 5 addresses at once\r\n\tfunction tokenEmission5( address _reciever_0, uint256 _amount_0, address _reciever_1, uint256 _amount_1, address _reciever_2, uint256 _amount_2, address _reciever_3, uint256 _amount_3, address _reciever_4, uint256 _amount_4 ) external isManagerOrOwner isEmissionOn\r\n\t{\r\n\t\t_emission( _reciever_0, _amount_0 );\r\n\t\t_emission( _reciever_1, _amount_1 );\r\n\t\t_emission( _reciever_2, _amount_2 );\r\n\t\t_emission( _reciever_3, _amount_3 );\r\n\t\t_emission( _reciever_4, _amount_4 );\r\n\t}\r\n\t\r\n\t// Function Tokens withdraw\r\n\tfunction withdraw( address _to, uint256 _amount ) external isSpecialManagerOrOwner returns ( bool returnVal, uint256 withdrawValue, uint256 newBalancesValue )\r\n\t{\r\n\t\t// check if this is a valid account\r\n\t\tif ( balances[ _to ] > 0 )\r\n\t\t{\r\n\t\t\t// Withdraw amount\r\n\t\t\tuint256 amountTmp = _amount;\r\n\t\t\t// It is impossible to withdraw more than available on balance\r\n\t\t\tif ( balances[ _to ] < _amount )\r\n\t\t\t{\r\n\t\t\t\tamountTmp = balances[ _to ];\r\n\t\t\t}\r\n\t\t\t// Withdraw in process\r\n\t\t\tbalances[ _to ] = safeSubtract( balances[ _to ], amountTmp );\r\n\t\t\t// Changing of current tokens amount\r\n\t\t\ttotalSupply = safeSubtract( totalSupply, amountTmp );\r\n\t\t\t// Return reply\r\n\t\t\treturnVal = true;\r\n\t\t\twithdrawValue = amountTmp;\r\n\t\t\tnewBalancesValue = balances[ _to ];\r\n\t\t\tFoodWithdrawEvent( msg.sender, _to, true, _amount, amountTmp, balances[ _to ] );\r\n\t\t\t// Event \"Token transfer\"\r\n\t\t\tTransfer( _to, withdrawAddress, amountTmp );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturnVal = false;\r\n\t\t\twithdrawValue = 0;\r\n\t\t\tnewBalancesValue = 0;\r\n\t\t\tFoodWithdrawEvent( msg.sender, _to, false, _amount, 0, balances[ _to ] );\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Balance description update\r\n\tfunction balancesAddressDescriptionUpdate( string _newDescription ) external returns ( bool returnVal )\r\n\t{\r\n\t\t// If this address or contrat`s owher exists\r\n\t\tif ( balancesListNumberMap[ msg.sender ] > 0 || ownerAddressMap[msg.sender]==true )\r\n\t\t{\r\n\t\t\tbalancesAddressDescription[ msg.sender ] = _newDescription;\r\n\t\t\treturnVal = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturnVal = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Recording of verification details\r\n\tfunction _verification( address _from, address _verificationAddress, uint256 _value) internal\r\n\t{\r\n\t\t// If verification address is active\r\n\t\trequire( verificationAddressMap[ _verificationAddress ] );\r\n\t\t\r\n\t\t// If it is updating of already verificated address\r\n\t\tif ( verificationHoldersVerifierAddressMap[ _from ] == _verificationAddress )\r\n\t\t{\r\n\t\t\t// Verification Address Holders List Count\r\n\t\t\tuint256 tmpNumberVerification = verificationAddressHoldersListCountMap[ _verificationAddress ];\r\n\t\t\tverificationAddressHoldersListCountMap[ _verificationAddress ]++;\r\n\t\t\t// Verification Address Holders List Number\r\n\t\t\tverificationAddressHoldersListNumberMap[ _verificationAddress ][ tmpNumberVerification ] = _from;\r\n\t\t}\r\n\t\t\r\n\t\t// Verification Holders Timestamp \r\n\t\tverificationHoldersTimestampMap[ _from ] = now;\r\n\t\t// Verification Value\r\n\t\tverificationHoldersValueMap[ _from ] = _value;\r\n\t\t// Verification Holders Verifier Address\r\n\t\tverificationHoldersVerifierAddressMap[ _from ] = _verificationAddress;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressFrom\",\"type\":\"address\"}],\"name\":\"transactionsOnNowVal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initiator\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onVerificationAddress\",\"type\":\"address\"}],\"name\":\"verificationAddressOn\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationHoldersVerifierAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offManagerAddress\",\"type\":\"address\"}],\"name\":\"managerOff\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfReal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancesQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"balanceOfOnUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onSpecialManagerAddress\",\"type\":\"address\"}],\"name\":\"specialManagerOn\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCountInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialManagerAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionsOnForHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationAddressHoldersListCountMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verificationAddressHoldersListNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEmissionAddress\",\"type\":\"address\"}],\"name\":\"emissionAddressUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onOwnerAddress\",\"type\":\"address\"}],\"name\":\"ownerOn\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verificationCountInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDecimals\",\"type\":\"uint256\"},{\"name\":\"updateConfirmation\",\"type\":\"bool\"}],\"name\":\"contractDecimalsUpdate\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfOnForHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVal\",\"type\":\"string\"}],\"name\":\"descriptionUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"balanceOfOnForHolderUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offSpecialManagerAddress\",\"type\":\"address\"}],\"name\":\"specialManagerOff\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"string\"},{\"name\":\"updateConfirmation\",\"type\":\"bool\"}],\"name\":\"contractNameUpdate\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationHoldersTimestampMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialManagerAddressNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emissionOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"specialManagerCountInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerListMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offVerificationAddress\",\"type\":\"address\"}],\"name\":\"verificationOff\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onManagerAddress\",\"type\":\"address\"}],\"name\":\"managerOn\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reciever\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenEmission\",\"outputs\":[{\"name\":\"returnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationAddressNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verificationListMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"emissionStatusUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesListNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawAddressUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emissionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"transactionsStatusUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialManagerListMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDescription\",\"type\":\"string\"}],\"name\":\"balancesAddressDescriptionUpdate\",\"outputs\":[{\"name\":\"returnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerListMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerAddressNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesAddressDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verificationHoldersValueMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerCountInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balancesListAddressMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"tokenCreationCapUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddressNumberMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"returnVal\",\"type\":\"bool\"},{\"name\":\"withdrawValue\",\"type\":\"uint256\"},{\"name\":\"newBalancesValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reciever_0\",\"type\":\"address\"},{\"name\":\"_amount_0\",\"type\":\"uint256\"},{\"name\":\"_reciever_1\",\"type\":\"address\"},{\"name\":\"_amount_1\",\"type\":\"uint256\"},{\"name\":\"_reciever_2\",\"type\":\"address\"},{\"name\":\"_amount_2\",\"type\":\"uint256\"},{\"name\":\"_reciever_3\",\"type\":\"address\"},{\"name\":\"_amount_3\",\"type\":\"uint256\"},{\"name\":\"_reciever_4\",\"type\":\"address\"},{\"name\":\"_amount_4\",\"type\":\"uint256\"}],\"name\":\"tokenEmission5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offOwnerAddress\",\"type\":\"address\"}],\"name\":\"ownerOff\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"transactionsOnForHolderUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSymbol\",\"type\":\"string\"},{\"name\":\"updateConfirmation\",\"type\":\"bool\"}],\"name\":\"contractSymbolUpdate\",\"outputs\":[{\"name\":\"retrnVal\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBalanceFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalanceTo\",\"type\":\"uint256\"}],\"name\":\"FoodTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newBalanceTo\",\"type\":\"uint256\"}],\"name\":\"FoodTokenEmissionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawOk\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"withdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawReal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalancesValue\",\"type\":\"uint256\"}],\"name\":\"FoodWithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_initiator\",\"type\":\"address\"}],\"name\":\"DescriptionPublished\",\"type\":\"event\"}]","ContractName":"FoodcoinEcosystem","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec5ef764de740cd16f3547a587dab79b003e2b7f1aba579221026ea69d5e8550"}]}