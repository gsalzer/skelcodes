{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by requiring a state.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\n contract Haltable is Ownable {\r\n   bool public halted;\r\n\r\n   modifier inNormalState {\r\n     assert(!halted);\r\n     _;\r\n   }\r\n\r\n   modifier inEmergencyState {\r\n     assert(halted);\r\n     _;\r\n   }\r\n\r\n   // called by the owner on emergency, triggers stopped state\r\n   function halt() external onlyOwner inNormalState {\r\n     halted = true;\r\n   }\r\n\r\n   // called by the owner on end of emergency, returns to normal state\r\n   function unhalt() external onlyOwner inEmergencyState {\r\n     halted = false;\r\n   }\r\n\r\n }\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable\r\n *\r\n * @dev Standard ERC20 token\r\n */\r\ncontract Burnable is StandardToken {\r\n  using SafeMath for uint;\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  function burn(uint256 _value) returns (bool success) {\r\n    require(balances[msg.sender] >= _value);                // Check if the sender has enough\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);// Subtract from the sender\r\n    totalSupply = totalSupply.sub(_value);                                  // Updates totalSupply\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n    require(balances[_from] >= _value);               // Check if the sender has enough\r\n    require(_value <= allowed[_from][msg.sender]);    // Check allowance\r\n    balances[_from] = balances[_from].sub(_value);    // Subtract from the sender\r\n    totalSupply = totalSupply.sub(_value);            // Updates totalSupply\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Burn(_from, _value);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    require(_to != 0x0); //use burn\r\n\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    require(_to != 0x0); //use burn\r\n\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title JincorToken\r\n *\r\n * @dev Burnable Ownable ERC20 token\r\n */\r\n contract JincorToken is Burnable, Ownable {\r\n\r\n   string public name = \"Jincor Token\";\r\n   string public symbol = \"JCR\";\r\n   uint256 public decimals = 18;\r\n   uint256 public INITIAL_SUPPLY = 35000000 * 1 ether;\r\n\r\n   /* The finalizer contract that allows unlift the transfer limits on this token */\r\n   address public releaseAgent;\r\n\r\n   /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n   bool public released = false;\r\n\r\n   /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n   mapping (address => bool) public transferAgents;\r\n\r\n   /**\r\n    * Limit token transfer until the crowdsale is over.\r\n    *\r\n    */\r\n   modifier canTransfer(address _sender) {\r\n     require(transferAgents[_sender] || released);\r\n     _;\r\n   }\r\n\r\n   /** The function can be called only before or after the tokens have been releasesd */\r\n   modifier inReleaseState(bool releaseState) {\r\n     require(releaseState == released);\r\n     _;\r\n   }\r\n\r\n   /** The function can be called only by a whitelisted release agent. */\r\n   modifier onlyReleaseAgent() {\r\n     require(msg.sender == releaseAgent);\r\n     _;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Contructor that gives msg.sender all of existing tokens.\r\n    */\r\n   function JincorToken() {\r\n     totalSupply = INITIAL_SUPPLY;\r\n     balances[msg.sender] = INITIAL_SUPPLY;\r\n   }\r\n\r\n\r\n   /**\r\n    * Set the contract that can call release and make the token transferable.\r\n    *\r\n    * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n    */\r\n   function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n\r\n     // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n     releaseAgent = addr;\r\n   }\r\n\r\n   function release() onlyReleaseAgent inReleaseState(false) public {\r\n     released = true;\r\n   }\r\n\r\n   /**\r\n    * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n    */\r\n   function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n     transferAgents[addr] = state;\r\n   }\r\n\r\n   function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n     // Call Burnable.transfer()\r\n     return super.transfer(_to, _value);\r\n   }\r\n\r\n   function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n     // Call Burnable.transferForm()\r\n     return super.transferFrom(_from, _to, _value);\r\n   }\r\n\r\n   function burn(uint256 _value) onlyOwner returns (bool success) {\r\n     return super.burn(_value);\r\n   }\r\n\r\n   function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {\r\n     return super.burnFrom(_from, _value);\r\n   }\r\n }\r\n\r\n\r\n\r\ncontract JincorTokenPreSale is Ownable, Haltable {\r\n  using SafeMath for uint;\r\n\r\n  string public name = \"Jincor Token PreSale\";\r\n\r\n  JincorToken public token;\r\n\r\n  address public beneficiary;\r\n\r\n  uint public hardCap;\r\n\r\n  uint public softCap;\r\n\r\n  uint public price;\r\n\r\n  uint public purchaseLimit;\r\n\r\n  uint public collected = 0;\r\n\r\n  uint public tokensSold = 0;\r\n\r\n  uint public investorCount = 0;\r\n\r\n  uint public weiRefunded = 0;\r\n\r\n  uint public startBlock;\r\n\r\n  uint public endBlock;\r\n\r\n  bool public softCapReached = false;\r\n\r\n  bool public crowdsaleFinished = false;\r\n\r\n  mapping (address => bool) refunded;\r\n\r\n  event GoalReached(uint amountRaised);\r\n\r\n  event SoftCapReached(uint softCap);\r\n\r\n  event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n\r\n  event Refunded(address indexed holder, uint256 amount);\r\n\r\n  modifier preSaleActive() {\r\n    require(block.number >= startBlock && block.number < endBlock);\r\n    _;\r\n  }\r\n\r\n  modifier preSaleEnded() {\r\n    require(block.number >= endBlock);\r\n    _;\r\n  }\r\n\r\n  function JincorTokenPreSale(\r\n  uint _hardCapUSD,\r\n  uint _softCapUSD,\r\n  address _token,\r\n  address _beneficiary,\r\n  uint _totalTokens,\r\n  uint _priceETH,\r\n  uint _purchaseLimitUSD,\r\n\r\n  uint _startBlock,\r\n  uint _endBlock\r\n  ) {\r\n    hardCap = _hardCapUSD.mul(1 ether).div(_priceETH);\r\n    softCap = _softCapUSD.mul(1 ether).div(_priceETH);\r\n    price = _totalTokens.mul(1 ether).div(hardCap);\r\n\r\n    purchaseLimit = _purchaseLimitUSD.mul(1 ether).div(_priceETH).mul(price);\r\n    token = JincorToken(_token);\r\n    beneficiary = _beneficiary;\r\n\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n  }\r\n\r\n  function() payable {\r\n    require(msg.value >= 0.1 * 1 ether);\r\n    doPurchase(msg.sender);\r\n  }\r\n\r\n  function refund() external preSaleEnded inNormalState {\r\n    require(softCapReached == false);\r\n    require(refunded[msg.sender] == false);\r\n\r\n    uint balance = token.balanceOf(msg.sender);\r\n    require(balance > 0);\r\n\r\n    uint refund = balance.div(price);\r\n    if (refund > this.balance) {\r\n      refund = this.balance;\r\n    }\r\n\r\n    assert(msg.sender.send(refund));\r\n    refunded[msg.sender] = true;\r\n    weiRefunded = weiRefunded.add(refund);\r\n    Refunded(msg.sender, refund);\r\n  }\r\n\r\n  function withdraw() onlyOwner {\r\n    require(softCapReached);\r\n    assert(beneficiary.send(collected));\r\n    token.transfer(beneficiary, token.balanceOf(this));\r\n    crowdsaleFinished = true;\r\n  }\r\n\r\n  function doPurchase(address _owner) private preSaleActive inNormalState {\r\n\r\n    require(!crowdsaleFinished);\r\n    require(collected.add(msg.value) <= hardCap);\r\n\r\n    if (!softCapReached && collected < softCap && collected.add(msg.value) >= softCap) {\r\n      softCapReached = true;\r\n      SoftCapReached(softCap);\r\n    }\r\n    uint tokens = msg.value * price;\r\n    require(token.balanceOf(msg.sender).add(tokens) <= purchaseLimit);\r\n\r\n    if (token.balanceOf(msg.sender) == 0) investorCount++;\r\n\r\n    collected = collected.add(msg.value);\r\n\r\n    token.transfer(msg.sender, tokens);\r\n\r\n    tokensSold = tokensSold.add(tokens);\r\n\r\n    NewContribution(_owner, tokens, msg.value);\r\n\r\n    if (collected == hardCap) {\r\n      GoalReached(hardCap);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hardCapUSD\",\"type\":\"uint256\"},{\"name\":\"_softCapUSD\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"name\":\"_priceETH\",\"type\":\"uint256\"},{\"name\":\"_purchaseLimitUSD\",\"type\":\"uint256\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"softCap\",\"type\":\"uint256\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"JincorTokenPreSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000005573000000000000000000000000000000000000000000000000000000000000249f00000000000000000000000002da22bea3c346038626bb1775c8f1e7d98d20607000000000000000000000000a9eebb32a1d459eb1eb5078c543427c34da443130000000000000000000000000000000000000000000000000000000000155cc00000000000000000000000000000000000000000000000000000000000000122000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000003fd85e0000000000000000000000000000000000000000000000000000000000425bae","Library":"","SwarmSource":"bzzr://9f17ca92677bb87c93884350e1376236084271c11127f6a5dc15a7aa1e617cc3"}]}