{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n  function sub(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x - y;\r\n    assert(z <= x);\r\n\t  return z;\r\n  }\r\n\r\n  function add(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x + y;\r\n\t  assert(z >= x);\r\n\t  return z;\r\n  }\r\n\t\r\n  function div(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x / y;\r\n\t  return z;\r\n  }\r\n\t\r\n  function mul(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x * y;\r\n    assert(x == 0 || z / x == y);\r\n    return z;\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x <= y ? x : y;\r\n\t  return z;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal constant returns (uint256) {\r\n    uint256 z = x >= y ? x : y;\r\n\t  return z;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n\tfunction totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address owner) public constant returns (uint);\r\n\tfunction allowance(address owner, address spender) public constant returns (uint);\r\n\tfunction transfer(address to, uint value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint value) public returns (bool success);\r\n\tfunction approve(address spender, uint value) public returns (bool success);\r\n\tfunction mint(address to, uint value) public returns (bool success);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath, Ownable{\r\n\t\r\n  uint256 _totalSupply;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) approvals;\r\n  address public crowdsaleAgent;\r\n  bool public released = false;  \r\n  \r\n  /**\r\n   * @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   * @param numwords payload size  \r\n   */\r\n  modifier onlyPayloadSize(uint numwords) {\r\n    assert(msg.data.length == numwords * 32 + 4);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev The function can be called only by crowdsale agent.\r\n   */\r\n  modifier onlyCrowdsaleAgent() {\r\n    assert(msg.sender == crowdsaleAgent);\r\n    _;\r\n  }\r\n\r\n  /** Limit token mint after finishing crowdsale\r\n   * @dev Make sure we are not done yet.\r\n   */\r\n  modifier canMint() {\r\n    assert(!released);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer() {\r\n    assert(released);\r\n    _;\r\n  } \r\n  \r\n  /** \r\n   * @dev Total Supply\r\n   * @return _totalSupply \r\n   */  \r\n  function totalSupply() public constant returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  \r\n  /** \r\n   * @dev Tokens balance\r\n   * @param _owner holder address\r\n   * @return balance amount \r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /** \r\n   * @dev Token allowance\r\n   * @param _owner holder address\r\n   * @param _spender spender address\r\n   * @return remain amount\r\n   */   \r\n  function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n    return approvals[_owner][_spender];\r\n  }\r\n\r\n  /** \r\n   * @dev Tranfer tokens to address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */   \r\n  function transfer(address _to, uint _value) public canTransfer onlyPayloadSize(2) returns (bool success) {\r\n    assert(balances[msg.sender] >= _value);\r\n    balances[msg.sender] = sub(balances[msg.sender], _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**    \r\n   * @dev Tranfer tokens from one address to other\r\n   * @param _from source address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */    \r\n  function transferFrom(address _from, address _to, uint _value) public canTransfer onlyPayloadSize(3) returns (bool success) {\r\n    assert(balances[_from] >= _value);\r\n    assert(approvals[_from][msg.sender] >= _value);\r\n    approvals[_from][msg.sender] = sub(approvals[_from][msg.sender], _value);\r\n    balances[_from] = sub(balances[_from], _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /** \r\n   * @dev Approve transfer\r\n   * @param _spender holder address\r\n   * @param _value tokens amount\r\n   * @return result  \r\n   */\r\n  function approve(address _spender, uint _value) public onlyPayloadSize(2) returns (bool success) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  approvals to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    assert((_value == 0) || (approvals[msg.sender][_spender] == 0));\r\n    approvals[msg.sender][_spender] = _value;\r\n    \r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  \r\n  /** \r\n   * @dev Create new tokens and allocate them to an address. Only callably by a crowdsale contract\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return mint result\r\n   */ \r\n  function mint(address _to, uint _value) public onlyCrowdsaleAgent canMint onlyPayloadSize(2) returns (bool success) {\r\n    _totalSupply = add(_totalSupply, _value);\r\n    balances[_to] = add(balances[_to], _value);\r\n    \r\n    Transfer(0, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Set the contract that can call release and make the token transferable.\r\n   * @param _crowdsaleAgent crowdsale contract address\r\n   */\r\n  function setCrowdsaleAgent(address _crowdsaleAgent) public onlyOwner {\r\n    assert(!released);\r\n    crowdsaleAgent = _crowdsaleAgent;\r\n  }\r\n  \r\n  /**\r\n   * @dev One way function to release the tokens to the wild. Can be called only from the release agent that is the final ICO contract. \r\n   */\r\n  function releaseTokenTransfer() public onlyCrowdsaleAgent {\r\n    released = true;\r\n  }\r\n}\r\n\r\n\r\n/** \r\n * @title DAOPlayMarket2.0 contract - standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n */\r\ncontract DAOPlayMarketToken is StandardToken {\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint public decimals;\r\n  \r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _addr Address for team's tokens\r\n   */\r\n   \r\n  function DAOPlayMarketToken(string _name, string _symbol, uint _initialSupply, uint _decimals, address _addr) public {\r\n    require(_addr != 0x0);\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n\t\r\n    _totalSupply = _initialSupply*10**_decimals;\r\n\r\n    // Creating initial tokens\r\n    balances[_addr] = _totalSupply;\r\n  }   \r\n  \r\n   /**\r\n   * Owner can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAgent\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DAOPlayMarketToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000b71b00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000009dbe98b92aa6f885844315d89ac48c4322a953000000000000000000000000000000000000000000000000000000000000001244414f20506c61794d61726b657420322e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003504d540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c07f1d6d6e8969ac4de314245e520dc3b84b0fa8e979ea411f8e63f7dc202f2e"}]}