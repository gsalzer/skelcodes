{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/* Inlined from ./contracts/PortMayor.sol */\r\n\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol */\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/ownership/HasNoEther.sol */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol */\r\n\r\n\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/token/ERC20Basic.sol */\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/token/SafeERC20.sol */\r\n\r\n\r\n\r\n/* Inlined from node_modules/zeppelin-solidity/contracts/token/ERC20.sol */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n/* Inlined from contracts/PortCoin.sol */\r\n\r\n\r\n\r\n\r\ncontract PortCoin is ERC20 {\r\n\r\n  address mayor;\r\n\r\n  string public name = \"Portland Maine Token\";\r\n  string public symbol = \"PORT\";\r\n  uint public decimals = 0;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint256)) approvals;\r\n\r\n  event NewMayor(address indexed oldMayor, address indexed newMayor);\r\n\r\n  function PortCoin() public {\r\n    mayor = msg.sender;\r\n  }\r\n\r\n  modifier onlyMayor() {\r\n    require(msg.sender == mayor);\r\n    _;\r\n  }\r\n\r\n  function electNewMayor(address newMayor) onlyMayor public {\r\n    address oldMayor = mayor;\r\n    mayor = newMayor;\r\n    NewMayor(oldMayor, newMayor);\r\n  }\r\n\r\n  function issue(address to, uint256 amount) onlyMayor public returns (bool){\r\n    totalSupply += amount;\r\n    balances[to] += amount;\r\n    Transfer(0x0, to, amount);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address who) public constant returns (uint256) {\r\n    return balances[who];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(balances[msg.sender] >= value);\r\n    balances[to] += value;\r\n    balances[msg.sender] -= value;\r\n    Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    approvals[msg.sender][spender] = value;\r\n    Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256) {\r\n    return approvals[owner][spender];\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(approvals[from][msg.sender] >= value);\r\n    require(balances[from] >= value);\r\n\r\n    balances[to] += value;\r\n    balances[from] -= value;\r\n    approvals[from][msg.sender] -= value;\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract PortMayor is Ownable, HasNoEther, CanReclaimToken {\r\n\r\n  PortCoin coin;\r\n  mapping(address => uint256) tickets;\r\n\r\n  event Attend(address indexed attendee, uint256 ticket, address indexed eventAddress);\r\n  event EventCreated(address eventAddress);\r\n\r\n  function PortMayor(address portCoinAddress) public {\r\n    coin = PortCoin(portCoinAddress);\r\n  }\r\n\r\n  function electNewMayor(address newMayor) onlyOwner public {\r\n    coin.electNewMayor(newMayor);\r\n  }\r\n\r\n  function isEvent(address eventAddress) view public returns (bool) {\r\n    return tickets[eventAddress] > 0;\r\n  }\r\n\r\n  function isValidTicket(address eventAddress, uint8 ticket) view public returns (bool){\r\n    return (tickets[eventAddress] & (uint256(2) ** ticket)) > 0;\r\n  }\r\n\r\n  function createEvent(address eventAddress) onlyOwner public {\r\n    tickets[eventAddress] = uint256(0) - 1; // fill with 1s\r\n    EventCreated(eventAddress);\r\n  }\r\n\r\n  function stringify(uint8 v) public pure returns (string ret) {\r\n    bytes memory data = new bytes(3);\r\n    data[0] = bytes1(48 + (v / 100) % 10);\r\n    data[1] = bytes1(48 + (v / 10) % 10);\r\n    data[2] = bytes1(48 + v % 10);\r\n    return string(data);\r\n  }\r\n\r\n  function attend(uint8 ticket, bytes32 r, bytes32 s, uint8 v) public {\r\n    address eventAddress = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n3\",stringify(ticket)),v,r,s);\r\n    require(isValidTicket(eventAddress, ticket));\r\n    tickets[eventAddress] = tickets[eventAddress] ^ (uint256(2) ** ticket);\r\n    coin.issue(msg.sender, 1);\r\n    Attend(msg.sender, ticket, eventAddress);\r\n  }\r\n\r\n  function issue(address to, uint quantity) public onlyOwner {\r\n    coin.issue(to, quantity);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eventAddress\",\"type\":\"address\"},{\"name\":\"ticket\",\"type\":\"uint8\"}],\"name\":\"isValidTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMayor\",\"type\":\"address\"}],\"name\":\"electNewMayor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eventAddress\",\"type\":\"address\"}],\"name\":\"createEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticket\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"attend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"stringify\",\"outputs\":[{\"name\":\"ret\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eventAddress\",\"type\":\"address\"}],\"name\":\"isEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"portCoinAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attendee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticket\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"eventAddress\",\"type\":\"address\"}],\"name\":\"Attend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventAddress\",\"type\":\"address\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PortMayor","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000008ed3ba9c4028865f77b3c8917a2003131709fbee","Library":"","SwarmSource":"bzzr://b06367e9801dbdb411c9b5d7472a2df88a793a2a866f59a9a970b70f9590413d"}]}