{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Erc20Token {\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) balances;\r\n\r\n    /* Map between users and their approval addresses and amounts */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /* List of all token holders */\r\n    address[] allTokenHolders;\r\n\r\n    /* The name of the contract */\r\n    string public name;\r\n\r\n    /* The symbol for the contract */\r\n    string public symbol;\r\n\r\n    /* How many DPs are in use in this contract */\r\n    uint8 public decimals;\r\n\r\n    /* Defines the current supply of the token in its own units */\r\n    uint256 totalSupplyAmount = 0;\r\n\r\n    /* Our transfer event to fire whenever we shift SMRT around */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Our approval event when one user approves another to control */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Create a new instance of the token with the specified details. */\r\n    function Erc20Token(string _name, string _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n     /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\r\n     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\r\n            bool isNew = balances[_to] < 1;\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            if (isNew)\r\n                tokenOwnerAdd(_to);\r\n            if (balances[_from] < 1)\r\n                tokenOwnerRemove(_from);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Gets the total supply available of this token */\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupplyAmount;\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        /* Check if sender has balance and for overflows */\r\n        if (balances[msg.sender] < _amount || balances[_to] + _amount < balances[_to])\r\n            throw;\r\n\r\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\r\n        bool isRecipientNew = balances[_to] < 1;\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n\r\n        /* Consolidate arrays if they are new or if sender now has empty balance */\r\n        if (isRecipientNew)\r\n            tokenOwnerAdd(_to);\r\n        if (balances[msg.sender] < 1)\r\n            tokenOwnerRemove(msg.sender);\r\n\r\n        /* Fire notification event */\r\n        Transfer(msg.sender, _to, _amount);\r\n        success = true;\r\n    }\r\n\r\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerAdd(address _addr) internal {\r\n        /* First check if they already exist */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        for (uint256 i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr)\r\n                /* Already found so we can abort now */\r\n                return;\r\n\r\n        /* They don't seem to exist, so let's add them */\r\n        allTokenHolders.length++;\r\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\r\n    }\r\n\r\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerRemove(address _addr) internal {\r\n        /* Find out where in our array they are */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        uint256 foundIndex = 0;\r\n        bool found = false;\r\n        uint256 i;\r\n        for (i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr) {\r\n                foundIndex = i;\r\n                found = true;\r\n                break;\r\n            }\r\n\r\n        /* If we didn't find them just return */\r\n        if (!found)\r\n            return;\r\n\r\n        /* We now need to shuffle down the array */\r\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\r\n            allTokenHolders[i] = allTokenHolders[i + 1];\r\n        allTokenHolders.length--;\r\n    }\r\n}\r\n\r\ncontract ImperialCredits is Erc20Token(\"Imperial Credits\", \"XIC\", 0) {\r\n    address owner;\r\n    bool public isIco  = true;\r\n\r\n    function icoWithdraw() {\r\n      if (this.balance == 0 || msg.sender != owner)\r\n        throw;\r\n      if (!owner.send(this.balance))\r\n        throw;\r\n    }\r\n\r\n    function icoClose() {\r\n      if (msg.sender != owner || !isIco)\r\n        throw;\r\n      if (this.balance > 0)\r\n        if (!owner.send(this.balance))\r\n          throw;\r\n      uint256 remaining = 1000000000 - totalSupplyAmount;\r\n      if (remaining > 0) {\r\n        balances[msg.sender] += remaining;\r\n        totalSupplyAmount = 1000000000;\r\n      }\r\n      isIco = false;\r\n    }\r\n\r\n    function destroyCredits(uint256 amount) {\r\n      if (balances[msg.sender] < amount)\r\n        throw;\r\n      balances[msg.sender] -= amount;\r\n      totalSupplyAmount -= amount;\r\n    }\r\n\r\n    function ImperialCredits() {\r\n      owner=msg.sender;\r\n      balances[msg.sender] = 100000;\r\n      totalSupplyAmount = 100000;\r\n    }\r\n\r\n    function () payable {\r\n        if (totalSupplyAmount >= 1000000000 || !isIco)\r\n          throw;\r\n        uint256 mintAmount = msg.value / 100000000000000;\r\n        uint256 maxMint = 1000000000 - totalSupplyAmount;\r\n        if (mintAmount > maxMint)\r\n          mintAmount = maxMint;\r\n        uint256 change = msg.value - (100000000000000 * mintAmount);\r\n        if (!msg.sender.send(change))\r\n          throw;\r\n        balances[msg.sender] += mintAmount;\r\n        totalSupplyAmount += mintAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyCredits\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoClose\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ImperialCredits","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21deb6f0e812f581477a962a5031f3c60a814f76ea29e57fe625a71af5256d5c"}]}