{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  //address[] public addressLUT;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n      \r\n    // Check to see if transfer window has been reached\r\n    require (now >= 1512835200); // transfers can't happen until 3mo after sale ends (1512835200)\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    \r\n    // Check to see if transfer window has been reached\r\n    require (now >= 1512835200); // transfers can't happen until 3mo after sale ends (1512835200)\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public constant returns (bool) {\r\n    return true;\r\n  }\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract PSIToken is StandardToken {\r\n    address public owner;\r\n    string public constant name = \"Protostarr\"; // Protostarr\r\n    string public constant symbol = \"PSR\"; // PSR\r\n    uint256 public constant decimals = 4;\r\n    \r\n    // Address for founder's PSI token and ETH deposits\r\n    address public constant founders_addr = 0xEa16ebd8Cdf5A51fa0a80bFA5665146b2AB82210;\r\n    \r\n    UpgradeAgent public upgradeAgent;\r\n    uint256 public totalUpgraded;\r\n    \r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event UpgradeAgentSet(address agent);\r\n    function setUpgradeAgent(address agent) external {\r\n        if (agent == 0x0) revert();\r\n        // Only owner can designate the next agent\r\n        if (msg.sender != owner) revert();\r\n        upgradeAgent = UpgradeAgent(agent);\r\n        \r\n        // Bad interface\r\n        if(!upgradeAgent.isUpgradeAgent()) revert();\r\n        UpgradeAgentSet(upgradeAgent);\r\n    }\r\n    function upgrade(uint256 value) public {\r\n        \r\n        if(address(upgradeAgent) == 0x00) revert();\r\n        // Validate input value.\r\n        if (value <= 0) revert();\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        \r\n        // Take tokens out from circulation\r\n        totalSupply = totalSupply.sub(value);\r\n        totalUpgraded = totalUpgraded.add(value);\r\n        \r\n        // Upgrade agent reissues the tokens\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        Upgrade(msg.sender, upgradeAgent, value);\r\n    }\r\n\r\n    // Constructor\r\n    function PSIToken() {\r\n        // set owner as sender\r\n        owner = msg.sender;\r\n        \r\n        // add founders to address LUT\r\n        //addressLUT.push(founders_addr);\r\n    }\r\n    // check to see if sender is owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    // Allows the current owner to transfer control of the contract to a newOwner.\r\n    // newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));      \r\n        owner = newOwner;\r\n    }\r\n    // catch received ether\r\n    function () payable {\r\n        createTokens(msg.sender);\r\n    }\r\n    // issue tokens for received ether\r\n    function createTokens(address recipient) payable {\r\n        if(msg.value<=uint256(1 ether).div(600)) {\r\n            revert();\r\n        }\r\n    \r\n        uint multiplier = 10 ** decimals;\r\n    \r\n        // create tokens for buyer\r\n        uint tokens = ((msg.value.mul(getPrice())).mul(multiplier)).div(1 ether);\r\n        totalSupply = totalSupply.add(tokens);\r\n        balances[recipient] = balances[recipient].add(tokens);      \r\n        \r\n        // add buyer to address LUT\r\n        //addressLUT.push(founders_addr);        \r\n        \r\n        // create 10% additional tokens for founders\r\n        uint ftokens = tokens.div(10);\r\n        totalSupply = totalSupply.add(ftokens);\r\n        balances[founders_addr] = balances[founders_addr].add(ftokens);\r\n    \r\n        // send ETH for buy to founders\r\n        if(!founders_addr.send(msg.value)) {\r\n            revert();\r\n        }\r\n    \r\n    }\r\n  \r\n    // get tiered pricing based on block.timestamp, or revert transaction if before/after sale times\r\n    // Unix Timestamps\r\n    // 1502640000 power hour start (170 tokens)\r\n    // 1502643600 week 1 start (150 tokens)\r\n    // 1503244800 week 2 start (130 tokens)\r\n    // 1503849600 week 3 start (110 tokens)\r\n    // 1504454400 week 4 start (100 tokens)\r\n    // 1505059200 SALE ENDS\r\n    // 1512835200 transfer period begins\r\n    function getPrice() constant returns (uint result) {\r\n        if (now < 1502640000) { // before power hour  1502640000\r\n            revert(); // DISQUALIFIED!!! There's one every season!!!\r\n        } else {\r\n            if (now < 1502645400) { // before week 1 start (in power hour)  1502643600 (new 1502645400)\r\n                return 170;\r\n            } else {\r\n                if (now < 1503244800) { // before week 2 start (in week 1)  1503244800\r\n                    return 150;\r\n                } else {\r\n                    if (now < 1503849600) { // before week 3 start (in week 2)  1503849600\r\n                        return 130;\r\n                    } else {\r\n                        if (now < 1504454400) { // before week 4 start (in week 3)  1504454400\r\n                            return 110;\r\n                        } else {\r\n                            if (now < 1505059200) { // before end of sale (in week 4)  1505059200\r\n                                return 100;\r\n                            } else {\r\n                                revert(); // sale has ended, kill transaction\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PSIToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ef0e3fa69a5abf016ef9df567a98f28641bfaa2ed91c1132f5c0e539cfb154a"}]}