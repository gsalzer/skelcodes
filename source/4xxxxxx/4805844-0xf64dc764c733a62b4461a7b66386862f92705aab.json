{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\npragma solidity ^0.4.16;\r\n\r\npragma solidity ^0.4.16;\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n}\r\npragma solidity ^0.4.16;\r\n\r\n\r\n//////////////////////////////////////////////////\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != owner && newOwner != address(0x0));\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        OwnerChanged(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract CrowdSale is Ownable {\r\n\r\n    // ERC20 Token\r\n    ERC20 public token;\r\n\r\n    // address where receives funds\r\n    address public beneficiary;\r\n    // address where provides tokens\r\n    address public tokenHolder;\r\n\r\n    // how many token units per wei\r\n    uint public rate;\r\n\r\n    // amount of goal in wei\r\n    uint public amountGoal;\r\n\r\n    // amount of current raised money in wei\r\n    uint public amountRaised;\r\n\r\n    // amount of tokens issued\r\n    uint public amountTokenIssued;\r\n\r\n    // Important Time\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    // Stages Info\r\n    struct Stage {\r\n        uint duration;      // Duration in second of current stage\r\n        uint rate;          // 100 = 100%\r\n    }\r\n    Stage[] public icoStages;\r\n    Stage[] public lockStages;\r\n\r\n\r\n    // Purchaser Info\r\n    struct PurchaserInfo {\r\n        uint amountEtherSpent;\r\n        uint amountTokenTaken;\r\n        uint[] lockedToken;\r\n    }\r\n    mapping(address => PurchaserInfo) public purchasers;\r\n\r\n    address[] public purchaserList;\r\n\r\n\r\n    // ----- Events -----\r\n    event TokenPurchase(address purchaser, uint value, uint buyTokens, uint bonusTokens);\r\n    event GoalReached(uint totalAmountRaised, uint totalTokenIssued);\r\n    event FundingWithdrawn(address beneficiaryAddress, uint value);\r\n    event UnlockToken(address purchaser, uint amountUnlockedTokens);\r\n\r\n\r\n    // ----- Modifiers -----\r\n    modifier afterEnded {\r\n        require(isEnded());\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpenTime {\r\n        require(isStarted());\r\n        require(!isEnded());\r\n        _;\r\n    }\r\n\r\n\r\n    // ----- Functions -----\r\n    function CrowdSale(address beneficiaryAddr, address tokenHolderAddr, address tokenAddr, uint tokenRate) public {\r\n        require(beneficiaryAddr != address(0));\r\n        require(tokenHolderAddr != address(0));\r\n        require(tokenAddr != address(0));\r\n        require(tokenRate > 0);\r\n\r\n        beneficiary = beneficiaryAddr;\r\n        tokenHolder = tokenHolderAddr;\r\n        token = ERC20(tokenAddr);\r\n        rate = tokenRate;\r\n\r\n        _initStages();\r\n    }\r\n\r\n    function _initStages() internal;   //Need override\r\n\r\n    function getTokenAddress() public view returns(address) {\r\n        return token;\r\n    }\r\n\r\n    function getLockedToken(address _purchaser, uint stageIdx) public view returns(uint) {\r\n        if(stageIdx >= purchasers[_purchaser].lockedToken.length) {\r\n            return 0;\r\n        }\r\n        return purchasers[_purchaser].lockedToken[stageIdx];\r\n    }\r\n\r\n    function canTokenUnlocked(uint stageIndex) public view returns(bool) {\r\n        if(0 <= stageIndex && stageIndex < lockStages.length){\r\n            uint stageEndTime = endTime;\r\n            for(uint i = 0; i <= stageIndex; i++) {\r\n                stageEndTime += lockStages[i].duration;\r\n            }//for\r\n            return now > stageEndTime;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isStarted() public view returns(bool) {\r\n        return 0 < startTime && startTime <= now;\r\n    }\r\n\r\n    function isReachedGoal() public view returns(bool) {\r\n        return amountRaised >= amountGoal;\r\n    }\r\n\r\n    function isEnded() public view returns(bool) {\r\n        return now > endTime || isReachedGoal();\r\n    }\r\n\r\n    function getCurrentStage() public view returns(int) {\r\n        int stageIdx = -1;\r\n        uint stageEndTime = startTime;\r\n        for(uint i = 0; i < icoStages.length; i++) {\r\n            stageEndTime += icoStages[i].duration;\r\n            if (now <= stageEndTime) {\r\n                stageIdx = int(i);\r\n                break;\r\n            }\r\n        }\r\n        return stageIdx;\r\n    }\r\n\r\n    function getRemainingTimeInSecond() public view returns(uint) {\r\n        if(endTime == 0)\r\n            return 0;\r\n        return endTime - now;\r\n    }\r\n\r\n    function _addPurchaser(address purchaser) internal {\r\n        require(purchaser != address(0));\r\n\r\n//        for (uint i = 0; i < purchaserList.length; i++) {\r\n//            if (purchaser == purchaserList[i]){\r\n//                return;\r\n//            }\r\n//        }\r\n        purchaserList.push(purchaser);\r\n    }\r\n\r\n    function start(uint fundingGoalInEther) public onlyOwner {\r\n        require(!isStarted());\r\n        require(fundingGoalInEther > 0);\r\n        amountGoal = fundingGoalInEther * 1 ether;\r\n\r\n        startTime = now;\r\n\r\n        uint duration = 0;\r\n        for(uint i = 0; i < icoStages.length; i++){\r\n            duration += icoStages[i].duration;\r\n        }\r\n\r\n        endTime = startTime + duration;\r\n    }\r\n\r\n    function stop() public onlyOwner {\r\n        require(isStarted());\r\n        endTime = now;\r\n    }\r\n\r\n    function () payable public onlyOpenTime {\r\n        require(msg.value > 0);\r\n\r\n        uint amount = msg.value;\r\n        var (buyTokenCount, bonusTokenCount) = _getTokenCount(amount);\r\n\r\n        PurchaserInfo storage pi = purchasers[msg.sender];\r\n        pi.amountEtherSpent += amount;\r\n        pi.amountTokenTaken += buyTokenCount;\r\n\r\n        if (pi.lockedToken.length == 0) {\r\n            pi.lockedToken = new uint[](lockStages.length);\r\n        }\r\n\r\n        for(uint i = 0; i < lockStages.length; i++) {\r\n            Stage storage stage = lockStages[i];\r\n            pi.lockedToken[i] += stage.rate * bonusTokenCount / 100;\r\n        }\r\n\r\n\r\n        amountRaised += amount;\r\n        amountTokenIssued += buyTokenCount;\r\n\r\n        token.transferFrom(tokenHolder, msg.sender, buyTokenCount);\r\n        TokenPurchase(msg.sender, amount, buyTokenCount, bonusTokenCount);\r\n\r\n        _addPurchaser(msg.sender);\r\n\r\n        if(isReachedGoal()){\r\n            endTime = now;\r\n        }\r\n    }\r\n\r\n    function _getTokenCount(uint amountInWei) internal view returns(uint buyTokenCount, uint bonusTokenCount) {\r\n        buyTokenCount = amountInWei * rate;\r\n\r\n        int stageIdx = getCurrentStage();\r\n        assert(stageIdx >= 0 && uint(stageIdx) < icoStages.length);\r\n        bonusTokenCount = buyTokenCount * icoStages[uint(stageIdx)].rate / 100;\r\n    }\r\n\r\n\r\n    function safeWithdrawal() public onlyOwner {\r\n        require(beneficiary != address(0));\r\n        beneficiary.transfer(amountRaised);\r\n        FundingWithdrawn(beneficiary, amountRaised);\r\n    }\r\n\r\n    function unlockBonusTokens(uint stageIndex, uint purchaserStartIdx, uint purchaserEndIdx) public afterEnded onlyOwner {\r\n        require(0 <= purchaserStartIdx && purchaserStartIdx < purchaserEndIdx && purchaserEndIdx <= purchaserList.length);\r\n        require(canTokenUnlocked(stageIndex));\r\n\r\n        for (uint j = purchaserStartIdx; j < purchaserEndIdx; j++) {\r\n            address purchaser = purchaserList[j];\r\n            if(purchaser != address(0)){\r\n                PurchaserInfo storage pi = purchasers[purchaser];\r\n                uint unlockedToken = pi.lockedToken[stageIndex];\r\n                if (unlockedToken > 0) {\r\n                    pi.lockedToken[stageIndex] = 0;\r\n                    pi.amountTokenTaken += unlockedToken;\r\n\r\n                    amountTokenIssued += unlockedToken;\r\n\r\n                    token.transferFrom(tokenHolder, purchaser, unlockedToken);\r\n                    UnlockToken(purchaser, unlockedToken);\r\n                }\r\n            }\r\n        }//for\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract FairGameCrowdSale is CrowdSale {\r\n    function FairGameCrowdSale(address beneficiaryAddr, address tokenHolderAddr, address tokenAddr)\r\n        CrowdSale(beneficiaryAddr, tokenHolderAddr, tokenAddr, 10000) public {\r\n\r\n    }\r\n\r\n    function _initStages() internal {\r\n        delete icoStages;\r\n\r\n        icoStages.push(Stage({rate: 20, duration: 1 days}));\r\n        icoStages.push(Stage({rate: 10, duration: 1 days}));\r\n        icoStages.push(Stage({rate: 0,  duration: 1 days}));\r\n\r\n\r\n        delete lockStages;\r\n\r\n        lockStages.push(Stage({rate: 33, duration: 30 days}));\r\n        lockStages.push(Stage({rate: 33, duration: 30 days}));\r\n        lockStages.push(Stage({rate: 34, duration: 30 days}));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"amountGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"},{\"name\":\"stageIdx\",\"type\":\"uint256\"}],\"name\":\"getLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoStages\",\"outputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasers\",\"outputs\":[{\"name\":\"amountEtherSpent\",\"type\":\"uint256\"},{\"name\":\"amountTokenTaken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReachedGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stageIndex\",\"type\":\"uint256\"}],\"name\":\"canTokenUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaserList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockStages\",\"outputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fundingGoalInEther\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stageIndex\",\"type\":\"uint256\"},{\"name\":\"purchaserStartIdx\",\"type\":\"uint256\"},{\"name\":\"purchaserEndIdx\",\"type\":\"uint256\"}],\"name\":\"unlockBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingTimeInSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiaryAddr\",\"type\":\"address\"},{\"name\":\"tokenHolderAddr\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusTokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokenIssued\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountUnlockedTokens\",\"type\":\"uint256\"}],\"name\":\"UnlockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"FairGameCrowdSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000587EFdCE16C9a1a4bBa436C6a5197658C468179e000000000000000000000000088b9099eae5f372405a29a7077faf3a82f94e050000000000000000000000009b20dabcec77f6289113e61893f7beefaeb1990a","Library":"","SwarmSource":"bzzr://ba957dcd038cee96d4faa6194877c555c2c7123013a7d93361c83cc15df54390"}]}