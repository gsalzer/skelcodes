{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Owned {\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract StandardToken is AbstractToken, Owned {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a ** b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract Token is StandardToken, SafeMath {\r\n\r\n    // Time of the contract creation\r\n    uint public creationTime;\r\n\r\n    function Token() public {\r\n        creationTime = now;\r\n    }\r\n\r\n\r\n    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    function transferERC20Token(address tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint balance = AbstractToken(tokenAddress).balanceOf(this);\r\n        return AbstractToken(tokenAddress).transfer(owner, balance);\r\n    }\r\n\r\n    /// @dev Multiplies the given number by 10^(decimals)\r\n    function withDecimals(uint number, uint decimals)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return mul(number, pow(10, decimals));\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 Token for Tokenbox project.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract TokenboxToken is Token {\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"Tokenbox\";\r\n \r\n    string constant public symbol = \"TBX\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    // Address where Foundation tokens are allocated\r\n    address constant public foundationReserve = address(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n    // Address where all tokens for the ICO stage are initially allocated\r\n    address constant public icoAllocation = address(0x1111111111111111111111111111111111111111);\r\n\r\n    // Address where all tokens for the PreICO are initially allocated\r\n    address constant public preIcoAllocation = address(0x2222222222222222222222222222222222222222);\r\n\r\n    // Vesting date to withdraw 15% of total sold tokens, 11/28/2018 @ 12:00pm (UTC)\r\n    uint256 constant public vestingDateEnd = 1543406400;\r\n\r\n    // Total USD collected (10^-12)\r\n    uint256 public totalPicoUSD = 0;\r\n    uint8 constant public usdDecimals = 12;\r\n\r\n    // Foundation multisignature wallet, all Ether is collected there\r\n    address public multisig;\r\n\r\n    bool public migrationCompleted = false;\r\n\r\n    // Events\r\n    event InvestmentInETH(address investor, uint256 tokenPriceInWei, uint256 investedInWei, uint256 investedInPicoUsd, uint256 tokensNumber, uint256 originalTransactionHash);\r\n    event InvestmentInBTC(address investor, uint256 tokenPriceInSatoshi, uint256 investedInSatoshi, uint256 investedInPicoUsd, uint256 tokensNumber, string btcAddress);\r\n    event InvestmentInUSD(address investor, uint256 tokenPriceInPicoUsd, uint256 investedInPicoUsd, uint256 tokensNumber);\r\n    event PresaleInvestment(address investor, uint256 investedInPicoUsd, uint256 tokensNumber);\r\n\r\n    /// @dev Contract constructor, sets totalSupply\r\n    function TokenboxToken(address _multisig, uint256 _preIcoTokens)\r\n        public\r\n    {\r\n        // Overall, 31,000,000 TBX tokens are distributed\r\n        totalSupply = withDecimals(31000000, decimals);\r\n\r\n        uint preIcoTokens = withDecimals(_preIcoTokens, decimals);\r\n\r\n        // PreICO tokens are allocated to the special address and will be distributed manually\r\n        balances[preIcoAllocation] = preIcoTokens;\r\n\r\n        // foundationReserve balance will be allocated after the end of the crowdsale\r\n        balances[foundationReserve] = 0;\r\n\r\n        // The rest of the tokens is available for sale (75% of totalSupply)\r\n        balances[icoAllocation] = div(mul(totalSupply, 75), 100) - preIcoTokens;\r\n\r\n        multisig = _multisig;\r\n    }\r\n\r\n    modifier migrationIsActive {\r\n        require(!migrationCompleted);\r\n        _;\r\n    }\r\n\r\n    modifier migrationIsCompleted {\r\n        require(migrationCompleted);\r\n        _;\r\n    }\r\n\r\n    /// @dev Settle an investment made in ETH and distribute tokens\r\n    function ethInvestment(address investor, uint256 tokenPriceInPicoUsd, uint256 investedInWei, uint256 originalTransactionHash, uint256 usdToWei)\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n    {\r\n        uint tokenPriceInWei = div(mul(tokenPriceInPicoUsd, usdToWei), pow(10, usdDecimals));\r\n\r\n        // Number of tokens to distribute\r\n        uint256 tokensNumber = div(withDecimals(investedInWei, decimals), tokenPriceInWei);\r\n\r\n        // Check if there is enough tokens left\r\n        require(balances[icoAllocation] >= tokensNumber);\r\n\r\n        uint256 investedInPicoUsd = div(withDecimals(investedInWei, usdDecimals), usdToWei);\r\n\r\n        usdInvestment(investor, investedInPicoUsd, tokensNumber);\r\n        InvestmentInETH(investor, tokenPriceInWei, investedInWei, investedInPicoUsd, tokensNumber, originalTransactionHash);\r\n    }\r\n\r\n    /// @dev Settle an investment in BTC and distribute tokens.\r\n    function btcInvestment(address investor, uint256 tokenPriceInPicoUsd, uint256 investedInSatoshi, string btcAddress, uint256 usdToSatoshi)\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n    {\r\n        uint tokenPriceInSatoshi = div(mul(tokenPriceInPicoUsd, usdToSatoshi), pow(10, usdDecimals));\r\n\r\n        // Number of tokens to distribute\r\n        uint256 tokensNumber = div(withDecimals(investedInSatoshi, decimals), tokenPriceInSatoshi);\r\n\r\n        // Check if there is enough tokens left\r\n        require(balances[icoAllocation] >= tokensNumber);\r\n\r\n        uint256 investedInPicoUsd = div(withDecimals(investedInSatoshi, usdDecimals), usdToSatoshi);\r\n\r\n        usdInvestment(investor, investedInPicoUsd, tokensNumber);\r\n        InvestmentInBTC(investor, tokenPriceInSatoshi, investedInSatoshi, investedInPicoUsd, tokensNumber, btcAddress);\r\n    }\r\n\r\n    // @dev Wire investment\r\n    function wireInvestment(address investor, uint256 tokenPriceInUsdCents, uint256 investedInUsdCents)\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n     {\r\n\r\n       uint256 tokensNumber = div(withDecimals(investedInUsdCents, decimals), tokenPriceInUsdCents);\r\n\r\n       // Check if there is enough tokens left\r\n       require(balances[icoAllocation] >= tokensNumber);\r\n\r\n       // We subtract 2 because the value is in cents.\r\n       uint256 investedInPicoUsd = withDecimals(investedInUsdCents, usdDecimals - 2);\r\n       uint256 tokenPriceInPicoUsd = withDecimals(tokenPriceInUsdCents, usdDecimals - 2);\r\n\r\n       usdInvestment(investor, investedInPicoUsd, tokensNumber);\r\n\r\n       InvestmentInUSD(investor, tokenPriceInPicoUsd, investedInPicoUsd, tokensNumber);\r\n    }\r\n\r\n    // @dev Invest in USD\r\n    function usdInvestment(address investor, uint256 investedInPicoUsd, uint256 tokensNumber)\r\n        private\r\n    {\r\n      totalPicoUSD = add(totalPicoUSD, investedInPicoUsd);\r\n\r\n      // Allocate tokens to an investor\r\n      balances[icoAllocation] -= tokensNumber;\r\n      balances[investor] += tokensNumber;\r\n      Transfer(icoAllocation, investor, tokensNumber);\r\n    }\r\n\r\n    // @dev Repeat a transaction from the old contract during the migration\r\n    function migrateTransfer(address _from, address _to, uint256 amount, uint256 originalTransactionHash)\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n    {   \r\n        require(balances[_from] >= amount);\r\n        balances[_from] -= amount;\r\n        balances[_to] += amount;\r\n        Transfer(_from, _to, amount);\r\n    }\r\n\r\n    // @dev Presale tokens distribution\r\n    function preIcoInvestment(address investor, uint256 investedInUsdCents, uint256 tokensNumber)\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n    {\r\n      uint256 tokensNumberWithDecimals = withDecimals(tokensNumber, decimals);\r\n\r\n      // Check if there is enough tokens left\r\n      require(balances[preIcoAllocation] >= tokensNumberWithDecimals);\r\n\r\n      // Allocate tokens to an investor\r\n      balances[preIcoAllocation] -= tokensNumberWithDecimals;\r\n      balances[investor] += tokensNumberWithDecimals;\r\n      Transfer(preIcoAllocation, investor, tokensNumberWithDecimals);\r\n\r\n      uint256 investedInPicoUsd = withDecimals(investedInUsdCents, usdDecimals - 2);\r\n\r\n      // Add investment to totalPicoUSD collected\r\n      totalPicoUSD = add(totalPicoUSD, investedInPicoUsd);\r\n\r\n      PresaleInvestment(investor, investedInPicoUsd, tokensNumberWithDecimals);\r\n    }\r\n\r\n\r\n    /// @dev Allow token withdrawals from Foundation reserve\r\n    function allowToWithdrawFromReserve()\r\n        public\r\n        migrationIsCompleted\r\n        onlyOwner\r\n    {\r\n        require(now >= vestingDateEnd);\r\n\r\n        // Allow the owner to withdraw tokens from the Foundation reserve\r\n        allowed[foundationReserve][msg.sender] = balanceOf(foundationReserve);\r\n    }\r\n\r\n\r\n    // @dev Withdraws tokens from Foundation reserve\r\n    function withdrawFromReserve(uint amount)\r\n        public\r\n        migrationIsCompleted\r\n        onlyOwner\r\n    {\r\n        require(now >= vestingDateEnd);\r\n\r\n        // Withdraw tokens from Foundation reserve to multisig address\r\n        require(transferFrom(foundationReserve, multisig, amount));\r\n    }\r\n\r\n    /// @dev Changes multisig address\r\n    function changeMultisig(address _multisig)\r\n        public\r\n        onlyOwner\r\n    {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        migrationIsCompleted\r\n        returns (bool success) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        migrationIsCompleted\r\n        returns (bool success)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @dev Burns the rest of the tokens after the crowdsale end and\r\n    /// send 10% tokens of totalSupply to team address\r\n    function finaliseICO()\r\n        public\r\n        migrationIsActive\r\n        onlyOwner\r\n    {\r\n        // Total number of tokents sold during the ICO + preICO\r\n        uint256 tokensSold = sub(div(mul(totalSupply, 75), 100), balanceOf(icoAllocation));\r\n\r\n        // 0.75 * totalSupply = tokensSold\r\n        totalSupply = div(mul(tokensSold, 100), 75);\r\n\r\n        // Send 5% bounty + 7.5% of total supply to team address\r\n        balances[multisig] = div(mul(totalSupply, 125), 1000);\r\n        Transfer(icoAllocation, multisig, balanceOf(multisig));\r\n\r\n        // Lock 12.5% of total supply to team address for one year\r\n        balances[foundationReserve] = div(mul(totalSupply, 125), 1000);\r\n        Transfer(icoAllocation, foundationReserve, balanceOf(foundationReserve));\r\n\r\n        // Burn the rest of tokens\r\n        Transfer(icoAllocation, 0x0000000000000000000000000000000000000000, balanceOf(icoAllocation));\r\n        balances[icoAllocation] = 0;\r\n\r\n        migrationCompleted = true;\r\n    }\r\n\r\n    function totalUSD()\r\n      public view\r\n      returns (uint)\r\n    {\r\n       return div(totalPicoUSD, pow(10, usdDecimals));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPicoUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenPriceInPicoUsd\",\"type\":\"uint256\"},{\"name\":\"investedInSatoshi\",\"type\":\"uint256\"},{\"name\":\"btcAddress\",\"type\":\"string\"},{\"name\":\"usdToSatoshi\",\"type\":\"uint256\"}],\"name\":\"btcInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finaliseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenPriceInUsdCents\",\"type\":\"uint256\"},{\"name\":\"investedInUsdCents\",\"type\":\"uint256\"}],\"name\":\"wireInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowToWithdrawFromReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenPriceInPicoUsd\",\"type\":\"uint256\"},{\"name\":\"investedInWei\",\"type\":\"uint256\"},{\"name\":\"originalTransactionHash\",\"type\":\"uint256\"},{\"name\":\"usdToWei\",\"type\":\"uint256\"}],\"name\":\"ethInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"investedInUsdCents\",\"type\":\"uint256\"},{\"name\":\"tokensNumber\",\"type\":\"uint256\"}],\"name\":\"preIcoInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingDateEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"originalTransactionHash\",\"type\":\"uint256\"}],\"name\":\"migrateTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_preIcoTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPriceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedInPicoUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"originalTransactionHash\",\"type\":\"uint256\"}],\"name\":\"InvestmentInETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPriceInSatoshi\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedInSatoshi\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedInPicoUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"InvestmentInBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenPriceInPicoUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedInPicoUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensNumber\",\"type\":\"uint256\"}],\"name\":\"InvestmentInUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investedInPicoUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensNumber\",\"type\":\"uint256\"}],\"name\":\"PresaleInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"TokenboxToken","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ad8ea3b0215e6efd9d2f2aa22baf6d494dbf7662000000000000000000000000000000000000000000000000000000000016d32d","Library":"","SwarmSource":"bzzr://0e82663b00867cc8b1721bcb061cdb448ec4d7c0361fd7bb81c16507996171a1"}]}