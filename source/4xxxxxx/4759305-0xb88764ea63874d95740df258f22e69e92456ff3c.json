{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract NFT {\r\n  function totalSupply() constant returns (uint);\r\n  function balanceOf(address) constant returns (uint);\r\n\r\n  function tokenOfOwnerByIndex(address owner, uint index) constant returns (uint);\r\n  function ownerOf(uint tokenId) constant returns (address);\r\n\r\n  function transfer(address to, uint tokenId);\r\n  function takeOwnership(uint tokenId);\r\n  function transferFrom(address from, address to, uint tokenId);\r\n  function approve(address beneficiary, uint tokenId);\r\n\r\n  function metadata(uint tokenId) constant returns (string);\r\n}\r\n\r\ncontract NFTEvents {\r\n  event Created(uint tokenId, address owner, string metadata);\r\n  event Destroyed(uint tokenId, address owner);\r\n\r\n  event Transferred(uint tokenId, address from, address to);\r\n  event Approval(address owner, address beneficiary, uint tokenId);\r\n\r\n  event MetadataUpdated(uint tokenId, address owner, string data);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicNFT is NFT, NFTEvents {\r\n\r\n  uint public totalTokens;\r\n\r\n  // Array of owned tokens for a user\r\n  mapping(address => uint[]) public ownedTokens;\r\n  mapping(address => uint) _virtualLength;\r\n  mapping(uint => uint) _tokenIndexInOwnerArray;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping(uint => address) public tokenOwner;\r\n\r\n  // Allowed transfers for a token (only one at a time)\r\n  mapping(uint => address) public allowedTransfer;\r\n\r\n  // Metadata associated with each token\r\n  mapping(uint => string) public _tokenMetadata;\r\n\r\n  function totalSupply() public constant returns (uint) {\r\n    return totalTokens;\r\n  }\r\n\r\n  function balanceOf(address owner) public constant returns (uint) {\r\n    return _virtualLength[owner];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(address owner, uint index) public constant returns (uint) {\r\n    require(index >= 0 && index < balanceOf(owner));\r\n    return ownedTokens[owner][index];\r\n  }\r\n\r\n  function getAllTokens(address owner) public constant returns (uint[]) {\r\n    uint size = _virtualLength[owner];\r\n    uint[] memory result = new uint[](size);\r\n    for (uint i = 0; i < size; i++) {\r\n      result[i] = ownedTokens[owner][i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function ownerOf(uint tokenId) public constant returns (address) {\r\n    return tokenOwner[tokenId];\r\n  }\r\n\r\n  function transfer(address to, uint tokenId) public {\r\n    require(tokenOwner[tokenId] == msg.sender || allowedTransfer[tokenId] == msg.sender);\r\n    return _transfer(tokenOwner[tokenId], to, tokenId);\r\n  }\r\n\r\n  function takeOwnership(uint tokenId) public {\r\n    require(allowedTransfer[tokenId] == msg.sender);\r\n    return _transfer(tokenOwner[tokenId], msg.sender, tokenId);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokenId) public {\r\n    require(allowedTransfer[tokenId] == msg.sender);\r\n    return _transfer(tokenOwner[tokenId], to, tokenId);\r\n  }\r\n\r\n  function approve(address beneficiary, uint tokenId) public {\r\n    require(msg.sender == tokenOwner[tokenId]);\r\n\r\n    if (allowedTransfer[tokenId] != 0) {\r\n      allowedTransfer[tokenId] = 0;\r\n    }\r\n    allowedTransfer[tokenId] = beneficiary;\r\n    Approval(tokenOwner[tokenId], beneficiary, tokenId);\r\n  }\r\n\r\n  function tokenMetadata(uint tokenId) constant public returns (string) {\r\n    return _tokenMetadata[tokenId];\r\n  }\r\n\r\n  function metadata(uint tokenId) constant public returns (string) {\r\n    return _tokenMetadata[tokenId];\r\n  }\r\n\r\n  function updateTokenMetadata(uint tokenId, string _metadata) public {\r\n    require(msg.sender == tokenOwner[tokenId]);\r\n    _tokenMetadata[tokenId] = _metadata;\r\n    MetadataUpdated(tokenId, msg.sender, _metadata);\r\n  }\r\n\r\n  function _transfer(address from, address to, uint tokenId) internal {\r\n    _clearApproval(tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n    Transferred(tokenId, from, to);\r\n  }\r\n\r\n  function _clearApproval(uint tokenId) internal {\r\n    allowedTransfer[tokenId] = 0;\r\n    Approval(tokenOwner[tokenId], 0, tokenId);\r\n  }\r\n\r\n  function _removeTokenFrom(address from, uint tokenId) internal {\r\n    require(_virtualLength[from] > 0);\r\n\r\n    uint length = _virtualLength[from];\r\n    uint index = _tokenIndexInOwnerArray[tokenId];\r\n    uint swapToken = ownedTokens[from][length - 1];\r\n\r\n    ownedTokens[from][index] = swapToken;\r\n    _tokenIndexInOwnerArray[swapToken] = index;\r\n    _virtualLength[from]--;\r\n  }\r\n\r\n  function _addTokenTo(address owner, uint tokenId) internal {\r\n    if (ownedTokens[owner].length == _virtualLength[owner]) {\r\n      ownedTokens[owner].push(tokenId);\r\n    } else {\r\n      ownedTokens[owner][_virtualLength[owner]] = tokenId;\r\n    }\r\n    tokenOwner[tokenId] = owner;\r\n    _tokenIndexInOwnerArray[tokenId] = _virtualLength[owner];\r\n    _virtualLength[owner]++;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract GAZUAToken is Ownable, BasicNFT {\r\n    string public name = \"Gazua\";\r\n    string public symbol = \"GAZ\";\r\n    uint public limitation = 300;\r\n\r\n    mapping (uint => string) public _message; //Personal Message;\r\n\r\n    event MessageUpdated(uint tokenId, address owner, string data);\r\n\r\n    using SafeMath for uint;\r\n\r\n    function generateToken(address beneficiary, uint tokenId, string _metadata, string _personalMessage) public onlyOwner {\r\n        require(tokenOwner[tokenId] == 0);\r\n        require(totalSupply() <= limitation);\r\n        _generateToken(beneficiary, tokenId, _metadata, _personalMessage);\r\n    }\r\n\r\n    function _generateToken(address beneficiary, uint tokenId, string _metadata, string _personalMessage) internal {\r\n        _addTokenTo(beneficiary, tokenId);\r\n        totalTokens++;\r\n        _tokenMetadata[tokenId] = _metadata;\r\n        _message[tokenId] = _personalMessage;\r\n        Created(tokenId, beneficiary, _metadata);\r\n    }\r\n\r\n    // no one can update metadata\r\n    function updateTokenMetadata(uint tokenId, string _metadata) public {\r\n         throw; \r\n    }\r\n\r\n    function addLimitation(uint _quantity) public onlyOwner returns (bool) {\r\n        limitation = limitation.add(_quantity);\r\n        return true;\r\n    }\r\n\r\n    function updateMessage(uint _tokenId, string _personalMessage) {\r\n        require(tokenOwner[_tokenId] == msg.sender);\r\n        _message[_tokenId] = _personalMessage;\r\n        MessageUpdated(_tokenId, msg.sender, _personalMessage);\r\n    }\r\n\r\n    function getMessage(uint _tokenId) public constant returns (string) {\r\n        return _message[_tokenId];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"addLimitation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"updateTokenMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_message\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_personalMessage\",\"type\":\"string\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_personalMessage\",\"type\":\"string\"}],\"name\":\"generateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"MessageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GAZUAToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2810cb7b7fad27b4c08f9737740f8d2680382ccb96d6f65392d29f59960a071"}]}