{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {}\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to,uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender,uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from,address indexed _to,uint256 _value);\r\n  event Approval(address indexed _owner,address indexed _spender,uint256 _value);\r\n\r\n  uint decimals;\r\n  string name;\r\n}\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a,uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function safeDiv(uint a,uint b) internal returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a,uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a,uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract ShortOrder is SafeMath {\r\n\r\n  address admin;\r\n\r\n  struct Order {\r\n    uint coupon;\r\n    uint balance;\r\n    bool tokenDeposit;\r\n    mapping (address => uint) shortBalance;\r\n    mapping (address => uint) longBalance;\r\n  }\r\n\r\n  mapping (address => mapping (bytes32 => Order)) orderRecord;\r\n\r\n  event TokenFulfillment(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint amount);\r\n  event CouponDeposit(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint value);\r\n  event LongPlace(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint value);\r\n  event LongBought(address[2] sellerShort,uint[3] amountNonceExpiry,uint8 v,bytes32[3] hashRS,uint value);\r\n  event TokenLongExercised(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint couponAmount,uint amount);\r\n  event EthLongExercised(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint couponAmount,uint amount);\r\n  event DonationClaimed(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint coupon,uint balance);\r\n  event NonActivationWithdrawal(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint coupon);\r\n  event ActivationWithdrawal(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs,uint balance);\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  function ShortOrder() {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  function changeAdmin(address _admin) external onlyAdmin {\r\n    admin = _admin;\r\n  }\r\n\r\n  function tokenFulfillmentDeposit(address[2] tokenUser,uint amount,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      block.number > minMaxDMWCPNonce[2] &&\r\n      block.number <= minMaxDMWCPNonce[3] && \r\n      orderRecord[tokenUser[1]][orderHash].balance >= minMaxDMWCPNonce[0] &&\r\n      amount == safeMul(orderRecord[msg.sender][orderHash].balance,minMaxDMWCPNonce[6]) &&\r\n      !orderRecord[msg.sender][orderHash].tokenDeposit\r\n    );\r\n    Token(tokenUser[0]).transferFrom(msg.sender,this,amount);\r\n    orderRecord[msg.sender][orderHash].shortBalance[tokenUser[0]] = safeAdd(orderRecord[msg.sender][orderHash].shortBalance[tokenUser[0]],amount);\r\n    orderRecord[msg.sender][orderHash].tokenDeposit = true;\r\n    TokenFulfillment(tokenUser,minMaxDMWCPNonce,v,rs,amount);\r\n  }\r\n \r\n  function depositCoupon(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external payable {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      msg.value == minMaxDMWCPNonce[5] &&\r\n      block.number <= minMaxDMWCPNonce[2]\r\n    );\r\n    orderRecord[msg.sender][orderHash].coupon = safeAdd(orderRecord[msg.sender][orderHash].coupon,msg.value);\r\n    CouponDeposit(tokenUser,minMaxDMWCPNonce,v,rs,msg.value);\r\n  }\r\n\r\n  function placeLong(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external payable {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number <= minMaxDMWCPNonce[2] &&\r\n      orderRecord[tokenUser[1]][orderHash].coupon == minMaxDMWCPNonce[5] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance <= minMaxDMWCPNonce[1]\r\n    );\r\n    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = safeAdd(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],msg.value);\r\n    orderRecord[tokenUser[1]][orderHash].balance = safeAdd(orderRecord[tokenUser[1]][orderHash].balance,msg.value);\r\n    LongPlace(tokenUser,minMaxDMWCPNonce,v,rs,msg.value);\r\n  }\r\n  \r\n  function buyLong(address[2] sellerShort,uint[3] amountNonceExpiry,uint8 v,bytes32[3] hashRS) external payable {\r\n    bytes32 longTransferHash = keccak256(sellerShort[0],amountNonceExpiry);\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",longTransferHash[0]),v,hashRS[1],hashRS[2]) == sellerShort[1] &&\r\n      msg.value == amountNonceExpiry[0] \r\n    );\r\n    sellerShort[0].transfer(msg.value);\r\n    orderRecord[sellerShort[1]][hashRS[0]].longBalance[msg.sender] = orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]];\r\n    orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]] = uint(0);\r\n    LongBought(sellerShort,amountNonceExpiry,v,hashRS,msg.value);\r\n  }\r\n\r\n  function exerciseLong(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > minMaxDMWCPNonce[3] &&\r\n      block.number <= minMaxDMWCPNonce[4] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance >= minMaxDMWCPNonce[0]\r\n    );\r\n    uint couponProportion = safeDiv(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],orderRecord[tokenUser[1]][orderHash].balance);\r\n    uint couponAmount;\r\n    if(orderRecord[msg.sender][orderHash].tokenDeposit) {\r\n      couponAmount = safeMul(orderRecord[tokenUser[1]][orderHash].coupon,couponProportion);\r\n      uint amount = safeMul(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],minMaxDMWCPNonce[6]);\r\n      msg.sender.transfer(couponAmount);\r\n      Token(tokenUser[0]).transfer(msg.sender,amount);\r\n      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\r\n      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n      orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = safeSub(orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]],amount);\r\n      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\r\n      TokenLongExercised(tokenUser,minMaxDMWCPNonce,v,rs,couponAmount,amount);\r\n    }\r\n    else {\r\n      couponAmount = safeMul(orderRecord[tokenUser[1]][orderHash].coupon,couponProportion);\r\n      msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]));\r\n      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\r\n      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0); \r\n      EthLongExercised(tokenUser,minMaxDMWCPNonce,v,rs,couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n    }\r\n  }\r\n\r\n  function claimDonations(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external onlyAdmin {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > minMaxDMWCPNonce[4]\r\n    );\r\n    admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance));\r\n    Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]);\r\n    orderRecord[tokenUser[1]][orderHash].balance = uint(0);\r\n    orderRecord[tokenUser[1]][orderHash].coupon = uint(0);\r\n    orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]] = uint(0);\r\n    DonationClaimed(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance);\r\n  }\r\n\r\n  function nonActivationShortWithdrawal(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == msg.sender &&\r\n      block.number > minMaxDMWCPNonce[3] &&\r\n      block.number <= minMaxDMWCPNonce[4] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance < minMaxDMWCPNonce[0]\r\n    );\r\n    msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon);\r\n    orderRecord[msg.sender][orderHash].coupon = uint(0);\r\n    NonActivationWithdrawal(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[msg.sender][orderHash].coupon);\r\n  }\r\n\r\n  function nonActivationWithdrawal(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(\r\n      ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\r\n      block.number > minMaxDMWCPNonce[3] &&\r\n      block.number <= minMaxDMWCPNonce[4] &&\r\n      orderRecord[tokenUser[1]][orderHash].balance < minMaxDMWCPNonce[0]\r\n    );\r\n    msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n    orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\r\n    ActivationWithdrawal(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\r\n  }\r\n\r\n  function returnBalance(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external constant returns (uint) {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1]);\r\n    return orderRecord[tokenUser[1]][orderHash].balance;\r\n  }\r\n\r\n  function returnTokenBalance(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external constant returns (uint) {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1]);\r\n    return orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[1]];\r\n  }\r\n\r\n  function returnUserBalance(address _user,address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external constant returns (uint) {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1]);\r\n    return orderRecord[tokenUser[1]][orderHash].longBalance[_user];\r\n  }\r\n\r\n  function returnCoupon(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external constant returns (uint) {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1]);\r\n    return orderRecord[tokenUser[1]][orderHash].coupon;\r\n  }\r\n\r\n  function returnTokenDepositState(address[2] tokenUser,uint[8] minMaxDMWCPNonce,uint8 v,bytes32[2] rs) external constant returns (bool) {\r\n    bytes32 orderHash = keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n    require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1]) == tokenUser[1]);\r\n    return orderRecord[tokenUser[1]][orderHash].tokenDeposit;\r\n  }\r\n \r\n  function returnHash(address[2] tokenUser,uint[8] minMaxDMWCPNonce)  external pure returns (bytes32) {\r\n    return  \r\n      keccak256 (\r\n        tokenUser[0],\r\n        tokenUser[1],\r\n        minMaxDMWCPNonce[0],\r\n        minMaxDMWCPNonce[1],\r\n        minMaxDMWCPNonce[2], \r\n        minMaxDMWCPNonce[3],\r\n        minMaxDMWCPNonce[4],\r\n        minMaxDMWCPNonce[5],\r\n        minMaxDMWCPNonce[6], \r\n        minMaxDMWCPNonce[7]\r\n      );\r\n  }\r\n\r\n\r\n  function returnAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\r\n    return ecrecover(orderHash,v,rs[0],rs[1]);\r\n  }\r\n\r\n  function returnHashLong(address seller,uint[3] amountNonceExpiry)  external pure returns (bytes32) {\r\n    return keccak256(seller,amountNonceExpiry[0],amountNonceExpiry[1],amountNonceExpiry[2]);\r\n  }\r\n\r\n  function returnLongAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\r\n    return ecrecover(orderHash,v,rs[0],rs[1]);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"claimDonations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnTokenDepositState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"}],\"name\":\"returnHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnCoupon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"exerciseLong\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"tokenFulfillmentDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"nonActivationShortWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"placeLong\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellerShort\",\"type\":\"address[2]\"},{\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"hashRS\",\"type\":\"bytes32[3]\"}],\"name\":\"buyLong\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnLongAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"}],\"name\":\"returnHashLong\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"depositCoupon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"nonActivationWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"rs\",\"type\":\"bytes32[2]\"}],\"name\":\"returnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenFulfillment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CouponDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LongPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sellerShort\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"amountNonceExpiry\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"hashRS\",\"type\":\"bytes32[3]\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LongBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLongExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthLongExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"coupon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DonationClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"coupon\",\"type\":\"uint256\"}],\"name\":\"NonActivationWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenUser\",\"type\":\"address[2]\"},{\"indexed\":false,\"name\":\"minMaxDMWCPNonce\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rs\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ActivationWithdrawal\",\"type\":\"event\"}]","ContractName":"ShortOrder","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71654480d1a3da9045aa5f93dc2c0be2ad30994015ef78920edd4f50b15e32fa"}]}