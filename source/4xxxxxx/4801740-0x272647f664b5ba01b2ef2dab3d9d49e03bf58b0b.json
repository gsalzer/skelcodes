{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n * Ownable\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) internal onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TradeFeeCalculator - Returns the calculated Fee Based on the Trade Value   \r\n * @dev Fee Calculation contract. All the units are dealt at wei level.\r\n * @author Dinesh\r\n */\r\ncontract TradeFeeCalculator is Ownable { \r\n    using SafeMath for uint256; \r\n    \r\n    // array to store optional fee by category: 0 - Base Token Fee, 1 - Ether Fee, 2 - External token Fee\r\n    // its numbers and its for every 1 token/1 Ether (should be only wei values)\r\n    uint256[3] public exFees;\r\n    \r\n    /**\r\n     * @dev constructor sets up owner\r\n     */\r\n    function TradeFeeCalculator() public {\r\n        // set up the owner\r\n        owner = msg.sender; \r\n    }\r\n    \r\n    /**\r\n     * @dev function updates the fees charged by the exchange. Fees will be mentioned per Ether (3792 Wand) \r\n     * @param _baseTokenFee is for the trades who pays fees in Native Tokens\r\n     */\r\n    function updateFeeSchedule(uint256 _baseTokenFee, uint256 _etherFee, uint256 _normalTokenFee) public onlyOwner {\r\n        // Base token fee should not exceed 1 ether worth of tokens (ex: 3792 wand = 1 ether), since 1 ether is our fee unit\r\n        require(_baseTokenFee >= 0 && _baseTokenFee <=  1 * 1 ether);\r\n        \r\n        // If the incoming trade is on Ether, then fee should not exceed 1 Ether\r\n        require(_etherFee >= 0 && _etherFee <=  1 * 1 ether);\r\n       \r\n        // If the incoming trade is on diffrent coins and if the exchange should allow diff tokens as fee, then \r\n        // input must be in wei converted value to suppport decimal - Special Case \r\n        /** Caution: Max value check must be done by Owner who is updating this value */\r\n        require(_normalTokenFee >= 0);\r\n        require(exFees.length == 3);\r\n        \r\n        // Stores the fee structure\r\n        exFees[0] = _baseTokenFee;  \r\n        exFees[1] = _etherFee; \r\n        exFees[2] = _normalTokenFee; \r\n    }\r\n    \r\n    /**\r\n     * @dev function to calculate transaction fees for given value and token\r\n     * @param _value is the given trade overall value\r\n     * @param _feeIndex indicates token pay options\r\n     * @return calculated trade fee\r\n     * Caution: _value is expected to be in wei units and it works for single token payment\r\n     */\r\n    function calcTradeFee(uint256 _value, uint256 _feeIndex) public view returns (uint256) {\r\n        require(_feeIndex >= 0 && _feeIndex <= 2);\r\n        require(_value > 0 && _value >=  1* 1 ether);\r\n        require(exFees.length == 3 && exFees[_feeIndex] > 0 );\r\n        \r\n        //Calculation Formula TotalFees = (_value * exFees[_feeIndex])/ (1 ether) \r\n        uint256 _totalFees = (_value.mul(exFees[_feeIndex])).div(1 ether);\r\n        \r\n        // Calculated total fee must be gretae than 0 for a given base fee > 0\r\n        require(_totalFees > 0);\r\n        \r\n        return _totalFees;\r\n    } \r\n    \r\n    /**\r\n     * @dev function to calculate transaction fees for given list of values and tokens\r\n     * @param _values is the list of given trade overall values\r\n     * @param _feeIndexes indicates list token pay options for each value \r\n     * @return list of calculated trade fees each value\r\n     * Caution: _values is expected to be in wei units and it works for multiple token payment\r\n     */\r\n    function calcTradeFeeMulti(uint256[] _values, uint256[] _feeIndexes) public view returns (uint256[]) {\r\n        require(_values.length > 0); \r\n        require(_feeIndexes.length > 0);  \r\n        require(_values.length == _feeIndexes.length); \r\n        require(exFees.length == 3);\r\n        \r\n        uint256[] memory _totalFees = new uint256[](_values.length);\r\n        // For Every token Value \r\n        for (uint256 i = 0; i < _values.length; i++){  \r\n            _totalFees[i] =  calcTradeFee(_values[i], _feeIndexes[i]);\r\n        }\r\n        require(_totalFees.length > 0);\r\n        require(_values.length == _totalFees.length);  \r\n        return _totalFees;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseTokenFee\",\"type\":\"uint256\"},{\"name\":\"_etherFee\",\"type\":\"uint256\"},{\"name\":\"_normalTokenFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_feeIndex\",\"type\":\"uint256\"}],\"name\":\"calcTradeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_feeIndexes\",\"type\":\"uint256[]\"}],\"name\":\"calcTradeFeeMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TradeFeeCalculator","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://726b19e25ad4613898c18bbb4b5b45bfa3148e07825acca3b947a5369ce15e49"}]}