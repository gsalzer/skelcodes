{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract LoggedERC20 is Ownable {\r\n    /* Structures */\r\n    struct LogValueBlock {\r\n    uint256 value;\r\n    uint256 block;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n    string public standard = 'LogValueBlockToken 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    LogValueBlock[] public loggedTotalSupply;\r\n\r\n    bool public locked;\r\n\r\n    uint256 public creationBlock;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => LogValueBlock[]) public loggedBalances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function LoggedERC20(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol,\r\n    bool transferAllSupplyToOwner,\r\n    bool _locked\r\n    ) {\r\n        LogValueBlock memory valueBlock = LogValueBlock(initialSupply, block.number);\r\n\r\n        loggedTotalSupply.push(valueBlock);\r\n\r\n        if(transferAllSupplyToOwner) {\r\n            loggedBalances[msg.sender].push(valueBlock);\r\n        }\r\n        else {\r\n            loggedBalances[this].push(valueBlock);\r\n        }\r\n\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n        locked = _locked;\r\n    }\r\n\r\n    function valueAt(LogValueBlock [] storage valueBlocks, uint256 block) internal returns (uint256) {\r\n        if(valueBlocks.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        LogValueBlock memory prevLogValueBlock;\r\n\r\n        for(uint256 i = 0; i < valueBlocks.length; i++) {\r\n\r\n            LogValueBlock memory valueBlock = valueBlocks[i];\r\n\r\n            if(valueBlock.block > block) {\r\n                return prevLogValueBlock.value;\r\n            }\r\n\r\n            prevLogValueBlock = valueBlock;\r\n        }\r\n\r\n        return prevLogValueBlock.value;\r\n    }\r\n\r\n    function setBalance(address _address, uint256 value) internal {\r\n        loggedBalances[_address].push(LogValueBlock(value, block.number));\r\n    }\r\n\r\n    function totalSupply() returns (uint256) {\r\n        return valueAt(loggedTotalSupply, block.number);\r\n    }\r\n\r\n    function balanceOf(address _address) returns (uint256) {\r\n        return valueAt(loggedBalances[_address], block.number);\r\n    }\r\n\r\n    function transferInternal(address _from, address _to, uint256 value) internal returns (bool success) {\r\n        uint256 balanceFrom = valueAt(loggedBalances[_from], block.number);\r\n        uint256 balanceTo = valueAt(loggedBalances[_to], block.number);\r\n\r\n        if(value == 0) {\r\n            return false;\r\n        }\r\n\r\n        if(frozenAccount[_from] == true) {\r\n            return false;\r\n        }\r\n\r\n        if(balanceFrom < value) {\r\n            return false;\r\n        }\r\n\r\n        if(balanceTo + value <= balanceTo) {\r\n            return false;\r\n        }\r\n\r\n        loggedBalances[_from].push(LogValueBlock(balanceFrom - value, block.number));\r\n        loggedBalances[_to].push(LogValueBlock(balanceTo + value, block.number));\r\n\r\n        Transfer(_from, _to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        require(locked == false);\r\n\r\n        bool status = transferInternal(msg.sender, _to, _value);\r\n\r\n        require(status == true);\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if(locked) {\r\n            return false;\r\n        }\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        if(locked) {\r\n            return false;\r\n        }\r\n\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if(locked) {\r\n            return false;\r\n        }\r\n\r\n        if(allowance[_from][msg.sender] < _value) {\r\n            return false;\r\n        }\r\n\r\n        bool _success = transferInternal(_from, _to, _value);\r\n\r\n        if(_success) {\r\n            allowance[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        return _success;\r\n    }\r\n}\r\n\r\ncontract LoggedDividend is Ownable, LoggedERC20 {\r\n    /* Structs */\r\n    struct Dividend {\r\n    uint256 id;\r\n\r\n    uint256 block;\r\n    uint256 time;\r\n    uint256 amount;\r\n\r\n    uint256 claimedAmount;\r\n    uint256 transferedBack;\r\n\r\n    uint256 totalSupply;\r\n    uint256 recycleTime;\r\n\r\n    bool recycled;\r\n\r\n    mapping (address => bool) claimed;\r\n    }\r\n\r\n    /* variables */\r\n    Dividend [] public dividends;\r\n\r\n    mapping (address => uint256) dividendsClaimed;\r\n\r\n    /* Events */\r\n    event DividendTransfered(uint256 id, address indexed _address, uint256 _block, uint256 _amount, uint256 _totalSupply);\r\n    event DividendClaimed(uint256 id, address indexed _address, uint256 _claim);\r\n    event UnclaimedDividendTransfer(uint256 id, uint256 _value);\r\n    event DividendRecycled(uint256 id, address indexed _recycler, uint256 _blockNumber, uint256 _amount, uint256 _totalSupply);\r\n\r\n    function LoggedDividend(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol,\r\n    bool transferAllSupplyToOwner,\r\n    bool _locked\r\n    ) LoggedERC20(initialSupply, tokenName, decimalUnits, tokenSymbol, transferAllSupplyToOwner, _locked) {\r\n\r\n    }\r\n\r\n    function addDividend(uint256 recycleTime) payable onlyOwner {\r\n        require(msg.value > 0);\r\n\r\n        uint256 id = dividends.length;\r\n        uint256 _totalSupply = valueAt(loggedTotalSupply, block.number);\r\n\r\n        dividends.push(\r\n        Dividend(\r\n        id,\r\n        block.number,\r\n        now,\r\n        msg.value,\r\n        0,\r\n        0,\r\n        _totalSupply,\r\n        recycleTime,\r\n        false\r\n        )\r\n        );\r\n\r\n        DividendTransfered(id, msg.sender, block.number, msg.value, _totalSupply);\r\n    }\r\n\r\n    function claimDividend(uint256 dividendId) public returns (bool) {\r\n        if(dividends.length - 1 < dividendId) {\r\n            return false;\r\n        }\r\n\r\n        Dividend storage dividend = dividends[dividendId];\r\n\r\n        if(dividend.claimed[msg.sender] == true) {\r\n            return false;\r\n        }\r\n\r\n        if(dividend.recycled == true) {\r\n            return false;\r\n        }\r\n\r\n        if(now >= dividend.time + dividend.recycleTime) {\r\n            return false;\r\n        }\r\n\r\n        uint256 balance = valueAt(loggedBalances[msg.sender], dividend.block);\r\n\r\n        if(balance == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 claim = balance * dividend.amount / dividend.totalSupply;\r\n\r\n        dividend.claimed[msg.sender] = true;\r\n\r\n        dividend.claimedAmount = dividend.claimedAmount + claim;\r\n\r\n        if (claim > 0) {\r\n            msg.sender.transfer(claim);\r\n            DividendClaimed(dividendId, msg.sender, claim);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function claimDividends() public {\r\n        require(dividendsClaimed[msg.sender] < dividends.length);\r\n        for (uint i = dividendsClaimed[msg.sender]; i < dividends.length; i++) {\r\n            if ((dividends[i].claimed[msg.sender] == false) && (dividends[i].recycled == false)) {\r\n                dividendsClaimed[msg.sender] = i + 1;\r\n                claimDividend(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function recycleDividend(uint256 dividendId) public onlyOwner returns (bool success) {\r\n        if(dividends.length - 1 < dividendId) {\r\n            return false;\r\n        }\r\n\r\n        Dividend storage dividend = dividends[dividendId];\r\n\r\n        if(dividend.recycled) {\r\n            return false;\r\n        }\r\n\r\n        dividend.recycled = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function refundUnclaimedEthers(uint256 dividendId) public onlyOwner returns (bool success) {\r\n        if(dividends.length - 1 < dividendId) {\r\n            return false;\r\n        }\r\n\r\n        Dividend storage dividend = dividends[dividendId];\r\n\r\n        if(dividend.recycled == false) {\r\n            if(now < dividend.time + dividend.recycleTime) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        uint256 claimedBackAmount = dividend.amount - dividend.claimedAmount;\r\n\r\n        dividend.transferedBack = claimedBackAmount;\r\n\r\n        if(claimedBackAmount > 0) {\r\n            owner.transfer(claimedBackAmount);\r\n\r\n            UnclaimedDividendTransfer(dividendId, claimedBackAmount);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract LoggedPhaseICO is LoggedDividend {\r\n    uint256 public icoSince;\r\n    uint256 public icoTill;\r\n\r\n    uint256 public collectedEthers;\r\n\r\n    Phase[] public phases;\r\n\r\n    struct Phase {\r\n    uint256 price;\r\n    uint256 maxAmount;\r\n    }\r\n\r\n    function LoggedPhaseICO(\r\n    uint256 _icoSince,\r\n    uint256 _icoTill,\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    string tokenSymbol,\r\n    uint8 precision,\r\n    bool transferAllSupplyToOwner,\r\n    bool _locked\r\n    ) LoggedDividend(initialSupply, tokenName, precision, tokenSymbol, transferAllSupplyToOwner, _locked) {\r\n        standard = 'LoggedPhaseICO 0.1';\r\n\r\n        icoSince = _icoSince;\r\n        icoTill = _icoTill;\r\n    }\r\n\r\n    function getIcoTokensAmount(uint256 collectedEthers, uint256 value) returns (uint256) {\r\n        uint256 amount;\r\n\r\n        uint256 newCollectedEthers = collectedEthers;\r\n        uint256 remainingValue = value;\r\n\r\n        for (uint i = 0; i < phases.length; i++) {\r\n            Phase storage phase = phases[i];\r\n\r\n            if(phase.maxAmount > newCollectedEthers) {\r\n                if (newCollectedEthers + remainingValue > phase.maxAmount) {\r\n                    uint256 diff = phase.maxAmount - newCollectedEthers;\r\n\r\n                    amount += diff * 1 ether / phase.price;\r\n\r\n                    remainingValue -= diff;\r\n                    newCollectedEthers += diff;\r\n                }\r\n                else {\r\n                    amount += remainingValue * 1 ether / phase.price;\r\n\r\n                    newCollectedEthers += remainingValue;\r\n\r\n                    remainingValue = 0;\r\n                }\r\n            }\r\n\r\n            if (remainingValue == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (remainingValue > 0) {\r\n            return 0;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function buy(address _address, uint256 time, uint256 value) internal returns (bool) {\r\n        if (locked == true) {\r\n            return false;\r\n        }\r\n\r\n        if (time < icoSince) {\r\n            return false;\r\n        }\r\n\r\n        if (time > icoTill) {\r\n            return false;\r\n        }\r\n\r\n        if (value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = getIcoTokensAmount(collectedEthers, value);\r\n\r\n        if(amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 selfBalance = valueAt(loggedBalances[this], block.number);\r\n        uint256 holderBalance = valueAt(loggedBalances[_address], block.number);\r\n\r\n        if (selfBalance < amount) {\r\n            return false;\r\n        }\r\n\r\n        if (holderBalance + amount < holderBalance) {\r\n            return false;\r\n        }\r\n\r\n        setBalance(_address, holderBalance + amount);\r\n        setBalance(this, selfBalance - amount);\r\n\r\n        collectedEthers += value;\r\n\r\n        Transfer(this, _address, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function () payable {\r\n        bool status = buy(msg.sender, now, msg.value);\r\n\r\n        require(status == true);\r\n    }\r\n}\r\n\r\ncontract Cajutel is LoggedPhaseICO {\r\n    function Cajutel(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    string tokenSymbol,\r\n    address founder1,\r\n    address founder2,\r\n    address marketing,\r\n    uint256 icoSince,\r\n    uint256 icoTill\r\n    ) LoggedPhaseICO(icoSince, icoTill, initialSupply, tokenName, tokenSymbol, 18, false, false) {\r\n        standard = 'Cajutel 0.1';\r\n\r\n        phases.push(Phase(0.05 ether, 500 ether));\r\n        phases.push(Phase(0.075 ether, 750 ether + 500 ether));\r\n        phases.push(Phase(0.1 ether, 10000 ether + 750 ether + 500 ether));\r\n        phases.push(Phase(0.15 ether, 30000 ether + 10000 ether + 750 ether + 500 ether));\r\n        phases.push(Phase(0.2 ether, 80000 ether + 30000 ether + 10000 ether + 750 ether + 500 ether));\r\n\r\n        uint256 founder1Tokens = 900000000000000000000000;\r\n        uint256 founder2Tokens = 100000000000000000000000;\r\n        uint256 marketingTokens = 60000000000000000000000;\r\n\r\n        setBalance(founder1, founder1Tokens);\r\n\r\n        Transfer(this, founder1, founder1Tokens);\r\n\r\n        setBalance(founder2, founder2Tokens);\r\n\r\n        Transfer(this, founder2, founder2Tokens);\r\n\r\n        setBalance(marketing, marketingTokens);\r\n\r\n        Transfer(this, marketing, marketingTokens);\r\n\r\n        setBalance(this, initialSupply - founder1Tokens - founder2Tokens - marketingTokens);\r\n    }\r\n\r\n    function transferEthers() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function setLocked(bool _locked) onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function setIcoDates(uint256 _icoSince, uint256 _icoTill) onlyOwner {\r\n        icoSince = _icoSince;\r\n        icoTill = _icoTill;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collectedEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collectedEthers\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getIcoTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"}],\"name\":\"refundUnclaimedEthers\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"}],\"name\":\"recycleDividend\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loggedBalances\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSince\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recycleTime\",\"type\":\"uint256\"}],\"name\":\"addDividend\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoSince\",\"type\":\"uint256\"},{\"name\":\"_icoTill\",\"type\":\"uint256\"}],\"name\":\"setIcoDates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"name\":\"transferedBack\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"recycleTime\",\"type\":\"uint256\"},{\"name\":\"recycled\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dividendId\",\"type\":\"uint256\"}],\"name\":\"claimDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loggedTotalSupply\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"founder1\",\"type\":\"address\"},{\"name\":\"founder2\",\"type\":\"address\"},{\"name\":\"marketing\",\"type\":\"address\"},{\"name\":\"icoSince\",\"type\":\"uint256\"},{\"name\":\"icoTill\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"DividendTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_claim\",\"type\":\"uint256\"}],\"name\":\"DividendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"UnclaimedDividendTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_recycler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"DividendRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"Cajutel","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000178edfe4c43cff08000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000015d9250358489ceb509121963ff80e747c7f981f00000000000000000000000021c5dfd6fcca838634d0039c9b15b7ba57bd6298000000000000000000000000716134814fd704c3b7c2d829068d70962d942fda000000000000000000000000000000000000000000000000000000005996a5880000000000000000000000000000000000000000000000000000000059bf83e6000000000000000000000000000000000000000000000000000000000000000743616a7574656c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343414a0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bb1f760fcc3411e0af2b05e0ccf283570bfbe432040ca29bc1ea572eba69004e"}]}