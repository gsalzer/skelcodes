{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfer ownership from `owner` to `newOwner`\r\n    /// @param _newOwner The new contract owner\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        if (_newOwner != address(0)) {\r\n            newOwner = _newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice accept ownership of the contract\r\n    function acceptOwnership() {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Administrable is Ownable {\r\n\r\n    event AdminstratorAdded(address adminAddress);\r\n    event AdminstratorRemoved(address adminAddress);\r\n\r\n    mapping (address => bool) public administrators;\r\n\r\n    modifier onlyAdministrator() {\r\n        require(administrators[msg.sender] || owner == msg.sender); // owner is an admin by default\r\n        _;\r\n    }\r\n\r\n    /// @notice Add an administrator\r\n    /// @param _adminAddress The new administrator address\r\n    function addAdministrators(address _adminAddress) onlyOwner {\r\n        administrators[_adminAddress] = true;\r\n        AdminstratorAdded(_adminAddress);\r\n    }\r\n\r\n    /// @notice Remove an administrator\r\n    /// @param _adminAddress The administrator address to remove\r\n    function removeAdministrators(address _adminAddress) onlyOwner {\r\n        delete administrators[_adminAddress];\r\n        AdminstratorRemoved(_adminAddress);\r\n    }\r\n}\r\n\r\n/// @title Gimli Token Contract.\r\ncontract GimliToken is ERC20, SafeMath, Ownable {\r\n\r\n\r\n    /*************************\r\n    **** Global variables ****\r\n    *************************/\r\n\r\n    uint8 public constant decimals = 8;\r\n    string public constant name = \"Gimli Token\";\r\n    string public constant symbol = \"GIM\";\r\n    string public constant version = 'v1';\r\n\r\n    /// total amount of tokens\r\n    uint256 public constant UNIT = 10**uint256(decimals);\r\n    uint256 constant MILLION_GML = 10**6 * UNIT; // can't use `safeMul` with constant\r\n    /// Should include CROWDSALE_AMOUNT and VESTING_X_AMOUNT\r\n    uint256 public constant TOTAL_SUPPLY = 150 * MILLION_GML; // can't use `safeMul` with constant;\r\n\r\n    /// balances indexed by address\r\n    mapping (address => uint256) balances;\r\n\r\n    /// allowances indexed by owner and spender\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool public transferable = false;\r\n\r\n    /*********************\r\n    **** Transactions ****\r\n    *********************/\r\n\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        require(transferable);\r\n\r\n        require(balances[msg.sender] >= _value && _value >=0);\r\n\r\n\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(transferable);\r\n\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\r\n\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /****************\r\n    **** Getters ****\r\n    ****************/\r\n\r\n    /// @notice Get balance of an address\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @notice Get tokens allowed to spent by `_spender`\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/// @title Gimli Crowdsale Contract.\r\ncontract GimliCrowdsale is SafeMath, GimliToken {\r\n\r\n    address public constant MULTISIG_WALLET_ADDRESS = 0xc79ab28c5c03f1e7fbef056167364e6782f9ff4f;\r\n    address public constant LOCKED_ADDRESS = 0xABcdEFABcdEFabcdEfAbCdefabcdeFABcDEFabCD;\r\n\r\n    // crowdsale\r\n    uint256 public constant CROWDSALE_AMOUNT = 80 * MILLION_GML; // Should not include vested amount\r\n    uint256 public constant START_DATE = 1505736000; //  (epoch timestamp)\r\n    uint256 public constant END_DATE = 1508500800; // TODO (epoch timestamp)\r\n    uint256 public constant CROWDSALE_PRICE = 700; // 700 GML / ETH\r\n    uint256 public constant VESTING_1_AMOUNT = 10 * MILLION_GML; // GIM reserve fund\r\n    uint256 public constant VESTING_1_DATE = 1537272000; // TODO (epoch timestamp)\r\n    uint256 public constant VESTING_2_AMOUNT = 30 * MILLION_GML; // Team\r\n    uint256 public constant VESTING_2_DATE = 1568808000; // TODO (epoch timestamp)\r\n    bool public vesting1Withdrawn = false;\r\n    bool public vesting2Withdrawn = false;\r\n    bool public crowdsaleCanceled = false;\r\n    uint256 public soldAmount; // GIM\r\n    uint256 public paidAmount; // ETH\r\n\r\n    /// @notice `msg.sender` invest `msg.value`\r\n    function() payable {\r\n        require(!crowdsaleCanceled);\r\n\r\n        require(msg.value > 0);\r\n        // check date\r\n        require(block.timestamp >= START_DATE && block.timestamp <= END_DATE);\r\n\r\n        // calculate and check quantity\r\n        uint256 quantity = safeDiv(safeMul(msg.value, CROWDSALE_PRICE), 10**(18-uint256(decimals)));\r\n        require(safeSub(balances[this], quantity) >= 0);\r\n\r\n        require(MULTISIG_WALLET_ADDRESS.send(msg.value));\r\n\r\n        // update balances\r\n        balances[this] = safeSub(balances[this], quantity);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], quantity);\r\n        soldAmount = safeAdd(soldAmount, quantity);\r\n        paidAmount = safeAdd(paidAmount, msg.value);\r\n\r\n        Transfer(this, msg.sender, quantity);\r\n    }\r\n\r\n    /// @notice returns non-sold tokens to owner\r\n    function  closeCrowdsale() onlyOwner {\r\n        // check if closable\r\n        require(block.timestamp > END_DATE || crowdsaleCanceled || balances[this] == 0);\r\n\r\n        // enable token transfer\r\n        transferable = true;\r\n\r\n        // update balances\r\n        if (balances[this] > 0) {\r\n            uint256 amount = balances[this];\r\n            balances[MULTISIG_WALLET_ADDRESS] = safeAdd(balances[MULTISIG_WALLET_ADDRESS], amount);\r\n            balances[this] = 0;\r\n            Transfer(this, MULTISIG_WALLET_ADDRESS, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Terminate the crowdsale before END_DATE\r\n    function cancelCrowdsale() onlyOwner {\r\n        crowdsaleCanceled = true;\r\n    }\r\n\r\n    /// @notice Pre-allocate tokens to advisor or partner\r\n    /// @param _to The pre-allocation destination\r\n    /// @param _value The amount of token to be allocated\r\n    /// @param _price ETH paid for these tokens\r\n    function preAllocate(address _to, uint256 _value, uint256 _price) onlyOwner {\r\n        require(block.timestamp < START_DATE);\r\n\r\n        balances[this] = safeSub(balances[this], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        soldAmount = safeAdd(soldAmount, _value);\r\n        paidAmount = safeAdd(paidAmount, _price);\r\n\r\n        Transfer(this, _to, _value);\r\n    }\r\n\r\n    /// @notice Send vested amount to _destination\r\n    /// @param _destination The address of the recipient\r\n    /// @return Whether the release was successful or not\r\n    function releaseVesting(address _destination) onlyOwner returns (bool success) {\r\n        if (block.timestamp > VESTING_1_DATE && vesting1Withdrawn == false) {\r\n            balances[LOCKED_ADDRESS] = safeSub(balances[LOCKED_ADDRESS], VESTING_1_AMOUNT);\r\n            balances[_destination] = safeAdd(balances[_destination], VESTING_1_AMOUNT);\r\n            vesting1Withdrawn = true;\r\n            Transfer(LOCKED_ADDRESS, _destination, VESTING_1_AMOUNT);\r\n            return true;\r\n        }\r\n        if (block.timestamp > VESTING_2_DATE && vesting2Withdrawn == false) {\r\n            balances[LOCKED_ADDRESS] = safeSub(balances[LOCKED_ADDRESS], VESTING_2_AMOUNT);\r\n            balances[_destination] = safeAdd(balances[_destination], VESTING_2_AMOUNT);\r\n            vesting2Withdrawn = true;\r\n            Transfer(LOCKED_ADDRESS, _destination, VESTING_2_AMOUNT);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice transfer out any accidentally sent ERC20 tokens\r\n    /// @param tokenAddress Address of the ERC20 contract\r\n    /// @param amount The amount of token to be transfered\r\n    function transferOtherERC20Token(address tokenAddress, uint256 amount)\r\n      onlyOwner returns (bool success)\r\n    {\r\n        // can't be used for GIM token\r\n        require(tokenAddress != address(this) || transferable);\r\n        return ERC20(tokenAddress).transfer(owner, amount);\r\n    }\r\n}\r\n\r\n/// @title Main Gimli contract.\r\ncontract Gimli is GimliCrowdsale, Administrable {\r\n\r\n    address public streamerContract;\r\n    uint256 public streamerContractMaxAmount;\r\n\r\n    event StreamerContractChanged(address newContractAddress, uint256 newMaxAmount);\r\n\r\n    /// @notice Gimli Contract constructor. `msg.sender` is the owner.\r\n    function Gimli() {\r\n        // Give the multisig wallet initial tokens\r\n        balances[MULTISIG_WALLET_ADDRESS] = safeAdd(balances[MULTISIG_WALLET_ADDRESS], TOTAL_SUPPLY - CROWDSALE_AMOUNT - VESTING_1_AMOUNT - VESTING_2_AMOUNT);\r\n        // Give the contract crowdsale amount\r\n        balances[this] = CROWDSALE_AMOUNT;\r\n        // Locked address\r\n        balances[LOCKED_ADDRESS] = VESTING_1_AMOUNT + VESTING_2_AMOUNT;\r\n        // For ERC20 compatibility\r\n        totalSupply = TOTAL_SUPPLY;\r\n    }\r\n\r\n    /// @notice authorize an address to transfer GIM on behalf an user\r\n    /// @param _contractAddress Address of GimliStreamer contract\r\n    /// @param _maxAmount The maximum amount that can be transfered by the contract\r\n    function setStreamerContract(\r\n        address _contractAddress,\r\n        uint256 _maxAmount) onlyAdministrator\r\n    {\r\n        // To change the maximum amount you first have to reduce it to 0`\r\n        require(_maxAmount == 0 || streamerContractMaxAmount == 0);\r\n\r\n        streamerContract = _contractAddress;\r\n        streamerContractMaxAmount = _maxAmount;\r\n\r\n        StreamerContractChanged(streamerContract, streamerContractMaxAmount);\r\n    }\r\n\r\n    /// @notice Called by a Gimli contract to transfer GIM\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferGIM(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        require(msg.sender == streamerContract);\r\n        require(tx.origin == _from);\r\n        require(_amount <= streamerContractMaxAmount);\r\n\r\n        if (balances[_from] < _amount || _amount <= 0)\r\n            return false;\r\n\r\n        balances[_from] = safeSub(balances[_from], _amount);\r\n        balances[_to] = safeAdd(balances[_to], _amount);\r\n\r\n        Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_1_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_2_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTISIG_WALLET_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdministrators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"streamerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setStreamerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_1_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting2Withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting1Withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdministrators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferGIM\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOtherERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_2_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"preAllocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"releaseVesting\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"streamerContractMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"StreamerContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminstratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminstratorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Gimli","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c0286be97ba73afde87c149c234469f0690bbd95c5cee7480c1cac790bfb08a"}]}