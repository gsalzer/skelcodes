{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  /// account.\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  /// @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/// @title Pausable\r\n/// @dev Base contract which allows children to implement an emergency stop mechanism.\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /// @dev Modifier to make a function callable only when the contract is not paused.\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /// @dev Modifier to make a function callable only when the contract is paused.\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /// @dev called by the owner to pause, triggers stopped state\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /// @dev called by the owner to unpause, returns to normal state\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title The interface to execute the tokenFallback\r\n/// @author Merunas Grincalaitis <merunasgrincalaitis@gmail.com>\r\ncontract ContractReceiver {\r\n  function tokenFallback(address from, uint value, bytes data) public;\r\n}\r\n\r\n\r\n/// @title Custom ERC223 Implementation\r\n/// @author Merunas Grincalaitis <merunasgrincalaitis@gmail.com>\r\ncontract ERC223 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  event Approval(address owner, address spender, uint256 amount);\r\n  event Transfer(address from, address to, uint256 value);\r\n  event Transfer(address from, address to, uint256 value, bytes data);\r\n\r\n  /// @notice To make token transfers to a user or a contract\r\n  /// @param to The receiver of the tokens\r\n  /// @param value The amount of tokens to transfer\r\n  /// @return _success If the transfer was successful\r\n  function transfer(address to, uint256 value) public returns (bool _success) {\r\n    require(to != address(0));\r\n    require(value != 0);\r\n\r\n    bytes memory emptyData;\r\n\r\n    if (isContract(to)) {\r\n      return transferToContract(to, value, emptyData);\r\n    } else {\r\n      return transferToAddress(to, value, emptyData);\r\n    }\r\n  }\r\n\r\n  /// @notice To make token transfers to a user or a contract with additional data\r\n  /// @param to The receiver of the tokens\r\n  /// @param value The amount of tokens to transfer\r\n  /// @param data The data to send\r\n  /// @return _success If the transfer was successful\r\n  function transfer(address to, uint256 value, bytes data) public returns (bool _success) {\r\n    require(to != address(0));\r\n    require(value != 0);\r\n    require(data.length != 0);\r\n\r\n    if (isContract(to)) {\r\n      return transferToContract(to, value, data);\r\n    } else {\r\n      return transferToAddress(to, value, data);\r\n    }\r\n  }\r\n\r\n  /// @notice To make token transfers from the allowance of another user\r\n  /// @param from The user that allowed you to use his tokens\r\n  /// @param to The amount of tokens to use\r\n  /// @param value The amount of tokens to transfer\r\n  /// @return _success If the transfer was successful\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool _success) {\r\n    require(from != address(0));\r\n    require(to != address(0));\r\n    require(value != 0);\r\n\r\n    uint256 allowance = allowed[from][msg.sender];\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    allowed[from][msg.sender] = allowance.sub(value);\r\n    balances[to] = balances[to].add(value);\r\n\r\n    Transfer(from, to, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice To approve another user to use your tokens\r\n  /// @param spender The user that will be able to use your tokens\r\n  /// @param value The amount of tokens to approve\r\n  /// @return _success If the transfer was successful\r\n  function approve(address spender, uint256 value) public returns (bool _success) {\r\n    require(spender != address(0));\r\n    require(value != 0);\r\n\r\n    allowed[msg.sender][spender] = value;\r\n\r\n    Approval(msg.sender, spender, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice To transfer tokens to a user address\r\n  /// @param to The receiver of the tokens\r\n  /// @param value How many tokens he'll receive\r\n  /// @param data Additional data\r\n  /// @return _success If the transfer was successful\r\n  function transferToAddress(address to, uint256 value, bytes data) public returns (bool _success) {\r\n    require(to != address(0));\r\n    require(value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n\r\n    Transfer(msg.sender, to, value, data);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice To transfer tokens to a contract address\r\n  /// @param to The receiver of the tokens\r\n  /// @param value How many tokens he'll receive\r\n  /// @param data Additional data\r\n  /// @return _success If the transfer was successful\r\n  function transferToContract(address to, uint256 value, bytes data) public returns (bool _success) {\r\n    require(to != address(0));\r\n    require(value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n\r\n    ContractReceiver(to).tokenFallback(msg.sender, value, data);\r\n\r\n    Transfer(msg.sender, to, value, data);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  /// @param _owner address The address which owns the funds.\r\n  /// @param _spender address The address which will spend the funds.\r\n  /// @return A uint256 specifying the amount of tokens still available for the spender.\r\n  function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /// @notice To get the token balance of a user\r\n  /// @return _balance How much balance that user has\r\n  function balanceOf(address owner) public constant returns (uint256 _balance) {\r\n    require(owner != address(0));\r\n    return balances[owner];\r\n  }\r\n\r\n  /// @notice To check if an address is a contract or not\r\n  /// @return _isContract If it's a contract or not\r\n  function isContract(address addr) public constant returns (bool _isContract) {\r\n    require(addr != address(0));\r\n\r\n    uint256 length;\r\n\r\n    assembly {\r\n      length := extcodesize(addr)\r\n    }\r\n\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\n/// @title The ERC223 Topcoin Smart Contract\r\n/// @author Merunas Grincalaitis <merunasgrincalaitis@gmail.com>\r\ncontract Topcoin is ERC223, Pausable {\r\n  string public constant name = 'Topcoin';\r\n  string public constant symbol = 'TPC';\r\n  uint8 public constant decimals = 18;\r\n\r\n  // 3000M tokens with 18 decimals maximum\r\n  uint256 public constant totalSupply = 3000e24;\r\n\r\n  // The amount of tokens to distribute on the crowsale\r\n  uint256 public constant crowdsaleTokens = 1000e24;\r\n  uint256 public ICOEndTime;\r\n  address public crowdsale;\r\n  uint256 public tokensRaised;\r\n\r\n  // Only allow token transfers after the ICO\r\n  modifier afterCrowdsale() {\r\n     require(now >= ICOEndTime);\r\n     _;\r\n  }\r\n\r\n  // Only the crowdsale\r\n  modifier onlyCrowdsale() {\r\n     require(msg.sender == crowdsale);\r\n     _;\r\n  }\r\n\r\n  // For the crowsale closing function\r\n  modifier onlyOwnerOrCrowdsale() {\r\n    require(msg.sender == owner || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  /// @notice The constructor used to set the initial balance for the founder and development\r\n  /// the owner of those tokens will distribute the tokens for development and platform\r\n  /// @param _ICOEndTime When will the ICO end to allow token transfers after the ICO only,\r\n  /// required parameter\r\n  function Topcoin(uint256 _ICOEndTime) public {\r\n     require(_ICOEndTime > 0 && _ICOEndTime > now);\r\n\r\n     ICOEndTime = _ICOEndTime;\r\n     balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  /// @notice To set the address of the crowdsale in order to distribute the tokens\r\n  /// @param _crowdsale The address of the crowdsale\r\n  function setCrowdsaleAddress(address _crowdsale) public onlyOwner {\r\n     require(_crowdsale != address(0));\r\n\r\n     crowdsale = _crowdsale;\r\n  }\r\n\r\n  /// @notice To distribute the presale and ICO tokens and increase the total\r\n  /// supply accordingly. The unsold tokens will be deleted, not generated\r\n  /// @param _to The user that will receive the tokens\r\n  /// @param _amount How many tokens he'll receive\r\n  function distributeTokens(address _to, uint256 _amount) public onlyOwnerOrCrowdsale {\r\n     require(_to != address(0));\r\n     require(_amount > 0);\r\n     require(tokensRaised.add(_amount) <= crowdsaleTokens);\r\n\r\n     tokensRaised = tokensRaised.add(_amount);\r\n     balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n     balances[_to] = balances[_to].add(_amount);\r\n  }\r\n\r\n  /// @notice To convert the old tokens to the new version manually\r\n  /// @param _receiver The receiver of the tokens\r\n  /// @param _oldAmount How many old tokens does that user have\r\n  function convertOldTokens(address _receiver, uint256 _oldAmount) external onlyOwner {\r\n    require(_receiver != address(0));\r\n    require(_oldAmount > 0);\r\n\r\n    uint256 amountNewTokens = _oldAmount.mul(2);\r\n\r\n    balances[owner] = balances[owner].sub(amountNewTokens);\r\n    balances[_receiver] = balances[_receiver].add(amountNewTokens);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function transfer(address _to, uint256 _value) public whenNotPaused afterCrowdsale returns(bool) {\r\n     return super.transfer(_to, _value);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function transfer(address to, uint256 value, bytes data) public whenNotPaused afterCrowdsale returns (bool _success) {\r\n    return super.transfer(to, value, data);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused afterCrowdsale returns(bool) {\r\n     return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function approve(address _spender, uint256 _value) public whenNotPaused afterCrowdsale returns(bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function transferToAddress(address to, uint256 value, bytes data) public whenNotPaused afterCrowdsale returns (bool _success) {\r\n    return super.transferToAddress(to, value, data);\r\n  }\r\n\r\n  /// @notice Override the functions to not allow token transfers until the end of the ICO\r\n  function transferToContract(address to, uint256 value, bytes data) public whenNotPaused afterCrowdsale returns (bool _success) {\r\n    return super.transferToContract(to, value, data);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"_isContract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferToAddress\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferToContract\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_oldAmount\",\"type\":\"uint256\"}],\"name\":\"convertOldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ICOEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Topcoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a85a070","Library":"","SwarmSource":"bzzr://8482fe22aefabada38d2da8457b95c18325cd62fb563837a8429293012d2ccdc"}]}