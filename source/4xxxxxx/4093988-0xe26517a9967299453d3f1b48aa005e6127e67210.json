{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n////////////////////////////////////////////////\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n///////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\ncontract NIMFAToken is StandardToken {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\t\r\n\t\r\n\tevent CreatedNIMFA(address indexed _creator, uint256 _amountOfNIMFA);\r\n\t\r\n\t// Token data\r\n\tstring public constant name = \"NIMFA Token\";\r\n\tstring public constant symbol = \"NIMFA\";\r\n\tuint256 public constant decimals = 18; \r\n\tstring public version = \"1.0\";\r\n\t\r\n\t// Addresses and contracts\r\n\taddress public executor;\r\n\taddress public teamETHAddress;  \r\n\taddress public teamNIMFAAddress;\r\n\taddress public creditFundNIMFAAddress;\r\n\taddress public reserveNIMFAAddress;\r\n\t\r\n\tbool public preSaleHasEnded;\r\n\tbool public saleHasEnded;\r\n\tbool public allowTransfer;\r\n\tbool public maxPreSale;  // 1000000 NIMFA for pre sale price\r\n\tmapping (address => uint256) public ETHContributed;\r\n\tuint256 public totalETH;\r\n\tuint256 public preSaleStartBlock;\r\n\tuint256 public preSaleEndBlock;\r\n\tuint256 public saleStartBlock;\r\n\tuint256 public saleEndBlock;\r\n\tuint256 public constant NIMFA_PER_ETH_PRE_SALE = 1100;  // 1100 NIMFA = 1 ETH \r\n\tuint256 public constant NIMFA_PER_ETH_SALE = 110;  // 110 NIMFA = 1 ETH \r\n\t\r\n\r\n\t\r\n\tfunction NIMFAToken(\r\n\t\taddress _teamETHAddress,\r\n\t\taddress _teamNIMFAAddress,\r\n\t\taddress _creditFundNIMFAAddress,\r\n\t\taddress _reserveNIMFAAddress,\r\n\t\tuint256 _preSaleStartBlock,\r\n\t\tuint256 _preSaleEndBlock\r\n\t) {\r\n\t\t\r\n\t\tif (_teamETHAddress == address(0x0)) throw;\r\n\t\tif (_teamNIMFAAddress == address(0x0)) throw;\r\n\t\tif (_creditFundNIMFAAddress == address(0x0)) throw;\r\n\t\tif (_reserveNIMFAAddress == address(0x0)) throw;\r\n\t\t// Reject if sale ends before the current block\r\n\t\tif (_preSaleEndBlock <= block.number) throw;\r\n\t\t// Reject if the sale end time is less than the sale start time\r\n\t\tif (_preSaleEndBlock <= _preSaleStartBlock) throw;\r\n\r\n\t\texecutor = msg.sender;\r\n\t\tpreSaleHasEnded = false;\r\n\t\tsaleHasEnded = false;\r\n\t\tallowTransfer = false;\r\n\t\tmaxPreSale = false;\r\n\t\tteamETHAddress = _teamETHAddress;\r\n\t\tteamNIMFAAddress = _teamNIMFAAddress;\r\n\t\tcreditFundNIMFAAddress = _creditFundNIMFAAddress;\r\n\t\treserveNIMFAAddress = _reserveNIMFAAddress;\r\n\t\ttotalETH = 0;\r\n\t\tpreSaleStartBlock = _preSaleStartBlock;\r\n\t\tpreSaleEndBlock = _preSaleEndBlock;\r\n\t\tsaleStartBlock = _preSaleStartBlock;\r\n\t\tsaleEndBlock = _preSaleEndBlock;\r\n\t\ttotalSupply = 0;\r\n\t}\r\n\t\r\n\tfunction investment() payable external {\r\n\t\t// If preSale/Sale is not active, do not create NIMFA\r\n\t\tif (preSaleHasEnded && saleHasEnded) throw;\r\n\t\tif (!preSaleHasEnded) {\r\n\t\t    if (block.number < preSaleStartBlock) throw;\r\n\t\t    if (block.number > preSaleEndBlock) throw;\r\n\t\t}\r\n\t\tif (block.number < saleStartBlock) throw;\r\n\t\tif (block.number > saleEndBlock) throw;\r\n\t\t\r\n\t\tuint256 newEtherBalance = totalETH.add(msg.value);\r\n\r\n\t\t// Do not do anything if the amount of ether sent is 0\r\n\t\tif (0 == msg.value) throw;\r\n\t\t\r\n\t\t// Calculate the amount of NIMFA being purchased\r\n\t\tuint256 amountOfNIMFA = msg.value.mul(NIMFA_PER_ETH_PRE_SALE);\r\n\t\tif (preSaleHasEnded || maxPreSale) amountOfNIMFA = msg.value.mul(NIMFA_PER_ETH_SALE);\r\n\t\t\r\n\t\tif (100000 ether < amountOfNIMFA) throw;\r\n\t\t\r\n\t\t// Ensure that the transaction is safe\r\n\t\tuint256 totalSupplySafe = totalSupply.add(amountOfNIMFA);\r\n\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfNIMFA);\r\n\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\r\n\r\n\t\t// Update balances\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tif (totalSupply > 2000000 ether) maxPreSale = true;\r\n\t\tbalances[msg.sender] = balanceSafe;\r\n\r\n\t\ttotalETH = newEtherBalance;\r\n\t\tETHContributed[msg.sender] = contributedSafe;\r\n\t\tif (!preSaleHasEnded) teamETHAddress.transfer(msg.value);\r\n\r\n\t\tCreatedNIMFA(msg.sender, amountOfNIMFA);\r\n\t}\r\n\t\r\n\tfunction endPreSale() {\r\n\t\t// Do not end an already ended sale\r\n\t\tif (preSaleHasEnded) throw;\r\n\t\t\r\n\t\t// Only allow the owner\r\n\t\tif (msg.sender != executor) throw;\r\n\t\t\r\n\t\tpreSaleHasEnded = true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction endSale() {\r\n\t\t\r\n\t\tif (!preSaleHasEnded) throw;\r\n\t\t// Do not end an already ended sale\r\n\t\tif (saleHasEnded) throw;\r\n\t\t\r\n\t\t// Only allow the owner\r\n\t\tif (msg.sender != executor) throw;\r\n\t\t\r\n\t\tsaleHasEnded = true;\r\n\t\tuint256 EtherAmount = this.balance;\r\n\t\tteamETHAddress.transfer(EtherAmount);\r\n\t\t\r\n\t\tuint256 creditFund = totalSupply.mul(3);\r\n\t\tuint256 reserveNIMFA = totalSupply.div(2);\r\n\t\tuint256 teamNIMFA = totalSupply.div(2);\r\n\t\tuint256 totalSupplySafe = totalSupply.add(creditFund).add(reserveNIMFA).add(teamNIMFA);\r\n\r\n\r\n\t\ttotalSupply = totalSupplySafe;\r\n\t\tbalances[creditFundNIMFAAddress] = creditFund;\r\n\t\tbalances[reserveNIMFAAddress] = reserveNIMFA;\r\n\t\tbalances[teamNIMFAAddress] = teamNIMFA;\r\n\t\t\r\n\t\tCreatedNIMFA(creditFundNIMFAAddress, creditFund);\r\n\t\tCreatedNIMFA(reserveNIMFAAddress, reserveNIMFA);\r\n        CreatedNIMFA(teamNIMFAAddress, teamNIMFA);\r\n\t}\r\n\t\r\n\t\r\n\tfunction changeTeamETHAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tteamETHAddress = _newAddress;\r\n\t}\r\n\t\r\n\tfunction changeTeamNIMFAAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tteamNIMFAAddress = _newAddress;\r\n\t}\r\n\t\r\n\tfunction changeCreditFundNIMFAAddress(address _newAddress) {\r\n\t\tif (msg.sender != executor) throw;\r\n\t\tcreditFundNIMFAAddress = _newAddress;\r\n\t}\r\n\t\r\n\t/*\r\n\t* Allow transfer only after sales\r\n\t*/\r\n\tfunction changeAllowTransfer() {\r\n\t\tif (msg.sender != executor) throw;\r\n\r\n\t\tallowTransfer = true;\r\n\t}\r\n\t\r\n\t/*\r\n\t* \r\n\t*/\r\n\tfunction changeSaleStartBlock(uint256 _saleStartBlock) {\r\n\t\tif (msg.sender != executor) throw;\r\n        saleStartBlock = _saleStartBlock;\r\n\t}\r\n\t\r\n\t/*\r\n\t* \r\n\t*/\r\n\tfunction changeSaleEndBlock(uint256 _saleEndBlock) {\r\n\t\tif (msg.sender != executor) throw;\r\n        saleEndBlock = _saleEndBlock;\r\n\t}\r\n\t\r\n\t\r\n\tfunction transfer(address _to, uint _value) {\r\n\t\t// Cannot transfer unless the minimum cap is hit\r\n\t\tif (!allowTransfer) throw;\r\n\t\t\r\n\t\tsuper.transfer(_to, _value);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) {\r\n\t\t// Cannot transfer unless the minimum cap is hit\r\n\t\tif (!allowTransfer) throw;\r\n\t\t\r\n\t\tsuper.transferFrom(_from, _to, _value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditFundNIMFAAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeTeamETHAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamETHAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleStartBlock\",\"type\":\"uint256\"}],\"name\":\"changeSaleStartBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveNIMFAAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeTeamNIMFAAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeCreditFundNIMFAAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeAllowTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NIMFA_PER_ETH_PRE_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NIMFA_PER_ETH_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamNIMFAAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleEndBlock\",\"type\":\"uint256\"}],\"name\":\"changeSaleEndBlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamETHAddress\",\"type\":\"address\"},{\"name\":\"_teamNIMFAAddress\",\"type\":\"address\"},{\"name\":\"_creditFundNIMFAAddress\",\"type\":\"address\"},{\"name\":\"_reserveNIMFAAddress\",\"type\":\"address\"},{\"name\":\"_preSaleStartBlock\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountOfNIMFA\",\"type\":\"uint256\"}],\"name\":\"CreatedNIMFA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NIMFAToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000063681bf8cf9ea59cfc29eedf51264885c1cd8390000000000000000000000001ec431f873af3176ce69fdcad72459fb1483e2af00000000000000000000000091d8a21d81297b72a81c8eb8105d523ee6680643000000000000000000000000baaece45b91d7db2e9a991ec9583751be4605bbe00000000000000000000000000000000000000000000000000000000003e7b0500000000000000000000000000000000000000000000000000000000003ead3e","Library":"","SwarmSource":"bzzr://80ee6b1522f7edea5d39370e87363b60769647338f59477ba79933deb40fd83e"}]}