{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n * PornTokenV2 PT Upgrader on Ethereum Network: Ropsten Testnet\r\n * Converts PT to PTWO on a 4:1 reverse split basis\r\n *\r\n * The PT user transferring to PTWO must call\r\n * The approve(_address_of_this_contract, uint256 _value) function\r\n * from original token contract: 0x66497A283E0a007bA3974e837784C6AE323447de\r\n *\r\n * NOTE: _value must be expressed in the number of PT you want to convert + 18 zeros\r\n * to represent it's 18 decimal places.\r\n * So if you want to send 1 PT, do approve(_address_of_this_contract, 1000000000000000000)\r\n *\r\n * ...with the address of this Contract as the first argument\r\n * and the amount of PT to convert to PTWO as the 2nd argument\r\n *\r\n * Then they must call the ptToPtwo() method in this contract\r\n * and they will receive a 4:1 reverse split amount of PTWO\r\n * meaning 4 times less PTWO than PT\r\n */\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n}\r\n\r\ncontract PornTokenV2Upgrader {\r\n    address public exchanger;\r\n    token public tokenExchange;\r\n    token public tokenPtx;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function PornTokenV2Upgrader(\r\n        address sendTo,\r\n        address addressOfPt,\r\n        address addressOfPtwo\r\n    ) {\r\n        exchanger = sendTo;\r\n        // address of PT Contract\r\n        tokenPtx = token(addressOfPt);\r\n        // address of PTWO Contract\r\n        tokenExchange = token(addressOfPtwo);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     * Effectively a 4:1 trade from PT to PTWO\r\n     */\r\n    function ptToPtwo() public returns (bool success) {\r\n        \r\n        uint tokenAmount = tokenPtx.allowance(msg.sender, this);\r\n        require(tokenAmount > 0); \r\n        uint tokenAmountReverseSplitAdjusted = tokenAmount / 4;\r\n        require(tokenAmountReverseSplitAdjusted > 0); \r\n        require(tokenPtx.transferFrom(msg.sender, this, tokenAmount));\r\n        tokenExchange.transfer(msg.sender, tokenAmountReverseSplitAdjusted);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * Fail if Ether is sent to prevent people from sending ETH by accident\r\n     */\r\n    function () payable {\r\n        require(exchanger == msg.sender);\r\n    }\r\n    \r\n    /* PTWO WITHDRAW FUNCTIONS */\r\n    \r\n    /**\r\n     * Withdraw untraded tokens 10K at a time\r\n     *\r\n     * Deposit untraded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnUnsoldSafeSmall() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 10000;\r\n            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw untraded tokens 100K at a time\r\n     *\r\n     * Deposit untraded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnUnsoldSafeMedium() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 100000;\r\n            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw untraded tokens 1M at a time\r\n     *\r\n     * Deposit untraded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnUnsoldSafeLarge() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 1000000;\r\n            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw untraded tokens 10M at a time\r\n     *\r\n     * Deposit untraded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnUnsoldSafeXLarge() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 10000000;\r\n            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /* PT WITHDRAW FUNCTIONS */\r\n    \r\n    /**\r\n     * Withdraw traded tokens 10K at a time\r\n     *\r\n     * Deposit traded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnPtSafeSmall() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 10000;\r\n            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw traded tokens 100K at a time\r\n     *\r\n     * Deposit traded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnPtSafeMedium() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 100000;\r\n            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw traded tokens 1M at a time\r\n     *\r\n     * Deposit traded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnPtSafeLarge() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 1000000;\r\n            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw traded tokens 10M at a time\r\n     *\r\n     * Deposit traded tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnPtSafeXLarge() public {\r\n        if (exchanger == msg.sender) {\r\n            uint tokenAmount = 10000000;\r\n            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"returnPtSafeSmall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPtx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnUnsoldSafeSmall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnUnsoldSafeXLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnUnsoldSafeMedium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnPtSafeXLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ptToPtwo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnUnsoldSafeLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnPtSafeLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnPtSafeMedium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"sendTo\",\"type\":\"address\"},{\"name\":\"addressOfPt\",\"type\":\"address\"},{\"name\":\"addressOfPtwo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PornTokenV2Upgrader","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031e9fa16f3dedbf570bdd80110f08b08f55d6b7000000000000000000000000066497a283e0a007ba3974e837784c6ae323447de0000000000000000000000005512e1d6a7be424b4323126b4f9e86d023f95764","Library":"","SwarmSource":"bzzr://f99cc753dbb26482cbdde13a82cd72945b67baf80eee2189f49d821fb2a605ad"}]}