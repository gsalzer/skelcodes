{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ninterface IERC20 {\r\n function totalSupply() constant returns (uint256 totalSupply);\r\n function balanceOf(address _owner) constant returns (uint256 balance);\r\n function transfer(address _to, uint256 _value) returns (bool success);\r\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n function approve(address _spender, uint256 _value) returns (bool success);\r\n function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n }\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Electra is IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint public  _totalSupply=0;\r\n    \r\n      string public constant symbol=\"ECT\";\r\n    string public constant name=\"ElectraToken\";\r\n    uint8 public constant decimals=18;\r\n    uint256 public constant RATE=500;\r\n \r\n    address public owner;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n  \r\n    \r\n    function() payable{\r\n        createTokens();\r\n    }\r\n    \r\n    function SucToken()\r\n    {\r\n       owner=msg.sender;\r\n    }\r\n    \r\n    function createTokens() payable\r\n    {\r\n        require(msg.value>0);\r\n        \r\n        uint256 tokens=msg.value.mul(RATE);\r\n        \r\n        balances[msg.sender]=balances[msg.sender].add(tokens);\r\n        \r\n        _totalSupply=_totalSupply.add(tokens);\r\n        \r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply){\r\n        \r\n        return _totalSupply;\r\n    }\r\n function balanceOf(address _owner) constant returns (uint256 balance){\r\n      return balances[_owner];\r\n }\r\n function transfer(address _to, uint256 _value) returns (bool success){\r\n     require(\r\n         balances[msg.sender] >= _value\r\n         && _value > 0\r\n         );\r\n          balances[msg.sender]=balances[msg.sender].sub(_value);\r\n           balances[_to]=balances[_to].add(_value);\r\n          Transfer(msg.sender,_to,_value);\r\n          return true;\r\n }\r\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success)\r\n {\r\n     require(\r\n         allowed[_from][msg.sender] >= _value\r\n         &&  balances[_from]>=_value\r\n         &&  _value > 0\r\n         );\r\n          balances[_from]= balances[_from].sub(_value);\r\n           balances[_to]=balances[_to].add(_value);\r\n         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub( _value);\r\n        Transfer(_from,_to,_value);\r\n          return true;\r\n }\r\n function approve(address _spender, uint256 _value) returns (bool success)\r\n {\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender,_spender,_value);\r\n      return true;\r\n }\r\n function allowance(address _owner, address _spender) constant returns (uint256 remaining){\r\n     return allowed[_owner][_spender];\r\n }\r\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SucToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Electra","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04ef6eb928ff230a79b48db50649c9f73686b26d2acd24b878981b6a695feefe"}]}