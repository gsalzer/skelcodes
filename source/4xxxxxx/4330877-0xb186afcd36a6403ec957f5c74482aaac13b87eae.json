{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// Enjin ICO group buyer\r\n// Avtor: Janez\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\nfunction transfer(address _to, uint256 _value) returns (bool success);\r\nfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract EnjinBuyer {\r\nmapping (address => uint256) public balances;\r\nmapping (address => uint256) public balances_for_refund;\r\nbool public bought_tokens;\r\nbool public token_set;\r\nuint256 public contract_eth_value;\r\nuint256 public refund_contract_eth_value;\r\nuint256 public refund_eth_value;\r\nbool public kill_switch;\r\nbytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d;\r\naddress public developer = 0x0e7CE7D6851F60A1eF2CAE9cAD765a5a62F32A84;\r\naddress public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2;\r\nERC20 public token;\r\nuint256 public eth_minimum = 3235 ether;\r\n\r\nfunction set_token(address _token) {\r\nrequire(msg.sender == developer);\r\ntoken = ERC20(_token);\r\ntoken_set = true;\r\n}\r\n\r\nfunction activate_kill_switch(string password) {\r\nrequire(msg.sender == developer || sha3(password) == password_hash);\r\nkill_switch = true;\r\n}\r\n\r\nfunction personal_withdraw(string password, uint256 transfer_amount){\r\nrequire(msg.sender == developer || sha3(password) == password_hash);\r\nmsg.sender.transfer(transfer_amount);\r\n}\r\n\r\n// Use with caution - use this withdraw function if you do not trust the\r\n// contract's token setting. You can only use this once, so if you\r\n// put in the wrong token address you will burn the Enjin on the contract.\r\nfunction withdraw_token(address _token){\r\nERC20 myToken = ERC20(_token);\r\nif (balances[msg.sender] == 0) return;\r\nrequire(msg.sender != sale);\r\nif (!bought_tokens) {\r\nuint256 eth_to_withdraw = balances[msg.sender];\r\nbalances[msg.sender] = 0;\r\nmsg.sender.transfer(eth_to_withdraw);\r\n}\r\nelse {\r\nuint256 contract_token_balance = myToken.balanceOf(address(this));\r\nrequire(contract_token_balance != 0);\r\nuint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\ncontract_eth_value -= balances[msg.sender];\r\nbalances[msg.sender] = 0;\r\nuint256 fee = tokens_to_withdraw / 100;\r\nrequire(myToken.transfer(developer, fee));\r\nrequire(myToken.transfer(msg.sender, tokens_to_withdraw - fee));\r\n}\r\n}\r\n\r\n// This handles the withdrawal of refunds. Also works with partial refunds.\r\nfunction withdraw_refund(){\r\nrequire(refund_eth_value!=0);\r\nrequire(balances_for_refund[msg.sender] != 0);\r\nuint256 eth_to_withdraw = (balances_for_refund[msg.sender] * refund_eth_value) / refund_contract_eth_value;\r\nrefund_contract_eth_value -= balances_for_refund[msg.sender];\r\nrefund_eth_value -= eth_to_withdraw;\r\nbalances_for_refund[msg.sender] = 0;\r\nmsg.sender.transfer(eth_to_withdraw);\r\n}\r\n\r\nfunction () payable {\r\nif (!bought_tokens) {\r\nbalances[msg.sender] += msg.value;\r\nbalances_for_refund[msg.sender] += msg.value;\r\nif (this.balance < eth_minimum) return;\r\nif (kill_switch) return;\r\nrequire(sale != 0x0);\r\nbought_tokens = true;\r\ncontract_eth_value = this.balance;\r\nrefund_contract_eth_value = this.balance;\r\nrequire(sale.call.value(contract_eth_value)());\r\nrequire(this.balance==0);\r\n} else {\r\n// We might be getting a full refund or partial refund if we go over the limit from Enjin's multisig wallet.\r\n// We have been assured by the CTO that the refund would only\r\n// come from the pre-sale wallet.\r\nrequire(msg.sender == sale);\r\nrefund_eth_value += msg.value;\r\n}\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"transfer_amount\",\"type\":\"uint256\"}],\"name\":\"personal_withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_for_refund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund_contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"EnjinBuyer","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://713ab7cb6f6be36fa69e84366f4619dcfd1bcabb4228bacd1bffcc99b5c8d6e6"}]}