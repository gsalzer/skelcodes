{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n// Interfacting Deployed Nertia Token \r\ncontract KairosToken{\r\n  function getExchangeRate() returns (uint256 exchangeRate);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function getOwner() returns (address owner);\r\n  function getDecimals() returns (uint256 decimals);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\n/**\r\n * ICO contract for the Nertia Token\r\n */\r\ncontract Crowdsale {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public ethOwner;\r\n  address public kairosOwner;\r\n\r\n  KairosToken public token;\r\n\r\n  mapping(address => uint256) etherBlance;\r\n\r\n  uint256 public decimals;\r\n  uint256 public icoMinCap;\r\n    \r\n  bool public isFinalized;\r\n  uint256 public icoStartBlock;\r\n  uint256 public icoEndBlock;\r\n  uint256 public icoStartTime;\r\n  uint256 public totalSupply;\r\n  uint256 public exchangeRate;\r\n\r\n  event Refund(address indexed _to, uint256 _value);\r\n  event RefundError(address indexed _to, uint256 _value);\r\n    \r\n  function Crowdsale() {\r\n    token          = KairosToken(0xa6C9e4D4B34D432d4aea793Fa8C380b9940a5279);\r\n    decimals       = token.getDecimals();\r\n    exchangeRate   = 20;\r\n    isFinalized    = false;\r\n    icoStartTime   = now;\r\n    icoStartBlock  = block.number.add(15247);\r\n    icoEndBlock    = icoStartBlock.add(152470);\r\n    ethOwner       = 0x0fe777FA444Fae128169754877d51b665eE557Ee;\r\n    kairosOwner    = 0xa6C9e4D4B34D432d4aea793Fa8C380b9940a5279;\r\n    icoMinCap      = 15 * (10**6) * 10**decimals;\r\n  }\r\n\r\n\r\n  /// @dev Ends the funding period and sends the ETH home\r\n  function finalize() external {\r\n    if(isFinalized) throw;\r\n    if(msg.sender != ethOwner) throw; // locks finalize to the ultimate ETH owner\r\n    //if(totalSupply < icoMinCap) throw;      // have to sell minimum to move to operational\r\n    if(block.number <= icoEndBlock) throw;\r\n    \r\n    // move to operational\r\n    isFinalized = true;\r\n    if(!ethOwner.send(this.balance)) throw;  // send the eth to Nertia Owner\r\n  }\r\n\r\n\r\n  function refund(){\r\n    if(isFinalized) throw;\r\n    if(block.number <= icoEndBlock) throw;\r\n    if(msg.sender == token.getOwner() ) throw;\r\n\r\n    uint256 userBalance = token.balanceOf(msg.sender);\r\n    if(userBalance == 0) throw;\r\n\r\n    uint256 userEthers = etherBlance[msg.sender];\r\n    if(userEthers == 0) throw;    \r\n    \r\n    etherBlance[msg.sender] = 0;\r\n    \r\n    if(!token.transferFrom(msg.sender,kairosOwner, userBalance)) throw;\r\n\r\n    if(msg.sender.send(userEthers)){\r\n      Refund(msg.sender, userEthers);\r\n    }else{\r\n      etherBlance[msg.sender] = userEthers;\r\n      RefundError(msg.sender, userEthers);\r\n      throw;\r\n    }\r\n  }\r\n\r\n\r\n  function () payable {\r\n    if(isFinalized && msg.value <= 0) throw;\r\n\r\n    if(block.number < icoStartBlock) throw;\r\n    if(block.number > icoEndBlock) throw;\r\n\r\n    // storing user ethers;\r\n    etherBlance[msg.sender] += msg.value;\r\n\r\n    // calculating bonus\r\n    uint256 val = msg.value;\r\n    uint256 bonus  =  calcBonus(val);\r\n    uint256 level2bonus = calcLevel2Bonus(val);\r\n    uint256 tokens = msg.value.add(level2bonus).add(bonus).mul(exchangeRate);    \r\n    uint256 checkedSupply = totalSupply.add(tokens);\r\n    totalSupply = checkedSupply;\r\n    bool transfer = token.transferFrom( token.getOwner(),msg.sender, tokens);\r\n    if(!transfer){\r\n        totalSupply = totalSupply.sub(tokens);\r\n        throw;\r\n    }\r\n  }\r\n  \r\n  // Calculating bounus tokens\r\n  function calcBonus(uint256 _val) private constant returns (uint256){\r\n    return _val.div(100).mul(getPercentage());            \r\n  }  \r\n\r\n  // Calculating bonus percentage \r\n  function getPercentage() private constant returns (uint){\r\n    uint duration = now.sub(icoStartTime);\r\n    if(duration > 21 days){\r\n      return 0;\r\n    } else if(duration <= 21 days && duration > 14 days){\r\n      return 1;\r\n    } else if(duration <= 14 days && duration > 7 days){\r\n      return 3;\r\n    } else {\r\n      return 5;\r\n    }\r\n  }\r\n\r\n  function calcLevel2Bonus(uint256 _val) private constant returns(uint256) {\r\n    return _val.div(100).mul(level2Bonus(_val));\r\n  }\r\n\r\n  // calculating 2nd level bonus\r\n  function level2Bonus(uint256 tokens) private constant returns(uint256) {\r\n      if(tokens > 1000000){\r\n        return 5;   \r\n      }else if(tokens <= 999999 && tokens >= 100000){\r\n        return 3;\r\n      }else if(tokens <= 99999 && tokens >= 50000 ){\r\n        return 2;\r\n      }else if( tokens <= 49999 && tokens >= 10000){\r\n        return 1;\r\n      }\r\n      return 0;\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kairosOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundError\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d41a419a2b20590a431d387e2902a9a76d4ed0a67ac1c4051b766af2ba8f0f3"}]}