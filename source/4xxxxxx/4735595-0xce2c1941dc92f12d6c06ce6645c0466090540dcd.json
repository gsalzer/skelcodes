{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/zeppelin-solidity-1.4/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BRDCrowdsaleAuthorizer.sol\r\n\r\n/**\r\n * Contract BRDCrowdsaleAuthorizer is used by the crowdsale website\r\n * to autorize wallets to participate in the crowdsale. Because all\r\n * participants must go through the KYC/AML phase, only accounts\r\n * listed in this contract may contribute to the crowdsale\r\n */\r\ncontract BRDCrowdsaleAuthorizer is Ownable {\r\n  // these accounts are authorized to participate in the crowdsale\r\n  mapping (address => bool) internal authorizedAccounts;\r\n  // these accounts are authorized to authorize accounts\r\n  mapping (address => bool) internal authorizers;\r\n\r\n  // emitted when a new account is authorized\r\n  event Authorized(address indexed _to);\r\n\r\n  // add an authorizer to the authorizers mapping. the _newAuthorizer will\r\n  // be able to add other authorizers and authorize crowdsale participants\r\n  function addAuthorizer(address _newAuthorizer) onlyOwnerOrAuthorizer public {\r\n    // allow the provided address to authorize accounts\r\n    authorizers[_newAuthorizer] = true;\r\n  }\r\n\r\n  // remove an authorizer from the authorizers mapping. the _bannedAuthorizer will\r\n  // no longer have permission to do anything on this contract\r\n  function removeAuthorizer(address _bannedAuthorizer) onlyOwnerOrAuthorizer public {\r\n    // only attempt to remove the authorizer if they are currently authorized\r\n    require(authorizers[_bannedAuthorizer]);\r\n    // remove the authorizer\r\n    delete authorizers[_bannedAuthorizer];\r\n  }\r\n\r\n  // allow an account to participate in the crowdsale\r\n  function authorizeAccount(address _newAccount) onlyOwnerOrAuthorizer public {\r\n    if (!authorizedAccounts[_newAccount]) {\r\n      // allow the provided account to participate in the crowdsale\r\n      authorizedAccounts[_newAccount] = true;\r\n      // emit the Authorized event\r\n      Authorized(_newAccount);\r\n    }\r\n  }\r\n\r\n  // returns whether or not the provided _account is an authorizer\r\n  function isAuthorizer(address _account) constant public returns (bool _isAuthorizer) {\r\n    return msg.sender == owner || authorizers[_account] == true;\r\n  }\r\n\r\n  // returns whether or not the provided _account is authorized to participate in the crowdsale\r\n  function isAuthorized(address _account) constant public returns (bool _authorized) {\r\n    return authorizedAccounts[_account] == true;\r\n  }\r\n\r\n  // allow only the contract creator or one of the authorizers to do this\r\n  modifier onlyOwnerOrAuthorizer() {\r\n    require(msg.sender == owner || authorizers[msg.sender]);\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BRDLockup.sol\r\n\r\n/**\r\n * Contract BRDLockup keeps track of a vesting schedule for pre-sold tokens.\r\n * Pre-sold tokens are rewarded up to `numIntervals` times separated by an\r\n * `interval` of time. An equal amount of tokens (`allocation` divided by `numIntervals`)\r\n * is marked for reward each `interval`.\r\n *\r\n * The owner of the contract will call processInterval() which will\r\n * update the allocation state. The owner of the contract should then\r\n * read the allocation data and reward the beneficiaries.\r\n */\r\ncontract BRDLockup is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Allocation stores info about how many tokens to reward a beneficiary account\r\n  struct Allocation {\r\n    address beneficiary;      // account to receive rewards\r\n    uint256 allocation;       // total allocated tokens\r\n    uint256 remainingBalance; // remaining balance after the current interval\r\n    uint256 currentInterval;  // the current interval for the given reward\r\n    uint256 currentReward;    // amount to be rewarded during the current interval\r\n  }\r\n\r\n  // the allocation state\r\n  Allocation[] public allocations;\r\n\r\n  // the date at which allocations begin unlocking\r\n  uint256 public unlockDate;\r\n\r\n  // the current unlock interval\r\n  uint256 public currentInterval;\r\n\r\n  // the interval at which allocations will be rewarded\r\n  uint256 public intervalDuration;\r\n\r\n  // the number of total reward intervals, zero indexed\r\n  uint256 public numIntervals;\r\n\r\n  event Lock(address indexed _to, uint256 _amount);\r\n\r\n  event Unlock(address indexed _to, uint256 _amount);\r\n\r\n  // constructor\r\n  // @param _crowdsaleEndDate - the date the crowdsale ends\r\n  function BRDLockup(uint256 _crowdsaleEndDate, uint256 _numIntervals, uint256 _intervalDuration)  public {\r\n    unlockDate = _crowdsaleEndDate;\r\n    numIntervals = _numIntervals;\r\n    intervalDuration = _intervalDuration;\r\n    currentInterval = 0;\r\n  }\r\n\r\n  // update the allocation storage remaining balances\r\n  function processInterval() onlyOwner public returns (bool _shouldProcessRewards) {\r\n    // ensure the time interval is correct\r\n    bool _correctInterval = now >= unlockDate && now.sub(unlockDate) > currentInterval.mul(intervalDuration);\r\n    bool _validInterval = currentInterval < numIntervals;\r\n    if (!_correctInterval || !_validInterval)\r\n      return false;\r\n\r\n    // advance the current interval\r\n    currentInterval = currentInterval.add(1);\r\n\r\n    // number of iterations to read all allocations\r\n    uint _allocationsIndex = allocations.length;\r\n\r\n    // loop through every allocation\r\n    for (uint _i = 0; _i < _allocationsIndex; _i++) {\r\n      // the current reward for the allocation at index `i`\r\n      uint256 _amountToReward;\r\n\r\n      // if we are at the last interval, the reward amount is the entire remaining balance\r\n      if (currentInterval == numIntervals) {\r\n        _amountToReward = allocations[_i].remainingBalance;\r\n      } else {\r\n        // otherwise the reward amount is the total allocation divided by the number of intervals\r\n        _amountToReward = allocations[_i].allocation.div(numIntervals);\r\n      }\r\n      // update the allocation storage\r\n      allocations[_i].currentReward = _amountToReward;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // the total number of allocations\r\n  function numAllocations() constant public returns (uint) {\r\n    return allocations.length;\r\n  }\r\n\r\n  // the amount allocated for beneficiary at `_index`\r\n  function allocationAmount(uint _index) constant public returns (uint256) {\r\n    return allocations[_index].allocation;\r\n  }\r\n\r\n  // reward the beneficiary at `_index`\r\n  function unlock(uint _index) onlyOwner public returns (bool _shouldReward, address _beneficiary, uint256 _rewardAmount) {\r\n    // ensure the beneficiary is not rewarded twice during the same interval\r\n    if (allocations[_index].currentInterval < currentInterval) {\r\n      // record the currentInterval so the above check is useful\r\n      allocations[_index].currentInterval = currentInterval;\r\n      // subtract the reward from their remaining balance\r\n      allocations[_index].remainingBalance = allocations[_index].remainingBalance.sub(allocations[_index].currentReward);\r\n      // emit event\r\n      Unlock(allocations[_index].beneficiary, allocations[_index].currentReward);\r\n      // return value\r\n      _shouldReward = true;\r\n    } else {\r\n      // return value\r\n      _shouldReward = false;\r\n    }\r\n\r\n    // return values\r\n    _rewardAmount = allocations[_index].currentReward;\r\n    _beneficiary = allocations[_index].beneficiary;\r\n  }\r\n\r\n  // add a new allocation to the lockup\r\n  function pushAllocation(address _beneficiary, uint256 _numTokens) onlyOwner public {\r\n    require(now < unlockDate);\r\n    allocations.push(\r\n      Allocation(\r\n        _beneficiary,\r\n        _numTokens,\r\n        _numTokens,\r\n        0,\r\n        0\r\n      )\r\n    );\r\n    Lock(_beneficiary, _numTokens);\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/BRDToken.sol\r\n\r\ncontract BRDToken is MintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"Bread Token\";\r\n  string public symbol = \"BRD\";\r\n  uint256 public decimals = 18;\r\n\r\n  // override StandardToken#transferFrom\r\n  // ensures that minting has finished or the message sender is the token owner\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(mintingFinished || msg.sender == owner);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  // override StandardToken#transfer\r\n  // ensures the minting has finished or the message sender is the token owner\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(mintingFinished || msg.sender == owner);\r\n    return super.transfer(_to, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity-1.4/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n// File: contracts/BRDCrowdsale.sol\r\n\r\ncontract BRDCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // maximum amount of wei raised during this crowdsale\r\n  uint256 public cap;\r\n\r\n  // minimum per-participant wei contribution\r\n  uint256 public minContribution;\r\n\r\n  // maximum per-participant wei contribution\r\n  uint256 public maxContribution;\r\n\r\n  // how many token unites the owner gets per buyer wei\r\n  uint256 public ownerRate;\r\n\r\n  // number of tokens per 100 to lock up in lockupTokens()\r\n  uint256 public bonusRate;\r\n\r\n  // the address to which the owner share of tokens are sent\r\n  address public tokenWallet;\r\n\r\n  // crowdsale authorizer contract determines who can participate\r\n  BRDCrowdsaleAuthorizer public authorizer;\r\n\r\n  // the lockup contract holds presale authorization amounts\r\n  BRDLockup public lockup;\r\n\r\n  // constructor\r\n  function BRDCrowdsale(\r\n    uint256 _cap,         // maximum wei raised\r\n    uint256 _minWei,      // minimum per-contributor wei\r\n    uint256 _maxWei,      // maximum per-contributor wei\r\n    uint256 _startTime,   // crowdsale start time\r\n    uint256 _endTime,     // crowdsale end time\r\n    uint256 _rate,        // tokens per wei\r\n    uint256 _ownerRate,   // owner tokens per buyer wei\r\n    uint256 _bonusRate,   // percentage of tokens to lockup\r\n    address _wallet,      // target eth wallet\r\n    address _tokenWallet) // target token wallet\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n   public\r\n  {\r\n    require(_cap > 0);\r\n    require(_tokenWallet != 0x0);\r\n    cap = _cap;\r\n    minContribution = _minWei;\r\n    maxContribution = _maxWei;\r\n    ownerRate = _ownerRate;\r\n    bonusRate = _bonusRate;\r\n    tokenWallet = _tokenWallet;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool _capReached = weiRaised >= cap;\r\n    return super.hasEnded() || _capReached;\r\n  }\r\n\r\n  // @return true if the crowdsale has started\r\n  function hasStarted() public constant returns (bool) {\r\n    return now > startTime;\r\n  }\r\n\r\n  // overriding Crowdsale#buyTokens\r\n  // mints the ownerRate of tokens in addition to calling the super method\r\n  function buyTokens(address _beneficiary) public payable {\r\n    // call the parent method to mint tokens to the beneficiary\r\n    super.buyTokens(_beneficiary);\r\n    // calculate the owner share of tokens\r\n    uint256 _ownerTokens = msg.value.mul(ownerRate);\r\n    // mint the owner share and send to the owner toke wallet\r\n    token.mint(tokenWallet, _ownerTokens);\r\n  }\r\n\r\n  // immediately mint _amount tokens to the _beneficiary. this is used for OOB token purchases. \r\n  function allocateTokens(address _beneficiary, uint256 _amount) onlyOwner public {\r\n    require(!isFinalized);\r\n\r\n    // update state\r\n    uint256 _weiAmount = _amount.div(rate);\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n\r\n    // mint the tokens to the beneficiary\r\n    token.mint(_beneficiary, _amount);\r\n\r\n    // mint the owner share tokens \r\n    uint256 _ownerTokens = _weiAmount.mul(ownerRate);\r\n    token.mint(tokenWallet, _ownerTokens);\r\n    \r\n    TokenPurchase(msg.sender, _beneficiary, _weiAmount, _amount);\r\n  }\r\n\r\n  // mints _amount tokens to the _beneficiary minus the bonusRate\r\n  // tokens to be locked up via the lockup contract. locked up tokens\r\n  // are sent to the contract and may be unlocked according to\r\n  // the lockup configuration after the sale ends\r\n  function lockupTokens(address _beneficiary, uint256 _amount) onlyOwner public {\r\n    require(!isFinalized);\r\n\r\n    // calculate the owner share of tokens\r\n    uint256 _ownerTokens = ownerRate.mul(_amount).div(rate);\r\n    // mint the owner share and send to the owner wallet\r\n    token.mint(tokenWallet, _ownerTokens);\r\n\r\n    // calculate the amount of tokens to be locked up\r\n    uint256 _lockupTokens = bonusRate.mul(_amount).div(100);\r\n    // create the locked allocation in the lockup contract\r\n    lockup.pushAllocation(_beneficiary, _lockupTokens);\r\n    // mint locked tokens to the crowdsale contract to later be unlocked\r\n    token.mint(this, _lockupTokens);\r\n\r\n    // the non-bonus tokens are immediately rewarded\r\n    uint256 _remainder = _amount.sub(_lockupTokens);\r\n    token.mint(_beneficiary, _remainder);\r\n  }\r\n\r\n  // unlocks tokens from the token lockup contract. no tokens are held by\r\n  // the lockup contract, just the amounts and times that tokens should be rewarded.\r\n  // the tokens are held by the crowdsale contract\r\n  function unlockTokens() onlyOwner public returns (bool _didIssueRewards) {\r\n    // attempt to process the interval. it update the allocation bookkeeping\r\n    // and will only return true when the interval should be processed\r\n    if (!lockup.processInterval())\r\n      return false;\r\n\r\n    // the total number of allocations\r\n    uint _numAllocations = lockup.numAllocations();\r\n\r\n    // for every allocation, attempt to unlock the reward\r\n    for (uint _i = 0; _i < _numAllocations; _i++) {\r\n      // attempt to unlock the reward\r\n      var (_shouldReward, _to, _amount) = lockup.unlock(_i);\r\n      // if the beneficiary should be rewarded, send them tokens\r\n      if (_shouldReward) {\r\n        token.transfer(_to, _amount);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // sets the authorizer contract if the crowdsale hasn't started\r\n  function setAuthorizer(BRDCrowdsaleAuthorizer _authorizer) onlyOwner public {\r\n    require(!hasStarted());\r\n    authorizer = _authorizer;\r\n  }\r\n\r\n  // sets the lockup contract if the crowdsale hasn't started\r\n  function setLockup(BRDLockup _lockup) onlyOwner public {\r\n    require(!hasStarted());\r\n    lockup = _lockup;\r\n  }\r\n\r\n  // sets the token contract if the crowdsale hasn't started\r\n  function setToken(BRDToken _token) onlyOwner public {\r\n    require(!hasStarted());\r\n    token = _token;\r\n  }\r\n\r\n  // set the cap on the contract if the crowdsale hasn't started\r\n  function setCap(uint256 _newCap) onlyOwner public {\r\n    require(_newCap > 0);\r\n    require(!hasStarted());\r\n    cap = _newCap;\r\n  }\r\n\r\n  // allows maxContribution to be modified\r\n  function setMaxContribution(uint256 _newMaxContribution) onlyOwner public {\r\n    maxContribution = _newMaxContribution;\r\n  }\r\n\r\n  // allows endTime to be modified\r\n  function setEndTime(uint256 _newEndTime) onlyOwner public {\r\n    endTime = _newEndTime;\r\n  }\r\n\r\n  // overriding Crowdsale#createTokenContract\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    // set the token to null initially\r\n    // call setToken() above to set the actual token address\r\n    return BRDToken(address(0));\r\n  }\r\n\r\n  // overriding FinalizableCrowdsale#finalization\r\n  // finalizes minting for the token contract, disabling further minting\r\n  function finalization() internal {\r\n    // end minting\r\n    token.finishMinting();\r\n\r\n    // issue the first lockup reward\r\n    unlockTokens();\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if crowdsale participants can buy at the moment\r\n  // checks whether the cap has not been reached, the purchaser has\r\n  // been authorized, and their contribution is within the min/max\r\n  // thresholds\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool _withinCap = weiRaised.add(msg.value) <= cap;\r\n    bool _isAuthorized = authorizer.isAuthorized(msg.sender);\r\n    bool _isMin = msg.value >= minContribution;\r\n    uint256 _alreadyContributed = token.balanceOf(msg.sender).div(rate);\r\n    bool _withinMax = msg.value.add(_alreadyContributed) <= maxContribution;\r\n    return super.validPurchase() && _withinCap && _isAuthorized && _isMin && _withinMax;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxContribution\",\"type\":\"uint256\"}],\"name\":\"setMaxContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockup\",\"type\":\"address\"}],\"name\":\"setLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockupTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"_didIssueRewards\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_minWei\",\"type\":\"uint256\"},{\"name\":\"_maxWei\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_ownerRate\",\"type\":\"uint256\"},{\"name\":\"_bonusRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"BRDCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000070f00ed2cc7f757400000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000005a347e20000000000000000000000000000000000000000000000000000000005a3f0a200000000000000000000000000000000000000000000000000000000000000384000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000009d66d75b46816d306572446f62305f72c4f6d2fd000000000000000000000000081edbef6106ab1253557451b261c1c99bade726","Library":"","SwarmSource":"bzzr://d1b20d47b80de0cd5b19020caba637c7515fe0352914068d88727a1646d0af01"}]}