{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// implement safemath as a library\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// Used for function invoke restriction\r\ncontract Administration {\r\n\r\n    address     public owner; // temporary address\r\n    \r\n    mapping (address => bool) public moderators;\r\n\r\n    event AddMod(address indexed _invoker, address indexed _newMod, bool indexed _modAdded);\r\n    event RemoveMod(address indexed _invoker, address indexed _removeMod, bool indexed _modRemoved);\r\n\r\n    function Administration() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _; // function code inserted here\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner returns (bool success) {\r\n        owner = _newOwner;\r\n        return true;\r\n        \r\n    }\r\n\r\n    function addModerator(address _newMod) onlyOwner returns (bool added) {\r\n        require(_newMod != address(0x0));\r\n        moderators[_newMod] = true;\r\n        AddMod(msg.sender, _newMod, true);\r\n        return true;\r\n    }\r\n    \r\n    function removeModerator(address _removeMod) onlyOwner returns (bool removed) {\r\n        require(_removeMod != address(0x0));\r\n        moderators[_removeMod] = false;\r\n        RemoveMod(msg.sender, _removeMod, true);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract TokenDraft is Administration {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    uint8   public decimals;\r\n    string  public symbol;\r\n    string  public name;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    event Transfer(address indexed _sender, address indexed _recipient, uint256 indexed _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 indexed _allowance);\r\n    event BurnTokens(address indexed _burner, uint256 indexed _amountBurned, bool indexed _burned);\r\n\r\n    function TokenDraft() {\r\n        // 500 million in wei\r\n        totalSupply = 500000000000000000000000000;\r\n        decimals = 18;\r\n        name = \"TokenDraft\";\r\n        symbol = \"FAN\";\r\n        balances[owner] = totalSupply;\r\n    }\r\n\r\n    function tokenBurn(uint256 _amountBurn)\r\n        onlyAdmin\r\n        returns (bool burned)\r\n    {\r\n        require(_amountBurn > 0);\r\n        require(balances[msg.sender] >= _amountBurn);\r\n        require(totalSupply.sub(_amountBurn) >= 0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amountBurn);\r\n        totalSupply = totalSupply.sub(_amountBurn);\r\n        BurnTokens(msg.sender, _amountBurn, true);\r\n        Transfer(msg.sender, 0, _amountBurn);\r\n        return true;\r\n    }\r\n\r\n    function transferCheck(address _sender, address _recipient, uint256 _amount)\r\n        private\r\n        constant\r\n        returns (bool valid)\r\n    {\r\n        require(_amount > 0);\r\n        require(_recipient != address(0x0));\r\n        require(balances[_sender] >= _amount);\r\n        require(balances[_sender].sub(_amount) >= 0);\r\n        require(balances[_recipient].add(_amount) > balances[_recipient]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount)\r\n        public\r\n        returns (bool transferred)\r\n    {\r\n        require(transferCheck(msg.sender, _recipient, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_recipient] = balances[_recipient].add(_amount);\r\n        Transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _owner, address _recipient, uint256 _amount)\r\n        public\r\n        returns (bool transferredFrom)\r\n    {\r\n        require(allowed[_owner][msg.sender] >= _amount);\r\n        require(transferCheck(_owner, _recipient, _amount));\r\n        require(allowed[_owner][msg.sender].sub(_amount) >= 0);\r\n        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        balances[_recipient] = balances[_recipient].add(_amount);\r\n        Transfer(_owner, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _allowance)\r\n        public\r\n        returns (bool approved)\r\n    {\r\n        require(_allowance > 0);\r\n        allowed[msg.sender][_spender] = _allowance;\r\n        Approval(msg.sender, _spender, _allowance);\r\n        return true;\r\n    }\r\n\r\n    //GETTERS//\r\n\r\n    function balanceOf(address _tokenHolder)\r\n        public\r\n        constant\r\n        returns (uint256 _balance)\r\n    {\r\n        return balances[_tokenHolder];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 _allowance)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256 _totalSupply)\r\n    {\r\n        return totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"transferredFrom\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountBurn\",\"type\":\"uint256\"}],\"name\":\"tokenBurn\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_removeMod\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[{\"name\":\"removed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMod\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[{\"name\":\"added\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amountBurned\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_burned\",\"type\":\"bool\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_modAdded\",\"type\":\"bool\"}],\"name\":\"AddMod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_removeMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_modRemoved\",\"type\":\"bool\"}],\"name\":\"RemoveMod\",\"type\":\"event\"}]","ContractName":"TokenDraft","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b0806a5f177dbbd920beb9f4657c1010b02dc30b672263a6e679aac780c3f4d"}]}