{"status":"1","message":"OK","result":[{"SourceCode":"contract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  function Ownable() public{\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\ncontract BurnableToken is StandardToken {\r\n\r\n  function burn(uint _value) public {\r\n    require(_value > 0);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n\r\n  event Burn(address indexed burner, uint indexed value);\r\n\r\n}\r\n\r\n\r\ncontract EWA is MintableToken, BurnableToken {\r\n    \r\n    string public constant name = \"EWAcoin\";\r\n    \r\n    string public constant symbol = \"EWA\";\r\n    \r\n    uint32 public constant decimals = 0;\r\n    \r\n    struct Trnsaction {\r\n        address addr;\r\n        uint time;\r\n        uint value;\r\n    }\r\n    \r\n    mapping (uint => Trnsaction) TrnsactionLog;\r\n    \r\n    mapping (address => uint256) securities;\r\n     \r\n    mapping (address => uint256) production;\r\n    \r\n    uint public startsecurities;\r\n    \r\n    uint public startproduction;\r\n    \r\n    uint public starteth;\r\n    \r\n    address public moneybackaddr;\r\n    \r\n    uint public i;\r\n    \r\n    function EWA() public{\r\n\t\towner = msg.sender;\r\n\t\tstartsecurities = 1546214400;\r\n\t\tstartproduction = 1546214400;\r\n\t\tstarteth = 1514764800;\r\n\t\tmoneybackaddr = 0x0F99f33cD5a6B1b77eD905C229FC1962D05fE74F;\r\n    }\r\n    \r\n    function destroyforsecurities (uint _value) public {\r\n        require (_value > 99999);\r\n        require (now > startsecurities);\r\n        if(balances[msg.sender] >= _value && securities[msg.sender] + _value >= securities[msg.sender]) {\r\n            burn (_value);\r\n            securities[msg.sender] += _value;\r\n        }\r\n    }\r\n    \r\n    function securitiesOf(address _owner) public constant returns (uint balance) {\r\n        return securities[_owner];\r\n    }\r\n    \r\n    function destroyforproduction (uint _value) public {\r\n        require (_value > 0);\r\n        require (now > startproduction);\r\n        if(balances[msg.sender] >= _value && production[msg.sender] + _value >= production[msg.sender]) {\r\n            burn (_value);\r\n            production[msg.sender] += _value;\r\n        }\r\n    }\r\n    \r\n    function productionOf(address _owner) public constant returns (uint balance) {\r\n        return production[_owner];\r\n    }\r\n    \r\n    function destroyforeth (uint _value) public {\r\n        require (_value > 0);\r\n        require (now > starteth);\r\n        require (this.balance > _value.mul(120000000000000));\r\n        if(balances[msg.sender] >= _value) {\r\n            burn (_value);\r\n            TrnsactionLog[i].addr = msg.sender;\r\n            TrnsactionLog[i].time = now;\r\n            TrnsactionLog[i].value = _value;\r\n            i++;\r\n            msg.sender.transfer(_value.mul(120000000000000));\r\n        }\r\n    }\r\n    \r\n    function showTrnsactionLog (uint _number) public constant returns (address addr, uint time, uint value) {\r\n        return (TrnsactionLog[_number].addr, TrnsactionLog[_number].time, TrnsactionLog[_number].value);   \r\n    }\r\n    \r\n    function moneyback () public {\r\n        require  (msg.sender == moneybackaddr);\r\n        uint256 bal = balance1();\r\n        if (bal > 10 ) {\r\n            moneybackaddr.transfer(bal);\r\n        }\r\n    }\r\n    \r\n    function balance1 () public constant returns (uint256){\r\n        return this.balance;\r\n    }\r\n    \r\n    function() external payable {\r\n    }\r\n    \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    address owner ;\r\n    EWA public token = new EWA();\r\n    uint start1;\r\n    uint start2;\r\n    uint start3;\r\n    uint start4;\r\n    uint end1;\r\n    uint end2;\r\n    uint end3;\r\n    uint end4;\r\n    uint hardcap1;\r\n    uint hardcap2;\r\n    uint price11;\r\n    uint price12;\r\n    uint price13;\r\n    uint price2;\r\n    uint price3;\r\n    uint price4;\r\n\taddress ethgetter;\r\n\r\n    function Crowdsale() public{\r\n        owner = msg.sender;\r\n\t\tstart1 = 1511568000;\r\n\t\tstart2 = 1512777600;  \r\n\t\tstart3 = 1512864000;\r\n\t\tstart4 = 1512950400;\r\n\t\tend1 = 1512777599; \r\n\t\tend2 = 1512863999;\r\n\t\tend3 = 1512950399;\r\n\t\tend4 = 1514764799;\r\n\t\thardcap1 = 70000000;\r\n\t\thardcap2 = 200000000;\r\n\t\tprice11 = 60000000000000;\r\n\t\tprice12 = price11.mul(35).div(100);\r\n\t\tprice13 = price11.div(2);\r\n\t\tprice2 = price11.mul(15).div(100);\r\n\t\tprice3 = price11.mul(7).div(100);\r\n\t\tprice4 = price11;\r\n\t\tethgetter = 0xC84f88d5cc6cAbc10fD031E1A5908fA70b3fcECa;\r\n    }\r\n    \r\n    function() external payable {\r\n        require((now > start1 && now < end1)||(now > start2 && now < end2)||(now > start3 && now < end3)||(now > start4 && now < end4));\r\n        uint tokadd;\r\n        if (now > start1 && now <end1) {\r\n            if (msg.value < 2000000000000000000) {\r\n                tokadd = msg.value.div(price11);\r\n                require (token.totalSupply() + tokadd < hardcap1);\r\n                ethgetter.transfer(msg.value);\r\n                token.mint(msg.sender, tokadd);\r\n                \r\n            }\r\n            if (msg.value >= 2000000000000000000 && msg.value < 50000000000000000000) {\r\n                tokadd = msg.value.div(price12);\r\n                require (token.totalSupply() + tokadd < hardcap1);\r\n                ethgetter.transfer(msg.value);\r\n                token.mint(msg.sender, tokadd);\r\n            }\r\n            if (msg.value >= 50000000000000000000) {\r\n                tokadd = msg.value.div(price13);\r\n                require (token.totalSupply() + tokadd < hardcap1);\r\n                ethgetter.transfer(msg.value);\r\n                token.mint(msg.sender, tokadd);\r\n            }\r\n        }\r\n        if (now > start2 && now <end2) {\r\n            tokadd = msg.value.div(price2);\r\n            require (token.totalSupply() + tokadd < hardcap2);\r\n            ethgetter.transfer(msg.value);\r\n            token.mint(msg.sender, tokadd);\r\n        }\r\n        if (now > start3 && now <end3) {\r\n            tokadd = msg.value.div(price3);\r\n            require (token.totalSupply() + tokadd < hardcap2);\r\n            ethgetter.transfer(msg.value);\r\n            token.mint(msg.sender, tokadd);\r\n        }\r\n        if (now > start4 && now <end4) {\r\n            tokadd = msg.value.div(price4);\r\n            require (token.totalSupply() + tokadd < hardcap2);\r\n            ethgetter.transfer(msg.value);\r\n            token.mint(msg.sender, tokadd);\r\n        }\r\n        \r\n    }\r\n    \r\n    function finishMinting() public onlyOwner {\r\n        token.finishMinting();\r\n    }\r\n    \r\n    function mint(address _to, uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n        require(_value + token.totalSupply() < hardcap2 + 3000000);\r\n        token.mint(_to, _value);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6de4ca4433181fd9af1a0d51521f191090507d7c15f27444d2a1731eaf214f95"}]}