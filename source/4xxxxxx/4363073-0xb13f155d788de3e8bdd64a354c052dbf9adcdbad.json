{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract token {\r\n    function transfer(address receiver, uint amount);\r\n    function balanceOf( address _address )returns(uint256);\r\n}\r\n\r\ncontract DragonCrowdsale {\r\n    address public beneficiary;\r\n    address public owner;\r\n    address public charity;\r\n  \r\n    uint public amountRaised;\r\n    uint public tokensSold;\r\n    uint public deadline;\r\n    uint public price;\r\n    uint public preICOspecial;\r\n    \r\n    \r\n    token public tokenReward;\r\n    mapping( address => uint256 ) public contributions;\r\n    mapping( address => bool )    public preICOparticipated;\r\n    \r\n    bool public crowdSaleStart;\r\n    bool public crowdSalePause;\r\n    bool public crowdSaleClosed;\r\n    \r\n    enum Package { Zero, Small, Large }\r\n    \r\n    Package package;\r\n    \r\n\r\n   \r\n    event FundTransfer(address participant, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function DragonCrowdsale() {\r\n        beneficiary = msg.sender; //beneficiary is initially the contract deployer\r\n        charity = msg.sender; //charity is initially the contract deployer\r\n        owner = msg.sender;// owner is initially the contract deployer\r\n        price =  .000000000033333333 ether;\r\n        tokenReward = token( 0x1d1CF6cD3fE91fe4d1533BA3E0b7758DFb59aa1f );\r\n        crowdSaleStart == false;\r\n        preICOspecial = 3500000000000000;\r\n        \r\n    }\r\n\r\n    function () payable {\r\n        \r\n        require(!crowdSaleClosed);\r\n        require(!crowdSalePause);\r\n        \r\n        \r\n        \r\n        // only two purchase values acceptable due to ppre-ico packages\r\n        if( msg.value != .3333333 ether && msg.value != 3.3333333 ether  && crowdSaleStart == false  ) throw;\r\n        if ( crowdSaleStart == false && preICOparticipated[msg.sender] == true ) throw;\r\n        if ( crowdSaleStart == false ) {\r\n            \r\n            if ( msg.value ==  .3333333 ether ) package = Package.Small;\r\n            if ( msg.value == 3.3333333 ether ) package = Package.Large;\r\n        }\r\n        \r\n       \r\n        if ( crowdSaleStart) require( now < deadline );\r\n        uint amount = msg.value;\r\n        \r\n        tokenReward.transfer( msg.sender, amount / price ); // what buyer purchases\r\n        \r\n        // only triggers before official launch\r\n        if ( package == Package.Small  && crowdSaleStart == false && tokensSold < preICOspecial ) { \r\n        \r\n            tokenReward.transfer( charity    , 800000000  );  //charitable donation\r\n            tokenReward.transfer( msg.sender , 800000000  );  // buyer's reward bonus\r\n            preICOparticipated[ msg.sender ] = true; \r\n            tokensSold +=  1600000000;\r\n            \r\n        }\r\n        \r\n        // only triggers before official launch\r\n        if ( package == Package.Large  && crowdSaleStart == false && tokensSold < preICOspecial ) { \r\n        \r\n            tokenReward.transfer( charity    , 8000000000 );  // charitable donation\r\n            tokenReward.transfer( msg.sender , 8000000000 );  // buyer's reward bonus\r\n            preICOparticipated[ msg.sender ] = true; \r\n            tokensSold += 16000000000;\r\n            \r\n        }\r\n        \r\n        contributions[msg.sender] += amount;\r\n        tokensSold += amount / price;\r\n        amountRaised += amount;\r\n        FundTransfer( msg.sender, amount );\r\n        beneficiary.transfer( amount );\r\n        \r\n        \r\n    }\r\n\r\n    // Start this October 27 and crowdsale will run for 60 days\r\n    function startCrowdsale() onlyOwner  {\r\n        \r\n        crowdSaleStart = true;\r\n        deadline = now + 60 days;\r\n    }\r\n\r\n    //terminates the crowdsale\r\n    function endCrowdsale() onlyOwner  {\r\n        \r\n        \r\n        crowdSaleClosed = true;\r\n    }\r\n\r\n\r\n    function pauseCrowdsale() onlyOwner {\r\n        \r\n        crowdSalePause = true;\r\n        \r\n        \r\n    }\r\n\r\n    function unpauseCrowdsale() onlyOwner {\r\n        \r\n        crowdSalePause = false;\r\n        \r\n        \r\n    }\r\n    \r\n    function transferOwnership ( address _newowner ) onlyOwner {\r\n        \r\n        owner = _newowner;\r\n        \r\n    }\r\n    \r\n    // use this to set the crowdsale beneficiary address\r\n    function transferBeneficiary ( address _newbeneficiary ) onlyOwner {\r\n        \r\n        beneficiary = _newbeneficiary;\r\n        \r\n    }\r\n    \r\n    // use this to set the charity address\r\n    function transferCharity ( address _newcharity ) onlyOwner {\r\n        \r\n        charity = _newcharity;\r\n        \r\n    }\r\n    \r\n    //empty the crowdsale contract and forward balance to beneficiary\r\n    function withdrawDragons() onlyOwner{\r\n        \r\n        uint256 balance = tokenReward.balanceOf(address(this));\r\n        \r\n        tokenReward.transfer( beneficiary, balance );\r\n        \r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newcharity\",\"type\":\"address\"}],\"name\":\"transferCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newbeneficiary\",\"type\":\"address\"}],\"name\":\"transferBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOspecial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDragons\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSalePause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preICOparticipated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"DragonCrowdsale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://466bfa5dd1c3384e55340e54e83a3fa5755d120054f9518e099213e3150ec568"}]}