{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n\r\ncontract Controlled {\r\n    address public controller;\r\n    modifier onlyController() {\r\n        require(isController(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function Controlled() { controller = msg.sender; }\r\n\r\n    function isController(address addr) public returns(bool) { return addr == controller; }\r\n\r\n    function changeController(address newController) public onlyController {\r\n        if (newController != address(this)) {\r\n            controller = newController;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Proxy is Controlled {\r\n    event LogForwarded (address indexed destination, uint value, bytes data);\r\n    event LogReceived (address indexed sender, uint value);\r\n\r\n    function () payable { LogReceived(msg.sender, msg.value); }\r\n\r\n    function forward(address destination, uint value, bytes data) public onlyController {\r\n        require(destination.call.value(value)(data));\r\n        LogForwarded(destination, value, data);\r\n    }\r\n}\r\n\r\n\r\ncontract MetaIdentityManager {\r\n    uint adminTimeLock;\r\n    uint userTimeLock;\r\n    uint adminRate;\r\n    address relay;\r\n\r\n    event LogIdentityCreated(\r\n        address indexed identity,\r\n        address indexed creator,\r\n        address owner,\r\n        address indexed recoveryKey);\r\n\r\n    event LogOwnerAdded(\r\n        address indexed identity,\r\n        address indexed owner,\r\n        address instigator);\r\n\r\n    event LogOwnerRemoved(\r\n        address indexed identity,\r\n        address indexed owner,\r\n        address instigator);\r\n\r\n    event LogRecoveryChanged(\r\n        address indexed identity,\r\n        address indexed recoveryKey,\r\n        address instigator);\r\n\r\n    event LogMigrationInitiated(\r\n        address indexed identity,\r\n        address indexed newIdManager,\r\n        address instigator);\r\n\r\n    event LogMigrationCanceled(\r\n        address indexed identity,\r\n        address indexed newIdManager,\r\n        address instigator);\r\n\r\n    event LogMigrationFinalized(\r\n        address indexed identity,\r\n        address indexed newIdManager,\r\n        address instigator);\r\n\r\n    mapping(address => mapping(address => uint)) owners;\r\n    mapping(address => address) recoveryKeys;\r\n    mapping(address => mapping(address => uint)) limiter;\r\n    mapping(address => uint) public migrationInitiated;\r\n    mapping(address => address) public migrationNewAddress;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == relay || checkMessageData(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(address identity, address sender) {\r\n        require(isOwner(identity, sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOlderOwner(address identity, address sender) {\r\n        require(isOlderOwner(identity, sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRecovery(address identity, address sender) {\r\n        require(recoveryKeys[identity] == sender);\r\n        _;\r\n    }\r\n\r\n    modifier rateLimited(Proxy identity, address sender) {\r\n        require(limiter[identity][sender] < (now - adminRate));\r\n        limiter[identity][sender] = now;\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address addr) { //protects against some weird attacks\r\n        require(addr != address(0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Contract constructor sets initial timelocks and meta-tx relay address\r\n    /// @param _userTimeLock Time before new owner added by recovery can control proxy\r\n    /// @param _adminTimeLock Time before new owner can add/remove owners\r\n    /// @param _adminRate Time period used for rate limiting a given key for admin functionality\r\n    /// @param _relayAddress Address of meta transaction relay contract\r\n    function MetaIdentityManager(uint _userTimeLock, uint _adminTimeLock, uint _adminRate, address _relayAddress) {\r\n        require(_adminTimeLock >= _userTimeLock);\r\n        adminTimeLock = _adminTimeLock;\r\n        userTimeLock = _userTimeLock;\r\n        adminRate = _adminRate;\r\n        relay = _relayAddress;\r\n    }\r\n\r\n    /// @dev Creates a new proxy contract for an owner and recovery\r\n    /// @param owner Key who can use this contract to control proxy. Given full power\r\n    /// @param recoveryKey Key of recovery network or address from seed to recovery proxy\r\n    /// Gas cost of ~300,000\r\n    function createIdentity(address owner, address recoveryKey) public validAddress(recoveryKey) {\r\n        Proxy identity = new Proxy();\r\n        owners[identity][owner] = now - adminTimeLock; // This is to ensure original owner has full power from day one\r\n        recoveryKeys[identity] = recoveryKey;\r\n        LogIdentityCreated(identity, msg.sender, owner,  recoveryKey);\r\n    }\r\n\r\n    /// @dev Creates a new proxy contract for an owner and recovery and allows an initial forward call which would be to set the registry in our case\r\n    /// @param owner Key who can use this contract to control proxy. Given full power\r\n    /// @param recoveryKey Key of recovery network or address from seed to recovery proxy\r\n    /// @param destination Address of contract to be called after proxy is created\r\n    /// @param data of function to be called at the destination contract\r\n    function createIdentityWithCall(address owner, address recoveryKey, address destination, bytes data) public validAddress(recoveryKey) {\r\n        Proxy identity = new Proxy();\r\n        owners[identity][owner] = now - adminTimeLock; // This is to ensure original owner has full power from day one\r\n        recoveryKeys[identity] = recoveryKey;\r\n        LogIdentityCreated(identity, msg.sender, owner,  recoveryKey);\r\n        identity.forward(destination, 0, data);\r\n    }\r\n\r\n    /// @dev Allows a user to transfer control of existing proxy to this contract. Must come through proxy\r\n    /// @param owner Key who can use this contract to control proxy. Given full power\r\n    /// @param recoveryKey Key of recovery network or address from seed to recovery proxy\r\n    /// Note: User must change owner of proxy to this contract after calling this\r\n    function registerIdentity(address owner, address recoveryKey) public validAddress(recoveryKey) {\r\n        require(recoveryKeys[msg.sender] == 0); // Deny any funny business\r\n        owners[msg.sender][owner] = now - adminTimeLock; // Owner has full power from day one\r\n        recoveryKeys[msg.sender] = recoveryKey;\r\n        LogIdentityCreated(msg.sender, msg.sender, owner, recoveryKey);\r\n    }\r\n\r\n    /// @dev Allows a user to forward a call through their proxy.\r\n    function forwardTo(address sender, Proxy identity, address destination, uint value, bytes data) public\r\n        onlyAuthorized\r\n        onlyOwner(identity, sender)\r\n    {\r\n        identity.forward(destination, value, data);\r\n    }\r\n\r\n    /// @dev Allows an olderOwner to add a new owner instantly\r\n    function addOwner(address sender, Proxy identity, address newOwner) public\r\n        onlyAuthorized\r\n        onlyOlderOwner(identity, sender)\r\n        rateLimited(identity, sender)\r\n    {\r\n        require(!isOwner(identity, newOwner));\r\n        owners[identity][newOwner] = now - userTimeLock;\r\n        LogOwnerAdded(identity, newOwner, sender);\r\n    }\r\n\r\n    /// @dev Allows a recoveryKey to add a new owner with userTimeLock waiting time\r\n    function addOwnerFromRecovery(address sender, Proxy identity, address newOwner) public\r\n        onlyAuthorized\r\n        onlyRecovery(identity, sender)\r\n        rateLimited(identity, sender)\r\n    {\r\n        require(!isOwner(identity, newOwner));\r\n        owners[identity][newOwner] = now;\r\n        LogOwnerAdded(identity, newOwner, sender);\r\n    }\r\n\r\n    /// @dev Allows an owner to remove another owner instantly\r\n    function removeOwner(address sender, Proxy identity, address owner) public\r\n        onlyAuthorized\r\n        onlyOlderOwner(identity, sender)\r\n        rateLimited(identity, sender)\r\n    {\r\n        // an owner should not be allowed to remove itself\r\n        require(sender != owner);\r\n        delete owners[identity][owner];\r\n        LogOwnerRemoved(identity, owner, sender);\r\n    }\r\n\r\n    /// @dev Allows an owner to change the recoveryKey instantly\r\n    function changeRecovery(address sender, Proxy identity, address recoveryKey) public\r\n        onlyAuthorized\r\n        onlyOlderOwner(identity, sender)\r\n        rateLimited(identity, sender)\r\n        validAddress(recoveryKey)\r\n    {\r\n        recoveryKeys[identity] = recoveryKey;\r\n        LogRecoveryChanged(identity, recoveryKey, sender);\r\n    }\r\n\r\n    /// @dev Allows an owner to begin process of transfering proxy to new IdentityManager\r\n    function initiateMigration(address sender, Proxy identity, address newIdManager) public\r\n        onlyAuthorized\r\n        onlyOlderOwner(identity, sender)\r\n    {\r\n        migrationInitiated[identity] = now;\r\n        migrationNewAddress[identity] = newIdManager;\r\n        LogMigrationInitiated(identity, newIdManager, sender);\r\n    }\r\n\r\n    /// @dev Allows an owner to cancel the process of transfering proxy to new IdentityManager\r\n    function cancelMigration(address sender, Proxy identity) public\r\n        onlyAuthorized\r\n        onlyOwner(identity, sender)\r\n    {\r\n        address canceledManager = migrationNewAddress[identity];\r\n        delete migrationInitiated[identity];\r\n        delete migrationNewAddress[identity];\r\n        LogMigrationCanceled(identity, canceledManager, sender);\r\n    }\r\n\r\n    /// @dev Allows an owner to finalize and completly transfer proxy to new IdentityManager\r\n    /// Note: before transfering to a new address, make sure this address is \"ready to recieve\" the proxy.\r\n    /// Not doing so risks the proxy becoming stuck.\r\n    function finalizeMigration(address sender, Proxy identity) onlyAuthorized onlyOlderOwner(identity, sender) {\r\n        require(migrationInitiated[identity] != 0 && migrationInitiated[identity] + adminTimeLock < now);\r\n        address newIdManager = migrationNewAddress[identity];\r\n        delete migrationInitiated[identity];\r\n        delete migrationNewAddress[identity];\r\n        identity.changeController(newIdManager);\r\n        delete recoveryKeys[identity];\r\n        // We can only delete the owner that we know of. All other owners\r\n        // needs to be removed before a call to this method.\r\n        delete owners[identity][sender];\r\n        LogMigrationFinalized(identity, newIdManager, sender);\r\n    }\r\n\r\n    //Checks that address a is the first input in msg.data.\r\n    //Has very minimal gas overhead.\r\n    function checkMessageData(address a) internal constant returns (bool t) {\r\n        if (msg.data.length < 36) return false;\r\n        assembly {\r\n            let mask := 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n            t := eq(a, and(mask, calldataload(4)))\r\n        }\r\n    }\r\n\r\n    function isOwner(address identity, address owner) public constant returns (bool) {\r\n        return (owners[identity][owner] > 0 && (owners[identity][owner] + userTimeLock) <= now);\r\n    }\r\n\r\n    function isOlderOwner(address identity, address owner) public constant returns (bool) {\r\n        return (owners[identity][owner] > 0 && (owners[identity][owner] + adminTimeLock) <= now);\r\n    }\r\n\r\n    function isRecovery(address identity, address recoveryKey) public constant returns (bool) {\r\n        return recoveryKeys[identity] == recoveryKey;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"recoveryKey\",\"type\":\"address\"}],\"name\":\"isRecovery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"newIdManager\",\"type\":\"address\"}],\"name\":\"initiateMigration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"recoveryKey\",\"type\":\"address\"}],\"name\":\"changeRecovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOlderOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"recoveryKey\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createIdentityWithCall\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationNewAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forwardTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwnerFromRecovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"recoveryKey\",\"type\":\"address\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"cancelMigration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"finalizeMigration\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"recoveryKey\",\"type\":\"address\"}],\"name\":\"createIdentity\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_userTimeLock\",\"type\":\"uint256\"},{\"name\":\"_adminTimeLock\",\"type\":\"uint256\"},{\"name\":\"_adminRate\",\"type\":\"uint256\"},{\"name\":\"_relayAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recoveryKey\",\"type\":\"address\"}],\"name\":\"LogIdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogOwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogOwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recoveryKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogRecoveryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIdManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogMigrationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIdManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogMigrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newIdManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instigator\",\"type\":\"address\"}],\"name\":\"LogMigrationFinalized\",\"type\":\"event\"}]","ContractName":"MetaIdentityManager","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000001fa4000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000a2a24504c7bbb24ce92b5fa8a9befc3cbded560d","Library":"","SwarmSource":"bzzr://9c3e96e7ecabda3537696f4598d962e48e42c532fecbb9be140adbf47b726aab"}]}