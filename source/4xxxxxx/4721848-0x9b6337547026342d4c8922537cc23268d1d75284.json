{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner)\r\n            _;\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   *  modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *  modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *  called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   *  called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public  onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\ncontract Mortal is Ownable {\r\n\r\n    function kill()  public {\r\n        if (msg.sender == owner) {\r\n            selfdestruct(owner);\r\n        }\r\n    }\r\n}\r\ncontract UserTokensControl is Ownable{\r\n    uint256 isUserAbleToTransferTime = 1579174400000;//control for transfer Thu Jan 16 2020 \r\n    modifier isUserAbleToTransferCheck(uint balance,uint _value) {\r\n      if(msg.sender == 0x3b06AC092339D382050C892aD035b5F140B7C628){\r\n         if(now<isUserAbleToTransferTime){\r\n             revert();\r\n         }\r\n         _;\r\n      }else {\r\n          _;\r\n      }\r\n    }\r\n   \r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Pausable , UserTokensControl{\r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused isUserAbleToTransferCheck(balances[msg.sender],_value) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n   // Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused isUserAbleToTransferCheck(balances[msg.sender],_value) returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n  //  Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Potentium is StandardToken, Mortal {\r\n    string public constant name = \"POTENTIAM\";\r\n    uint public constant decimals = 18;\r\n    string public constant symbol = \"PTM\";\r\n    address companyReserve;\r\n    uint saleEndDate;\r\n    uint public amountRaisedInWei;\r\n    uint public priceOfToken=1041600000000000;//0.0010416 ETH\r\n    address[] allParticipants;\r\n    uint tokenSales=0;\r\n     mapping(address => uint256)public  balancesHold;\r\n    event TokenHold( address indexed to, uint256 value);\r\n    mapping (address => bool) isParticipated;\r\n    uint public icoStartDate;\r\n    uint public icoWeek1Bonus = 10;\r\n    uint public icoWeek2Bonus = 7;\r\n    uint public icoWeek3Bonus = 5;\r\n    uint public icoWeek4Bonus = 3;\r\n    function Potentium()  public {\r\n      totalSupply=100000000 *(10**decimals);  // \r\n       owner = msg.sender;\r\n       companyReserve=0x3b06AC092339D382050C892aD035b5F140B7C628;\r\n       balances[msg.sender] = 75000000 * (10**decimals);\r\n       balances[companyReserve] = 25000000 * (10**decimals); //given by potentieum\r\n      saleEndDate =  1520554400000;  //8 March 2018\r\n    }\r\n\r\n    \r\n    function() payable whenNotPaused public {\r\n        require(msg.sender !=0x0);\r\n        require(now<=saleEndDate);\r\n        require(msg.value >=40000000000000000); //minimum 0.04 eth\r\n        require(tokenSales<=(60000000 * (10 ** decimals)));\r\n        uint256 tokens = (msg.value * (10 ** decimals)) / priceOfToken;\r\n        uint256 bonusTokens = 0;\r\n        if(now <1513555100000){\r\n            bonusTokens = (tokens * 40) /100; //17 dec 2017 % bonus presale\r\n        }else if(now <1514760800000) {\r\n            bonusTokens = (tokens * 35) /100; //31 dec 2017 % bonus\r\n        }else if(now <1515369600000){\r\n            bonusTokens = (tokens * 30) /100; //jan 7 2018 bonus\r\n        }else if(now <1515974400000){\r\n            bonusTokens = (tokens * 25) /100; //jan 14 2018 bonus\r\n        }\r\n        else if(now <1516578400000){\r\n            bonusTokens = (tokens * 20) /100; //jan 21 2018 bonus\r\n        }else if(now <1517011400000){\r\n              bonusTokens = (tokens * 15) /100; //jan 26 2018 bonus\r\n        }\r\n        else if(now>=icoStartDate){\r\n            if(now <= (icoStartDate + 1 * 7 days) ){\r\n                bonusTokens = (tokens * icoWeek1Bonus) /100; \r\n            }\r\n            else if(now <= (icoStartDate + 2 * 7 days) ){\r\n                bonusTokens = (tokens * icoWeek2Bonus) /100; \r\n            }\r\n           else if(now <= (icoStartDate + 3 * 7 days) ){\r\n                bonusTokens = (tokens * icoWeek3Bonus) /100; \r\n            }\r\n           else if(now <= (icoStartDate + 4 * 7 days) ){\r\n                bonusTokens = (tokens * icoWeek4Bonus) /100; \r\n            }\r\n            \r\n        }\r\n        tokens +=bonusTokens;\r\n        tokenSales+=tokens;\r\n        balancesHold[msg.sender]+=tokens;\r\n        amountRaisedInWei = amountRaisedInWei + msg.value;\r\n        if(!isParticipated[msg.sender]){\r\n            allParticipants.push(msg.sender);\r\n        }\r\n        TokenHold(msg.sender,tokens);//event to dispactc as token hold successfully\r\n    }\r\n    function distributeTokensAfterIcoByOwner()public onlyOwner{\r\n        for (uint i = 0; i < allParticipants.length; i++) {\r\n                    address userAdder=allParticipants[i];\r\n                    var tokens = balancesHold[userAdder];\r\n                    if(tokens>0){\r\n                    allowed[owner][userAdder] += tokens;\r\n                    transferFrom(owner, userAdder, tokens);\r\n                    balancesHold[userAdder] = 0;\r\n                     }\r\n                 }\r\n    }\r\n    /**\r\n   * @dev called by the owner to extend deadline relative to last deadLine Time,\r\n   * to accept ether and transfer tokens\r\n   */\r\n   function extendSaleEndDate(uint saleEndTimeInMIllis)public onlyOwner{\r\n       saleEndDate = saleEndTimeInMIllis;\r\n   }\r\n   function setIcoStartDate(uint icoStartDateInMilli)public onlyOwner{\r\n       icoStartDate = icoStartDateInMilli;\r\n   }\r\n    function setICOWeek1Bonus(uint bonus)public onlyOwner{\r\n       icoWeek1Bonus= bonus;\r\n   }\r\n     function setICOWeek2Bonus(uint bonus)public onlyOwner{\r\n       icoWeek2Bonus= bonus;\r\n   }\r\n     function setICOWeek3Bonus(uint bonus)public onlyOwner{\r\n       icoWeek3Bonus= bonus;\r\n   }\r\n     function setICOWeek4Bonus(uint bonus)public onlyOwner{\r\n       icoWeek4Bonus= bonus;\r\n   }\r\n   function rateForOnePTM(uint rateInWei) public onlyOwner{\r\n       priceOfToken = rateInWei;\r\n   }\r\n\r\n   //function ext\r\n   /**\r\n     * to get total particpants count\r\n     */\r\n    function getCountPartipants() public constant returns (uint count){\r\n       return allParticipants.length;\r\n    }\r\n    function getParticipantIndexAddress(uint index)public constant returns (address){\r\n        return allParticipants[index];\r\n    }\r\n    /**\r\n    * Transfer entire balance to any account (by owner and admin only)\r\n    **/\r\n    function transferFundToAccount(address _accountByOwner) public onlyOwner {\r\n        require(amountRaisedInWei > 0);\r\n        _accountByOwner.transfer(amountRaisedInWei);\r\n        amountRaisedInWei = 0;\r\n    }\r\n\r\n    function resetTokenOfAddress(address _userAdd)public onlyOwner {\r\n      uint256 userBal=  balances[_userAdd] ;\r\n      balances[_userAdd] = 0;\r\n      balances[owner] +=userBal;\r\n    }\r\n    /**\r\n    * Transfer part of balance to any account (by owner and admin only)\r\n    **/\r\n    function transferLimitedFundToAccount(address _accountByOwner, uint256 balanceToTransfer) public onlyOwner   {\r\n        require(amountRaisedInWei > balanceToTransfer);\r\n        _accountByOwner.transfer(balanceToTransfer);\r\n        amountRaisedInWei -= balanceToTransfer;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setICOWeek4Bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoWeek1Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleEndTimeInMIllis\",\"type\":\"uint256\"}],\"name\":\"extendSaleEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setICOWeek2Bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeTokensAfterIcoByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountPartipants\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoWeek2Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountByOwner\",\"type\":\"address\"},{\"name\":\"balanceToTransfer\",\"type\":\"uint256\"}],\"name\":\"transferLimitedFundToAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoWeek3Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoStartDateInMilli\",\"type\":\"uint256\"}],\"name\":\"setIcoStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setICOWeek1Bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rateInWei\",\"type\":\"uint256\"}],\"name\":\"rateForOnePTM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAdd\",\"type\":\"address\"}],\"name\":\"resetTokenOfAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setICOWeek3Bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoWeek4Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountByOwner\",\"type\":\"address\"}],\"name\":\"transferFundToAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipantIndexAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenHold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Potentium","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://843f0b1afc37253e2cd277e18ec9b6908d4bd879b8b3121076950a62c74aa2b8"}]}