{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.13;\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\ncontract ERC20Lookup {\r\n    address public owner;\r\n\r\n    function ERC20Lookup() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function lookup(address[] addressesToCheck, address owner, address spender, bool includeAccountBalance, bool includeAllowance) \r\n        public\r\n        constant\r\n        returns(uint[], uint[], uint accountBalance)\r\n    {\r\n\r\n        uint[] memory balances = new uint[](addressesToCheck.length);\r\n        uint[] memory allowances;\r\n\r\n        // maybe less gas\r\n        if (includeAllowance) {\r\n            allowances = new uint[](addressesToCheck.length);\r\n        }\r\n        \r\n        for (uint i = 0; i < addressesToCheck.length; i++) {\r\n            ERC20Interface erc20 = ERC20Interface(addressesToCheck[i]);\r\n\r\n            balances[i] = erc20.balanceOf(owner);\r\n            \r\n            // cache this in app; save gas, do more in one call\r\n            if (includeAllowance) {\r\n                allowances[i] = erc20.allowance(owner, spender);\r\n            }\r\n        }\r\n\r\n        if (includeAccountBalance) {\r\n            accountBalance = owner.balance;\r\n        }\r\n\r\n        return (balances, allowances, accountBalance);\r\n    }\r\n\r\n    function suicide() {\r\n        require(msg.sender == owner);\r\n\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addressesToCheck\",\"type\":\"address[]\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"includeAccountBalance\",\"type\":\"bool\"},{\"name\":\"includeAllowance\",\"type\":\"bool\"}],\"name\":\"lookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"accountBalance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suicide\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"ERC20Lookup","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f96bebe6eb7c5ec287f8af004a09fa76aed52b3ea9e68c333b72c741ad2e0a3"}]}