{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n/** \r\n\tTies.Network TokenSale contract\r\n\t@author Dmitry Kochin <k@ties.network>\r\n*/\r\n\r\n\r\npragma solidity ^0.4.14;\r\n\r\n\r\n/*************************************************************************\r\n * import \"./include/MintableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"zeppelin/contracts/token/StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin/contracts/token/StandardToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * Mintable token\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    uint public totalSupply = 0;\r\n    address private minter;\r\n\r\n    modifier onlyMinter(){\r\n        require(minter == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function setMinter(address _minter) onlyOwner {\r\n        minter = _minter;\r\n    }\r\n\r\n    function mint(address _to, uint _amount) onlyMinter {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(address(0x0), _to, _amount);\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"./include/MintableToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\ncontract TokenSale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    // Constants\r\n    // =========\r\n\r\n    uint private constant fractions = 1e18;\r\n    uint private constant millions = 1e6*fractions;\r\n\r\n    uint private constant CAP = 200*millions;\r\n    uint private constant SALE_CAP = 140*millions;\r\n    uint private constant BONUS_STEP = 14*millions;\r\n\r\n    uint public price = 0.0008 ether;\r\n\r\n    // Events\r\n    // ======\r\n\r\n    event AltBuy(address holder, uint tokens, string txHash);\r\n    event Buy(address holder, uint tokens);\r\n    event RunSale();\r\n    event PauseSale();\r\n    event FinishSale();\r\n    event PriceSet(uint weiPerTIE);\r\n\r\n    // State variables\r\n    // ===============\r\n\r\n    MintableToken public token;\r\n    address authority; //An account to control the contract on behalf of the owner\r\n    address robot; //An account to purchase tokens for altcoins\r\n    bool public isOpen = false;\r\n\r\n    // Constructor\r\n    // ===========\r\n\r\n    function TokenSale(address _token, address _multisig, address _authority, address _robot){\r\n        token = MintableToken(_token);\r\n        authority = _authority;\r\n        robot = _robot;\r\n        transferOwnership(_multisig);\r\n    }\r\n\r\n    // Public functions\r\n    // ================\r\n\r\n    function getCurrentBonus() constant returns (uint){\r\n        return getBonus(token.totalSupply());\r\n    }\r\n\r\n    /**\r\n    * Gets the bonus for the specified total supply\r\n    */\r\n    function getBonus(uint totalSupply) constant returns (uint){\r\n        bytes10 bonuses = \"\\x14\\x11\\x0F\\x0C\\x0A\\x08\\x06\\x04\\x02\\x00\";\r\n        uint level = totalSupply/BONUS_STEP;\r\n        if(level < bonuses.length)\r\n            return uint(bonuses[level]);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * Computes number of tokens with bonus for the specified ether. Correctly\r\n    * adds bonuses if the sum is large enough to belong to several bonus intervals\r\n    */\r\n    function getTokensAmount(uint etherVal) constant returns (uint) {\r\n        uint tokens = 0;\r\n        uint totalSupply = token.totalSupply();\r\n        while(true){\r\n            //How much we have before next bonus interval\r\n            uint gap = BONUS_STEP - totalSupply%BONUS_STEP;\r\n            //Bonus at the current interval\r\n            uint bonus = 100 + getBonus(totalSupply);\r\n            //The cost of the entire remainder of this interval\r\n            uint gapCost = gap*(price*100)/fractions/bonus;\r\n            if(gapCost >= etherVal){\r\n                //If the gap is large enough just sell the necessary amount of tokens\r\n                tokens += etherVal.mul(bonus).mul(fractions)/(price*100);\r\n                break;\r\n            }else{\r\n                //If the gap is too small sell it and diminish the price by its cost for the next iteration\r\n                tokens += gap;\r\n                etherVal -= gapCost;\r\n                totalSupply += gap;\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function buy(address to) onlyOpen payable{\r\n        uint amount = msg.value;\r\n        uint tokens = getTokensAmountUnderCap(amount);\r\n\r\n        owner.transfer(amount);\r\n        token.mint(to, tokens);\r\n\r\n        Buy(to, tokens);\r\n    }\r\n\r\n    function () payable{\r\n        buy(msg.sender);\r\n    }\r\n\r\n    // Modifiers\r\n    // =================\r\n\r\n    modifier onlyAuthority() {\r\n        require(msg.sender == authority || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRobot() {\r\n        require(msg.sender == robot);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpen() {\r\n        require(isOpen);\r\n        _;\r\n    }\r\n\r\n    // Priveleged functions\r\n    // ====================\r\n\r\n    /**\r\n    * Used to buy tokens for altcoins.\r\n    * Robot may call it before TokenSale officially starts to migrate early investors\r\n    */\r\n    function buyAlt(address to, uint etherAmount, string _txHash) onlyRobot {\r\n        uint tokens = getTokensAmountUnderCap(etherAmount);\r\n        token.mint(to, tokens);\r\n        AltBuy(to, tokens, _txHash);\r\n    }\r\n\r\n    function setAuthority(address _authority) onlyOwner {\r\n        authority = _authority;\r\n    }\r\n\r\n    function setRobot(address _robot) onlyAuthority {\r\n        robot = _robot;\r\n    }\r\n\r\n    function setPrice(uint etherPerTie) onlyAuthority {\r\n        //Ether is not expected to rate less than $96 and more than $480 during token sale\r\n        require(0.0005 ether <= etherPerTie && etherPerTie <= 0.0025 ether);\r\n        price = etherPerTie;\r\n        PriceSet(price);\r\n    }\r\n\r\n    // SALE state management: start / pause / finalize\r\n    // --------------------------------------------\r\n    function open(bool open) onlyAuthority {\r\n        isOpen = open;\r\n        open ? RunSale() : PauseSale();\r\n    }\r\n\r\n    function finalize() onlyAuthority {\r\n        uint diff = CAP.sub(token.totalSupply());\r\n        if(diff > 0) //The unsold capacity moves to team\r\n            token.mint(owner, diff);\r\n        selfdestruct(owner);\r\n        FinishSale();\r\n    }\r\n\r\n    // Private functions\r\n    // =========================\r\n\r\n    /**\r\n    * Gets tokens for specified ether provided that they are still under the cap\r\n    */\r\n    function getTokensAmountUnderCap(uint etherAmount) private constant returns (uint){\r\n        uint tokens = getTokensAmount(etherAmount);\r\n        require(tokens > 0);\r\n        require(tokens.add(token.totalSupply()) <= SALE_CAP);\r\n        return tokens;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"buyAlt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_robot\",\"type\":\"address\"}],\"name\":\"setRobot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"etherVal\",\"type\":\"uint256\"}],\"name\":\"getTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherPerTie\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_robot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"AltBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RunSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weiPerTIE\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000999967e2ec8a74b7c8e9db19e039d920b31d39d00000000000000000000000009cbfbe5ad33246b20b5c2cf07a927b35cdb219c100000000000000000000000000eadc3cf4f4791a9e64d6e7e476236b8db096ab000000000000000000000000000029fc93885957cb321634bf886c907a684018","Library":"","SwarmSource":"bzzr://c3c9c71a03375cd7f3672d9836370d4b4c7d58fed295969c0cc75bd46f7c11f0"}]}