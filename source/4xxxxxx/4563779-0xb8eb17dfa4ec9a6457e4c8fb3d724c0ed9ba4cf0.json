{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract WhiteListCrowdsale is\r\n  CappedCrowdsale,\r\n  Ownable\r\n{\r\n\r\n  /**\r\n   * @dev Rate of bonus tokens received by investors during the whitelist period of the crowdsale.\r\n   */\r\n  uint8 public constant WHITELIST_BONUS_RATE = 10;\r\n\r\n  /**\r\n   * @dev Rate of bonus tokens received by a referring investor,\r\n   * expressed as % of total bonus tokens issued for the purchase.\r\n   */\r\n  uint8 public constant REFERRAL_SHARE_RATE = 50;\r\n\r\n  /**\r\n   * @dev Timestamp until which it is possible to add an investor to the whitelist.\r\n   */\r\n  uint256 public whiteListRegistrationEndTime;\r\n\r\n  /**\r\n   * @dev Timestamp after which anyone can participate in the crowdsale.\r\n   */\r\n  uint256 public whiteListEndTime;\r\n\r\n  /**\r\n   * @dev Whitelisted addresses.\r\n   */\r\n  mapping(address => bool) public isWhiteListed;\r\n\r\n  /**\r\n   * @dev Referral codes associated to their referring addresses.\r\n   */\r\n  mapping(bytes32 => address) internal referralCodes;\r\n\r\n  /**\r\n   * @dev Maps referred investors to their referrers (referred => referring).\r\n   */\r\n  mapping(address => address) internal referrals;\r\n\r\n  /**\r\n   * @dev Event fired when an address is added to the whitelist.\r\n   * @param investor whitelisted investor\r\n   * @param referralCode referral code of the whitelisted investor\r\n   */\r\n  event WhiteListedInvestorAdded(\r\n    address indexed investor,\r\n    string referralCode\r\n  );\r\n\r\n  /**\r\n   * event for bonus token emmited\r\n   * @param referralCode referral code of the whitelisted investor\r\n   * @param referredInvestor address of the referred investor\r\n   */\r\n  event ReferredInvestorAdded(\r\n    string referralCode,\r\n    address referredInvestor\r\n  );\r\n\r\n  /**\r\n   * @dev Event fired when bonus tokens are emitted for referred purchases.\r\n   * @param beneficiary who got the tokens\r\n   * @param amount bonus tokens issued\r\n   */\r\n  event ReferredBonusTokensEmitted(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Event fired when bonus tokens are emitted for whitelist or referred purchases.\r\n   * @param beneficiary who got the tokens\r\n   * @param amount bonus tokens issued\r\n   */\r\n  event WhiteListBonusTokensEmitted(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev WhiteListCrowdsale construction.\r\n   * @param _whiteListRegistrationEndTime time until which white list registration is still possible\r\n   * @param _whiteListEndTime time until which only white list purchases are accepted\r\n   */\r\n  function WhiteListCrowdsale(uint256 _whiteListRegistrationEndTime, uint256 _whiteListEndTime) public {\r\n    require(_whiteListEndTime > startTime);\r\n\r\n    whiteListEndTime = _whiteListEndTime;\r\n    whiteListRegistrationEndTime = _whiteListRegistrationEndTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Overriding Crowdsale#buyTokens to add extra whitelist and referral logic.\r\n   * @param _beneficiary address that is buying tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable\r\n  {\r\n    require(validWhiteListedPurchase(_beneficiary));\r\n\r\n    // Buys tokens and transfers them to _beneficiary.\r\n    super.buyTokens(_beneficiary);\r\n    \r\n    uint256 bonusTokens = computeBonusTokens(_beneficiary, msg.value);\r\n    if (isReferred(_beneficiary))\r\n    {\r\n      uint256 bonusTokensForReferral = bonusTokens.mul(REFERRAL_SHARE_RATE).div(100);\r\n      uint256 bonusTokensForReferred = bonusTokens.sub(bonusTokensForReferral);\r\n      token.mint(_beneficiary, bonusTokensForReferred);\r\n      token.mint(referrals[_beneficiary], bonusTokensForReferral);\r\n      ReferredBonusTokensEmitted(_beneficiary, bonusTokensForReferred);\r\n      WhiteListBonusTokensEmitted(referrals[_beneficiary], bonusTokensForReferral);\r\n    }\r\n    else if (isWhiteListed[_beneficiary])\r\n    {\r\n      token.mint(_beneficiary, bonusTokens);\r\n      WhiteListBonusTokensEmitted(_beneficiary, bonusTokens);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Adds an investor to the whitelist if registration is open. Fails otherwise.\r\n   * @param _investor whitelisted investor\r\n   * @param _referralCode investor's referral code\r\n   */\r\n  function addWhiteListedInvestor(address _investor, string _referralCode) public\r\n  {\r\n    require(block.timestamp <= whiteListRegistrationEndTime);\r\n    require(_investor != 0);\r\n    require(!isWhiteListed[_investor]);\r\n    bytes32 referralCodeHash = keccak256(_referralCode);\r\n    require(referralCodes[referralCodeHash] == 0x0);\r\n    \r\n    isWhiteListed[_investor] = true;\r\n    referralCodes[referralCodeHash] = _investor;\r\n    WhiteListedInvestorAdded(_investor, _referralCode);\r\n  }\r\n\r\n  /**\r\n   * @dev Adds up to 30 whitelisted investors. To be called one or more times\r\n   * for initial whitelist loading.\r\n   * @param _investors whitelisted investors.\r\n   * @param _referralCodes keccak-256 hashes of corresponding investor referral codes.\r\n   */\r\n  function loadWhiteList(address[] _investors, bytes32[] _referralCodes) public onlyOwner\r\n  {\r\n    require(_investors.length <= 30);\r\n    require(_investors.length == _referralCodes.length);\r\n\r\n    for (uint i = 0; i < _investors.length; i++)\r\n    {\r\n      isWhiteListed[_investors[i]] = true;\r\n      referralCodes[_referralCodes[i]] = _investors[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Adds a referred investor to the second-level whitelist.\r\n   * @param _referredInvestor whitelisted investor.\r\n   * @param _referralCode investor's referral code.\r\n   */\r\n  function addReferredInvestor(string _referralCode, address _referredInvestor) public\r\n  {\r\n    require(!hasEnded());\r\n    require(!isWhiteListed[_referredInvestor]);\r\n    require(_referredInvestor != 0);\r\n    require(referrals[_referredInvestor] == 0x0);\r\n    bytes32 referralCodeHash = keccak256(_referralCode);\r\n    require(referralCodes[referralCodeHash] != 0);\r\n\r\n    referrals[_referredInvestor] = referralCodes[referralCodeHash];\r\n    ReferredInvestorAdded(_referralCode, _referredInvestor);\r\n  }\r\n\r\n  /**\r\n   * @dev Adds up to 30 referred investors. To be called one or more times\r\n   * for initial referred list loading.\r\n   * @param _referralCodes keccak-256 hashes of referral codes.\r\n   * @param _investors corresponding referred investors.\r\n   */\r\n  function loadReferredInvestors(bytes32[] _referralCodes, address[] _investors) public onlyOwner\r\n  {\r\n    require(_investors.length <= 30);\r\n    require(_investors.length == _referralCodes.length);\r\n\r\n    for (uint i = 0; i < _investors.length; i++)\r\n    {\r\n      referrals[_investors[i]] = referralCodes[_referralCodes[i]];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if _investor is a referred investor.\r\n   * @param _investor address to check against the list of referred investors.\r\n   */\r\n  function isReferred(address _investor) public constant returns (bool)\r\n  {\r\n    return referrals[_investor] != 0x0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if _investor is a whitelisted or referred investor,\r\n   * or the whitelist period has ended (and the crowdsale hasn't) and everyone can buy.\r\n   * @param _investor investor who is making the purchase.\r\n   */\r\n  function validWhiteListedPurchase(address _investor) internal constant returns (bool)\r\n  {\r\n    return isWhiteListed[_investor] || isReferred(_investor) || block.timestamp > whiteListEndTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of bonus tokens for a whitelisted or referred purchase.\r\n   * Returns zero if the purchase is not from a whitelisted or referred investor.\r\n   * @param _weiAmount purchase amount.\r\n   */\r\n  function computeBonusTokens(address _beneficiary, uint256 _weiAmount) internal constant returns (uint256)\r\n  {\r\n    if (isReferred(_beneficiary) || isWhiteListed[_beneficiary]) {\r\n      uint256 bonusTokens = _weiAmount.mul(rate).mul(WHITELIST_BONUS_RATE).div(100);\r\n      if (block.timestamp > whiteListEndTime) {\r\n        bonusTokens = bonusTokens.div(2);\r\n      }\r\n      return bonusTokens;\r\n    }\r\n    else\r\n    {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public constant returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract DemeterCrowdsale is\r\n  RefundableCrowdsale,\r\n  WhiteListCrowdsale,\r\n  Pausable,\r\n  Destructible\r\n{\r\n\r\n  /**\r\n   * @dev Each time an investor purchases, he gets this % of the minted tokens\r\n   * (plus bonus if applicable), while the company gets 70% (minus bonus).\r\n   */\r\n  uint8 constant public PERC_TOKENS_TO_INVESTOR = 30;\r\n\r\n  /**\r\n   * @dev Portion of total tokens reserved for future token releases.\r\n   * Documentation-only. Unused in code, as the release part is calculated by subtraction.\r\n   */\r\n  uint8 constant public PERC_TOKENS_TO_RELEASE = 25;\r\n\r\n  /**\r\n   * @dev Address to which the release tokens are credited.\r\n   */\r\n  address constant public RELEASE_WALLET = 0x867D85437d27cA97e1EB574250efbba487aca637;\r\n\r\n  /**\r\n   * Portion of total tokens reserved for dev. team.\r\n   */\r\n  uint8 constant public PERC_TOKENS_TO_DEV = 20;\r\n\r\n  /**\r\n   * @dev Address to which the dev. tokens are credited.\r\n   */\r\n  address constant public DEV_WALLET = 0x70323222694584c68BD5a29194bb72c248e715F7;\r\n\r\n  /**\r\n   * Portion of total tokens reserved for business dev.\r\n   */\r\n  uint8 constant public PERC_TOKENS_TO_BIZDEV = 25;\r\n\r\n  /**\r\n   * @dev Address to which the business dev. tokens are credited.\r\n   */\r\n  address constant public BIZDEV_WALLET = 0xE43053e265F04f690021735E02BBA559Cea681D6;\r\n\r\n  /**\r\n   * @dev Event fired whenever company tokens are issued for a purchase.\r\n   * @param investor who made the purchase\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens minted for the company\r\n   */\r\n  event CompanyTokensIssued(\r\n    address indexed investor,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev DemeterCrowdsale construction.\r\n   * @param _startTime beginning of crowdsale.\r\n   * @param _endTime end of crowdsale.\r\n   * @param _whiteListRegistrationEndTime time until which whitelist registration is still possible.\r\n   * @param _whiteListEndTime time until which only whitelist purchases are accepted.\r\n   * @param _rate how many tokens per ether in case of no whitelist or referral bonuses.\r\n   * @param _cap crowdsale hard cap in wei.\r\n   * @param _goal minimum crowdsale goal in wei; if not reached, causes refunds to be available.\r\n   * @param _wallet where the raised ethers are transferred in case of successful crowdsale.\r\n   */\r\n  function DemeterCrowdsale(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _whiteListRegistrationEndTime,\r\n    uint256 _whiteListEndTime,\r\n    uint256 _rate,\r\n    uint256 _cap,\r\n    uint256 _goal,\r\n    address _wallet\r\n  ) public\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    CappedCrowdsale(_cap)\r\n    RefundableCrowdsale(_goal)\r\n    WhiteListCrowdsale(_whiteListRegistrationEndTime, _whiteListEndTime)\r\n  {\r\n    DemeterToken(token).setUnlockTime(_endTime);\r\n  }\r\n\r\n  /**\r\n   * @dev Called when a purchase is made. Override to issue company tokens\r\n   * in addition to bought and bonus tokens.\r\n   * @param _beneficiary the investor that buys the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused {\r\n    require(msg.value >= 0.1 ether);\r\n    // buys tokens (including referral or whitelist tokens) and\r\n    // transfers them to _beneficiary.\r\n    super.buyTokens(_beneficiary);\r\n    \r\n    // mints additional tokens for the company and distributes them to the company wallets.\r\n    issueCompanyTokens(_beneficiary, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Closes the vault, terminates the contract and the token contract as well.\r\n   * Only allowed while the vault is open (not when refunds are enabled or the vault\r\n   * is already closed). Balance would be transferred to the owner, but it is\r\n   * always zero anyway.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    vault.close();\r\n    super.destroy();\r\n    DemeterToken(token).destroyAndSend(this);\r\n  }\r\n\r\n  /**\r\n   * @dev Closes the vault, terminates the contract and the token contract as well.\r\n   * Only allowed while the vault is open (not when refunds are enabled or the vault\r\n   * is already closed). Balance would be transferred to _recipient, but it is\r\n   * always zero anyway.\r\n   */\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    vault.close();\r\n    super.destroyAndSend(_recipient);\r\n    DemeterToken(token).destroyAndSend(_recipient);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to change the minimum goal during the sale.\r\n   * @param _goal new goal in wei.\r\n   */\r\n  function updateGoal(uint256 _goal) public onlyOwner {\r\n    require(_goal >= 0 && _goal <= cap);\r\n    require(!hasEnded());\r\n\r\n    goal = _goal;\r\n  }\r\n\r\n  /**\r\n   * @dev Mints additional tokens for the company and distributes them to the company wallets.\r\n   * @param _investor the investor that bought tokens.\r\n   * @param _weiAmount the amount paid in weis.\r\n   */\r\n  function issueCompanyTokens(address _investor, uint256 _weiAmount) internal {\r\n    uint256 investorTokens = _weiAmount.mul(rate);\r\n    uint256 bonusTokens = computeBonusTokens(_investor, _weiAmount);\r\n    uint256 companyTokens = investorTokens.mul(100 - PERC_TOKENS_TO_INVESTOR).div(PERC_TOKENS_TO_INVESTOR);\r\n    uint256 totalTokens = investorTokens.add(companyTokens);\r\n    // distribute total tokens among the three wallets.\r\n    uint256 devTokens = totalTokens.mul(PERC_TOKENS_TO_DEV).div(100);\r\n    token.mint(DEV_WALLET, devTokens);\r\n    // We take out bonus tokens from bizDev amount.\r\n    uint256 bizDevTokens = (totalTokens.mul(PERC_TOKENS_TO_BIZDEV).div(100)).sub(bonusTokens);\r\n    token.mint(BIZDEV_WALLET, bizDevTokens);\r\n    uint256 actualCompanyTokens = companyTokens.sub(bonusTokens);\r\n    uint256 releaseTokens = actualCompanyTokens.sub(bizDevTokens).sub(devTokens);\r\n    token.mint(RELEASE_WALLET, releaseTokens);\r\n\r\n    CompanyTokensIssued(_investor, _weiAmount, actualCompanyTokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Override to create our specific token contract.\r\n   */\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new DemeterToken();\r\n  }\r\n\r\n  /**\r\n   * Immediately unlocks tokens. To be used in case of early close of the sale.\r\n   */\r\n  function unlockTokens() internal {\r\n    if (DemeterToken(token).unlockTime() > block.timestamp) {\r\n      DemeterToken(token).setUnlockTime(block.timestamp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Unlock the tokens immediately if the sale closes prematurely.\r\n   */\r\n  function finalization() internal {\r\n    super.finalization();\r\n    unlockTokens();\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract TimeLockedToken is MintableToken\r\n{\r\n\r\n  /**\r\n   * @dev Timestamp after which tokens can be transferred.\r\n   */\r\n  uint256 public unlockTime = 0;\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer() {\r\n    require(unlockTime == 0 || block.timestamp > unlockTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the date and time since which tokens can be transfered.\r\n   * It can only be moved back, and not in the past.\r\n   * @param _unlockTime New unlock timestamp.\r\n   */\r\n  function setUnlockTime(uint256 _unlockTime) public onlyOwner {\r\n    require(unlockTime == 0 || _unlockTime < unlockTime);\r\n    require(_unlockTime >= block.timestamp);\r\n\r\n    unlockTime = _unlockTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\ncontract DemeterToken is TimeLockedToken, Destructible\r\n{\r\n  string public name = \"Demeter\";\r\n  string public symbol = \"DMT\";\r\n  uint256 public decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PERC_TOKENS_TO_RELEASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_goal\",\"type\":\"uint256\"}],\"name\":\"updateGoal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERC_TOKENS_TO_INVESTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERC_TOKENS_TO_BIZDEV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BIZDEV_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralCodes\",\"type\":\"bytes32[]\"},{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"loadReferredInvestors\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListRegistrationEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_SHARE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST_BONUS_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERC_TOKENS_TO_DEV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralCode\",\"type\":\"string\"},{\"name\":\"_referredInvestor\",\"type\":\"address\"}],\"name\":\"addReferredInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_referralCode\",\"type\":\"string\"}],\"name\":\"addWhiteListedInvestor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_referralCodes\",\"type\":\"bytes32[]\"}],\"name\":\"loadWhiteList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"isReferred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_whiteListRegistrationEndTime\",\"type\":\"uint256\"},{\"name\":\"_whiteListEndTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyTokensIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"WhiteListedInvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referralCode\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"referredInvestor\",\"type\":\"address\"}],\"name\":\"ReferredInvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferredBonusTokensEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WhiteListBonusTokensEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"DemeterCrowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a1012b0000000000000000000000000000000000000000000000000000000005a379faf000000000000000000000000000000000000000000000000000000005a0c1e2f000000000000000000000000000000000000000000000000000000005a16aa2f00000000000000000000000000000000000000000000000000000000000008fc0000000000000000000000000000000000000000000005862d4ba15cc03800000000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000018061456803b185583c84780c55e667bc7b71f7d","Library":"","SwarmSource":"bzzr://966355fff31afa183424b22158864b2fa647fbc8584ded4a31e936ebdcada923"}]}