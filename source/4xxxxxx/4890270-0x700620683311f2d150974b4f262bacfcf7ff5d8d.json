{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.10;\r\n\r\n/*************************************************************************\r\n * import \"./TrancheWallet.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./IOwned.sol\" : start\r\n *************************************************************************/\r\n\r\n/**@dev Simple interface to Owned base class */\r\ncontract IOwned {\r\n    function owner() public constant returns (address) {}\r\n    function transferOwnership(address _newOwner) public;\r\n}/*************************************************************************\r\n * import \"./IOwned.sol\" : end\r\n *************************************************************************/\r\n\r\ncontract Owned is IOwned {\r\n    address public owner;        \r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**@dev allows transferring the contract ownership. */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev Distributes some amount of currency in small portions available to withdraw once in a period */\r\ncontract TrancheWallet is Owned {\r\n    address public beneficiary;         //funds are to withdraw to this account\r\n    uint256 public tranchePeriodInDays; //one tranche 'cooldown' time\r\n    uint256 public trancheAmountPct;    //one tranche amount \r\n        \r\n    uint256 public lockStart;           //when funds were locked\r\n    uint256 public completeUnlockTime;  //when funds are unlocked completely\r\n    uint256 public initialFunds;        //funds to divide into tranches\r\n    uint256 public tranchesSent;        //tranches already sent to beneficiary\r\n\r\n    event Withdraw(uint256 amount, uint256 tranches);\r\n\r\n    function TrancheWallet(\r\n        address _beneficiary, \r\n        uint256 _tranchePeriodInDays,\r\n        uint256 _trancheAmountPct        \r\n        ) \r\n    {\r\n        beneficiary = _beneficiary;\r\n        tranchePeriodInDays = _tranchePeriodInDays;\r\n        trancheAmountPct = _trancheAmountPct;\r\n        tranchesSent = 0;\r\n        completeUnlockTime = 0;\r\n    }\r\n\r\n    /**@dev Sets new beneficiary to receive funds */\r\n    function setBeneficiary(address newBeneficiary) public ownerOnly {\r\n        beneficiary = newBeneficiary;\r\n    }\r\n\r\n    //Locks all funds on account so that it's possible to withdraw only specific tranche amount.\r\n    //Funds will be unlocked completely in a given amount of days \r\n    //Can be made only one time\r\n    function lock(uint256 lockPeriodInDays) public ownerOnly {\r\n        require(lockStart == 0);\r\n\r\n        initialFunds = currentBalance();//this.balance;\r\n        lockStart = now;\r\n        completeUnlockTime = lockPeriodInDays * 1 days + lockStart;\r\n    }\r\n\r\n    /**@dev Sends available tranches to beneficiary account*/\r\n    function sendToBeneficiary() {\r\n        uint256 amountToWithdraw;\r\n        uint256 tranchesToSend;\r\n        (amountToWithdraw, tranchesToSend) = amountAvailableToWithdraw();\r\n\r\n        require(amountToWithdraw > 0);\r\n\r\n        tranchesSent += tranchesToSend;\r\n        doTransfer(amountToWithdraw);\r\n\r\n        Withdraw(amountToWithdraw, tranchesSent);\r\n    }\r\n\r\n    /**@dev Calculates available amount to withdraw */\r\n    function amountAvailableToWithdraw() constant returns (uint256 amount, uint256 tranches) {        \r\n        if (currentBalance() > 0) {\r\n            if(now > completeUnlockTime) {\r\n                //withdraw everything\r\n                amount = currentBalance();\r\n                tranches = 0;\r\n            } else {\r\n                //withdraw tranche                \r\n                uint256 periodsSinceLock = (now - lockStart) / (tranchePeriodInDays * 1 days);\r\n                tranches = periodsSinceLock - tranchesSent + 1;                \r\n                amount = tranches * oneTrancheAmount();\r\n\r\n                //check if exceeding current limit\r\n                if(amount > currentBalance()) {\r\n                    amount = currentBalance();\r\n                    tranches = amount / oneTrancheAmount();\r\n                }\r\n            }\r\n        } else {\r\n            amount = 0;\r\n            tranches = 0;\r\n        }\r\n    }\r\n\r\n    /**@dev Returns the size of one tranche */\r\n    function oneTrancheAmount() constant returns(uint256) {\r\n        return trancheAmountPct * initialFunds / 100; \r\n    }\r\n\r\n    /**@dev Returns current balance to be distributed to portions*/\r\n    function currentBalance() internal constant returns(uint256);\r\n\r\n    /**@dev Transfers given amount of currency to the beneficiary */\r\n    function doTransfer(uint256 amount) internal;\r\n}\r\n/*************************************************************************\r\n * import \"./TrancheWallet.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../token/IERC20Token.sol\" : start\r\n *************************************************************************/\r\n\r\ncontract IERC20Token {\r\n\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external    \r\n    function name() public constant returns (string _name) { _name; }\r\n    function symbol() public constant returns (string _symbol) { _symbol; }\r\n    function decimals() public constant returns (uint8 _decimals) { _decimals; }\r\n    \r\n    function totalSupply() public constant returns (uint total) {total;}\r\n    function balanceOf(address _owner) public constant returns (uint balance) {_owner; balance;}    \r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {_owner; _spender; remaining;}\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n/*************************************************************************\r\n * import \"../token/IERC20Token.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev Wallet that contains some amount of tokens and allows to withdraw it in small portions */\r\ncontract TokenTrancheWallet is TrancheWallet {\r\n\r\n    /**@dev Token to be stored */\r\n    IERC20Token public token;\r\n\r\n    function TokenTrancheWallet(\r\n        IERC20Token _token,\r\n        address _beneficiary, \r\n        uint256 _tranchePeriodInDays,\r\n        uint256 _trancheAmountPct\r\n        ) TrancheWallet(_beneficiary, _tranchePeriodInDays, _trancheAmountPct) \r\n    {\r\n        token = _token;\r\n    }\r\n\r\n    /**@dev Returns current balance to be distributed to portions*/\r\n    function currentBalance() internal constant returns(uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    /**@dev Transfers given amount of currency to the beneficiary */\r\n    function doTransfer(uint256 amount) internal {\r\n        require(token.transfer(beneficiary, amount));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"oneTrancheAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAvailableToWithdraw\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tranches\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trancheAmountPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tranchePeriodInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tranchesSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completeUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tranchePeriodInDays\",\"type\":\"uint256\"},{\"name\":\"_trancheAmountPct\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tranches\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"TokenTrancheWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098bde3a768401260e7025faf9947ef1b81295519000000000000000000000000b9c5f14e5e460ef926e5772783992f686fc2d3c4000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://8d9fb2a34a78946f7f4e61c0808f6d58120c4d72a9b1d2a2b3ff12578fd89eea"}]}