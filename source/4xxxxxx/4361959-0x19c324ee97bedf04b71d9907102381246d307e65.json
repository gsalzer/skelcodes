{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\ncontract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) public; }\r\ncontract ElevateCoin\r\n  { \r\n     /* Variables  */\r\n    string  public name;                                                        // name  of contract\r\n    string  public symbol;                                                      // symbol of contract\r\n    uint8   public decimals;                                                    // how many decimals to keep , 18 is best \r\n    uint256 public totalSupply;                                                 // how many tokens to create\r\n    uint256 public remaining;                                                   // how many tokens has left\r\n    uint    public ethRate;                                                     // current rate of ether\r\n    address public owner;                                                       // contract creator\r\n    uint256 public amountCollected;                                             // how much funds has been collected\r\n    uint    public icoStatus;                                                   // allow / disallow online purchase\r\n    uint    public icoTokenPrice;                                               // token price, start with 10 cents\r\n    address public benAddress;                                                  // funds withdraw address\r\n    address public bkaddress;                                                   \r\n    uint    public allowTransferToken;                                          // allow / disallow token transfer for members\r\n    \r\n     /* Array  */\r\n    mapping (address => uint256) public balanceOf;                              // array of all balances\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    \r\n    /* Events  */\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event TransferSell(address indexed from, address indexed to, uint256 value, string typex); // only for ico sales\r\n    \r\n\r\n     /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ElevateCoin() public\r\n    {\r\n      totalSupply = 10000000000000000000000000000;                              // as the decimals are 18, we add 18 zero after total supply, as all values are stored in wei\r\n      owner =  msg.sender;                                                      // Set owner of contract\r\n      balanceOf[owner] = totalSupply;                                           // Give the creator all initial tokens\r\n      name = \"Elevate Coin\";                                                    // Set the name for display purposes\r\n      symbol = \"ElevateCoin\";                                                   // Set the symbol for display purposes\r\n      decimals = 18;                                                            // Amount of decimals for display purposes\r\n      remaining = totalSupply;                                                  // How many tokens are left\r\n      ethRate = 300;                                                            // default token price\r\n      icoStatus = 1;                                                            // default ico status\r\n      icoTokenPrice = 10;                                                       // values are in cents\r\n      benAddress = 0x57D1aED65eE1921CC7D2F3702C8A28E5Dd317913;                  // funds withdraw address\r\n      bkaddress  = 0xE254FC78C94D7A358F78323E56D9BBBC4C2F9993;                   \r\n      allowTransferToken = 0;                                                   // default set to disable, it will be enable after ICO is over\r\n    }\r\n\r\n   modifier onlyOwner()\r\n    {\r\n        require((msg.sender == owner) || (msg.sender ==  bkaddress));\r\n        _;\r\n    }\r\n\r\n\r\n    function () public payable                                                  // called when ether is send to contract\r\n    {\r\n        if (remaining > 0 && icoStatus == 1 )\r\n        {\r\n            uint  finalTokens =  (msg.value * ethRate ) / icoTokenPrice;\r\n            finalTokens =  finalTokens *  (10 ** 2) ; \r\n            if(finalTokens < remaining)\r\n                {\r\n                    remaining = remaining - finalTokens;\r\n                    amountCollected = amountCollected + (msg.value / 10 ** 18);\r\n                    _transfer(owner,msg.sender, finalTokens); \r\n                    TransferSell(owner, msg.sender, finalTokens,'Online');\r\n                }\r\n            else\r\n                {\r\n                    revert();\r\n                }\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }    \r\n    \r\n    function sellOffline(address rec_address,uint256 token_amount) public onlyOwner \r\n    {\r\n        if (remaining > 0)\r\n        {\r\n            uint finalTokens =  (token_amount  * (10 ** 18));              \r\n            if(finalTokens < remaining)\r\n                {\r\n                    remaining = remaining - finalTokens;\r\n                    _transfer(owner,rec_address, finalTokens);    \r\n                    TransferSell(owner, rec_address, finalTokens,'Offline');\r\n                }\r\n            else\r\n                {\r\n                    revert();\r\n                }\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }        \r\n    }\r\n    \r\n    function getEthRate() onlyOwner public constant returns  (uint)            // Get current rate of ether \r\n    {\r\n        return ethRate;\r\n    }\r\n    \r\n    function setEthRate (uint newEthRate) public  onlyOwner                    // Set ether price\r\n    {\r\n        ethRate = newEthRate;\r\n    } \r\n\r\n\r\n    function getTokenPrice() onlyOwner public constant returns  (uint)         // Get current token price\r\n    {\r\n        return icoTokenPrice;\r\n    }\r\n    \r\n    function setTokenPrice (uint newTokenRate) public  onlyOwner               // Set one token price\r\n    {\r\n        icoTokenPrice = newTokenRate;\r\n    }     \r\n    \r\n    \r\n    function setTransferStatus (uint status) public  onlyOwner                 // Set transfer status\r\n    {\r\n        allowTransferToken = status;\r\n    }   \r\n    \r\n    function changeIcoStatus (uint8 statx)  public onlyOwner                   // Change ICO Status\r\n    {\r\n        icoStatus = statx;\r\n    } \r\n    \r\n\r\n    function withdraw(uint amountWith) public onlyOwner                        // withdraw partical amount\r\n        {\r\n            if((msg.sender == owner) || (msg.sender ==  bkaddress))\r\n            {\r\n                benAddress.transfer(amountWith);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n\r\n    function withdraw_all() public onlyOwner                                   // call to withdraw all available balance\r\n        {\r\n            if((msg.sender == owner) || (msg.sender ==  bkaddress) )\r\n            {\r\n                var amountWith = this.balance - 10000000000000000;\r\n                benAddress.transfer(amountWith);\r\n            }\r\n            else\r\n            {\r\n                revert();\r\n            }\r\n        }\r\n\r\n    function mintToken(uint256 tokensToMint) public onlyOwner \r\n        {\r\n            if(tokensToMint > 0)\r\n            {\r\n                var totalTokenToMint = tokensToMint * (10 ** 18);\r\n                balanceOf[owner] += totalTokenToMint;\r\n                totalSupply += totalTokenToMint;\r\n                Transfer(0, owner, totalTokenToMint);\r\n            }\r\n        }\r\n\r\n    function freezeAccount(address target, bool freeze) private onlyOwner \r\n        {\r\n            frozenAccount[target] = freeze;\r\n            FrozenFunds(target, freeze);\r\n        }\r\n            \r\n\r\n    function getCollectedAmount() onlyOwner public constant returns (uint256 balance) \r\n        {\r\n            return amountCollected;\r\n        }        \r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) \r\n        {\r\n            return balanceOf[_owner];\r\n        }\r\n\r\n    function totalSupply() private constant returns (uint256 tsupply) \r\n        {\r\n            tsupply = totalSupply;\r\n        }    \r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner \r\n        { \r\n            balanceOf[owner] = 0;                        \r\n            balanceOf[newOwner] = remaining;               \r\n            owner = newOwner; \r\n        }        \r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal \r\n      {\r\n          if(allowTransferToken == 1 || _from == owner )\r\n          {\r\n              require(!frozenAccount[_from]);                                   // Prevent transfer from frozenfunds\r\n              require (_to != 0x0);                                             // Prevent transfer to 0x0 address. Use burn() instead\r\n              require (balanceOf[_from] > _value);                              // Check if the sender has enough\r\n              require (balanceOf[_to] + _value > balanceOf[_to]);               // Check for overflows\r\n              balanceOf[_from] -= _value;                                       // Subtract from the sender\r\n              balanceOf[_to] += _value;                                         // Add to the recipient\r\n              Transfer(_from, _to, _value);                                     // raise event\r\n          }\r\n          else\r\n          {\r\n               revert();\r\n          }\r\n      }\r\n\r\n  function transfer(address _to, uint256 _value)  public\r\n      {\r\n          _transfer(msg.sender, _to, _value);\r\n      }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) \r\n      {\r\n          require (_value < allowance[_from][msg.sender]);                      // Check allowance\r\n          allowance[_from][msg.sender] -= _value;\r\n          _transfer(_from, _to, _value);\r\n          return true;\r\n      }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) \r\n      {\r\n          allowance[msg.sender][_spender] = _value;\r\n          return true;\r\n      }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\r\n      {\r\n          tokenRecipient spender = tokenRecipient(_spender);\r\n          if (approve(_spender, _value)) {\r\n              spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n              return true;\r\n          }\r\n      }        \r\n\r\n  function burn(uint256 _value) public returns (bool success) \r\n      {\r\n          require (balanceOf[msg.sender] > _value);                             // Check if the sender has enough\r\n          balanceOf[msg.sender] -= _value;                                      // Subtract from the sender\r\n          totalSupply -= _value;                                                // Updates totalSupply\r\n          Burn(msg.sender, _value);\r\n          return true;\r\n      }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) \r\n      {\r\n          require(balanceOf[_from] >= _value);                                  // Check if the targeted balance is enough\r\n          require(_value <= allowance[_from][msg.sender]);                      // Check allowance\r\n          balanceOf[_from] -= _value;                                           // Subtract from the targeted balance\r\n          allowance[_from][msg.sender] -= _value;                               // Subtract from the sender's allowance\r\n          totalSupply -= _value;                                                // Update totalSupply\r\n          Burn(_from, _value);\r\n          return true;\r\n      }\r\n} // end of contract","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"statx\",\"type\":\"uint8\"}],\"name\":\"changeIcoStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountWith\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bkaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthRate\",\"type\":\"uint256\"}],\"name\":\"setEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToMint\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rec_address\",\"type\":\"address\"},{\"name\":\"token_amount\",\"type\":\"uint256\"}],\"name\":\"sellOffline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setTransferStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCollectedAmount\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typex\",\"type\":\"string\"}],\"name\":\"TransferSell\",\"type\":\"event\"}]","ContractName":"ElevateCoin","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://034b83e35304bd3d2ccdb33bd27e16cc5c63c8167ba9ba5437ae75eccb27996b"}]}