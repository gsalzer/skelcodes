{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract RNTMultiSigWallet {\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n\r\n    event Submission(uint indexed transactionId);\r\n\r\n    event Execution(uint indexed transactionId);\r\n\r\n    event ExecutionFailure(uint indexed transactionId);\r\n\r\n    event Deposit(address indexed sender, uint value);\r\n\r\n    event OwnerAddition(address indexed owner);\r\n\r\n    event OwnerRemoval(address indexed owner);\r\n\r\n    event RequirementChange(uint required);\r\n\r\n    event Pause();\r\n\r\n    event Unpause();\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public MAX_OWNER_COUNT = 10;\r\n\r\n    uint constant public ADMINS_COUNT = 2;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (uint => WalletTransaction) public transactions;\r\n\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n\r\n    mapping (address => bool) public isOwner;\r\n\r\n    mapping (address => bool) public isAdmin;\r\n\r\n    address[] public owners;\r\n\r\n    address[] public admins;\r\n\r\n    uint public required;\r\n\r\n    uint public transactionCount;\r\n\r\n    bool public paused = false;\r\n\r\n    struct WalletTransaction {\r\n    address sender;\r\n    address destination;\r\n    uint value;\r\n    bytes data;\r\n    bool executed;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n\r\n    /// @dev Modifier to make a function callable only when the contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to make a function callable only when the contract is paused.\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier adminExists(address admin) {\r\n        require(isAdmin[admin]);\r\n        _;\r\n    }\r\n\r\n    modifier adminDoesNotExist(address admin) {\r\n        require(!isAdmin[admin]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed)\r\n        require(false);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (ownerCount > MAX_OWNER_COUNT\r\n        || _required > ownerCount\r\n        || _required == 0\r\n        || ownerCount == 0) {\r\n            require(false);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validAdminsCount(uint adminsCount) {\r\n        require(adminsCount == ADMINS_COUNT);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n    whenNotPaused\r\n    payable\r\n    {\r\n        if (msg.value > 0)\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial admins and required number of confirmations.\r\n    /// @param _admins List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    function RNTMultiSigWallet(address[] _admins, uint _required)\r\n    public\r\n        //    validAdminsCount(_admins.length)\r\n        //    validRequirement(_admins.length, _required)\r\n    {\r\n        for (uint i = 0; i < _admins.length; i++) {\r\n            require(_admins[i] != 0 && !isOwner[_admins[i]] && !isAdmin[_admins[i]]);\r\n            isAdmin[_admins[i]] = true;\r\n            isOwner[_admins[i]] = true;\r\n        }\r\n\r\n        admins = _admins;\r\n        owners = _admins;\r\n        required = _required;\r\n    }\r\n\r\n    /// @dev called by the owner to pause, triggers stopped state\r\n    function pause() adminExists(msg.sender) whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /// @dev called by the owner to unpause, returns to normal state\r\n    function unpause() adminExists(msg.sender) whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n    public\r\n    whenNotPaused\r\n    adminExists(msg.sender)\r\n    ownerDoesNotExist(owner)\r\n    notNull(owner)\r\n    validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n    public\r\n    whenNotPaused\r\n    adminExists(msg.sender)\r\n    adminDoesNotExist(owner)\r\n    ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i = 0; i < owners.length - 1; i++)\r\n        if (owners[i] == owner) {\r\n            owners[i] = owners[owners.length - 1];\r\n            break;\r\n        }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n        changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n    public\r\n    whenNotPaused\r\n    adminExists(msg.sender)\r\n    adminDoesNotExist(owner)\r\n    ownerExists(owner)\r\n    ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++)\r\n        if (owners[i] == owner) {\r\n            owners[i] = newOwner;\r\n            break;\r\n        }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n    public\r\n    whenNotPaused\r\n    adminExists(msg.sender)\r\n    validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n    public\r\n    whenNotPaused\r\n    ownerExists(msg.sender)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    whenNotPaused\r\n    ownerExists(msg.sender)\r\n    transactionExists(transactionId)\r\n    notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n    public\r\n    whenNotPaused\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n    public\r\n    whenNotPaused\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            WalletTransaction storage walletTransaction = transactions[transactionId];\r\n            walletTransaction.executed = true;\r\n            if (walletTransaction.destination.call.value(walletTransaction.value)(walletTransaction.data))\r\n            Execution(transactionId);\r\n            else {\r\n                ExecutionFailure(transactionId);\r\n                walletTransaction.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n    public\r\n    constant\r\n    returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n            count += 1;\r\n            if (count == required)\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n    internal\r\n    notNull(destination)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = WalletTransaction({\r\n        sender : msg.sender,\r\n        destination : destination,\r\n        value : value,\r\n        data : data,\r\n        executed : false\r\n        });\r\n        transactionCount += 1;\r\n        Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++)\r\n        if (confirmations[transactionId][owners[i]])\r\n        count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; i++)\r\n        if (pending && !transactions[i].executed\r\n        || executed && transactions[i].executed)\r\n        count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    constant\r\n    returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    // @dev Returns list of admins.\r\n    // @return List of admin addresses\r\n    function getAdmins()\r\n    public\r\n    constant\r\n    returns (address[])\r\n    {\r\n        return admins;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n    public\r\n    constant\r\n    returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; i++)\r\n        if (confirmations[transactionId][owners[i]]) {\r\n            confirmationsTemp[count] = owners[i];\r\n            count += 1;\r\n        }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++)\r\n        _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n    public\r\n    constant\r\n    returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++)\r\n        if (pending && !transactions[i].executed\r\n        || executed && transactions[i].executed)\r\n        {\r\n            transactionIdsTemp[count] = i;\r\n            count += 1;\r\n        }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++)\r\n        _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}\r\n\r\ncontract RntPresaleEthereumDeposit is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public overallTakenEther = 0;\r\n\r\n    mapping (address => uint256) public receivedEther;\r\n\r\n    struct Donator {\r\n        address addr;\r\n        uint256 donated;\r\n    }\r\n\r\n    Donator[] donators;\r\n\r\n    RNTMultiSigWallet public wallet;\r\n\r\n    function RntPresaleEthereumDeposit(address _walletAddress) {\r\n        wallet = RNTMultiSigWallet(_walletAddress);\r\n    }\r\n\r\n    function updateDonator(address _address) internal {\r\n        bool isFound = false;\r\n        for (uint i = 0; i < donators.length; i++) {\r\n            if (donators[i].addr == _address) {\r\n                donators[i].donated =  receivedEther[_address];\r\n                isFound = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!isFound) {\r\n            donators.push(Donator(_address, receivedEther[_address]));\r\n        }\r\n    }\r\n\r\n    function getDonatorsNumber() external constant returns(uint256) {\r\n        return donators.length;\r\n    }\r\n\r\n    function getDonator(uint pos) external constant returns(address, uint256) {\r\n        return (donators[pos].addr, donators[pos].donated);\r\n    }\r\n\r\n    /*\r\n     * Fallback function for sending ether to wallet and update donators info\r\n     */\r\n    function() whenNotPaused payable {\r\n        wallet.transfer(msg.value);\r\n\r\n        overallTakenEther = overallTakenEther.add(msg.value);\r\n        receivedEther[msg.sender] = receivedEther[msg.sender].add(msg.value);\r\n\r\n        updateDonator(msg.sender);\r\n    }\r\n\r\n    function receivedEtherFrom(address _from) whenNotPaused constant public returns(uint256) {\r\n        return receivedEther[_from];\r\n    }\r\n\r\n    function myEther() whenNotPaused constant public returns(uint256) {\r\n        return receivedEther[msg.sender];\r\n    }\r\n}\r\n\r\ncontract PresaleFinalizeAgent is HasNoEther {\r\n    using SafeMath for uint256;\r\n\r\n    RntPresaleEthereumDeposit public deposit;\r\n\r\n    address public crowdsaleAddress;\r\n\r\n    mapping (address => uint256) public tokensForAddress;\r\n\r\n    uint256 public weiPerToken = 0;\r\n\r\n    bool public sane = true;\r\n\r\n    function PresaleFinalizeAgent(address _deposit, address _crowdsale){\r\n        deposit = RntPresaleEthereumDeposit(_deposit);\r\n        crowdsaleAddress = _crowdsale;\r\n    }\r\n\r\n    modifier onlyCrowdsale() {\r\n        require(msg.sender == crowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n    function isSane() public constant returns (bool) {\r\n        return sane;\r\n    }\r\n\r\n    function setCrowdsaleAddress(address _address) onlyOwner public {\r\n        crowdsaleAddress = _address;\r\n    }\r\n\r\n    function finalizePresale(uint256 presaleTokens) onlyCrowdsale public {\r\n        require(sane);\r\n        uint256 overallEther = deposit.overallTakenEther();\r\n        uint256 multiplier = 10 ** 18;\r\n        overallEther = overallEther.mul(multiplier);\r\n        weiPerToken = overallEther.div(presaleTokens);\r\n        require(weiPerToken > 0);\r\n        sane = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"presaleTokens\",\"type\":\"uint256\"}],\"name\":\"finalizePresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_deposit\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PresaleFinalizeAgent","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003219663cbd7a5b39a9f2be3f23d07e3ce0eb6d58000000000000000000000000ce0589450422ce360215c6c50f9809e753e3829b","Library":"","SwarmSource":"bzzr://baa5911d9f6f898b984d81013485f568ab3b23c83c76394fcdd25b9154fbf840"}]}