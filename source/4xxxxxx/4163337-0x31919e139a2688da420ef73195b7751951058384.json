{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end block where investments are allowed (both inclusive)\r\n  uint256 public startBlock;\r\n  uint256 public endBlock;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\r\n    require(_startBlock >= block.number);\r\n    require(_endBlock >= _startBlock);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startBlock = _startBlock;\r\n    endBlock = _endBlock;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold. \r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = block.number;\r\n    bool withinPeriod = current >= startBlock && current <= endBlock;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return block.number > endBlock;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract WhiteListCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public whiteListEndBlock;\r\n  mapping(address => bool) isWhiteListed;\r\n\r\n  event InvestorWhiteListAddition(address investor);\r\n\r\n  function WhiteListCrowdsale(uint256 _whiteListEndBlock) {\r\n    require(_whiteListEndBlock > startBlock);\r\n    whiteListEndBlock = _whiteListEndBlock;\r\n  }\r\n\r\n  function addToWhiteList(address investor) public {\r\n    require(startBlock > block.number);\r\n    require(!isWhiteListed[investor]);\r\n    require(investor != 0);\r\n\r\n    isWhiteListed[investor] = true;\r\n    InvestorWhiteListAddition(investor);\r\n  }\r\n\r\n  // overriding Crowdsale#buyTokens to add extra whitelist logic\r\n  // we did not use validPurchase because we cannot get the beneficiary address\r\n  function buyTokens(address beneficiary) payable {\r\n    require(validWhiteListedPurchase(beneficiary));\r\n    return super.buyTokens(beneficiary);\r\n  }\r\n\r\n  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\r\n    return isWhiteListed[beneficiary] || whiteListEndBlock <= block.number;\r\n  }\r\n\r\n}\r\n\r\ncontract BonusWhiteListCrowdsale is WhiteListCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 bonusWhiteListRate;\r\n\r\n  event BonusWhiteList(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function BonusWhiteListCrowdsale(uint256 _bonusWhiteListRate) {\r\n    require(_bonusWhiteListRate > 0);\r\n    bonusWhiteListRate = _bonusWhiteListRate;\r\n  }\r\n\r\n  function buyTokens(address beneficiary) payable {\r\n    super.buyTokens(beneficiary);\r\n\r\n    if(whiteListEndBlock > block.number && isWhiteListed[beneficiary]){\r\n      uint256 weiAmount = msg.value;\r\n      uint256 bonusTokens = weiAmount.mul(rate).mul(bonusWhiteListRate).div(100);\r\n      token.mint(beneficiary, bonusTokens);\r\n      BonusWhiteList(msg.sender, beneficiary, weiAmount, bonusTokens);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract ReferedCrowdsale is WhiteListCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => address) referrals;\r\n\r\n  event ReferredInvestorAddition(address whiteListedInvestor, address referredInvestor);\r\n\r\n  function ReferedCrowdsale() {}\r\n\r\n  function addToReferrals(address whiteListedInvestor, address referredInvestor) public {\r\n    require(isWhiteListed[whiteListedInvestor]);\r\n    require(!isWhiteListed[referredInvestor]);\r\n    require(whiteListedInvestor != 0);\r\n    require(referredInvestor != 0);\r\n    require(referrals[referredInvestor] == 0x0);\r\n\r\n    referrals[referredInvestor] = whiteListedInvestor;\r\n    ReferredInvestorAddition(whiteListedInvestor, referredInvestor);\r\n  }\r\n\r\n  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\r\n    return super.validWhiteListedPurchase(beneficiary) || referrals[beneficiary] != 0x0;\r\n  }\r\n\r\n}\r\n\r\ncontract BonusReferrerCrowdsale is ReferedCrowdsale, BonusWhiteListCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 bonusReferredRate;\r\n\r\n  event BonusReferred(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function BonusReferrerCrowdsale(uint256 _bonusReferredRate) {\r\n    require(_bonusReferredRate > 0 && _bonusReferredRate < bonusWhiteListRate);\r\n    bonusReferredRate = _bonusReferredRate;\r\n  }\r\n\r\n  function buyTokens(address beneficiary) payable {\r\n    super.buyTokens(beneficiary);\r\n\r\n    if(whiteListEndBlock > block.number && referrals[beneficiary] != 0x0){\r\n      uint256 weiAmount = msg.value;\r\n      uint256 bonusReferrerTokens = weiAmount.mul(rate).mul(bonusWhiteListRate - bonusReferredRate).div(100);\r\n      uint256 bonusReferredTokens = weiAmount.mul(rate).mul(bonusReferredRate).div(100);\r\n      token.mint(beneficiary, bonusReferredTokens);\r\n      token.mint(referrals[beneficiary], bonusReferrerTokens);\r\n      BonusWhiteList(msg.sender, referrals[beneficiary], weiAmount, bonusReferrerTokens);\r\n      BonusReferred(msg.sender, beneficiary, weiAmount, bonusReferredTokens);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract PartialOwnershipCrowdsale is BonusReferrerCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 percentToInvestor;\r\n\r\n  event CompanyTokenIssued(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function PartialOwnershipCrowdsale(uint256 _percentToInvestor) {\r\n    require(_percentToInvestor != 0);\r\n    percentToInvestor = _percentToInvestor;\r\n  }\r\n\r\n  function buyTokens(address beneficiary) payable {\r\n    super.buyTokens(beneficiary);\r\n    uint256 weiAmount = msg.value;\r\n    uint256 investorTokens = weiAmount.mul(rate);\r\n    uint256 companyTokens = investorTokens.mul(100 - percentToInvestor).div(percentToInvestor);\r\n    if(whiteListEndBlock > block.number && (referrals[beneficiary] != 0x0 || isWhiteListed[beneficiary])){\r\n      companyTokens = companyTokens.sub(investorTokens.mul(bonusWhiteListRate).div(100));\r\n    }\r\n\r\n    token.mint(wallet, companyTokens);\r\n    CompanyTokenIssued(msg.sender, beneficiary, weiAmount, companyTokens);\r\n  }\r\n\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  // should be called after crowdsale ends, to do\r\n  // some extra finalization work\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n    \r\n    isFinalized = true;\r\n  }\r\n\r\n  // end token minting on finalization\r\n  // override this with custom logic if needed\r\n  function finalization() internal {\r\n    token.finishMinting();\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public constant returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\ncontract DemeterCrowdsale is\r\n  Crowdsale,\r\n  CappedCrowdsale,\r\n  RefundableCrowdsale,\r\n  WhiteListCrowdsale,\r\n  ReferedCrowdsale,\r\n  BonusWhiteListCrowdsale,\r\n  BonusReferrerCrowdsale,\r\n  PartialOwnershipCrowdsale {\r\n\r\n    uint256 endBlock;\r\n\r\n  function DemeterCrowdsale(\r\n    uint256 _startBlock,\r\n    uint256 _endBlock,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    uint256 _cap,\r\n    uint256 _goal,\r\n    uint256 _whiteListEndBlock,\r\n    uint256 _bonusWhiteListRate,\r\n    uint256 _bonusReferredRate,\r\n    uint256 _percentToInvestor\r\n  )\r\n    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\r\n    CappedCrowdsale(_cap)\r\n    RefundableCrowdsale(_goal)\r\n    WhiteListCrowdsale(_whiteListEndBlock)\r\n    ReferedCrowdsale()\r\n    BonusWhiteListCrowdsale(_bonusWhiteListRate)\r\n    BonusReferrerCrowdsale(_bonusReferredRate)\r\n    PartialOwnershipCrowdsale(_percentToInvestor)\r\n  {\r\n    DemeterToken(token).setEndBlock(_endBlock);\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific MintableToken token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new DemeterToken();\r\n  }\r\n\r\n}\r\n\r\ncontract DemeterCrowdsaleInstance is DemeterCrowdsale {\r\n\r\n  function DemeterCrowdsaleInstance() DemeterCrowdsale(\r\n    4164989,\r\n    4176989,\r\n    1000000000000,\r\n    0x14f01e00092a5b0dBD43414793541df316363D82,\r\n    20000000000000000,\r\n    10000000000000000,\r\n    4168989,\r\n    7,\r\n    3,\r\n    30\r\n  ){}\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TimeBlockedToken is ERC20, Ownable {\r\n\r\n  uint256 endBlock;\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer() {\r\n    require(block.number > endBlock);\r\n    _;\r\n  }\r\n\r\n  function setEndBlock(uint256 _endBlock) onlyOwner {\r\n    endBlock = _endBlock;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract DemeterToken is MintableToken, TimeBlockedToken {\r\n  string public name = \"Demeter\";\r\n  string public symbol = \"DMT\";\r\n  uint256 public decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whiteListedInvestor\",\"type\":\"address\"},{\"name\":\"referredInvestor\",\"type\":\"address\"}],\"name\":\"addToReferrals\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusReferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whiteListedInvestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referredInvestor\",\"type\":\"address\"}],\"name\":\"ReferredInvestorAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorWhiteListAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"DemeterCrowdsaleInstance","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e28bd98d72c54faa06f2e1ca8a6468191f8fe7a215c2b8e7d1a685eb15c3410"}]}