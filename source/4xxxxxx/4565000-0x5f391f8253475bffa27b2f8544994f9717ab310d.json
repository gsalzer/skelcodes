{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ClaimableTokens is Ownable {\r\n\r\n    address public claimedTokensWallet;\r\n\r\n    function ClaimableTokens(address targetWallet) {\r\n        claimedTokensWallet = targetWallet;\r\n    }\r\n\r\n    function claimTokens(address tokenAddress) public onlyOwner {\r\n        require(tokenAddress != 0x0);\r\n        ERC20 claimedToken = ERC20(tokenAddress);\r\n        uint balance = claimedToken.balanceOf(this);\r\n        claimedToken.transfer(claimedTokensWallet, balance);\r\n    }\r\n}\r\n\r\ncontract CromToken is Ownable, ERC20, ClaimableTokens {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"CROM Token\";\r\n    string public constant symbol = \"CROM\";\r\n    uint8 public constant decimals = 0;\r\n    uint256 public constant INITIAL_SUPPLY = 10 ** 7;\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function CromToken() Ownable() ClaimableTokens(msg.sender) {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(to != 0x0);\r\n        require(balances[msg.sender] >= value);\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        allowed[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public constant returns (uint256) {\r\n        return balances[who];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        require(to != 0x0);\r\n        require(balances[from] >= value);\r\n        require(value <= allowed[from][msg.sender]);\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        Transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CromIco is Ownable, ClaimableTokens {\r\n    using SafeMath for uint256;\r\n\r\n    CromToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint public preStartTime;\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    // address where funds are collected\r\n    address public targetWallet;\r\n    bool public targetWalletVerified;\r\n\r\n    // caps definitions\r\n    uint256 public constant SOFT_CAP = 8000 ether;\r\n    uint256 public constant HARD_CAP = 56000 ether;\r\n\r\n    // token price\r\n    uint256 public constant TOKEN_PRICE = 10 finney;\r\n\r\n    uint public constant BONUS_BATCH = 2 * 10 ** 6;\r\n    uint public constant BONUS_PERCENTAGE = 25;\r\n    uint256 public constant MINIMAL_PRE_ICO_INVESTMENT = 10 ether;\r\n\r\n    // ICO duration\r\n    uint public constant PRE_DURATION = 14 days;\r\n    uint public constant DURATION = 14 days;\r\n\r\n    // contributions per individual\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // wallets allowed to take part in the pre ico\r\n    mapping (address => bool) public preIcoMembers;\r\n\r\n    // total amount of funds raised\r\n    uint256 public amountRaised;\r\n\r\n    uint256 public tokensSold;\r\n\r\n    bool public paused;\r\n\r\n    enum Stages {\r\n        WalletUnverified,\r\n        BeforeIco,\r\n        Payable,\r\n        AfterIco\r\n    }\r\n\r\n    enum PayableStages {\r\n        PreIco,\r\n        PublicIco\r\n    }\r\n\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    // Constructor\r\n    function CromIco(address tokenAddress, address beneficiaryWallet) Ownable() ClaimableTokens(beneficiaryWallet) {\r\n        token = CromToken(tokenAddress);\r\n        preStartTime = 1510920000;\r\n        startTime = preStartTime + PRE_DURATION;\r\n        endTime = startTime + DURATION;\r\n        targetWallet = beneficiaryWallet;\r\n        targetWalletVerified = false;\r\n        paused = false;\r\n    }\r\n\r\n    modifier atStage(Stages stage) {\r\n        require(stage == getCurrentStage());\r\n        _;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable atStage(Stages.Payable) {\r\n        buyTokens();\r\n    }\r\n\r\n  // low level token purchase function\r\n    function buyTokens() internal {\r\n        require(msg.sender != 0x0);\r\n        require(msg.value > 0);\r\n        require(!paused);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be transferred\r\n        uint256 tokens = calculateTokensAmount(weiAmount);\r\n        require(tokens > 0);\r\n        require(token.balanceOf(this) >= tokens);\r\n\r\n        if (PayableStages.PreIco == getPayableStage()) {\r\n            require(preIcoMembers[msg.sender]);\r\n            require(weiAmount.add(balanceOf[msg.sender]) >= MINIMAL_PRE_ICO_INVESTMENT);\r\n            require(tokensSold.add(tokens) <= BONUS_BATCH);\r\n        }\r\n\r\n        amountRaised = amountRaised.add(weiAmount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(weiAmount);\r\n        tokensSold = tokensSold.add(tokens);\r\n        token.transfer(msg.sender, tokens);\r\n\r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n    }\r\n\r\n    function verifyTargetWallet() public atStage(Stages.WalletUnverified) {\r\n        require(msg.sender == targetWallet);\r\n        targetWalletVerified = true;\r\n    }\r\n\r\n    // add a list of wallets to be allowed to take part in pre ico\r\n    function addPreIcoMembers(address[] members) public onlyOwner {\r\n        for (uint i = 0; i < members.length; i++) {\r\n            preIcoMembers[members[i]] = true;\r\n        }\r\n    }\r\n\r\n    // remove a list of wallets to be allowed to take part in pre ico\r\n    function removePreIcoMembers(address[] members) public onlyOwner {\r\n        for (uint i = 0; i < members.length; i++) {\r\n            preIcoMembers[members[i]] = false;\r\n        }\r\n    }\r\n\r\n    // @return true if the ICO is in pre ICO phase\r\n    function isPreIcoActive() public constant returns (bool) {\r\n        bool isPayable = Stages.Payable == getCurrentStage();\r\n        bool isPreIco = PayableStages.PreIco == getPayableStage();\r\n        return isPayable && isPreIco;\r\n    }\r\n\r\n    // @return true if the public ICO is in progress\r\n    function isPublicIcoActive() public constant returns (bool) {\r\n        bool isPayable = Stages.Payable == getCurrentStage();\r\n        bool isPublic = PayableStages.PublicIco == getPayableStage();\r\n        return isPayable && isPublic;\r\n    }\r\n\r\n    // @return true if ICO has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return Stages.AfterIco == getCurrentStage();\r\n    }\r\n\r\n    // @return true if the soft cap has been reached\r\n    function softCapReached() public constant returns (bool) {\r\n        return amountRaised >= SOFT_CAP;\r\n    }\r\n\r\n    // withdraw the contributed funds if the ICO has\r\n    // ended and the goal has not been reached\r\n    function withdrawFunds() public atStage(Stages.AfterIco) returns(bool) {\r\n        require(!softCapReached());\r\n        require(balanceOf[msg.sender] > 0);\r\n\r\n        uint256 balance = balanceOf[msg.sender];\r\n\r\n        balanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(balance);\r\n        return true;\r\n    }\r\n\r\n    // transfer the raised funds to the target wallet if\r\n    // the ICO is over and the goal has been reached\r\n    function finalizeIco() public onlyOwner atStage(Stages.AfterIco) {\r\n        require(softCapReached());\r\n        targetWallet.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawUnsoldTokens() public onlyOwner atStage(Stages.AfterIco) {\r\n        token.transfer(targetWallet, token.balanceOf(this));\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        require(!paused);\r\n        paused = true;\r\n    }\r\n\r\n    function resume() public onlyOwner {\r\n        require(paused);\r\n        paused = false;\r\n    }\r\n\r\n    function changeTargetWallet(address wallet) public onlyOwner {\r\n        targetWallet = wallet;\r\n        targetWalletVerified = false;\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 funds) internal returns (uint256) {\r\n        uint256 tokens = funds.div(TOKEN_PRICE);\r\n        if (tokensSold < BONUS_BATCH) {\r\n            if (tokensSold.add(tokens) > BONUS_BATCH) {\r\n                uint256 bonusBaseTokens = BONUS_BATCH.mul(100).div(125).sub(tokensSold);\r\n                tokens = tokens.add(bonusBaseTokens.mul(BONUS_PERCENTAGE).div(100));\r\n            } else {\r\n                tokens = tokens.mul(BONUS_PERCENTAGE + 100).div(100);\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    function getCurrentStage() internal constant returns (Stages) {\r\n        if (!targetWalletVerified) {\r\n            return Stages.WalletUnverified;\r\n        } else if (now < preStartTime) {\r\n            return Stages.BeforeIco;\r\n        } else if (now < endTime && amountRaised < HARD_CAP) {\r\n            return Stages.Payable;\r\n        } else {\r\n            return Stages.AfterIco;\r\n        }\r\n    }\r\n\r\n    function getPayableStage() internal constant returns (PayableStages) {\r\n        if (now < startTime) {\r\n            return PayableStages.PreIco;\r\n        } else {\r\n            return PayableStages.PublicIco;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verifyTargetWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"removePreIcoMembers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimedTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"changeTargetWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreIcoActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preIcoMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_BATCH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPublicIcoActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMAL_PRE_ICO_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetWalletVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"addPreIcoMembers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"beneficiaryWallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CromIco","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff4385c58cc0aa2adb56e05b50fc9f7e7b213511000000000000000000000000a4bfe38260be461f17ef17b29df8c32eb4d33043","Library":"","SwarmSource":"bzzr://8451778e6aa13cff26336ec81923952843a810640a712e0d71fde13abecdc482"}]}