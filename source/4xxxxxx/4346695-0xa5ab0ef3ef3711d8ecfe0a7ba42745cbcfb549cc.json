{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.10;\r\n\r\n/*************************************************************************\r\n * import \"./ITokenPool.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./ERC20StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./IERC20Token.sol\" : start\r\n *************************************************************************/\r\n\r\n/**@dev ERC20 compliant token interface. \r\nhttps://theethereum.wiki/w/index.php/ERC20_Token_Standard \r\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md */\r\ncontract IERC20Token {\r\n\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external    \r\n    function name() public constant returns (string _name) { _name; }\r\n    function symbol() public constant returns (string _symbol) { _symbol; }\r\n    function decimals() public constant returns (uint8 _decimals) { _decimals; }\r\n    \r\n    function totalSupply() constant returns (uint total) {total;}\r\n    function balanceOf(address _owner) constant returns (uint balance) {_owner; balance;}    \r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {_owner; _spender; remaining;}\r\n\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n    \r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n/*************************************************************************\r\n * import \"./IERC20Token.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../common/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n/**dev Utility methods for overflow-proof arithmetic operations \r\n*/\r\ncontract SafeMath {\r\n\r\n    /**dev Returns the sum of a and b. Throws an exception if it exceeds uint256 limits*/\r\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {        \r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**dev Returns the difference of a and b. Throws an exception if a is less than b*/\r\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    /**dev Returns the product of a and b. Throws an exception if it exceeds uint256 limits*/\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0) || (z / x == y));\r\n        return z;\r\n    }\r\n\r\n    function safeDiv(uint256 x, uint256 y) internal returns (uint256) {\r\n        assert(y != 0);\r\n        return x / y;\r\n    }\r\n}/*************************************************************************\r\n * import \"../common/SafeMath.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev Standard ERC20 compliant token implementation */\r\ncontract ERC20StandardToken is IERC20Token, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    //tokens already issued\r\n    uint256 tokensIssued;\r\n    //balances for each account\r\n    mapping (address => uint256) balances;\r\n    //one account approves the transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function ERC20StandardToken() {\r\n     \r\n    }    \r\n\r\n    //\r\n    //IERC20Token implementation\r\n    // \r\n\r\n    function totalSupply() constant returns (uint total) {\r\n        total = tokensIssued;\r\n    }\r\n \r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // safeSub inside doTransfer will throw if there is not enough balance.\r\n        doTransfer(msg.sender, _to, _value);        \r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n        \r\n        // Check for allowance is not needed because sub(_allowance, _value) will throw if this condition is not met\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);        \r\n        // safeSub inside doTransfer will throw if there is not enough balance.\r\n        doTransfer(_from, _to, _value);        \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }    \r\n\r\n    //\r\n    // Additional functions\r\n    //\r\n    /**@dev Gets real token amount in the smallest token units */\r\n    function getRealTokenAmount(uint256 tokens) constant returns (uint256) {\r\n        return tokens * (uint256(10) ** decimals);\r\n    }\r\n\r\n    //\r\n    // Internal functions\r\n    //    \r\n    \r\n    function doTransfer(address _from, address _to, uint256 _value) internal {\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n    }\r\n}/*************************************************************************\r\n * import \"./ERC20StandardToken.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev Token pool that manages its tokens by designating trustees */\r\ncontract ITokenPool {    \r\n\r\n    /**@dev Token to be managed */\r\n    ERC20StandardToken public token;\r\n\r\n    /**@dev Changes trustee state */\r\n    function setTrustee(address trustee, bool state);\r\n\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    /**@dev Returns remaining token amount */\r\n    function getTokenAmount() constant returns (uint256 tokens) {tokens;}\r\n}/*************************************************************************\r\n * import \"./ITokenPool.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../common/Manageable.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\ncontract Owned {\r\n    address public owner;        \r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**@dev allows transferring the contract ownership. */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"../common/Owned.sol\" : end\r\n *************************************************************************/\r\n\r\n///A token that have an owner and a list of managers that can perform some operations\r\n///Owner is always a manager too\r\ncontract Manageable is Owned {\r\n\r\n    event ManagerSet(address manager, bool state);\r\n\r\n    mapping (address => bool) public managers;\r\n\r\n    function Manageable() Owned() {\r\n        managers[owner] = true;\r\n    }\r\n\r\n    /**@dev Allows execution by managers only */\r\n    modifier managerOnly {\r\n        assert(managers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        super.transferOwnership(_newOwner);\r\n\r\n        managers[_newOwner] = true;\r\n        managers[msg.sender] = false;\r\n    }\r\n\r\n    function setManager(address manager, bool state) ownerOnly {\r\n        managers[manager] = state;\r\n        ManagerSet(manager, state);\r\n    }\r\n}/*************************************************************************\r\n * import \"../common/Manageable.sol\" : end\r\n *************************************************************************/\r\n\r\n/**@dev Token pool that manages its tokens by designating trustees */\r\ncontract TokenPool is Manageable, ITokenPool {    \r\n\r\n    function TokenPool(ERC20StandardToken _token) {\r\n        token = _token;\r\n    }\r\n\r\n    /**@dev ITokenPool override */\r\n    function setTrustee(address trustee, bool state) managerOnly {\r\n        if (state) {\r\n            token.approve(trustee, token.balanceOf(this));\r\n        } else {\r\n            token.approve(trustee, 0);\r\n        }\r\n    }\r\n\r\n    /**@dev ITokenPool override */\r\n    function getTokenAmount() constant returns (uint256 tokens) {\r\n        tokens = token.balanceOf(this);\r\n    }\r\n\r\n    /**@dev Returns all tokens back to owner */\r\n    function returnTokensTo(address to) managerOnly {\r\n        token.transfer(to, token.balanceOf(this));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"returnTokensTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trustee\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTrustee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ManagerSet\",\"type\":\"event\"}]","ContractName":"TokenPool","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098bde3a768401260e7025faf9947ef1b81295519","Library":"","SwarmSource":"bzzr://5952331acab9a43ca7c3e0106625337217ce0c6e19a167bd6325a4bcc0c4aec5"}]}