{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n// -------------------------------------------------\r\n// 0.4.13+commit.0fb4cb1a\r\n// [Assistive Reality ARX ERC20 client presold packages 25,50,100 ETH]\r\n// [https://aronline.io/icoinfo]\r\n// [Adapted from Ethereum standard crowdsale contract]\r\n// [Contact staff@aronline.io for any queries]\r\n// [Join us in changing the world]\r\n// [aronline.io]\r\n// -------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// -------------------------------------------------\r\n// Security reviews completed 26/09/17 [passed OK]\r\n// Functional reviews completed 26/09/17 [passed OK]\r\n// Final code revision and regression test cycle complete 26/09/17 [passed]\r\n// https://github.com/assistivereality/ico/blob/master/3.2packagesaletestsARXmainnet.txt\r\n// -------------------------------------------------\r\n// 3 packages offered in this contract:\r\n// 25 ETH  = 8500 ARX per 1 ETH\r\n// 50 ETH  = 10500 ARX per 1 ETH\r\n// 100 ETH = 12500 ARX per 1 ETH\r\n// -------------------------------------------------\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract safeMath {\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    safeAssert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b > 0);\r\n    uint256 c = a / b;\r\n    safeAssert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    safeAssert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    safeAssert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function safeAssert(bool assertion) internal {\r\n    if (!assertion) revert();\r\n  }\r\n}\r\n\r\ncontract ERC20Interface is owned, safeMath {\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\r\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ARXPackageSale is owned, safeMath {\r\n  // owner/admin & token reward\r\n  address        public admin                       = owner;      // admin address\r\n  ERC20Interface public tokenReward;                              // address of the token used as reward\r\n\r\n  // deployment variables for static supply sale\r\n  uint256 public initialARXSupplyInWei;                           // initial ARX to be sent to this packagesale contract (requires 6.25M ARX, sending 6.5M ARX)\r\n  uint256 public CurrentARXSupplyInWei;                           // tracking to see how many to return\r\n  uint256 public EthCapInWei;                                     // maximum amount to raise in Eth\r\n  uint256 public tokensPerEthPrice;                               // floating price based on package size purchased\r\n\r\n  // multi-sig addresses and price variable\r\n  address public beneficiaryMultisig;                             // beneficiaryMultiSig (founder group) live is 0x00F959866E977698D14a36eB332686304a4d6AbA\r\n  address public foundationMultisig;                              // foundationMultiSig (Assistive Reality foundation) live is\r\n\r\n  // uint256 values for min,max,caps,tracking\r\n  uint256 public amountRaisedInWei;                               // amount raised in Wei\r\n\r\n  // loop control, ICO startup and limiters\r\n  string  public CurrentStatus                     = \"\";          // current packagesale status\r\n  uint256 public fundingStartBlock;                               // packagesale start block#\r\n  uint256 public fundingEndBlock;                                 // packagesale end block#\r\n\r\n  bool    public ispackagesaleSetup                = false;       // boolean for packagesale setup\r\n  bool    public ispackagesaleClosed               = false;       // packagesale completion boolean\r\n\r\n  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  // default function, map admin\r\n  function ARXPackageSale() onlyOwner {\r\n    admin = msg.sender;\r\n    CurrentStatus = \"packagesale deployed to chain\";\r\n  }\r\n\r\n  // total number of tokens initially simplified from wei\r\n  function initialARXtokenSupply() constant returns (uint256 initialARXtokenSupplyCount) {\r\n      initialARXtokenSupplyCount = safeDiv(initialARXSupplyInWei,1 ether);\r\n  }\r\n\r\n  // current number of tokens simplified from wei\r\n  function currentARXtokenSupply() constant returns (uint256 currentARXtokenSupplyCount) {\r\n      currentARXtokenSupplyCount = safeDiv(CurrentARXSupplyInWei,1 ether);\r\n  }\r\n\r\n  // setup the packagesale parameters\r\n  function Setuppackagesale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\r\n      if ((msg.sender == admin)\r\n      && (!(ispackagesaleSetup))\r\n      && (!(beneficiaryMultisig > 0))){\r\n          // init addresses\r\n          tokenReward                             = ERC20Interface(0xb0D926c1BC3d78064F3e1075D5bD9A24F35Ae6C5);   // mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0\r\n          beneficiaryMultisig                     = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\r\n          foundationMultisig                      = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\r\n          tokensPerEthPrice                       = 8500;                                                         // 8500 ARX per Eth default flat (this is altered in BuyTokens function based on amount sent for package deals)\r\n\r\n          // funding targets\r\n          initialARXSupplyInWei                   = 6500000000000000000000000;                                    //   6,500,000 + 18 decimals = 6500000000000000000000000 //testnet 650k tokens = 65000000000000000000000\r\n          CurrentARXSupplyInWei                   = initialARXSupplyInWei;\r\n          EthCapInWei                             = 500000000000000000000;                                        //   500000000000000000000 =  500 Eth (max cap) - packages won't sell beyond this amount //testnet 5Eth 5000000000000000000\r\n          amountRaisedInWei                       = 0;\r\n\r\n          // update values\r\n          fundingStartBlock                       = _fundingStartBlock;\r\n          fundingEndBlock                         = _fundingEndBlock;\r\n\r\n          // configure packagesale\r\n          ispackagesaleSetup                      = true;\r\n          ispackagesaleClosed                     = false;\r\n          CurrentStatus                           = \"packagesale is activated\";\r\n\r\n          return \"packagesale is setup\";\r\n      } else if (msg.sender != admin) {\r\n          return \"not authorized\";\r\n      } else  {\r\n          return \"campaign cannot be changed\";\r\n      }\r\n    }\r\n\r\n    // default payable function when sending ether to this contract\r\n    function () payable {\r\n      require(msg.data.length == 0);\r\n      BuyARXtokens();\r\n    }\r\n\r\n    function BuyARXtokens() payable {\r\n      // 0. conditions (length, packagesale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\r\n      require(!(msg.value == 0)\r\n      && (ispackagesaleSetup)\r\n      && (block.number >= fundingStartBlock)\r\n      && (block.number <= fundingEndBlock)\r\n      && (amountRaisedInWei < EthCapInWei));\r\n\r\n      // 1. vars\r\n      uint256 rewardTransferAmount    = 0;\r\n\r\n      // 2. effects\r\n      if (msg.value==25000000000000000000) { // 25 ETH (18 decimals) = 8500 ARX per 1 ETH\r\n        tokensPerEthPrice=8500;\r\n      } else if (msg.value==50000000000000000000) { // 50 ETH (18 decimals) = 10500 ARX per 1 ETH\r\n        tokensPerEthPrice=10500;\r\n      } else if (msg.value==100000000000000000000) { // 100 ETH (18 decimals) = 12500 ARX per 1 ETH\r\n        tokensPerEthPrice=12500;\r\n      } else {\r\n        revert();\r\n      }\r\n\r\n      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\r\n      rewardTransferAmount            = safeMul(msg.value,tokensPerEthPrice);\r\n      CurrentARXSupplyInWei           = safeSub(CurrentARXSupplyInWei,rewardTransferAmount);\r\n\r\n      // 3. interaction\r\n      tokenReward.transfer(msg.sender, rewardTransferAmount);\r\n\r\n      // 4. events\r\n      Transfer(this, msg.sender, msg.value);\r\n      Buy(msg.sender, msg.value, rewardTransferAmount);\r\n    }\r\n\r\n    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\r\n      beneficiaryMultisig.transfer(_amount);\r\n    }\r\n\r\n    function updateStatus() onlyOwner {\r\n      require((block.number >= fundingEndBlock) || (amountRaisedInWei >= EthCapInWei));\r\n      CurrentStatus = \"packagesale is closed\";\r\n    }\r\n\r\n    function withdrawRemainingTokens(uint256 _amountToPull) onlyOwner {\r\n      require(block.number >= fundingEndBlock);\r\n      tokenReward.transfer(msg.sender, _amountToPull);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialARXtokenSupply\",\"outputs\":[{\"name\":\"initialARXtokenSupplyCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ispackagesaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"name\":\"Setuppackagesale\",\"outputs\":[{\"name\":\"response\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStatus\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyARXtokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToPull\",\"type\":\"uint256\"}],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beneficiaryMultiSigWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentARXtokenSupply\",\"outputs\":[{\"name\":\"currentARXtokenSupplyCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentARXSupplyInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialARXSupplyInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ispackagesaleSetup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ARX\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ARXPackageSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bfba9f9bc78f54a8ceb10cde9de13239d09d4bffc21b5ea4883bdc95559ea541"}]}