{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ERC20代币\r\ncontract Token {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    uint public decimals;\r\n    string public symbol;\r\n    string public name;\r\n}\r\n\r\ncontract EKTSale is SafeMath {\r\n    Token public token;\r\n    address public owner;\r\n    bool public stopped;\r\n\r\n    // 阶段\r\n    uint private constant BEFORE_SALE = 0;\r\n    uint private constant IN_SALE = 1;\r\n    uint private constant FINISHED = 2;\r\n\r\n    // ICO总代币数量\r\n    uint public totalQuantity =  1.5 * 10000 * 10000 * 100000000;\r\n\r\n    // 已卖出代币数量\r\n    uint public saleQuantity = 0;\r\n\r\n    // 收入的ETH数量\r\n    uint public ethQuantity = 0;\r\n\r\n    // 提现的代币数量\r\n    uint public withdrawQuantity = 0;\r\n\r\n    // ICO最小以太值\r\n    uint public minEth = 0.1 ether;\r\n\r\n    // ICO最大以太值\r\n    uint public maxEth = 1000 ether;\r\n\r\n    // 开始时间 2017-12-24 19:00:00\r\n    uint public openTime = 1514113200;\r\n    // 结束时间 2018-01-05 19:00:00\r\n    uint public closeTime = 1515150000;\r\n    // 价格\r\n    uint public price = 5696;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        assert(0x0 != _address);\r\n        _;\r\n    }\r\n\r\n    modifier validPeriod {\r\n        assert(now >= openTime && now < closeTime);\r\n        _;\r\n    }\r\n\r\n    modifier validQuantity {\r\n        assert(totalQuantity >= saleQuantity);\r\n        _;\r\n    }\r\n\r\n    modifier validEth {\r\n        assert(msg.value >= minEth && msg.value <= maxEth);\r\n        _;\r\n    }\r\n\r\n    event Buy(address indexed sender, uint eth, uint token);\r\n    event SaleStop();\r\n\r\n    function EKTSale(address _token)\r\n        public\r\n        validAddress(_token)\r\n    {\r\n        owner = msg.sender;\r\n        token = Token(_token);\r\n    }\r\n\r\n\r\n    function setPrice(uint _price)\r\n        public\r\n        isOwner\r\n        returns(bool)\r\n    {\r\n        assert(_price > 0);\r\n        price = _price;\r\n        return true;\r\n    }\r\n\r\n    function ()\r\n        public\r\n        payable\r\n    {\r\n        buy();\r\n    }\r\n\r\n    function buy()\r\n        public\r\n        payable\r\n        validAddress(token)      // 代币是否已设置\r\n        validEth        // 以太是否足够\r\n        validPeriod     // 是否在ICO期间\r\n        validQuantity   // 代币是否已卖完\r\n    {\r\n        uint eth = msg.value;\r\n\r\n        // 计算代币数量\r\n        uint quantity = eth * price / 10 ** 10;\r\n\r\n        // 是否超出剩余代币\r\n        uint leftQuantity = safeSub(totalQuantity, saleQuantity);\r\n        if (quantity > leftQuantity) {\r\n            quantity = leftQuantity;\r\n        }\r\n\r\n        saleQuantity = safeAdd(saleQuantity, quantity);\r\n        ethQuantity = safeAdd(ethQuantity, eth);\r\n\r\n        // 发送代币\r\n        require(token.transfer(msg.sender, quantity));\r\n\r\n        // 生成日志\r\n        Buy(msg.sender, eth, quantity);\r\n    }\r\n\r\n    function withdraw(uint amount)\r\n        public\r\n        isOwner\r\n    {\r\n        uint period = getPeriod();\r\n        require(period == FINISHED);\r\n\r\n        require(this.balance >= amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(uint amount)\r\n        public\r\n        isOwner\r\n    {\r\n        uint period = getPeriod();\r\n        require(period == FINISHED);\r\n\r\n        withdrawQuantity += safeAdd(withdrawQuantity, amount);\r\n        require(token.transfer(msg.sender, amount));\r\n    }\r\n\r\n    function getPeriod()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        if (stopped) {\r\n            return FINISHED;\r\n        }\r\n\r\n        if (now < openTime) {\r\n            return BEFORE_SALE;\r\n        }\r\n\r\n        if (totalQuantity == saleQuantity) {\r\n            return FINISHED;\r\n        }\r\n\r\n        if (now >= openTime && now < closeTime) {\r\n            return IN_SALE;\r\n        }\r\n\r\n        return FINISHED;\r\n    }\r\n\r\n    function stopSale()\r\n        public\r\n        isOwner\r\n        returns (bool)\r\n    {\r\n        stopped = true;\r\n        SaleStop();\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStop\",\"type\":\"event\"}]","ContractName":"EKTSale","CompilerVersion":"v0.4.20-nightly.2017.12.20+commit.efc198d5","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bab165df9455aa0f2aed1f2565520b91ddadb4c8","Library":"","SwarmSource":"bzzr://a012990201934b6d8bf3c6fc24b19ddc45f9dd3be16ab90924baf636587293e5"}]}