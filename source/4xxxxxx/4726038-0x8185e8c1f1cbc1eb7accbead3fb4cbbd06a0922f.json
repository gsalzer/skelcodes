{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) onlyOwner external {\r\n        require(_newOwner != address(0));\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Upgradable\r\n * @dev The contract can be deprecated and the owner can set - only once - another address to advertise\r\n * clients of the existence of another more recent contract.\r\n */\r\ncontract Upgradable is Ownable {\r\n\r\n    address public newAddress;\r\n\r\n    uint    public deprecatedSince;\r\n\r\n    string  public version;\r\n    string  public newVersion;\r\n    string  public reason;\r\n\r\n    event Deprecated(address newAddress, string newVersion, string reason);\r\n\r\n    /**\r\n     */\r\n    function Upgradable(string _version) public {\r\n        version = _version;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function setDeprecated(address _newAddress, string _newVersion, string _reason) external onlyOwner returns (bool success) {\r\n        require(!isDeprecated());\r\n        address _currentAddress = this;\r\n        require(_newAddress != _currentAddress);\r\n        deprecatedSince = block.timestamp;\r\n        newAddress = _newAddress;\r\n        newVersion = _newVersion;\r\n        reason = _reason;\r\n        Deprecated(_newAddress, _newVersion, _reason);\r\n        require(!Upgradable(_newAddress).isDeprecated());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice check if the contract is deprecated\r\n     */\r\n    function isDeprecated() public view returns (bool deprecated) {\r\n        return (deprecatedSince != 0);\r\n    }\r\n}\r\n\r\ncontract TokenERC20 {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\ncontract Managed is Upgradable {\r\n\r\n    function Managed (string _version) Upgradable (_version) internal { }\r\n\r\n    /**\r\n    *\r\n    */    \r\n    function redeemEthers(address _to, uint _amount) onlyOwner external returns (bool success) {\r\n        _to.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function redeemTokens(TokenERC20 _tokenAddress, address _to, uint _amount) onlyOwner external returns (bool success) {\r\n        return _tokenAddress.transfer(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Airdrop\r\n * @notice Generic contract for token airdrop, initially used for BTL token (0x2accaB9cb7a48c3E82286F0b2f8798D201F4eC3f)\r\n */\r\ncontract TokenGiveaway is Managed {\r\n    \r\n    address private tokenContract   = 0x2accaB9cb7a48c3E82286F0b2f8798D201F4eC3f;\r\n    address private donor           = 0xeA03Ee7110FAFb324d4a931979eF4578bffB6a00;\r\n    uint    private etherAmount     = 0.0005 ether;\r\n    uint    private tokenAmount     = 500;\r\n    uint    private decimals        = 10**18;\r\n    \r\n    mapping (address => mapping (address => bool)) private receivers;\r\n\r\n    event Airdropped(address indexed tokenContract, address receiver, uint tokenReceived);\r\n\r\n    function TokenGiveaway () Managed(\"1.0.0\") public { }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function transferBatch(address[] _addresses) onlyOwner external {\r\n        uint length = _addresses.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            if (isOpenFor(_addresses[i])) {\r\n                transferTokens(_addresses[i], tokenAmount * decimals);\r\n            }            \r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n    function transferTokens(address _receiver, uint _tokenAmount) private {\r\n        receivers[tokenContract][_receiver] = TokenERC20(tokenContract).transferFrom(donor, _receiver, _tokenAmount);\r\n    }\r\n        \r\n\r\n    /**\r\n     *\r\n     */\r\n    function isOpen() public view returns (bool open) {\r\n        return TokenERC20(tokenContract).allowance(donor, this) >= tokenAmount * decimals;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function isOpenFor(address _receiver) public view returns (bool open) {\r\n        return !receivers[tokenContract][_receiver] && isOpen();\r\n    }\r\n\r\n    /**\r\n     */\r\n    function () external payable {\r\n        require(msg.value >= etherAmount && isOpenFor(msg.sender));\r\n        transferTokens(msg.sender, tokenAmount * decimals);     \r\n    }\r\n\r\n    function updateTokenContract(address _tokenContract) external onlyOwner { tokenContract = _tokenContract; }\r\n\r\n    function updateDonor(address _donor) external onlyOwner { donor = _donor; }\r\n    \r\n    function updateEtherAmount(uint _etherAmount) external onlyOwner { etherAmount = _etherAmount; }\r\n    \r\n    function updateTokenAmount(uint _tokenAmount) external onlyOwner { tokenAmount = _tokenAmount; }\r\n    \r\n    function updateDecimals(uint _decimals) external onlyOwner { decimals = _decimals; }\r\n    \r\n    function updateEtherAndtokenAmount(uint _etherAmount, uint _tokenAmount) external onlyOwner {\r\n        etherAmount = _etherAmount;\r\n        tokenAmount = _tokenAmount;\r\n    }\r\n\r\n    function updateEtherAndtokenAmount(address _donor, uint _etherAmount, uint _tokenAmount) external onlyOwner {\r\n        donor = _donor;\r\n        etherAmount = _etherAmount;\r\n        tokenAmount = _tokenAmount;\r\n    }\r\n\r\n    function updateParameters(address _tokenContract, address _donor, uint _etherAmount, uint _tokenAmount, uint _decimals) external onlyOwner {\r\n        tokenContract = _tokenContract;\r\n        donor = _donor;\r\n        etherAmount = _etherAmount;\r\n        tokenAmount = _tokenAmount;\r\n        decimals = _decimals;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"updateEtherAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_donor\",\"type\":\"address\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donor\",\"type\":\"address\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateEtherAndtokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"setDeprecated\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"updateDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecatedSince\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"isOpenFor\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"updateDonor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateEtherAndtokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"name\":\"deprecated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemEthers\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reason\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenReceived\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Deprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenGiveaway","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b978e742772f98e14f3cb860c78e0471a27c0c30e430ecb862ebd17bfdefe59c"}]}