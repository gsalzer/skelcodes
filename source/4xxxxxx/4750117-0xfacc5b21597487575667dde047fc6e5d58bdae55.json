{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyInEmergency {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n}\r\n\r\ncontract Crowdsale is Pausable, PullPayment {\r\n\r\n    using SafeMath for uint;\r\n\r\n  \tstruct Backer {\r\n\t\tuint weiReceived; // Amount of Ether given\r\n\t\tuint256 coinSent;\r\n\t}\r\n\r\n\r\n\t/*\r\n\t* Constants\r\n\t*/\r\n\t/* Minimum number of DARFtoken to sell */\r\n\tuint public constant MIN_CAP = 100000 ether; // 100,000 DARFtokens\r\n\r\n\t/* Maximum number of DARFtoken to sell */\r\n\tuint public constant MAX_CAP = 8000000 ether; // 8,000,000 DARFtokens\r\n\r\n\t/* Minimum amount to BUY */\r\n\tuint public constant MIN_BUY_ETHER = 100 finney;\r\n\r\n    /*\r\n    If backer buy over 1 000 000 DARF (2000 Ether) he/she can clame to become an investor after signing additional agreement with KYC procedure and get 1% of project profit per every 1 000 000 DARF\r\n    */\r\n    struct Potential_Investor {\r\n\t\tuint weiReceived; // Amount of Ether given\r\n\t\tuint256 coinSent;\r\n        uint  profitshare; // Amount of Ether given\r\n    }\r\n    uint public constant MIN_INVEST_BUY = 2000 ether;\r\n\r\n    /* But only 49%  of profit can be distributed this way for bakers who will be first\r\n    */\r\n\r\n    uint  public  MAX_INVEST_SHARE = 4900; //  4900 from 10000 is 49%, becouse Soliditi stil don't support fixed\r\n\r\n/* Crowdsale period */\r\n\tuint private constant CROWDSALE_PERIOD = 62 days;\r\n\r\n\t/* Number of DARFtokens per Ether */\r\n\tuint public constant COIN_PER_ETHER = 500; // 500 DARF per ether\r\n\r\n\tuint public constant BIGSELL = COIN_PER_ETHER * 100 ether; // when 1 buy is over 50000 DARF (or 100 ether), in means additional bonus 30%\r\n\r\n\r\n\t/*\r\n\t* Variables\r\n\t*/\r\n\t/* DARFtoken contract reference */\r\n\tDARFtoken public coin;\r\n\r\n    /* Multisig contract that will receive the Ether */\r\n\taddress public multisigEther;\r\n\r\n\t/* Number of Ether received */\r\n\tuint public etherReceived;\r\n\r\n\t/* Number of DARFtokens sent to Ether contributors */\r\n\tuint public coinSentToEther;\r\n\r\n\t/* Number of DARFtokens sent to potential investors */\r\n\tuint public invcoinSentToEther;\r\n\r\n\r\n\t/* Crowdsale start time */\r\n\tuint public startTime;\r\n\r\n\t/* Crowdsale end time */\r\n\tuint public endTime;\r\n\r\n \t/* Is crowdsale still on going */\r\n\tbool public crowdsaleClosed;\r\n\r\n\t/* Backers Ether indexed by their Ethereum address */\r\n\tmapping(address => Backer) public backers;\r\n\r\n    mapping(address => Potential_Investor) public Potential_Investors; // list of potential investors\r\n\r\n\r\n\t/*\r\n\t* Modifiers\r\n\t*/\r\n\tmodifier minCapNotReached() {\r\n\t\trequire(!((now < endTime) || coinSentToEther >= MIN_CAP ));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier respectTimeFrame() {\r\n\t\trequire(!((now < startTime) || (now > endTime )));\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t * Event\r\n\t*/\r\n\tevent LogReceivedETH(address addr, uint value);\r\n\tevent LogCoinsEmited(address indexed from, uint amount);\r\n\tevent LogInvestshare(address indexed from, uint share);\r\n\r\n\t/*\r\n\t * Constructor\r\n\t*/\r\n\tfunction Crowdsale(address _DARFtokenAddress, address _to) {\r\n\t\tcoin = DARFtoken(_DARFtokenAddress);\r\n\t\tmultisigEther = _to;\r\n\t}\r\n\r\n\t/*\r\n\t * The fallback function corresponds to a donation in ETH\r\n\t */\r\n\tfunction() stopInEmergency respectTimeFrame payable {\r\n\t\treceiveETH(msg.sender);\r\n\t}\r\n\r\n\t/*\r\n\t * To call to start the crowdsale\r\n\t */\r\n\tfunction start() onlyOwner {\r\n\t\trequire (startTime == 0);\r\n\r\n\t\tstartTime = now ;\r\n\t\tendTime =  now + CROWDSALE_PERIOD;\r\n\t}\r\n\r\n\t/*\r\n\t *\tReceives a donation in Ether\r\n\t*/\r\n\tfunction receiveETH(address beneficiary) internal {\r\n\t\trequire(!(msg.value < MIN_BUY_ETHER)); // Don't accept funding under a predefined threshold\r\n        if (multisigEther ==  beneficiary) return ; // Don't pay tokens if team refund ethers\r\n    uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER));// Compute the number of DARFtoken to send\r\n\t\trequire(!(coinToSend.add(coinSentToEther) > MAX_CAP));\r\n\r\n        Backer backer = backers[beneficiary];\r\n\t\tcoin.transfer(beneficiary, coinToSend); // Transfer DARFtokens right now\r\n\r\n\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\r\n\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\r\n        multisigEther.send(msg.value);\r\n\r\n        if (backer.weiReceived > MIN_INVEST_BUY) {\r\n\r\n            // calculate profit share\r\n            uint share = msg.value.mul(10000).div(MIN_INVEST_BUY); // 100 = 1% from 10000\r\n\t\t\t// compare to all profit share will LT 49%\r\n\t\t\tLogInvestshare(msg.sender,share);\r\n\t\t\tif (MAX_INVEST_SHARE > share) {\r\n\r\n\t\t\t\tPotential_Investor potential_investor = Potential_Investors[beneficiary];\r\n\t\t\t\tpotential_investor.coinSent = backer.coinSent;\r\n\t\t\t\tpotential_investor.weiReceived = backer.weiReceived; // Update the total wei collected during the crowdfunding for this potential investor\r\n                // add share to potential_investor\r\n\t\t\t\tif (potential_investor.profitshare == 0 ) {\r\n\t\t\t\t\tuint startshare = potential_investor.weiReceived.mul(10000).div(MIN_INVEST_BUY);\r\n\t\t\t\t\tMAX_INVEST_SHARE = MAX_INVEST_SHARE.sub(startshare);\r\n\t\t\t\t\tpotential_investor.profitshare = potential_investor.profitshare.add(startshare);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tMAX_INVEST_SHARE = MAX_INVEST_SHARE.sub(share);\r\n\t\t\t\t\tpotential_investor.profitshare = potential_investor.profitshare.add(share);\r\n\t\t\t\t\tLogInvestshare(msg.sender,potential_investor.profitshare);\r\n\r\n\t\t\t\t}\r\n            }\r\n\r\n        }\r\n\r\n\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\r\n\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\r\n\r\n\t\t// Send events\r\n\t\tLogCoinsEmited(msg.sender ,coinToSend);\r\n\t\tLogReceivedETH(beneficiary, etherReceived);\r\n\t}\r\n\r\n\r\n\t/*\r\n\t *Compute the DARFtoken bonus according to the BUYment period\r\n\t */\r\n\tfunction bonus(uint256 amount) internal constant returns (uint256) {\r\n\t\t/*\r\n\t\t\t25%in the first 15 days\r\n\t\t\t20% 16 days 18 days\r\n\t\t\t15% 19 days 21 days\r\n\t\t\t10% 22 days 24 days\r\n\t\t\t5% from 25 days to 27 days\r\n\t\t\t0% from 28 days to 42 days\r\n\r\n\t\t\t*/\r\n\r\n\t\tif (amount >=  BIGSELL ) {\r\n\t\t\t\tamount = amount.add(amount.div(10).mul(3));\r\n\t\t}// bonus 30% to buying  over 50000 DARF\r\n\t\tif (now < startTime.add(16 days)) return amount.add(amount.div(4));   // bonus 25%\r\n\t\tif (now < startTime.add(18 days)) return amount.add(amount.div(5));   // bonus 20%\r\n\t\tif (now < startTime.add(22 days)) return amount.add(amount.div(20).mul(3));   // bonus 15%\r\n\t\tif (now < startTime.add(25 days)) return amount.add(amount.div(10));   // bonus 10%\r\n\t\tif (now < startTime.add(28 days)) return amount.add(amount.div(20));   // bonus 5\r\n\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n/*\r\n * Finalize the crowdsale, should be called after the refund period\r\n*/\r\n\tfunction finalize() onlyOwner public {\r\n\r\n\t\tif (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\r\n\t\t\trequire (coinSentToEther == MAX_CAP);\r\n\t\t}\r\n\r\n\t\trequire(!(coinSentToEther < MIN_CAP && now < endTime + 15 days)); // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\r\n\r\n\t\trequire(multisigEther.send(this.balance)); // Move the remaining Ether to the multisig address\r\n\r\n\t\tuint remains = coin.balanceOf(this);\r\n\t\t// No burn all of my precisiossss!\r\n\t\t// if (remains > 0) { // Burn the rest of DARFtokens\r\n\t\t//\trequire(coin.burn(remains)) ;\r\n\t\t//}\r\n\t\tcrowdsaleClosed = true;\r\n\t}\r\n\r\n\t/*\r\n\t* Failsafe drain\r\n\t*/\r\n\tfunction drain() onlyOwner {\r\n\t\trequire(owner.send(this.balance)) ;\r\n\t}\r\n\r\n\t/**\r\n\t * Allow to change the team multisig address in the case of emergency.\r\n\t */\r\n\tfunction setMultisig(address addr) onlyOwner public {\r\n\t\trequire(addr != address(0)) ;\r\n\t\tmultisigEther = addr;\r\n\t}\r\n\r\n\t/**\r\n\t * Manually back DARFtoken owner address.\r\n\t */\r\n\tfunction backDARFtokenOwner() onlyOwner public {\r\n\t\tcoin.transferOwnership(owner);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer remains to owner in case if impossible to do min BUY\r\n\t */\r\n\tfunction getRemainCoins() onlyOwner public {\r\n\t\tvar remains = MAX_CAP - coinSentToEther;\r\n\t\tuint minCoinsToSell = bonus(MIN_BUY_ETHER.mul(COIN_PER_ETHER) / (1 ether));\r\n\r\n\t\trequire(!(remains > minCoinsToSell));\r\n\r\n\t\tBacker backer = backers[owner];\r\n\t\tcoin.transfer(owner, remains); // Transfer DARFtokens right now\r\n\r\n\t\tbacker.coinSent = backer.coinSent.add(remains);\r\n\r\n\r\n        coinSentToEther = coinSentToEther.add(remains);\r\n\r\n\t\t// Send events\r\n\t\tLogCoinsEmited(this ,remains);\r\n\t\tLogReceivedETH(owner, etherReceived);\r\n\t}\r\n\r\n\r\n\t/*\r\n  \t * When MIN_CAP is not reach:\r\n  \t * 1) backer call the \"approve\" function of the DARFtoken token contract with the amount of all DARFtokens they got in order to be refund\r\n  \t * 2) backer call the \"refund\" function of the Crowdsale contract with the same amount of DARFtokens\r\n   \t * 3) backer call the \"withdrawPayments\" function of the Crowdsale contract to get a refund in ETH\r\n   \t */\r\n\tfunction refund(uint _value) minCapNotReached public {\r\n\r\n\t\trequire (_value == backers[msg.sender].coinSent) ; // compare value from backer balance\r\n\r\n\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\r\n\t\t// No burn all of my precisiossss!\r\n\t\t//require (coin.burn(_value)); // token sent for refund are burnt\r\n\r\n\t\tuint ETHToSend = backers[msg.sender].weiReceived;\r\n\t\tbackers[msg.sender].weiReceived=0;\r\n\r\n\t\tif (ETHToSend > 0) {\r\n\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract DARFtoken is StandardToken, Ownable {\r\n  string public constant name = \"DARFtoken\";\r\n  string public constant symbol = \"DAR\";\r\n  uint public constant decimals = 18;\r\n\r\n\r\n  // Constructor\r\n  function DARFtoken() {\r\n      totalSupply = 84000000 ether; // to make right number  84 000 000\r\n      balances[msg.sender] = totalSupply; // Send all tokens to owner\r\n  }\r\n\r\n  /**\r\n   *  Burn away the specified amount of DARFtoken tokens\r\n   */\r\n  function burn(uint _value) onlyOwner returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Transfer(msg.sender, 0x0, _value);\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BIGSELL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSentToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COIN_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Potential_Investors\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"coinSent\",\"type\":\"uint256\"},{\"name\":\"profitshare\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"coinSent\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BUY_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigEther\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRemainCoins\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invcoinSentToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVEST_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"backDARFtokenOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_DARFtokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCoinsEmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogInvestshare\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000339f0a4ebd50da09aa623e1d3e341c5b66851cf000000000000000000000000139031c1b0cccc87daaf7049127391a3a76bad5a","Library":"","SwarmSource":"bzzr://0c37aafdc4930b74fe3c1b16db6d532909a602e071ad9ac533c553561036ee28"}]}