{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyowner() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Mortal is Owned {\r\n    \r\n    function kill() {\r\n        if (msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract Lotthereum is Mortal {\r\n    uint blockPointer;\r\n    uint maxNumberOfBets;\r\n    uint minAmountByBet;\r\n    uint prize;\r\n    uint currentRound;\r\n    bytes32 private hash;\r\n\r\n    Round[] private rounds;\r\n    mapping (uint => Bet[]) bets;\r\n    mapping (address => uint) private balances;\r\n\r\n    struct Round {\r\n        uint id;\r\n        bool open;\r\n        uint maxNumberOfBets;\r\n        uint minAmountByBet;\r\n        uint blockNumber;\r\n        bytes32 blockHash;\r\n        uint8 number;\r\n        uint prize;\r\n    }\r\n\r\n    struct Bet {\r\n        uint id;\r\n        address origin;\r\n        uint amount;\r\n        uint8 bet;\r\n        uint round;\r\n    }\r\n\r\n    event RoundOpen(uint indexed id, uint maxNumberOfBets, uint minAmountByBet);\r\n    event RoundClose(uint indexed id, uint8 number, uint blockNumber, bytes32 blockHash);\r\n    event MaxNumberOfBetsChanged(uint maxNumberOfBets);\r\n    event MinAmountByBetChanged(uint minAmountByBet);\r\n    event BetPlaced(address indexed origin, uint roundId, uint betId);\r\n    event RoundWinner(address indexed winnerAddress, uint amount);\r\n\r\n    function Lotthereum(uint _blockPointer, uint _maxNumberOfBets, uint _minAmountByBet, uint _prize, bytes32 _hash) {\r\n        blockPointer = _blockPointer;\r\n        maxNumberOfBets = _maxNumberOfBets;\r\n        minAmountByBet = _minAmountByBet;\r\n        prize = _prize;\r\n        hash = _hash;\r\n        currentRound = createRound();\r\n    }\r\n\r\n    function createRound() internal returns (uint id) {\r\n        id = rounds.length;\r\n        rounds.length += 1;\r\n        rounds[id].id = id;\r\n        rounds[id].open = false;\r\n        rounds[id].maxNumberOfBets = maxNumberOfBets;\r\n        rounds[id].minAmountByBet = minAmountByBet;\r\n        rounds[id].prize = prize;\r\n        rounds[id].blockNumber = 0;\r\n        rounds[id].blockHash = hash;\r\n        rounds[id].open = true;\r\n        RoundOpen(id, maxNumberOfBets, minAmountByBet);\r\n    }\r\n\r\n    function payout() internal {\r\n        for (uint i = 0; i < bets[currentRound].length; i++) {\r\n            if (bets[currentRound][i].bet == rounds[currentRound].number) {\r\n                balances[bets[currentRound][i].origin] += rounds[currentRound].prize;\r\n                RoundWinner(bets[currentRound][i].origin, rounds[currentRound].prize);\r\n            }\r\n        }\r\n    }\r\n\r\n    function closeRound() constant internal {\r\n        rounds[currentRound].open = false;\r\n        rounds[currentRound].blockHash = getBlockHash(blockPointer);\r\n        rounds[currentRound].number = getNumber(rounds[currentRound].blockHash);\r\n        payout();\r\n        RoundClose(currentRound, rounds[currentRound].number, rounds[currentRound].blockNumber, rounds[currentRound].blockHash);\r\n        currentRound = createRound();\r\n    }\r\n\r\n    function getBlockHash(uint i) constant returns (bytes32 blockHash) {\r\n        if (i > 256) {\r\n            i = 256;\r\n        }\r\n        uint blockNumber = block.number - i;\r\n        blockHash = block.blockhash(blockNumber);\r\n    }\r\n\r\n    function getNumber(bytes32 _a) constant returns (uint8) {\r\n        uint8 _b = 1;\r\n        uint8 mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = _a.length - 1; i >= 0; i--) {\r\n            if ((_a[i] >= 48) && (_a[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint8(_a[i]) - 48;\r\n                return mint;\r\n            } else if (_a[i] == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function bet(uint8 bet) public payable returns (bool) {\r\n        if (!rounds[currentRound].open) {\r\n            return false;\r\n        }\r\n\r\n        if (msg.value < rounds[currentRound].minAmountByBet) {\r\n            return false;\r\n        }\r\n\r\n        uint id = bets[currentRound].length;\r\n        bets[currentRound].length += 1;\r\n        bets[currentRound][id].id = id;\r\n        bets[currentRound][id].round = currentRound;\r\n        bets[currentRound][id].bet = bet;\r\n        bets[currentRound][id].origin = msg.sender;\r\n        bets[currentRound][id].amount = msg.value;\r\n        BetPlaced(msg.sender, currentRound, id);\r\n\r\n        if (bets[currentRound].length == rounds[currentRound].maxNumberOfBets) {\r\n            closeRound();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw() public returns (uint) {\r\n        uint amount = getBalance();\r\n        if (amount > 0) {\r\n            balances[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBalance() constant returns (uint) {\r\n        uint amount = balances[msg.sender];\r\n        if ((amount > 0) && (amount < this.balance)) {\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getCurrentRoundId() constant returns(uint) {\r\n        return currentRound;\r\n    }\r\n\r\n    function getRoundOpen(uint id) constant returns(bool) {\r\n        return rounds[id].open;\r\n    }\r\n\r\n    function getRoundMaxNumberOfBets(uint id) constant returns(uint) {\r\n        return rounds[id].maxNumberOfBets;\r\n    }\r\n\r\n    function getRoundMinAmountByBet(uint id) constant returns(uint) {\r\n        return rounds[id].minAmountByBet;\r\n    }\r\n\r\n    function getRoundPrize(uint id) constant returns(uint) {\r\n        return rounds[id].prize;\r\n    }\r\n\r\n    function getRoundNumberOfBets(uint id) constant returns(uint) {\r\n        return bets[id].length;\r\n    }\r\n\r\n    function getRoundBetOrigin(uint roundId, uint betId) constant returns(address) {\r\n        return bets[roundId][betId].origin;\r\n    }\r\n\r\n    function getRoundBetAmount(uint roundId, uint betId) constant returns(uint) {\r\n        return bets[roundId][betId].amount;\r\n    }\r\n\r\n    function getRoundBetNumber(uint roundId, uint betId) constant returns(uint) {\r\n        return bets[roundId][betId].bet;\r\n    }\r\n\r\n    function getRoundNumber(uint id) constant returns(uint8) {\r\n        return rounds[id].number;\r\n    }\r\n\r\n    function getRoundBlockNumber(uint id) constant returns(uint) {\r\n        return rounds[id].blockNumber;\r\n    }\r\n\r\n    function getBlockPointer() constant returns(uint) {\r\n        return blockPointer;\r\n    }\r\n\r\n    function () payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundMinAmountByBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"bytes32\"}],\"name\":\"getNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundMaxNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRoundNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetOrigin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint8\"}],\"name\":\"bet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_blockPointer\",\"type\":\"uint256\"},{\"name\":\"_maxNumberOfBets\",\"type\":\"uint256\"},{\"name\":\"_minAmountByBet\",\"type\":\"uint256\"},{\"name\":\"_prize\",\"type\":\"uint256\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxNumberOfBets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minAmountByBet\",\"type\":\"uint256\"}],\"name\":\"RoundOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"RoundClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxNumberOfBets\",\"type\":\"uint256\"}],\"name\":\"MaxNumberOfBetsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAmountByBet\",\"type\":\"uint256\"}],\"name\":\"MinAmountByBetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoundWinner\",\"type\":\"event\"}]","ContractName":"Lotthereum","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000de0b6b3a764000093036b147316017199338e191dbff124b5358520517f23a4b38db9769850f4ca","Library":"","SwarmSource":"bzzr://2981b54c8e3e8f8fb270e0042e51a3532ad031de61ee2ef796ccb0068c22cc9e"}]}