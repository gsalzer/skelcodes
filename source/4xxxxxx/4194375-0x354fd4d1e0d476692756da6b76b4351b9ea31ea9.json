{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract SafeMath {\r\n     function safeMul(uint a, uint b) internal returns (uint) {\r\n          uint c = a * b;\r\n          assert(a == 0 || c / a == b);\r\n          return c;\r\n     }\r\n\r\n     function safeSub(uint a, uint b) internal returns (uint) {\r\n          assert(b <= a);\r\n          return a - b;\r\n     }\r\n\r\n     function safeAdd(uint a, uint b) internal returns (uint) {\r\n          uint c = a + b;\r\n          assert(c>=a && c>=b);\r\n          return c;\r\n     }\r\n\r\n     function assert(bool assertion) internal {\r\n          if (!assertion) throw;\r\n     }\r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token is SafeMath {\r\n     // Functions:\r\n     /// @return total amount of tokens\r\n     function totalSupply() constant returns (uint256 supply) {}\r\n\r\n     /// @param _owner The address from which the balance will be retrieved\r\n     /// @return The balance\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n     /// @notice send `_value` token to `_to` from `msg.sender`\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     function transfer(address _to, uint256 _value) {}\r\n\r\n     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     /// @param _from The address of the sender\r\n     /// @param _to The address of the recipient\r\n     /// @param _value The amount of token to be transferred\r\n     /// @return Whether the transfer was successful or not\r\n     function transferFrom(address _from, address _to, uint256 _value){}\r\n\r\n     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @param _value The amount of wei to be approved for transfer\r\n     /// @return Whether the approval was successful or not\r\n     function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n     /// @param _owner The address of the account owning tokens\r\n     /// @param _spender The address of the account able to transfer the tokens\r\n     /// @return Amount of remaining tokens allowed to spent\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n     // Events:\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StdToken is Token {\r\n     // Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint public totalSupply = 0;\r\n\r\n     // Functions:\r\n     function transfer(address _to, uint256 _value) {\r\n          if((balances[msg.sender] < _value) || (balances[_to] + _value <= balances[_to])) {\r\n               throw;\r\n          }\r\n\r\n          balances[msg.sender] -= _value;\r\n          balances[_to] += _value;\r\n          Transfer(msg.sender, _to, _value);\r\n     }\r\n\r\n     function transferFrom(address _from, address _to, uint256 _value) {\r\n          if((balances[_from] < _value) || \r\n               (allowed[_from][msg.sender] < _value) || \r\n               (balances[_to] + _value <= balances[_to])) \r\n          {\r\n               throw;\r\n          }\r\n\r\n          balances[_to] += _value;\r\n          balances[_from] -= _value;\r\n          allowed[_from][msg.sender] -= _value;\r\n\r\n          Transfer(_from, _to, _value);\r\n     }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n\r\n          return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n\r\n     modifier onlyPayloadSize(uint _size) {\r\n          if(msg.data.length < _size + 4) {\r\n               throw;\r\n          }\r\n          _;\r\n     }\r\n}\r\n\r\ncontract MNTP is StdToken {\r\n/// Fields:\r\n     string public constant name = \"Goldmint MNT Prelaunch Token\";\r\n     string public constant symbol = \"MNTP\";\r\n     uint public constant decimals = 18;\r\n\r\n     address public creator = 0x0;\r\n     address public icoContractAddress = 0x0;\r\n     bool public lockTransfers = false;\r\n\r\n     // 10 mln\r\n     uint public constant TOTAL_TOKEN_SUPPLY = 10000000 * (1 ether / 1 wei);\r\n\r\n/// Modifiers:\r\n     modifier onlyCreator() { if(msg.sender != creator) throw; _; }\r\n     modifier byCreatorOrIcoContract() { if((msg.sender != creator) && (msg.sender != icoContractAddress)) throw; _; }\r\n\r\n     function setCreator(address _creator) onlyCreator {\r\n          creator = _creator;\r\n     }\r\n\r\n/// Setters/Getters\r\n     function setIcoContractAddress(address _icoContractAddress) onlyCreator {\r\n          icoContractAddress = _icoContractAddress;\r\n     }\r\n\r\n/// Functions:\r\n     /// @dev Constructor\r\n     function MNTP() {\r\n          creator = msg.sender;\r\n\r\n          // 10 mln tokens total\r\n          assert(TOTAL_TOKEN_SUPPLY == (10000000 * (1 ether / 1 wei)));\r\n     }\r\n\r\n     /// @dev Override\r\n     function transfer(address _to, uint256 _value) public {\r\n          if(lockTransfers){\r\n               throw;\r\n          }\r\n          super.transfer(_to,_value);\r\n     }\r\n\r\n     /// @dev Override\r\n     function transferFrom(address _from, address _to, uint256 _value)public{\r\n          if(lockTransfers){\r\n               throw;\r\n          }\r\n          super.transferFrom(_from,_to,_value);\r\n     }\r\n\r\n     function issueTokens(address _who, uint _tokens) byCreatorOrIcoContract {\r\n          if((totalSupply + _tokens) > TOTAL_TOKEN_SUPPLY){\r\n               throw;\r\n          }\r\n\r\n          balances[_who] += _tokens;\r\n          totalSupply += _tokens;\r\n     }\r\n\r\n     function burnTokens(address _who, uint _tokens) byCreatorOrIcoContract {\r\n          balances[_who] = safeSub(balances[_who], _tokens);\r\n          totalSupply = safeSub(totalSupply, _tokens);\r\n     }\r\n\r\n     function lockTransfer(bool _lock) byCreatorOrIcoContract {\r\n          lockTransfers = _lock;\r\n     }\r\n\r\n     // Do not allow to send money directly to this contract\r\n     function() {\r\n          throw;\r\n     }\r\n}\r\n\r\n// This contract will hold all tokens that were unsold during ICO\r\n// (Goldmint should be able to withdraw them and sold only 1 year post-ICO)\r\ncontract GoldmintUnsold is SafeMath {\r\n     address public creator;\r\n     address public teamAccountAddress;\r\n     address public icoContractAddress;\r\n     uint64 public icoIsFinishedDate;\r\n\r\n     MNTP public mntToken;\r\n\r\n     function GoldmintUnsold(address _teamAccountAddress,address _mntTokenAddress){\r\n          creator = msg.sender;\r\n          teamAccountAddress = _teamAccountAddress;\r\n\r\n          mntToken = MNTP(_mntTokenAddress);          \r\n     }\r\n\r\n/// Setters/Getters\r\n     function setIcoContractAddress(address _icoContractAddress) {\r\n          if(msg.sender!=creator){\r\n               throw;\r\n          }\r\n\r\n          icoContractAddress = _icoContractAddress;\r\n     }\r\n\r\n     function icoIsFinished() public {\r\n          // only by Goldmint contract \r\n          if(msg.sender!=icoContractAddress){\r\n               throw;\r\n          }\r\n\r\n          icoIsFinishedDate = uint64(now);\r\n     }\r\n\r\n     // can be called by anyone...\r\n     function withdrawTokens() public {\r\n          // wait for 1 year!\r\n          uint64 oneYearPassed = icoIsFinishedDate + 365 days;  \r\n          if(uint(now) < oneYearPassed) throw;\r\n\r\n          // transfer all tokens from this contract to the teamAccountAddress\r\n          uint total = mntToken.balanceOf(this);\r\n          mntToken.transfer(teamAccountAddress,total);\r\n     }\r\n\r\n     // Default fallback function\r\n     function() payable {\r\n          throw;\r\n     }\r\n}\r\n\r\ncontract FoundersVesting is SafeMath {\r\n     address public creator;\r\n     address public teamAccountAddress;\r\n     uint64 public lastWithdrawTime;\r\n\r\n     uint public withdrawsCount = 0;\r\n     uint public amountToSend = 0;\r\n\r\n     MNTP public mntToken;\r\n\r\n     function FoundersVesting(address _teamAccountAddress,address _mntTokenAddress){\r\n          creator = msg.sender;\r\n          teamAccountAddress = _teamAccountAddress;\r\n          lastWithdrawTime = uint64(now);\r\n\r\n          mntToken = MNTP(_mntTokenAddress);          \r\n     }\r\n\r\n     // can be called by anyone...\r\n     function withdrawTokens() public {\r\n          // 1 - wait for next month!\r\n          uint64 oneMonth = lastWithdrawTime + 30 days;  \r\n          if(uint(now) < oneMonth) throw;\r\n\r\n          // 2 - calculate amount (only first time)\r\n          if(withdrawsCount==0){\r\n               amountToSend = mntToken.balanceOf(this) / 10;\r\n          }\r\n\r\n          // 3 - send 1/10th\r\n          assert(amountToSend!=0);\r\n          mntToken.transfer(teamAccountAddress,amountToSend);\r\n\r\n          withdrawsCount++;\r\n          lastWithdrawTime = uint64(now);\r\n     }\r\n\r\n     // Default fallback function\r\n     function() payable {\r\n          throw;\r\n     }\r\n}\r\n\r\ncontract Goldmint is SafeMath {\r\n     address public creator = 0x0;\r\n     address public tokenManager = 0x0;\r\n     address public multisigAddress = 0x0;\r\n     address public otherCurrenciesChecker = 0x0;\r\n\r\n     uint64 public icoStartedTime = 0;\r\n\r\n     MNTP public mntToken; \r\n     GoldmintUnsold public unsoldContract;\r\n\r\n     // These can be changed before ICO start ($7USD/MNTP)\r\n     uint constant STD_PRICE_USD_PER_1000_TOKENS = 7000;\r\n     // coinmarketcap.com 14.08.2017\r\n     uint constant ETH_PRICE_IN_USD = 300;\r\n     // price changes from block to block\r\n     //uint public constant SINGLE_BLOCK_LEN = 700000;\r\n\r\n     uint public constant SINGLE_BLOCK_LEN = 100;\r\n\r\n///////     \r\n     // 1 000 000 tokens\r\n     uint public constant BONUS_REWARD = 1000000 * (1 ether/ 1 wei);\r\n     // 2 000 000 tokens\r\n     uint public constant FOUNDERS_REWARD = 2000000 * (1 ether / 1 wei);\r\n     // 7 000 000 we sell only this amount of tokens during the ICO\r\n     //uint public constant ICO_TOKEN_SUPPLY_LIMIT = 7000000 * (1 ether / 1 wei); \r\n     \r\n     uint public constant ICO_TOKEN_SUPPLY_LIMIT = 250 * (1 ether / 1 wei); \r\n\r\n     // this is total number of tokens sold during ICO\r\n     uint public icoTokensSold = 0;\r\n     // this is total number of tokens sent to GoldmintUnsold contract after ICO is finished\r\n     uint public icoTokensUnsold = 0;\r\n\r\n     // this is total number of tokens that were issued by a scripts\r\n     uint public issuedExternallyTokens = 0;\r\n\r\n     bool public foundersRewardsMinted = false;\r\n     bool public restTokensMoved = false;\r\n\r\n     // this is where FOUNDERS_REWARD will be allocated\r\n     address public foundersRewardsAccount = 0x0;\r\n\r\n     enum State{\r\n          Init,\r\n\r\n          ICORunning,\r\n          ICOPaused,\r\n         \r\n          ICOFinished\r\n     }\r\n     State public currentState = State.Init;\r\n\r\n/// Modifiers:\r\n     modifier onlyCreator() { if(msg.sender != creator) throw; _; }\r\n     modifier onlyTokenManager() { if(msg.sender != tokenManager) throw; _; }\r\n     modifier onlyOtherCurrenciesChecker() { if(msg.sender != otherCurrenciesChecker) throw; _; }\r\n\r\n     modifier onlyInState(State state){ if(state != currentState) throw; _; }\r\n\r\n/// Events:\r\n     event LogStateSwitch(State newState);\r\n     event LogBuy(address indexed owner, uint value);\r\n     event LogBurn(address indexed owner, uint value);\r\n     \r\n/// Functions:\r\n     /// @dev Constructor\r\n     function Goldmint(\r\n          address _multisigAddress,\r\n          address _tokenManager,\r\n          address _otherCurrenciesChecker,\r\n\r\n          address _mntTokenAddress,\r\n          address _unsoldContractAddress,\r\n          address _foundersVestingAddress)\r\n     {\r\n          creator = msg.sender;\r\n\r\n          multisigAddress = _multisigAddress;\r\n          tokenManager = _tokenManager;\r\n          otherCurrenciesChecker = _otherCurrenciesChecker; \r\n\r\n          mntToken = MNTP(_mntTokenAddress);\r\n          unsoldContract = GoldmintUnsold(_unsoldContractAddress);\r\n\r\n          // slight rename\r\n          foundersRewardsAccount = _foundersVestingAddress;\r\n     }\r\n\r\n     /// @dev This function is automatically called when ICO is started\r\n     /// WARNING: can be called multiple times!\r\n     function startICO() internal onlyCreator {\r\n          mintFoundersRewards(foundersRewardsAccount);\r\n\r\n          mntToken.lockTransfer(true);\r\n\r\n          if(icoStartedTime==0){\r\n               icoStartedTime = uint64(now);\r\n          }\r\n     }\r\n\r\n     function pauseICO() internal onlyCreator {\r\n          mntToken.lockTransfer(false);\r\n     }\r\n\r\n     /// @dev This function is automatically called when ICO is finished \r\n     /// WARNING: can be called multiple times!\r\n     function finishICO() internal {\r\n          mntToken.lockTransfer(false);\r\n\r\n          if(!restTokensMoved){\r\n               restTokensMoved = true;\r\n\r\n               // move all unsold tokens to unsoldTokens contract\r\n               icoTokensUnsold = safeSub(ICO_TOKEN_SUPPLY_LIMIT,icoTokensSold);\r\n               if(icoTokensUnsold>0){\r\n                    mntToken.issueTokens(unsoldContract,icoTokensUnsold);\r\n                    unsoldContract.icoIsFinished();\r\n               }\r\n          }\r\n\r\n          // send all ETH to multisig\r\n          if(this.balance>0){\r\n               if(!multisigAddress.send(this.balance)) throw;\r\n          }\r\n     }\r\n\r\n     function mintFoundersRewards(address _whereToMint) internal onlyCreator {\r\n          if(!foundersRewardsMinted){\r\n               foundersRewardsMinted = true;\r\n               mntToken.issueTokens(_whereToMint,FOUNDERS_REWARD);\r\n          }\r\n     }\r\n\r\n/// Access methods:\r\n     function setTokenManager(address _new) public onlyTokenManager {\r\n          tokenManager = _new;\r\n     }\r\n\r\n     function setOtherCurrenciesChecker(address _new) public onlyOtherCurrenciesChecker {\r\n          otherCurrenciesChecker = _new;\r\n     }\r\n\r\n     function getTokensIcoSold() constant public returns (uint){\r\n          return icoTokensSold;\r\n     }\r\n\r\n     function getTotalIcoTokens() constant public returns (uint){\r\n          return ICO_TOKEN_SUPPLY_LIMIT;\r\n     }\r\n\r\n     function getMntTokenBalance(address _of) constant public returns (uint){\r\n          return mntToken.balanceOf(_of);\r\n     }\r\n\r\n     function getCurrentPrice()constant public returns (uint){\r\n          return getMntTokensPerEth(icoTokensSold);\r\n     }\r\n\r\n     function getBlockLength()constant public returns (uint){\r\n          return SINGLE_BLOCK_LEN;\r\n     }\r\n\r\n////\r\n     function isIcoFinished() public returns(bool){\r\n          if(icoStartedTime==0){return false;}          \r\n\r\n          // 1 - if time elapsed\r\n          uint64 oneMonth = icoStartedTime + 30 days;  \r\n          if(uint(now) > oneMonth){return true;}\r\n\r\n          // 2 - if all tokens are sold\r\n          if(icoTokensSold>=ICO_TOKEN_SUPPLY_LIMIT){\r\n               return true;\r\n          }\r\n\r\n          return false;\r\n     }\r\n\r\n     function setState(State _nextState) public {\r\n          // only creator can change state\r\n          // but in case ICOFinished -> anyone can do that after all time is elapsed\r\n          bool icoShouldBeFinished = isIcoFinished();\r\n          if((msg.sender!=creator) && !(icoShouldBeFinished && State.ICOFinished==_nextState)){\r\n               throw;\r\n          }\r\n\r\n          bool canSwitchState\r\n               =  (currentState == State.Init && _nextState == State.ICORunning)\r\n               || (currentState == State.ICORunning && _nextState == State.ICOPaused)\r\n               || (currentState == State.ICOPaused && _nextState == State.ICORunning)\r\n               || (currentState == State.ICORunning && _nextState == State.ICOFinished)\r\n               || (currentState == State.ICOFinished && _nextState == State.ICORunning);\r\n\r\n          if(!canSwitchState) throw;\r\n\r\n          currentState = _nextState;\r\n          LogStateSwitch(_nextState);\r\n\r\n          if(currentState==State.ICORunning){\r\n               startICO();\r\n          }else if(currentState==State.ICOFinished){\r\n               finishICO();\r\n          }else if(currentState==State.ICOPaused){\r\n               pauseICO();\r\n          }\r\n     }\r\n\r\n     function getMntTokensPerEth(uint tokensSold) public constant returns (uint){\r\n          // 10 buckets\r\n          uint priceIndex = (tokensSold / (1 ether/ 1 wei)) / SINGLE_BLOCK_LEN;\r\n          assert(priceIndex>=0 && (priceIndex<=9));\r\n          \r\n          uint8[10] memory discountPercents = [20,15,10,8,6,4,2,0,0,0];\r\n\r\n          // We have to multiply by '1 ether' to avoid float truncations\r\n          // Example: ($7000 * 100) / 120 = $5833.33333\r\n          uint pricePer1000tokensUsd = \r\n               ((STD_PRICE_USD_PER_1000_TOKENS * 100) * (1 ether / 1 wei)) / (100 + discountPercents[priceIndex]);\r\n\r\n          // Correct: 300000 / 5833.33333333 = 51.42857142\r\n          // We have to multiply by '1 ether' to avoid float truncations\r\n          uint mntPerEth = (ETH_PRICE_IN_USD * 1000 * (1 ether / 1 wei) * (1 ether / 1 wei)) / pricePer1000tokensUsd;\r\n          return mntPerEth;\r\n     }\r\n\r\n     function buyTokens(address _buyer) public payable onlyInState(State.ICORunning) {\r\n          if(msg.value == 0) throw;\r\n\r\n          // The price is selected based on current sold tokens.\r\n          // Price can 'overlap'. For example:\r\n          //   1. if currently we sold 699950 tokens (the price is 10% discount)\r\n          //   2. buyer buys 1000 tokens\r\n          //   3. the price of all 1000 tokens would be with 10% discount!!!\r\n          uint newTokens = (msg.value * getMntTokensPerEth(icoTokensSold)) / (1 ether / 1 wei);\r\n\r\n          issueTokensInternal(_buyer,newTokens);\r\n     }\r\n\r\n     /// @dev This is called by other currency processors to issue new tokens \r\n     function issueTokensFromOtherCurrency(address _to, uint _wei_count) onlyInState(State.ICORunning) public onlyOtherCurrenciesChecker {\r\n          if(_wei_count== 0) throw;\r\n          uint newTokens = (_wei_count * getMntTokensPerEth(icoTokensSold)) / (1 ether / 1 wei);\r\n          issueTokensInternal(_to,newTokens);\r\n     }\r\n\r\n     /// @dev This can be called to manually issue new tokens \r\n     /// from the bonus reward\r\n     function issueTokensExternal(address _to, uint _tokens) public onlyInState(State.ICOFinished) onlyTokenManager {\r\n          // can not issue more than BONUS_REWARD\r\n          if((issuedExternallyTokens + _tokens)>BONUS_REWARD){\r\n               throw;\r\n          }\r\n\r\n          mntToken.issueTokens(_to,_tokens);\r\n\r\n          issuedExternallyTokens = issuedExternallyTokens + _tokens;\r\n     }\r\n\r\n     function issueTokensInternal(address _to, uint _tokens) internal {\r\n          if((icoTokensSold + _tokens)>ICO_TOKEN_SUPPLY_LIMIT){\r\n               throw;\r\n          }\r\n\r\n          mntToken.issueTokens(_to,_tokens);\r\n\r\n          icoTokensSold+=_tokens;\r\n\r\n          LogBuy(_to,_tokens);\r\n     }\r\n\r\n     function burnTokens(address _from, uint _tokens) public onlyInState(State.ICOFinished) onlyTokenManager {\r\n          mntToken.burnTokens(_from,_tokens);\r\n\r\n          LogBurn(_from,_tokens);\r\n     }\r\n\r\n     // Default fallback function\r\n     function() payable {\r\n          // buyTokens -> issueTokensInternal\r\n          buyTokens(msg.sender);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContractAddress\",\"type\":\"address\"}],\"name\":\"setIcoContractAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoIsFinishedDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mntToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoIsFinished\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAccountAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAccountAddress\",\"type\":\"address\"},{\"name\":\"_mntTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"GoldmintUnsold","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000de9d8FAAD17a04aCa3f68286B837Ac48003D44510000000000000000000000001b3b1aa7b91bd483e6dcd3f7560494345d102550","Library":"","SwarmSource":"bzzr://100497066ba6d9233aca85c77b0004de175722ce9cd4e88eaa1f526b51283175"}]}