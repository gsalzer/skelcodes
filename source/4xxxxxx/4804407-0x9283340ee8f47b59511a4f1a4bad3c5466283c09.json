{"status":"1","message":"OK","result":[{"SourceCode":"contract RecurringLottery {\r\n    struct Round {\r\n        uint endBlock;\r\n        uint drawBlock;\r\n        Entry[] entries;\r\n        uint totalQuantity;\r\n        address winner;\r\n    }\r\n    struct Entry {\r\n        address buyer;\r\n        uint quantity;\r\n    }\r\n\r\n    uint constant public TICKET_PRICE = 1e15;\r\n\r\n    mapping(uint => Round) public rounds;\r\n    uint public round;\r\n    uint public duration;\r\n    mapping (address => uint) public balances;\r\n\r\n    // duration is in blocks. 1 day = ~5500 blocks\r\n    function RecurringLottery (uint _duration) public {\r\n        duration = _duration;\r\n        round = 1;\r\n        rounds[round].endBlock = block.number + duration;\r\n        rounds[round].drawBlock = block.number + duration + 5;\r\n    }\r\n\r\n    function buy () payable public {\r\n        require(msg.value % TICKET_PRICE == 0);\r\n\r\n        if (block.number > rounds[round].endBlock) {\r\n            round += 1;\r\n            rounds[round].endBlock = block.number + duration;\r\n            rounds[round].drawBlock = block.number + duration + 5;\r\n        }\r\n\r\n        uint quantity = msg.value / TICKET_PRICE;\r\n        Entry memory entry = Entry(msg.sender, quantity);\r\n        rounds[round].entries.push(entry);\r\n        rounds[round].totalQuantity += quantity;\r\n    }\r\n\r\n    function drawWinner (uint roundNumber) public {\r\n        Round storage drawing = rounds[roundNumber];\r\n        require(drawing.winner ==  address(0));\r\n        require(block.number > drawing.drawBlock);\r\n        require(drawing.entries.length > 0);\r\n\r\n        // pick winner\r\n        bytes32 rand = keccak256(\r\n            block.blockhash(drawing.drawBlock)\r\n        );\r\n        uint counter = uint(rand) % drawing.totalQuantity;\r\n        for (uint i=0; i < drawing.entries.length; i++) {\r\n            uint quantity = drawing.entries[i].quantity;\r\n            if (quantity > counter) {\r\n                drawing.winner = drawing.entries[i].buyer;\r\n                break;\r\n            }\r\n            else\r\n                counter -= quantity;\r\n        }\r\n        \r\n        balances[drawing.winner] += TICKET_PRICE * drawing.totalQuantity;\r\n    }\r\n\r\n    function withdraw () public {\r\n        uint amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function deleteRound (uint _round) public {\r\n        require(block.number > rounds[_round].drawBlock + 100);\r\n        require(rounds[_round].winner != address(0));\r\n        delete rounds[_round];\r\n    }\r\n\r\n    function () payable public {\r\n        buy();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"deleteRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"drawWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"endBlock\",\"type\":\"uint256\"},{\"name\":\"drawBlock\",\"type\":\"uint256\"},{\"name\":\"totalQuantity\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RecurringLottery","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000009664","Library":"","SwarmSource":"bzzr://c833d71208239dfa55050944645556e8951b886a350a2a8e5348b87dd8f88538"}]}