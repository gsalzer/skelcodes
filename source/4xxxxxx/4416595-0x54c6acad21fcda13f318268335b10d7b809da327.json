{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// implement safemath as a library\r\nlibrary SafeMath {\r\n\r\n  // We use `pure` bbecause it promises that the value for the function depends ONLY\r\n  // on the function arguments\r\n  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Administration {\r\n\r\n    address     public owner;\r\n    \r\n    mapping (address => bool) public moderators;\r\n    mapping (address => string) privilegeStatus;\r\n\r\n    event AddMod(address indexed _invoker, address indexed _newMod, bool indexed _modAdded);\r\n    event RemoveMod(address indexed _invoker, address indexed _removeMod, bool indexed _modRemoved);\r\n\r\n    function Administration() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        owner = _newOwner;\r\n        return true;\r\n        \r\n    }\r\n\r\n    function addModerator(address _newMod)\r\n        public\r\n        onlyOwner\r\n        returns (bool added)\r\n     {\r\n        require(_newMod != address(0x0));\r\n        moderators[_newMod] = true;\r\n        AddMod(msg.sender, _newMod, true);\r\n        return true;\r\n    }\r\n    \r\n    function removeModerator(address _removeMod)\r\n        public\r\n        onlyOwner\r\n        returns (bool removed)\r\n    {\r\n        require(_removeMod != address(0x0));\r\n        moderators[_removeMod] = false;\r\n        RemoveMod(msg.sender, _removeMod, true);\r\n        return true;\r\n    }\r\n\r\n    function getRoleStatus(address _addr)\r\n        public\r\n        view  // We use view as we promise to not change state, but are reading from a state variable\r\n        returns (string _role)\r\n    {\r\n        return privilegeStatus[_addr];\r\n    }\r\n}\r\n\r\ncontract CoinMarketAlert is Administration {\r\n    using SafeMath for uint256;\r\n\r\n    address[]   public      userAddresses;\r\n    uint256     public      totalSupply;\r\n    uint256     public      usersRegistered;\r\n    uint8       public      decimals;\r\n    string      public      name;\r\n    string      public      symbol;\r\n    bool        public      tokenTransfersFrozen;\r\n    bool        public      tokenMintingEnabled;\r\n    bool        public      contractLaunched;\r\n\r\n\r\n    struct AlertCreatorStruct {\r\n        address alertCreator;\r\n        uint256 alertsCreated;\r\n    }\r\n\r\n    AlertCreatorStruct[]   public      alertCreators;\r\n    \r\n    // Alert Creator Entered (Used to prevetnt duplicates in creator array)\r\n    mapping (address => bool) public userRegistered;\r\n    // Tracks approval\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    //[addr][balance]\r\n    mapping (address => uint256) public balances;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approve(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    event MintTokens(address indexed _minter, uint256 _amountMinted, bool indexed Minted);\r\n    event FreezeTransfers(address indexed _freezer, bool indexed _frozen);\r\n    event ThawTransfers(address indexed _thawer, bool indexed _thawed);\r\n    event TokenBurn(address indexed _burner, uint256 _amount, bool indexed _burned);\r\n    event EnableTokenMinting(bool Enabled);\r\n\r\n    function CoinMarketAlert()\r\n        public {\r\n        symbol = \"CMA\";\r\n        name = \"Coin Market Alert\";\r\n        decimals = 18;\r\n        // 50 Mil in wei\r\n        totalSupply = 50000000000000000000000000;\r\n        balances[msg.sender] = 50000000000000000000000000;\r\n        tokenTransfersFrozen = true;\r\n        tokenMintingEnabled = false;\r\n    }\r\n\r\n    /// @notice Used to launch start the contract\r\n    function launchContract()\r\n        public\r\n        onlyAdmin\r\n        returns (bool launched)\r\n    {\r\n        require(!contractLaunched);\r\n        tokenTransfersFrozen = false;\r\n        tokenMintingEnabled = true;\r\n        contractLaunched = true;\r\n        EnableTokenMinting(true);\r\n        return true;\r\n    }\r\n    \r\n    /// @dev keeps a list of addresses that are participating in the site\r\n    function registerUser(address _user) \r\n        private\r\n        returns (bool registered)\r\n    {\r\n        usersRegistered = usersRegistered.add(1);\r\n        AlertCreatorStruct memory acs;\r\n        acs.alertCreator = _user;\r\n        alertCreators.push(acs);\r\n        userAddresses.push(_user);\r\n        userRegistered[_user] = true;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Manual payout for site users\r\n    /// @param _user Ethereum address of the user\r\n    /// @param _amount The mount of CMA tokens in wei to send\r\n    function singlePayout(address _user, uint256 _amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool paid)\r\n    {\r\n        require(!tokenTransfersFrozen);\r\n        require(_amount > 0);\r\n        require(transferCheck(owner, _user, _amount));\r\n        if (!userRegistered[_user]) {\r\n            registerUser(_user);\r\n        }\r\n        balances[_user] = balances[_user].add(_amount);\r\n        balances[owner] = balances[owner].add(_amount);\r\n        Transfer(owner, _user, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev low-level minting function not accessible externally\r\n    function tokenMint(address _invoker, uint256 _amount) \r\n        private\r\n        returns (bool raised)\r\n    {\r\n        require(balances[owner].add(_amount) > balances[owner]);\r\n        require(balances[owner].add(_amount) > 0);\r\n        require(totalSupply.add(_amount) > 0);\r\n        require(totalSupply.add(_amount) > totalSupply);\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[owner] = balances[owner].add(_amount);\r\n        MintTokens(_invoker, _amount, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to mint tokens, only usable by the contract owner\r\n    /// @param _amount The amount of CMA tokens in wei to mint\r\n    function tokenFactory(uint256 _amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool success)\r\n    {\r\n        require(_amount > 0);\r\n        require(tokenMintingEnabled);\r\n        require(tokenMint(msg.sender, _amount));\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to burn tokens\r\n    /// @param _amount The amount of CMA tokens in wei to burn\r\n    function tokenBurn(uint256 _amount)\r\n        public\r\n        onlyAdmin\r\n        returns (bool burned)\r\n    {\r\n        require(_amount > 0);\r\n        require(_amount < totalSupply);\r\n        require(balances[owner] > _amount);\r\n        require(balances[owner].sub(_amount) >= 0);\r\n        require(totalSupply.sub(_amount) >= 0);\r\n        balances[owner] = balances[owner].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        TokenBurn(msg.sender, _amount, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to freeze token transfers\r\n    function freezeTransfers()\r\n        public\r\n        onlyAdmin\r\n        returns (bool frozen)\r\n    {\r\n        tokenTransfersFrozen = true;\r\n        FreezeTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to thaw token transfers\r\n    function thawTransfers()\r\n        public\r\n        onlyAdmin\r\n        returns (bool thawed)\r\n    {\r\n        tokenTransfersFrozen = false;\r\n        ThawTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to transfer funds\r\n    /// @param _receiver The destination ethereum address\r\n    /// @param _amount The amount of CMA tokens in wei to send\r\n    function transfer(address _receiver, uint256 _amount)\r\n        public\r\n        returns (bool _transferred)\r\n    {\r\n        require(!tokenTransfersFrozen);\r\n        require(transferCheck(msg.sender, _receiver, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(msg.sender, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to transfer funds on behalf of one person\r\n    /// @param _owner Person you are allowed to spend funds on behalf of\r\n    /// @param _receiver Person to receive the funds\r\n    /// @param _amount Amoun of CMA tokens in wei to send\r\n    function transferFrom(address _owner, address _receiver, uint256 _amount)\r\n        public\r\n        returns (bool _transferredFrom)\r\n    {\r\n        require(!tokenTransfersFrozen);\r\n        require(allowance[_owner][msg.sender].sub(_amount) >= 0);\r\n        require(transferCheck(_owner, _receiver, _amount));\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        allowance[_owner][_receiver] = allowance[_owner][_receiver].sub(_amount);\r\n        Transfer(_owner, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to approve a third-party to send funds on your behalf\r\n    /// @param _spender The person you are allowing to spend on your behalf\r\n    /// @param _amount The amount of CMA tokens in wei they are allowed to spend\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool approved)\r\n    {\r\n        require(_amount > 0);\r\n        require(balances[msg.sender] > 0);\r\n        allowance[msg.sender][_spender] = _amount;\r\n        Approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n     //GETTERS//\r\n    ///////////\r\n\r\n    \r\n    /// @dev low level function used to do a sanity check of input data for CMA token transfers\r\n    /// @param _sender This is the msg.sender, the person sending the CMA tokens\r\n    /// @param _receiver This is the address receiving the CMA tokens\r\n    /// @param _value This is the amount of CMA tokens in wei to send\r\n    function transferCheck(address _sender, address _receiver, uint256 _value) \r\n        private\r\n        view\r\n        returns (bool safe) \r\n    {\r\n        require(_value > 0);\r\n        require(_receiver != address(0));\r\n        require(balances[_sender].sub(_value) >= 0);\r\n        require(balances[_receiver].add(_value) > balances[_receiver]);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to retrieve total supply\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256 _totalSupply)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    /// @notice Used to look up balance of a user\r\n    function balanceOf(address _person)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_person];\r\n    }\r\n\r\n    /// @notice Used to look up allowance of a user\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 allowed)\r\n    {\r\n        return allowance[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[{\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"launchContract\",\"outputs\":[{\"name\":\"launched\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_transferredFrom\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenBurn\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alertCreators\",\"outputs\":[{\"name\":\"alertCreator\",\"type\":\"address\"},{\"name\":\"alertsCreated\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransfersFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_removeMod\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[{\"name\":\"removed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRoleStatus\",\"outputs\":[{\"name\":\"_role\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLaunched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMod\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[{\"name\":\"added\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"thawTransfers\",\"outputs\":[{\"name\":\"thawed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"singlePayout\",\"outputs\":[{\"name\":\"paid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"Minted\",\"type\":\"bool\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_freezer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"FreezeTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_thawer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_thawed\",\"type\":\"bool\"}],\"name\":\"ThawTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_burned\",\"type\":\"bool\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"EnableTokenMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_modAdded\",\"type\":\"bool\"}],\"name\":\"AddMod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_removeMod\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_modRemoved\",\"type\":\"bool\"}],\"name\":\"RemoveMod\",\"type\":\"event\"}]","ContractName":"CoinMarketAlert","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa677dd9e034f8d6e6afdfef1d73155e0f14568e7e7e4832d6800fb7bc7e2217"}]}