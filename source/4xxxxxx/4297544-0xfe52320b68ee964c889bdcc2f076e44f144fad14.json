{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\n/**\r\n    BlockChain Board Of Derivatives Token. \r\n */\r\ncontract BBDToken is StandardToken, Ownable {\r\n\r\n    // Metadata\r\n    string public constant name = \"BlockChain Board Of Derivatives Token\";\r\n    string public constant symbol = \"BBD\";\r\n    uint256 public constant decimals = 18;\r\n    string public constant version = '1.0.0';\r\n\r\n    // Presale parameters\r\n    uint256 public presaleStartTime;\r\n    uint256 public presaleEndTime;\r\n\r\n    bool public presaleFinalized = false;\r\n\r\n    uint256 public constant presaleTokenCreationCap = 40000 * 10 ** decimals;// amount on presale\r\n    uint256 public constant presaleTokenCreationRate = 20000; // 2 BDD per 1 ETH\r\n\r\n    // Sale parameters\r\n    uint256 public saleStartTime;\r\n    uint256 public saleEndTime;\r\n\r\n    bool public saleFinalized = false;\r\n\r\n    uint256 public constant totalTokenCreationCap = 240000 * 10 ** decimals; //total amount on ale and presale\r\n    uint256 public constant saleStartTokenCreationRate = 16600; // 1.66 BDD per 1 ETH\r\n    uint256 public constant saleEndTokenCreationRate = 10000; // 1 BDD per 1 ETH\r\n\r\n    // Migration information\r\n    address public migrationAgent;\r\n    uint256 public totalMigrated;\r\n\r\n    // Team accounts\r\n    address public constant qtAccount = 0x87a9131485cf8ed8E9bD834b46A12D7f3092c263;\r\n    address public constant coreTeamMemberOne = 0xe43088E823eA7422D77E32a195267aE9779A8B07;\r\n    address public constant coreTeamMemberTwo = 0xad00884d1E7D0354d16fa8Ab083208c2cC3Ed515;\r\n\r\n    uint256 public constant divisor = 10000;\r\n\r\n    // ETH amount rised\r\n    uint256 raised = 0;\r\n\r\n    // Events\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n    event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n\r\n    function() payable {\r\n        require(!presaleFinalized || !saleFinalized); //todo\r\n\r\n        if (!presaleFinalized) {\r\n            buyPresaleTokens(msg.sender);\r\n        }\r\n        else{\r\n            buySaleTokens(msg.sender);\r\n        }\r\n    }\r\n\r\n    function BBDToken(uint256 _presaleStartTime, uint256 _presaleEndTime, uint256 _saleStartTime, uint256 _saleEndTime) {\r\n        require(_presaleStartTime >= now);\r\n        require(_presaleEndTime >= _presaleStartTime);\r\n        require(_saleStartTime >= _presaleEndTime);\r\n        require(_saleEndTime >= _saleStartTime);\r\n\r\n        presaleStartTime = _presaleStartTime;\r\n        presaleEndTime = _presaleEndTime;\r\n        saleStartTime = _saleStartTime;\r\n        saleEndTime = _saleEndTime;\r\n    }\r\n\r\n    // Get token creation rate\r\n    function getTokenCreationRate() constant returns (uint256) {\r\n        require(!presaleFinalized || !saleFinalized);\r\n\r\n        uint256 creationRate;\r\n\r\n        if (!presaleFinalized) {\r\n            //The rate on presales is constant\r\n            creationRate = presaleTokenCreationRate;\r\n        } else {\r\n            //The rate on sale is changing lineral while time is passing. On sales start it is 1.66 and on end 1.0 \r\n            uint256 rateRange = saleStartTokenCreationRate - saleEndTokenCreationRate;\r\n            uint256 timeRange = saleEndTime - saleStartTime;\r\n            creationRate = saleStartTokenCreationRate.sub(rateRange.mul(now.sub(saleStartTime)).div(timeRange));\r\n        }\r\n\r\n        return creationRate;\r\n    }\r\n    \r\n    // Buy presale tokens\r\n    function buyPresaleTokens(address _beneficiary) payable {\r\n        require(!presaleFinalized);\r\n        require(msg.value != 0);\r\n        require(now <= presaleEndTime);\r\n        require(now >= presaleStartTime);\r\n\r\n        uint256 bbdTokens = msg.value.mul(getTokenCreationRate()).div(divisor);\r\n        uint256 checkedSupply = totalSupply.add(bbdTokens);\r\n        require(presaleTokenCreationCap >= checkedSupply);\r\n\r\n        totalSupply = totalSupply.add(bbdTokens);\r\n        balances[_beneficiary] = balances[_beneficiary].add(bbdTokens);\r\n\r\n        raised += msg.value;\r\n        TokenPurchase(msg.sender, _beneficiary, msg.value, bbdTokens);\r\n    }\r\n\r\n    // Finalize presale\r\n    function finalizePresale() onlyOwner external {\r\n        require(!presaleFinalized);\r\n        require(now >= presaleEndTime || totalSupply == presaleTokenCreationCap);\r\n\r\n        presaleFinalized = true;\r\n\r\n        uint256 ethForCoreMember = this.balance.mul(500).div(divisor);\r\n\r\n        coreTeamMemberOne.transfer(ethForCoreMember); // 5%\r\n        coreTeamMemberTwo.transfer(ethForCoreMember); // 5%\r\n        qtAccount.transfer(this.balance); // Quant Technology 90%\r\n    }\r\n\r\n    // Buy sale tokens\r\n    function buySaleTokens(address _beneficiary) payable {\r\n        require(!saleFinalized);\r\n        require(msg.value != 0);\r\n        require(now <= saleEndTime);\r\n        require(now >= saleStartTime);\r\n\r\n        uint256 bbdTokens = msg.value.mul(getTokenCreationRate()).div(divisor);\r\n        uint256 checkedSupply = totalSupply.add(bbdTokens);\r\n        require(totalTokenCreationCap >= checkedSupply);\r\n\r\n        totalSupply = totalSupply.add(bbdTokens);\r\n        balances[_beneficiary] = balances[_beneficiary].add(bbdTokens);\r\n\r\n        raised += msg.value;\r\n        TokenPurchase(msg.sender, _beneficiary, msg.value, bbdTokens);\r\n    }\r\n\r\n    // Finalize sale\r\n    function finalizeSale() onlyOwner external {\r\n        require(!saleFinalized);\r\n        require(now >= saleEndTime || totalSupply == totalTokenCreationCap);\r\n\r\n        saleFinalized = true;\r\n\r\n        //Add aditional 25% tokens to the Quant Technology and development team\r\n        uint256 additionalBBDTokensForQTAccount = totalSupply.mul(2250).div(divisor); // 22.5%\r\n        totalSupply = totalSupply.add(additionalBBDTokensForQTAccount);\r\n        balances[qtAccount] = balances[qtAccount].add(additionalBBDTokensForQTAccount);\r\n\r\n        uint256 additionalBBDTokensForCoreTeamMember = totalSupply.mul(125).div(divisor); // 1.25%\r\n        totalSupply = totalSupply.add(2 * additionalBBDTokensForCoreTeamMember);\r\n        balances[coreTeamMemberOne] = balances[coreTeamMemberOne].add(additionalBBDTokensForCoreTeamMember);\r\n        balances[coreTeamMemberTwo] = balances[coreTeamMemberTwo].add(additionalBBDTokensForCoreTeamMember);\r\n\r\n        uint256 ethForCoreMember = this.balance.mul(500).div(divisor);\r\n\r\n        coreTeamMemberOne.transfer(ethForCoreMember); // 5%\r\n        coreTeamMemberTwo.transfer(ethForCoreMember); // 5%\r\n        qtAccount.transfer(this.balance); // Quant Technology 90%\r\n    }\r\n\r\n    // Allow migrate contract\r\n    function migrate(uint256 _value) external {\r\n        require(saleFinalized);\r\n        require(migrationAgent != 0x0);\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalMigrated = totalMigrated.add(_value);\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, migrationAgent, _value);\r\n    }\r\n\r\n    function setMigrationAgent(address _agent) onlyOwner external {\r\n        require(saleFinalized);\r\n        require(migrationAgent == 0x0);\r\n\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    // ICO Status overview. Used for BBOD landing page\r\n    function icoOverview() constant returns (uint256 currentlyRaised, uint256 currentlyTotalSupply, uint256 currentlyTokenCreationRate){\r\n        currentlyRaised = raised;\r\n        currentlyTotalSupply = totalSupply;\r\n        currentlyTokenCreationRate = getTokenCreationRate();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buySaleTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qtAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyPresaleTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOverview\",\"outputs\":[{\"name\":\"currentlyRaised\",\"type\":\"uint256\"},{\"name\":\"currentlyTotalSupply\",\"type\":\"uint256\"},{\"name\":\"currentlyTokenCreationRate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreTeamMemberTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreTeamMemberOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTokenCreationRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_presaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_saleStartTime\",\"type\":\"uint256\"},{\"name\":\"_saleEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BBDToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059c4c3000000000000000000000000000000000000000000000000000000000059c766000000000000000000000000000000000000000000000000000000000059d0a0800000000000000000000000000000000000000000000000000000000059e31580","Library":"","SwarmSource":"bzzr://ef9b29f4d8879eaae5ccb8d6256ffda69e31c0b9597d07849c73f76c7ac81096"}]}