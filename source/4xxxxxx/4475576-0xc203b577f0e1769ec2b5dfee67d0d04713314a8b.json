{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\r\n///  later changed\r\ncontract Owned {\r\n\r\n    /// @dev `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address public newOwner;\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        if(msg.sender == owner) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/// @title Vesting trustee\r\ncontract Trustee is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    // The address of the SHP ERC20 token.\r\n    SHP public shp;\r\n\r\n    struct Grant {\r\n        uint256 value;\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 end;\r\n        uint256 transferred;\r\n        bool revokable;\r\n    }\r\n\r\n    // Grants holder.\r\n    mapping (address => Grant) public grants;\r\n\r\n    // Total tokens available for vesting.\r\n    uint256 public totalVesting;\r\n\r\n    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\r\n    event UnlockGrant(address indexed _holder, uint256 _value);\r\n    event RevokeGrant(address indexed _holder, uint256 _refund);\r\n\r\n    /// @dev Constructor that initializes the address of the SHP contract.\r\n    /// @param _shp SHP The address of the previously deployed SHP smart contract.\r\n    function Trustee(SHP _shp) {\r\n        require(_shp != address(0));\r\n        shp = _shp;\r\n    }\r\n\r\n    /// @dev Grant tokens to a specified address.\r\n    /// @param _to address The address to grant tokens to.\r\n    /// @param _value uint256 The amount of tokens to be granted.\r\n    /// @param _start uint256 The beginning of the vesting period.\r\n    /// @param _cliff uint256 Duration of the cliff period.\r\n    /// @param _end uint256 The end of the vesting period.\r\n    /// @param _revokable bool Whether the grant is revokable or not.\r\n    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end, bool _revokable)\r\n        public onlyOwner {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n\r\n        // Make sure that a single address can be granted tokens only once.\r\n        require(grants[_to].value == 0);\r\n\r\n        // Check for date inconsistencies that may cause unexpected behavior.\r\n        require(_start <= _cliff && _cliff <= _end);\r\n\r\n        // Check that this grant doesn't exceed the total amount of tokens currently available for vesting.\r\n        require(totalVesting.add(_value) <= shp.balanceOf(address(this)));\r\n\r\n        // Assign a new grant.\r\n        grants[_to] = Grant({\r\n            value: _value,\r\n            start: _start,\r\n            cliff: _cliff,\r\n            end: _end,\r\n            transferred: 0,\r\n            revokable: _revokable\r\n        });\r\n\r\n        // Tokens granted, reduce the total amount available for vesting.\r\n        totalVesting = totalVesting.add(_value);\r\n\r\n        NewGrant(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @dev Revoke the grant of tokens of a specifed address.\r\n    /// @param _holder The address which will have its tokens revoked.\r\n    function revoke(address _holder) public onlyOwner {\r\n        Grant grant = grants[_holder];\r\n\r\n        require(grant.revokable);\r\n\r\n        // Send the remaining SHP back to the owner.\r\n        uint256 refund = grant.value.sub(grant.transferred);\r\n\r\n        // Remove the grant.\r\n        delete grants[_holder];\r\n\r\n        totalVesting = totalVesting.sub(refund);\r\n        shp.transfer(msg.sender, refund);\r\n\r\n        RevokeGrant(_holder, refund);\r\n    }\r\n\r\n    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\r\n    /// @param _holder address The address of the holder.\r\n    /// @param _time uint256 The specific time.\r\n    /// @return a uint256 representing a holder's total amount of vested tokens.\r\n    function vestedTokens(address _holder, uint256 _time) public constant returns (uint256) {\r\n        Grant grant = grants[_holder];\r\n        if (grant.value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateVestedTokens(grant, _time);\r\n    }\r\n\r\n    /// @dev Calculate amount of vested tokens at a specifc time.\r\n    /// @param _grant Grant The vesting grant.\r\n    /// @param _time uint256 The time to be checked\r\n    /// @return An uint256 representing the amount of vested tokens of a specific grant.\r\n    ///   |                         _/--------   vestedTokens rect\r\n    ///   |                       _/\r\n    ///   |                     _/\r\n    ///   |                   _/\r\n    ///   |                 _/\r\n    ///   |                /\r\n    ///   |              .|\r\n    ///   |            .  |\r\n    ///   |          .    |\r\n    ///   |        .      |\r\n    ///   |      .        |\r\n    ///   |    .          |\r\n    ///   +===+===========+---------+----------> time\r\n    ///     Start       Cliff      End\r\n    function calculateVestedTokens(Grant _grant, uint256 _time) private constant returns (uint256) {\r\n        // If we're before the cliff, then nothing is vested.\r\n        if (_time < _grant.cliff) {\r\n            return 0;\r\n        }\r\n\r\n        // If we're after the end of the vesting period - everything is vested;\r\n        if (_time >= _grant.end) {\r\n            return _grant.value;\r\n        }\r\n\r\n        // Interpolate all vested tokens: vestedTokens = tokens/// (time - start) / (end - start)\r\n         return _grant.value.mul(_time.sub(_grant.start)).div(_grant.end.sub(_grant.start));\r\n    }\r\n\r\n    /// @dev Unlock vested tokens and transfer them to their holder.\r\n    /// @return a uint256 representing the amount of vested tokens transferred to their holder.\r\n    function unlockVestedTokens() public {\r\n        Grant grant = grants[msg.sender];\r\n        require(grant.value != 0);\r\n\r\n        // Get the total amount of vested tokens, acccording to grant.\r\n        uint256 vested = calculateVestedTokens(grant, now);\r\n        if (vested == 0) {\r\n            return;\r\n        }\r\n\r\n        // Make sure the holder doesn't transfer more than what he already has.\r\n        uint256 transferable = vested.sub(grant.transferred);\r\n        if (transferable == 0) {\r\n            return;\r\n        }\r\n\r\n        grant.transferred = grant.transferred.add(transferable);\r\n        totalVesting = totalVesting.sub(transferable);\r\n        shp.transfer(msg.sender, transferable);\r\n\r\n        UnlockGrant(msg.sender, transferable);\r\n    }\r\n}\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function ()  payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken) \r\n    {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\ncontract SHP is MiniMeToken {\r\n    // @dev SHP constructor\r\n    function SHP(address _tokenFactory)\r\n            MiniMeToken(\r\n                _tokenFactory,\r\n                0x0,                             // no parent token\r\n                0,                               // no snapshot block number from parent\r\n                \"Sharpe Platform Token\",         // Token name\r\n                18,                              // Decimals\r\n                \"SHP\",                           // Symbol\r\n                true                             // Enable transfers\r\n            ) {}\r\n}\r\n\r\ncontract AffiliateUtility is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public tierTwoMin;\r\n    uint256 public tierThreeMin;\r\n\r\n    uint256 public constant TIER1_PERCENT = 3;\r\n    uint256 public constant TIER2_PERCENT = 4;\r\n    uint256 public constant TIER3_PERCENT = 5;\r\n    \r\n    mapping (address => Affiliate) private affiliates;\r\n\r\n    event AffiliateReceived(address affiliateAddress, address investorAddress, bool valid);\r\n\r\n    struct Affiliate {\r\n        address etherAddress;\r\n        bool isPresent;\r\n    }\r\n\r\n    function AffiliateUtility(uint256 _tierTwoMin, uint256 _tierThreeMin) {\r\n        setTiers(_tierTwoMin, _tierThreeMin);\r\n    }\r\n\r\n    /// @notice sets the Ether to Dollar exhchange rate\r\n    /// @param _tierTwoMin the tier 2 min (in WEI)\r\n    /// @param _tierThreeMin the tier 3 min (in WEI)\r\n    function setTiers(uint256 _tierTwoMin, uint256 _tierThreeMin) onlyOwner {\r\n        tierTwoMin = _tierTwoMin;\r\n        tierThreeMin = _tierThreeMin;\r\n    }\r\n\r\n    /// @notice This adds an affiliate Ethereum address to our whitelist\r\n    /// @param _investor The investor's address\r\n    /// @param _affiliate The Ethereum address of the affiliate\r\n    function addAffiliate(address _investor, address _affiliate) onlyOwner {\r\n        affiliates[_investor] = Affiliate(_affiliate, true);\r\n    }\r\n\r\n    /// @notice calculates and returns the amount to token minted for affilliate\r\n    /// @param _investor address of the investor\r\n    /// @param _contributorTokens amount of SHP tokens minted for contributor\r\n    /// @param _contributionValue amount of ETH contributed\r\n    /// @return tuple of two values (affiliateBonus, contributorBouns)\r\n    function applyAffiliate(\r\n        address _investor, \r\n        uint256 _contributorTokens, \r\n        uint256 _contributionValue\r\n    )\r\n        public \r\n        returns(uint256, uint256) \r\n    {\r\n        if (getAffiliate(_investor) == address(0)) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 contributorBonus = _contributorTokens.div(100);\r\n        uint256 affiliateBonus = 0;\r\n\r\n        if (_contributionValue < tierTwoMin) {\r\n            affiliateBonus = _contributorTokens.mul(TIER1_PERCENT).div(100);\r\n        } else if (_contributionValue >= tierTwoMin && _contributionValue < tierThreeMin) {\r\n            affiliateBonus = _contributorTokens.mul(TIER2_PERCENT).div(100);\r\n        } else {\r\n            affiliateBonus = _contributorTokens.mul(TIER3_PERCENT).div(100);\r\n        }\r\n\r\n        return(affiliateBonus, contributorBonus);\r\n    }\r\n\r\n    /// @notice Fetches the Ethereum address of a valid affiliate\r\n    /// @param _investor The Ethereum address of the investor\r\n    /// @return The Ethereum address as an address type\r\n    function getAffiliate(address _investor) constant returns(address) {\r\n        return affiliates[_investor].etherAddress;\r\n    }\r\n\r\n    /// @notice Checks if an affiliate is valid\r\n    /// @param _investor The Ethereum address of the investor\r\n    /// @return True or False\r\n    function isAffiliateValid(address _investor) constant public returns(bool) {\r\n        Affiliate memory affiliate = affiliates[_investor];\r\n        AffiliateReceived(affiliate.etherAddress, _investor, affiliate.isPresent);\r\n        return affiliate.isPresent;\r\n    }\r\n}\r\n\r\ncontract SCD is MiniMeToken {\r\n    // @dev SCD constructor\r\n    function SCD(address _tokenFactory)\r\n            MiniMeToken(\r\n                _tokenFactory,\r\n                0x0,                             // no parent token\r\n                0,                               // no snapshot block number from parent\r\n                \"Sharpe Crypto-Derivative\",      // Token name\r\n                18,                              // Decimals\r\n                \"SCD\",                           // Symbol\r\n                true                             // Enable transfers\r\n            ) {}\r\n}\r\n\r\n\r\ncontract TokenSale is Owned, TokenController {\r\n    using SafeMath for uint256;\r\n    \r\n    SHP public shp;\r\n    AffiliateUtility public affiliateUtility;\r\n    Trustee public trustee;\r\n\r\n    address public etherEscrowAddress;\r\n    address public bountyAddress;\r\n    address public trusteeAddress;\r\n    address public apiAddress;\r\n\r\n    uint256 public founderTokenCount = 0;\r\n    uint256 public reserveTokenCount = 0;\r\n\r\n    uint256 constant public CALLER_EXCHANGE_RATE = 2000;\r\n    uint256 constant public RESERVE_EXCHANGE_RATE = 1500;\r\n    uint256 constant public FOUNDER_EXCHANGE_RATE = 1000;\r\n    uint256 constant public BOUNTY_EXCHANGE_RATE = 500;\r\n    uint256 constant public MAX_GAS_PRICE = 50000000000;\r\n\r\n    bool public paused;\r\n    bool public closed;\r\n\r\n    mapping(address => bool) public approvedAddresses;\r\n\r\n    event Contribution(uint256 etherAmount, address _caller);\r\n    event NewSale(address indexed caller, uint256 etherAmount, uint256 tokensGenerated);\r\n    event SaleClosed(uint256 when);\r\n    \r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier notClosed() {\r\n        require(!closed);\r\n        _;\r\n    }\r\n\r\n    modifier onlyApi() {\r\n        require(msg.sender == apiAddress);\r\n        _;\r\n    }\r\n\r\n    modifier isValidated() {\r\n        require(msg.sender != 0x0);\r\n        require(msg.value > 0);\r\n        require(!isContract(msg.sender)); \r\n        require(tx.gasprice <= MAX_GAS_PRICE);\r\n        _;\r\n    }\r\n\r\n    modifier isApproved() {\r\n        require(approvedAddresses[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /// @notice Adds an approved address for the sale\r\n    /// @param _addr The address to approve for contribution\r\n    function approveAddress(address _addr) public onlyApi {\r\n        approvedAddresses[_addr] = true;\r\n    }\r\n\r\n    /// @notice This method sends the Ether received to the Ether escrow address\r\n    /// and generates the calculated number of SHP tokens, sending them to the caller's address.\r\n    /// It also generates the founder's tokens and the reserve tokens at the same time.\r\n    function doBuy(\r\n        address _caller,\r\n        uint256 etherAmount\r\n    )\r\n        internal\r\n    {\r\n\r\n        Contribution(etherAmount, _caller);\r\n\r\n        uint256 callerTokens = etherAmount.mul(CALLER_EXCHANGE_RATE);\r\n        uint256 callerTokensWithDiscount = applyDiscount(etherAmount, callerTokens);\r\n\r\n        uint256 reserveTokens = etherAmount.mul(RESERVE_EXCHANGE_RATE);\r\n        uint256 founderTokens = etherAmount.mul(FOUNDER_EXCHANGE_RATE);\r\n        uint256 bountyTokens = etherAmount.mul(BOUNTY_EXCHANGE_RATE);\r\n        uint256 vestingTokens = founderTokens.add(reserveTokens);\r\n\r\n        founderTokenCount = founderTokenCount.add(founderTokens);\r\n        reserveTokenCount = reserveTokenCount.add(reserveTokens);\r\n\r\n        payAffiliate(callerTokensWithDiscount, msg.value, msg.sender);\r\n\r\n        shp.generateTokens(_caller, callerTokensWithDiscount);\r\n        shp.generateTokens(bountyAddress, bountyTokens);\r\n        shp.generateTokens(trusteeAddress, vestingTokens);\r\n\r\n        NewSale(_caller, etherAmount, callerTokensWithDiscount);\r\n        NewSale(trusteeAddress, etherAmount, vestingTokens);\r\n        NewSale(bountyAddress, etherAmount, bountyTokens);\r\n\r\n        etherEscrowAddress.transfer(etherAmount);\r\n        updateCounters(etherAmount);\r\n    }\r\n\r\n    /// @notice Applies the discount based on the discount tiers\r\n    /// @param _etherAmount The amount of ether used to evaluate the tier the contribution lies within\r\n    /// @param _contributorTokens The tokens allocated based on the contribution\r\n    function applyDiscount(uint256 _etherAmount, uint256 _contributorTokens) internal constant returns (uint256);\r\n\r\n    /// @notice Updates the counters for the amount of Ether paid\r\n    /// @param _etherAmount the amount of Ether paid\r\n    function updateCounters(uint256 _etherAmount) internal;\r\n    \r\n    /// @notice Parent constructor. This needs to be extended from the child contracts\r\n    /// @param _etherEscrowAddress the address that will hold the crowd funded Ether\r\n    /// @param _bountyAddress the address that will hold the bounty scheme SHP\r\n    /// @param _trusteeAddress the address that will hold the vesting SHP\r\n    /// @param _affiliateUtilityAddress address of the deployed AffiliateUtility contract.\r\n    function TokenSale (\r\n        address _etherEscrowAddress,\r\n        address _bountyAddress,\r\n        address _trusteeAddress,\r\n        address _affiliateUtilityAddress,\r\n        address _apiAddress\r\n    ) {\r\n        etherEscrowAddress = _etherEscrowAddress;\r\n        bountyAddress = _bountyAddress;\r\n        trusteeAddress = _trusteeAddress;\r\n        apiAddress = _apiAddress;\r\n        affiliateUtility = AffiliateUtility(_affiliateUtilityAddress);\r\n        trustee = Trustee(_trusteeAddress);\r\n        paused = true;\r\n        closed = false;\r\n    }\r\n\r\n    /// @notice Pays an affiliate if they are valid and present in the transaction data\r\n    /// @param _tokens The contribution tokens used to calculate affiliate payment amount\r\n    /// @param _etherValue The Ether value sent\r\n    /// @param _caller The address of the caller\r\n    function payAffiliate(uint256 _tokens, uint256 _etherValue, address _caller) internal {\r\n        if (affiliateUtility.isAffiliateValid(_caller)) {\r\n            address affiliate = affiliateUtility.getAffiliate(_caller);\r\n            var (affiliateBonus, contributorBonus) = affiliateUtility.applyAffiliate(_caller, _tokens, _etherValue);\r\n            shp.generateTokens(affiliate, affiliateBonus);\r\n            shp.generateTokens(_caller, contributorBonus);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the SHP token smart contract\r\n    /// @param _shp the SHP token contract address\r\n    function setShp(address _shp) public onlyOwner {\r\n        shp = SHP(_shp);\r\n    }\r\n\r\n    /// @notice Transfers ownership of the token smart contract and trustee\r\n    /// @param _tokenController the address of the new token controller\r\n    /// @param _trusteeOwner the address of the new trustee owner\r\n    function transferOwnership(address _tokenController, address _trusteeOwner) public onlyOwner {\r\n        require(closed);\r\n        require(_tokenController != 0x0);\r\n        require(_trusteeOwner != 0x0);\r\n        shp.changeController(_tokenController);\r\n        trustee.changeOwner(_trusteeOwner);\r\n    }\r\n\r\n    /// @notice Internal function to determine if an address is a contract\r\n    /// @param _caller The address being queried\r\n    /// @return True if `caller` is a contract\r\n    function isContract(address _caller) internal constant returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_caller) }\r\n        return size > 0;\r\n    }\r\n\r\n    /// @notice Pauses the contribution if there is any issue\r\n    function pauseContribution() public onlyOwner {\r\n        paused = true;\r\n    }\r\n\r\n    /// @notice Resumes the contribution\r\n    function resumeContribution() public onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    //////////\r\n    // MiniMe Controller Interface functions\r\n    //////////\r\n\r\n    // In between the offering and the network. Default settings for allowing token transfers.\r\n    function proxyPayment(address) public payable returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function onTransfer(address, address, uint256) public returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function onApprove(address, address, uint256) public returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\ncontract SharpePresale is TokenSale {\r\n    using SafeMath for uint256;\r\n \r\n    mapping(address => uint256) public whitelist;\r\n    \r\n    uint256 public preSaleEtherPaid = 0;\r\n    uint256 public totalContributions = 0;\r\n    uint256 public whitelistedPlannedContributions = 0;\r\n\r\n    uint256 constant public FIRST_TIER_DISCOUNT = 10;\r\n    uint256 constant public SECOND_TIER_DISCOUNT = 20;\r\n    uint256 constant public THIRD_TIER_DISCOUNT = 30;\r\n\r\n    uint256 public minPresaleContributionEther;\r\n    uint256 public maxPresaleContributionEther;\r\n\r\n    uint256 public firstTierDiscountUpperLimitEther;\r\n    uint256 public secondTierDiscountUpperLimitEther;\r\n    uint256 public thirdTierDiscountUpperLimitEther;\r\n\r\n    uint256 public preSaleCap;\r\n    uint256 public honourWhitelistEnd;\r\n\r\n    address public presaleAddress;\r\n    \r\n    enum ContributionState {Paused, Resumed}\r\n    event ContributionStateChanged(address caller, ContributionState contributionState);\r\n    enum AllowedContributionState {Whitelisted, NotWhitelisted, AboveWhitelisted, BelowWhitelisted, WhitelistClosed}\r\n    event AllowedContributionCheck(uint256 contribution, AllowedContributionState allowedContributionState);\r\n    event ValidContributionCheck(uint256 contribution, bool isContributionValid);\r\n    event DiscountApplied(uint256 etherAmount, uint256 tokens, uint256 discount);\r\n    event ContributionRefund(uint256 etherAmount, address _caller);\r\n    event CountersUpdated(uint256 preSaleEtherPaid, uint256 totalContributions);\r\n    event WhitelistedUpdated(uint256 plannedContribution, bool contributed);\r\n    event WhitelistedCounterUpdated(uint256 whitelistedPlannedContributions, uint256 usedContributions);\r\n\r\n    modifier isValidContribution() {\r\n        require(validContribution());\r\n        _;\r\n    }\r\n\r\n    /// @notice called only once when the contract is initialized\r\n    /// @param _etherEscrowAddress the address that will hold the crowd funded Ether\r\n    /// @param _bountyAddress the address that will hold the bounty SHP\r\n    /// @param _trusteeAddress the address that will hold the vesting SHP\r\n    /// @param _firstTierDiscountUpperLimitEther First discount limits (WEI)\r\n    /// @param _secondTierDiscountUpperLimitEther Second discount limits (WEI)\r\n    /// @param _thirdTierDiscountUpperLimitEther Third discount limits (WEI)\r\n    /// @param _minPresaleContributionEther Lower contribution range (WEI)\r\n    /// @param _maxPresaleContributionEther Upper contribution range (WEI)\r\n    /// @param _preSaleCap Presale cap (WEI)\r\n    /// @param _honourWhitelistEnd End time of whitelist period\r\n    function SharpePresale(\r\n        address _etherEscrowAddress,\r\n        address _bountyAddress,\r\n        address _trusteeAddress,\r\n        address _affiliateUtilityAddress,\r\n        address _apiAddress,\r\n        uint256 _firstTierDiscountUpperLimitEther,\r\n        uint256 _secondTierDiscountUpperLimitEther,\r\n        uint256 _thirdTierDiscountUpperLimitEther,\r\n        uint256 _minPresaleContributionEther,\r\n        uint256 _maxPresaleContributionEther,\r\n        uint256 _preSaleCap,\r\n        uint256 _honourWhitelistEnd)\r\n        TokenSale (\r\n            _etherEscrowAddress,\r\n            _bountyAddress,\r\n            _trusteeAddress,\r\n            _affiliateUtilityAddress,\r\n            _apiAddress\r\n        )\r\n    {\r\n        honourWhitelistEnd = _honourWhitelistEnd;\r\n        presaleAddress = address(this);\r\n        firstTierDiscountUpperLimitEther = _firstTierDiscountUpperLimitEther;\r\n        secondTierDiscountUpperLimitEther = _secondTierDiscountUpperLimitEther;\r\n        thirdTierDiscountUpperLimitEther = _thirdTierDiscountUpperLimitEther;\r\n        minPresaleContributionEther = _minPresaleContributionEther;\r\n        maxPresaleContributionEther = _maxPresaleContributionEther;\r\n        preSaleCap = _preSaleCap;\r\n    }\r\n\r\n    /// @notice Adds to the whitelist\r\n    /// @param _sender The address to whitelist\r\n    /// @param _plannedContribution The planned contribution (WEI)\r\n    function addToWhitelist(address _sender, uint256 _plannedContribution) public onlyOwner {\r\n        require(whitelist[_sender] == 0);\r\n        \r\n        whitelist[_sender] = _plannedContribution;\r\n        whitelistedPlannedContributions = whitelistedPlannedContributions.add(_plannedContribution);\r\n    }\r\n\r\n    /// @notice This function fires when someone sends Ether to the address of this contract.\r\n    /// The ETH will be exchanged for SHP and it ensures contributions cannot be made from known addresses.\r\n    function ()\r\n        public\r\n        payable\r\n        isValidated\r\n        notClosed\r\n        notPaused\r\n        isApproved\r\n    {\r\n        address caller = msg.sender;\r\n        processPreSale(caller);\r\n    }\r\n\r\n    /// @notice Processes the presale if the allowed contribution is more than zero\r\n    /// @param _caller the address sending the Ether\r\n    function processPreSale(address _caller) private {\r\n        var (allowedContribution, refundAmount) = processContribution();\r\n        assert(msg.value==allowedContribution.add(refundAmount));\r\n        if (allowedContribution > 0) {\r\n            doBuy(_caller, allowedContribution);\r\n            if (refundAmount > 0) {\r\n                msg.sender.transfer(refundAmount);\r\n                closePreSale();\r\n            }\r\n\r\n            // Covering the edge case where the last contribution equals the remaining cap\r\n            uint256 tillCap = remainingCap();\r\n            if (tillCap == 0) {\r\n                closePreSale();\r\n            }\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns true if the whitelist period is still active, false otherwise.\r\n    /// When whitelist period ends, it will transfer any unclaimed planned contributions to the pre-sale cap. \r\n    function honourWhitelist() private returns (bool) {\r\n        bool honourWhitelist = true;\r\n        if (honourWhitelistEnd <= now) {\r\n            honourWhitelist = false;\r\n            preSaleCap = preSaleCap.add(whitelistedPlannedContributions);\r\n            whitelistedPlannedContributions = 0;\r\n            WhitelistedCounterUpdated(whitelistedPlannedContributions, 0);\r\n        }\r\n        return honourWhitelist;\r\n    }\r\n\r\n    /// @notice Returns the contribution to be used as part of the transaction, and any refund value if expected.  \r\n    function processContribution() private isValidContribution returns (uint256, uint256) {\r\n        var (allowedContribution, refundAmount) = getAllowedContribution();\r\n        \r\n        if (!honourWhitelist()) {\r\n            AllowedContributionCheck(allowedContribution, AllowedContributionState.WhitelistClosed);\r\n            return (allowedContribution, refundAmount);\r\n        }\r\n        \r\n        if (whitelist[msg.sender] > 0) {\r\n            return processWhitelistedContribution(allowedContribution, refundAmount);\r\n        } \r\n\r\n        AllowedContributionCheck(allowedContribution, AllowedContributionState.NotWhitelisted);\r\n        return (allowedContribution, refundAmount);\r\n    }\r\n\r\n    /// @notice Returns the contribution to be used for a sender that had previously been whitelisted, and any refund value if expected.\r\n    function processWhitelistedContribution(uint256 allowedContribution, uint256 refundAmount) private returns (uint256, uint256) {\r\n        uint256 plannedContribution = whitelist[msg.sender];\r\n        \r\n        whitelist[msg.sender] = 0;\r\n        WhitelistedUpdated(plannedContribution, true);\r\n        \r\n        if (msg.value > plannedContribution) {\r\n            return handleAbovePlannedWhitelistedContribution(allowedContribution, plannedContribution, refundAmount);\r\n        }\r\n        \r\n        if (msg.value < plannedContribution) {\r\n            return handleBelowPlannedWhitelistedContribution(plannedContribution);\r\n        }\r\n        \r\n        return handlePlannedWhitelistedContribution(plannedContribution);\r\n    }\r\n\r\n    /// @notice Returns the contribution and refund value to be used when the transaction value equals the whitelisted contribution for the sender.\r\n    /// Note that refund value will always be 0 in this case, as the planned contribution for the sender and transaction value match.\r\n    function handlePlannedWhitelistedContribution(uint256 plannedContribution) private returns (uint256, uint256) {\r\n        updateWhitelistedContribution(plannedContribution);\r\n        AllowedContributionCheck(plannedContribution, AllowedContributionState.Whitelisted);\r\n        return (plannedContribution, 0);\r\n    }\r\n    \r\n    /// @notice Returns the contribution and refund value to be used when the transaction value is higher than the whitelisted contribution for the sender.\r\n    /// Note that only in this case, the refund value will not be 0.\r\n    function handleAbovePlannedWhitelistedContribution(uint256 allowedContribution, uint256 plannedContribution, uint256 refundAmount) private returns (uint256, uint256) {\r\n        updateWhitelistedContribution(plannedContribution);\r\n        AllowedContributionCheck(allowedContribution, AllowedContributionState.AboveWhitelisted);\r\n        return (allowedContribution, refundAmount);\r\n    }\r\n\r\n    /// @notice Returns the contribution and refund value to be used when the transaction value is lower than the whitelisted contribution for the sender.\r\n    /// Note that refund value will always be 0 in this case, as transaction value is below the planned contribution for this sender.\r\n    function handleBelowPlannedWhitelistedContribution(uint256 plannedContribution) private returns (uint256, uint256) {\r\n        uint256 belowPlanned = plannedContribution.sub(msg.value);\r\n        preSaleCap = preSaleCap.add(belowPlanned);\r\n        \r\n        updateWhitelistedContribution(msg.value);\r\n        AllowedContributionCheck(msg.value, AllowedContributionState.BelowWhitelisted);\r\n        return (msg.value, 0);\r\n    }\r\n\r\n    /// @notice Updates the whitelistedPlannedContributions counter, subtracting the contribution about to be applied.\r\n    function updateWhitelistedContribution(uint256 plannedContribution) private {\r\n        whitelistedPlannedContributions = whitelistedPlannedContributions.sub(plannedContribution);\r\n        WhitelistedCounterUpdated(whitelistedPlannedContributions, plannedContribution);\r\n    }\r\n\r\n    /// @notice Calculates the allowed contribution based on the transaction value and amount remaining till cap.\r\n    /// If the transaction contribution is higher than cap, will return the excess amount to be refunded to sender.\r\n    /// @return the allowed contribution and refund amount (if any). All in WEI.\r\n    function getAllowedContribution() private returns (uint256, uint256) {\r\n        uint256 allowedContribution = msg.value;\r\n        uint256 tillCap = remainingCap();\r\n        uint256 refundAmount = 0;\r\n        if (msg.value > tillCap) {\r\n            allowedContribution = tillCap;\r\n            refundAmount = msg.value.sub(allowedContribution);\r\n            ContributionRefund(refundAmount, msg.sender);\r\n        }\r\n        return (allowedContribution, refundAmount);\r\n    }\r\n\r\n    /// @notice Returns the Ether amount remaining until the hard-cap\r\n    /// @return the remaining cap in WEI\r\n    function remainingCap() private returns (uint256) {\r\n        return preSaleCap.sub(preSaleEtherPaid);\r\n    }\r\n\r\n    /// @notice Public function enables closing of the pre-sale manually if necessary\r\n    function closeSale() public onlyOwner {\r\n        closePreSale();\r\n    }\r\n\r\n    /// @notice Private function used to close the pre-sale when the hard-cap is hit\r\n    function closePreSale() private {\r\n        closed = true;\r\n        SaleClosed(now);\r\n    }\r\n\r\n    /// @notice Ensure the contribution is valid\r\n    /// @return Returns whether the contribution is valid or not\r\n    function validContribution() private returns (bool) {\r\n        bool isContributionValid = msg.value >= minPresaleContributionEther && msg.value <= maxPresaleContributionEther;\r\n        ValidContributionCheck(msg.value, isContributionValid);\r\n        return isContributionValid;\r\n    }\r\n\r\n    /// @notice Applies the discount based on the discount tiers\r\n    /// @param _etherAmount The amount of ether used to evaluate the tier the contribution lies within\r\n    /// @param _contributorTokens The tokens allocated based on the contribution\r\n    function applyDiscount(\r\n        uint256 _etherAmount, \r\n        uint256 _contributorTokens\r\n    )\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n\r\n        uint256 discount = 0;\r\n\r\n        if (_etherAmount <= firstTierDiscountUpperLimitEther) {\r\n            discount = _contributorTokens.mul(FIRST_TIER_DISCOUNT).div(100);\r\n        } else if (_etherAmount > firstTierDiscountUpperLimitEther && _etherAmount <= secondTierDiscountUpperLimitEther) {\r\n            discount = _contributorTokens.mul(SECOND_TIER_DISCOUNT).div(100);\r\n        } else {\r\n            discount = _contributorTokens.mul(THIRD_TIER_DISCOUNT).div(100);\r\n        }\r\n\r\n        DiscountApplied(_etherAmount, _contributorTokens, discount);\r\n        return discount.add(_contributorTokens);\r\n    }\r\n\r\n    /// @notice Updates the counters for the amount of Ether paid\r\n    /// @param _etherAmount the amount of Ether paid\r\n    function updateCounters(uint256 _etherAmount) internal {\r\n        preSaleEtherPaid = preSaleEtherPaid.add(_etherAmount);\r\n        totalContributions = totalContributions.add(1);\r\n        CountersUpdated(preSaleEtherPaid, _etherAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CALLER_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_plannedContribution\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDER_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherEscrowAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTierDiscountUpperLimitEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_TIER_DISCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"honourWhitelistEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenController\",\"type\":\"address\"},{\"name\":\"_trusteeOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEtherPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdTierDiscountUpperLimitEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateUtility\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTierDiscountUpperLimitEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedPlannedContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPresaleContributionEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPresaleContributionEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_TIER_DISCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"apiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_TIER_DISCOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shp\",\"type\":\"address\"}],\"name\":\"setShp\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"approveAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_etherEscrowAddress\",\"type\":\"address\"},{\"name\":\"_bountyAddress\",\"type\":\"address\"},{\"name\":\"_trusteeAddress\",\"type\":\"address\"},{\"name\":\"_affiliateUtilityAddress\",\"type\":\"address\"},{\"name\":\"_apiAddress\",\"type\":\"address\"},{\"name\":\"_firstTierDiscountUpperLimitEther\",\"type\":\"uint256\"},{\"name\":\"_secondTierDiscountUpperLimitEther\",\"type\":\"uint256\"},{\"name\":\"_thirdTierDiscountUpperLimitEther\",\"type\":\"uint256\"},{\"name\":\"_minPresaleContributionEther\",\"type\":\"uint256\"},{\"name\":\"_maxPresaleContributionEther\",\"type\":\"uint256\"},{\"name\":\"_preSaleCap\",\"type\":\"uint256\"},{\"name\":\"_honourWhitelistEnd\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contributionState\",\"type\":\"uint8\"}],\"name\":\"ContributionStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedContributionState\",\"type\":\"uint8\"}],\"name\":\"AllowedContributionCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContributionValid\",\"type\":\"bool\"}],\"name\":\"ValidContributionCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"DiscountApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"ContributionRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"preSaleEtherPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalContributions\",\"type\":\"uint256\"}],\"name\":\"CountersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"plannedContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contributed\",\"type\":\"bool\"}],\"name\":\"WhitelistedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whitelistedPlannedContributions\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usedContributions\",\"type\":\"uint256\"}],\"name\":\"WhitelistedCounterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensGenerated\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"SaleClosed\",\"type\":\"event\"}]","ContractName":"SharpePresale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e83492a8d5ef9e46fb47dbe6370097ad050b2240000000000000000000000007f9777f44273c342d877178e0743f8e052dfbbd60000000000000000000000002b33f887c6989939ddc605469237fc4f8acdceb2000000000000000000000000ca0df411edf0004f804ed48687798d72b248a05900000000000000000000000034d80b9c4671836e0c304ffe1fd65b77bbeb7ec100000000000000000000000000000000000000000000000908eb1aa57fda485000000000000000000000000000000000000000000000002d2cc6e3d41445000000000000000000000000000000000000000000000000005a59a576f4730b2ce0000000000000000000000000000000000000000000000001ce97ca0f21055fc000000000000000000000000000000000000000000000005a59a576f4730b2ce00000000000000000000000000000000000000000000005a59a576f4730bf03000000000000000000000000000000000000000000000000000000015f9bee2f18","Library":"","SwarmSource":"bzzr://a87e1d42c368c5d4f3f0dcf4c0e3e16100c0629ae57dc397ca1e457fdad3e9c2"}]}