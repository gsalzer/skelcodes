{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4 .16;\r\n\r\n\r\n\r\n// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\r\n\r\n// Sample fixed supply token contract\r\n\r\n// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\r\n\r\n// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n//https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract ERC20Interface {\r\n\r\n     // Get the total token supply\r\n\r\n    \r\n    function totalSupply() constant returns(uint256 _totalSupply);\r\n\r\n    \r\n\r\n    // Get the account balance of another account with address _owner\r\n\r\n    \r\n    function balanceOf(address _owner) constant returns(uint256 balance);\r\n\r\n    \r\n\r\n     // Send _value amount of tokens to address _to\r\n\r\n    \r\n    function transfer(address _to, uint256 _value) returns(bool success);\r\n\r\n     // Send _value amount of tokens from address _from to address _to\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\r\n\r\n // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n // If this function is called again it overwrites the current allowance with _value.\r\n\r\n// this function is required for some DEX functionality\r\n\r\n \r\n    function approve(address _spender, uint256 _value) returns(bool success);\r\n\r\n   // Returns the amount which _spender is still allowed to withdraw from _owner\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining);\r\n\r\n   // Triggered when tokens are transferred.\r\n\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract FreeCatalugnaCoin is ERC20Interface {\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    \r\n    string public constant name = \"Free Catalugna Coin\";  // Name of Token\r\n    \r\n    string public constant symbol = \"FCC\";     // Symbol of Token\r\n\r\n  uint8 public constant decimals = 18;    // Amount of decimals for display purposes  \r\n\r\n uint256 _totalSupply = 10000000 * 10 **18;  // 10 Million token total supply......muliplied with 10 power 18 because of decimals of 4 precision\r\n\r\n    \r\n    uint256 public constant RATE = 1000;        // 1 Ether = 1000 tokens\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n   // Balances for each account\r\n   mapping(address => uint256) balances;\r\n   \r\n   // Owner of account approves the transfer of an amount to another account\r\n\r\n   mapping(address => mapping(address => uint256)) allowed;\r\n\r\n// Functions with this modifier can only be executed by the owner\r\n\r\n    modifier onlyOwner() {\r\n     if (msg.sender != owner) {\r\n         revert();\r\n            }\r\n            _;\r\n         }\r\n    uint256 tokens;\r\n   \r\n    // This is the Constructor\r\n    \r\n    function FreeCatalugnaCoin() {\r\n       \r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n    \r\n     function() payable {\r\n        buyTokens();\r\n    }\r\n    \r\n    function buyTokens() payable {\r\n\r\n        require(msg.value > 0 );\r\n         tokens = msg.value.mul(RATE);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        \r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n/* \r\n\r\n  function FixedSupplyToken() {\r\n\r\n      owner = msg.sender;\r\n\r\n     balances[owner] = _totalSupply;\r\n        \r\n    } */\r\n\r\n    function totalSupply() constant returns(uint256) {\r\n       return _totalSupply;\r\n    }\r\n\r\n// What is the balance of a particular account?\r\n\r\n    function balanceOf(address _owner) constant returns(uint256 balance) {\r\n\r\n        return balances[_owner];\r\n\r\n    }\r\n// Transfer the balance from owner&#39;s account to another account\r\n  /* Send coins during transactions*/\r\n\r\n    function transfer(address _to, uint256 _amount) returns(bool success) {\r\n\r\n        if (balances[msg.sender] >= _amount &&  balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[msg.sender] -= _amount;\r\n\r\n            balances[_to] += _amount;\r\n\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n// Send _value amount of tokens from address _from to address _to\r\n // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n // tokens on your behalf, for example to &quot;deposit&quot; to a contract address and/or to charge\r\n\r\n// fees in sub-currencies; the command should fail unless the _from account has\r\n// deliberately authorized the sender of the message via some mechanism; we propose\r\n // these standardized APIs for approval:\r\n\r\n    function transferFrom(\r\n\r\n       address _from,\r\n\r\n      address _to,\r\n\r\n       uint256 _amount\r\n\r\n       ) returns(bool success) {\r\n\r\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount &&  _amount > 0 && balances[_to] + _amount > balances[_to]) {\r\n\r\n            balances[_from] -= _amount;\r\n\r\n            allowed[_from][msg.sender] -= _amount;\r\n\r\n            balances[_to] += _amount;\r\n\r\n            Transfer(_from, _to, _amount);\r\n\r\n            return true;\r\n} else \r\n{\r\n return false;\r\n        }\r\n\r\n         }\r\n\r\n    \r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\r\n   // If this function is called again it overwrites the current allowance with _value.\r\n\r\n    function approve(address _spender, uint256 _amount) returns(bool success) {\r\n\r\n     \r\n        allowed[msg.sender][_spender] = _amount;\r\n\r\n        Approval(msg.sender, _spender, _amount);\r\n\r\n      \r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\r\n\r\n          \r\n            return allowed[_owner][_spender];\r\n    }\r\n    \r\n    // Failsafe drain only owner can call this function\r\n    function drain() onlyOwner {\r\n          owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FreeCatalugnaCoin","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5987a6ad98d1ab6b51969af079acaf0a7ce2333573503b59bf19a0837f78a57"}]}