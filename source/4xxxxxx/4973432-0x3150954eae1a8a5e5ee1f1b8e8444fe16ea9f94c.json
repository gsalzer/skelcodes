{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* \r\n\tContract for DeltaBalances.github.io \r\n\tCheck balances for multiple ERC20 tokens in 1 batched request.\r\n*/\r\n\r\n// exchange contract Interface for EtherDelta and forks\r\ncontract Exchange {\r\n  function balanceOf(address /*token*/, address /*user*/) public view returns (uint);\r\n}\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n    function balanceOf(address /*tokenOwner*/) public view returns (uint /*balance*/);\r\n    function transfer(address /*to*/, uint /*tokens*/) public returns (bool /*success*/);\r\n}\r\n\r\ncontract DeltaBalances {\r\n\t\r\n\taddress public admin; \r\n\r\n\tfunction DeltaBalances() public {\r\n        admin = 0xf6E914D07d12636759868a61E52973d17ED7111B; // in case of deploy using MEW with no arguments\r\n\t}\r\n\r\n\t//default function, don't accept any ETH\r\n\tfunction() public payable {\r\n\t\trevert();\r\n\t}\r\n\t\r\n\t//limit address to the creating address\r\n    modifier isAdmin() {\r\n        require(msg.sender == admin);\r\n\t     _;\r\n    }\r\n    \r\n\t// selfdestruct for cleanup\r\n\tfunction destruct() public isAdmin {\r\n\t\tselfdestruct(admin);\r\n\t}\r\n\r\n\t// backup withdraw, if somehow ETH gets in here\r\n\tfunction withdraw() public isAdmin {\r\n    \tadmin.transfer(this.balance);\r\n\t}\r\n\r\n\t// backup withdraw, if somehow ERC20 tokens get in here\r\n\tfunction withdrawToken(address token, uint amount) public isAdmin {\r\n    \trequire(token != address(0x0)); //use withdraw for ETH\r\n    \trequire(Token(token).transfer(msg.sender, amount));\r\n\t}\r\n  \r\n\t/* Get multiple token balances on EtherDelta (or similar exchange)\r\n\t   Possible error throws:\r\n\t       - invalid exchange contract \r\n\t       - using an extremely large array (gas cost too high?)\r\n\t       \r\n\t   Returns array of token balances in wei units. */\r\n\tfunction deltaBalances(address exchange, address user,  address[] tokens) public view returns (uint[]) {\r\n\t\tExchange ex = Exchange(exchange);\r\n\t    uint[] memory balances = new uint[](tokens.length);\r\n\t    \r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t\tbalances[i] = ex.balanceOf(tokens[i], user);\r\n\t\t}\t\r\n\t\treturn balances;\r\n\t}\r\n\t\r\n\t/* Get multiple token balances on EtherDelta (or similar exchange)\r\n\t   Possible error throws:\r\n\t       - invalid exchange contract \r\n\t       - using extremely large arrays (gas cost too high?)\r\n\t       \r\n\t   Returns array of token balances in wei units.\r\n\t   Balances in token-first order [token0ex0, token0ex1, token0ex2, token1ex0, token1ex1 ...] */\r\n\tfunction multiDeltaBalances(address[] exchanges, address user,  address[] tokens) public view returns (uint[]) {\r\n\t    uint[] memory balances = new uint[](tokens.length * exchanges.length);\r\n\t    \r\n\t    for(uint i = 0; i < exchanges.length; i++){\r\n\t\t\tExchange ex = Exchange(exchanges[i]);\r\n\t\t\t\r\n    \t\tfor(uint j = 0; j< tokens.length; j++){\r\n    \t\t    \r\n    \t\t\tbalances[(j * exchanges.length) + i] = ex.balanceOf(tokens[j], user);\r\n    \t\t}\r\n\t    }\r\n\t\treturn balances;\r\n\t}\r\n  \r\n  /* Check the token balance of a wallet in a token contract\r\n     Avoids possible errors:\r\n        - returns 0 on invalid exchange contract \r\n        - return 0 on non-contract address \r\n       \r\n     Mainly for internal use, but public for anyone who thinks it is useful    */\r\n   function tokenBalance(address user, address token) public view returns (uint) {\r\n       //  check if token is actually a contract\r\n        uint256 tokenCode;\r\n        assembly { tokenCode := extcodesize(token) } // contract code size\r\n        if(tokenCode > 0)\r\n        {\r\n            Token tok = Token(token);\r\n            //  check if balanceOf succeeds\r\n            if(tok.call(bytes4(keccak256(\"balanceOf(address)\")), user)) {\r\n                return tok.balanceOf(user);\r\n            } else {\r\n                  return 0; // not a valid balanceOf, return 0 instead of error\r\n            }\r\n        } else {\r\n            return 0; // not a contract, return 0 instead of error\r\n        }\r\n   }\r\n  \r\n    /* Check the token balances of a wallet for multiple tokens\r\n       Uses tokenBalance() to be able to return, even if a token isn't valid \r\n\t   Possible error throws:\r\n\t       - extremely large arrays (gas cost too high) \r\n\t       \r\n\t   Returns array of token balances in wei units. */\r\n\tfunction walletBalances(address user,  address[] tokens) public view returns (uint[]) {\r\n\t    require(tokens.length > 0);\r\n\t\tuint[] memory balances = new uint[](tokens.length);\r\n\t\t\r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t\tif( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n\t\t\t    balances[i] = tokenBalance(user, tokens[i]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t   balances[i] = user.balance; // eth balance\t\r\n\t\t\t}\r\n\t\t}\t\r\n\t\treturn balances;\r\n\t}\r\n\t\r\n\t /* Combine walletBalances() and deltaBalances() to get both exchange and wallet balances for multiple tokens.\r\n\t   Possible error throws:\r\n\t       - extremely large arrays (gas cost too high) \r\n\t       \r\n\t   Returns array of token balances in wei units, 2* input length.\r\n\t   even index [0] is exchange balance, odd [1] is wallet balance\r\n\t   [tok0ex, tok0, tok1ex, tok1, .. ] */\r\n\tfunction allBalances(address exchange, address user,  address[] tokens) public view returns (uint[]) {\r\n\t\tExchange ex = Exchange(exchange);\r\n\t\tuint[] memory balances = new uint[](tokens.length * 2);\r\n\t\t\r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t    uint j = i * 2;\r\n\t\t\tbalances[j] = ex.balanceOf(tokens[i], user);\r\n\t\t\tif( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n\t\t\t    balances[j + 1] = tokenBalance(user, tokens[i]);\r\n\t\t\t} else {\r\n\t\t\t   balances[j + 1] = user.balance; // eth balance\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn balances; \r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchanges\",\"type\":\"address[]\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"multiDeltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"walletBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DeltaBalances","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48501f5d21f582a3844f4049f589b55f6998f381afeede609f3393d592caf77b"}]}