{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20() public {\r\n        totalSupply = 100000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = \"WaraCoin\";                                   // Set the name for display purposes\r\n        symbol = \"WAC\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract  WaraCoin is owned, TokenERC20 {\r\n    \r\n    \r\n    uint256 public waracoin_per_ether;\r\n    \r\n    address waracoin_corp;\r\n    uint256 presale_deadline_count;\r\n    uint256 crowdsale_deadline_count;\r\n    \r\n    /* Save product's genuine information */\r\n    struct Product_genuine\r\n    {\r\n        address m_made_from_who;  // who made this product \r\n        \r\n        string m_Product_GUID;    // product's unique code\r\n        string m_Product_Description; // product's description\r\n        address m_who_have;       // who have this product now\r\n        address m_send_to_who;    // when product move to agency - if it is different with seller, it means that seller have no genuine  \r\n        string m_hash;  // need to check hash of description\r\n        \r\n        uint256 m_moved_count;  // how many times moved this product\r\n    }\r\n    \r\n    mapping (address => mapping (uint256 => Product_genuine)) public MyProducts;\r\n    \r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function WaraCoin() TokenERC20()  public \r\n    {\r\n        presale_deadline_count = 25000000 * 10 ** uint256(decimals);  // after sale this counts will close presale \r\n        crowdsale_deadline_count = 50000000 * 10 ** uint256(decimals);    // after sale this counts will close crowdsale\r\n        waracoin_corp = msg.sender;\r\n        waracoin_per_ether = 10000;\r\n    }\r\n\r\n    /**\r\n     * Set Waracoin sale price\r\n     *\r\n     * @param coincount One counts per one ether\r\n     */\r\n    function setWaracoinPerEther(uint256 coincount) onlyOwner public \r\n    {\r\n        waracoin_per_ether = coincount;\r\n    }\r\n\r\n    /* Set Waracoin sale price */\r\n    function () payable \r\n    {\r\n        if ( msg.sender != owner )  // If owner send Ether, it will use for dApp operation\r\n        {\r\n            uint amount = 0;\r\n            uint nowprice = 0;\r\n            \r\n            if ( presale_deadline_count > 0  )\r\n                nowprice = 10000;   // presale price\r\n            else\r\n                if ( crowdsale_deadline_count > 0)\r\n                    nowprice = 5000;    // crowdsale price\r\n                else\r\n                    nowprice = 1000;    // normalsale price\r\n                    \r\n            amount = msg.value * nowprice; \r\n            \r\n            if ( presale_deadline_count != 0 )\r\n            {\r\n                if ( presale_deadline_count > amount )\r\n                    presale_deadline_count -= amount;\r\n                else\r\n                    presale_deadline_count = 0;\r\n            }\r\n            else\r\n                if ( crowdsale_deadline_count != 0 )\r\n                {\r\n                    if ( crowdsale_deadline_count > amount )\r\n                        crowdsale_deadline_count -= amount;\r\n                    else\r\n                        crowdsale_deadline_count = 0;\r\n                }\r\n                else\r\n                    totalSupply += amount;\r\n    \r\n            balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n            require(waracoin_corp.send(msg.value));\r\n            Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Seller will send WaraCoin to buyer\r\n     *\r\n     * @param _to The address of backers who have WaraCoin\r\n     * @param coin_amount How many WaraCoin will send\r\n     */\r\n    function waraCoinTransfer(address _to, uint256 coin_amount) public\r\n    {\r\n        uint256 amount = coin_amount * 10 ** uint256(decimals);\r\n\r\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\r\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\r\n        balanceOf[_to] += amount;                  // subtracts the amount from seller's balance\r\n        Transfer(msg.sender, _to, amount);               // executes an event reflecting on the change\r\n    }\r\n\r\n    /**\r\n     * Owner will buy back WaraCoin from backers\r\n     *\r\n     * @param _from The address of backers who have WaraCoin\r\n     * @param coin_amount How many WaraCoin will buy back from him\r\n     */\r\n    function buyFrom(address _from, uint256 coin_amount) onlyOwner public \r\n    {\r\n        uint256 amount = coin_amount * 10 ** uint256(decimals);\r\n        uint need_to_pay = amount / waracoin_per_ether;\r\n        \r\n        require(this.balance >= need_to_pay);\r\n        require(balanceOf[_from] >= amount);         // checks if the sender has enough to sell\r\n        balanceOf[_from] -= amount;                  // subtracts the amount from seller's balance\r\n        _from.transfer(need_to_pay);                // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n        Transfer(_from, this, amount);               // executes an event reflecting on the change\r\n    }    \r\n    \r\n    /**\r\n     * Here is WaraCoin's Genuine dApp functions\r\n    */\r\n    \r\n    /* When creator made product, must need to use this fuction for register his product first */\r\n    function registerNewProduct(uint256 product_idx,string new_guid,string product_descriptions,string hash) public returns(bool success)\r\n    {\r\n        uint256 amount = 1 * 10 ** uint256(decimals);        \r\n        \r\n        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for make product code\r\n        \r\n        Product_genuine storage mine = MyProducts[msg.sender][product_idx];\r\n        \r\n        require(mine.m_made_from_who!=msg.sender);\r\n        \r\n        mine.m_made_from_who = msg.sender;\r\n        mine.m_who_have = msg.sender;\r\n        mine.m_Product_GUID = new_guid;\r\n        mine.m_Product_Description = product_descriptions;\r\n        mine.m_hash = hash;\r\n\r\n        balanceOf[msg.sender] -= amount;\r\n        return true;        \r\n    }\r\n    \r\n    /* If product's owner want to move, he need to use this fuction for setting receiver : must use by sender */  \r\n    function setMoveProductToWhom(address who_made_this,uint256 product_idx,address moveto) public returns (bool success)\r\n    {\r\n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\r\n        \r\n        require(mine.m_who_have==msg.sender);\r\n        \r\n        mine.m_send_to_who = moveto;\r\n\r\n        return true;\r\n    }\r\n    \r\n    /* Product's buyer need to use this function for save his genuine */\r\n    function moveProduct(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\r\n    {\r\n        uint256 amount = 1 * 10 ** uint256(decimals);        \r\n\r\n        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for move product\r\n        \r\n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\r\n        \r\n        require(mine.m_who_have==who_have_this);    // if sender have no product, break\r\n        require(mine.m_send_to_who==msg.sender);    // if receiver is not me, break\r\n\r\n        mine.m_who_have = msg.sender;\r\n        mine.m_moved_count += 1;\r\n        \r\n        balanceOf[msg.sender] -= amount;\r\n        \r\n        return true;\r\n    }\r\n\r\n    /* Check Genuine of owner */\r\n    function checkProductGenuine(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\r\n    {\r\n        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\r\n        require(mine.m_who_have==who_have_this);    // if checker have no product, break\r\n        \r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"waracoin_per_ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who_made_this\",\"type\":\"address\"},{\"name\":\"who_have_this\",\"type\":\"address\"},{\"name\":\"product_idx\",\"type\":\"uint256\"}],\"name\":\"moveProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MyProducts\",\"outputs\":[{\"name\":\"m_made_from_who\",\"type\":\"address\"},{\"name\":\"m_Product_GUID\",\"type\":\"string\"},{\"name\":\"m_Product_Description\",\"type\":\"string\"},{\"name\":\"m_who_have\",\"type\":\"address\"},{\"name\":\"m_send_to_who\",\"type\":\"address\"},{\"name\":\"m_hash\",\"type\":\"string\"},{\"name\":\"m_moved_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coincount\",\"type\":\"uint256\"}],\"name\":\"setWaracoinPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"waraCoinTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"product_idx\",\"type\":\"uint256\"},{\"name\":\"new_guid\",\"type\":\"string\"},{\"name\":\"product_descriptions\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"registerNewProduct\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who_made_this\",\"type\":\"address\"},{\"name\":\"product_idx\",\"type\":\"uint256\"},{\"name\":\"moveto\",\"type\":\"address\"}],\"name\":\"setMoveProductToWhom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who_made_this\",\"type\":\"address\"},{\"name\":\"who_have_this\",\"type\":\"address\"},{\"name\":\"product_idx\",\"type\":\"uint256\"}],\"name\":\"checkProductGenuine\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"buyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WaraCoin","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac7ede0dd236a8084cbe8aa9506cdf04e355de1475872c386ab5de81954ee807"}]}