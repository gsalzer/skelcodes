{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Stoppable\r\n * @dev Base contract which allows children to implement a permanent stop mechanism.\r\n */\r\ncontract Stoppable is Ownable {\r\n  event Stop();  \r\n\r\n  bool public stopped = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not stopped.\r\n   */\r\n  modifier whenNotStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is stopped.\r\n   */\r\n  modifier whenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function stop() onlyOwner whenNotStopped public {\r\n    stopped = true;\r\n    Stop();\r\n  }\r\n}\r\n\r\ncontract SpaceRegistry is Stoppable {\r\n    \r\n    event Add();\r\n    mapping(uint => uint) spaces;\r\n\r\n    function addSpace(uint spaceId, uint userHash, bytes orderData) \r\n        onlyOwner whenNotStopped {\r\n\r\n        require(spaceId > 0);\r\n        require(userHash > 0);\r\n        require(orderData.length > 0);\r\n        require(spaces[spaceId] == 0);\r\n        spaces[spaceId] = userHash;\r\n        Add();\r\n    }\r\n\r\n    function addSpaces(uint[] spaceIds, uint[] userHashes, bytes orderData)\r\n        onlyOwner whenNotStopped {\r\n\r\n        var count = spaceIds.length;\r\n        require(count > 0);\r\n        require(userHashes.length == count);\r\n        require(orderData.length > 0);\r\n\r\n        for (uint i = 0; i < count; i++) {\r\n            var spaceId = spaceIds[i];\r\n            var userHash = userHashes[i];\r\n            require(spaceId > 0);\r\n            require(userHash > 0);\r\n            require(spaces[spaceId] == 0);\r\n            spaces[spaceId] = userHash;\r\n        }\r\n\r\n        Add();\r\n    }\r\n\r\n    function getSpaceById(uint spaceId) \r\n        external constant returns (uint userHash) {\r\n\r\n        require(spaceId > 0);\r\n        return spaces[spaceId];\r\n    }\r\n\r\n    function isSpaceExist(uint spaceId) \r\n        external constant returns (bool) {\r\n            \r\n        require(spaceId > 0);\r\n        return spaces[spaceId] > 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spaceId\",\"type\":\"uint256\"}],\"name\":\"isSpaceExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spaceId\",\"type\":\"uint256\"}],\"name\":\"getSpaceById\",\"outputs\":[{\"name\":\"userHash\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spaceIds\",\"type\":\"uint256[]\"},{\"name\":\"userHashes\",\"type\":\"uint256[]\"},{\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"addSpaces\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spaceId\",\"type\":\"uint256\"},{\"name\":\"userHash\",\"type\":\"uint256\"},{\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"addSpace\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SpaceRegistry","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b85ed992038fd57d93bbcdbf2c79e1caa050ef6d352355252134fe64ad79b45a"}]}