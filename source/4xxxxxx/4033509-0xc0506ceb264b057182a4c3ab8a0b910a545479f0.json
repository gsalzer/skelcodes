{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract Token {\r\n    /* Public variables of the token */\r\n    string public standard;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* ERC20 Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function Token(uint256 initialSupply, string _standard, string _name, string _symbol, uint8 _decimals) {\r\n        _totalSupply = initialSupply;\r\n        balanceOf[this] = initialSupply;\r\n        standard = _standard;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /* Get burnable total supply */\r\n    function totalSupply() constant returns(uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Transfer token logic\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n\r\n        balanceOf[_from] -= _value;\r\n\r\n        balanceOf[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        require(_value >= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        return transferInternal(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract ICO {\r\n    uint256 public PRE_ICO_SINCE = 1500303600;                     // 07/17/2017 @ 15:00 (UTC)\r\n    uint256 public PRE_ICO_TILL = 1500476400;                      // 07/19/2017 @ 15:00 (UTC)\r\n    uint256 public constant PRE_ICO_BONUS_RATE = 70;\r\n    uint256 public constant PRE_ICO_SLGN_LESS = 5000 ether;                 // upper limit for pre ico is 5k ether\r\n\r\n    uint256 public ICO_SINCE = 1500994800;                         // 07/25/2017 @ 9:00am (UTC)\r\n    uint256 public ICO_TILL = 1502809200;                          // 08/15/2017 @ 9:00am (UTC)\r\n    uint256 public constant ICO_BONUS1_SLGN_LESS = 20000 ether;                // bonus 1 will work only if 20000 eth were collected during first phase of ico\r\n    uint256 public constant ICO_BONUS1_RATE = 30;                           // bonus 1 rate\r\n    uint256 public constant ICO_BONUS2_SLGN_LESS = 50000 ether;                // bonus 1 will work only if 50000 eth were collected during second phase of ico\r\n    uint256 public constant ICO_BONUS2_RATE = 15; // bonus 2 rate\r\n\r\n    uint256 public totalSoldSlogns;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event BonusEarned(address target, uint256 bonus);\r\n\r\n    /**\r\n     * Calculate amount of premium bonuses\r\n     * @param icoStep identifies is it pre-ico (equals 0) or ico (equals 1)\r\n     * @param totalSoldSlogns total amount of already sold slogn tokens.\r\n     * @param soldSlogns total amount sold slogns in current transaction.\r\n     */\r\n    function calculateBonus(uint8 icoStep, uint256 totalSoldSlogns, uint256 soldSlogns) returns (uint256) {\r\n        if(icoStep == 1) {\r\n            // pre ico\r\n            return soldSlogns / 100 * PRE_ICO_BONUS_RATE;\r\n        }\r\n        else if(icoStep == 2) {\r\n            // ico\r\n            if(totalSoldSlogns > ICO_BONUS1_SLGN_LESS + ICO_BONUS2_SLGN_LESS) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 availableForBonus1 = ICO_BONUS1_SLGN_LESS - totalSoldSlogns;\r\n\r\n            uint256 tmp = soldSlogns;\r\n            uint256 bonus = 0;\r\n\r\n            uint256 tokensForBonus1 = 0;\r\n\r\n            if(availableForBonus1 > 0 && availableForBonus1 <= ICO_BONUS1_SLGN_LESS) {\r\n                tokensForBonus1 = tmp > availableForBonus1 ? availableForBonus1 : tmp;\r\n\r\n                bonus += tokensForBonus1 / 100 * ICO_BONUS1_RATE;\r\n                tmp -= tokensForBonus1;\r\n            }\r\n\r\n            uint256 availableForBonus2 = (ICO_BONUS2_SLGN_LESS + ICO_BONUS1_SLGN_LESS) - totalSoldSlogns - tokensForBonus1;\r\n\r\n            uint256 tokensForBonus2 = 0;\r\n\r\n            if(availableForBonus2 > 0 && availableForBonus2 <= ICO_BONUS2_SLGN_LESS) {\r\n                tokensForBonus2 = tmp > availableForBonus2 ? availableForBonus2 : tmp;\r\n\r\n                bonus += tokensForBonus2 / 100 * ICO_BONUS2_RATE;\r\n                tmp -= tokensForBonus2;\r\n            }\r\n\r\n            return bonus;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract EscrowICO is Token, ICO {\r\n    uint256 public constant MIN_PRE_ICO_SLOGN_COLLECTED = 1000 ether;       // PRE ICO is successful only if sold 10.000.000 slogns\r\n    uint256 public constant MIN_ICO_SLOGN_COLLECTED = 1000 ether;          // ICO is successful only if sold 100.000.000 slogns\r\n\r\n    bool public isTransactionsAllowed;\r\n\r\n    uint256 public totalSoldSlogns;\r\n\r\n    mapping (address => uint256) public preIcoEthers;\r\n    mapping (address => uint256) public icoEthers;\r\n\r\n    event RefundEth(address indexed owner, uint256 value);\r\n    event IcoFinished();\r\n\r\n    function EscrowICO() {\r\n        isTransactionsAllowed = false;\r\n    }\r\n\r\n    function getIcoStep(uint256 time) returns (uint8 step) {\r\n        if(time >=  PRE_ICO_SINCE && time <= PRE_ICO_TILL) {\r\n            return 1;\r\n        }\r\n        else if(time >= ICO_SINCE && time <= ICO_TILL) {\r\n            // ico shoud fail if collected less than 1000 slogns during pre ico\r\n            if(totalSoldSlogns >= MIN_PRE_ICO_SLOGN_COLLECTED) {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * officially finish ICO, only allowed after ICO is ended\r\n     */\r\n    function icoFinishInternal(uint256 time) internal returns (bool) {\r\n        if(time <= ICO_TILL) {\r\n            return false;\r\n        }\r\n\r\n        if(totalSoldSlogns >= MIN_ICO_SLOGN_COLLECTED) {\r\n            // burn tokens assigned to smart contract\r\n\r\n            _totalSupply = _totalSupply - balanceOf[this];\r\n\r\n            balanceOf[this] = 0;\r\n\r\n            // allow transactions for everyone\r\n            isTransactionsAllowed = true;\r\n\r\n            IcoFinished();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * refund ico method\r\n     */\r\n    function refundInternal(uint256 time) internal returns (bool) {\r\n        if(time <= PRE_ICO_TILL) {\r\n            return false;\r\n        }\r\n\r\n        if(totalSoldSlogns >= MIN_PRE_ICO_SLOGN_COLLECTED) {\r\n            return false;\r\n        }\r\n\r\n        uint256 transferedEthers;\r\n\r\n        transferedEthers = preIcoEthers[msg.sender];\r\n\r\n        if(transferedEthers > 0) {\r\n            preIcoEthers[msg.sender] = 0;\r\n\r\n            balanceOf[msg.sender] = 0;\r\n\r\n            msg.sender.transfer(transferedEthers);\r\n\r\n            RefundEth(msg.sender, transferedEthers);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract SlognToken is Token, EscrowICO {\r\n    string public constant STANDARD = 'Slogn v0.1';\r\n    string public constant NAME = 'SLOGN';\r\n    string public constant SYMBOL = 'SLGN';\r\n    uint8 public constant PRECISION = 14;\r\n\r\n    uint256 public constant TOTAL_SUPPLY = 800000 ether; // initial total supply equals to 8.000.000.000 slogns or 800.000 eths\r\n\r\n    uint256 public constant CORE_TEAM_TOKENS = TOTAL_SUPPLY / 100 * 15;       // 15%\r\n    uint256 public constant ADVISORY_BOARD_TOKENS = TOTAL_SUPPLY / 1000 * 15;       // 1.5%\r\n    uint256 public constant OPENSOURCE_TOKENS = TOTAL_SUPPLY / 1000 * 75;     // 7.5%\r\n    uint256 public constant RESERVE_TOKENS = TOTAL_SUPPLY / 100 * 5;          // 5%\r\n    uint256 public constant BOUNTY_TOKENS = TOTAL_SUPPLY / 100;               // 1%\r\n\r\n    address public advisoryBoardFundManager;\r\n    address public opensourceFundManager;\r\n    address public reserveFundManager;\r\n    address public bountyFundManager;\r\n    address public ethFundManager;\r\n    address public owner;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event BonusEarned(address target, uint256 bonus);\r\n\r\n    /* Modifiers */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n\r\n        _;\r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function SlognToken(\r\n    address [] coreTeam,\r\n    address _advisoryBoardFundManager,\r\n    address _opensourceFundManager,\r\n    address _reserveFundManager,\r\n    address _bountyFundManager,\r\n    address _ethFundManager\r\n    )\r\n    Token (TOTAL_SUPPLY, STANDARD, NAME, SYMBOL, PRECISION)\r\n    EscrowICO()\r\n    {\r\n        owner = msg.sender;\r\n\r\n        advisoryBoardFundManager = _advisoryBoardFundManager;\r\n        opensourceFundManager = _opensourceFundManager;\r\n        reserveFundManager = _reserveFundManager;\r\n        bountyFundManager = _bountyFundManager;\r\n        ethFundManager = _ethFundManager;\r\n\r\n        // transfer tokens to core team\r\n        uint256 tokensPerMember = CORE_TEAM_TOKENS / coreTeam.length;\r\n\r\n        for(uint8 i = 0; i < coreTeam.length; i++) {\r\n            transferInternal(this, coreTeam[i], tokensPerMember);\r\n        }\r\n\r\n        // Advisory board fund\r\n        transferInternal(this, advisoryBoardFundManager, ADVISORY_BOARD_TOKENS);\r\n\r\n        // Opensource fund\r\n        transferInternal(this, opensourceFundManager, OPENSOURCE_TOKENS);\r\n\r\n        // Reserve fund\r\n        transferInternal(this, reserveFundManager, RESERVE_TOKENS);\r\n\r\n        // Bounty fund\r\n        transferInternal(this, bountyFundManager, BOUNTY_TOKENS);\r\n    }\r\n\r\n    function buyFor(address _user, uint256 ethers, uint time) internal returns (bool success) {\r\n        require(ethers > 0);\r\n\r\n        uint8 icoStep = getIcoStep(time);\r\n\r\n        require(icoStep == 1 || icoStep == 2);\r\n\r\n        // maximum collected amount for preico is 5000 ether\r\n        if(icoStep == 1 && (totalSoldSlogns + ethers) > 5000 ether) {\r\n            throw;\r\n        }\r\n\r\n        uint256 slognAmount = ethers; // calculates the amount\r\n\r\n        uint256 bonus = calculateBonus(icoStep, totalSoldSlogns, slognAmount);\r\n\r\n        // check for available slogns\r\n        require(balanceOf[this] >= slognAmount + bonus);\r\n\r\n        if(bonus > 0) {\r\n            BonusEarned(_user, bonus);\r\n        }\r\n\r\n        transferInternal(this, _user, slognAmount + bonus);\r\n\r\n        totalSoldSlogns += slognAmount;\r\n\r\n        if(icoStep == 1) {\r\n            preIcoEthers[_user] += ethers;      // fill ethereum used for refund if goal not reached\r\n        }\r\n        if(icoStep == 2) {\r\n            icoEthers[_user] += ethers;      // fill ethereum used for refund if goal not reached\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Buy Slogn tokens\r\n     */\r\n    function buy() payable {\r\n        buyFor(msg.sender, msg.value, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Manage ethereum balance\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transferEther(address to, uint256 value) returns (bool success) {\r\n        if(msg.sender != ethFundManager) {\r\n            return false;\r\n        }\r\n\r\n        if(totalSoldSlogns < MIN_PRE_ICO_SLOGN_COLLECTED) {\r\n            return false;\r\n        }\r\n\r\n        if(this.balance < value) {\r\n            return false;\r\n        }\r\n\r\n        to.transfer(value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if(isTransactionsAllowed == false) {\r\n            if(msg.sender != bountyFundManager) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return transferInternal(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if(isTransactionsAllowed == false) {\r\n            if(_from != bountyFundManager) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return transferFromInternal(_from, _to, _value);\r\n    }\r\n\r\n    function refund() returns (bool) {\r\n        return refundInternal(block.timestamp);\r\n    }\r\n\r\n    function icoFinish() returns (bool) {\r\n        return icoFinishInternal(block.timestamp);\r\n    }\r\n\r\n    function setPreIcoDates(uint256 since, uint256 till) onlyOwner {\r\n        PRE_ICO_SINCE = since;\r\n        PRE_ICO_TILL = till;\r\n    }\r\n\r\n    function setIcoDates(uint256 since, uint256 till) onlyOwner {\r\n        ICO_SINCE = since;\r\n        ICO_TILL = till;\r\n    }\r\n\r\n    function setTransactionsAllowed(bool enabled) onlyOwner {\r\n        isTransactionsAllowed = enabled;\r\n    }\r\n\r\n    function () payable {\r\n        throw;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"reserveFundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_SINCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS2_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opensourceFundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS1_SLGN_LESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TILL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS1_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS2_SLGN_LESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_PRE_ICO_SLOGN_COLLECTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_TEAM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryBoardFundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_TILL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"since\",\"type\":\"uint256\"},{\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"setIcoDates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preIcoEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoStep\",\"type\":\"uint8\"},{\"name\":\"totalSoldSlogns\",\"type\":\"uint256\"},{\"name\":\"soldSlogns\",\"type\":\"uint256\"}],\"name\":\"calculateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORY_BOARD_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"icoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ICO_SLOGN_COLLECTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STANDARD\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyFundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldSlogns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getIcoStep\",\"outputs\":[{\"name\":\"step\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_SLGN_LESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"since\",\"type\":\"uint256\"},{\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"setPreIcoDates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPENSOURCE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_SINCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransactionsAllowed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransactionsAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"coreTeam\",\"type\":\"address[]\"},{\"name\":\"_advisoryBoardFundManager\",\"type\":\"address\"},{\"name\":\"_opensourceFundManager\",\"type\":\"address\"},{\"name\":\"_reserveFundManager\",\"type\":\"address\"},{\"name\":\"_bountyFundManager\",\"type\":\"address\"},{\"name\":\"_ethFundManager\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"BonusEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RefundEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SlognToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000056b9aed2af1bfb967a94b20499bd7236156028a000000000000000000000000cc1d78a8c45b181da76ad8122e716540f720d448000000000000000000000000fb51c6154a694f63fe891085755c4131a7f0fa6000000000000000000000000053b6b6212b65b45956546cc83dafa20cffe22947000000000000000000000000f271597deaa770020f98605e73533c89bafb7b6d000000000000000000000000000000000000000000000000000000000000000400000000000000000000000095e0f97c3924a21ed0fcbbb4a851835091ba987a0000000000000000000000002646e6b5acb3626a77390d9f131256bd896ee276000000000000000000000000cbd75b09d3fdfdf3c229ceef774df6d5f84176a8000000000000000000000000c256059aba84c017220b94359fa4eacfa9a9bac8","Library":"","SwarmSource":"bzzr://520b39c434969b3452207146d6707e4c87a166a43c7bf277f368ab5aa6b45faf"}]}