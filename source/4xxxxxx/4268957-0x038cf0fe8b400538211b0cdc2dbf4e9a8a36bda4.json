{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC20 {\r\n  function transferFrom( address from, address to, uint value) returns (bool ok);\r\n}\r\n\r\n/// @title Multiplexer\r\n/// @author Chris Hitchcott\r\n\r\ncontract Multiplexer {\r\n\r\n\tfunction sendEth(address[] _to, uint256[] _value) payable returns (bool _success) {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n\t\t// count values for refunding sender\r\n\t\tuint256 beforeValue = msg.value;\r\n\t\tuint256 afterValue = 0;\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tafterValue = afterValue + _value[i];\r\n\t\t\tassert(_to[i].send(_value[i]));\r\n\t\t}\r\n\t\t// send back remaining value to sender\r\n\t\tuint256 remainingValue = beforeValue - afterValue;\r\n\t\tif (remainingValue > 0) {\r\n\t\t\tassert(msg.sender.send(remainingValue));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction sendErc20(address _tokenAddress, address[] _to, uint256[] _value) returns (bool _success) {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n\t\t// use the erc20 abi\r\n\t\tERC20 token = ERC20(_tokenAddress);\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendEth\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendErc20\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Multiplexer","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8fb796430a2f6b695751ec6dc1608fac1e8bf7e01e55d98d6d123189886d5e01"}]}