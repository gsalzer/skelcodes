{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * Based on OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * Based on OpenZeppelin\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/PricingStrategy.sol\r\n\r\n/**\r\n * Pricing Strategy - Abstract contract for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  // How many tokens per one investor is allowed in presale\r\n  uint public presaleMaxValue = 0;\r\n\r\n  function isPricingStrategy() external constant returns (bool) {\r\n      return true;\r\n  }\r\n\r\n  function getPresaleMaxValue() public constant returns (uint) {\r\n      return presaleMaxValue;\r\n  }\r\n\r\n  function isPresaleFull(uint weiRaised) public constant returns (bool);\r\n\r\n  function getAmountOfTokens(uint value, uint weiRaised) public constant returns (uint tokensAmount);\r\n}\r\n\r\n// File: contracts/crowdsale/AlgoryPricingStrategy.sol\r\n\r\n/**\r\n * @title Algory Algory Pricing Strategy\r\n *\r\n * @dev based on TokenMarketNet\r\n *\r\n * Apache License, version 2.0 https://github.com/AlgoryProject/algory-ico/blob/master/LICENSE\r\n */\r\ncontract AlgoryPricingStrategy is PricingStrategy, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n    * Define pricing schedule using tranches.\r\n    */\r\n    struct Tranche {\r\n        // Amount in weis when this tranche becomes active\r\n        uint amount;\r\n        // How many tokens per wei you will get while this tranche is active\r\n        uint rate;\r\n    }\r\n\r\n    Tranche[4] public tranches;\r\n\r\n    // How many active tranches we have\r\n    uint public trancheCount = 4;\r\n\r\n    function AlgoryPricingStrategy() {\r\n\r\n        tranches[0].amount = 0;\r\n        tranches[0].rate = 1200;\r\n\r\n        tranches[1].amount = 10000 ether;\r\n        tranches[1].rate = 1100;\r\n\r\n        tranches[2].amount = 24000 ether;\r\n        tranches[2].rate = 1050;\r\n\r\n        tranches[3].amount = 40000 ether;\r\n        tranches[3].rate = 1000;\r\n\r\n        trancheCount = tranches.length;\r\n        presaleMaxValue = 300 ether;\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    function getTranche(uint n) public constant returns (uint amount, uint rate) {\r\n        require(n < trancheCount);\r\n        return (tranches[n].amount, tranches[n].rate);\r\n    }\r\n\r\n    function isPresaleFull(uint presaleWeiRaised) public constant returns (bool) {\r\n        return presaleWeiRaised > tranches[1].amount;\r\n    }\r\n\r\n    function getCurrentRate(uint weiRaised) public constant returns (uint) {\r\n        return getCurrentTranche(weiRaised).rate;\r\n    }\r\n\r\n    function getAmountOfTokens(uint value, uint weiRaised) public constant returns (uint tokensAmount) {\r\n        require(value > 0);\r\n        uint rate = getCurrentRate(weiRaised);\r\n        return value.mul(rate);\r\n    }\r\n\r\n    function getCurrentTranche(uint weiRaised) private constant returns (Tranche) {\r\n        for(uint i=1; i < tranches.length; i++) {\r\n            if(weiRaised <= tranches[i].amount) {\r\n                return tranches[i-1];\r\n            }\r\n        }\r\n        return tranches[tranches.length-1];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isPricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"name\":\"getAmountOfTokens\",\"outputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"presaleWeiRaised\",\"type\":\"uint256\"}],\"name\":\"isPresaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trancheCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresaleMaxValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getTranche\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleMaxValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AlgoryPricingStrategy","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5de5394aed2617b87902de4396579f1cdd3d445cbc98ef28926094d71da23d6f"}]}