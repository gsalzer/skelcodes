{"status":"1","message":"OK","result":[{"SourceCode":"///@title Simple Organisation Management\r\n///@author bsm - moonmission\r\n///@version 0.4\r\n///@date 11 Sep 2017\r\n///@licence: MIT\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract IncomeSplit {\r\n    \r\n    struct Member {\r\n        uint memberIndex;\r\n        uint memberShares;\r\n        uint memberBalance;\r\n    }\r\n    \r\n    /// Variables declarations\r\n    // Address of the contract owner. \r\n    // The owner is the only account which can add/update/remove a member to the organisation.\r\n    // The owner can also trigger fund withdrawals on behalf of another member.\r\n    // The owner is not a member by default.\r\n    // Can be changed using the changeOwner function.\r\n    address OWNER = 0x00cf7440B6E554EC5EeCfA8306761EBc5Bf412b8;\r\n    // We assign the Member structure to each address.\r\n    mapping (address => Member) private Members;\r\n    address[] private index;\r\n    uint totalShares;\r\n    \r\n\r\n    modifier onlyBy(address _user) {\r\n        require(msg.sender == _user);\r\n        _;\r\n    }\r\n\r\n    modifier isUser(address _user) {\r\n        require(index[Members[_user].memberIndex] == _user);\r\n        _;\r\n    }\r\n\r\n    event LogIncomeAllocation(address _address, uint _amount);\r\n    event LogWithdrawal(address _address, uint _amount);\r\n    event LogNewOwner(address _address);\r\n\r\n    function changeOwner(address _newOwner) onlyBy(OWNER) returns(bool success) {\r\n        OWNER = _newOwner;\r\n        LogNewOwner(_newOwner);\r\n        return true;\r\n    }\r\n    \r\n    function getTotalShares() public constant returns(uint) {\r\n        return totalShares;\r\n    }\r\n\r\n    function getMember(address _address) public constant returns(uint _index, uint _shares, uint _balance) {\r\n        _index = Members[_address].memberIndex;\r\n        _shares = Members[_address].memberShares;\r\n        _balance = Members[_address].memberBalance;\r\n\r\n        return(_index, _shares, _balance);\r\n    }\r\n\r\n    function getMemberCount() public constant returns(uint) {\r\n        return index.length;\r\n    }\r\n\r\n    function getMemberAtIndex(uint _index) public constant returns(address) {\r\n        return index[_index];\r\n    }\r\n    \r\n    function addMember(address _address, uint _shares) onlyBy(OWNER) returns(bool success) {\r\n        Members[_address].memberShares = _shares;\r\n        Members[_address].memberIndex = index.push(_address) - 1;\r\n        totalShares += _shares;\r\n        return true;\r\n    }\r\n\r\n    function updateMember(address _address, uint _shares) onlyBy(OWNER) isUser(_address) returns(bool success) {\r\n        uint oldShares = Members[_address].memberShares;\r\n        Members[_address].memberShares = _shares;\r\n        totalShares += (_shares - oldShares);\r\n        return true;\r\n    }\r\n\r\n    function deleteMember(address _address) onlyBy(OWNER) isUser(_address) returns(bool success) {\r\n        uint rowToDelete = Members[_address].memberIndex;\r\n        address keyToMove = index[index.length - 1];\r\n        index[rowToDelete] = keyToMove;\r\n        Members[keyToMove].memberIndex = rowToDelete;\r\n        index.length--;\r\n        return true;\r\n    }\r\n    \r\n    function incomeAllocation() payable {\r\n        uint toBeAllocated = msg.value;\r\n        for (uint i = 0; i < index.length; i++) {\r\n            uint allocationRatio = Members[index[i]].memberShares * 1000000000 / totalShares;\r\n            Members[index[i]].memberBalance += (toBeAllocated * allocationRatio / 1000000000);\r\n            LogIncomeAllocation(index[i], Members[index[i]].memberBalance);\r\n        }\r\n\r\n    }\r\n\r\n    function selfWithdrawBalance() isUser(msg.sender) returns(bool success) {\r\n        uint amount = Members[msg.sender].memberBalance;\r\n        Members[msg.sender].memberBalance = 0;\r\n        msg.sender.transfer(amount);\r\n        LogWithdrawal(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawBalance(address _address) onlyBy(OWNER) isUser(_address) returns(bool success) {\r\n        uint amount = Members[_address].memberBalance;\r\n        Members[msg.sender].memberBalance = 0;\r\n        _address.transfer(amount);\r\n        LogWithdrawal(_address, amount);\r\n        return true;\r\n    }\r\n    \r\n    function() payable {\r\n        if (msg.value == 0) {\r\n            selfWithdrawBalance();\r\n        } else {\r\n            incomeAllocation();\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"deleteMember\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"incomeAllocation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"updateMember\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMemberAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfWithdrawBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogIncomeAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"}]","ContractName":"IncomeSplit","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f4ba241181a65b7531b7bb1d54c4d9b8b6aa3784008346bf92eb6f9f1dc8135b"}]}