{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n    address public releaseAgent;\r\n\r\n    bool public released = false;\r\n\r\n    event Released();\r\n\r\n    event ReleaseAgentSet(address releaseAgent);\r\n\r\n    event TransferAgentSet(address transferAgent, bool status);\r\n\r\n    mapping (address => bool) public transferAgents;\r\n\r\n    modifier canTransfer(address _sender) {\r\n        require(released || transferAgents[_sender]);\r\n        _;\r\n    }\r\n\r\n    modifier inReleaseState(bool releaseState) {\r\n        require(releaseState == released);\r\n        _;\r\n    }\r\n\r\n    modifier onlyReleaseAgent() {\r\n        require(msg.sender == releaseAgent);\r\n        _;\r\n    }\r\n\r\n    function setReleaseAgent(address addr) public onlyOwner inReleaseState(false) {\r\n        ReleaseAgentSet(addr);\r\n        releaseAgent = addr;\r\n    }\r\n\r\n    function setTransferAgent(address addr, bool state) public onlyOwner inReleaseState(false) {\r\n        TransferAgentSet(addr, state);\r\n        transferAgents[addr] = state;\r\n    }\r\n    \r\n    function releaseTokenTransfer() public onlyReleaseAgent {\r\n        Released();\r\n        released = true;\r\n    }\r\n\r\n    function transfer(address _to, \r\n                      uint _value) public canTransfer(msg.sender) returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, \r\n                          address _to, \r\n                          uint _value) public canTransfer(_from) returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract TruMintableToken is ReleasableToken {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    bool public preSaleComplete = false;\r\n\r\n    bool public saleComplete = false;\r\n\r\n    event Minted(address indexed _to, uint256 _amount);\r\n\r\n    event MintFinished(address indexed _executor);\r\n    \r\n    event PreSaleComplete(address indexed _executor);\r\n\r\n    event SaleComplete(address indexed _executor);\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        require(_amount > 0);\r\n        require(_to != address(0));\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Minted(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting(bool _presale, bool _sale) public onlyOwner returns (bool) {\r\n        require(_sale != _presale);\r\n        if (_presale == true) {\r\n            preSaleComplete = true;\r\n            PreSaleComplete(msg.sender);\r\n            return true;\r\n        }\r\n        require(preSaleComplete == true);\r\n        saleComplete = true;\r\n        SaleComplete(msg.sender);\r\n        mintingFinished = true;\r\n        MintFinished(msg.sender);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract UpgradeAgent {\r\n    \r\n    uint public originalSupply;\r\n\r\n    function isUpgradeAgent() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\ncontract TruUpgradeableToken is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    address public upgradeMaster;\r\n\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    uint256 public totalUpgraded;\r\n\r\n    bool private isUpgradeable = true;\r\n\r\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n    event Upgrade(address indexed from, \r\n        address indexed to, \r\n        uint256 upgradeValue);\r\n\r\n    event UpgradeAgentSet(address indexed agent, \r\n        address indexed executor);\r\n\r\n    event NewUpgradedAmount(uint256 originalBalance, \r\n        uint256 newBalance, \r\n        address indexed executor);\r\n    \r\n    modifier onlyUpgradeMaster() {\r\n        require(msg.sender == upgradeMaster);\r\n        _;\r\n    }\r\n\r\n    function TruUpgradeableToken(address _upgradeMaster) public {\r\n        require(_upgradeMaster != address(0));\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    function upgrade(uint256 _value) public {\r\n        UpgradeState state = getUpgradeState();\r\n        require((state == UpgradeState.ReadyToUpgrade) || (state == UpgradeState.Upgrading));\r\n        require(_value > 0);\r\n        require(balances[msg.sender] >= _value);\r\n        uint256 upgradedAmount = totalUpgraded.add(_value);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        uint256 newSenderBalance = senderBalance.sub(_value);      \r\n        uint256 newTotalSupply = totalSupply.sub(_value);\r\n        balances[msg.sender] = newSenderBalance;\r\n        totalSupply = newTotalSupply;        \r\n        NewUpgradedAmount(totalUpgraded, newTotalSupply, msg.sender);\r\n        totalUpgraded = upgradedAmount;\r\n        upgradeAgent.upgradeFrom(msg.sender, _value);\r\n        Upgrade(msg.sender, upgradeAgent, _value);\r\n    }\r\n\r\n    function setUpgradeAgent(address _agent) public onlyUpgradeMaster {\r\n        require(_agent != address(0));\r\n        require(canUpgrade());\r\n        require(getUpgradeState() != UpgradeState.Upgrading);\r\n        UpgradeAgent newUAgent = UpgradeAgent(_agent);\r\n        require(newUAgent.isUpgradeAgent());\r\n        require(newUAgent.originalSupply() == totalSupply);\r\n        UpgradeAgentSet(upgradeAgent, msg.sender);\r\n        upgradeAgent = newUAgent;\r\n    }\r\n\r\n    function getUpgradeState() public constant returns(UpgradeState) {\r\n        if (!canUpgrade())\r\n            return UpgradeState.NotAllowed;\r\n        else if (upgradeAgent == address(0))\r\n            return UpgradeState.WaitingForAgent;\r\n        else if (totalUpgraded == 0)\r\n            return UpgradeState.ReadyToUpgrade;\r\n        else \r\n            return UpgradeState.Upgrading;\r\n    }\r\n\r\n    function setUpgradeMaster(address _master) public onlyUpgradeMaster {\r\n        require(_master != address(0));\r\n        upgradeMaster = _master;\r\n    }\r\n\r\n    function canUpgrade() public constant returns(bool) {\r\n        return isUpgradeable;\r\n    }\r\n}\r\n\r\n\r\ncontract TruReputationToken is TruMintableToken, TruUpgradeableToken {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    string public constant name = \"Tru Reputation Token\";\r\n\r\n    string public constant symbol = \"TRU\";\r\n\r\n    address public execBoard = 0x0;\r\n\r\n    event BoardAddressChanged(address indexed oldAddress, \r\n        address indexed newAddress, \r\n        address indexed executor);\r\n\r\n    modifier onlyExecBoard() {\r\n        require(msg.sender == execBoard);\r\n        _;\r\n    }\r\n\r\n    function TruReputationToken() public TruUpgradeableToken(msg.sender) {\r\n        execBoard = msg.sender;\r\n        BoardAddressChanged(0x0, msg.sender, msg.sender);\r\n    }\r\n    \r\n    function changeBoardAddress(address _newAddress) public onlyExecBoard {\r\n        require(_newAddress != address(0));\r\n        require(_newAddress != execBoard);\r\n        address oldAddress = execBoard;\r\n        execBoard = _newAddress;\r\n        BoardAddressChanged(oldAddress, _newAddress, msg.sender);\r\n    }\r\n\r\n    function canUpgrade() public constant returns(bool) {\r\n        return released && super.canUpgrade();\r\n    }\r\n\r\n    function setUpgradeMaster(address _master) public onlyOwner {\r\n        super.setUpgradeMaster(_master);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeBoardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presale\",\"type\":\"bool\"},{\"name\":\"_sale\",\"type\":\"bool\"}],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"BoardAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"upgradeValue\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"originalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"NewUpgradedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"PreSaleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"SaleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"releaseAgent\",\"type\":\"address\"}],\"name\":\"ReleaseAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferAgent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TransferAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TruReputationToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://588e42ec9ce93252c6ecc1a29a11c37b0745b37039958173b4e7b09d6e3caaf7"}]}