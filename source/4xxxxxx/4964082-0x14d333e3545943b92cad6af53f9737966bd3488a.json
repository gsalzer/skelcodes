{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n\r\n    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n        return div(mul(number, numerator), denominator);\r\n    }\r\n\r\n    // ICO date bonus calculation\r\n    function dateBonus(uint startIco) internal returns (uint256) {\r\n\r\n        // day from ICO start\r\n        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\r\n\r\n        if(daysFromStart >= 1  && daysFromStart <= 14) return 20; // +20% tokens\r\n        if(daysFromStart >= 15 && daysFromStart <= 28) return 15; // +20% tokens\r\n        if(daysFromStart >= 29 && daysFromStart <= 42) return 10; // +10% tokens\r\n        if(daysFromStart >= 43)                        return 5;  // +5% tokens\r\n\r\n        // no discount\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) ownerAppended;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    address[] public owners;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ShiftCashToken is StandardToken, SafeMath {\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string public constant name = \"ShiftCashToken\";\r\n    string public constant symbol = \"SCASH\";\r\n    uint public constant decimals = 18;\r\n\r\n    // tottal supply\r\n\r\n    address public icoContract = 0x0;\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function ShiftCashToken(address _icoContract) {\r\n        assert(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n        totalSupply = 0;\r\n    }\r\n\r\n    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        assert(_from != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = sub(balances[_from], _value);\r\n        totalSupply = sub(totalSupply, _value);\r\n    }\r\n\r\n    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        assert(_to != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        totalSupply = add(totalSupply, _value);\r\n\r\n        if(!ownerAppended[_to]) {\r\n            ownerAppended[_to] = true;\r\n            owners.push(_to);\r\n        }\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint256) {\r\n        return (owners[index], balances[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ShiftCashIco is SafeMath {\r\n    /*\r\n     * ICO meta data\r\n     */\r\n    ShiftCashToken public shiftcashToken;\r\n    AbstractToken public preIcoToken;\r\n\r\n    enum State{\r\n        Pause,\r\n        Init,\r\n        Running,\r\n        Stopped,\r\n        Migrated\r\n    }\r\n\r\n    State public currentState = State.Pause;\r\n\r\n    uint public startIcoDate = 0;\r\n\r\n    // Address of account to which ethers will be tranfered in case of successful ICO\r\n    address public escrow;\r\n    // Address of manager\r\n    address public icoManager;\r\n    // Address of a account, that will transfer tokens from pre-ICO\r\n    address public tokenImporter = 0x0;\r\n    // Addresses of founders and bountyOwner\r\n    address public founder1;\r\n    address public bountyOwner;\r\n\r\n\r\n    // BASE = 10^18\r\n    uint constant BASE = 1000000000000000000;\r\n\r\n    //  5 778 000 SCASH tokens\r\n    uint public constant supplyLimit = 5778000 * BASE;\r\n\r\n    //  86 670 SCASH is token for bountyOwner\r\n    uint public constant bountyOwnersTokens = 86670 * BASE;\r\n\r\n    // 1 ETH = 450 SCASH\r\n    uint public constant PRICE = 450;\r\n\r\n    // 2018.07.05 07:00 UTC\r\n    // founders' reward time\r\n    uint public foundersRewardTime = 1530774000;\r\n\r\n    // Amount of imported tokens from pre-ICO\r\n    uint public importedTokens = 0;\r\n    // Amount of sold tokens on ICO\r\n    uint public soldTokensOnIco = 0;\r\n    // Amount of issued tokens on pre-ICO\r\n    uint public constant soldTokensOnPreIco = 69990267262342250546086;\r\n    // Tokens to founders can be sent only if sentTokensToFounder == false and time > foundersRewardTime\r\n    bool public sentTokensToFounder = false;\r\n    // Tokens to bounty owner can be sent only after ICO\r\n    bool public sentTokensToBountyOwner = false;\r\n\r\n    uint public etherRaised = 0;\r\n\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenInitialized() {\r\n        // only when contract is initialized\r\n        require(currentState >= State.Init);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        // only ICO manager can do this action\r\n        require(msg.sender == icoManager);\r\n        _;\r\n    }\r\n\r\n    modifier onIcoRunning() {\r\n        // Checks, if ICO is running and has not been stopped\r\n        require(currentState == State.Running);\r\n        _;\r\n    }\r\n\r\n    modifier onIcoStopped() {\r\n        // Checks if ICO was stopped or deadline is reached\r\n        require(currentState == State.Stopped);\r\n        _;\r\n    }\r\n\r\n    modifier notMigrated() {\r\n        // Checks if base can be migrated\r\n        require(currentState != State.Migrated);\r\n        _;\r\n    }\r\n\r\n    modifier onlyImporter() {\r\n        // only importer contract is allowed to proceed\r\n        require(msg.sender == tokenImporter);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor of ICO. Requires address of icoManager,\r\n    /// @param _icoManager Address of ICO manager\r\n    /// @param _preIcoToken Address of pre-ICO contract\r\n    function ShiftCashIco(address _icoManager, address _preIcoToken) {\r\n        assert(_preIcoToken != 0x0);\r\n        assert(_icoManager != 0x0);\r\n\r\n        shiftcashToken = new ShiftCashToken(this);\r\n        icoManager = _icoManager;\r\n        preIcoToken = AbstractToken(_preIcoToken);\r\n    }\r\n\r\n    /// @dev Initialises addresses of founders, tokens owner, escrow.\r\n    /// Initialises balances of tokens owner\r\n    /// @param _founder1 Address of founder 1\r\n    /// @param _escrow Address of escrow\r\n    function init(address _founder1, address _escrow) onlyManager {\r\n        assert(currentState != State.Init);\r\n        assert(_founder1 != 0x0);\r\n        assert(_escrow != 0x0);\r\n        founder1 = _founder1;\r\n        escrow = _escrow;\r\n        currentState = State.Init;\r\n    }\r\n\r\n    /// @dev Sets new state\r\n    /// @param _newState Value of new state\r\n    function setState(State _newState) public onlyManager\r\n    {\r\n        currentState = _newState;\r\n        if(currentState == State.Running) {\r\n            startIcoDate = now;\r\n        }\r\n    }\r\n\r\n    /// @dev Sets new manager. Only manager can do it\r\n    /// @param _newIcoManager Address of new ICO manager\r\n    function setNewManager(address _newIcoManager) onlyManager {\r\n        assert(_newIcoManager != 0x0);\r\n        icoManager = _newIcoManager;\r\n    }\r\n\r\n    /// @dev Sets bounty owner. Only manager can do it\r\n    /// @param _bountyOwner Address of Bounty owner\r\n    function setBountyOwner(address _bountyOwner) onlyManager {\r\n        assert(_bountyOwner != 0x0);\r\n        bountyOwner = _bountyOwner;\r\n    }\r\n\r\n    // saves info if account's tokens were imported from pre-ICO\r\n    mapping (address => bool) private importedFromPreIco;\r\n\r\n    /// @dev Imports account's tokens from pre-ICO. It can be done only by user, ICO manager or token importer\r\n    /// @param _account Address of account which tokens will be imported\r\n    function importTokens(address _account) {\r\n        // only token holder or manager can do migration\r\n        require(msg.sender == icoManager || msg.sender == _account);\r\n        require(!importedFromPreIco[_account]);\r\n\r\n        uint preIcoBalance = preIcoToken.balanceOf(_account);\r\n\r\n        if (preIcoBalance > 0) {\r\n            shiftcashToken.emitTokens(_account, preIcoBalance);\r\n            importedTokens = add(importedTokens, preIcoBalance);\r\n        }\r\n\r\n        importedFromPreIco[_account] = true;\r\n    }\r\n\r\n    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\r\n    /// @param _buyer Address of account which will receive tokens\r\n    function buyTokens(address _buyer) private {\r\n        assert(_buyer != 0x0);\r\n        require(msg.value > 0);\r\n\r\n        uint tokensToEmit = msg.value * PRICE;\r\n        //calculate date bonus\r\n        uint bonusPercent = dateBonus(startIcoDate);\r\n        //total bonus tokens\r\n\r\n        if(bonusPercent > 0){\r\n            tokensToEmit =  tokensToEmit + mulByFraction(tokensToEmit, bonusPercent, 100);\r\n        }\r\n\r\n        require(add(soldTokensOnIco, tokensToEmit) <= supplyLimit);\r\n\r\n        soldTokensOnIco = add(soldTokensOnIco, tokensToEmit);\r\n\r\n        //emit tokens to token holder\r\n        shiftcashToken.emitTokens(_buyer, tokensToEmit);\r\n\r\n        etherRaised = add(etherRaised, msg.value);\r\n\r\n        if(this.balance > 0) {\r\n            require(escrow.send(this.balance));\r\n        }\r\n\r\n    }\r\n\r\n    /// @dev Fall back function\r\n    function () payable onIcoRunning {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Burn tokens from accounts only in state \"not migrated\". Only manager can do it\r\n    /// @param _from Address of account\r\n    function burnTokens(address _from, uint _value) onlyManager notMigrated {\r\n        shiftcashToken.burnTokens(_from, _value);\r\n    }\r\n\r\n    /// @dev Partial withdraw. Only manager can do it\r\n    function withdrawEther(uint _value) onlyManager {\r\n        require(_value > 0);\r\n        escrow.transfer(_value);\r\n    }\r\n\r\n    /// @dev Ether withdraw. Only manager can do it\r\n    function withdrawAllEther() onlyManager {\r\n        if(this.balance > 0) {\r\n            escrow.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    ///@dev Send tokens to bountyOwner depending on crowdsale results. Can be send only after ICO.\r\n    function sendTokensToBountyOwner() onlyManager whenInitialized {\r\n        require(!sentTokensToBountyOwner);\r\n\r\n        //Calculate total tokens sold on pre-ICO and ICO\r\n        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\r\n\r\n        //Calculate bounty tokens depending on total tokens sold\r\n        uint bountyTokens = mulByFraction(tokensSold, 15, 1000); // 1.5%\r\n\r\n        shiftcashToken.emitTokens(bountyOwner, bountyTokens);\r\n\r\n        sentTokensToBountyOwner = true;\r\n    }\r\n\r\n    /// @dev Send tokens to founders. Can be sent only after shiftcashToken.rewardTime() (2018.07.05 0:00 UTC)\r\n    function sendTokensToFounders() onlyManager whenInitialized {\r\n        require(!sentTokensToFounder && now >= foundersRewardTime);\r\n\r\n        //Calculate total tokens sold on pre-ICO and ICO\r\n        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\r\n\r\n        //Calculate founder reward depending on total tokens sold\r\n        uint totalRewardToFounder = mulByFraction(tokensSold, 1000, 10000); // 10%\r\n\r\n        shiftcashToken.emitTokens(founder1, totalRewardToFounder);\r\n\r\n        sentTokensToFounder = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensOnPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"importedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToBountyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenImporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOwnersTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersRewardTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTokensToBountyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sentTokensToFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyOwner\",\"type\":\"address\"}],\"name\":\"setBountyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shiftcashToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startIcoDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIcoManager\",\"type\":\"address\"}],\"name\":\"setNewManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensOnIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"importTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder1\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoManager\",\"type\":\"address\"},{\"name\":\"_preIcoToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ShiftCashIco","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001023f13c45807508dcf20ab7c8dfab57f3337b6f0000000000000000000000001023f13c45807508dcf20ab7c8dfab57f3337b6f","Library":"","SwarmSource":"bzzr://cdac71351403a1a2b0008b89c774b2a796512899f9c1defe3a95f1813195b069"}]}