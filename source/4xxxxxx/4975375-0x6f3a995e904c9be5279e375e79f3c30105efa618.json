{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the PROOF Contract.\r\n\r\nThe PROOF Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe PROOF Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the PROOF Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@prover.io>\r\n*/\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public candidate;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        candidate = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Base of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract BaseERC20 {\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n}\r\n\r\ncontract ManualMigration is owned {\r\n\r\n    address                      public original = 0x5B5d8A8A732A3c73fF0fB6980880Ef399ecaf72E;\r\n    uint                         public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    uint                         public numberOfInvestors;\r\n    mapping (address => bool)    public investors;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function ManualMigration() public owned() {}\r\n\r\n    function migrateManual(address _who, bool _preico) public onlyOwner {\r\n        require(original != 0);\r\n        require(balanceOf[_who] == 0);\r\n        uint balance = BaseERC20(original).balanceOf(_who);\r\n        balance *= _preico ? 27 : 45;\r\n        balance /= 10;\r\n        balance *= 100000000;\r\n        balanceOf[_who] = balance;\r\n        totalSupply += balance;\r\n        if (!investors[_who]) {\r\n            investors[_who] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        Transfer(original, _who, balance);\r\n    }\r\n    \r\n    function migrateListManual(address [] _who, bool _preico) public onlyOwner {\r\n        for(uint i = 0; i < _who.length; ++i) {\r\n            migrateManual(_who[i], _preico);\r\n        }\r\n    }\r\n    \r\n    function sealManualMigration() public onlyOwner {\r\n        delete original;\r\n    }\r\n}\r\n\r\ncontract Crowdsale is ManualMigration {\r\n\r\n    address public backend;\r\n    address public cryptaurToken = 0x88d50B466BE55222019D71F9E8fAe17f5f45FCA1;\r\n    uint    public crowdsaleStartTime = 1517270400;  // 30 January 2018, GMT 00:00:00\r\n    uint    public crowdsaleFinishTime = 1522454400; // 31 March 2018, 00:00:00\r\n    uint    public etherPrice;\r\n    uint    public collectedUSD;\r\n    bool    public crowdsaleFinished;\r\n\r\n    event Mint(address indexed minter, uint tokens, bytes32 originalTxHash);\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    modifier isCrowdsale() {\r\n        require(now >= crowdsaleStartTime && now <= crowdsaleFinishTime);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(address _backend, uint _etherPrice) public ManualMigration() {\r\n        backend = _backend;\r\n        etherPrice = _etherPrice;\r\n    }\r\n\r\n    function changeBackend(address _backend) public onlyOwner {\r\n        backend = _backend;\r\n    }\r\n    \r\n    function setEtherPrice(uint _etherPrice) public {\r\n        require(msg.sender == owner || msg.sender == backend);\r\n        etherPrice = _etherPrice;\r\n    }\r\n\r\n    function () payable public isCrowdsale {\r\n        uint valueUSD = msg.value * etherPrice / 1 ether;\r\n        collectedUSD += valueUSD;\r\n        mintTokens(msg.sender, valueUSD);\r\n    }\r\n\r\n    function depositUSD(address _who, uint _valueUSD) public isCrowdsale {\r\n        require(msg.sender == backend || msg.sender == owner);\r\n        collectedUSD += _valueUSD;\r\n        mintTokens(_who, _valueUSD);\r\n    }\r\n\r\n    function mintTokens(address _who, uint _valueUSD) internal {\r\n        uint tokensPerUSD = 100;\r\n        if (_valueUSD >= 50000) {\r\n            tokensPerUSD = 120;\r\n        } else if (now < crowdsaleStartTime + 1 days) {\r\n            tokensPerUSD = 115;\r\n        } else if (now < crowdsaleStartTime + 1 weeks) {\r\n            tokensPerUSD = 110;\r\n        }\r\n        uint tokens = tokensPerUSD * _valueUSD * 100000000;\r\n        require(balanceOf[_who] + tokens > balanceOf[_who]); // overflow\r\n        require(tokens > 0);\r\n        balanceOf[_who] += tokens;\r\n        if (!investors[_who]) {\r\n            investors[_who] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        Transfer(this, _who, tokens);\r\n        totalSupply += tokens;\r\n    }\r\n\r\n    function depositCPT(address _who, uint _valueCPT, bytes32 _originalTxHash) public isCrowdsale {\r\n        require(msg.sender == backend || msg.sender == owner);\r\n        // decimals in CPT and PROOF are the same and equal 8\r\n        uint tokens = 15 * _valueCPT / 10;\r\n        require(balanceOf[_who] + tokens > balanceOf[_who]); // overflow\r\n        require(tokens > 0);\r\n        balanceOf[_who] += tokens;\r\n        totalSupply += tokens;\r\n        collectedUSD += _valueCPT / 100;\r\n        if (!investors[_who]) {\r\n            investors[_who] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        Transfer(this, _who, tokens);\r\n        Mint(_who, tokens, _originalTxHash);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        require(msg.sender.call.gas(3000000).value(this.balance)());\r\n        uint balance = BaseERC20(cryptaurToken).balanceOf(this);\r\n        BaseERC20(cryptaurToken).transfer(msg.sender, balance);\r\n    }\r\n    \r\n    function finishCrowdsale() public onlyOwner {\r\n        require(!crowdsaleFinished);\r\n        uint extraTokens = totalSupply / 2;\r\n        balanceOf[msg.sender] += extraTokens;\r\n        totalSupply += extraTokens;\r\n        if (!investors[msg.sender]) {\r\n            investors[msg.sender] = true;\r\n            ++numberOfInvestors;\r\n        }\r\n        Transfer(this, msg.sender, extraTokens);\r\n        crowdsaleFinished = true;\r\n    }\r\n}\r\n\r\ncontract ProofToken is Crowdsale {\r\n\r\n    string  public standard = 'Token 0.1';\r\n    string  public name     = 'PROOF';\r\n    string  public symbol   = 'PF';\r\n    uint8   public decimals = 8;\r\n\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed owner, uint value);\r\n\r\n    function ProofToken(address _backend, uint _etherPrice) public\r\n        payable Crowdsale(_backend, _etherPrice) {\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]); // overflow\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function burn(uint _value) public {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"setEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptaurToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_valueCPT\",\"type\":\"uint256\"},{\"name\":\"_originalTxHash\",\"type\":\"bytes32\"}],\"name\":\"depositCPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"original\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address[]\"},{\"name\":\"_preico\",\"type\":\"bool\"}],\"name\":\"migrateListManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_preico\",\"type\":\"bool\"}],\"name\":\"migrateManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_valueUSD\",\"type\":\"uint256\"}],\"name\":\"depositUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backend\",\"type\":\"address\"}],\"name\":\"changeBackend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sealManualMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_backend\",\"type\":\"address\"},{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"originalTxHash\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ProofToken","CompilerVersion":"v0.4.17-nightly.2017.8.28+commit.d15cde2a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5258cd98618dde2db6c4115fe4a44780c2ac4ab9aad49a82c801e3231ceb8f18"}]}