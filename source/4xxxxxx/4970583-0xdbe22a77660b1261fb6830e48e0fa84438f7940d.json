{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n   \r\n   \r\n   \r\n   \r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\nfunction div(uint256 a, uint256 b) internal returns (uint256) {\r\n    \r\n    uint256 c = a / b;\r\n    \r\n    return c;\r\n    }\r\n \r\nfunction sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n\r\nfunction add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n    }\r\n} \r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value);\r\n    function approve(address spender, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transfer(address _to, uint256 _value) {\r\n    \r\n    require ( balances[msg.sender] >= _value);\r\n    require ( balances[_to] + _value >= balances[_to]);\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n}\r\n\r\n\r\nfunction burn(uint256 _value) {\r\n    \r\n    require ( balances[msg.sender] >= _value);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    \r\n    Burn(msg.sender, _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n}\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n   \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   function transferFrom(address _from, address _to, uint256 _value) {\r\n       var _allowance = allowed[_from][msg.sender];\r\n       \r\n       \r\n       \r\n       \r\n       balances[_to] = balances[_to].add(_value);\r\n       balances[_from] = balances[_from].sub(_value);\r\n       allowed[_from][msg.sender] = _allowance.sub(_value);\r\n       Transfer(_from, _to, _value);\r\n   } \r\n   \r\n\r\n\r\n\r\n\r\n\r\n   function approve(address _spender, uint256 _value) {\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    require ( !((_value !=0) && (allowed[msg.sender][_spender] !=0)));\r\n    \r\n    \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n}\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\nmodifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    \r\n    _;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n}\r\n\r\ncontract WanToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    string public name = \"WanCoin\";\r\n    string public symbol = \"WAN\";\r\n    uint256 public decimals = 18;\r\n    \r\n    bool public mintingFinished = false;\r\n    \r\n    \r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    function MintableToken() {\r\n        mint(msg.sender, 210000000000000000000000000);\r\n     finishMinting();   \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    \r\n     \r\n}\r\n\r\ncontract SwapToken is WanToken {\r\n    WanToken BasicToken;\r\n    mapping(address => bool) migrated;\r\n    \r\n    function SwapToken (WanToken _basicToken) {\r\n        BasicToken = _basicToken;\r\n        totalSupply = 210000000000000000000000000;\r\n    }\r\n    \r\n    function migration (address _owner) internal {\r\n        if (!migrated[_owner]) {\r\n            balances[_owner] = balances[_owner].add(BasicToken.balanceOf(_owner));\r\n            migrated[_owner] = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) {\r\n        migration (msg.sender);\r\n        require ( balances[msg.sender] >= _value);\r\n        require ( balances[_to] + _value >= balances[_to]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    \r\n    function burn(uint256 _value) {\r\n        migration (msg.sender);\r\n        require ( balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        \r\n        Burn(msg.sender, _value);\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        migration(_owner);\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n        \r\n        migration (msg.sender);\r\n        \r\n        \r\n        \r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function approve(address _spender, uint256 _value) {\r\n        \r\n        migration (msg.sender);\r\n        \r\n        \r\n        \r\n        \r\n        require ( !((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n        \r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    WanToken public token;\r\n    \r\n    \r\n    uint256 public deadline;\r\n    \r\n    \r\n    address public wallet;\r\n    \r\n    \r\n    uint256 public rate;\r\n    \r\n    \r\n    uint256 public weiRaised;\r\n    \r\n    \r\n    uint256 public tokensSold;\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n    \r\n    function Crowdsale(WanToken tokenContract, uint256 durationInWeeks, uint256 _rate, address _wallet) {\r\n        \r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n        \r\n        \r\n        token = tokenContract;\r\n        \r\n        deadline = now + durationInWeeks * 1 weeks;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        \r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    function setNewTokenOwner(address newOwner) onlyOwner {\r\n        token.transferOwnership(newOwner);\r\n    }\r\n    \r\n    \r\n    \r\n    function createTokenContract() internal returns (WanToken) {\r\n        return new WanToken();\r\n    }\r\n    \r\n    \r\n    \r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    \r\n    function buyTokens(address beneficiary) payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        uint256 updatedweiRaised = weiRaised.add(weiAmount);\r\n        \r\n        \r\n        uint256 tokens = weiAmount.mul(rate);\r\n        \r\n        \r\n        require ( tokens <= token.balanceOf(this) );\r\n        \r\n        \r\n        weiRaised = updatedweiRaised;\r\n        \r\n        \r\n        token.transfer(beneficiary, tokens);\r\n        \r\n        tokensSold = tokensSold.add(tokens);\r\n        \r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        \r\n        forwardFunds();\r\n    }\r\n    \r\n    \r\n    \r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n    \r\n    \r\n    function validPurchase() internal constant returns (bool) {\r\n        uint256 current = block.number;\r\n        bool withinPeriod = now <= deadline;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        \r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n    \r\n    \r\n    function hasEnded() public constant returns (bool) {\r\n        return ( now > deadline);\r\n        \r\n        \r\n    }\r\n    \r\n    function tokenResend() onlyOwner {\r\n        \r\n        \r\n        \r\n        token.transfer(owner, token.balanceOf(this));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MintableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"WanToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f381d271b29fc93429cac53b31a20cd94435c2b6865f05ebf2918bd8da8e9a5"}]}