{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMathLib {\r\n\r\n  function times(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a);\r\n    return c;\r\n  }\r\n\r\n  function divide(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n//basic ownership contract\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    //ensures only owner can call functions\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    //constructor makes sets owner to contract deployer\r\n    function Owned() public { owner = msg.sender;}\r\n\r\n    //update owner\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        NewOwner(msg.sender, _newOwner);\r\n    }\r\n\r\n    event NewOwner(address indexed oldOwner, address indexed newOwner);\r\n}\r\n\r\n/**\r\n * Collect funds from presale investors to be manually send to the crowdsale smart contract later.\r\n *\r\n * - Collect funds from pre-sale investors\r\n * - Send funds to an specified address when the pre-sale ends\r\n * \r\n */ \r\ncontract DadaPresaleFundCollector is Owned {\r\n\r\n  using SafeMathLib for uint;\r\n\r\n  address public presaleAddressAmountHolder = 0xF636c93F98588b7F1624C8EC4087702E5BE876b6;\r\n\r\n  /** How much they have invested */\r\n  mapping(address => uint) public balances;\r\n\r\n  /** What is the minimum buy in */\r\n  uint constant maximumIndividualCap = 500 ether;\r\n  // Limit in Ether for this contract to allow investment\r\n  uint constant etherCap = 3000 ether;\r\n\r\n  /** Have we begun to move funds */\r\n  bool public moving;\r\n\r\n  // turned off while doing initial configuration of the whitelist\r\n  bool public isExecutionAllowed;\r\n\r\n  // turned on when the refund function is allowed to be isExecutionAllowed\r\n  bool public isRefundAllowed;\r\n  \r\n  // Used to handle if the cap was reached due to investment received \r\n  // in either Bitcoin or USD\r\n  bool public isCapReached;\r\n\r\n  bool public isFinalized;\r\n\r\n  mapping (address => bool) public whitelist;\r\n\r\n  event Invested(address investor, uint value);\r\n  event Refunded(address investor, uint value);\r\n  event WhitelistUpdated(address whitelistedAddress, bool isWhitelisted);\r\n  event EmptiedToWallet(address wallet);\r\n\r\n  /**\r\n   * Create presale contract where lock up period is given days\r\n   */\r\n  function DadaPresaleFundCollector() public {\r\n\r\n  }\r\n\r\n  /**\r\n  * Whitelist handler function \r\n  **/\r\n  function updateWhitelist(address whitelistedAddress, bool isWhitelisted) public onlyOwner {\r\n    whitelist[whitelistedAddress] = isWhitelisted;\r\n    WhitelistUpdated(whitelistedAddress, isWhitelisted);\r\n  }\r\n\r\n  /**\r\n   * Participate in the presale.\r\n   */\r\n  function invest() public payable {\r\n    // execution shoulf be turned ON\r\n    require(isExecutionAllowed);\r\n    // the cap shouldn't be reached yet\r\n    require(!isCapReached);\r\n    // the final balance of the contract should not be greater than\r\n    // the etherCap\r\n    uint currentBalance = this.balance;\r\n    require(currentBalance <= etherCap);\r\n\r\n    // Cannot invest anymore through crowdsale when moving has begun\r\n    require(!moving);\r\n    address investor = msg.sender;\r\n    // the investor is whitlisted\r\n    require(whitelist[investor]);\r\n    \r\n    // the total balance of the user shouldn't be greater than the maximumIndividualCap\r\n    require((balances[investor].plus(msg.value)) <= maximumIndividualCap);\r\n\r\n    require(msg.value <= maximumIndividualCap);\r\n    balances[investor] = balances[investor].plus(msg.value);\r\n    // if the cap is reached then turn ON the flag\r\n    if (currentBalance == etherCap){\r\n      isCapReached = true;\r\n    }\r\n    Invested(investor, msg.value);\r\n  }\r\n\r\n  /**\r\n   * Allow refund if isRefundAllowed is ON.\r\n   */\r\n  function refund() public {\r\n    require(isRefundAllowed);\r\n    address investor = msg.sender;\r\n    require(this.balance > 0);\r\n    require(balances[investor] > 0);\r\n    // We have started to move funds\r\n    moving = true;\r\n    uint amount = balances[investor];\r\n    balances[investor] = 0;\r\n    investor.transfer(amount);\r\n    Refunded(investor, amount);\r\n  }\r\n\r\n  // utility functions\r\n  function emptyToWallet() public onlyOwner {\r\n    require(!isFinalized);\r\n    isFinalized = true;\r\n    moving = true;\r\n    presaleAddressAmountHolder.transfer(this.balance);\r\n    EmptiedToWallet(presaleAddressAmountHolder); \r\n  }  \r\n\r\n  function flipExecutionSwitchTo(bool state) public onlyOwner{\r\n    isExecutionAllowed = state;\r\n  }\r\n\r\n  function flipCapSwitchTo(bool state) public onlyOwner{\r\n    isCapReached = state;\r\n  }\r\n\r\n  function flipRefundSwitchTo(bool state) public onlyOwner{\r\n    isRefundAllowed = state;\r\n  }\r\n\r\n  function flipFinalizedSwitchTo(bool state) public onlyOwner{\r\n    isFinalized = state;\r\n  }\r\n\r\n  function flipMovingSwitchTo(bool state) public onlyOwner{\r\n    moving = state;\r\n  }  \r\n\r\n  /** Explicitly call function from your wallet. */\r\n  function() public payable {\r\n    revert();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedAddress\",\"type\":\"address\"},{\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"flipCapSwitchTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"flipMovingSwitchTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"flipRefundSwitchTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddressAmountHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyToWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"flipFinalizedSwitchTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExecutionAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moving\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"flipExecutionSwitchTo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whitelistedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"EmptiedToWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"DadaPresaleFundCollector","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50c0c7f1edd45087520ddaa14b46e50bc56d7a76177bc5ad95b7c62f78f3c92b"}]}