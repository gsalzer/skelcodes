{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/* \r\n * IGNITE RATINGS \"PHASED DISCOUNT\" CROWDSALE CONTRACT. COPYRIGHT 2018 TRUSTIC HOLDING INC. Author - Damon Barnard (damon@igniteratings.com)\r\n * CONTRACT DEPLOYS A CROWDSALE WITH TIME-BASED REDUCING DISCOUNTS.\r\n */\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\n/*\r\n * CONTRACT PERMITS IGNITE TO RECLAIM UNSOLD IGNT\r\n */\r\ncontract withdrawToken {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function balanceOf(address _owner) external constant returns (uint balance);\r\n}\r\n\r\n/*\r\n * SAFEMATH - MATH OPERATIONS WITH SAFETY CHECKS THAT THROW ON ERROR\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\n * CROWDSALE CONTRACT CONSTRUCTOR\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner; /* CONTRACT OWNER */\r\n    address public operations; /* OPERATIONS MULTISIG WALLET */\r\n    address public index; /* IGNITE INDEX WALLET */\r\n    uint256 public amountRaised; /* TOTAL ETH CONTRIBUTIONS*/\r\n    uint256 public amountRaisedPhase; /* ETH CONTRIBUTIONS SINCE LAST WITHDRAWAL EVENT */\r\n    uint256 public tokensSold; /* TOTAL TOKENS SOLD */\r\n    uint256 public phase1Price; /* PHASE 1 TOKEN PRICE */\r\n    uint256 public phase2Price; /* PHASE 2 TOKEN PRICE */\r\n    uint256 public phase3Price; /* PHASE 3 TOKEN PRICE */\r\n    uint256 public phase4Price; /* PHASE 4 TOKEN PRICE */\r\n    uint256 public phase5Price; /* PHASE 5 TOKEN PRICE */\r\n    uint256 public phase6Price; /* PHASE 6 TOKEN PRICE */\r\n    uint256 public startTime; /* CROWDSALE START TIME */\r\n    token public tokenReward; /* IGNT */\r\n    mapping(address => uint256) public contributionByAddress;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(\r\n        uint saleStartTime,\r\n        address ownerAddress,\r\n        address operationsAddress,\r\n        address indexAddress,\r\n        address rewardTokenAddress\r\n\r\n    ) public {\r\n        startTime = saleStartTime; /* SETS START TIME */\r\n        owner = ownerAddress; /* SETS OWNER */\r\n        operations = operationsAddress; /* SETS OPERATIONS MULTISIG WALLET */\r\n        index = indexAddress; /* SETS IGNITE INDEX WALLET */\r\n        phase1Price = 0.00600 ether; /* SETS PHASE 1 TOKEN PRICE */\r\n        phase2Price = 0.00613 ether; /* SETS PHASE 2 TOKEN PRICE */\r\n        phase3Price = 0.00627 ether; /* SETS PHASE 3 TOKEN PRICE */\r\n        phase4Price = 0.00640 ether; /* SETS PHASE 4 TOKEN PRICE */\r\n        phase5Price = 0.00653 ether; /* SETS PHASE 5 TOKEN PRICE */\r\n        phase6Price = 0.00667 ether; /* SETS PHASE 6 TOKEN PRICE */\r\n        tokenReward = token(rewardTokenAddress); /* SETS IGNT AS CONTRACT REWARD */\r\n    }\r\n\r\n    /*\r\n     * FALLBACK FUNCTION FOR ETH CONTRIBUTIONS - SET OUT PER DISCOUNT PHASE FOR EASE OF UNDERSTANDING/TRANSPARENCY\r\n     */\r\n    function () public payable {\r\n        uint256 amount = msg.value;\r\n        require(now > startTime);\r\n        require(amount <= 1000 ether);\r\n\r\n        if(now < startTime.add(7 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 1 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase1Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase1Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n\r\n        else if(now > startTime.add(7 days) && now < startTime.add(14 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 2 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase2Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase2Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n\r\n        else if(now > startTime.add(14 days) && now < startTime.add(21 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 3 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase3Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase3Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n\r\n        else if(now > startTime.add(21 days) && now < startTime.add(28 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 4 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase4Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase4Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n\r\n        else if(now > startTime.add(28 days) && now < startTime.add(35 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 5 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase5Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase5Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n\r\n        else if(now > startTime.add(35 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 6 */\r\n            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountRaisedPhase = amountRaisedPhase.add(amount);\r\n            tokensSold = tokensSold.add(amount.mul(10**18).div(phase6Price));\r\n            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase6Price));\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * ALLOW IGNITE TO RECLAIM UNSOLD IGNT\r\n     */\r\n    function withdrawTokens(address tokenContract) external onlyOwner {\r\n        withdrawToken tc = withdrawToken(tokenContract);\r\n\r\n        tc.transfer(owner, tc.balanceOf(this));\r\n    }\r\n    \r\n    /*\r\n     * ALLOW IGNITE TO WITHDRAW CROWDSALE PROCEEDS TO OPERATIONS AND INDEX WALLETS\r\n     */\r\n    function withdrawEther() external onlyOwner {\r\n        uint256 total = this.balance;\r\n        uint256 operationsSplit = 40;\r\n        uint256 indexSplit = 60;\r\n        operations.transfer(total * operationsSplit / 100);\r\n        index.transfer(total * indexSplit / 100);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase2Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase1Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase6Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase3Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase4Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase5Price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaisedPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"operationsAddress\",\"type\":\"address\"},{\"name\":\"indexAddress\",\"type\":\"address\"},{\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a6626a00000000000000000000000008962cd4a9023aafe7a4ffcde97ea144accda25570000000000000000000000001563bd1ed3f8f934f763d25962f46e7338d179060000000000000000000000007506df32e73749266250cc08603d0dba4a7e63c20000000000000000000000005be10663de76c72aa40b80fce64acc8879316404","Library":"","SwarmSource":"bzzr://5fff81baea83fc1f7f75b055bc026ffe9e619cc6c892320c89b3a653c232f60d"}]}