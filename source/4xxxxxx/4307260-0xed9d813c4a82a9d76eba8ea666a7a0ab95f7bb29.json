{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract AbstractStarbaseToken {\r\n    function isFundraiser(address fundraiserAddress) public returns (bool);\r\n    function company() public returns (address);\r\n    function allocateToCrowdsalePurchaser(address to, uint256 value) public returns (bool);\r\n    function allocateToMarketingSupporter(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Crowdsale contract - Starbase marketing campaign contract to reward supportors\r\n * @author Starbase PTE. LTD. - <info@starbase.co>\r\n */\r\ncontract StarbaseMarketingCampaign is Ownable {\r\n    /*\r\n     *  Events\r\n     */\r\n    event NewContributor (address indexed contributorAddress, uint256 tokenCount);\r\n    event WithdrawContributorsToken(address indexed contributorAddress, uint256 tokenWithdrawn);\r\n\r\n    /**\r\n     *  External contracts\r\n     */\r\n    AbstractStarbaseToken public starbaseToken;\r\n\r\n    /**\r\n     * Types\r\n     */\r\n    struct Contributor {\r\n        uint256 rewardedTokens;\r\n        mapping (bytes32 => bool) contributions;  // example: keccak256(bcm-xda98sdf) => true\r\n        bool isContributor;\r\n    }\r\n\r\n    /**\r\n     *  Storage\r\n     */\r\n    address[] public contributors;\r\n    mapping (address => Contributor) public contributor;\r\n\r\n    /**\r\n     *  Functions\r\n     */\r\n\r\n    /**\r\n     * @dev Contract constructor sets owner address.\r\n     */\r\n    function StarbaseMarketingCampaign() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n     *  External Functions\r\n     */\r\n\r\n    /**\r\n     * @dev Setup function sets external contracts' addresses.\r\n     * @param starbaseTokenAddress Token address.\r\n     */\r\n    function setup(address starbaseTokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        assert(address(starbaseToken) == 0);\r\n        starbaseToken = AbstractStarbaseToken(starbaseTokenAddress);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows for marketing contributor's reward adding and withdrawl\r\n     * @param contributorAddress The address of the contributor\r\n     * @param tokenCount Token number to awarded and to be withdrawn\r\n     * @param contributionId Id of contribution from bounty app db\r\n     */\r\n    function deliverRewardedTokens(\r\n        address contributorAddress,\r\n        uint256 tokenCount,\r\n        string contributionId\r\n    )\r\n        external\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n\r\n        bytes32 id = keccak256(contributionId);\r\n\r\n        assert(!contributor[contributorAddress].contributions[id]);\r\n        contributor[contributorAddress].contributions[id] = true;\r\n\r\n        contributor[contributorAddress].rewardedTokens = SafeMath.add(contributor[contributorAddress].rewardedTokens, tokenCount);\r\n\r\n        if (!contributor[contributorAddress].isContributor) {\r\n            contributor[contributorAddress].isContributor = true;\r\n            contributors.push(contributorAddress);\r\n            NewContributor(contributorAddress, tokenCount);\r\n        }\r\n\r\n        starbaseToken.allocateToMarketingSupporter(contributorAddress, tokenCount);\r\n        WithdrawContributorsToken(contributorAddress, tokenCount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     *  Public Functions\r\n     */\r\n\r\n    /**\r\n     * @dev Informs about contributors rewardedTokens and transferredRewardTokens status\r\n     * @param contributorAddress A contributor's address\r\n     * @param contributionId Id of contribution from bounty app db\r\n     */\r\n    function getContributorInfo(address contributorAddress, string contributionId)\r\n        constant\r\n        public\r\n        returns (uint256, bool, bool)\r\n    {\r\n        bytes32 id = keccak256(contributionId);\r\n\r\n        return(\r\n          contributor[contributorAddress].rewardedTokens,\r\n          contributor[contributorAddress].contributions[id],\r\n          contributor[contributorAddress].isContributor\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of contributors.\r\n     */\r\n    function numberOfContributors()\r\n        constant\r\n        public\r\n        returns (uint256)\r\n    {\r\n        return contributors.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributorAddress\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"name\":\"contributionId\",\"type\":\"string\"}],\"name\":\"deliverRewardedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starbaseTokenAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributorAddress\",\"type\":\"address\"},{\"name\":\"contributionId\",\"type\":\"string\"}],\"name\":\"getContributorInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"starbaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor\",\"outputs\":[{\"name\":\"rewardedTokens\",\"type\":\"uint256\"},{\"name\":\"isContributor\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"NewContributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawContributorsToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StarbaseMarketingCampaign","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c31c96a76a95f84bd6a97c3e63f09b4cfa506469ef20b2bd07b341af146b80de"}]}