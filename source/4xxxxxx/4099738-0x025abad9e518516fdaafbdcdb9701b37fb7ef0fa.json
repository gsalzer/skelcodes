{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Authors: Justin Jones, Marshall Stokes\r\n * Published: 2017 by Sprux LLC\r\n */\r\n\r\n\r\n/* Contract provides functions so only contract owner can execute a function */\r\ncontract owned {\r\n    address public owner; //the contract owner\r\n\r\n    function owned() {\r\n        owner = msg.sender; //constructor initializes the creator as the owner on initialization\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw; // functions with onlyOwner will throw and exception if not the contract owner\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n/**\r\n * Centrally issued Ethereum token.\r\n *\r\n * Token supply is created in the token contract creation and allocated to one owner for distribution. This token is mintable, so more tokens\r\n * can be added to the total supply and assigned to an address supplied at contract execution.\r\n *\r\n */\r\n\r\ncontract StandardMintableToken is owned{ \r\n    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;                     // the token name \r\n    string public symbol;                   // the ticker symbol\r\n    uint8 public decimals;                  // amount of decimal places in the token\r\n    uint256 public totalSupply;             // total tokens\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    /* This creates an array with all frozen accounts */\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function StandardMintableToken(\r\n        string tokenName,               // the token name\r\n        uint8 decimalUnits,             // amount of decimal places in the token\r\n        string tokenSymbol,             // the token symbol\r\n        uint256 initialSupply            // the initial distro amount\r\n        ) {\r\n\r\n        balanceOf[msg.sender] = initialSupply;                   // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                             // Update total supply\r\n        name = tokenName;                                        // Set the name for display purposes\r\n        symbol = tokenSymbol;                                    // Set the symbol for display purposes\r\n        decimals = decimalUnits;                                 // Amount of decimals for display purposes\r\n    }\r\n\r\n    /* Send tokens */\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (_value == 0) return false; \t\t\t\t             // Don't waste gas on zero-value transaction\r\n        if (balanceOf[msg.sender] < _value) return false;    // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen\r\n        if (frozenAccount[_to]) throw;                       // Check if recipient frozen                 \r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens on your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;            // Update allowance first\r\n        Approval(msg.sender, _spender, _value);              // Notify of new Approval\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }        \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \r\n        if (frozenAccount[_to]) throw;                          // Check if recipient frozen                 \r\n        if (balanceOf[_from] < _value) return false;          \t// Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\r\n        balanceOf[_from] -= _value;                             // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;                 // Update sender's allowance \r\n        Transfer(_from, _to, _value);                           // Perform the transfer\r\n        return true;\r\n    }\r\n    \r\n    /* A function to freeze or un-freeze accounts, to and from */\r\n    \r\n    function freezeAccount(address target, bool freeze ) onlyOwner {    \r\n        frozenAccount[target] = freeze;                       // set the array object to the value of bool freeze\r\n        FrozenFunds(target, freeze);                          // notify event\r\n    }\r\n    \r\n\r\n    /* A function to burn tokens and remove from supply */\r\n    \r\n    function burn(uint256 _value) returns (bool success) {\r\n        if (frozenAccount[msg.sender]) throw;                 // Check if sender frozen       \r\n        if (_value == 0) return false; \t\t\t\t          // Don't waste gas on zero-value transaction\r\n        if (balanceOf[msg.sender] < _value) return false;     // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n        totalSupply -= _value;                                // Updates totalSupply\r\n        Transfer(msg.sender,0, _value);\t                      // Burn _value tokens\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {\r\n        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen       \r\n        if (frozenAccount[_from]) throw;                     // Check if recipient frozen \r\n        if (_value == 0) return false; \t\t\t             // Don't waste gas on zero-value transaction\r\n        if (balanceOf[_from] < _value) return false;         // Check if the sender has enough\r\n        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        totalSupply -= _value;                               // Updates totalSupply\r\n        allowance[_from][msg.sender] -= _value;\t\t\t\t // Updates allowance\r\n        Transfer(_from, 0, _value);                          // Burn tokens by Transfer to incinerator\r\n        return true;\r\n    }\r\n    \r\n    /* A function to add more tokens to the total supply, accessible only to owner*/\r\n    \r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n        if (balanceOf[target] + mintedAmount < balanceOf[target]) throw; // Check for overflows\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, target, mintedAmount);\r\n\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StandardMintableToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000394000000000000000000000000000000000000000000000000000000000000000d476f6c64656e5469636b65747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000447544b5400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://512b06f5ae43e5533c779b3aa230110783432eaa85b1a6941a168f8d43a17b8e"}]}