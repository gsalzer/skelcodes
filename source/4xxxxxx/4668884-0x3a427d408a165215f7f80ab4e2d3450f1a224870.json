{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 \r\n{\r\n// Functions:\r\n    /// @return total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n// Events:\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Contract for object that have an owner\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Delegate contract to another person\r\n     * @param _owner New owner address \r\n     */\r\n    function setOwner(address _owner) onlyOwner\r\n    { owner = _owner; }\r\n\r\n    /**\r\n     * @dev Owner check modifier\r\n     */\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n}\r\n\r\n\r\ncontract ArbitrageCtCrowdsale is Owned {\r\n    event Print(string _name, uint _value);\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public multisig = 0xe98bdde8edbfc6ff6bb8804077b6be9d4401a71d; \r\n\r\n    address public addressOfERC20Tocken = 0x1245ef80F4d9e02ED9425375e8F649B9221b31D8;\r\n    ERC20 public token;\r\n    \r\n    \r\n    uint public startICO = now; \r\n    uint public endICO = 1515974400; //Mon, 15 Jan 2018 00:00:00 GMT\r\n    \r\n    uint public tokenETHAmount = 75000 * 100000000;\r\n   \r\n    function tokenBalance() constant returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    } \r\n    \r\n    function ArbitrageCtCrowdsale(){//(address _addressOfERC20Tocken){\r\n        owner = msg.sender;\r\n        token = ERC20(addressOfERC20Tocken);\r\n        //token = ERC20(_addressOfERC20Tocken);\r\n    }\r\n    \r\n    //Адрес токена установлен при деплоее\r\n   /* function setAddressOfERC20Tocken(address _addressOfERC20Tocken) onlyOwner {\r\n        addressOfERC20Tocken =  _addressOfERC20Tocken;\r\n        token = ERC20(addressOfERC20Tocken);\r\n        \r\n    }*/\r\n    \r\n    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\r\n        return token.transfer(_to,  _value);\r\n    }\r\n    \r\n    function() payable {\r\n        doPurchase();\r\n    }\r\n\r\n    function doPurchase() payable {\r\n        require(now >= startICO && now < endICO);\r\n\r\n        require(msg.value >= 10000000000000000); // > 0.01 ETH\r\n        \r\n        uint sum = msg.value;\r\n        \r\n        uint tokensAmount;\r\n        \r\n        tokensAmount = sum.mul(tokenETHAmount).div(1000000000000000000);//.mul(token.decimals);\r\n\r\n        \r\n        //Bonus\r\n        if(sum >= 100 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(110).div(100);\r\n        } else if(sum >= 50 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(109).div(100);\r\n        } else if(sum >= 30 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(108).div(100);\r\n        } else if(sum >= 20 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(107).div(100);\r\n        } else if(sum >= 10 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(106).div(100);\r\n        } else if(sum >= 7 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(105).div(100);\r\n        } else if(sum >= 5 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(104).div(100);\r\n        } else if(sum >= 3 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(103).div(100);\r\n        } else if(sum >= 2 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(102).div(100);\r\n        } else if(sum >= 1 * 1000000000000000000){\r\n           tokensAmount = tokensAmount.mul(101).div(100);\r\n        } else if(sum >=  500000000000000000){\r\n           tokensAmount = tokensAmount.mul(1005).div(1000);\r\n        }\r\n\r\n        require(tokenBalance() > tokensAmount);\r\n        \r\n        require(token.transfer(msg.sender, tokensAmount));\r\n        multisig.transfer(msg.value);\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressOfERC20Tocken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenETHAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Print\",\"type\":\"event\"}]","ContractName":"ArbitrageCtCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4cb15a17ef529bed9f0083727555a43901d49cf44a7bb49e638a1b66c2e3526f"}]}