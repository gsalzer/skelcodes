{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ninterface IERC20{\r\n    \r\nfunction totalSupply() constant returns (uint256 totalSupply);\r\n\r\nfunction CirculatingSupply() constant returns (uint256 _CirculatingSupply);\r\n    \r\nfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n   \r\nfunction transfer(address _to, uint256 _value) returns (bool success);\r\n   \r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    \r\nfunction approve(address _spender, uint256 _value) returns (bool success);\r\n    \r\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n   \r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n \r\n\r\n} \r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract NewYearToken is IERC20{\r\n    \r\n    using SafeMath for uint256;\r\n    string public constant symbol = \"NYT\";\r\n    string public constant name = \"New Year Token\";\r\n    uint8 public constant decimals = 18;\r\n    uint private supplay= 0;\r\n    uint private _CirculatingSupply = 0;\r\n    uint private _MaxSupply=1000000000000000000000000;\r\n    \r\n   \r\n    uint256 private constant RATE1 = 2000;\r\n    uint256 private constant RATE2 = 1000;\r\n    address public owner=0xC6D3a0704c169344c758915ed406eBA707DB1e76;\r\n    \r\n    uint private constant preicot=1513765800;\r\n    uint private constant preicote=1514242799;\r\n    \r\n    uint private constant icot=1514370600;\r\n    uint private constant icote=1515020399;\r\n    \r\n    \r\n    mapping(address=> uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    function () payable{\r\n    \r\n    if(now<=preicote){\r\n     createTokens();  \r\n    }\r\n    else {\r\n        createTokens1();\r\n    }\r\n    \r\n      \r\n    }\r\n   \r\n    function NewYearToken(){\r\n        supplay = supplay.add(200000000000000000000000);\r\n    }\r\n  \r\n    function createTokens() payable{\r\n         uint tokens = msg.value.mul(RATE1);\r\n            require(msg.value > 0 && supplay+tokens<=_MaxSupply && now>=preicot && now<=preicote);\r\n           balances[msg.sender] = balances[msg.sender].add(tokens);\r\n            _CirculatingSupply = _CirculatingSupply.add(tokens);\r\n            supplay = supplay.add(tokens);\r\n            owner.transfer(msg.value);\r\n    }\r\n    \r\n    function createTokens1() payable{\r\n         uint tokens = msg.value.mul(RATE2);\r\n            require(msg.value > 0 && supplay+tokens<=_MaxSupply && now>=icot && now<=icote);\r\n           balances[msg.sender] = balances[msg.sender].add(tokens);\r\n            _CirculatingSupply = _CirculatingSupply.add(tokens);\r\n            supplay = supplay.add(tokens);\r\n            owner.transfer(msg.value);\r\n    }\r\n    \r\n    \r\n    function totalSupply() constant returns (uint256 totalSupply){\r\n       return _MaxSupply;  \r\n     }\r\n      function CirculatingSupply() constant returns (uint256 CirculatingSupply){\r\n       return _CirculatingSupply;  \r\n     }\r\n    function balanceOf(address _owner) constant returns (uint256 balance){\r\n        return balances[_owner];\r\n    }\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        require(\r\n            balances[msg.sender] >= _value\r\n            && _value > 0 && now>icote\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawfunds() returns (bool seccess){\r\n        require(owner==msg.sender);\r\n        balances[owner] = balances[owner].add(200000000000000000000000);\r\n        _CirculatingSupply = _CirculatingSupply.add(200000000000000000000000);\r\n        return true;\r\n    }\r\n    function burn() returns (bool seccess){\r\n        require(owner==msg.sender);\r\n        uint stevilo=_MaxSupply.sub(supplay);\r\n        _MaxSupply=_MaxSupply.sub(stevilo);\r\n        return true;\r\n    }\r\n     function newowner(address _owner) returns (bool seccess){\r\n        require(owner==msg.sender);\r\n        owner=_owner;\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\r\n        require(\r\n            allowed[_from][msg.sender] >= _value\r\n            && balances[_from] >= _value\r\n            && _value > 0\r\n        );\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) returns (bool success){\r\n       allowed[msg.sender][_spender] = _value;\r\n       Approval(msg.sender, _spender, _value);\r\n       return true;\r\n    }\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newowner\",\"outputs\":[{\"name\":\"seccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"name\":\"seccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawfunds\",\"outputs\":[{\"name\":\"seccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CirculatingSupply\",\"outputs\":[{\"name\":\"CirculatingSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NewYearToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b06118ed03b131910529343cd90b1200ad0803dfe88213bc2fb7a1e15022223"}]}