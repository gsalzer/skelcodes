{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n  bool public endITO = false;\r\n\r\n  uint public endDate = 1530360000;  // June 30 2018 Token transfer enable\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS not paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(now >= endDate || endITO);\r\n    _;\r\n  }\r\n\r\n  function unPause() public onlyOwner returns (bool) {\r\n      endITO = true;\r\n      return endITO;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is Token, Pausable {\r\n    using SafeMath for uint256;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract KeeppetToken is BurnableToken {\r\n\r\n    string public constant name = \"KeepPet Token\";\r\n    string public constant symbol = \"PET\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 3500000;\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    function KeeppetToken() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[owner] = INITIAL_SUPPLY;\r\n    }\r\n\r\n    function sendTokens(address _to, uint _amount) external onlyOwner {\r\n        require(_amount <= balances[msg.sender]);\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        Transfer(msg.sender, _to, _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract SalesManager is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Pre-ICO\r\n     * Start date 31 December 2017 (12:00 GMT)\r\n     * End date or Hard Cap,  15 January 2018 (12:00 GMT)\r\n     * Token amount 3500000\r\n     * min eth = 0,0002\r\n     * token price = 1,5$\r\n     * transfer to wallet = NEED wallet\r\n     * */\r\n    // TODO: set actual dates before deploy\r\n    uint public constant etherCost = 750;\r\n    uint public constant startDate = 1514721600;\r\n    uint public constant endDate = 1516017600;\r\n    uint256 public constant softCap = 250000 / etherCost * 1 ether;\r\n    uint256 public constant hardCap = 1050000 / etherCost * 1 ether;\r\n\r\n    struct Stat {\r\n        uint256 currentFundraiser;\r\n        uint256 additionalEthAmount;\r\n        uint256 ethAmount;\r\n        uint txCounter;\r\n    }\r\n\r\n    Stat public stat;\r\n\r\n    // ETH 750$ 13.12.2017 token price 1.5$\r\n    // TODO: set actual price before deploy\r\n    uint256 public constant tokenPrice = uint256(15 * 1 ether).div(etherCost * 10);\r\n    RefundVault public refundVault;\r\n    KeeppetToken public keeppetToken;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when Pre-ICO end date is now\r\n     */\r\n    modifier isFinished() {\r\n        require(now >= endDate);\r\n        _;\r\n    }\r\n\r\n    function SalesManager(address wallet) public {\r\n        require(wallet != address(0));\r\n        keeppetToken = new KeeppetToken();\r\n        refundVault = new RefundVault(wallet);\r\n    }\r\n\r\n    function () payable public {\r\n       require(msg.value >= 2 * 10**15  && now >= startDate && now < endDate);\r\n       require(stat.ethAmount + stat.additionalEthAmount < hardCap);\r\n       buyTokens();\r\n    }\r\n\r\n    uint bonusX2Stage1 = softCap;\r\n    uint bonusX2Stage2 = 525000 / etherCost * 1 ether;\r\n    uint bonusX2Stage3 = 787500 / etherCost * 1 ether;\r\n    uint bonusX2Stage4 = hardCap;\r\n\r\n    function checkBonus(uint256 amount) public constant returns(bool) {\r\n        uint256 current = stat.ethAmount + stat.additionalEthAmount;\r\n        uint256 withAmount = current.add(amount);\r\n\r\n        return ((current < bonusX2Stage1 && bonusX2Stage1 <= withAmount)\r\n        || (current < bonusX2Stage2 && bonusX2Stage2 <= withAmount)\r\n        || (current < bonusX2Stage3 && bonusX2Stage3 <= withAmount)\r\n        || (current < bonusX2Stage4 && bonusX2Stage4 <= withAmount));\r\n    }\r\n\r\n    uint private bonusPeriod = 1 days;\r\n\r\n    function countMultiplyBonus(uint256 amount) internal returns (uint) {\r\n        if (now >= startDate && now <= startDate + bonusPeriod) { // From 31 december 2017 to 1 january 2018 (12:00 GMT) — x5\r\n            return 5;\r\n        }\r\n        if (now > startDate + bonusPeriod && now <= startDate + 2 * bonusPeriod) { // From 1 january 2017 to 2 january 2018 (12:00 GMT) — x4\r\n            return 4;\r\n        }\r\n        if (now > startDate + 2 * bonusPeriod && now <= startDate + 3 * bonusPeriod) { // From 2 january 2017 to 3 january 2018 (12:00 GMT) — x3\r\n            return 3;\r\n        }\r\n        if (now > startDate + 3 * bonusPeriod && now <= startDate + 4 * bonusPeriod) { // From 3 january 2017 to 4 january 2018 (12:00 GMT) — x2\r\n            return 2;\r\n        }\r\n        if (checkBonus(amount)) {\r\n            return 2;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    function buyTokens() internal {\r\n        uint256 tokens = msg.value.div(tokenPrice);\r\n        uint256 balance = keeppetToken.balanceOf(this);\r\n        tokens = tokens.mul(countMultiplyBonus(msg.value));\r\n\r\n        if (balance < tokens) {\r\n            uint256 tempTokenPrice = msg.value.div(tokens); // Temp token price for tokens which were bought.\r\n            uint256 toReturn = tempTokenPrice.mul(tokens.sub(balance)); // Amount for returing.\r\n            sendTokens(balance, msg.value - toReturn);\r\n            msg.sender.transfer(toReturn);\r\n            return;\r\n        }\r\n        sendTokens(tokens, msg.value);\r\n    }\r\n\r\n    function sendTokens(uint256 _amount, uint256 _ethers) internal {\r\n        keeppetToken.sendTokens(msg.sender, _amount);\r\n        RefundVault refundVaultContract = RefundVault(refundVault);\r\n        stat.currentFundraiser += _amount;\r\n        stat.ethAmount += _ethers;\r\n        stat.txCounter += 1;\r\n        refundVaultContract.deposit.value(_ethers)(msg.sender);\r\n    }\r\n\r\n    function sendTokensManually(address _to, uint256 ethAmount, uint multiplier) public onlyOwner {\r\n        require(multiplier < 6); // can be multiplier more then in five times.\r\n        require(_to != address(0) && now <= endDate + 3 days); // available to send 72 hours after endDate\r\n        uint256 tokens = ethAmount.div(tokenPrice).mul(multiplier);\r\n        keeppetToken.sendTokens(_to, tokens);\r\n        stat.currentFundraiser += tokens;\r\n        stat.additionalEthAmount += ethAmount;\r\n        stat.txCounter += 1;\r\n    }\r\n\r\n    function checkFunds() public isFinished onlyOwner {\r\n        RefundVault refundVaultContract = RefundVault(refundVault);\r\n        uint256 leftValue = keeppetToken.balanceOf(this);\r\n        keeppetToken.burn(leftValue);\r\n        uint256 fullAmount = stat.additionalEthAmount.add(stat.ethAmount);\r\n        if (fullAmount < softCap) {\r\n            // If soft cap is not reached enable refunds\r\n            refundVaultContract.enableRefunds();\r\n        } else {\r\n            // Send eth to multisig\r\n            refundVaultContract.close();\r\n        }\r\n    }\r\n\r\n    function unPauseToken() public onlyOwner {\r\n        require(keeppetToken.unPause());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stat\",\"outputs\":[{\"name\":\"currentFundraiser\",\"type\":\"uint256\"},{\"name\":\"additionalEthAmount\",\"type\":\"uint256\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"txCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"sendTokensManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keeppetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SalesManager","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000076653152564491e7d0d5746ecfd50a08dae850f6","Library":"","SwarmSource":"bzzr://80756fc1e5b610a03f71a3b46974aa135a3bd6e2bc24e4592a620646a44c4234"}]}