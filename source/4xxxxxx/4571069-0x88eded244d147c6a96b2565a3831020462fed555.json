{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        if (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\ncontract Token {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\t\trequire( msg.data.length >= (2 * 32) + 4 );\r\n\t\trequire( _value > 0 );\r\n\t\trequire( balances[msg.sender] >= _value );\r\n\t\trequire( balances[_to] + _value > balances[_to] );\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\t\trequire( msg.data.length >= (3 * 32) + 4 );\r\n\t\trequire( _value > 0 );\r\n\t\trequire( balances[_from] >= _value );\r\n\t\trequire( allowed[_from][msg.sender] >= _value );\r\n\t\trequire( balances[_to] + _value > balances[_to] );\r\n\r\n        balances[_from] -= _value;\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\t\tbalances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n\t\trequire( _value == 0 || allowed[msg.sender][_spender] == 0 );\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n}\r\n\r\n\r\n\r\ncontract WhaleToken is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\tstring public constant name = \"WhaleFUND\";\t\t\t\t\t\t\t\t// WHALE tokens name\r\n    string public constant symbol = \"WHALE\";\t\t\t\t\t\t\t\t// WHALE tokens ticker\r\n    uint256 public constant decimals = 18;\t\t\t\t\t\t\t\t\t// WHALE tokens decimals\r\n\tstring public version = \"1.0\";\t\t\t\t\t\t\t\t\t\t\t// WHALE version\r\n\r\n\tuint256 public constant maximumSupply =  800 * (10**3) * 10**decimals;\t// Maximum 800k Whale tokens\r\n\tuint256 public constant operatingFund = 152 * (10**3) * 10**decimals;\t// 19% - 152k WHALE reserved for operating expenses\r\n\tuint256 public constant teamFund = 120 * (10**3) * 10**decimals;\t\t// 15% - 120k WHALE reserved for WhaleFUND team\r\n\tuint256 public constant partnersFund = 24 * (10**3) * 10**decimals;\t\t// 3% - 24k WHALE reserved for partner program\r\n\tuint256 public constant bountyFund = 24 * (10**3) * 10**decimals;\t\t// 3% - 24k WHALE reserved for bounty program\r\n\t\r\n\tuint256 public constant whaleExchangeRate = 100;\t\t\t\t\t\t// 100 WHALE tokens per 1 ETH\r\n\t\r\n\tuint256 public constant preIcoBonus = 15;\t\t\t\t\t\t\t\t// PreICO bonus 15%\r\n\tuint256 public constant icoThreshold1 = 420 * (10**3) * 10**decimals;\t// <100k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\r\n\tuint256 public constant icoThreshold2 = 520 * (10**3) * 10**decimals;\t// >100k && <200k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\r\n\tuint256 public constant icoThreshold3 = 620 * (10**3) * 10**decimals;\t// >200k && <300k sold WHALE tokens, without 152k+120k+24k+24k=320k reserved tokens\r\n\tuint256 public constant icoThresholdBonus1 = 10;\t\t\t\t\t\t// ICO threshold bonus 10%\r\n\tuint256 public constant icoThresholdBonus2 = 5;\t\t\t\t\t\t\t// ICO threshold bonus 5%\r\n\tuint256 public constant icoThresholdBonus3 = 3;\t\t\t\t\t\t\t// ICO threshold bonus 3%\r\n\tuint256 public constant icoAmountBonus1 = 2;\t\t\t\t\t\t\t// ICO amount bonus 2%\r\n\tuint256 public constant icoAmountBonus2 = 3;\t\t\t\t\t\t\t// ICO amount bonus 3%\r\n\tuint256 public constant icoAmountBonus3 = 5;\t\t\t\t\t\t\t// ICO amount bonus 5%\r\n\r\n    address public etherAddress;\r\n    address public operatingFundAddress;\r\n\taddress public teamFundAddress;\r\n\taddress public partnersFundAddress;\r\n\taddress public bountyFundAddress;\r\n\taddress public dividendFundAddress;\r\n\r\n    bool public isFinalized;\r\n\tuint256 public constant crowdsaleStart = 1511136000;\t\t\t\t\t// Monday, 20 November 2017, 00:00:00 UTC\r\n\tuint256 public constant crowdsaleEnd = 1513555200;\t\t\t\t\t\t// Monday, 18 December 2017, 00:00:00 UTC\r\n\r\n    event createWhaleTokens(address indexed _to, uint256 _value);\r\n\r\n\r\n    function WhaleToken(\r\n        address _etherAddress,\r\n        address _operatingFundAddress,\r\n\t\taddress _teamFundAddress,\r\n\t\taddress _partnersFundAddress,\r\n\t\taddress _bountyFundAddress,\r\n\t\taddress _dividendFundAddress\r\n\t)\r\n    {\r\n\r\n        isFinalized = false;\r\n\r\n        etherAddress = _etherAddress;\r\n        operatingFundAddress = _operatingFundAddress;\r\n\t\tteamFundAddress = _teamFundAddress;\r\n\t    partnersFundAddress = _partnersFundAddress;\r\n\t\tbountyFundAddress = _bountyFundAddress;\r\n\t\tdividendFundAddress = _dividendFundAddress;\r\n\t\t\r\n\t\ttotalSupply = totalSupply.add(operatingFund).add(teamFund).add(partnersFund).add(bountyFund);\r\n\r\n\t\tbalances[operatingFundAddress] = operatingFund;\t\t\t\t\t\t// Update operating funds balance\r\n\t\tcreateWhaleTokens(operatingFundAddress, operatingFund);\t\t\t\t// Create operating funds tokens\r\n\r\n\t\tbalances[teamFundAddress] = teamFund;\t\t\t\t\t\t\t\t// Update team funds balance\r\n\t\tcreateWhaleTokens(teamFundAddress, teamFund);\t\t\t\t\t\t// Create team funds tokens\r\n\r\n\t\tbalances[partnersFundAddress] = partnersFund;\t\t\t\t\t\t// Update partner program funds balance\r\n\t\tcreateWhaleTokens(partnersFundAddress, partnersFund);\t\t\t\t// Create partner program funds tokens\r\n\t\t\r\n\t\tbalances[bountyFundAddress] = bountyFund;\t\t\t\t\t\t\t// Update bounty program funds balance\r\n\t\tcreateWhaleTokens(bountyFundAddress, bountyFund);\t\t\t\t\t// Create bounty program funds tokens\r\n\r\n\t}\r\n\r\n\r\n    function makeTokens() payable  {\r\n\r\n\t\trequire( !isFinalized );\r\n\t\trequire( now >= crowdsaleStart );\r\n\t\trequire( now < crowdsaleEnd );\r\n\t\t\r\n\t\tif (now < crowdsaleStart + 7 days) {\r\n\t\t\trequire( msg.value >= 3000 finney );\r\n\t\t} else if (now >= crowdsaleStart + 7 days) {\r\n\t\t\trequire( msg.value >= 10 finney );\r\n\t\t}\r\n\r\n\r\n\t\tuint256 buyedTokens = 0;\r\n\t\tuint256 bonusTokens = 0;\r\n\t\tuint256 bonusThresholdTokens = 0;\r\n\t\tuint256 bonusAmountTokens = 0;\r\n\t\tuint256 tokens = 0;\r\n\r\n\r\n\t\tif (now < crowdsaleStart + 7 days) {\r\n\r\n\t\t\tbuyedTokens = msg.value.mul(whaleExchangeRate);\t\t\t\t\t\t\t\t// Buyed WHALE tokens without bonuses\r\n\t\t\tbonusTokens = buyedTokens.mul(preIcoBonus).div(100);\t\t\t\t\t\t// preICO bonus 15%\r\n\t\t\ttokens = buyedTokens.add(bonusTokens);\t\t\t\t\t\t\t\t\t\t// Buyed WHALE tokens with bonuses\r\n\t\r\n\t\t} else {\r\n\t\t\r\n\t\t\tbuyedTokens = msg.value.mul(whaleExchangeRate);\t\t\t\t\t\t\t\t// Buyed WHALE tokens without bonuses\r\n\r\n\t\t\tif (totalSupply <= icoThreshold1) {\r\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus1).div(100);\t// ICO threshold bonus 10%\r\n\t\t\t} else if (totalSupply > icoThreshold1 && totalSupply <= icoThreshold2) {\r\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus2).div(100);\t// ICO threshold bonus 5%\r\n\t\t\t} else if (totalSupply > icoThreshold2 && totalSupply <= icoThreshold3) {\r\n\t\t\t\tbonusThresholdTokens = buyedTokens.mul(icoThresholdBonus3).div(100);\t// ICO threshold bonus 3%\r\n\t\t\t} else if (totalSupply > icoThreshold3) {\r\n\t\t\t\tbonusThresholdTokens = 0;\t\t\t\t\t\t\t\t\t\t\t\t// ICO threshold bonus 0%\r\n\t\t\t}\r\n\r\n\t\t\tif (msg.value < 10000 finney) {\r\n\t\t\t\tbonusAmountTokens = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t// ICO amount bonus 0%\r\n\t\t\t} else if (msg.value >= 10000 finney && msg.value < 100010 finney) {\r\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus1).div(100);\t\t\t// ICO amount bonus 2%\r\n\t\t\t} else if (msg.value >= 100010 finney && msg.value < 300010 finney) {\r\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus2).div(100);\t\t\t// ICO amount bonus 3%\r\n\t\t\t} else if (msg.value >= 300010 finney) {\r\n\t\t\t\tbonusAmountTokens = buyedTokens.mul(icoAmountBonus3).div(100);\t\t\t// ICO amount bonus 5%\r\n\t\t\t}\r\n\r\n\t\t\ttokens = buyedTokens.add(bonusThresholdTokens).add(bonusAmountTokens);\t\t// Buyed WHALE tokens with bonuses\r\n\r\n\t\t}\r\n\r\n\t    uint256 currentSupply = totalSupply.add(tokens);\r\n\r\n\t\trequire( maximumSupply >= currentSupply );\r\n\r\n        totalSupply = currentSupply;\r\n\r\n        balances[msg.sender] += tokens;\t\t\t\t\t\t\t\t\t\t// Update buyer balance \r\n        createWhaleTokens(msg.sender, tokens);\t\t\t\t\t\t\t\t// Create buyed tokens\r\n\t\t\r\n\t\tetherAddress.transfer(msg.value);\t\t\t\t\t\t\t\t\t// Transfer ETH to MultiSig Address\r\n\r\n    }\r\n\r\n\r\n    function() payable {\r\n\r\n        makeTokens();\r\n\r\n    }\r\n\r\n\r\n    function finalizeCrowdsale() external {\r\n\r\n\t\trequire( !isFinalized );\t\t\t\t\t\t\t\t\t\t\t// Required crowdsale state FALSE\r\n\t\trequire( msg.sender == teamFundAddress );\t\t\t\t\t\t\t// Required call from team fund address\r\n\t\trequire( now > crowdsaleEnd || totalSupply == maximumSupply );\t\t// Required crowdsale ended or maximum supply reached\r\n\t\t\r\n\t\tuint256 remainingSupply = maximumSupply.sub(totalSupply);\t\t\t// Remaining tokens to reach maximum supply\r\n\t\tif (remainingSupply > 0) {\r\n\t\t\tuint256 updatedSupply = totalSupply.add(remainingSupply);\t\t// New total supply\r\n\t\t\ttotalSupply = updatedSupply;\t\t\t\t\t\t\t\t\t// Update total supply\r\n\t\t\tbalances[dividendFundAddress] += remainingSupply;\t\t\t\t// Update dividend funds balance\r\n\t\t\tcreateWhaleTokens(dividendFundAddress, remainingSupply);\t\t// Create dividend funds tokens\r\n\t\t}\r\n\r\n        isFinalized = true;\t\t\t\t\t\t\t\t\t\t\t\t\t// Set crowdsale state TRUE\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximumSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAmountBonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThreshold1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThreshold3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAmountBonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatingFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThreshold2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAmountBonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThresholdBonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatingFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThresholdBonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThresholdBonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_etherAddress\",\"type\":\"address\"},{\"name\":\"_operatingFundAddress\",\"type\":\"address\"},{\"name\":\"_teamFundAddress\",\"type\":\"address\"},{\"name\":\"_partnersFundAddress\",\"type\":\"address\"},{\"name\":\"_bountyFundAddress\",\"type\":\"address\"},{\"name\":\"_dividendFundAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createWhaleTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WhaleToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006e22c0e5300Dc714c00D09daFFD6924f7f255ad70000000000000000000000005160DE406617E4c7a56Bd0bf089Be4c3f14C11A5000000000000000000000000C8F81E5e40Ab052B3Ae3c81551fd73a81d19c901000000000000000000000000967Ab962819E7217B376e9e9682c51adEe621B9F0000000000000000000000006E19d3C0Ba458e2124c28E75065a56F1AAF4F5C30000000000000000000000006ab9cA2f8891264d6D801333d696F33827174CA5","Library":"","SwarmSource":"bzzr://8456b4955223c2e7dffecc5c55ea9165d5acb591d236763a3b6bb3d122b76ee8"}]}