{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.15;\r\n/**\r\n*contract name : GodzSwapGodzEtherCompliance\r\n*purpose : be the smart contract for compliance of the greater than usd5000\r\n*/\r\ncontract GodzSwapGodzEtherCompliance{\r\n    //address of the owner of the contract\r\n    address public owner;\r\n    \r\n    /*structure for store the sale*/\r\n    struct GodzBuyAccounts\r\n    {\r\n        uint256 amount;/*amount sent*/\r\n        address account;/*account that sent*/\r\n        uint sendGodz;/*if send the godz back*/\r\n    }\r\n\r\n    /*mapping of the acounts that send more than usd5000*/\r\n    mapping(uint=>GodzBuyAccounts) public accountsHolding;\r\n    \r\n    /*index of the account information*/\r\n    uint public indexAccount = 0;\r\n\r\n    /*account information*/\r\n    address public swapContract;/*address of the swap contract*/\r\n\r\n\r\n    /*function name : GodzSwapGodzEtherCompliance*/\r\n    /*purpose : be the constructor and the setter of the owner*/\r\n    /*goal : to set the owner of the contract*/    \r\n    function GodzSwapGodzEtherCompliance()\r\n    {\r\n        /*sets the owner of the contract than compliance with the greater than usd5000 maximiun*/\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*function name : setHolderInformation*/\r\n    /*purpose : be the setter of the swap contract and wallet holder*/\r\n    /*goal : to set de swap contract address and the wallet holder address*/    \r\n    function setHolderInformation(address _swapContract)\r\n    {    \r\n        /*if the owner is setting the information of the holder and the swap*/\r\n        if (msg.sender==owner)\r\n        {\r\n            /*address of the swap contract*/\r\n            swapContract = _swapContract;\r\n        }\r\n    }\r\n\r\n    /*function name : SaveAccountBuyingGodz*/\r\n    /*purpose : be the safe function that map the account that send it*/\r\n    /*goal : to store the account information*/\r\n    function SaveAccountBuyingGodz(address account, uint256 amount) public returns (bool success) \r\n    {\r\n        /*if the sender is the swapContract*/\r\n        if (msg.sender==swapContract)\r\n        {\r\n            /*increment the index*/\r\n            indexAccount += 1;\r\n            /*store the account informacion*/\r\n            accountsHolding[indexAccount].account = account;\r\n            accountsHolding[indexAccount].amount = amount;\r\n            accountsHolding[indexAccount].sendGodz = 0;\r\n            /*transfer the ether to the wallet holder*/\r\n            /*account save was completed*/\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /*function name : setSendGodz*/\r\n    /*purpose : be the flag update for the compliance account*/\r\n    /*goal : to get the flag on the account*/\r\n    function setSendGodz(uint index) public \r\n    {\r\n        if (owner == msg.sender)\r\n        {\r\n            accountsHolding[index].sendGodz = 1;\r\n        }\r\n    }\r\n\r\n    /*function name : getAccountInformation*/\r\n    /*purpose : be the getter of the information of the account*/\r\n    /*goal : to get the amount and the acount of a compliance account*/\r\n    function getAccountInformation(uint index) public returns (address account, uint256 amount, uint sendGodz)\r\n    {\r\n        /*return the account of a compliance*/\r\n        return (accountsHolding[index].account, accountsHolding[index].amount, accountsHolding[index].sendGodz);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_swapContract\",\"type\":\"address\"}],\"name\":\"setHolderInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setSendGodz\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountsHolding\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sendGodz\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SaveAccountBuyingGodz\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountInformation\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendGodz\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GodzSwapGodzEtherCompliance","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3809e6b0b021db210fa3408e5128c3abe06645f70e34e1c9a61f77a5edd79d54"}]}