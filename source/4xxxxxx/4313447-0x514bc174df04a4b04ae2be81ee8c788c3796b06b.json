{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\nCopyright (c) 2017 Esperite Ltd. <legal@esperite.co.nz>\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\r\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n\r\n*/\r\n\r\npragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract ERC20ERC223 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address _owner) public constant returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _value);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Deco is ERC20ERC223 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"Deco\";\r\n  string public constant symbol = \"DEC\";\r\n  uint8 public constant decimals = 18;\r\n  \r\n  uint256 public constant totalSupply = 6*10**26; // 600,000,000. 000,000,000,000,000,000 units\r\n    \r\n  // Accounts\r\n  \r\n  mapping(address => Account) private accounts;\r\n  \r\n  struct Account {\r\n    uint256 balance;\r\n    mapping(address => uint256) allowed;\r\n    mapping(address => bool) isAllowanceAuthorized;\r\n  }  \r\n  \r\n  // Fix for the ERC20 short address attack.\r\n  // http://vessenes.com/the-erc20-short-address-attack-explained/\r\n  modifier onlyPayloadSize(uint256 size) {\r\n    require(msg.data.length >= size + 4);\r\n     _;\r\n  }\r\n\r\n  // Initialization\r\n\r\n  function Deco() {\r\n    accounts[msg.sender].balance = totalSupply;\r\n    Transfer(this, msg.sender, totalSupply);\r\n  }\r\n\r\n  // Balance\r\n\r\n  function balanceOf(address _owner) constant returns (uint256) {\r\n    return accounts[_owner].balance;\r\n  }\r\n\r\n  // Transfers\r\n\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n    performTransfer(msg.sender, _to, _value, \"\");\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value, bytes _data) onlyPayloadSize(2 * 32) returns (bool) {\r\n    performTransfer(msg.sender, _to, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool) {\r\n    require(hasApproval(_from, msg.sender));\r\n    uint256 _allowed = accounts[_from].allowed[msg.sender];    \r\n    performTransfer(_from, _to, _value, \"\");    \r\n    accounts[_from].allowed[msg.sender] = _allowed.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function performTransfer(address _from, address _to, uint256 _value, bytes _data) private returns (bool) {\r\n    require(_to != 0x0);\r\n    accounts[_from].balance = accounts[_from].balance.sub(_value);    \r\n    accounts[_to].balance = accounts[_to].balance.add(_value);\r\n    if (isContract(_to)) {\r\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n      receiver.tokenFallback(_from, _value, _data);\r\n    }    \r\n    return true;\r\n  }\r\n\r\n  function isContract(address _to) private constant returns (bool) {\r\n    uint256 codeLength;\r\n    assembly {\r\n      codeLength := extcodesize(_to)\r\n    }\r\n    return codeLength > 0;\r\n  }\r\n\r\n  // Approval & Allowance\r\n  \r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n    require(msg.sender != _spender);\r\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (accounts[msg.sender].allowed[_spender] != 0)) {\r\n      revert();\r\n      return false;\r\n    }\r\n    accounts[msg.sender].allowed[_spender] = _value;\r\n    accounts[msg.sender].isAllowanceAuthorized[_spender] = true;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return accounts[_owner].allowed[_spender];\r\n  }\r\n\r\n  function hasApproval(address _owner, address _spender) constant returns (bool) {        \r\n    return accounts[_owner].isAllowanceAuthorized[_spender];\r\n  }\r\n\r\n  function removeApproval(address _spender) {    \r\n    delete(accounts[msg.sender].allowed[_spender]);\r\n    accounts[msg.sender].isAllowanceAuthorized[_spender] = false;\r\n  }\r\n\r\n}\r\n\r\ncontract DecoBank {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  Deco public token;  \r\n  \r\n  address private crowdsaleWallet;\r\n  address private decoReserveWallet;\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public constant totalSupplyUnits = 6*10**26;\r\n  uint256 private constant MINIMUM_WEI = 10**16;\r\n  uint256 private constant BASE = 10**18;\r\n  uint256 public originalRate = 3000;\r\n\r\n  uint256 public crowdsaleDistributedUnits = 0;\r\n  uint256 public issuerDistributedUnits = 0;\r\n\r\n  // Presale\r\n  uint256 public presaleStartTime;\r\n  uint256 public presaleEndTime;\r\n  uint256 private presaleDiscount = 50;\r\n  uint256 private presalePercentage = 5;\r\n\r\n  uint256 public issuerReservedMaximumPercentage = 5;\r\n\r\n  // Sale\r\n  uint256 public saleStartTime;\r\n  uint256 public saleEndTime;\r\n  uint256 private saleDiscount = 25;\r\n\r\n  // Rewards\r\n  uint256 public rewardDistributionStart;\r\n  uint256 public rewardDistributedUnits = 0;  \r\n\r\n  // Contributors\r\n  mapping(address => Contributor) private contributors;\r\n\r\n  struct Contributor {    \r\n    uint256 contributedWei;\r\n    uint256 decoUnits;\r\n    uint256 rewardDistributedDecoUnits;\r\n  }\r\n\r\n  uint256 public contributorsCount = 0;\r\n\r\n  // Events\r\n  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n  event RewardDistributed(address indexed beneficiary, uint256 amount);\r\n  event RemainingRewardOwnershipChanged(address indexed from, address indexed to);  \r\n\r\n  address private contractCreator = msg.sender;\r\n\r\n  function DecoBank() {\r\n    token = new Deco();\r\n\r\n    presaleStartTime = 1506816000; // Sunday, October 1, 2017 12:00:00 AM\r\n    presaleEndTime = presaleStartTime + 30 days;\r\n\r\n    saleStartTime = presaleEndTime + 1 days;\r\n    saleEndTime = saleStartTime + 180 days;\r\n\r\n    rewardDistributionStart = saleEndTime + 1 days;\r\n\r\n    crowdsaleWallet = 0xEaC4ff9Aa8342d8B5c59370Ac04a55367A788B30;\r\n    decoReserveWallet = 0xDA01fDeEF573b5cC51D0Ddc2600F476aaC71A600;\r\n  }\r\n\r\n  // Sale events\r\n\r\n  modifier validPurchase() {\r\n    require(isValidPurchase());\r\n    _;\r\n  }\r\n  \r\n  function isValidPurchase() private returns (bool) {\r\n    bool minimumContribution = msg.value >= MINIMUM_WEI;\r\n    return minimumContribution && (presaleActive() || saleActive());\r\n  }  \r\n\r\n  function() payable validPurchase {\r\n    require(msg.sender != 0x0);\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address beneficiary) private {    \r\n    uint256 weiAmount = msg.value;    \r\n    uint256 tokens = weiAmount.mul(currentRate());\r\n    uint256 issuerReserveTokens = unitsForIssuerReserve(tokens);\r\n    \r\n    require(crowdsaleDistributedUnits.add(tokens).add(issuerReserveTokens) <= totalSupplyUnits);\r\n\r\n    incrementContributorsCount(beneficiary);\r\n\r\n    contributors[beneficiary].decoUnits = contributors[beneficiary].decoUnits.add(tokens);\r\n    contributors[beneficiary].contributedWei = contributors[beneficiary].contributedWei.add(weiAmount);\r\n\r\n    issuerDistributedUnits = issuerDistributedUnits.add(issuerReserveTokens);\r\n    crowdsaleDistributedUnits = crowdsaleDistributedUnits.add(tokens).add(issuerReserveTokens);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n            \r\n    TokenPurchase(beneficiary, weiAmount, tokens);\r\n    \r\n    crowdsaleWallet.transfer(weiAmount);\r\n    token.transfer(beneficiary, tokens);\r\n    if (issuerReserveTokens != 0) {\r\n      token.transfer(decoReserveWallet, issuerReserveTokens);\r\n    }            \r\n  }\r\n\r\n  function incrementContributorsCount(address _address) private {\r\n    if (contributors[_address].contributedWei == 0) {\r\n      contributorsCount = contributorsCount.add(1);\r\n    }\r\n  }\r\n\r\n  function contributedWei(address _address) constant public returns (uint256) {\r\n    return contributors[_address].contributedWei;\r\n  }\r\n\r\n  function distibutedDecoUnits(address _address) constant public returns (uint256) {\r\n    return contributors[_address].decoUnits;\r\n  }\r\n\r\n  function circulatingSupply() constant public returns (uint256) {\r\n    return crowdsaleDistributedUnits.add(rewardDistributedUnits);\r\n  }\r\n\r\n  function currentDiscountPercentage() public constant returns (uint256) {\r\n    if (presaleStartTime > now) { return presaleDiscount; }\r\n    if (presaleActive()) { return presaleDiscount; }\r\n    uint256 discountSub = saleStage().mul(5);\r\n    uint256 discount = saleDiscount.sub(discountSub);\r\n    return discount;\r\n  }\r\n\r\n  function currentRate() public constant returns (uint256) {\r\n    uint256 x = (BASE.mul(100).sub(currentDiscountPercentage().mul(BASE))).div(100);\r\n    return originalRate.mul(BASE).div(x);\r\n  }\r\n\r\n  // Presale\r\n\r\n  function presaleLimitUnits() public constant returns (uint256) {\r\n    return totalSupplyUnits.div(100).mul(presalePercentage);\r\n  }\r\n\r\n  function shouldEndPresale() private constant returns (bool) {\r\n    if ((crowdsaleDistributedUnits.sub(issuerDistributedUnits) >= presaleLimitUnits()) || (now >= presaleEndTime)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function presaleActive() public constant returns (bool) {\r\n    bool inRange = now >= presaleStartTime && now < presaleEndTime;\r\n    return inRange && shouldEndPresale() == false;\r\n  }\r\n\r\n  // Sale\r\n\r\n  function unitsLimitForCurrentSaleStage() public constant returns (uint256) {\r\n    return totalSupplyUnits.div(100).mul(currentMaximumSalePercentage());\r\n  }\r\n\r\n  function maximumSaleLimitUnits() public constant returns (uint256) {\r\n    return totalSupplyUnits.div(100).mul(50);\r\n  }\r\n\r\n  function currentMaximumSalePercentage() public constant returns (uint256) {\r\n    return saleStage().mul(8).add(10);\r\n  }\r\n\r\n  function saleLimitReachedForCurrentStage() public constant returns (bool) {\r\n    return (crowdsaleDistributedUnits.sub(issuerDistributedUnits) >= unitsLimitForCurrentSaleStage());\r\n  }\r\n\r\n  function currentSaleStage() constant public returns (uint256) {\r\n    return saleStage().add(1);\r\n  }\r\n\r\n  function saleStage() private returns (uint256) {\r\n    uint256 delta = saleEndTime.sub(saleStartTime);\r\n    uint256 stageStep = delta.div(6);\r\n    int256 stageDelta = int256(now - saleStartTime);\r\n    if ((stageDelta <= 0) || (stageStep == 0)) {\r\n      return 0;\r\n    } else {\r\n      uint256 reminder = uint256(stageDelta) % stageStep;\r\n      uint256 dividableDelta = uint256(stageDelta).sub(reminder);\r\n      uint256 stage = dividableDelta.div(stageStep);\r\n      if (stage <= 5) {\r\n        return stage;\r\n      } else {\r\n        return 5;\r\n      }\r\n    }\r\n  }\r\n\r\n  function saleActive() public constant returns (bool) {\r\n    bool inRange = now >= saleStartTime && now < saleEndTime;        \r\n    return inRange && saleLimitReachedForCurrentStage() == false;\r\n  }\r\n\r\n  // Issuer Reserve\r\n\r\n  function unitsForIssuerReserve(uint256 _tokensForDistribution) private returns (uint256) {\r\n    uint256 residue = maximumIssuerReservedUnits().sub(issuerDistributedUnits);\r\n    uint256 toIssuer = _tokensForDistribution.div(100).mul(10);\r\n    if (residue > toIssuer) {\r\n      return toIssuer;\r\n    } else {\r\n      return residue;\r\n    }\r\n  }\r\n\r\n  function maximumIssuerReservedUnits() public constant returns (uint256) {\r\n    return totalSupplyUnits.div(100).mul(issuerReservedMaximumPercentage);\r\n  }\r\n\r\n  // Reward distribution\r\n\r\n  modifier afterSale() {\r\n    require(rewardDistributionStarted());\r\n    _;\r\n  }\r\n\r\n  function rewardDistributionStarted() public constant returns (bool) {\r\n    return now >= rewardDistributionStart;\r\n  }\r\n\r\n  function requestReward() afterSale external {\r\n    if ((msg.sender == contractCreator) && (rewardDistributionEnded())) {\r\n      sendNotDistributedUnits();\r\n    } else {\r\n      rewardDistribution(msg.sender);\r\n    }    \r\n  }\r\n\r\n  function rewardDistribution(address _address) private {\r\n    require(contributors[_address].contributedWei > 0);    \r\n    uint256 reward = payableReward(_address);\r\n    require(reward > 0);\r\n    sendReward(_address, reward);\r\n  }\r\n\r\n  function sendNotDistributedUnits() private {\r\n    require(msg.sender == contractCreator);\r\n    uint256 balance = token.balanceOf(this);\r\n    RewardDistributed(contractCreator, balance);\r\n    sendReward(contractCreator, balance);\r\n  }\r\n\r\n  function payableReward(address _address) afterSale constant public returns (uint256) {\r\n    uint256 unitsLeft = totalUnitsLeft();\r\n    if (unitsLeft < 10**4) {\r\n      return unitsLeft;\r\n    }\r\n    uint256 totalReward = contributorTotalReward(_address);\r\n    uint256 paidBonus = contributors[_address].rewardDistributedDecoUnits;\r\n    uint256 totalRewardLeft = totalReward.sub(paidBonus);\r\n    uint256 bonusPerDay = totalReward.div(rewardDays());\r\n    if ((totalRewardLeft > 0) && ((bonusPerDay == 0) || (rewardDaysLeft() == 0))) {\r\n      return totalRewardLeft;\r\n    }\r\n    uint256 totalPayable = rewardPayableDays().mul(bonusPerDay);\r\n    uint256 reward = totalPayable.sub(paidBonus);\r\n    return reward;\r\n  }\r\n\r\n  function sendReward(address _address, uint256 _value) private {\r\n    contributors[_address].rewardDistributedDecoUnits = contributors[_address].rewardDistributedDecoUnits.add(_value);\r\n    rewardDistributedUnits = rewardDistributedUnits.add(_value); \r\n    RewardDistributed(_address, _value);\r\n    token.transfer(_address, _value);\r\n  }\r\n\r\n  function rewardPayableDays() constant public returns (uint256) {\r\n    uint256 payableDays = rewardDays().sub(rewardDaysLeft());\r\n    if (payableDays == 0) {\r\n      payableDays = 1;\r\n    }\r\n    if (payableDays > rewardDays()) {\r\n      payableDays = rewardDays();\r\n    }\r\n    return payableDays;\r\n  }\r\n\r\n  function rewardDays() constant public returns (uint256) {\r\n    uint256 rate = rewardUnitsRatePerYear();\r\n    if (rate == 0) {\r\n      return 80 * 365; // Initial assumption\r\n    }\r\n    uint256 daysToComplete = (totalSupplyUnits.sub(crowdsaleDistributedUnits)).mul(365).div(rate);\r\n    return daysToComplete;\r\n  }\r\n\r\n  function rewardUnitsRatePerYear() constant public returns (uint256) {\r\n    return crowdsaleDistributedUnits.div(100);\r\n  }\r\n\r\n  function currentRewardReleasePercentageRatePerYear() afterSale constant external returns (uint256) {\r\n    return rewardUnitsRatePerYear().mul(10**18).div(circulatingSupply()).mul(100); // Divide by 10**18 to get the actual decimal % value\r\n  }\r\n\r\n  function rewardDistributionEnd() constant public returns (uint256) {\r\n    uint256 secondsToComplete = rewardDays().mul(1 days);\r\n    return rewardDistributionStart.add(secondsToComplete);\r\n  }\r\n\r\n  function changeRemainingDecoRewardOwner(address _newOwner, string _confirmation) afterSale external {\r\n    require(_newOwner != 0x0);\r\n    require(sha3(_confirmation) == sha3(\"CONFIRM\"));\r\n    require(_newOwner != address(this));\r\n    require(_newOwner != address(token));    \r\n    require(contributors[_newOwner].decoUnits == 0);\r\n    require(contributors[msg.sender].decoUnits > 0);\r\n    require(token.balanceOf(_newOwner) > 0); // The new owner must have some number of DECO tokens. It proofs that _newOwner address is real.\r\n    contributors[_newOwner] = contributors[msg.sender];\r\n    delete(contributors[msg.sender]);\r\n    RemainingRewardOwnershipChanged(msg.sender, _newOwner);\r\n  }  \r\n\r\n  function totalUnitsLeft() constant public returns (uint256) {\r\n    int256 units = int256(totalSupplyUnits) - int256((rewardDistributedUnits.add(crowdsaleDistributedUnits))); \r\n    if (units < 0) {\r\n      return token.balanceOf(this);\r\n    }\r\n    return uint256(units);\r\n  }\r\n\r\n  function rewardDaysLeft() constant public returns (uint256) {\r\n    if (now < rewardDistributionStart) {\r\n      return rewardDays();\r\n    }\r\n    int256 left = (int256(rewardDistributionEnd()) - int256(now)) / 1 days;\r\n    if (left < 0) {\r\n      left = 0;\r\n    }\r\n    return uint256(left);\r\n  }\r\n\r\n  function contributorTotalReward(address _address) constant public returns (uint256) {\r\n    uint256 proportion = contributors[_address].decoUnits.mul(10**32).div(crowdsaleDistributedUnits.sub(issuerDistributedUnits));\r\n    uint256 leftForBonuses = totalSupplyUnits.sub(crowdsaleDistributedUnits);\r\n    uint256 reward = leftForBonuses.mul(proportion).div(10**32);\r\n    uint256 totalLeft = totalSupplyUnits - (rewardDistributedUnits.add(reward).add(crowdsaleDistributedUnits));\r\n    if (totalLeft < 10**4) {\r\n      reward = reward.add(totalLeft);\r\n    }    \r\n    return reward;\r\n  }\r\n\r\n  function contributorDistributedReward(address _address) constant public returns (uint256) {\r\n    return contributors[_address].rewardDistributedDecoUnits;\r\n  }  \r\n\r\n  function rewardDistributionEnded() public constant returns (bool) {\r\n    return now > rewardDistributionEnd();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"unitsLimitForCurrentSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributionStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originalRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerReservedMaximumPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributionEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumSaleLimitUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestReward\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"payableReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleLimitReachedForCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributionStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleDistributedUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPayableDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRewardReleasePercentageRatePerYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleLimitUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"distibutedDecoUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_confirmation\",\"type\":\"string\"}],\"name\":\"changeRemainingDecoRewardOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributedUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumIssuerReservedUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuerDistributedUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardUnitsRatePerYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contributorDistributedReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contributorTotalReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contributedWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDaysLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMaximumSalePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnitsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RemainingRewardOwnershipChanged\",\"type\":\"event\"}]","ContractName":"DecoBank","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a71dc5342f1213f5ae42f742a922ce56f156cdd69bd7f423c11de143ddf1d066"}]}