{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.12;\r\n/**\r\n * Overflow aware uint math functions.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev Adds token security measures\r\n */\r\ncontract Token is ERC20 { using SafeMath for uint;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n    * @dev Fix for the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length < size + 4) revert();\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // A vulernability of the approve method in the ERC20 standard was identified by\r\n    // Mikhail Vladimirov and Dmitry Khovratovich here:\r\n    // https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\r\n    // It's better to use this method which is not susceptible to over-withdrawing by the approvee.\r\n    /// @param _spender The address to approve\r\n    /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\r\n    /// @param _newValue The new value to approve, this will replace the _currentValue\r\n    /// @return bool Whether the approval was a success (see ERC20's `approve`)\r\n    function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\r\n        if (allowed[msg.sender][_spender] != _currentValue) {\r\n            return false;\r\n        }\r\n            return approve(_spender, _newValue);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n *  @title CHEXToken\r\n *  @dev ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\r\n */\r\ncontract CHEXToken is Token { using SafeMath for uint;\r\n\r\n    string public constant name = \"CHEX Token\";\r\n    string public constant symbol = \"CHX\";\r\n    uint public constant decimals = 18;\r\n    uint public startBlock; //crowdsale start block\r\n    uint public endBlock; //crowdsale end block\r\n\r\n    address public founder;\r\n    \r\n    uint public tokenCap = 2000000000 * 10**decimals; // 2b tokens, each divided to up to 10^decimals units.\r\n    uint public crowdsaleSupply = 0;\r\n\r\n    event Issuance(address indexed recipient, uint chx, uint eth);\r\n\r\n    uint public crowdsaleAllocation = tokenCap; //100% of token supply allocated for crowdsale\r\n\r\n    uint public etherRaised = 0;\r\n\r\n    uint public constant MIN_ETHER = 1 finney; //minimum ether required to buy tokens\r\n    uint public constant HALVING_DELAY = 460800; //~80 days after sale begins, drop discount to 25%\r\n\r\n    enum TokenSaleState {\r\n        Initial,    //contract initialized, bonus token\r\n        Crowdsale,  //limited time crowdsale\r\n        Live,       //default price\r\n        Frozen      //prevent sale of tokens\r\n    }\r\n\r\n    TokenSaleState public _saleState = TokenSaleState.Initial;\r\n\r\n    function CHEXToken(address founderInput, uint startBlockInput, uint endBlockInput) {\r\n        founder = founderInput;\r\n        startBlock = startBlockInput;\r\n        endBlock = endBlockInput;\r\n        \r\n        updateTokenSaleState();\r\n    }\r\n\r\n    function price() constant returns(uint) {\r\n        if (_saleState == TokenSaleState.Initial) return 42007;\r\n        if (_saleState == TokenSaleState.Crowdsale) {\r\n            uint discount = 1000;\r\n            if (block.number > startBlock + HALVING_DELAY) discount = 500;\r\n            return 21000 + 21 * discount;\r\n        }\r\n        return 21000;\r\n    }\r\n\r\n    function() payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function tokenFallback() payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function buy(address recipient) payable {\r\n        if (recipient == 0x0) revert();\r\n        if (msg.value < MIN_ETHER) revert();\r\n        if (_saleState == TokenSaleState.Frozen) revert();\r\n        \r\n        updateTokenSaleState();\r\n\r\n        uint tokens = msg.value.mul(price());\r\n        uint nextTotal = totalSupply.add(tokens);\r\n        uint nextCrowdsaleTotal = crowdsaleSupply.add(tokens);\r\n\r\n        if (nextTotal >= tokenCap) revert();\r\n        if (nextCrowdsaleTotal >= crowdsaleAllocation) revert();\r\n        \r\n        balances[recipient] = balances[recipient].add(tokens);\r\n\r\n        totalSupply = nextTotal;\r\n        crowdsaleSupply = nextCrowdsaleTotal;\r\n    \r\n        etherRaised = etherRaised.add(msg.value);\r\n        \r\n        Transfer(0, recipient, tokens);\r\n        Issuance(recipient, tokens, msg.value);\r\n    }\r\n\r\n    function updateTokenSaleState () {\r\n        if (_saleState == TokenSaleState.Frozen) return;\r\n\r\n        if (_saleState == TokenSaleState.Live && block.number > endBlock) return;\r\n        \r\n        if (_saleState == TokenSaleState.Initial && block.number >= startBlock) {\r\n            _saleState = TokenSaleState.Crowdsale;\r\n        }\r\n        \r\n        if (_saleState == TokenSaleState.Crowdsale && block.number > endBlock) {\r\n            _saleState = TokenSaleState.Live;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * FOR AUTHORIZED USE ONLY\r\n    */\r\n    modifier onlyInternal {\r\n        require(msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    function freeze() onlyInternal {\r\n        _saleState = TokenSaleState.Frozen;\r\n    }\r\n\r\n    function unfreeze() onlyInternal {\r\n        _saleState = TokenSaleState.Initial;\r\n        updateTokenSaleState();\r\n    }\r\n\r\n    function withdrawFunds() onlyInternal {\r\n\t\tif (this.balance == 0) revert();\r\n\r\n\t\tfounder.transfer(this.balance);\r\n\t}\r\n\r\n    function changeFounder(address _newAddress) onlyInternal {\r\n        if (msg.sender != founder) revert();\r\n        if (_newAddress == 0x0) revert();\r\n        \r\n\r\n\t\tfounder = _newAddress;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALVING_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTokenSaleState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"compareAndApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_saleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"founderInput\",\"type\":\"address\"},{\"name\":\"startBlockInput\",\"type\":\"uint256\"},{\"name\":\"endBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CHEXToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000add512a7998880b9b937341e02322e5581dce86d0000000000000000000000000000000000000000000000000000000000401caa00000000000000000000000000000000000000000000000000000000004e2caa","Library":"","SwarmSource":"bzzr://b473c99e44bd89d8c1b9f89f4e4eb6fa275904a9f5c584b8ec879b21c5b0c75a"}]}