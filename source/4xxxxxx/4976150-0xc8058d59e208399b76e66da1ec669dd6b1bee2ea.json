{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n  contract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address _owner)public view returns (uint256 balance);\r\n  function allowance(address _owner, address _spender)public view returns (uint remaining);\r\n  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\r\n  function approve(address _spender, uint _amount)public returns (bool ok);\r\n  function transfer(address _to, uint _amount)public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\r\n}\r\n\r\ncontract GOLDBITSCOIN is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n    string public constant symbol = \"GBC\";\r\n    string public constant name = \"Gold Bits Coin\";\r\n    uint8 public constant decimals = 10;\r\n    // 100 million total supply // muliplies dues to decimal precision\r\n    uint256 public _totalSupply = 1000000000 * 10 **10;     // 1 billion supply           \r\n    // Balances for each account\r\n    mapping(address => uint256) balances;   \r\n    // Owner of this contract\r\n    address public owner;\r\n    \r\n    uint public perTokenPrice;\r\n    address public central_account;\r\n    bool stopped = true;\r\n    bool ICO_PRE_ICO_STAGE = false;\r\n    uint256 public stage = 0;\r\n    uint256 public one_ether_usd_price = 0;\r\n    \r\n    mapping (address => mapping (address => uint)) allowed;\r\n    \r\n    // ico startdate\r\n    uint256 startdate;\r\n\r\n    // for maintaining prices with days\r\n    uint256 first_ten_days;\r\n    uint256 second_ten_days;\r\n    uint256 third_ten_days;\r\n    \r\n    uint256 public supply_increased;\r\n    bool PreICOended = false;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    event LOG(string e,uint256 value);\r\n    //ico enddate;\r\n    uint256 enddate;\r\n    \r\n    modifier onlyOwner() {\r\n      if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n        }\r\n        \r\n    modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n    \r\n    function GOLDBITSCOIN() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = 200000000 * 10 **10; // 200 million token with company/owner , multiplied due to decimal precision\r\n    \r\n        supply_increased += balances[owner];\r\n    }\r\n    \r\n    function setCentralAccount(address central_address) public onlyOwner\r\n    {\r\n        central_account = central_address;\r\n    }\r\n    // to be called by owner on 15th jan to start PreICO till 31st january\r\n    function StatPreICO() external onlyOwner\r\n    {\r\n        stage = 1;\r\n        ICO_PRE_ICO_STAGE = true;\r\n        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\r\n        startdate = now;\r\n        enddate = now.add(17 days);\r\n        supply_increased += balances[address(this)];\r\n        perTokenPrice = 24; // 24 cents\r\n   \r\n    }\r\n    // to be called by owner on 1st feb to start ICO till 1st march\r\n    function StartICO() external onlyOwner\r\n    {\r\n        require(PreICOended);    \r\n        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\r\n        stage = 2;\r\n        ICO_PRE_ICO_STAGE = true;\r\n        stopped = false;\r\n        startdate = now;\r\n        first_ten_days = now.add(10 days);\r\n        second_ten_days = first_ten_days.add(10 days);\r\n        third_ten_days = second_ten_days.add(10 days);\r\n        enddate = now.add(30 days);\r\n        supply_increased += balances[address(this)];\r\n        perTokenPrice = 30; // 30 cents\r\n    }\r\n    // to be called by owner at end of preICO and ICO\r\n    function end_ICO_PreICO() external onlyOwner\r\n    {\r\n        PreICOended = true;\r\n        stage = 0;\r\n        ICO_PRE_ICO_STAGE = false;\r\n        supply_increased -= balances[address(this)];\r\n        balances[address(this)] =0;\r\n    }\r\n    \r\n    \r\n    function getTokenPriceforDapp() public view returns (uint256)\r\n    {\r\n        return perTokenPrice;\r\n    }\r\n    \r\n    function getEtherPriceforDapp() public view returns (uint256)\r\n    {\r\n        return one_ether_usd_price;\r\n    }\r\n    \r\n    function () public payable \r\n    {\r\n        require(ICO_PRE_ICO_STAGE);\r\n        require(stage > 0);\r\n        require(now <= enddate);\r\n        distributeToken(msg.value,msg.sender);   \r\n    }\r\n    \r\n     \r\n    function distributeToken(uint val, address user_address ) private {\r\n        \r\n        uint tokens = ((one_ether_usd_price * val) )  / (perTokenPrice * 10**14); \r\n\r\n        require(balances[address(this)] >= tokens);\r\n        \r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[user_address] = balances[user_address].add(tokens);\r\n        Transfer(address(this), user_address, tokens);\r\n       \r\n      \r\n        \r\n    }\r\n    \r\n    // need to be called before the ICO to set ether price give to 8 decimal places\r\n    function setconfigurationEtherPrice(uint etherPrice) public onlyOwner\r\n    {\r\n        one_ether_usd_price = etherPrice;\r\n       \r\n        \r\n    }\r\n    // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\r\n    function setconfigurationTokenPrice(uint TokenPrice) public onlyOwner\r\n    {\r\n      \r\n        perTokenPrice = TokenPrice;\r\n        \r\n    }\r\n    \r\n        // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\r\n    function setStage(uint status) public onlyOwner\r\n    {\r\n      \r\n        stage = status;\r\n        \r\n    }\r\n    \r\n    //used by wallet during token buying procedure \r\n    function transferby(address _from,address _to,uint256 _amount) public onlycentralAccount returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n                 \r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // to be called by owner after an year review\r\n    function mineToken(uint256 supply_to_increase) public onlyOwner\r\n    {\r\n        require((supply_increased + supply_to_increase) <= _totalSupply);\r\n        supply_increased += supply_to_increase;\r\n        \r\n        balances[owner] += supply_to_increase;\r\n        Transfer(0, owner, supply_to_increase);\r\n    }\r\n    \r\n    \r\n    // total supply of the tokens\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalSupply;\r\n     }\r\n  \r\n     //  balance of a particular account\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n         require( _to != 0x0);\r\n         require(balances[msg.sender] >= _amount \r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n             balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n             balances[_to] = balances[_to].add(_amount);\r\n             Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n     }\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     )public returns (bool success) {\r\n        require(_to != 0x0); \r\n         require(balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount >= 0\r\n             && balances[_to] + _amount >= balances[_to]);\r\n             balances[_from] = balances[_from].sub(_amount);\r\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n             balances[_to] = balances[_to].add(_amount);\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n             }\r\n \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n   }\r\n   \r\n   \t//In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = balances[newOwner].add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t}\r\n\t\r\n\t// drain ether called by only owner\r\n\tfunction drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    //Below function will convert string to integer removing decimal\r\n\tfunction stringToUint(string s) private returns (uint) \r\n\t  {\r\n        bytes memory b = bytes(s);\r\n        uint i;\r\n        uint result1 = 0;\r\n        for (i = 0; i < b.length; i++) {\r\n            uint c = uint(b[i]);\r\n            if(c == 46)\r\n            {\r\n                // Do nothing --this will skip the decimal\r\n            }\r\n          else if (c >= 48 && c <= 57) {\r\n                result1 = result1 * 10 + (c - 48);\r\n              // usd_price=result;\r\n                \r\n            }\r\n        }\r\n            return result1;\r\n      }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supply_increased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supply_to_increase\",\"type\":\"uint256\"}],\"name\":\"mineToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_address\",\"type\":\"address\"}],\"name\":\"setCentralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"central_account\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherPriceforDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO_PreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"one_ether_usd_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StatPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherPrice\",\"type\":\"uint256\"}],\"name\":\"setconfigurationEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPriceforDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TokenPrice\",\"type\":\"uint256\"}],\"name\":\"setconfigurationTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"e\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LOG\",\"type\":\"event\"}]","ContractName":"GOLDBITSCOIN","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db22907f789d5d2773d28287c3428e835227cfe66f259de025f2c7e5b4192032"}]}