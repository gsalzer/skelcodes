{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256 tS);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    // Used only once for burning excess tokens after ICO.\r\n    function burnExcess(uint256 _value) returns (bool success);\r\n\r\n    // Used for burning 100 tokens for every completed poll up to maximum of 10% of totalSupply.\r\n    function burnPoll(uint256 _value) returns (bool success);\r\n \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Triggered whenever tokens are destroyed\r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n \r\ncontract POLLToken is ERC20Interface {\r\n\r\n    string public constant symbol = \"POLL\";\r\n    string public constant name = \"ClearPoll Token\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply = 10000000 * 10 ** uint256(decimals);\r\n    \r\n    address public owner;\r\n    \r\n    bool public excessTokensBurnt = false;\r\n\r\n    uint256 public pollCompleted = 0;\r\n    \r\n    uint256 public pollBurnInc = 100 * 10 ** uint256(decimals);\r\n\r\n    uint256 public pollBurnQty = 0;\r\n\r\n    bool public pollBurnCompleted = false;\r\n\r\n    uint256 public pollBurnQtyMax;\r\n\r\n    mapping(address => uint256) balances;\r\n \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Handle ether mistakenly sent to contract\r\n    function () payable {\r\n      if (msg.value > 0) {\r\n          if (!owner.send(msg.value)) revert();\r\n      }\r\n    }\r\n\r\n    function POLLToken() {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint256 tS) {\r\n        tS = _totalSupply;\r\n    }\r\n \r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount \r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(\r\n        address _from, address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Used only once for burning excess tokens after ICO.\r\n    function burnExcess(uint256 _value) public returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _value && msg.sender == owner && !excessTokensBurnt);\r\n        balances[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        pollBurnQtyMax = totalSupply() / 10;\r\n        excessTokensBurnt = true;\r\n        return true;\r\n    }   \r\n\r\n    // Used for burning 100 tokens for every completed poll up to maximum of 10% of totalSupply.\r\n    function burnPoll(uint256 _value) public returns (bool success) {    \t\r\n        require(msg.sender == owner && excessTokensBurnt && _value > pollCompleted && !pollBurnCompleted);\r\n        uint256 burnQty;\r\n        if ((_value * pollBurnInc) <= pollBurnQtyMax) {\r\n            burnQty = (_value-pollCompleted) * pollBurnInc;\r\n            balances[msg.sender] -= burnQty;\r\n            _totalSupply -= burnQty;\r\n            Burn(msg.sender, burnQty);\r\n            pollBurnQty += burnQty;\r\n            pollCompleted = _value;\r\n            if (pollBurnQty == pollBurnQtyMax) pollBurnCompleted = true;\r\n            return true;\r\n        } else if (pollBurnQty < pollBurnQtyMax) {\r\n\t\t\tburnQty = pollBurnQtyMax - pollBurnQty;\r\n            balances[msg.sender] -= burnQty;\r\n            _totalSupply -= burnQty;\r\n            Burn(msg.sender, burnQty);\r\n            pollBurnQty += burnQty;\r\n            pollCompleted = _value;\r\n            pollBurnCompleted = true;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"tS\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnQtyMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnPoll\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"excessTokensBurnt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pollBurnInc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnExcess\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"POLLToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://70b297cd3db26680595e63aab5ded327c150a1b372778c5877228c32fff01e56"}]}