{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n/**\r\n* @title UNR ERC20 TOKEN CONTRACT\r\n* @dev ERC-20 Token Standar Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n/**\r\n * @title ERC20TokenInterface\r\n * @dev Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    }\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    address public admin; //Admin address is public\r\n    \r\n    /**\r\n    * @dev This contructor takes the msg.sender as the first administer\r\n    */\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function transfer the adminship of the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}\r\n\r\n/**\r\n* @title ERC20Token\r\n* @notice Token definition contract\r\n*/\r\ncontract ERC20Token is ERC20TokenInterface, admined { //Standar definition of a ERC20Token\r\n    using SafeMath for uint256; //SafeMath is used for uint256 operations\r\n    mapping (address => uint256) balances; //A mapping of all balances per address\r\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n    * @notice Get the balance of an _owner address.\r\n    * @param _owner The address to be query.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @notice transfer _value tokens to address _to\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return success with boolean value true if done\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)); //Dont want that any body destroy token\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\r\n    * @param _from The address where tokens comes.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return success with boolean value true if done\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Assign allowance _value to _spender address to use the msg.sender balance\r\n    * @param _spender The address to be allowed to spend.\r\n    * @param _value The amount to be allowed.\r\n    * @return success with boolean value true\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Get the allowance of an specified address to use another address balance.\r\n    * @param _owner The address of the owner of the tokens.\r\n    * @param _spender The address of the allowed spender.\r\n    * @return remaining with the allowance value\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Mint _mintedAmount tokens to _target address.\r\n    * @param _target The address of the receiver of the tokens.\r\n    * @param _mintedAmount amount to mint.\r\n    */\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin public {\r\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\r\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\r\n        Transfer(0, this, _mintedAmount);\r\n        Transfer(this, _target, _mintedAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Burn _burnedAmount tokens form _target address.\r\n    * @param _target The address of the holder of the tokens.\r\n    * @param _burnedAmount amount to burn.\r\n    */\r\n    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin public {\r\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        Burned(_target, _burnedAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n}\r\n\r\n/**\r\n* @title AssetUNR\r\n* @notice ERC20 token creation.\r\n*/\r\ncontract AssetUNR is ERC20Token {\r\n    string public constant name = 'UnitedARCoin';\r\n    uint256 public constant decimals = 8;\r\n    string public constant symbol = 'UNR';\r\n    string public constant version = '1';\r\n    \r\n    /**\r\n    * @notice token contructor.\r\n    * @param _teamAddress is the address of the developer team\r\n    */\r\n    function AssetUNR(address _teamAddress) public {\r\n        require(msg.sender != _teamAddress);\r\n        totalSupply = 100000000 * (10 ** decimals); //100 million tokens initial supply;\r\n        balances[msg.sender] = 88000000 * (10 ** decimals); //88 million supply is initially holded by contract creator for the ICO, marketing and bounty\r\n        balances[_teamAddress] = 11900000 * (10 ** decimals); //11.9 million supply is initially holded by developer team\r\n        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 100000 * (10 ** decimals); //0.1 million supply is initially holded by contract writer\r\n        \r\n        Transfer(0, this, totalSupply);\r\n        Transfer(this, msg.sender, balances[msg.sender]);\r\n        Transfer(this, _teamAddress, balances[_teamAddress]);\r\n        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6]);\r\n    }\r\n    \r\n    /**\r\n    * @notice this contract will revert on direct non-function calls\r\n    * @dev Function to handle callback calls\r\n    */\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"AssetUNR","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0599effcb568f2fd7d446951a2d95bfeba576b4","Library":"","SwarmSource":"bzzr://9399faf5ec4b809222ebc32515eec407d052b0f2f727bd673dd3d21e15f6a354"}]}