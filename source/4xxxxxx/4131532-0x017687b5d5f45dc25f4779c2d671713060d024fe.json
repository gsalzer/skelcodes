{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /**\r\n   * @dev Fix for the ERC20 short address attack.\r\n   */\r\n  modifier onlyPayloadSize(uint size) {\r\n     require(msg.data.length >= size + 4) ;\r\n     _;\r\n  }\r\n\r\n\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)  returns (bool success){\r\n    balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSubtract(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSubtract(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    \r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require (!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require (paused) ;\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract IndorseToken is SafeMath, StandardToken, Pausable {\r\n    // metadata\r\n    string public constant name = \"Indorse Token\";\r\n    string public constant symbol = \"IND\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public indSaleDeposit = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;\r\n    address public indSeedDeposit = 0x0083fdFB328fC8D07E2a7933e3013e181F9798Ad;\r\n    address public indPresaleDeposit = 0x007AB99FBf023Cb41b50AE7D24621729295EdBFA;\r\n    address public indVestingDeposit = 0x0011349f715cf59F75F0A00185e7B1c36f55C3ab;\r\n    address public indCommunityDeposit = 0x0097ec8840E682d058b24E6e19E68358d97A6E5C;\r\n    address public indFutureDeposit = 0x00d1bCbCDE9Ca431f6dd92077dFaE98f94e446e4; \r\n    address public indInflationDeposit = 0x00D31206E625F1f30039d1Fa472303E71317870A;\r\n    \r\n    uint256 public constant indSale = 31603785 * 10**decimals; \r\n    uint256 public constant indSeed = 3566341 * 10**decimals; \r\n    uint256 public constant indPreSale = 22995270 * 10**decimals; \r\n    uint256 public constant indVesting  = 28079514 * 10**decimals; \r\n    uint256 public constant indCommunity  = 10919811 * 10**decimals;\r\n    uint256 public constant indFuture  = 58832579 * 10**decimals;  \r\n    uint256 public constant indInflation  = 14624747 * 10**decimals;\r\n   \r\n    // constructor\r\n    function IndorseToken()\r\n    {\r\n      balances[indSaleDeposit]    = indSale; \r\n      balances[indSeedDeposit]  = indSeed;  \r\n      balances[indPresaleDeposit] = indPreSale;\r\n      balances[indVestingDeposit] = indVesting;\r\n      balances[indCommunityDeposit] = indCommunity;\r\n      balances[indFutureDeposit] = indFuture;    \r\n      balances[indInflationDeposit] = indInflation;\r\n\r\n      totalSupply = indSale + indSeed + indPreSale + indVesting + indCommunity + indFuture + indInflation;\r\n\r\n      Transfer(0x0,indSaleDeposit,indSale);\r\n      Transfer(0x0,indSeedDeposit,indSeed);\r\n      Transfer(0x0,indPresaleDeposit,indPreSale);\r\n      Transfer(0x0,indVestingDeposit,indVesting);\r\n      Transfer(0x0,indCommunityDeposit,indCommunity);\r\n      Transfer(0x0,indFutureDeposit,indFuture);\r\n      Transfer(0x0,indInflationDeposit,indInflation);\r\n   }\r\n\r\n  function transfer(address _to, uint _value) whenNotPaused returns (bool success)  {\r\n    return super.transfer(_to,_value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) whenNotPaused returns (bool success)  {\r\n    return super.approve(_spender,_value);\r\n  }\r\n}\r\n\r\ncontract INDvesting {\r\n  mapping (address => uint256) public allocations;\r\n  uint256 public unlockDate;\r\n  address public IND = 0xf8e386EDa857484f5a12e4B5DAa9984E06E73705;\r\n  uint256 public constant exponent = 10**18;\r\n\r\n  function INDvesting() {\r\n    unlockDate = now + 240 days;\r\n\r\n    // Advisors\r\n    allocations[0xe8C67375D802c9Ae9583df38492Ff3be49e8Ca89] = 100000;\r\n    allocations[0x3DFb8A970e8d11B4002b2bc98d5a09b09Da3482c] = 100000;\r\n    allocations[0xC865a2220960585A0D365E8D0d7897d4E3547ae6] = 10000;\r\n    allocations[0x0DC77D48f290aCaC0e831c835714Ae45e65Ac3d8] = 150000;\r\n    allocations[0x9628dB0f162665C34BFC0655D55c6B637552B9ec] = 50000;\r\n    allocations[0x89B7c9c2D529284F9E942389D0894EEadF34f037] = 150000;\r\n    allocations[0xee4918fbd8Cd49a46B66488C523c3C24d9426270] = 100000;\r\n    allocations[0xc8A1DAb586DEe8a30Cb88C87b8A3614E0a391fC5] = 100000;\r\n    allocations[0x0ed1374A831744aF48174a890BbA5ac333e76717] = 50000;\r\n    allocations[0x293a0369D58aF2433C3A435A6B5343C5455C4eD4] = 100000;\r\n    allocations[0xf190f0193b694d9d2bb865a66f0c17cbd8280c71] = 50000;\r\n    allocations[0xB0D9693eEC83452BD54FA5E0318850cc1B1a4a19] = 150000;\r\n    allocations[0x6f43006776e2df2bbcbc24055275c638dcde5b64] = 100000;\r\n\r\n    // Team\r\n    allocations[0x00e21B56A62ff177331C38A359AE0b316fa432Cc] = 6239891;\r\n    allocations[0xa6565606564282E2E23a86689d43448F6fc3236E] = 6239891;\r\n    allocations[0xFaa2480cbCe8FAa7fb706f0f16C9AB33873A1E38] = 3119945;\r\n    allocations[0xEaE13552b4C19B1Dcb645D40dC578fFabFD2e32C] = 3119945;\r\n    allocations[0xba74315f5f65dE811C46840901fEDF3D6dcDc748] = 50000;\r\n\r\n    // Remaining tokens allowance\r\n    allocations[0x0011349f715cf59F75F0A00185e7B1c36f55C3ab] = 8099842;\r\n  }\r\n\r\n  function unlock() external {\r\n    require (now > unlockDate);\r\n    uint256 entitled = allocations[msg.sender];\r\n    allocations[msg.sender] = 0;\r\n    require(IndorseToken(IND).transfer(msg.sender, entitled * exponent));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"IND\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exponent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"INDvesting","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://466617628ba05b647d9a39182f649abf85a17f0fc52c98d3d372843136f9025d"}]}