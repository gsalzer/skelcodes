{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public contractOwner;\r\n\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public pendingContractOwner;\r\n\r\n    function Owned() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner check modifier\r\n    */\r\n    modifier onlyContractOwner() {\r\n        if (contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract and scrub a data\r\n     * @notice Only owner can call it\r\n     */\r\n    function destroy() onlyContractOwner {\r\n        suicide(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prepares ownership pass.\r\n     *\r\n     * Can only be called by current owner.\r\n     *\r\n     * @param _to address of the next owner. 0x0 is not allowed.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeContractOwnership(address _to) onlyContractOwner public returns (bool) {\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize ownership pass.\r\n     *\r\n     * Can only be called by pending owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function claimContractOwnership() public returns (bool) {\r\n        if (pendingContractOwner != msg.sender) {\r\n            return false;\r\n        }\r\n\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner\r\n    *\r\n    * @param _to the next contract owner\r\n    *\r\n    * @return `true` if success, `false` otherwise\r\n    */\r\n    function transferContractOwnership(address _to) onlyContractOwner public returns (bool) {\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        if (pendingContractOwner != 0x0) {\r\n            pendingContractOwner = 0x0;\r\n        }\r\n\r\n        contractOwner = _to;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\ncontract Object is Owned {\r\n    /**\r\n    *  Common result code. Means everything is fine.\r\n    */\r\n    uint constant OK = 1;\r\n\r\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\r\n        for(uint i=0;i<tokens.length;i++) {\r\n            address token = tokens[i];\r\n            uint balance = ERC20Interface(token).balanceOf(this);\r\n            if(balance != 0)\r\n                ERC20Interface(token).transfer(_to,balance);\r\n        }\r\n        return OK;\r\n    }\r\n}\r\n\r\ncontract MultiEventsHistoryAdapter {\r\n\r\n    /**\r\n    *   @dev It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    */\r\n    function _self() constant internal returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ChronoBankPlatformEmitter is MultiEventsHistoryAdapter {\r\n    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\r\n    event Issue(bytes32 indexed symbol, uint value, address indexed by);\r\n    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\r\n    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\r\n    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\r\n    event Recovery(address indexed from, address indexed to, address by);\r\n    event Error(uint errorCode);\r\n\r\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) {\r\n        Transfer(_from, _to, _symbol, _value, _reference);\r\n    }\r\n\r\n    function emitIssue(bytes32 _symbol, uint _value, address _by) {\r\n        Issue(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevoke(bytes32 _symbol, uint _value, address _by) {\r\n        Revoke(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) {\r\n        OwnershipChange(_from, _to, _symbol);\r\n    }\r\n\r\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) {\r\n        Approve(_from, _spender, _symbol, _value);\r\n    }\r\n\r\n    function emitRecovery(address _from, address _to, address _by) {\r\n        Recovery(_from, _to, _by);\r\n    }\r\n\r\n    function emitError(uint _errorCode) {\r\n        Error(_errorCode);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ProxyEventsEmitter {\r\n    function emitTransfer(address _from, address _to, uint _value);\r\n    function emitApprove(address _from, address _spender, uint _value);\r\n}\r\n\r\n\r\ncontract AssetOwningListener {\r\n    function assetOwnerAdded(bytes32 _symbol, address _platform, address _owner);\r\n    function assetOwnerRemoved(bytes32 _symbol, address _platform, address _owner);\r\n}\r\n\r\n/**\r\n * @title ChronoBank Platform.\r\n *\r\n * The official ChronoBank assets platform powering TIME and LHT tokens, and possibly\r\n * other unknown tokens needed later.\r\n * Platform uses MultiEventsHistory contract to keep events, so that in case it needs to be redeployed\r\n * at some point, all the events keep appearing at the same place.\r\n *\r\n * Every asset is meant to be used through a proxy contract. Only one proxy contract have access\r\n * rights for a particular asset.\r\n *\r\n * Features: transfers, allowances, supply adjustments, lost wallet access recovery.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract ChronoBankPlatform is Object, ChronoBankPlatformEmitter {\r\n    using SafeMath for uint;\r\n\r\n    uint constant CHRONOBANK_PLATFORM_SCOPE = 15000;\r\n    uint constant CHRONOBANK_PLATFORM_PROXY_ALREADY_EXISTS = CHRONOBANK_PLATFORM_SCOPE + 0;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF = CHRONOBANK_PLATFORM_SCOPE + 1;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_VALUE = CHRONOBANK_PLATFORM_SCOPE + 2;\r\n    uint constant CHRONOBANK_PLATFORM_INSUFFICIENT_BALANCE = CHRONOBANK_PLATFORM_SCOPE + 3;\r\n    uint constant CHRONOBANK_PLATFORM_NOT_ENOUGH_ALLOWANCE = CHRONOBANK_PLATFORM_SCOPE + 4;\r\n    uint constant CHRONOBANK_PLATFORM_ASSET_ALREADY_ISSUED = CHRONOBANK_PLATFORM_SCOPE + 5;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE = CHRONOBANK_PLATFORM_SCOPE + 6;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_REISSUE_FIXED_ASSET = CHRONOBANK_PLATFORM_SCOPE + 7;\r\n    uint constant CHRONOBANK_PLATFORM_SUPPLY_OVERFLOW = CHRONOBANK_PLATFORM_SCOPE + 8;\r\n    uint constant CHRONOBANK_PLATFORM_NOT_ENOUGH_TOKENS = CHRONOBANK_PLATFORM_SCOPE + 9;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_NEW_OWNER = CHRONOBANK_PLATFORM_SCOPE + 10;\r\n    uint constant CHRONOBANK_PLATFORM_ALREADY_TRUSTED = CHRONOBANK_PLATFORM_SCOPE + 11;\r\n    uint constant CHRONOBANK_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS = CHRONOBANK_PLATFORM_SCOPE + 12;\r\n    uint constant CHRONOBANK_PLATFORM_ASSET_IS_NOT_ISSUED = CHRONOBANK_PLATFORM_SCOPE + 13;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_INVOCATION = CHRONOBANK_PLATFORM_SCOPE + 17;\r\n\r\n    // Structure of a particular asset.\r\n    struct Asset {\r\n        uint owner;                       // Asset's owner id.\r\n        uint totalSupply;                 // Asset's total supply.\r\n        string name;                      // Asset's name, for information purposes.\r\n        string description;               // Asset's description, for information purposes.\r\n        bool isReissuable;                // Indicates if asset have dynamic or fixed supply.\r\n        uint8 baseUnit;                   // Proposed number of decimals.\r\n        mapping(uint => Wallet) wallets;  // Holders wallets.\r\n        mapping(uint => bool) partowners; // Part-owners of an asset; have less access rights than owner\r\n    }\r\n\r\n    // Structure of an asset holder wallet for particular asset.\r\n    struct Wallet {\r\n        uint balance;\r\n        mapping(uint => uint) allowance;\r\n    }\r\n\r\n    // Structure of an asset holder.\r\n    struct Holder {\r\n        address addr;                    // Current address of the holder.\r\n        mapping(address => bool) trust;  // Addresses that are trusted with recovery proocedure.\r\n    }\r\n\r\n    // Iterable mapping pattern is used for holders.\r\n    uint public holdersCount;\r\n    mapping(uint => Holder) public holders;\r\n\r\n    // This is an access address mapping. Many addresses may have access to a single holder.\r\n    mapping(address => uint) holderIndex;\r\n\r\n    // List of symbols that exist in a platform\r\n    bytes32[] public symbols;\r\n\r\n    // Asset symbol to asset mapping.\r\n    mapping(bytes32 => Asset) public assets;\r\n\r\n    // Asset symbol to asset proxy mapping.\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    /** Co-owners of a platform. Has less access rights than a root contract owner */\r\n    mapping(address => bool) public partowners;\r\n\r\n    // Should use interface of the emitter, but address of events history.\r\n    address public eventsHistory;\r\n    address public eventsAdmin;\r\n\r\n    address owningListener;\r\n\r\n    /**\r\n     * Emits Error event with specified error message.\r\n     *\r\n     * Should only be used if no state changes happened.\r\n     *\r\n     * @param _errorCode code of an error\r\n     */\r\n    function _error(uint _errorCode) internal returns(uint) {\r\n        ChronoBankPlatformEmitter(eventsHistory).emitError(_errorCode);\r\n        return _errorCode;\r\n    }\r\n\r\n    /**\r\n     * Emits Error if called not by asset owner.\r\n     */\r\n    modifier onlyOwner(bytes32 _symbol) {\r\n        if (isOwner(msg.sender, _symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits Error if called not by asset owner.\r\n     */\r\n    modifier onlyEventsAdmin() {\r\n        if (eventsAdmin == msg.sender || contractOwner == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev UNAUTHORIZED if called not by one of symbol's partowners or owner\r\n    */\r\n    modifier onlyOneOfOwners(bytes32 _symbol) {\r\n        if (hasAssetRights(msg.sender, _symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev UNAUTHORIZED if called not by one of partowners or contract's owner\r\n    */\r\n    modifier onlyOneOfContractOwners() {\r\n        if (contractOwner == msg.sender || partowners[msg.sender]) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits Error if called not by asset proxy.\r\n     */\r\n    modifier onlyProxy(bytes32 _symbol) {\r\n        if (proxies[_symbol] == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits Error if _from doesn't trust _to.\r\n     */\r\n    modifier checkTrust(address _from, address _to) {\r\n        if (isTrusted(_from, _to)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Adds a co-owner of a contract. Might be more than one co-owner\r\n    * @dev Allowed to only contract onwer\r\n    *\r\n    * @param _partowner a co-owner of a contract\r\n    *\r\n    * @return result code of an operation\r\n    */\r\n    function addPartOwner(address _partowner) onlyContractOwner returns (uint) {\r\n        partowners[_partowner] = true;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n    * Removes a co-owner of a contract\r\n    * @dev Should be performed only by root contract owner\r\n    *\r\n    * @param _partowner a co-owner of a contract\r\n    *\r\n    * @return result code of an operation\r\n    */\r\n    function removePartOwner(address _partowner) onlyContractOwner returns (uint) {\r\n        delete partowners[_partowner];\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Sets EventsHstory contract address.\r\n     *\r\n     * Can be set only by events history admon or owner.\r\n     *\r\n     * @param _eventsHistory MultiEventsHistory contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupEventsHistory(address _eventsHistory) onlyEventsAdmin returns (uint errorCode) {\r\n        eventsHistory = _eventsHistory;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Sets EventsHstory contract admin address.\r\n     *\r\n     * Can be set only by contract owner.\r\n     *\r\n     * @param _eventsAdmin admin contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupEventsAdmin(address _eventsAdmin) onlyContractOwner returns (uint errorCode) {\r\n        eventsAdmin = _eventsAdmin;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n    * @dev TODO\r\n    */\r\n    function setupAssetOwningListener(address _listener) onlyEventsAdmin public returns (uint) {\r\n        owningListener = _listener;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n    * Provides a cheap way to get number of symbols registered in a platform\r\n    *\r\n    * @return number of symbols\r\n    */\r\n    function symbolsCount() public constant returns (uint) {\r\n        return symbols.length;\r\n    }\r\n\r\n    /**\r\n     * Check asset existance.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset existance.\r\n     */\r\n    function isCreated(bytes32 _symbol) constant returns(bool) {\r\n        return assets[_symbol].owner != 0;\r\n    }\r\n\r\n    /**\r\n     * Returns asset decimals.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset decimals.\r\n     */\r\n    function baseUnit(bytes32 _symbol) constant returns(uint8) {\r\n        return assets[_symbol].baseUnit;\r\n    }\r\n\r\n    /**\r\n     * Returns asset name.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset name.\r\n     */\r\n    function name(bytes32 _symbol) constant returns(string) {\r\n        return assets[_symbol].name;\r\n    }\r\n\r\n    /**\r\n     * Returns asset description.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset description.\r\n     */\r\n    function description(bytes32 _symbol) constant returns(string) {\r\n        return assets[_symbol].description;\r\n    }\r\n\r\n    /**\r\n     * Returns asset reissuability.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset reissuability.\r\n     */\r\n    function isReissuable(bytes32 _symbol) constant returns(bool) {\r\n        return assets[_symbol].isReissuable;\r\n    }\r\n\r\n    /**\r\n     * Returns asset owner address.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset owner address.\r\n     */\r\n    function owner(bytes32 _symbol) constant returns(address) {\r\n        return holders[assets[_symbol].owner].addr;\r\n    }\r\n\r\n    /**\r\n     * Check if specified address has asset owner rights.\r\n     *\r\n     * @param _owner address to check.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return owner rights availability.\r\n     */\r\n    function isOwner(address _owner, bytes32 _symbol) constant returns(bool) {\r\n        return isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner));\r\n    }\r\n\r\n    /**\r\n    * Checks if a specified address has asset owner or co-owner rights.\r\n    *\r\n    * @param _owner address to check.\r\n    * @param _symbol asset symbol.\r\n    *\r\n    * @return owner rights availability.\r\n    */\r\n    function hasAssetRights(address _owner, bytes32 _symbol) constant returns (bool) {\r\n        uint holderId = getHolderId(_owner);\r\n        return isCreated(_symbol) && (assets[_symbol].owner == holderId || assets[_symbol].partowners[holderId]);\r\n    }\r\n\r\n    /**\r\n     * Returns asset total supply.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return asset total supply.\r\n     */\r\n    function totalSupply(bytes32 _symbol) constant returns(uint) {\r\n        return assets[_symbol].totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for a particular holder.\r\n     *\r\n     * @param _holder holder address.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint) {\r\n        return _balanceOf(getHolderId(_holder), _symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for a particular holder id.\r\n     *\r\n     * @param _holderId holder id.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function _balanceOf(uint _holderId, bytes32 _symbol) constant returns(uint) {\r\n        return assets[_symbol].wallets[_holderId].balance;\r\n    }\r\n\r\n    /**\r\n     * Returns current address for a particular holder id.\r\n     *\r\n     * @param _holderId holder id.\r\n     *\r\n     * @return holder address.\r\n     */\r\n    function _address(uint _holderId) constant returns(address) {\r\n        return holders[_holderId].addr;\r\n    }\r\n\r\n    /**\r\n    * Adds a co-owner for an asset with provided symbol.\r\n    * @dev Should be performed by a contract owner or its co-owners\r\n    *\r\n    * @param _symbol asset's symbol\r\n    * @param _partowner a co-owner of an asset\r\n    *\r\n    * @return errorCode result code of an operation\r\n    */\r\n    function addAssetPartOwner(bytes32 _symbol, address _partowner) onlyOneOfOwners(_symbol) public returns (uint) {\r\n        uint holderId = _createHolderId(_partowner);\r\n        assets[_symbol].partowners[holderId] = true;\r\n        _delegateAssetOwnerAdded(_symbol, _partowner);\r\n        ChronoBankPlatformEmitter(eventsHistory).emitOwnershipChange(0x0, _partowner, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n    * Removes a co-owner for an asset with provided symbol.\r\n    * @dev Should be performed by a contract owner or its co-owners\r\n    *\r\n    * @param _symbol asset's symbol\r\n    * @param _partowner a co-owner of an asset\r\n    *\r\n    * @return errorCode result code of an operation\r\n    */\r\n    function removeAssetPartOwner(bytes32 _symbol, address _partowner) onlyOneOfOwners(_symbol) public returns (uint) {\r\n        uint holderId = getHolderId(_partowner);\r\n        delete assets[_symbol].partowners[holderId];\r\n        _delegateAssetOwnerRemoved(_symbol, _partowner);\r\n        ChronoBankPlatformEmitter(eventsHistory).emitOwnershipChange(_partowner, 0x0, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Sets Proxy contract address for a particular asset.\r\n     *\r\n     * Can be set only once for each asset, and only by contract owner.\r\n     *\r\n     * @param _proxyAddress Proxy contract address.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setProxy(address _proxyAddress, bytes32 _symbol) onlyOneOfContractOwners returns(uint) {\r\n        if (proxies[_symbol] != 0x0) {\r\n            return CHRONOBANK_PLATFORM_PROXY_ALREADY_EXISTS;\r\n        }\r\n\r\n        proxies[_symbol] = _proxyAddress;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance between holders wallets.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     */\r\n    function _transferDirect(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\r\n        assets[_symbol].wallets[_fromId].balance = assets[_symbol].wallets[_fromId].balance.sub(_value);\r\n        assets[_symbol].wallets[_toId].balance = assets[_symbol].wallets[_toId].balance.add(_value);\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance between holders wallets.\r\n     *\r\n     * Performs sanity checks and takes care of allowances adjustment.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     * @param _reference transfer comment to be included in a Transfer event.\r\n     * @param _senderId transfer initiator holder id.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transfer(uint _fromId, uint _toId, uint _value, bytes32 _symbol, string _reference, uint _senderId) internal returns(uint) {\r\n        // Should not allow to send to oneself.\r\n        if (_fromId == _toId) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _error(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n        // Should have enough balance.\r\n        if (_balanceOf(_fromId, _symbol) < _value) {\r\n            return _error(CHRONOBANK_PLATFORM_INSUFFICIENT_BALANCE);\r\n        }\r\n        // Should have enough allowance.\r\n        if (_fromId != _senderId && _allowance(_fromId, _senderId, _symbol) < _value) {\r\n            return _error(CHRONOBANK_PLATFORM_NOT_ENOUGH_ALLOWANCE);\r\n        }\r\n\r\n        _transferDirect(_fromId, _toId, _value, _symbol);\r\n        // Adjust allowance.\r\n        if (_fromId != _senderId) {\r\n            assets[_symbol].wallets[_fromId].allowance[_senderId] = assets[_symbol].wallets[_fromId].allowance[_senderId].sub(_value);\r\n        }\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        ChronoBankPlatformEmitter(eventsHistory).emitTransfer(_address(_fromId), _address(_toId), _symbol, _value, _reference);\r\n        _proxyTransferEvent(_fromId, _toId, _value, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance between holders wallets.\r\n     *\r\n     * Can only be called by asset proxy.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     * @param _reference transfer comment to be included in a Transfer event.\r\n     * @param _sender transfer initiator address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) returns(uint) {\r\n        return _transfer(getHolderId(_sender), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\r\n    }\r\n\r\n    /**\r\n     * Ask asset Proxy contract to emit ERC20 compliant Transfer event.\r\n     *\r\n     * @param _fromId holder id to take from.\r\n     * @param _toId holder id to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     */\r\n    function _proxyTransferEvent(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\r\n        if (proxies[_symbol] != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Call Stack Depth Limit reached: n/a after HF 4;\r\n            // Recursive Call: safe, all changes already made.\r\n            ProxyEventsEmitter(proxies[_symbol]).emitTransfer(_address(_fromId), _address(_toId), _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns holder id for the specified address.\r\n     *\r\n     * @param _holder holder address.\r\n     *\r\n     * @return holder id.\r\n     */\r\n    function getHolderId(address _holder) constant returns(uint) {\r\n        return holderIndex[_holder];\r\n    }\r\n\r\n    /**\r\n     * Returns holder id for the specified address, creates it if needed.\r\n     *\r\n     * @param _holder holder address.\r\n     *\r\n     * @return holder id.\r\n     */\r\n    function _createHolderId(address _holder) internal returns(uint) {\r\n        uint holderId = holderIndex[_holder];\r\n        if (holderId == 0) {\r\n            holderId = ++holdersCount;\r\n            holders[holderId].addr = _holder;\r\n            holderIndex[_holder] = holderId;\r\n        }\r\n        return holderId;\r\n    }\r\n\r\n    /**\r\n     * Issues new asset token on the platform.\r\n     *\r\n     * Tokens issued with this call go straight to contract owner.\r\n     * Each symbol can be issued only once, and only by contract owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of tokens to issue immediately.\r\n     * @param _name name of the asset.\r\n     * @param _description description for the asset.\r\n     * @param _baseUnit number of decimals.\r\n     * @param _isReissuable dynamic or fixed supply.\r\n     *\r\n     * @return success.\r\n     */\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns(uint) {\r\n        return issueAsset(_symbol, _value, _name, _description, _baseUnit, _isReissuable, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Issues new asset token on the platform.\r\n     *\r\n     * Tokens issued with this call go straight to contract owner.\r\n     * Each symbol can be issued only once, and only by contract owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of tokens to issue immediately.\r\n     * @param _name name of the asset.\r\n     * @param _description description for the asset.\r\n     * @param _baseUnit number of decimals.\r\n     * @param _isReissuable dynamic or fixed supply.\r\n     * @param _account address where issued balance will be held\r\n     *\r\n     * @return success.\r\n     */\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) onlyOneOfContractOwners public returns(uint) {\r\n        // Should have positive value if supply is going to be fixed.\r\n        if (_value == 0 && !_isReissuable) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE);\r\n        }\r\n        // Should not be issued yet.\r\n        if (isCreated(_symbol)) {\r\n            return _error(CHRONOBANK_PLATFORM_ASSET_ALREADY_ISSUED);\r\n        }\r\n        uint holderId = _createHolderId(_account);\r\n        uint creatorId = _account == msg.sender ? holderId : _createHolderId(msg.sender);\r\n\r\n        symbols.push(_symbol);\r\n        assets[_symbol] = Asset(creatorId, _value, _name, _description, _isReissuable, _baseUnit);\r\n        assets[_symbol].wallets[holderId].balance = _value;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _delegateAssetOwnerAdded(_symbol, _address(creatorId));\r\n        ChronoBankPlatformEmitter(eventsHistory).emitIssue(_symbol, _value, _address(holderId));\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Issues additional asset tokens if the asset have dynamic supply.\r\n     *\r\n     * Tokens issued with this call go straight to asset owner.\r\n     * Can only be called by asset owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of additional tokens to issue.\r\n     *\r\n     * @return success.\r\n     */\r\n    function reissueAsset(bytes32 _symbol, uint _value) onlyOneOfOwners(_symbol) public returns(uint) {\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _error(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n        Asset storage asset = assets[_symbol];\r\n        // Should have dynamic supply.\r\n        if (!asset.isReissuable) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_REISSUE_FIXED_ASSET);\r\n        }\r\n        // Resulting total supply should not overflow.\r\n        if (asset.totalSupply + _value < asset.totalSupply) {\r\n            return _error(CHRONOBANK_PLATFORM_SUPPLY_OVERFLOW);\r\n        }\r\n        uint holderId = getHolderId(msg.sender);\r\n        asset.wallets[holderId].balance = asset.wallets[holderId].balance.add(_value);\r\n        asset.totalSupply = asset.totalSupply.add(_value);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        ChronoBankPlatformEmitter(eventsHistory).emitIssue(_symbol, _value, _address(holderId));\r\n        _proxyTransferEvent(0, holderId, _value, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Destroys specified amount of senders asset tokens.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _value amount of tokens to destroy.\r\n     *\r\n     * @return success.\r\n     */\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint) {\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _error(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n        Asset storage asset = assets[_symbol];\r\n        uint holderId = getHolderId(msg.sender);\r\n        // Should have enough tokens.\r\n        if (asset.wallets[holderId].balance < _value) {\r\n            return _error(CHRONOBANK_PLATFORM_NOT_ENOUGH_TOKENS);\r\n        }\r\n        asset.wallets[holderId].balance = asset.wallets[holderId].balance.sub(_value);\r\n        asset.totalSupply = asset.totalSupply.sub(_value);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        ChronoBankPlatformEmitter(eventsHistory).emitRevoke(_symbol, _value, _address(holderId));\r\n        _proxyTransferEvent(holderId, 0, _value, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Passes asset ownership to specified address.\r\n     *\r\n     * Only ownership is changed, balances are not touched.\r\n     * Can only be called by asset owner.\r\n     *\r\n     * @param _symbol asset symbol.\r\n     * @param _newOwner address to become a new owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) onlyOwner(_symbol) public returns(uint) {\r\n        if (_newOwner == 0x0) {\r\n            return _error(CHRONOBANK_PLATFORM_INVALID_NEW_OWNER);\r\n        }\r\n\r\n        Asset storage asset = assets[_symbol];\r\n        uint newOwnerId = _createHolderId(_newOwner);\r\n        // Should pass ownership to another holder.\r\n        if (asset.owner == newOwnerId) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n        address oldOwner = _address(asset.owner);\r\n        asset.owner = newOwnerId;\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _delegateAssetOwnerRemoved(_symbol, oldOwner);\r\n        _delegateAssetOwnerAdded(_symbol, _newOwner);\r\n        ChronoBankPlatformEmitter(eventsHistory).emitOwnershipChange(oldOwner, _newOwner, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Check if specified holder trusts an address with recovery procedure.\r\n     *\r\n     * @param _from truster.\r\n     * @param _to trustee.\r\n     *\r\n     * @return trust existance.\r\n     */\r\n    function isTrusted(address _from, address _to) constant returns(bool) {\r\n        return holders[getHolderId(_from)].trust[_to];\r\n    }\r\n\r\n    /**\r\n     * Trust an address to perform recovery procedure for the caller.\r\n     *\r\n     * @param _to trustee.\r\n     *\r\n     * @return success.\r\n     */\r\n    function trust(address _to) returns(uint) {\r\n        uint fromId = _createHolderId(msg.sender);\r\n        // Should trust to another address.\r\n        if (fromId == getHolderId(_to)) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n        // Should trust to yet untrusted.\r\n        if (isTrusted(msg.sender, _to)) {\r\n            return _error(CHRONOBANK_PLATFORM_ALREADY_TRUSTED);\r\n        }\r\n\r\n        holders[fromId].trust[_to] = true;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Revoke trust to perform recovery procedure from an address.\r\n     *\r\n     * @param _to trustee.\r\n     *\r\n     * @return success.\r\n     */\r\n    function distrust(address _to) checkTrust(msg.sender, _to) public returns (uint) {\r\n        holders[getHolderId(msg.sender)].trust[_to] = false;\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Perform recovery procedure.\r\n     *\r\n     * This function logic is actually more of an addAccess(uint _holderId, address _to).\r\n     * It grants another address access to recovery subject wallets.\r\n     * Can only be called by trustee of recovery subject.\r\n     *\r\n     * @param _from holder address to recover from.\r\n     * @param _to address to grant access to.\r\n     *\r\n     * @return success.\r\n     */\r\n    function recover(address _from, address _to) checkTrust(_from, msg.sender) public returns (uint errorCode) {\r\n        // Should recover to previously unused address.\r\n        if (getHolderId(_to) != 0) {\r\n            return _error(CHRONOBANK_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS);\r\n        }\r\n        // We take current holder address because it might not equal _from.\r\n        // It is possible to recover from any old holder address, but event should have the current one.\r\n        address from = holders[getHolderId(_from)].addr;\r\n        holders[getHolderId(_from)].addr = _to;\r\n        holderIndex[_to] = getHolderId(_from);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        ChronoBankPlatformEmitter(eventsHistory).emitRecovery(from, _to, msg.sender);\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     *\r\n     * Note: to revoke allowance, one needs to set allowance to 0.\r\n     *\r\n     * @param _spenderId holder id to set allowance for.\r\n     * @param _value amount to allow.\r\n     * @param _symbol asset symbol.\r\n     * @param _senderId approve initiator holder id.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _approve(uint _spenderId, uint _value, bytes32 _symbol, uint _senderId) internal returns(uint) {\r\n        // Asset should exist.\r\n        if (!isCreated(_symbol)) {\r\n            return _error(CHRONOBANK_PLATFORM_ASSET_IS_NOT_ISSUED);\r\n        }\r\n        // Should allow to another holder.\r\n        if (_senderId == _spenderId) {\r\n            return _error(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n\r\n        // Double Spend Attack checkpoint\r\n        if (assets[_symbol].wallets[_senderId].allowance[_spenderId] != 0 && _value != 0) {\r\n            return _error(CHRONOBANK_PLATFORM_INVALID_INVOCATION);\r\n        }\r\n\r\n        assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value;\r\n\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        ChronoBankPlatformEmitter(eventsHistory).emitApprove(_address(_senderId), _address(_spenderId), _symbol, _value);\r\n        if (proxies[_symbol] != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Call Stack Depth Limit reached: n/a after HF 4;\r\n            // Recursive Call: safe, all changes already made.\r\n            ProxyEventsEmitter(proxies[_symbol]).emitApprove(_address(_senderId), _address(_spenderId), _value);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     *\r\n     * Can only be called by asset proxy.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     * @param _symbol asset symbol.\r\n     * @param _sender approve initiator address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) onlyProxy(_symbol) public returns (uint) {\r\n        return _approve(_createHolderId(_spender), _value, _symbol, _createHolderId(_sender));\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _from holder that allowed spending.\r\n     * @param _spender holder that is allowed to spend.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint) {\r\n        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _fromId holder id that allowed spending.\r\n     * @param _toId holder id that is allowed to spend.\r\n     * @param _symbol asset symbol.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) constant internal returns(uint) {\r\n        return assets[_symbol].wallets[_fromId].allowance[_toId];\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders wallets.\r\n     *\r\n     * Can only be called by asset proxy.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _symbol asset symbol.\r\n     * @param _reference transfer comment to be included in a Transfer event.\r\n     * @param _sender allowance transfer initiator address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) public returns (uint) {\r\n        return _transfer(getHolderId(_from), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\r\n    }\r\n\r\n    /**\r\n    * @dev TODO\r\n    */\r\n    function _delegateAssetOwnerAdded(bytes32 _symbol, address _owner) private {\r\n        if (owningListener != 0x0) {\r\n            AssetOwningListener(owningListener).assetOwnerAdded(_symbol, this, _owner);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev TODO\r\n    */\r\n    function _delegateAssetOwnerRemoved(bytes32 _symbol, address _owner) private {\r\n        if (owningListener != 0x0) {\r\n            AssetOwningListener(owningListener).assetOwnerRemoved(_symbol, this, _owner);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eventsHistory\",\"type\":\"address\"}],\"name\":\"setupEventsHistory\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"addAssetPartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"}],\"name\":\"issueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getHolderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"removePartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"trust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eventsAdmin\",\"type\":\"address\"}],\"name\":\"setupEventsAdmin\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyAddress\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"setProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"}],\"name\":\"_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"setupAssetOwningListener\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"owner\",\"type\":\"uint256\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"isReissuable\",\"type\":\"bool\"},{\"name\":\"baseUnit\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"issueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"addPartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"emitOwnershipChange\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitIssue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isReissuable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitRevoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"revokeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"partowners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"hasAssetRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"baseUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_errorCode\",\"type\":\"uint256\"}],\"name\":\"emitError\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reissueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitRecovery\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"removeAssetPartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbolsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"distrust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"OwnershipChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Recovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"ChronoBankPlatform","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://60eb133eeb70d86b99eafaf6da60030ae1c8c6081a8de47bd0d4d0612ddcb22b"}]}