{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n                       mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n    event MintStarted();\r\n\r\n    bool public mintingActive = true;\r\n\r\n    uint256 public maxTokenCount;\r\n\r\n    modifier canMint() {\r\n        require(mintingActive);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        require(totalSupply <= maxTokenCount);\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function stopMinting() onlyOwner returns (bool) {\r\n        mintingActive = false;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to start minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function startMinting() onlyOwner returns (bool) {\r\n        mintingActive = true;\r\n        MintStarted();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * HDL (Handelion) Token\r\n *\r\n */\r\ncontract HDLToken is MintableToken\r\n{\r\n\r\n    string public constant name = \"Handelion  token\";\r\n\r\n    string public constant symbol = \"HDLT\";\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    function HDLToken()\r\n    {\r\n     \tmaxTokenCount = 29750000 * 1 ether;\r\n    }\r\n}\r\n\r\n\r\ncontract HDLContract is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n\t// Contract owner addredd\r\n\taddress _ownerAddress;\r\n\r\n    // Contract vault address - all collected funds are moved to this address after successful sale\r\n    address _vaultAddress;\r\n\r\n    // Contains list of all investor addresses\r\n    address[] public _investorAddresses;\r\n\r\n    // contains list of all investors with transfered amount\r\n    mapping (address => uint256) _investors;\r\n\r\n    // Reference to HDL token. The token is created with this contract.\r\n    HDLToken public token;\r\n\r\n    // Sale period start date as unix timestamp\r\n    uint _start;\r\n\r\n    // Sale period in days\r\n    uint _period;\r\n\r\n    // Sale goal in tokens - how many tokens we are planning to sel under this contract\r\n    uint public _goal;\r\n\r\n    // Token/ether rate\r\n    uint _rate;\r\n\r\n    // Total amount of issued tokens under this contract\r\n    uint256 public issuedTokens;\r\n\r\n    // total amount of all collected funds under this contract\r\n    uint256 public collectedFunds;\r\n\r\n    // Identifies whether current contract is finished. If contract is finished no more funds can be sent to this contract.\r\n    // When contract has been marked as finished it cannot be restarted.\r\n    bool public isFinished = false;\r\n\r\n    // Identifies whether contract is in refunding mode - Refunding is opened and investors can request their funds back.\r\n    bool public isRefunding = false;\r\n\r\n    // Raises when particular investor is refunded\r\n    event InvestorRefunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    // Raises when particular investor bought some tokens from contract\r\n    event FundingAccepted(address indexed investor, uint256 weiAmount, uint tokenAmount);\r\n\r\n    // Raises when all investors were refunded\r\n    event AllInvestorsRefunded(uint refundedInvestorCount);\r\n\r\n    // Raises when all funds have been withdrawn\r\n    event WithdrawAllFunds(uint256 withdrawnAmount);\r\n\r\n    // Raises when crowdsale has been finished\r\n    event CrowdsaleFinished();\r\n\r\n    // Raises when crowdsale goal has been reached\r\n    event GoalReached();\r\n\r\n    function HDLContract(address aVaultAddress, uint aStart, uint aPeriod, uint aGoal, uint aRate) {\r\n        _ownerAddress = msg.sender;\r\n        _vaultAddress =  aVaultAddress;\r\n        token = new HDLToken();\r\n        _rate =  aRate;\r\n        _start = aStart;\r\n        _period = aPeriod;\r\n        _goal =  aGoal * 1 ether;\r\n\r\n        issuedTokens = 0;\r\n        collectedFunds = 0;\r\n    }\r\n\r\n    /**\r\n\t * Transfers token ownership from Pre-sale to Sale\r\n     */\r\n    function TransferTokenOwnership(address newTokenOwner) public onlyOwner\r\n\t{\r\n\t\ttoken.transferOwnership(newTokenOwner);\r\n\t}\r\n\r\n    /**\r\n     * Finishes PRE-ICO crowdsale and closes current contract.\r\n     * Checks is goal is reached. If it is reached then withdraws all funds to vault address\r\n     * Otherwise tries to refund investors or Opens contract for refunding.\r\n     *\r\n     */\r\n    function finish() public onlyOwner {\r\n        require(!isFinished);\r\n\r\n        token.stopMinting();\r\n        isFinished = true;\r\n\r\n        if (issuedTokens < _goal)\r\n        {\r\n            isRefunding = true;\r\n        } else\r\n        {\r\n            withdraw();\r\n        }\r\n\r\n        CrowdsaleFinished();\r\n    }\r\n\r\n    /**\r\n     * Refunds investor. Should be called by investors.\r\n     * If contract state is in Refunding state then returns to investor sent amount.\r\n     *\r\n     */\r\n    function requestRefunding() public\r\n    {\r\n        require(isRefunding);\r\n\r\n        address investorAddress = msg.sender;\r\n        refundInvestor(investorAddress);\r\n    }\r\n\r\n    /**\r\n     * Accepts ethers from investor and sends back HDL tokens.\r\n     */\r\n    function buyTokens() payable\r\n    {\r\n        require(!isFinished);\r\n        require(isContractActive());\r\n        require(!isGoalReached());\r\n\r\n        uint tokens = _rate.mul(msg.value);\r\n\r\n        token.mint(this, tokens);\r\n        token.transfer(msg.sender, tokens);\r\n\r\n        issuedTokens = issuedTokens.add(tokens);\r\n        _investors[msg.sender] = _investors[msg.sender].add(msg.value);\r\n        _investorAddresses.push(msg.sender);\r\n\r\n        collectedFunds = collectedFunds.add(msg.value);\r\n\r\n        FundingAccepted(msg.sender, msg.value, tokens);\r\n\r\n        if (issuedTokens >= _goal)\r\n        {\r\n            GoalReached();\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function closeContract() onlyOwner {\r\n        token.stopMinting();\r\n        isFinished = true;\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        if (this.balance > 0) {\r\n            _vaultAddress.transfer(this.balance);\r\n        }\r\n\r\n        WithdrawAllFunds(this.balance);\r\n    }\r\n\r\n    function refundInvestor(address aInvestorAddress) onlyOwner returns(bool)\r\n    {\r\n        if (aInvestorAddress == 0x0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        uint256 depositedValue = _investors[aInvestorAddress];\r\n\r\n        if (depositedValue <= 0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        _investors[aInvestorAddress] = 0;\r\n\r\n        aInvestorAddress.transfer(depositedValue);\r\n        InvestorRefunded(aInvestorAddress, depositedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isContractActive() returns (bool)\r\n    {\r\n        return (now > _start) && (now < (_start + _period * 1 days));\r\n    }\r\n\r\n    function isGoalReached() returns (bool)\r\n    {\r\n        return issuedTokens >= _goal;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_investorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestRefunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenOwner\",\"type\":\"address\"}],\"name\":\"TransferTokenOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"aInvestorAddress\",\"type\":\"address\"}],\"name\":\"refundInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"aVaultAddress\",\"type\":\"address\"},{\"name\":\"aStart\",\"type\":\"uint256\"},{\"name\":\"aPeriod\",\"type\":\"uint256\"},{\"name\":\"aGoal\",\"type\":\"uint256\"},{\"name\":\"aRate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"InvestorRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"FundingAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refundedInvestorCount\",\"type\":\"uint256\"}],\"name\":\"AllInvestorsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GoalReached\",\"type\":\"event\"}]","ContractName":"HDLContract","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009afD087455a56372561F94f6435cC815E4400e380000000000000000000000000000000000000000000000000000000059DE5C20000000000000000000000000000000000000000000000000000000000000000D0000000000000000000000000000000000000000000000000000000000225510000000000000000000000000000000000000000000000000000000000000012C","Library":"","SwarmSource":"bzzr://8c584ef41c2a26432d3c41deda44f09be52eb7bab744648ab5128ce136dc74a6"}]}