{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  function setSaleAgent(address newSaleAgnet) {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() returns (bool) {\r\n    require(msg.sender == saleAgent || msg.sender == owner && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n  event Pause();\r\n  \r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n  \r\n}\r\n\r\ncontract TlindToken is MintableToken {\t\r\n    \r\n  string public constant name = \"Tlind\";\r\n   \r\n  string public constant symbol = \"TDT\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n    \r\n}\r\n\r\n\r\ncontract StagedCrowdsale is Pausable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Milestone {\r\n    uint period;\r\n    uint bonus;\r\n  }\r\n\r\n  uint public start;\r\n\r\n  uint public totalPeriod;\r\n\r\n  uint public invested;\r\n\r\n  uint public hardCap;\r\n \r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() constant returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function setStart(uint newStart) onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) onlyOwner {\r\n    hardCap = newHardcap;\r\n  }\r\n\r\n  function addMilestone(uint period, uint bonus) onlyOwner {\r\n    require(period > 0);\r\n    milestones.push(Milestone(period, bonus));\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function removeMilestones(uint8 number) onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    delete milestones[number];\r\n\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint period, uint bonus) onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n\r\n    totalPeriod = totalPeriod.sub(milestone.period);    \r\n\r\n    milestone.period = period;\r\n    milestone.bonus = bonus;\r\n\r\n    totalPeriod = totalPeriod.add(period);    \r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n\r\n    milestones.length++;\r\n\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n\r\n    milestones[numberAfter + 1] = Milestone(period, bonus);\r\n  }\r\n\r\n  function clearMilestones() onlyOwner {\r\n    require(milestones.length > 0);\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length -= milestones.length;\r\n    totalPeriod = 0;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(milestones.length > 0 && now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n  \r\n  modifier isUnderHardCap() {\r\n    require(invested <= hardCap);\r\n    _;\r\n  }\r\n  \r\n  function lastSaleDate() constant returns(uint) {\r\n    require(milestones.length > 0);\r\n    return start + totalPeriod * 1 days;\r\n  }\r\n\r\n  function currentMilestone() saleIsOn constant returns(uint) {\r\n    uint previousDate = start;\r\n    for(uint i=0; i < milestones.length; i++) {\r\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\r\n        return i;\r\n      }\r\n      previousDate = previousDate.add(milestones[i].period * 1 days);\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract CommonSale is StagedCrowdsale {\r\n\r\n  address public multisigWallet;\r\n  \r\n  address public foundersTokensWallet;\r\n  \r\n  address public bountyTokensWallet;\r\n\r\n  uint public foundersTokensPercent;\r\n  \r\n  uint public bountyTokensPercent;\r\n \r\n  uint public price;\r\n\r\n  uint public percentRate = 100;\r\n\r\n  uint public softcap;\r\n\r\n  bool public refundOn = false;\r\n\r\n  bool public isSoftcapOn = false;\r\n\r\n  mapping (address => uint) balances;\r\n\r\n  CommonSale public nextSale;\r\n  \r\n  MintableToken public token;\r\n\r\n  function setSoftcap(uint newSoftcap) onlyOwner {\r\n    isSoftcapOn = true;\r\n    softcap = newSoftcap;\r\n  }\r\n\r\n  function setToken(address newToken) onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n\r\n  function setNextSale(address newNextSale) onlyOwner {\r\n    nextSale = CommonSale(newNextSale);\r\n  }\r\n\r\n  function setPrice(uint newPrice) onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setPercentRate(uint newPercentRate) onlyOwner {\r\n    percentRate = newPercentRate;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) onlyOwner {\r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n  \r\n  function setBountyTokensPercent(uint newBountyTokensPercent) onlyOwner {\r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n  \r\n  function setMultisigWallet(address newMultisigWallet) onlyOwner {\r\n    multisigWallet = newMultisigWallet;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function createTokens() whenNotPaused isUnderHardCap saleIsOn payable {\r\n    require(msg.value > 100000000000000000);\r\n    uint milestoneIndex = currentMilestone();\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    if(!isSoftcapOn) {\r\n      multisigWallet.transfer(msg.value);\r\n    }\r\n    invested = invested.add(msg.value);\r\n    uint tokens = msg.value.mul(1 ether).div(price);\r\n    uint bonusTokens = tokens.mul(milestone.bonus).div(percentRate);\r\n    uint tokensWithBonus = tokens.add(bonusTokens);\r\n    token.mint(this, tokensWithBonus);\r\n    token.transfer(msg.sender, tokensWithBonus);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n  }\r\n\r\n  function refund() whenNotPaused {\r\n    require(now > start && refundOn && balances[msg.sender] > 0);\r\n    msg.sender.transfer(balances[msg.sender]);\r\n  } \r\n\r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    if(isSoftcapOn && invested < softcap) {\r\n      refundOn = true;\r\n      token.finishMinting();\r\n    } else {\r\n      if(isSoftcapOn) {\r\n        multisigWallet.transfer(invested);\r\n      }\r\n      uint issuedTokenSupply = token.totalSupply();\r\n      uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\r\n      uint summaryFoundersTokens = issuedTokenSupply.mul(summaryTokensPercent).div(percentRate - summaryTokensPercent);\r\n      uint totalSupply = summaryFoundersTokens + issuedTokenSupply;\r\n      uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\r\n      uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\r\n      token.mint(this, foundersTokens);\r\n      token.transfer(foundersTokensWallet, foundersTokens);\r\n      token.mint(this, bountyTokens);\r\n      token.transfer(bountyTokensWallet, bountyTokens);\r\n      if(nextSale == address(0)) {\r\n        token.finishMinting();\r\n      } else {\r\n        token.setSaleAgent(nextSale);\r\n      }\r\n    }\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(multisigWallet, token.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n\r\n// FIXME: needs to fix addresses and hardcap, softcap\r\n// Перевести дату начала в GMT, а затем в UNIX формат с помощью сервсиа http://www.onlineconversion.com/unix_time.htm\r\ncontract Configurator is Ownable {\r\n\r\n  MintableToken public token; \r\n\r\n  CommonSale public presale;\r\n\r\n  CommonSale public mainsale;\r\n\r\n  function deploy() {\r\n    address presaleMultisigWallet = 0x675cf930aefA144dA7e10ddBACC02f902A233eFC;\r\n    address presaleBountyTokensWallet = 0x06B8fF8476425E45A3D2878e0a27BB79efd4Dde1;\r\n    address presaleFoundersWallet = 0x27F1Ac3E29CBec9D225d98fF95B6933bD30E3F71;\r\n    uint presaleSoftcap = 0x0;\r\n    uint presaleHardcap = 0x0;\r\n\r\n    address mainsaleMultisigWallet = 0xFb72502E9c56497BAC3B1c21DE434b371891CC05;\r\n    address mainsaleBountyTokensWallet = 0xd08112054C8e01E33fAEE176531dEB087809CbB2;\r\n    address mainsaleFoundersWallet = 0xDeFAE9a126bA5aA2537AaC481D9335827159D33B;\r\n    uint mainsaleHardcap = 0x0;\r\n\r\n    token = new TlindToken();\r\n\r\n    presale = new CommonSale();\r\n\r\n    presale.setToken(token);\r\n    presale.setSoftcap(presaleSoftcap);\r\n    presale.setHardcap(presaleHardcap);\r\n    presale.setMultisigWallet(presaleMultisigWallet);\r\n    presale.setFoundersTokensWallet(presaleFoundersWallet);\r\n    presale.setBountyTokensWallet(presaleBountyTokensWallet);\r\n    presale.setStart(1506344400);\r\n    presale.setFoundersTokensPercent(15);\r\n    presale.setBountyTokensPercent(5);\r\n    presale.setPrice(10000000000000000);\r\n    presale.addMilestone(8,300);\r\n    presale.addMilestone(8,200);\r\n    token.setSaleAgent(presale);\t\r\n\r\n    mainsale = new CommonSale();\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.setHardcap(mainsaleHardcap);\r\n    mainsale.setMultisigWallet(mainsaleMultisigWallet);\r\n    mainsale.setFoundersTokensWallet(mainsaleFoundersWallet);\r\n    mainsale.setBountyTokensWallet(mainsaleBountyTokensWallet);\r\n    mainsale.setStart(1510318800);\r\n    mainsale.setFoundersTokensPercent(15);\r\n    mainsale.setBountyTokensPercent(5);\r\n    mainsale.setPrice(10000000000000000);\r\n    mainsale.addMilestone(1,50);\r\n    mainsale.addMilestone(6,30);\r\n    mainsale.addMilestone(14,15);\r\n    mainsale.addMilestone(14,10);\r\n    mainsale.addMilestone(14,5);\r\n    mainsale.addMilestone(7,0);\r\n    \r\n    presale.setNextSale(mainsale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n\r\n}\r\n\r\ncontract TestConfigurator is Ownable {\r\n\r\n  MintableToken public token; \r\n\r\n  CommonSale public presale;\r\n\r\n  CommonSale public mainsale;\r\n\r\n  function deploy() {\r\n    address presaleMultisigWallet = 0x675cf930aefA144dA7e10ddBACC02f902A233eFC;\r\n    address presaleBountyTokensWallet = 0x06B8fF8476425E45A3D2878e0a27BB79efd4Dde1;\r\n    address presaleFoundersWallet = 0x27F1Ac3E29CBec9D225d98fF95B6933bD30E3F71;\r\n    uint presaleSoftcap = 1000000000000000000; // 1eth\r\n    uint presaleHardcap = 2000000000000000000; // 2eth\r\n\r\n    address mainsaleMultisigWallet = 0xFb72502E9c56497BAC3B1c21DE434b371891CC05;\r\n    address mainsaleBountyTokensWallet = 0xd08112054C8e01E33fAEE176531dEB087809CbB2;\r\n    address mainsaleFoundersWallet = 0xDeFAE9a126bA5aA2537AaC481D9335827159D33B;\r\n    uint mainsaleHardcap = 2500000000000000000; // 2.5eth\r\n\r\n    token = new TlindToken();\r\n\r\n    presale = new CommonSale();\r\n\r\n    presale.setToken(token);\r\n    presale.setSoftcap(presaleSoftcap);\r\n    presale.setHardcap(presaleHardcap);\r\n    presale.setMultisigWallet(presaleMultisigWallet);\r\n    presale.setFoundersTokensWallet(presaleFoundersWallet);\r\n    presale.setBountyTokensWallet(presaleBountyTokensWallet);\r\n    presale.setStart(1505984400);  //21.09.2017 09.00\r\n    presale.setFoundersTokensPercent(15);\r\n    presale.setBountyTokensPercent(5);\r\n    presale.setPrice(10000000000000000);\r\n    presale.addMilestone(1,200); //+200%\r\n    presale.addMilestone(1,30); //+30%\r\n    token.setSaleAgent(presale);\t\r\n\r\n    mainsale = new CommonSale();\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.setHardcap(mainsaleHardcap);\r\n    mainsale.setMultisigWallet(mainsaleMultisigWallet);\r\n    mainsale.setFoundersTokensWallet(mainsaleFoundersWallet);\r\n    mainsale.setBountyTokensWallet(mainsaleBountyTokensWallet);\r\n    mainsale.setStart(1506070800);  //22.09.2017 09.00\r\n    mainsale.setFoundersTokensPercent(15);\r\n    mainsale.setBountyTokensPercent(5);\r\n    mainsale.setPrice(10000000000000000);\r\n    mainsale.addMilestone(1,5); //+5%\r\n    mainsale.addMilestone(1,0);\r\n    \r\n    presale.setNextSale(mainsale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensWallet\",\"type\":\"address\"}],\"name\":\"setFoundersTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeMilestones\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercentRate\",\"type\":\"uint256\"}],\"name\":\"setPercentRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearMilestones\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNextSale\",\"type\":\"address\"}],\"name\":\"setNextSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"addMilestone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setBountyTokensPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMultisigWallet\",\"type\":\"address\"}],\"name\":\"setMultisigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"insertMilestone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milestonesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokensPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMilestone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"changeMilestone\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftcapOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensWallet\",\"type\":\"address\"}],\"name\":\"setBountyTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"CommonSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5336f2bb069631cf518e90e7de1396ea6a329a221e4efc6cb6c343fb366d8551"}]}