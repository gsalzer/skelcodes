{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n}\r\n\r\n\r\ncontract AngelCardData is IAngelCardData, SafeMath {\r\n    /*** EVENTS ***/\r\n    event CreatedAngel(uint64 angelId);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n    struct AngelCardSeries {\r\n        uint8 angelCardSeriesId;\r\n        uint basePrice; \r\n        uint64 currentAngelTotal;\r\n        uint64 maxAngelTotal;\r\n        AngelAura baseAura;\r\n        uint baseBattlePower;\r\n        uint64 lastSellTime;\r\n        uint64 liveTime;\r\n    }\r\n\r\n    struct Angel {\r\n        uint64 angelId;\r\n        uint8 angelCardSeriesId;\r\n        address owner;\r\n        uint16 battlePower;\r\n        AngelAura aura;\r\n        uint16 experience;\r\n        uint price;\r\n        uint64 createdTime;\r\n        uint64 lastBattleTime;\r\n        uint64 lastVsBattleTime;\r\n        uint16 lastBattleResult;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n\r\n    mapping(uint8 => AngelCardSeries) public angelCardSeriesCollection;\r\n    mapping(uint64 => Angel) public angelCollection;\r\n    mapping(address => uint64[]) public ownerAngelCollection;\r\n    uint256 public prevSeriesSelloutHours;\r\n    \r\n    /*** FUNCTIONS ***/\r\n    //*** Write Access ***//\r\n    function AngelCardData() public {\r\n        \r\n    }\r\n  \r\n\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8) {\r\n         if ((now > 1516692600) || (totalAngelCardSeries >= 24)) {revert();}\r\n        //This confirms that no one, even the develoopers, can create any angel series after JAN/23/2018 @ 7:30 am (UTC) or more than the original 24 series.\r\n\r\n        AngelCardSeries storage angelCardSeries = angelCardSeriesCollection[_angelCardSeriesId];\r\n        angelCardSeries.angelCardSeriesId = _angelCardSeriesId;\r\n        angelCardSeries.basePrice = _basePrice; \r\n        angelCardSeries.maxAngelTotal = _maxTotal;\r\n        angelCardSeries.baseAura = AngelAura(_baseAura);\r\n        angelCardSeries.baseBattlePower = _baseBattlePower;\r\n        angelCardSeries.lastSellTime = 0;\r\n        angelCardSeries.liveTime = _liveTime;\r\n\r\n        totalAngelCardSeries += 1;\r\n        return totalAngelCardSeries;\r\n    }\r\n\r\n    // This is called every 5 days to set the basePrice and maxAngelTotal for the angel series based on buy pressure of the last card\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external {\r\n        // Require that the series is above the Arel card\r\n        if (_angelCardSeriesId < 4) \r\n            revert();\r\n        //don't need to use safesubtract here because above we already reverted id less than 4. \r\n        AngelCardSeries memory seriesMinusOne = angelCardSeriesCollection[_angelCardSeriesId - 1];\r\n        AngelCardSeries storage seriesStorage = angelCardSeriesCollection[_angelCardSeriesId];\r\n        //In case no conditions are true, then no change. \r\n        seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal;\r\n        if (seriesMinusOne.currentAngelTotal >= seriesMinusOne.maxAngelTotal) {\r\n            prevSeriesSelloutHours = (safeSubtract(seriesMinusOne.lastSellTime,seriesMinusOne.liveTime))/3600;\r\n        } else {\r\n            prevSeriesSelloutHours = 120;\r\n        }\r\n\r\n        // Set the new basePrice for the angelCardSeries\r\n        //Lower by 0.65 eth if didn't sell out, until min of 0.005 eth\r\n        if (prevSeriesSelloutHours > 100) { \r\n            if (seriesMinusOne.basePrice > 70000000000000000) \r\n            {seriesStorage.basePrice = seriesMinusOne.basePrice - 65000000000000000;}\r\n            else {seriesStorage.basePrice = 5000000000000000;}\r\n        }\r\n        //Increase by 0.005 ETH for 100-sell out hours. Price increases faster based on demand. \r\n        else {seriesStorage.basePrice = seriesMinusOne.basePrice+((100-prevSeriesSelloutHours)*5000000000000000);}\r\n        \r\n        // Adjust the maxTotal for the angelCardSeries\r\n        //Don't need safeMath here because we are already checking values. \r\n        if (prevSeriesSelloutHours < 100 && seriesMinusOne.maxAngelTotal <= 435) {\r\n            seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal+15;\r\n        } else if (prevSeriesSelloutHours > 100 && seriesMinusOne.maxAngelTotal >= 60) {\r\n            seriesStorage.maxAngelTotal = seriesMinusOne.maxAngelTotal-15;\r\n        }\r\n        // Need to set this incase no cards  sell, so that other calculations don't break\r\n        seriesStorage.lastSellTime = uint64(now);\r\n    }\r\n\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64) {\r\n        AngelCardSeries storage series = angelCardSeriesCollection[_angelCardSeriesId];\r\n    \r\n        if (series.currentAngelTotal >= series.maxAngelTotal) {\r\n            revert();\r\n        }\r\n       else { \r\n        totalAngels += 1;\r\n        Angel storage angel = angelCollection[totalAngels];\r\n        series.currentAngelTotal += 1;\r\n        series.lastSellTime = uint64(now);\r\n        angel.angelId = totalAngels;\r\n        angel.angelCardSeriesId = _angelCardSeriesId;\r\n        angel.owner = _owner;\r\n        angel.battlePower = _battlePower; \r\n        angel.aura = series.baseAura;\r\n        angel.experience = 0;\r\n        angel.price = _price;\r\n        angel.createdTime = uint64(now);\r\n        angel.lastBattleTime = 0;\r\n        angel.lastVsBattleTime = 0;\r\n        angel.lastBattleResult = 0;\r\n        addAngelIdMapping(_owner, angel.angelId);\r\n        return angel.angelId;\r\n       }\r\n    }\r\n     \r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external {\r\n        Angel storage angel = angelCollection[_angelId];\r\n        if (angel.angelId == _angelId) {\r\n            angel.experience = uint16(safeAdd(angel.experience, _value));\r\n        }\r\n    }\r\n\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external {\r\n        Angel storage angel = angelCollection[_angelId];\r\n        if (angel.angelId == _angelId) {\r\n            angel.lastBattleTime = uint64(now);\r\n        }\r\n    }\r\n\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external {\r\n        Angel storage angel = angelCollection[_angelId];\r\n        if (angel.angelId == _angelId) {\r\n            angel.lastVsBattleTime = uint64(now);\r\n        }\r\n    }\r\n\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external {\r\n        Angel storage angel = angelCollection[_angelId];\r\n        if (angel.angelId == _angelId) {\r\n            angel.lastBattleResult = _value;\r\n        }\r\n    }\r\n    \r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private {\r\n            uint64[] storage owners = ownerAngelCollection[_owner];\r\n            owners.push(_angelId);\r\n            Angel storage angel = angelCollection[_angelId];\r\n            angel.owner = _owner;\r\n    }\r\n//Anyone can transfer their own angel by sending a transaction with the address to transfer to from the address that owns it. \r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public  {\r\n        \r\n       if ((_angelId > totalAngels) || (_angelId == 0)) {revert();}\r\n       Angel storage angel = angelCollection[_angelId];\r\n        if (msg.sender == _to) {revert();}\r\n        if (angel.owner != msg.sender) {\r\n            revert();\r\n        }\r\n        else {\r\n        angel.owner = _to;\r\n        addAngelIdMapping(_to, _angelId);\r\n        }\r\n    }\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode) {\r\n        Angel storage angel = angelCollection[_angelId];\r\n        if (_from == _to) {revert();}\r\n        if (angel.owner != _from) {\r\n            return ResultCode.ERROR_NOT_OWNER;\r\n        }\r\n        angel.owner = _to;\r\n        addAngelIdMapping(_to, _angelId);\r\n        return ResultCode.SUCCESS;\r\n    }\r\n\r\n  \r\n   \r\n    //*** Read Access ***//\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime) {\r\n        AngelCardSeries memory series = angelCardSeriesCollection[_angelCardSeriesId];\r\n        angelCardSeriesId = series.angelCardSeriesId;\r\n        currentAngelTotal = series.currentAngelTotal;\r\n        basePrice = series.basePrice;\r\n        maxAngelTotal = series.maxAngelTotal;\r\n        baseAura = uint8(series.baseAura);\r\n        baseBattlePower = series.baseBattlePower;\r\n        lastSellTime = series.lastSellTime;\r\n        liveTime = series.liveTime;\r\n    }\r\n\r\n\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner) {\r\n        Angel memory angel = angelCollection[_angelId];\r\n        angelId = angel.angelId;\r\n        angelCardSeriesId = angel.angelCardSeriesId;\r\n        battlePower = angel.battlePower;\r\n        aura = uint8(angel.aura);\r\n        experience = angel.experience;\r\n        price = angel.price;\r\n        createdTime = angel.createdTime;\r\n        lastBattleTime = angel.lastBattleTime;\r\n        lastVsBattleTime = angel.lastVsBattleTime;\r\n        lastBattleResult = angel.lastBattleResult;\r\n        owner = angel.owner;\r\n    }\r\n\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint) {\r\n        return ownerAngelCollection[_owner].length;\r\n    }\r\n\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64) {\r\n        if (_index >= ownerAngelCollection[_owner].length) {\r\n            return 0; }\r\n        return ownerAngelCollection[_owner][_index];\r\n    }\r\n\r\n    function getTotalAngelCardSeries() constant public returns (uint8) {\r\n        return totalAngelCardSeries;\r\n    }\r\n\r\n    function getTotalAngels() constant public returns (uint64) {\r\n        return totalAngels;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAngelByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"angelCollection\",\"outputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"battlePower\",\"type\":\"uint16\"},{\"name\":\"aura\",\"type\":\"uint8\"},{\"name\":\"experience\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"createdTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastVsBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleResult\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_angelId\",\"type\":\"uint64\"}],\"name\":\"transferAngel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerAngelCollection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"}],\"name\":\"setAngelLastVsBattleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"name\":\"_maxTotal\",\"type\":\"uint64\"},{\"name\":\"_baseAura\",\"type\":\"uint8\"},{\"name\":\"_baseBattlePower\",\"type\":\"uint16\"},{\"name\":\"_liveTime\",\"type\":\"uint64\"}],\"name\":\"createAngelCardSeries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAngels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevSeriesSelloutHours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardSeriesId\",\"type\":\"uint8\"}],\"name\":\"updateAngelCardSeries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_battlePower\",\"type\":\"uint16\"}],\"name\":\"setAngel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToAngelExperienceLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_angelCardSeriesId\",\"type\":\"uint8\"}],\"name\":\"getAngelCardSeries\",\"outputs\":[{\"name\":\"angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"currentAngelTotal\",\"type\":\"uint64\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"maxAngelTotal\",\"type\":\"uint64\"},{\"name\":\"baseAura\",\"type\":\"uint8\"},{\"name\":\"baseBattlePower\",\"type\":\"uint256\"},{\"name\":\"lastSellTime\",\"type\":\"uint64\"},{\"name\":\"liveTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"},{\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"setLastBattleResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"}],\"name\":\"getAngel\",\"outputs\":[{\"name\":\"angelId\",\"type\":\"uint64\"},{\"name\":\"angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"battlePower\",\"type\":\"uint16\"},{\"name\":\"aura\",\"type\":\"uint8\"},{\"name\":\"experience\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"createdTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastVsBattleTime\",\"type\":\"uint64\"},{\"name\":\"lastBattleResult\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"angelCardSeriesCollection\",\"outputs\":[{\"name\":\"angelCardSeriesId\",\"type\":\"uint8\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"currentAngelTotal\",\"type\":\"uint64\"},{\"name\":\"maxAngelTotal\",\"type\":\"uint64\"},{\"name\":\"baseAura\",\"type\":\"uint8\"},{\"name\":\"baseBattlePower\",\"type\":\"uint256\"},{\"name\":\"lastSellTime\",\"type\":\"uint64\"},{\"name\":\"liveTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelId\",\"type\":\"uint64\"}],\"name\":\"setAngelLastBattleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAngelCardSeries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerAngelCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAngelCardSeries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_angelId\",\"type\":\"uint64\"}],\"name\":\"ownerAngelTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAngels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"angelId\",\"type\":\"uint64\"}],\"name\":\"CreatedAngel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AngelCardData","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://adadaf84581e771160384fa28c7bdb7a695acd9e2d68c3d000d34a8248793655"}]}