{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n \r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\ncontract RomanovEmpireTokenCoin is MintableToken {\r\n    \r\n    string public constant name = \" Romanov Empire Imperium Token\";\r\n    \r\n    string public constant symbol = \"REI\";\r\n    \r\n    uint32 public constant decimals = 0;\r\n    \r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address multisig;\r\n    \r\n    address manager;\r\n\r\n    uint restrictedPercent;\r\n\r\n    address restricted;\r\n\r\n    RomanovEmpireTokenCoin public token = new RomanovEmpireTokenCoin();\r\n\r\n    uint start;\r\n\r\n    uint preIcoEnd;\r\n    \r\n    uint preICOhardcap;\r\n\r\n    uint public ETHUSD;\r\n    \r\n    uint public hardcapUSD;\r\n    \r\n    uint public collectedFunds;\r\n    \r\n    bool pause;\r\n\r\n    function Crowdsale() {\r\n        //кошелек на который зачисляются средства\r\n        multisig = 0x1e129862b37Fe605Ef2099022F497caab7Db194c;//msg.sender;\r\n        //кошелек куда будет перечислен процент наших токенов\r\n        restricted = 0x1e129862b37Fe605Ef2099022F497caab7Db194c;//msg.sender;\r\n        //адрес кошелька управляющего контрактом\r\n        manager = msg.sender;\r\n        //процент, от проданных токенов, который мы оставляем себе \r\n        restrictedPercent = 1200;\r\n        //курс эфира к токенам \r\n        ETHUSD = 70000;\r\n        //время старта  \r\n        start = now;\r\n\t//время завершения prICO\r\n        preIcoEnd = 1546300800; //Tue, 01 Jan 2019 00:00:00 GMT\r\n        //период ICO в минутах\r\n        //period = 25;\r\n        //максимальное число сбора в токенах на PreICO\r\n        preICOhardcap = 42000;\t\t\r\n        //максимальное число сбора в токенах\r\n        //hardcap = 42000;\r\n        //максимальное число сбора в центах\r\n        hardcapUSD = 500000000;\r\n        //собрано средство в центах\r\n        collectedFunds = 0;\r\n        //пауза \r\n        pause = false;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n    \trequire(now > start && now < preIcoEnd);\r\n    \trequire(pause!=true);\r\n    \t_;\r\n    }\r\n\t\r\n    modifier isUnderHardCap() {\r\n        require(token.totalSupply() < preICOhardcap);\r\n        //если набран hardcapUSD\r\n        require(collectedFunds < hardcapUSD);\r\n        _;\r\n    }\r\n\r\n    function finishMinting() public {\r\n        require(msg.sender == manager);\r\n        \r\n        uint issuedTokenSupply = token.totalSupply();\r\n        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(10000);\r\n        token.mint(restricted, restrictedTokens);\r\n        token.transferOwnership(restricted);\r\n    }\r\n\r\n    function createTokens() isUnderHardCap saleIsOn payable {\r\n\r\n        require(msg.value > 0);\r\n        \r\n        uint256 totalSupply = token.totalSupply();\r\n        \r\n        uint256 numTokens = 0;\r\n        uint256 summ1 = 1800000;\r\n        uint256 summ2 = 3300000;\r\n          \r\n        uint256 price1 = 18000;\r\n        uint256 price2 = 15000;\r\n        uint256 price3 = 12000;\r\n          \r\n        uint256 usdValue = msg.value.mul(ETHUSD).div(1000000000000000000);\r\n          \r\n        uint256 spendMoney = 0; \r\n        \r\n        uint256 tokenRest = 0;\r\n        uint256 rest = 0;\r\n        \r\n          require(totalSupply < preICOhardcap);\r\n          \r\n          tokenRest = preICOhardcap.sub(totalSupply);\r\n\r\n          require(tokenRest > 0);\r\n            \r\n          \r\n          if(usdValue>summ2 && tokenRest > 200 ){\r\n              numTokens = (usdValue.sub(summ2)).div(price3).add(200);\r\n              if(numTokens > tokenRest)\r\n                numTokens = tokenRest;              \r\n              spendMoney = summ2.add((numTokens.sub(200)).mul(price3));\r\n          }else if(usdValue>summ1 && tokenRest > 100 ) {\r\n              numTokens = (usdValue.sub(summ1)).div(price2).add(100);\r\n              if(numTokens > tokenRest)\r\n                numTokens = tokenRest;\r\n              spendMoney = summ1.add((numTokens.sub(100)).mul(price2));\r\n          }else {\r\n              numTokens = usdValue.div(price1);\r\n              if(numTokens > tokenRest)\r\n                numTokens = tokenRest;\r\n              spendMoney = numTokens.mul(price1);\r\n          }\r\n    \r\n          rest = (usdValue.sub(spendMoney)).mul(1000000000000000000).div(ETHUSD);\r\n    \r\n         msg.sender.transfer(rest);\r\n         if(rest<msg.value){\r\n            multisig.transfer(msg.value.sub(rest));\r\n            collectedFunds = collectedFunds + msg.value.sub(rest).mul(ETHUSD).div(1000000000000000000); \r\n         }\r\n         \r\n          token.mint(msg.sender, numTokens);\r\n          \r\n        \r\n        \r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n\r\n    function mint(address _to, uint _value) {\r\n        require(msg.sender == manager);\r\n        token.mint(_to, _value);   \r\n    }    \r\n    \r\n    function setETHUSD( uint256 _newPrice ) {\r\n        require(msg.sender == manager);\r\n        ETHUSD = _newPrice;\r\n    }    \r\n    \r\n    function setPause( bool _newPause ) {\r\n        require(msg.sender == manager);\r\n        pause = _newPause;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcapUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1eb87b87057835d286c627b80077660910609aa1f347129be24018994d84b7b"}]}