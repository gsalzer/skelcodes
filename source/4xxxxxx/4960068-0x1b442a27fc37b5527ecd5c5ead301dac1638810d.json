{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Raffle\r\n{\r\n\tstruct Player\r\n\t{\r\n\t\taddress delegate;\r\n\t\tuint amount;\r\n\t\tuint previousTotal;\r\n\t}\r\n\t\r\n\taddress owner;\r\n\tPlayer[] players;\r\n\taddress[] previousWinners;\r\n\tmapping(address => uint) playerTotalAmounts;\r\n\tuint total = 0;\r\n\tuint seed = 0;\r\n\tuint lastSeed = 0;\r\n\tbool selfdestructQueued = false;\r\n\t\r\n\tfunction Raffle() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\t// if ether is accidentally sent without calling any function, fail\r\n\tfunction() public\r\n\t{\r\n\t\tassert(false);\r\n\t}\r\n\t\r\n\tfunction kill() public\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\tif (players.length > 0)\r\n\t\t{\r\n\t\t\tselfdestructQueued = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tselfdestruct(owner);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction enter(uint userSeed) public payable\r\n\t{\r\n\t\trequire(msg.value > 0);\r\n\t\trequire(userSeed != 0);\r\n\t\tplayers.push(Player(msg.sender, msg.value, total));\r\n\t\tplayerTotalAmounts[msg.sender] += msg.value;\r\n\t\ttotal += msg.value;\r\n\t\tif (lastSeed != userSeed)\r\n\t\t{\r\n\t\t\tlastSeed = userSeed;\r\n\t\t\tseed ^= userSeed;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction totalPool() public view returns (uint)\r\n\t{\r\n\t\treturn total;\r\n\t}\r\n\t\r\n\tfunction enteredTotalAmount() public view returns (uint)\r\n\t{\r\n\t\treturn playerTotalAmounts[msg.sender];\r\n\t}\r\n\t\r\n\tfunction getPreviousWinners() public view returns (address[])\r\n\t{\r\n\t\treturn previousWinners;\r\n\t}\r\n\t\r\n\tfunction selectWinner() public\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\taddress winner = 0x0;\r\n\t\tif (players.length > 0)\r\n\t\t{\r\n\t\t\tuint value = seed % total;\r\n\t\t\tuint i = 0;\r\n\t\t\tuint rangeStart = 0;\r\n\t\t\tuint rangeEnd = 0;\r\n\t\t\t// binary search to find winner\r\n\t\t\tuint min = 0;\r\n\t\t\tuint max = players.length - 1;\r\n\t\t\tuint current = min + (max - min) / 2;\r\n\t\t\twhile (true)\r\n\t\t\t{\r\n\t\t\t\trangeStart = players[current].previousTotal;\r\n\t\t\t\trangeEnd = rangeStart + players[current].amount;\r\n\t\t\t\tif (value >= rangeStart && value < rangeEnd)\r\n\t\t\t\t{\r\n\t\t\t\t\twinner = players[current].delegate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (value < rangeStart)\r\n\t\t\t\t{\r\n\t\t\t\t\tmax = current - 1;\r\n\t\t\t\t\tcurrent = min + (max - min) / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (value >= rangeEnd)\r\n\t\t\t\t{\r\n\t\t\t\t\tmin = current + 1;\r\n\t\t\t\t\tcurrent = min + (max - min) / 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trequire(winner != 0x0);\r\n\t\t\tuint prize = total * 99 / 100; // 1% fee\r\n\t\t\tuint fee = total - prize;\r\n\t\t\tfor (i = 0; i < players.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tplayerTotalAmounts[players[i].delegate] = 0;\r\n\t\t\t}\r\n\t\t\tplayers.length = 0;\r\n\t\t\ttotal = 0;\r\n\t\t\twinner.transfer(prize);\r\n\t\t\towner.transfer(fee);\r\n\t\t\tpreviousWinners.push(winner);\r\n\t\t}\r\n\t\tif (selfdestructQueued)\r\n\t\t{\r\n\t\t\tselfdestruct(owner);\r\n\t\t}\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"selectWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreviousWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enteredTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userSeed\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"Raffle","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d388ffd54d2251f833ade88021ed1657cd5536ff9fbc2b6c7652dae3d261068"}]}