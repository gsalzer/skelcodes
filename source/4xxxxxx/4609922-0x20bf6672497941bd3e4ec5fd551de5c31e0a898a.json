{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SetherToken\r\n * @dev Sether ERC20 Token that can be minted.\r\n * It is meant to be used in sether crowdsale contract.\r\n */\r\ncontract SetherToken is MintableToken {\r\n\r\n    string public constant name = \"Sether\";\r\n    string public constant symbol = \"SETH\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function getTotalSupply() public returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SetherBaseCrowdsale\r\n * @dev SetherBaseCrowdsale is a base contract for managing a sether token crowdsale.\r\n */\r\ncontract SetherBaseCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    SetherToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many finney per token\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event SethTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function SetherBaseCrowdsale(uint256 _rate, address _wallet) {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n\r\n        token = createTokenContract();\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = computeTokens(weiAmount);\r\n\r\n        require(isWithinTokenAllocLimit(tokens));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n\r\n        SethTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // @return true if crowdsale event has started\r\n    function hasStarted() public constant returns (bool) {\r\n        return now < startTime;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n    \r\n    //Override this method with token distribution strategy\r\n    function computeTokens(uint256 weiAmount) internal returns (uint256) {\r\n        //To be overriden\r\n    }\r\n\r\n    //Override this method with token limitation strategy\r\n    function isWithinTokenAllocLimit(uint256 _tokens) internal returns (bool) {\r\n        //To be overriden\r\n    }\r\n    \r\n    // creates the token to be sold.\r\n    function createTokenContract() internal returns (SetherToken) {\r\n        return new SetherToken();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SetherMultiStepCrowdsale\r\n * @dev Multi-step payment policy contract that extends SetherBaseCrowdsale\r\n */\r\ncontract SetherMultiStepCrowdsale is SetherBaseCrowdsale {\r\n    uint256 public constant PRESALE_LIMIT = 25 * (10 ** 6) * (10 ** 18);\r\n    uint256 public constant CROWDSALE_LIMIT = 55 * (10 ** 6) * (10 ** 18);\r\n    \r\n    uint256 public constant PRESALE_BONUS_LIMIT = 1 * (10 ** 17);\r\n\r\n    // Presale period (includes holidays)\r\n    uint public constant PRESALE_PERIOD = 53 days;\r\n    // Crowdsale first week period (constants for proper testing)\r\n    uint public constant CROWD_WEEK1_PERIOD = 7 days;\r\n    // Crowdsale second week period\r\n    uint public constant CROWD_WEEK2_PERIOD = 7 days;\r\n    //Crowdsale third week period\r\n    uint public constant CROWD_WEEK3_PERIOD = 7 days;\r\n    //Crowdsale last week period\r\n    uint public constant CROWD_WEEK4_PERIOD = 7 days;\r\n\r\n    uint public constant PRESALE_BONUS = 40;\r\n    uint public constant CROWD_WEEK1_BONUS = 25;\r\n    uint public constant CROWD_WEEK2_BONUS = 20;\r\n    uint public constant CROWD_WEEK3_BONUS = 10;\r\n\r\n    uint256 public limitDatePresale;\r\n    uint256 public limitDateCrowdWeek1;\r\n    uint256 public limitDateCrowdWeek2;\r\n    uint256 public limitDateCrowdWeek3;\r\n\r\n    function SetherMultiStepCrowdsale() {\r\n\r\n    }\r\n\r\n    function isWithinPresaleTimeLimit() internal returns (bool) {\r\n        return now <= limitDatePresale;\r\n    }\r\n\r\n    function isWithinCrowdWeek1TimeLimit() internal returns (bool) {\r\n        return now <= limitDateCrowdWeek1;\r\n    }\r\n\r\n    function isWithinCrowdWeek2TimeLimit() internal returns (bool) {\r\n        return now <= limitDateCrowdWeek2;\r\n    }\r\n\r\n    function isWithinCrowdWeek3TimeLimit() internal returns (bool) {\r\n        return now <= limitDateCrowdWeek3;\r\n    }\r\n\r\n    function isWithinCrodwsaleTimeLimit() internal returns (bool) {\r\n        return now <= endTime && now > limitDatePresale;\r\n    }\r\n\r\n    function isWithinPresaleLimit(uint256 _tokens) internal returns (bool) {\r\n        return token.getTotalSupply().add(_tokens) <= PRESALE_LIMIT;\r\n    }\r\n\r\n    function isWithinCrowdsaleLimit(uint256 _tokens) internal returns (bool) {\r\n        return token.getTotalSupply().add(_tokens) <= CROWDSALE_LIMIT;\r\n    }\r\n\r\n    function validPurchase() internal constant returns (bool) {\r\n        return super.validPurchase() &&\r\n                 !(isWithinPresaleTimeLimit() && msg.value < PRESALE_BONUS_LIMIT);\r\n    }\r\n\r\n    function isWithinTokenAllocLimit(uint256 _tokens) internal returns (bool) {\r\n        return (isWithinPresaleTimeLimit() && isWithinPresaleLimit(_tokens)) ||\r\n                        (isWithinCrodwsaleTimeLimit() && isWithinCrowdsaleLimit(_tokens));\r\n    }\r\n\r\n    function computeTokens(uint256 weiAmount) internal returns (uint256) {\r\n        uint256 appliedBonus = 0;\r\n        if (isWithinPresaleTimeLimit()) {\r\n            appliedBonus = PRESALE_BONUS;\r\n        } else if (isWithinCrowdWeek1TimeLimit()) {\r\n            appliedBonus = CROWD_WEEK1_BONUS;\r\n        } else if (isWithinCrowdWeek2TimeLimit()) {\r\n            appliedBonus = CROWD_WEEK2_BONUS;\r\n        } else if (isWithinCrowdWeek3TimeLimit()) {\r\n            appliedBonus = CROWD_WEEK3_BONUS;\r\n        }\r\n\r\n        return weiAmount.mul(10).mul(100 + appliedBonus).div(rate);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SetherCappedCrowdsale\r\n * @dev Extension of SetherBaseCrowdsale with a max amount of funds raised\r\n */\r\ncontract SetherCappedCrowdsale is SetherMultiStepCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant HARD_CAP = 55 * (10 ** 6) * (10 ** 18);\r\n\r\n    function SetherCappedCrowdsale() {\r\n        \r\n    }\r\n\r\n    // overriding SetherBaseCrowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= HARD_CAP;\r\n\r\n        return super.validPurchase() && withinCap;\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised >= HARD_CAP;\r\n        return super.hasEnded() || capReached;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SetherStartableCrowdsale\r\n * @dev Extension of SetherBaseCrowdsale where an owner can start the crowdsale\r\n */\r\ncontract SetherStartableCrowdsale is SetherBaseCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isStarted = false;\r\n\r\n  event SetherStarted();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function start() onlyOwner public {\r\n    require(!isStarted);\r\n    require(!hasStarted());\r\n\r\n    starting();\r\n    SetherStarted();\r\n\r\n    isStarted = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add start logic. The overriding function\r\n   * should call super.starting() to ensure the chain of starting is\r\n   * executed entirely.\r\n   */\r\n  function starting() internal {\r\n    //To be overriden\r\n  }\r\n}\r\n\r\n/**\r\n * @title SetherFinalizableCrowdsale\r\n * @dev Extension of SetherBaseCrowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract SetherFinalizableCrowdsale is SetherBaseCrowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event SetherFinalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    SetherFinalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n    //To be overriden\r\n  }\r\n}\r\n\r\n/**\r\n * @title SetherCrowdsale\r\n * @dev This is Sether's crowdsale contract.\r\n */\r\ncontract SetherCrowdsale is SetherCappedCrowdsale, SetherStartableCrowdsale, SetherFinalizableCrowdsale {\r\n\r\n    function SetherCrowdsale(uint256 rate, address _wallet) \r\n        SetherCappedCrowdsale()\r\n        SetherFinalizableCrowdsale()\r\n        SetherStartableCrowdsale()\r\n        SetherMultiStepCrowdsale()\r\n        SetherBaseCrowdsale(rate, _wallet) \r\n    {\r\n   \r\n    }\r\n\r\n    function starting() internal {\r\n        super.starting();\r\n        startTime = now;\r\n        limitDatePresale = startTime + PRESALE_PERIOD;\r\n        limitDateCrowdWeek1 = limitDatePresale + CROWD_WEEK1_PERIOD; \r\n        limitDateCrowdWeek2 = limitDateCrowdWeek1 + CROWD_WEEK2_PERIOD; \r\n        limitDateCrowdWeek3 = limitDateCrowdWeek2 + CROWD_WEEK3_PERIOD;         \r\n        endTime = limitDateCrowdWeek3 + CROWD_WEEK4_PERIOD;\r\n    }\r\n\r\n    function finalization() internal {\r\n        super.finalization();\r\n        uint256 ownerShareTokens = token.getTotalSupply().mul(9).div(11);\r\n\r\n        token.mint(wallet, ownerShareTokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_BONUS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK2_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitDateCrowdWeek2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitDateCrowdWeek1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitDatePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK1_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK1_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK4_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK3_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK3_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitDateCrowdWeek3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWD_WEEK2_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetherFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetherStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SethTokenPurchase\",\"type\":\"event\"}]","ContractName":"SetherCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000300000000000000000000000024fc0a9f73ded4ba9a8b78e9df59c1f71d557e36","Library":"","SwarmSource":"bzzr://1d787f69f33f98741e12e2ab7687e1f1e8f7b914c5e1122f774918af36dbd5ba"}]}