{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert() on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    asserts(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    asserts(b <= a);\r\n    return a - b;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    asserts(b > 0);\r\n    uint c = a / b;\r\n    asserts(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    asserts(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    asserts(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function asserts(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) revert();\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {}\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n  /**\r\n   * Reviewed:\r\n   * - Interger overflow = OK, checked\r\n   */\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    //Default assumes totalSupply can't be over max (2^256 - 1).\r\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n    //Replace the if with this one instead.\r\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n    //if (balances[msg.sender] >= _value && _value > 0) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\n\r\ncontract DigipulseFirstRoundToken is StandardToken {\r\n  using SafeMath for uint;\r\n}\r\n\r\ncontract DigipulseToken is StandardToken, Pausable {\r\n  using SafeMath for uint;\r\n\r\n  // Digipulse Token setup\r\n  string public           name                    = \"DigiPulse Token\";\r\n  string public           symbol                  = \"DGPT\";\r\n  uint8 public            decimals                = 18;\r\n  string public           version                 = 'v0.0.3';\r\n  address public          owner                   = msg.sender;\r\n  uint freezeTransferForOwnerTime;\r\n\r\n  // Token information\r\n  address public DGPTokenOldContract = 0x9AcA6aBFe63A5ae0Dc6258cefB65207eC990Aa4D;\r\n  DigipulseFirstRoundToken public coin;\r\n\r\n\r\n  // Token details\r\n\r\n  // ICO details\r\n  bool public             finalizedCrowdfunding   = false;\r\n  uint public constant    MIN_CAP                 = 500   * 1e18;\r\n  uint public constant    MAX_CAP                 = 41850 * 1e18; // + 1600 OBR + 1200 PRE\r\n  uint public             TierAmount              = 8300  * 1e18;\r\n  uint public constant    TOKENS_PER_ETH          = 250;\r\n  uint public constant    MIN_INVEST_ETHER        = 500 finney;\r\n  uint public             startTime;\r\n  uint public             endTime;\r\n  uint public             etherReceived;\r\n  uint public             coinSentToEther;\r\n  bool public             isFinalized;\r\n\r\n  // Original Backers round\r\n  bool public             isOBR;\r\n  uint public             raisedOBR;\r\n  uint public             MAX_OBR_CAP             = 1600  * 1e18;\r\n  uint public             OBR_Duration;\r\n\r\n  // Enums\r\n  enum TierState{Completed, Tier01, Tier02, Tier03, Tier04, Tier05, Overspend, Failure, OBR}\r\n\r\n  // Modifiers\r\n  modifier minCapNotReached() {\r\n    require (now < endTime && etherReceived <= MIN_CAP);\r\n    _;\r\n  }\r\n\r\n  // Mappings\r\n  mapping(address => Backer) public backers;\r\n  struct Backer {\r\n    uint weiReceived;\r\n    uint coinSent;\r\n  }\r\n\r\n  // Events\r\n  event LogReceivedETH(address addr, uint value);\r\n  event LogCoinsEmited(address indexed from, uint amount);\r\n\r\n\r\n  // Bounties, Presale, Company tokens\r\n  address public          presaleWallet           = 0x83D0Aa2292efD8475DF241fBA42fe137dA008d79;\r\n  address public          companyWallet           = 0x5C967dE68FC54365872203D49B51cDc79a61Ca85;\r\n  address public          bountyWallet            = 0x49fe3E535906d10e55E2e4AD47ff6cB092Abc692;\r\n\r\n  // Allocated 10% for the team members\r\n  address public          teamWallet_1            = 0x91D9B09a4157e02783D5D19f7DfC66a759bDc1E4;\r\n  address public          teamWallet_2            = 0x56298A4e0f60Ab4A323EDB0b285A9421F8e6E276;\r\n  address public          teamWallet_3            = 0x09e9e24b3e6bA1E714FB86B04602a7Aa62D587FD;\r\n  address public          teamWallet_4            = 0x2F4283D0362A3AaEe359aC55F2aC7a4615f97c46;\r\n\r\n\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n\r\n\r\n  function withdrawPayments() onlyOwner {\r\n    // Can only be called if the ICO is successfull\r\n    require (isFinalized);\r\n    require (etherReceived != 0);\r\n\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n\r\n  // Init contract\r\n  function DigipulseToken() {\r\n    coin = DigipulseFirstRoundToken(DGPTokenOldContract);\r\n    isOBR = true;\r\n    isFinalized = false;\r\n    start();\r\n\r\n    // Allocate tokens\r\n    balances[presaleWallet]         = 600000 * 1e18;                // 600.000 for presale (closed already)\r\n    Transfer(0x0, presaleWallet, 600000 * 1e18);\r\n\r\n    balances[teamWallet_1]          = 20483871 * 1e16;              // 1% for team member 1\r\n    Transfer(0x0, teamWallet_1, 20483871 * 1e16);\r\n\r\n    balances[teamWallet_2]          = 901290324 * 1e15;             // 4.4% for team member 2\r\n    Transfer(0x0, teamWallet_2, 901290324 * 1e15);\r\n\r\n    balances[teamWallet_3]          = 901290324 * 1e15;             // 4.4% for team member 3\r\n    Transfer(0x0, teamWallet_3, 901290324 * 1e15);\r\n\r\n    balances[teamWallet_4]          = 40967724 * 1e15;              // 0.2% for team member 4\r\n    Transfer(0x0, teamWallet_4, 40967724 * 1e15);\r\n\r\n    balances[companyWallet]          = 512096775 * 1e16;            // Company shares\r\n    Transfer(0x0, companyWallet, 512096775 * 1e16);\r\n\r\n    balances[bountyWallet]          = 61451613 * 1e16;              // Bounty shares\r\n    Transfer(0x0, bountyWallet, 61451613 * 1e16);\r\n\r\n    balances[this]                  = 12100000 * 1e18;              // Tokens to be issued during the crowdsale\r\n    Transfer(0x0, this, 12100000 * 1e18);\r\n\r\n    totalSupply = 20483871 * 1e18;\r\n  }\r\n\r\n\r\n  function start() onlyOwner {\r\n    if (startTime != 0) revert();\r\n    startTime    =  1506610800 ;  //28/09/2017 03:00 PM UTC\r\n    endTime      =  1509494400 ;  //01/11/2017 00:00 PM UTC\r\n    OBR_Duration =  startTime + 72 hours;\r\n  }\r\n\r\n\r\n  function toWei(uint _amount) constant returns (uint256 result){\r\n    // Set to finney for ease of testing on ropsten: 1e15 (or smaller) || Ether for main net 1e18\r\n    result = _amount.mul(1e18);\r\n    return result;\r\n  }\r\n\r\n\r\n  function isOriginalRoundContributor() constant returns (bool _state){\r\n    uint balance = coin.balanceOf(msg.sender);\r\n    if (balance > 0) return true;\r\n  }\r\n\r\n\r\n  function() payable {\r\n    if (isOBR) {\r\n      buyDigipulseOriginalBackersRound(msg.sender);\r\n    } else {\r\n      buyDigipulseTokens(msg.sender);\r\n    }\r\n  }\r\n\r\n\r\n  function buyDigipulseOriginalBackersRound(address beneficiary) internal  {\r\n    // User must have old tokens\r\n    require (isOBR);\r\n    require(msg.value > 0);\r\n    require(msg.value > MIN_INVEST_ETHER);\r\n    require(isOriginalRoundContributor());\r\n\r\n    uint ethRaised          = raisedOBR;\r\n    uint userContribution   = msg.value;\r\n    uint shouldBecome       = ethRaised.add(userContribution);\r\n    uint excess             = 0;\r\n    Backer storage backer   = backers[beneficiary];\r\n\r\n    // Define excess and amount to include\r\n    if (shouldBecome > MAX_OBR_CAP) {\r\n      userContribution = MAX_OBR_CAP - ethRaised;\r\n      excess = msg.value - userContribution;\r\n    }\r\n\r\n    uint tierBonus   = getBonusPercentage( userContribution );\r\n    balances[beneficiary] += tierBonus;\r\n    balances[this]      -= tierBonus;\r\n    raisedOBR = raisedOBR.add(userContribution);\r\n    backer.coinSent = backer.coinSent.add(tierBonus);\r\n    backer.weiReceived = backer.weiReceived.add(userContribution);\r\n\r\n    if (raisedOBR >= MAX_OBR_CAP) {\r\n      isOBR = false;\r\n    }\r\n\r\n    Transfer(this, beneficiary, tierBonus);\r\n    LogCoinsEmited(beneficiary, tierBonus);\r\n    LogReceivedETH(beneficiary, userContribution);\r\n\r\n    // Send excess back\r\n    if (excess > 0) {\r\n      assert(msg.sender.send(excess));\r\n    }\r\n  }\r\n\r\n\r\n  function buyDigipulseTokens(address beneficiary) internal {\r\n    require (!finalizedCrowdfunding);\r\n    require (now > OBR_Duration);\r\n    require (msg.value > MIN_INVEST_ETHER);\r\n\r\n    uint CurrentTierMax = getCurrentTier().mul(TierAmount);\r\n\r\n    // Account for last tier with extra 350 ETH\r\n    if (getCurrentTier() == 5) {\r\n      CurrentTierMax = CurrentTierMax.add(350 * 1e18);\r\n    }\r\n    uint userContribution = msg.value;\r\n    uint shouldBecome = etherReceived.add(userContribution);\r\n    uint tierBonus = 0;\r\n    uint excess = 0;\r\n    uint excess_bonus = 0;\r\n\r\n    Backer storage backer = backers[beneficiary];\r\n\r\n    // Define excess over tier and amount to include\r\n    if (shouldBecome > CurrentTierMax) {\r\n      userContribution = CurrentTierMax - etherReceived;\r\n      excess = msg.value - userContribution;\r\n    }\r\n\r\n    tierBonus = getBonusPercentage( userContribution );\r\n    balances[beneficiary] += tierBonus;\r\n    balances[this] -= tierBonus;\r\n    etherReceived = etherReceived.add(userContribution);\r\n    backer.coinSent = backer.coinSent.add(tierBonus);\r\n    backer.weiReceived = backer.weiReceived.add(userContribution);\r\n    Transfer(this, beneficiary, tierBonus);\r\n\r\n    // Tap into next tier with appropriate bonuses\r\n    if (excess > 0 && etherReceived < MAX_CAP) {\r\n      excess_bonus = getBonusPercentage( excess );\r\n      balances[beneficiary] += excess_bonus;\r\n      balances[this] -= excess_bonus;\r\n      etherReceived = etherReceived.add(excess);\r\n      backer.coinSent = backer.coinSent.add(excess_bonus);\r\n      backer.weiReceived = backer.weiReceived.add(excess);\r\n      Transfer(this, beneficiary, excess_bonus);\r\n    }\r\n\r\n    LogCoinsEmited(beneficiary, tierBonus.add(excess_bonus));\r\n    LogReceivedETH(beneficiary, userContribution.add(excess));\r\n\r\n    if(etherReceived >= MAX_CAP) {\r\n      finalizedCrowdfunding = true;\r\n    }\r\n\r\n    // Send excess back\r\n    if (excess > 0 && etherReceived == MAX_CAP) {\r\n      assert(msg.sender.send(excess));\r\n    }\r\n  }\r\n\r\n\r\n  function getCurrentTier() returns (uint Tier) {\r\n    uint ethRaised = etherReceived;\r\n\r\n    if (isOBR) return uint(TierState.OBR);\r\n\r\n    if (ethRaised >= 0 && ethRaised < toWei(8300)) return uint(TierState.Tier01);\r\n    else if (ethRaised >= toWei(8300) && ethRaised < toWei(16600)) return uint(TierState.Tier02);\r\n    else if (ethRaised >= toWei(16600) && ethRaised < toWei(24900)) return uint(TierState.Tier03);\r\n    else if (ethRaised >= toWei(24900) && ethRaised < toWei(33200)) return uint(TierState.Tier04);\r\n    else if (ethRaised >= toWei(33200) && ethRaised <= toWei(MAX_CAP)) return uint(TierState.Tier05); // last tier has 8650\r\n    else if (ethRaised > toWei(MAX_CAP)) {\r\n      finalizedCrowdfunding = true;\r\n      return uint(TierState.Overspend);\r\n    }\r\n    else return uint(TierState.Failure);\r\n  }\r\n\r\n\r\n  function getBonusPercentage(uint contribution) returns (uint _amount) {\r\n    uint tier = getCurrentTier();\r\n\r\n    uint bonus =\r\n        tier == 1 ? 20 :\r\n        tier == 2 ? 15 :\r\n        tier == 3 ? 10 :\r\n        tier == 4 ? 5 :\r\n        tier == 5 ? 0 :\r\n        tier == 8 ? 50 :\r\n                    0;\r\n\r\n    return contribution.mul(TOKENS_PER_ETH).mul(bonus + 100).div(100);\r\n  }\r\n\r\n\r\n  function refund(uint _value) minCapNotReached public {\r\n\r\n    if (_value != backers[msg.sender].coinSent) revert(); // compare value from backer balance\r\n\r\n    uint ETHToSend = backers[msg.sender].weiReceived;\r\n    backers[msg.sender].weiReceived=0;\r\n\r\n    if (ETHToSend > 0) {\r\n      asyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\r\n    }\r\n  }\r\n\r\n\r\n  function finalize() onlyOwner public {\r\n    require (now >= endTime);\r\n    require (etherReceived >= MIN_CAP);\r\n\r\n    finalizedCrowdfunding = true;\r\n    isFinalized = true;\r\n    freezeTransferForOwnerTime = now + 182 days;\r\n  }\r\n\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success) {\r\n    require(isFinalized);\r\n\r\n    if (msg.sender == owner) {\r\n      require(now > freezeTransferForOwnerTime);\r\n    }\r\n\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    require(isFinalized);\r\n\r\n    if (msg.sender == owner) {\r\n      require(now > freezeTransferForOwnerTime);\r\n    }\r\n\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOriginalRoundContributor\",\"outputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OBR_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"getBonusPercentage\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OBR_Duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet_1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"toWei\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet_4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedCrowdfunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCurrentTier\",\"outputs\":[{\"name\":\"Tier\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TierAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet_2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinSentToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet_3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"weiReceived\",\"type\":\"uint256\"},{\"name\":\"coinSent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DGPTokenOldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOBR\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedOBR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCoinsEmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DigipulseToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6230d9327cd056f9080e0f6ce3652539df8a9eb97441f54bdc93b279915b4e2d"}]}