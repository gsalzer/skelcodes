{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\ncontract Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is SafeMath, ERC20Basic {\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) returns (bool){\r\n    balances[msg.sender] = sub(balances[msg.sender],_value);\r\n    balances[_to] = add(balances[_to],_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = add(balances[_to],_value);\r\n    balances[_from] = sub(balances[_from],_value);\r\n    allowed[_from][msg.sender] = sub(_allowance,_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = add(totalSupply,_amount);\r\n    balances[_to] = add(balances[_to],_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Pausable token\r\n *\r\n * Simple ERC20 Token example, with pausable token creation\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Vested token\r\n * @dev Tokens that can be vested for a group of addresses.\r\n */\r\ncontract VestedToken is Math, StandardToken, LimitedTransferToken {\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    require(_cliff >= _start && _vesting >= _cliff);\r\n\r\n    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    uint256 count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n\r\n    transfer(_to, _value);\r\n\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint256 _grantId) public {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    require(grant.revokable);\r\n    require(grant.granter == msg.sender); // Only granter can revoke it\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][sub(grants[_holder].length,1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    balances[receiver] = add(balances[receiver],nonVested);\r\n    balances[_holder] = sub(balances[_holder],nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint256 representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n    if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = sub(balanceOf(holder), nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint256 representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint256 index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specifc time.\r\n   * @param tokens uint256 The amount of tokens grantted.\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the begining of the grant\r\n   * @param cliff uint64 The cliff period.\r\n   * @param vesting uint64 The vesting period.\r\n   * @return An uint256 representing the amount of vested tokensof a specif grant.\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      // vestedTokens = tokens * (time - start) / (vesting - start)\r\n      uint256 vestedTokens = div(\r\n                                    mul(\r\n                                      tokens,\r\n                                      sub(time, start)\r\n                                      ),\r\n                                    sub(vesting, start)\r\n                                    );\r\n\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Get all information about a specifc grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint256 _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return sub(grant.value,vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the date when the holder can trasfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint256 representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\n\r\ncontract BurnableToken is SafeMath, StandardToken {\r\n\r\n\r\n    event Burn(address indexed burner, uint indexed value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint _value)\r\n        public\r\n    {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = sub(balances[burner], _value);\r\n        totalSupply = sub(totalSupply, _value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title PLC\r\n * @dev PLC is ERC20 token contract, inheriting MintableToken, PausableToken,\r\n * VestedToken, BurnableToken contract from open zeppelin.\r\n */\r\ncontract PLC is MintableToken, PausableToken, VestedToken, BurnableToken {\r\n  string public name = \"PlusCoin\";\r\n  string public symbol = \"PLC\";\r\n  uint256 public decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PLC","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://361b64afdbc02f2ca88e8f9808bc2324e6d54477b585077cbccaa02778d1a266"}]}