{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  modifier notLocked() {\r\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgnet) public {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract VestarinToken is MintableToken {\t\r\n    \r\n  string public constant name = \"Vestarin\";\r\n   \r\n  string public constant symbol = \"VST\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  mapping (address => uint) public locked;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(locked[msg.sender] < now);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(locked[_from] < now);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function lock(address addr, uint periodInDays) public {\r\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\r\n    locked[addr] = now + periodInDays * 1 days;\r\n  }\r\n\r\n}\r\n\r\ncontract StagedCrowdsale is Pausable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Stage {\r\n    uint hardcap;\r\n    uint price;\r\n    uint invested;\r\n    uint closed;\r\n  }\r\n\r\n  uint public start;\r\n\r\n  uint public period;\r\n\r\n  uint public totalHardcap;\r\n \r\n  uint public totalInvested;\r\n\r\n  Stage[] public stages;\r\n\r\n  function stagesCount() public constant returns(uint) {\r\n    return stages.length;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n\r\n  function addStage(uint hardcap, uint price) public onlyOwner {\r\n    require(hardcap > 0 && price > 0);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    stages.push(stage);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n  }\r\n\r\n  function removeStage(uint8 number) public onlyOwner {\r\n    require(number >=0 && number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    delete stages[number];\r\n    for (uint i = number; i < stages.length - 1; i++) {\r\n      stages[i] = stages[i+1];\r\n    }\r\n    stages.length--;\r\n  }\r\n\r\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\r\n    require(number >= 0 &&number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    stage.hardcap = hardcap.mul(1 ether);\r\n    stage.price = price;\r\n    totalHardcap = totalHardcap.add(stage.hardcap);    \r\n  }\r\n\r\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\r\n    require(numberAfter < stages.length);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n    stages.length++;\r\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\r\n      stages[i + 1] = stages[i];\r\n    }\r\n    stages[numberAfter + 1] = stage;\r\n  }\r\n\r\n  function clearStages() public onlyOwner {\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      delete stages[i];\r\n    }\r\n    stages.length -= stages.length;\r\n    totalHardcap = 0;\r\n  }\r\n\r\n  function lastSaleDate() public constant returns(uint) {\r\n    return start + period * 1 days;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n  \r\n  modifier isUnderHardcap() {\r\n    require(totalInvested <= totalHardcap);\r\n    _;\r\n  }\r\n\r\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\r\n    for(uint i=0; i < stages.length; i++) {\r\n      if(stages[i].closed == 0) {\r\n        return i;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract CommonSale is StagedCrowdsale {\r\n\r\n  address public masterWallet;\r\n\r\n  address public slaveWallet;\r\n  \r\n  address public directMintAgent;\r\n\r\n  uint public slaveWalletPercent = 30;\r\n\r\n  uint public percentRate = 100;\r\n\r\n  uint public minPrice;\r\n\r\n  uint public totalTokensMinted;\r\n  \r\n  bool public slaveWalletInitialized;\r\n  \r\n  bool public slaveWalletPercentInitialized;\r\n\r\n  VestarinToken public token;\r\n  \r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n  \r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n  \r\n  function setMinPrice(uint newMinPrice) public onlyOwner {\r\n    minPrice = newMinPrice;\r\n  }\r\n\r\n  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\r\n    require(!slaveWalletPercentInitialized);\r\n    slaveWalletPercent = newSlaveWalletPercent;\r\n    slaveWalletPercentInitialized = true;\r\n  }\r\n\r\n  function setMasterWallet(address newMasterWallet) public onlyOwner {\r\n    masterWallet = newMasterWallet;\r\n  }\r\n\r\n  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\r\n    require(!slaveWalletInitialized);\r\n    slaveWallet = newSlaveWallet;\r\n    slaveWalletInitialized = true;\r\n  }\r\n  \r\n  function setToken(address newToken) public onlyOwner {\r\n    token = VestarinToken(newToken);\r\n  }\r\n\r\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\r\n    mintTokens(to, investedWei);\r\n  }\r\n\r\n  function createTokens() public whenNotPaused payable {\r\n    require(msg.value >= minPrice);\r\n    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\r\n    uint slaveValue = msg.value.sub(masterValue);\r\n    masterWallet.transfer(masterValue);\r\n    slaveWallet.transfer(slaveValue);\r\n    mintTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function mintTokens(address to, uint weiInvested) internal {\r\n    uint stageIndex = currentStage();\r\n    Stage storage stage = stages[stageIndex];\r\n    uint tokens = weiInvested.mul(stage.price);\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n    totalTokensMinted = totalTokensMinted.add(tokens);\r\n    totalInvested = totalInvested.add(weiInvested);\r\n    stage.invested = stage.invested.add(weiInvested);\r\n    if(stage.invested >= stage.hardcap) {\r\n      stage.closed = now;\r\n    }\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n  \r\n  function retrieveTokens(address anotherToken, address to) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\ncontract Presale is CommonSale {\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function setMainsale(address newMainsale) public onlyOwner {\r\n    mainsale = Mainsale(newMainsale);\r\n  }\r\n\r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    token.setSaleAgent(mainsale);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Mainsale is CommonSale {\r\n\r\n  address public foundersTokensWallet;\r\n  \r\n  address public bountyTokensWallet;\r\n  \r\n  uint public foundersTokensPercent;\r\n  \r\n  uint public bountyTokensPercent;\r\n  \r\n  uint public lockPeriod;\r\n\r\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\r\n    lockPeriod = newLockPeriod;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\r\n    uint mintedTokens = token.totalSupply();\r\n    uint totalSupply = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\r\n    uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\r\n    uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\r\n    token.mint(this, foundersTokens);\r\n    token.lock(foundersTokensWallet, lockPeriod * 1 days);\r\n    token.transfer(foundersTokensWallet, foundersTokens);\r\n    token.mint(this, bountyTokens);\r\n    token.transfer(bountyTokensWallet, bountyTokens);\r\n    totalTokensMinted = totalTokensMinted.add(foundersTokens).add(bountyTokens);\r\n    token.finishMinting();\r\n  }\r\n\r\n}\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  VestarinToken public token; \r\n\r\n  Presale public presale;\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function deploy() public onlyOwner {\r\n    owner = 0x95EA6A4ec9F80436854702e5F05d238f27166A03;\r\n\r\n    token = new VestarinToken();\r\n\r\n    presale = new Presale();\r\n\r\n    presale.setToken(token);\r\n    presale.addStage(5000,3000);\r\n    presale.setMasterWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\r\n    presale.setSlaveWallet(0x070EcC35a3212D76ad443d529216a452eAA35E3D);\r\n    presale.setSlaveWalletPercent(30);\r\n    presale.setStart(1517317200);\r\n    presale.setPeriod(30);\r\n    presale.setMinPrice(100000000000000000);\r\n    token.setSaleAgent(presale);\t\r\n\r\n    mainsale = new Mainsale();\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.addStage(5000,2000);\r\n    mainsale.addStage(5000,1800);\r\n    mainsale.addStage(10000,1700);\r\n    mainsale.addStage(20000,1600);\r\n    mainsale.addStage(20000,1500);\r\n    mainsale.addStage(40000,1300);\r\n    mainsale.setMasterWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\r\n    mainsale.setSlaveWallet(0x070EcC35a3212D76ad443d529216a452eAA35E3D);\r\n    mainsale.setSlaveWalletPercent(30);\r\n    mainsale.setFoundersTokensWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\r\n    mainsale.setBountyTokensWallet(0x95EA6A4ec9F80436854702e5F05d238f27166A03);\r\n    mainsale.setStart(1525352400);\r\n    mainsale.setPeriod(30);\r\n    mainsale.setLockPeriod(90);\r\n    mainsale.setMinPrice(100000000000000000);\r\n    mainsale.setFoundersTokensPercent(13);\r\n    mainsale.setBountyTokensPercent(5);\r\n\r\n    presale.setMainsale(mainsale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Configurator","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21f916f3831a80829dce4073935d401d7bf7070ea70ccd3b48c2f1ad1e06a0ce"}]}