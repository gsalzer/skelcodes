{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract AbstractDatabase\r\n{\r\n    function() public payable;\r\n    function ChangeOwner(address new_owner) public;\r\n    function ChangeOwner2(address new_owner) public;\r\n    function Store(address user, uint256 category, uint256 slot, bytes32 data) public;\r\n    function Load(address user, uint256 category, uint256 index) public view returns (bytes32);\r\n    function TransferFunds(address target, uint256 transfer_amount) public;\r\n}\r\n\r\ncontract AbstractGameHidden\r\n{\r\n    function CalculateFinalDistance(bytes32 raw0, bytes32 raw1, bytes32 raw2, bytes32 raw3) pure public returns (int64, int64, uint64);\r\n}\r\n\r\nlibrary CompetitionScoreTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct CompetitionScore\r\n    {\r\n        address m_Owner; // 0\r\n        uint64 m_Distance; // 20\r\n        uint32 m_RocketId; // 28\r\n    }\r\n\r\n    function SerializeCompetitionScore(CompetitionScore score) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteAddress(0, score.m_Owner);\r\n        data.WriteUint64(20, score.m_Distance);\r\n        data.WriteUint32(28, score.m_RocketId);\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeCompetitionScore(bytes32 raw) internal pure returns (CompetitionScore)\r\n    {\r\n        CompetitionScore memory score;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        score.m_Owner = data.ReadAddress(0);\r\n        score.m_Distance = data.ReadUint64(20);\r\n        score.m_RocketId = data.ReadUint32(28);\r\n\r\n        return score;\r\n    }\r\n}\r\n\r\ncontract Game\r\n{\r\n    using GlobalTypes for GlobalTypes.Global;\r\n    using MarketTypes for MarketTypes.MarketListing;\r\n    using MissionParametersTypes for MissionParametersTypes.MissionParameters;\r\n    using GameCommon for GameCommon.LaunchRocketStackFrame;\r\n\r\n    address public m_Owner;\r\n    AbstractDatabase public m_Database;\r\n    AbstractGameHidden public m_GameHidden;\r\n    bool public m_Paused;\r\n\r\n    uint256 constant GlobalCategory = 0;\r\n    uint256 constant RocketCategory = 1;\r\n    uint256 constant OwnershipCategory = 2;\r\n    uint256 constant InventoryCategory = 3;\r\n    uint256 constant MarketCategory = 4;\r\n    uint256 constant ProfitFundsCategory = 5;\r\n    uint256 constant CompetitionFundsCategory = 6;\r\n    uint256 constant MissionParametersCategory = 7;\r\n    uint256 constant CompetitionScoresCategory = 8;\r\n    uint256 constant WithdrawalFundsCategory = 9;\r\n    uint256 constant ReferralCategory = 10;\r\n    uint256 constant RocketStockCategory = 11;\r\n    uint256 constant RocketStockInitializedCategory = 12;\r\n\r\n    address constant NullAddress = 0;\r\n    uint256 constant MaxCompetitionScores = 10;\r\n\r\n    mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets;\r\n\r\n    modifier OnlyOwner()\r\n    {\r\n        require(msg.sender == m_Owner);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier NotWhilePaused()\r\n    {\r\n        require(m_Paused == false);\r\n\r\n        _;\r\n    }\r\n\r\n    function Game() public\r\n    {\r\n        m_Owner = msg.sender;\r\n        m_Paused = true;\r\n    }\r\n\r\n    event BuyStockRocketEvent(address indexed buyer, uint32 stock_id, uint32 rocket_id, address referrer);\r\n    event PlaceRocketForSaleEvent(address indexed seller, uint32 rocket_id, uint80 price);\r\n    event RemoveRocketForSaleEvent(address indexed seller, uint32 rocket_id);\r\n    event BuyRocketForSaleEvent(address indexed buyer, address indexed seller, uint32 rocket_id);\r\n    event LaunchRocketEvent(address indexed launcher, uint32 competition_id, int64 leo_displacement, int64 planet_displacement);\r\n    event StartCompetitionEvent(uint32 competition_id);\r\n    event FinishCompetitionEvent(uint32 competition_id);\r\n\r\n    function ChangeOwner(address new_owner) public OnlyOwner()\r\n    {\r\n        m_Owner = new_owner;\r\n    }\r\n\r\n    function ChangeDatabase(address db) public OnlyOwner()\r\n    {\r\n        m_Database = AbstractDatabase(db);\r\n    }\r\n\r\n    function ChangeGameHidden(address hidden) public OnlyOwner()\r\n    {\r\n        m_GameHidden = AbstractGameHidden(hidden);\r\n    }\r\n\r\n    function Unpause() public OnlyOwner()\r\n    {\r\n        m_Paused = false;\r\n    }\r\n\r\n    function Pause() public OnlyOwner()\r\n    {\r\n        require(m_Paused == false);\r\n\r\n        m_Paused = true;\r\n    }\r\n\r\n    function IsPaused() public view returns (bool)\r\n    {\r\n        return m_Paused;\r\n    }\r\n\r\n    // 1 write\r\n    function WithdrawProfitFunds(uint256 withdraw_amount, address beneficiary) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        uint256 profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n\r\n        require(withdraw_amount > 0);\r\n        require(withdraw_amount <= profit_funds);\r\n        require(beneficiary != address(0));\r\n        require(beneficiary != address(this));\r\n        require(beneficiary != address(m_Database));\r\n\r\n        profit_funds -= withdraw_amount;\r\n\r\n        m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(profit_funds));\r\n\r\n        m_Database.TransferFunds(beneficiary, withdraw_amount);\r\n    }\r\n\r\n    // 1 write\r\n    function WithdrawWinnings(uint256 withdraw_amount) public NotWhilePaused()\r\n    {\r\n        require(withdraw_amount > 0);\r\n\r\n        uint256 withdrawal_funds = uint256(m_Database.Load(msg.sender, WithdrawalFundsCategory, 0));\r\n        require(withdraw_amount <= withdrawal_funds);\r\n\r\n        withdrawal_funds -= withdraw_amount;\r\n\r\n        m_Database.Store(msg.sender, WithdrawalFundsCategory, 0, bytes32(withdrawal_funds));\r\n\r\n        m_Database.TransferFunds(msg.sender, withdraw_amount);\r\n    }\r\n\r\n    function GetRocket(uint32 rocket_id) view public returns (bool is_valid, uint32 top_speed, uint32 thrust, uint32 weight, uint32 fuel_capacity, uint16 stock_id, uint64 max_distance, bool is_for_sale, address owner)\r\n    {\r\n        RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n\r\n        is_valid = rocket.m_Version >= 1;\r\n        is_for_sale = rocket.m_IsForSale == 1;\r\n        top_speed = rocket.m_TopSpeed;\r\n        thrust = rocket.m_Thrust;\r\n        weight = rocket.m_Weight;\r\n        fuel_capacity = rocket.m_FuelCapacity;\r\n        stock_id = rocket.m_StockId;\r\n        max_distance = rocket.m_MaxDistance;\r\n\r\n        owner = GetRocketOwner(rocket_id);\r\n    }\r\n\r\n    function GetWithdrawalFunds(address target) view public NotWhilePaused() returns (uint256 funds)\r\n    {\r\n        funds = uint256(m_Database.Load(target, WithdrawalFundsCategory, 0));\r\n    }\r\n\r\n    function GetProfitFunds() view public OnlyOwner() returns (uint256 funds)\r\n    {\r\n        uint256 profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n        return profit_funds;\r\n    }\r\n\r\n    function GetCompetitionFunds(uint32 competition_id) view public returns (uint256 funds)\r\n    {\r\n        return uint256(m_Database.Load(NullAddress, CompetitionFundsCategory, competition_id));\r\n    }\r\n\r\n    function GetRocketOwner(uint32 rocket_id) view internal returns (address owner)\r\n    {\r\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n        owner = ownership.m_Owner;\r\n    }\r\n\r\n    function GetAuction(uint32 rocket_id) view public returns (bool is_for_sale, address owner, uint80 price)\r\n    {\r\n        RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n        is_for_sale = rocket.m_IsForSale == 1;\r\n\r\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n        owner = ownership.m_Owner;\r\n\r\n        MarketTypes.MarketListing memory listing = MarketTypes.DeserializeMarketListing(m_Database.Load(NullAddress, MarketCategory, rocket_id));\r\n        price = listing.m_Price;\r\n    }\r\n\r\n    function GetInventoryCount(address target) view public returns (uint256)\r\n    {\r\n        require(target != address(0));\r\n\r\n        uint256 inventory_count = uint256(m_Database.Load(target, InventoryCategory, 0));\r\n\r\n        return inventory_count;\r\n    }\r\n\r\n    function GetInventory(address target, uint256 start_index) view public returns (uint32[8] rocket_ids)\r\n    {\r\n        require(target != address(0));\r\n\r\n        uint256 inventory_count = GetInventoryCount(target);\r\n\r\n        uint256 end = start_index + 8;\r\n        if (end > inventory_count)\r\n            end = inventory_count;\r\n\r\n        for (uint256 i = start_index; i < end; i++)\r\n        {\r\n            rocket_ids[i - start_index] = uint32(uint256(m_Database.Load(target, InventoryCategory, i + 1)));\r\n        }\r\n    }\r\n\r\n    // 1 write\r\n    function AddRocket(uint32 stock_id, uint64 cost, uint32 min_top_speed, uint32 max_top_speed, uint32 min_thrust, uint32 max_thrust, uint32 min_weight, uint32 max_weight, uint32 min_fuel_capacity, uint32 max_fuel_capacity, uint64 distance, uint32 max_stock) OnlyOwner() public\r\n    {\r\n        m_InitialRockets[stock_id] = RocketTypes.StockRocket({\r\n            m_IsValid: true,\r\n            m_Cost: cost,\r\n            m_MinTopSpeed: min_top_speed,\r\n            m_MaxTopSpeed: max_top_speed,\r\n            m_MinThrust: min_thrust,\r\n            m_MaxThrust: max_thrust,\r\n            m_MinWeight: min_weight,\r\n            m_MaxWeight: max_weight,\r\n            m_MinFuelCapacity: min_fuel_capacity,\r\n            m_MaxFuelCapacity: max_fuel_capacity,\r\n            m_Distance: distance\r\n        });\r\n\r\n        min_top_speed = uint32(m_Database.Load(NullAddress, RocketStockInitializedCategory, stock_id));\r\n\r\n        if (min_top_speed == 0)\r\n        {\r\n            m_Database.Store(NullAddress, RocketStockCategory, stock_id, bytes32(max_stock));\r\n            m_Database.Store(NullAddress, RocketStockInitializedCategory, stock_id, bytes32(1));\r\n        }\r\n    }\r\n\r\n    function GetRocketStock(uint16 stock_id) public view returns (uint32)\r\n    {\r\n        return uint32(m_Database.Load(NullAddress, RocketStockCategory, stock_id));\r\n    }\r\n\r\n    // 6 writes\r\n    function BuyStockRocket(uint16 stock_id, address referrer) payable NotWhilePaused() public\r\n    {\r\n        //require(referrer != msg.sender);\r\n        uint32 stock = GetRocketStock(stock_id);\r\n\r\n        require(stock > 0);\r\n\r\n        GiveRocketInternal(stock_id, msg.sender, true, referrer);\r\n\r\n        stock--;\r\n\r\n        m_Database.Store(NullAddress, RocketStockCategory, stock_id, bytes32(stock));\r\n    }\r\n\r\n    function GiveReferralRocket(uint16 stock_id, address target) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        uint256 already_received = uint256(m_Database.Load(target, ReferralCategory, 0));\r\n        require(already_received == 0);\r\n\r\n        already_received = 1;\r\n        m_Database.Store(target, ReferralCategory, 0, bytes32(already_received));\r\n\r\n        GiveRocketInternal(stock_id, target, false, address(0));\r\n    }\r\n\r\n    function GiveRocketInternal(uint16 stock_id, address target, bool buying, address referrer) internal\r\n    {\r\n        RocketTypes.StockRocket storage stock_rocket = m_InitialRockets[stock_id];\r\n\r\n        require(stock_rocket.m_IsValid);\r\n        if (buying)\r\n        {\r\n            require(msg.value == stock_rocket.m_Cost);\r\n        }\r\n\r\n        GlobalTypes.Global memory global = GlobalTypes.DeserializeGlobal(m_Database.Load(NullAddress, GlobalCategory, 0));\r\n\r\n        uint256 profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n\r\n        global.m_LastRocketId++;\r\n        uint32 next_rocket_id = global.m_LastRocketId;\r\n\r\n        uint256 inventory_count = GetInventoryCount(target);\r\n        inventory_count++;\r\n\r\n        RocketTypes.Rocket memory rocket;\r\n        rocket.m_Version = 1;\r\n        rocket.m_StockId = stock_id;\r\n        rocket.m_IsForSale = 0;\r\n\r\n        bytes32 rand = sha256(block.timestamp, block.coinbase, global.m_LastRocketId);\r\n\r\n        // Fix LerpExtra calls in FinishCompetition if anything is added here\r\n        rocket.m_TopSpeed = uint32(Lerp(stock_rocket.m_MinTopSpeed, stock_rocket.m_MaxTopSpeed, rand[0]));\r\n        rocket.m_Thrust = uint32(Lerp(stock_rocket.m_MinThrust, stock_rocket.m_MaxThrust, rand[1]));\r\n        rocket.m_Weight = uint32(Lerp(stock_rocket.m_MinWeight, stock_rocket.m_MaxWeight, rand[2]));\r\n        rocket.m_FuelCapacity = uint32(Lerp(stock_rocket.m_MinFuelCapacity, stock_rocket.m_MaxFuelCapacity, rand[3]));\r\n        rocket.m_MaxDistance = uint64(stock_rocket.m_Distance);\r\n        //\r\n\r\n        OwnershipTypes.Ownership memory ownership;\r\n        ownership.m_Owner = target;\r\n        ownership.m_OwnerInventoryIndex = uint32(inventory_count) - 1;\r\n\r\n        profit_funds += msg.value;\r\n\r\n        m_Database.Store(target, InventoryCategory, inventory_count, bytes32(next_rocket_id));\r\n        m_Database.Store(target, InventoryCategory, 0, bytes32(inventory_count));\r\n        m_Database.Store(NullAddress, RocketCategory, next_rocket_id, RocketTypes.SerializeRocket(rocket));\r\n        m_Database.Store(NullAddress, OwnershipCategory, next_rocket_id, OwnershipTypes.SerializeOwnership(ownership));\r\n        m_Database.Store(NullAddress, GlobalCategory, 0, GlobalTypes.SerializeGlobal(global));\r\n        if (buying)\r\n        {\r\n            m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(profit_funds));\r\n\r\n            m_Database.transfer(msg.value);\r\n        }\r\n        BuyStockRocketEvent(target, stock_id, next_rocket_id, referrer);\r\n    }\r\n\r\n    // 2 writes\r\n    function PlaceRocketForSale(uint32 rocket_id, uint80 price) NotWhilePaused() public\r\n    {\r\n        RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n        require(rocket.m_Version > 0);\r\n\r\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n        require(ownership.m_Owner == msg.sender);\r\n\r\n        require(rocket.m_IsForSale == 0);\r\n\r\n        MarketTypes.MarketListing memory listing;\r\n        listing.m_Price = price;\r\n\r\n        rocket.m_IsForSale = 1;\r\n\r\n        m_Database.Store(NullAddress, RocketCategory, rocket_id, RocketTypes.SerializeRocket(rocket));\r\n        m_Database.Store(NullAddress, MarketCategory, rocket_id, MarketTypes.SerializeMarketListing(listing));\r\n\r\n        PlaceRocketForSaleEvent(msg.sender, rocket_id, price);\r\n    }\r\n\r\n    // 1 write\r\n    function RemoveRocketForSale(uint32 rocket_id) NotWhilePaused() public\r\n    {\r\n        RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n        require(rocket.m_Version > 0);\r\n        require(rocket.m_IsForSale == 1);\r\n\r\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n        require(ownership.m_Owner == msg.sender);\r\n\r\n        rocket.m_IsForSale = 0;\r\n\r\n        m_Database.Store(NullAddress, RocketCategory, rocket_id, RocketTypes.SerializeRocket(rocket));\r\n\r\n        RemoveRocketForSaleEvent(msg.sender, rocket_id);\r\n    }\r\n\r\n    // 9-11 writes\r\n    function BuyRocketForSale(uint32 rocket_id) payable NotWhilePaused() public\r\n    {\r\n        RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n        require(rocket.m_Version > 0);\r\n\r\n        require(rocket.m_IsForSale == 1);\r\n\r\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n        require(ownership.m_Owner != msg.sender);\r\n\r\n        MarketTypes.MarketListing memory listing = MarketTypes.DeserializeMarketListing(m_Database.Load(NullAddress, MarketCategory, rocket_id));\r\n        require(msg.value == listing.m_Price);\r\n\r\n        uint256 seller_inventory_count = uint256(m_Database.Load(ownership.m_Owner, InventoryCategory, 0));\r\n        uint256 buyer_inventory_count = uint256(m_Database.Load(msg.sender, InventoryCategory, 0));\r\n\r\n        uint256 profit_funds_or_last_rocket_id;\r\n        uint256 wei_for_profit_funds;\r\n        uint256 buyer_price_or_wei_for_seller = uint256(listing.m_Price);\r\n\r\n        address beneficiary = ownership.m_Owner;\r\n        ownership.m_Owner = msg.sender;\r\n        rocket.m_IsForSale = 0;\r\n\r\n        listing.m_Price = 0;\r\n\r\n        buyer_inventory_count++;\r\n        profit_funds_or_last_rocket_id = uint256(m_Database.Load(beneficiary, InventoryCategory, seller_inventory_count));\r\n\r\n        m_Database.Store(beneficiary, InventoryCategory, seller_inventory_count, bytes32(0));\r\n\r\n        if (ownership.m_OwnerInventoryIndex + 1 != seller_inventory_count)\r\n        {\r\n            m_Database.Store(beneficiary, InventoryCategory, ownership.m_OwnerInventoryIndex + 1, bytes32(profit_funds_or_last_rocket_id));\r\n\r\n            OwnershipTypes.Ownership memory last_rocket_ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, profit_funds_or_last_rocket_id));\r\n            last_rocket_ownership.m_OwnerInventoryIndex = uint32(ownership.m_OwnerInventoryIndex);\r\n\r\n            m_Database.Store(NullAddress, OwnershipCategory, profit_funds_or_last_rocket_id, OwnershipTypes.SerializeOwnership(last_rocket_ownership));\r\n        }\r\n\r\n        ownership.m_OwnerInventoryIndex = uint32(buyer_inventory_count);\r\n        m_Database.Store(msg.sender, InventoryCategory, buyer_inventory_count, bytes32(rocket_id));\r\n\r\n        wei_for_profit_funds = buyer_price_or_wei_for_seller / 20;\r\n        buyer_price_or_wei_for_seller = buyer_price_or_wei_for_seller - wei_for_profit_funds;\r\n\r\n        profit_funds_or_last_rocket_id = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n        profit_funds_or_last_rocket_id += wei_for_profit_funds;\r\n\r\n        seller_inventory_count--;\r\n        m_Database.Store(msg.sender, InventoryCategory, 0, bytes32(buyer_inventory_count));\r\n        m_Database.Store(beneficiary, InventoryCategory, 0, bytes32(seller_inventory_count));\r\n\r\n        m_Database.Store(NullAddress, OwnershipCategory, rocket_id, OwnershipTypes.SerializeOwnership(ownership));\r\n        m_Database.Store(NullAddress, RocketCategory, rocket_id, RocketTypes.SerializeRocket(rocket));\r\n        m_Database.Store(NullAddress, MarketCategory, rocket_id, MarketTypes.SerializeMarketListing(listing));\r\n        m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(profit_funds_or_last_rocket_id));\r\n\r\n        buyer_price_or_wei_for_seller += uint256(m_Database.Load(beneficiary, WithdrawalFundsCategory, 0)); // Reuse variable\r\n        m_Database.Store(beneficiary, WithdrawalFundsCategory, 0, bytes32(buyer_price_or_wei_for_seller));\r\n\r\n        m_Database.transfer(msg.value);\r\n        BuyRocketForSaleEvent(msg.sender, beneficiary, rocket_id);\r\n    }\r\n\r\n    // 3 writes + 1-12 writes = 4-15 writes\r\n    function LaunchRocket(uint32 competition_id, uint32 rocket_id, uint32 launch_thrust, uint32 fuel_to_use, uint32 fuel_allocation_for_launch, uint32 stabilizer_setting) payable NotWhilePaused() public\r\n    {\r\n        GameCommon.LaunchRocketStackFrame memory stack;\r\n        stack.m_Rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, rocket_id));\r\n        stack.m_Mission =  MissionParametersTypes.DeserializeMissionParameters(m_Database.Load(NullAddress, MissionParametersCategory, competition_id));\r\n        stack.m_Ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipCategory, rocket_id));\r\n\r\n        require(stack.m_Mission.m_IsStarted == 1);\r\n        require(stack.m_Rocket.m_Version > 0);\r\n        require(stack.m_Rocket.m_IsForSale == 0);\r\n        require(msg.value == uint256(stack.m_Mission.m_LaunchCost));\r\n        require(stack.m_Ownership.m_Owner == msg.sender);\r\n        require(launch_thrust <= stack.m_Rocket.m_Thrust);\r\n\r\n        stack.m_MissionWindSpeed = stack.m_Mission.m_WindSpeed;\r\n        stack.m_MissionLaunchLocation = stack.m_Mission.m_LaunchLocation;\r\n        stack.m_MissionWeatherType = stack.m_Mission.m_WeatherType;\r\n        stack.m_MissionWeatherCoverage = stack.m_Mission.m_WeatherCoverage;\r\n        stack.m_MissionTargetDistance = stack.m_Mission.m_TargetDistance;\r\n        stack.m_DebugExtraDistance = stack.m_Mission.m_DebugExtraDistance;\r\n\r\n        stack.m_RocketTopSpeed = stack.m_Rocket.m_TopSpeed;\r\n        stack.m_RocketThrust = stack.m_Rocket.m_Thrust;\r\n        stack.m_RocketMass = stack.m_Rocket.m_Weight;\r\n        stack.m_RocketFuelCapacity = stack.m_Rocket.m_FuelCapacity;\r\n        stack.m_RocketMaxDistance = int64(stack.m_Rocket.m_MaxDistance);\r\n\r\n        stack.m_CompetitionId = competition_id;\r\n        stack.m_RocketId = rocket_id;\r\n        stack.m_LaunchThrust = launch_thrust * 100 / stack.m_Rocket.m_Thrust;\r\n        stack.m_FuelToUse = fuel_to_use;\r\n        stack.m_FuelAllocationForLaunch = fuel_allocation_for_launch;\r\n        stack.m_StabilizerSetting = stabilizer_setting;\r\n        stack.m_Launcher = msg.sender;\r\n\r\n        LaunchRocketInternal(stack);\r\n    }\r\n\r\n    // 3 writes\r\n    function LaunchRocketInternal(GameCommon.LaunchRocketStackFrame memory stack) internal\r\n    {\r\n        stack.SerializeLaunchRocketStackFrame();\r\n\r\n        (stack.m_DisplacementFromLowEarthOrbit, stack.m_DisplacementFromPlanet, stack.m_FinalDistance) = m_GameHidden.CalculateFinalDistance(\r\n            stack.m_Raw0,\r\n            stack.m_Raw1,\r\n            stack.m_Raw2,\r\n            stack.m_Raw3\r\n        );\r\n\r\n        AddScore(stack);\r\n\r\n        stack.m_ProfitFunds = msg.value / 10;\r\n        stack.m_CompetitionFunds = msg.value - stack.m_ProfitFunds;\r\n\r\n        stack.m_ProfitFunds += uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n        stack.m_CompetitionFunds += uint256(m_Database.Load(NullAddress, CompetitionFundsCategory, stack.m_CompetitionId));\r\n\r\n        m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(stack.m_ProfitFunds));\r\n        m_Database.Store(NullAddress, CompetitionFundsCategory, stack.m_CompetitionId, bytes32(stack.m_CompetitionFunds));\r\n        m_Database.Store(NullAddress, MissionParametersCategory, stack.m_CompetitionId, stack.m_Mission.SerializeMissionParameters());\r\n\r\n        m_Database.transfer(msg.value);\r\n        LaunchRocketEvent(msg.sender, stack.m_CompetitionId, stack.m_DisplacementFromLowEarthOrbit, stack.m_DisplacementFromPlanet);\r\n    }\r\n\r\n    // 0-1 writes\r\n    function AddScore(GameCommon.LaunchRocketStackFrame memory stack) internal\r\n    {\r\n        CompetitionScoreTypes.CompetitionScore memory new_score;\r\n        new_score.m_Owner = stack.m_Launcher;\r\n        new_score.m_Distance = stack.m_FinalDistance;\r\n        new_score.m_RocketId = stack.m_RocketId;\r\n\r\n        CompetitionScoreTypes.CompetitionScore memory score;\r\n\r\n        for (uint32 i = 0; i < stack.m_Mission.m_ValidCompetitionScores; i++)\r\n        {\r\n            // Check if the new score is better than the score that this user already has (if they are in the top x)\r\n            score = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(stack.m_CompetitionId, CompetitionScoresCategory, i));\r\n\r\n            if (score.m_Owner == stack.m_Launcher)\r\n            {\r\n                if (stack.m_FinalDistance < score.m_Distance)\r\n                {\r\n                    m_Database.Store(stack.m_CompetitionId, CompetitionScoresCategory, i, CompetitionScoreTypes.SerializeCompetitionScore(new_score));\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (stack.m_Mission.m_ValidCompetitionScores < MaxCompetitionScores)\r\n        {\r\n            // Not enough scores, so this one is automatically one of the best\r\n            m_Database.Store(stack.m_CompetitionId, CompetitionScoresCategory, stack.m_Mission.m_ValidCompetitionScores, CompetitionScoreTypes.SerializeCompetitionScore(new_score));\r\n\r\n            stack.m_Mission.m_ValidCompetitionScores++;\r\n            return;\r\n        }\r\n\r\n        uint64 highest_distance = 0;\r\n        uint32 highest_index = 0xFFFFFFFF;\r\n        for (i = 0; i < stack.m_Mission.m_ValidCompetitionScores; i++)\r\n        {\r\n            score = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(stack.m_CompetitionId, CompetitionScoresCategory, i));\r\n\r\n            if (score.m_Distance > highest_distance)\r\n            {\r\n                highest_distance = score.m_Distance;\r\n                highest_index = i;\r\n            }\r\n        }\r\n\r\n        if (highest_index != 0xFFFFFFFF)\r\n        {\r\n            score = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(stack.m_CompetitionId, CompetitionScoresCategory, highest_index));\r\n\r\n            // Check if the new score is better than the highest score\r\n            if (stack.m_FinalDistance < score.m_Distance)\r\n            {\r\n                m_Database.Store(stack.m_CompetitionId, CompetitionScoresCategory, highest_index, CompetitionScoreTypes.SerializeCompetitionScore(new_score));\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function GetCompetitionInfo(uint32 competition_id) view NotWhilePaused() public returns (bool in_progress, uint8 wind_speed, uint8 launch_location, uint8 weather_type, uint8 weather_coverage, uint80 launch_cost, uint32 target_distance)\r\n    {\r\n        MissionParametersTypes.MissionParameters memory parameters = MissionParametersTypes.DeserializeMissionParameters(m_Database.Load(NullAddress, MissionParametersCategory, competition_id));\r\n\r\n        in_progress = parameters.m_IsStarted == 1;\r\n        wind_speed = parameters.m_WindSpeed;\r\n        launch_location = parameters.m_LaunchLocation;\r\n        weather_type = parameters.m_WeatherType;\r\n        weather_coverage = parameters.m_WeatherCoverage;\r\n        launch_cost = parameters.m_LaunchCost;\r\n        target_distance = parameters.m_TargetDistance;\r\n    }\r\n\r\n    function SetDebugExtra(uint32 competition_id, uint8 extra) public OnlyOwner()\r\n    {\r\n        MissionParametersTypes.MissionParameters memory parameters = MissionParametersTypes.DeserializeMissionParameters(m_Database.Load(NullAddress, MissionParametersCategory, competition_id));\r\n\r\n        parameters.m_DebugExtraDistance = extra;\r\n\r\n        m_Database.Store(NullAddress, MissionParametersCategory, competition_id, parameters.SerializeMissionParameters());\r\n    }\r\n\r\n    // 2 writes\r\n    function StartCompetition(uint8 wind_speed, uint8 launch_location, uint8 weather_type, uint8 weather_coverage, uint80 launch_cost, uint32 target_distance) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        GlobalTypes.Global memory global = GlobalTypes.DeserializeGlobal(m_Database.Load(NullAddress, GlobalCategory, 0));\r\n\r\n        MissionParametersTypes.MissionParameters memory parameters;\r\n        parameters.m_WindSpeed = wind_speed;\r\n        parameters.m_LaunchLocation = launch_location;\r\n        parameters.m_WeatherType = weather_type;\r\n        parameters.m_WeatherCoverage = weather_coverage;\r\n        parameters.m_LaunchCost = launch_cost;\r\n        parameters.m_TargetDistance = target_distance;\r\n        parameters.m_IsStarted = 1;\r\n\r\n        global.m_CompetitionNumber++;\r\n\r\n        uint32 competition_id = global.m_CompetitionNumber;\r\n\r\n        m_Database.Store(NullAddress, MissionParametersCategory, competition_id, parameters.SerializeMissionParameters());\r\n        m_Database.Store(NullAddress, GlobalCategory, 0, GlobalTypes.SerializeGlobal(global));\r\n\r\n        StartCompetitionEvent(competition_id);\r\n    }\r\n\r\n    function GetCompetitionResults(uint32 competition_id, bool first_half) public view returns (address[], uint64[])\r\n    {\r\n        CompetitionScoreTypes.CompetitionScore memory score;\r\n\r\n        uint256 offset = (first_half == true ? 0 : 5);\r\n        address[] memory winners = new address[](5);\r\n        uint64[] memory distances = new uint64[](5);\r\n\r\n        for (uint32 i = 0; i < 5; i++)\r\n        {\r\n            score = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(competition_id, CompetitionScoresCategory, offset + i));\r\n            winners[i] = score.m_Owner;\r\n            distances[i] = score.m_Distance;\r\n        }\r\n\r\n        return (winners, distances);\r\n    }\r\n\r\n    function SortCompetitionScores(uint32 competition_id) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        CompetitionScoreTypes.CompetitionScore[] memory scores;\r\n        MissionParametersTypes.MissionParameters memory parameters;\r\n\r\n        (scores, parameters) = MakeAndSortCompetitionScores(competition_id);\r\n\r\n        for (uint256 i = 0; i < parameters.m_ValidCompetitionScores; i++)\r\n        {\r\n            m_Database.Store(competition_id, CompetitionScoresCategory, i, CompetitionScoreTypes.SerializeCompetitionScore(scores[i]));\r\n        }\r\n    }\r\n\r\n    function MakeAndSortCompetitionScores(uint32 competition_id) internal view returns (CompetitionScoreTypes.CompetitionScore[] memory scores, MissionParametersTypes.MissionParameters memory parameters)\r\n    {\r\n        parameters = MissionParametersTypes.DeserializeMissionParameters(m_Database.Load(NullAddress, MissionParametersCategory, competition_id));\r\n        scores = new CompetitionScoreTypes.CompetitionScore[](MaxCompetitionScores + 1);\r\n\r\n        for (uint256 i = 0; i < parameters.m_ValidCompetitionScores; i++)\r\n        {\r\n            scores[i] = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(competition_id, CompetitionScoresCategory, i));\r\n        }\r\n\r\n        BubbleSort(scores, parameters.m_ValidCompetitionScores);\r\n    }\r\n\r\n    // 22 writes (full competition)\r\n    function FinishCompetition(uint32 competition_id) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        CompetitionScoreTypes.CompetitionScore[] memory scores;\r\n        MissionParametersTypes.MissionParameters memory parameters;\r\n\r\n        (scores, parameters) = MakeAndSortCompetitionScores(competition_id);\r\n\r\n        require(parameters.m_IsStarted == 1);\r\n\r\n        parameters.m_IsStarted = 0;\r\n\r\n        uint256 original_competition_funds = uint256(m_Database.Load(NullAddress, CompetitionFundsCategory, competition_id));\r\n        uint256 competition_funds_remaining = original_competition_funds;\r\n\r\n        for (uint256 i = 0; i < parameters.m_ValidCompetitionScores; i++)\r\n        {\r\n            RocketTypes.Rocket memory rocket = RocketTypes.DeserializeRocket(m_Database.Load(NullAddress, RocketCategory, scores[i].m_RocketId));\r\n            RocketTypes.StockRocket storage stock_rocket = m_InitialRockets[rocket.m_StockId];\r\n\r\n            // Fix Lerps in BuyStockRocket if anything is added here\r\n            // This will increase even if they change owners, which is fine\r\n            rocket.m_TopSpeed = uint32(LerpExtra(stock_rocket.m_MinTopSpeed, stock_rocket.m_MaxTopSpeed, rocket.m_TopSpeed, bytes1(10 - i)));\r\n            rocket.m_Thrust = uint32(LerpExtra(stock_rocket.m_MinThrust, stock_rocket.m_MaxThrust, rocket.m_Thrust, bytes1(10 - i)));\r\n            rocket.m_Weight = uint32(LerpLess(stock_rocket.m_MinWeight, stock_rocket.m_MaxWeight, rocket.m_Weight, bytes1(10 - i)));\r\n            rocket.m_FuelCapacity = uint32(LerpExtra(stock_rocket.m_MinFuelCapacity, stock_rocket.m_MaxFuelCapacity, rocket.m_FuelCapacity, bytes1(10 - i)));\r\n            //\r\n\r\n            m_Database.Store(NullAddress, RocketCategory, scores[i].m_RocketId, RocketTypes.SerializeRocket(rocket));\r\n\r\n            uint256 existing_funds = uint256(m_Database.Load(scores[i].m_Owner, WithdrawalFundsCategory, 0));\r\n\r\n            uint256 funds_won = original_competition_funds / (2 ** (i + 1));\r\n\r\n            if (funds_won > competition_funds_remaining)\r\n                funds_won = competition_funds_remaining;\r\n\r\n            existing_funds += funds_won;\r\n            competition_funds_remaining -= funds_won;\r\n\r\n            m_Database.Store(scores[i].m_Owner, WithdrawalFundsCategory, 0, bytes32(existing_funds));\r\n        }\r\n\r\n        if (competition_funds_remaining > 0)\r\n        {\r\n            scores[MaxCompetitionScores] = CompetitionScoreTypes.DeserializeCompetitionScore(m_Database.Load(competition_id, CompetitionScoresCategory, 0));\r\n            existing_funds = uint256(m_Database.Load(scores[MaxCompetitionScores].m_Owner, WithdrawalFundsCategory, 0));\r\n            existing_funds += competition_funds_remaining;\r\n            m_Database.Store(scores[MaxCompetitionScores].m_Owner, WithdrawalFundsCategory, 0, bytes32(existing_funds));\r\n        }\r\n\r\n        m_Database.Store(NullAddress, MissionParametersCategory, competition_id, parameters.SerializeMissionParameters());\r\n\r\n        FinishCompetitionEvent(competition_id);\r\n    }\r\n\r\n    function Lerp(uint256 min, uint256 max, bytes1 percent) internal pure returns(uint256)\r\n    {\r\n        uint256 real_percent = (uint256(percent) % 100);\r\n        return uint256(min + (real_percent * (max - min)) / 100);\r\n    }\r\n\r\n    function LerpExtra(uint256 min, uint256 max, uint256 current, bytes1 total_extra_percent) internal pure returns (uint256)\r\n    {\r\n        current += Lerp(min, max, total_extra_percent) - min;\r\n        if (current < min || current > max)\r\n            current = max;\r\n        return current;\r\n    }\r\n\r\n    function LerpLess(uint256 min, uint256 max, uint256 current, bytes1 total_less_percent) internal pure returns (uint256)\r\n    {\r\n        current -= Lerp(min, max, total_less_percent) - min;\r\n        if (current < min || current > max)\r\n            current = min;\r\n        return current;\r\n    }\r\n\r\n    function BubbleSort(CompetitionScoreTypes.CompetitionScore[] memory scores, uint32 length) internal pure\r\n    {\r\n        uint32 n = length;\r\n        while (true)\r\n        {\r\n            bool swapped = false;\r\n            for (uint32 i = 1; i < n; i++)\r\n            {\r\n                if (scores[i - 1].m_Distance > scores[i].m_Distance)\r\n                {\r\n                    scores[MaxCompetitionScores] = scores[i - 1];\r\n                    scores[i - 1] = scores[i];\r\n                    scores[i] = scores[MaxCompetitionScores];\r\n                    swapped = true;\r\n                }\r\n            }\r\n            n--;\r\n            if (!swapped)\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary GameCommon\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct LaunchRocketStackFrame\r\n    {\r\n        int64 m_RocketTopSpeed; // 0\r\n        int64 m_RocketThrust; // 8\r\n        int64 m_RocketMass; // 16\r\n        int64 m_RocketFuelCapacity; // 24\r\n\r\n        int64 m_RocketMaxDistance; // 0\r\n        int64 m_MissionWindSpeed; // 8\r\n        int64 m_MissionLaunchLocation; // 16\r\n        int64 m_MissionWeatherType; // 24\r\n\r\n        int64 m_MissionWeatherCoverage; // 0\r\n        int64 m_MissionTargetDistance; // 8\r\n        int64 m_FuelToUse; // 16\r\n        int64 m_FuelAllocationForLaunch; // 24\r\n\r\n        int64 m_StabilizerSetting; // 0\r\n        int64 m_DebugExtraDistance; // 8\r\n        int64 m_LaunchThrust; // 16\r\n\r\n        RocketTypes.Rocket m_Rocket;\r\n        OwnershipTypes.Ownership m_Ownership;\r\n        MissionParametersTypes.MissionParameters m_Mission;\r\n\r\n        bytes32 m_Raw0;\r\n        bytes32 m_Raw1;\r\n        bytes32 m_Raw2;\r\n        bytes32 m_Raw3;\r\n\r\n        uint32 m_CompetitionId;\r\n        uint32 m_RocketId;\r\n        int64 m_LowEarthOrbitPosition;\r\n        int64 m_DisplacementFromLowEarthOrbit;\r\n        int64 m_DisplacementFromPlanet;\r\n        address m_Launcher;\r\n        uint256 m_ProfitFunds;\r\n        uint256 m_CompetitionFunds;\r\n        uint64 m_FinalDistance;\r\n    }\r\n\r\n    function SerializeLaunchRocketStackFrame(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        SerializeRaw0(stack);\r\n        SerializeRaw1(stack);\r\n        SerializeRaw2(stack);\r\n        SerializeRaw3(stack);\r\n    }\r\n\r\n    function DeserializeLaunchRocketStackFrame(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        DeserializeRaw0(stack);\r\n        DeserializeRaw1(stack);\r\n        DeserializeRaw2(stack);\r\n        DeserializeRaw3(stack);\r\n    }\r\n\r\n    function SerializeRaw0(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint64(0, uint64(stack.m_RocketTopSpeed));\r\n        data.WriteUint64(8, uint64(stack.m_RocketThrust));\r\n        data.WriteUint64(16, uint64(stack.m_RocketMass));\r\n        data.WriteUint64(24, uint64(stack.m_RocketFuelCapacity));\r\n\r\n        stack.m_Raw0 = data.m_Raw;\r\n    }\r\n\r\n    function DeserializeRaw0(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = stack.m_Raw0;\r\n\r\n        stack.m_RocketTopSpeed = int64(data.ReadUint64(0));\r\n        stack.m_RocketThrust = int64(data.ReadUint64(8));\r\n        stack.m_RocketMass = int64(data.ReadUint64(16));\r\n        stack.m_RocketFuelCapacity = int64(data.ReadUint64(24));\r\n    }\r\n\r\n    function SerializeRaw1(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint64(0, uint64(stack.m_RocketMaxDistance));\r\n        data.WriteUint64(8, uint64(stack.m_MissionWindSpeed));\r\n        data.WriteUint64(16, uint64(stack.m_MissionLaunchLocation));\r\n        data.WriteUint64(24, uint64(stack.m_MissionWeatherType));\r\n\r\n        stack.m_Raw1 = data.m_Raw;\r\n    }\r\n\r\n    function DeserializeRaw1(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = stack.m_Raw1;\r\n\r\n        stack.m_RocketMaxDistance = int64(data.ReadUint64(0));\r\n        stack.m_MissionWindSpeed = int64(data.ReadUint64(8));\r\n        stack.m_MissionLaunchLocation = int64(data.ReadUint64(16));\r\n        stack.m_MissionWeatherType = int64(data.ReadUint64(24));\r\n    }\r\n\r\n    function SerializeRaw2(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint64(0, uint64(stack.m_MissionWeatherCoverage));\r\n        data.WriteUint64(8, uint64(stack.m_MissionTargetDistance));\r\n        data.WriteUint64(16, uint64(stack.m_FuelToUse));\r\n        data.WriteUint64(24, uint64(stack.m_FuelAllocationForLaunch));\r\n\r\n        stack.m_Raw2 = data.m_Raw;\r\n    }\r\n\r\n    function DeserializeRaw2(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = stack.m_Raw2;\r\n\r\n        stack.m_MissionWeatherCoverage = int64(data.ReadUint64(0));\r\n        stack.m_MissionTargetDistance = int64(data.ReadUint64(8));\r\n        stack.m_FuelToUse = int64(data.ReadUint64(16));\r\n        stack.m_FuelAllocationForLaunch = int64(data.ReadUint64(24));\r\n    }\r\n\r\n    function SerializeRaw3(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint64(0, uint64(stack.m_StabilizerSetting));\r\n        data.WriteUint64(8, uint64(stack.m_DebugExtraDistance));\r\n        data.WriteUint64(16, uint64(stack.m_LaunchThrust));\r\n\r\n        stack.m_Raw3 = data.m_Raw;\r\n    }\r\n\r\n    function DeserializeRaw3(LaunchRocketStackFrame memory stack) internal pure\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = stack.m_Raw3;\r\n\r\n        stack.m_StabilizerSetting = int64(data.ReadUint64(0));\r\n        stack.m_DebugExtraDistance = int64(data.ReadUint64(8));\r\n        stack.m_LaunchThrust = int64(data.ReadUint64(16));\r\n    }\r\n}\r\n\r\nlibrary GlobalTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct Global\r\n    {\r\n        uint32 m_LastRocketId; // 0\r\n        uint32 m_CompetitionNumber; // 4\r\n        uint8 m_Unused8; // 8\r\n        uint8 m_Unused9; // 9\r\n        uint8 m_Unused10; // 10\r\n        uint8 m_Unused11; // 11\r\n    }\r\n\r\n    function SerializeGlobal(Global global) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint32(0, global.m_LastRocketId);\r\n        data.WriteUint32(4, global.m_CompetitionNumber);\r\n        data.WriteUint8(8, global.m_Unused8);\r\n        data.WriteUint8(9, global.m_Unused9);\r\n        data.WriteUint8(10, global.m_Unused10);\r\n        data.WriteUint8(11, global.m_Unused11);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeGlobal(bytes32 raw) internal pure returns (Global)\r\n    {\r\n        Global memory global;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        global.m_LastRocketId = data.ReadUint32(0);\r\n        global.m_CompetitionNumber = data.ReadUint32(4);\r\n        global.m_Unused8 = data.ReadUint8(8);\r\n        global.m_Unused9 = data.ReadUint8(9);\r\n        global.m_Unused10 = data.ReadUint8(10);\r\n        global.m_Unused11 = data.ReadUint8(11);\r\n\r\n        return global;\r\n    }\r\n}\r\n\r\nlibrary MarketTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct MarketListing\r\n    {\r\n        uint80 m_Price; // 0\r\n    }\r\n\r\n    function SerializeMarketListing(MarketListing listing) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint80(0, listing.m_Price);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeMarketListing(bytes32 raw) internal pure returns (MarketListing)\r\n    {\r\n        MarketListing memory listing;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        listing.m_Price = data.ReadUint80(0);\r\n\r\n        return listing;\r\n    }\r\n}\r\n\r\nlibrary MissionParametersTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct MissionParameters\r\n    {\r\n        uint8 m_WindSpeed; // 0\r\n        uint8 m_LaunchLocation; // 1\r\n        uint8 m_WeatherType; // 2\r\n        uint8 m_WeatherCoverage; // 3\r\n        uint80 m_LaunchCost; // 4\r\n        uint8 m_IsStarted; // 14\r\n        uint32 m_TargetDistance; // 15\r\n        uint32 m_ValidCompetitionScores; // 19\r\n        uint8 m_DebugExtraDistance; // 23\r\n    }\r\n\r\n    function SerializeMissionParameters(MissionParameters mission) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint8(0, mission.m_WindSpeed);\r\n        data.WriteUint8(1, mission.m_LaunchLocation);\r\n        data.WriteUint8(2, mission.m_WeatherType);\r\n        data.WriteUint8(3, mission.m_WeatherCoverage);\r\n        data.WriteUint80(4, mission.m_LaunchCost);\r\n        data.WriteUint8(14, mission.m_IsStarted);\r\n        data.WriteUint32(15, mission.m_TargetDistance);\r\n        data.WriteUint32(19, mission.m_ValidCompetitionScores);\r\n        data.WriteUint8(23, mission.m_DebugExtraDistance);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeMissionParameters(bytes32 raw) internal pure returns (MissionParameters)\r\n    {\r\n        MissionParameters memory mission;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        mission.m_WindSpeed = data.ReadUint8(0);\r\n        mission.m_LaunchLocation = data.ReadUint8(1);\r\n        mission.m_WeatherType = data.ReadUint8(2);\r\n        mission.m_WeatherCoverage = data.ReadUint8(3);\r\n        mission.m_LaunchCost = data.ReadUint80(4);\r\n        mission.m_IsStarted = data.ReadUint8(14);\r\n        mission.m_TargetDistance = data.ReadUint32(15);\r\n        mission.m_ValidCompetitionScores = data.ReadUint32(19);\r\n        mission.m_DebugExtraDistance = data.ReadUint8(23);\r\n\r\n        return mission;\r\n    }\r\n}\r\n\r\nlibrary OwnershipTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct Ownership\r\n    {\r\n        address m_Owner; // 0\r\n        uint32 m_OwnerInventoryIndex; // 20\r\n    }\r\n\r\n    function SerializeOwnership(Ownership ownership) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteAddress(0, ownership.m_Owner);\r\n        data.WriteUint32(20, ownership.m_OwnerInventoryIndex);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeOwnership(bytes32 raw) internal pure returns (Ownership)\r\n    {\r\n        Ownership memory ownership;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        ownership.m_Owner = data.ReadAddress(0);\r\n        ownership.m_OwnerInventoryIndex = data.ReadUint32(20);\r\n\r\n        return ownership;\r\n    }\r\n}\r\n\r\nlibrary RocketTypes\r\n{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct Rocket\r\n    {\r\n        uint8 m_Version; // 0\r\n        uint8 m_Unused1; // 1\r\n        uint8 m_IsForSale; // 2\r\n        uint8 m_Unused3; // 3\r\n\r\n        uint32 m_TopSpeed; // 4\r\n        uint32 m_Thrust; // 8\r\n        uint32 m_Weight; // 12\r\n        uint32 m_FuelCapacity; // 16\r\n\r\n        uint16 m_StockId; // 20\r\n        uint16 m_Unused22; // 22\r\n        uint64 m_MaxDistance; // 24\r\n    }\r\n\r\n    struct StockRocket\r\n    {\r\n        bool m_IsValid; // 0\r\n        uint64 m_Cost; // 1\r\n\r\n        uint32 m_MinTopSpeed; // 5\r\n        uint32 m_MaxTopSpeed; // 9\r\n\r\n        uint32 m_MinThrust; // 13\r\n        uint32 m_MaxThrust; // 17\r\n\r\n        uint32 m_MinWeight; // 21\r\n        uint32 m_MaxWeight; // 25\r\n\r\n        uint32 m_MinFuelCapacity; // 29\r\n        uint32 m_MaxFuelCapacity; // 33\r\n\r\n        uint64 m_Distance; // 37\r\n    }\r\n\r\n    function SerializeRocket(Rocket rocket) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint8(0, rocket.m_Version);\r\n        //data.WriteUint8(1, rocket.m_Unused1);\r\n        data.WriteUint8(2, rocket.m_IsForSale);\r\n        //data.WriteUint8(3, rocket.m_Unused3);\r\n        data.WriteUint32(4, rocket.m_TopSpeed);\r\n        data.WriteUint32(8, rocket.m_Thrust);\r\n        data.WriteUint32(12, rocket.m_Weight);\r\n        data.WriteUint32(16, rocket.m_FuelCapacity);\r\n        data.WriteUint16(20, rocket.m_StockId);\r\n        //data.WriteUint16(22, rocket.m_Unused22);\r\n        data.WriteUint64(24, rocket.m_MaxDistance);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeRocket(bytes32 raw) internal pure returns (Rocket)\r\n    {\r\n        Rocket memory rocket;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        rocket.m_Version = data.ReadUint8(0);\r\n        //rocket.m_Unused1 = data.ReadUint8(1);\r\n        rocket.m_IsForSale = data.ReadUint8(2);\r\n        //rocket.m_Unused3 = data.ReadUint8(3);\r\n        rocket.m_TopSpeed = data.ReadUint32(4);\r\n        rocket.m_Thrust = data.ReadUint32(8);\r\n        rocket.m_Weight = data.ReadUint32(12);\r\n        rocket.m_FuelCapacity = data.ReadUint32(16);\r\n        rocket.m_StockId = data.ReadUint16(20);\r\n        //rocket.m_Unused22 = data.ReadUint16(22);\r\n        rocket.m_MaxDistance = data.ReadUint64(24);\r\n\r\n        return rocket;\r\n    }\r\n}\r\n\r\nlibrary Serializer\r\n{\r\n    struct DataComponent\r\n    {\r\n        bytes32 m_Raw;\r\n    }\r\n\r\n    function ReadUint8(DataComponent memory self, uint32 offset) internal pure returns (uint8)\r\n    {\r\n        return uint8((self.m_Raw >> (offset * 8)) & 0xFF);\r\n    }\r\n\r\n    function WriteUint8(DataComponent memory self, uint32 offset, uint8 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint16(DataComponent memory self, uint32 offset) internal pure returns (uint16)\r\n    {\r\n        return uint16((self.m_Raw >> (offset * 8)) & 0xFFFF);\r\n    }\r\n\r\n    function WriteUint16(DataComponent memory self, uint32 offset, uint16 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint32(DataComponent memory self, uint32 offset) internal pure returns (uint32)\r\n    {\r\n        return uint32((self.m_Raw >> (offset * 8)) & 0xFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint32(DataComponent memory self, uint32 offset, uint32 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint64(DataComponent memory self, uint32 offset) internal pure returns (uint64)\r\n    {\r\n        return uint64((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint64(DataComponent memory self, uint32 offset, uint64 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint80(DataComponent memory self, uint32 offset) internal pure returns (uint80)\r\n    {\r\n        return uint80((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint80(DataComponent memory self, uint32 offset, uint80 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadAddress(DataComponent memory self, uint32 offset) internal pure returns (address)\r\n    {\r\n        return address((self.m_Raw >> (offset * 8)) & (\r\n            (0xFFFFFFFF << 0)  |\r\n            (0xFFFFFFFF << 32) |\r\n            (0xFFFFFFFF << 64) |\r\n            (0xFFFFFFFF << 96) |\r\n            (0xFFFFFFFF << 128)\r\n        ));\r\n    }\r\n\r\n    function WriteAddress(DataComponent memory self, uint32 offset, address value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawProfitFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"},{\"name\":\"rocket_id\",\"type\":\"uint32\"},{\"name\":\"launch_thrust\",\"type\":\"uint32\"},{\"name\":\"fuel_to_use\",\"type\":\"uint32\"},{\"name\":\"fuel_allocation_for_launch\",\"type\":\"uint32\"},{\"name\":\"stabilizer_setting\",\"type\":\"uint32\"}],\"name\":\"LaunchRocket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stock_id\",\"type\":\"uint16\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"GiveReferralRocket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hidden\",\"type\":\"address\"}],\"name\":\"ChangeGameHidden\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"GetWithdrawalFunds\",\"outputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"FinishCompetition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"},{\"name\":\"extra\",\"type\":\"uint8\"}],\"name\":\"SetDebugExtra\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wind_speed\",\"type\":\"uint8\"},{\"name\":\"launch_location\",\"type\":\"uint8\"},{\"name\":\"weather_type\",\"type\":\"uint8\"},{\"name\":\"weather_coverage\",\"type\":\"uint8\"},{\"name\":\"launch_cost\",\"type\":\"uint80\"},{\"name\":\"target_distance\",\"type\":\"uint32\"}],\"name\":\"StartCompetition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Database\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rocket_id\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint80\"}],\"name\":\"PlaceRocketForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"GetCompetitionInfo\",\"outputs\":[{\"name\":\"in_progress\",\"type\":\"bool\"},{\"name\":\"wind_speed\",\"type\":\"uint8\"},{\"name\":\"launch_location\",\"type\":\"uint8\"},{\"name\":\"weather_type\",\"type\":\"uint8\"},{\"name\":\"weather_coverage\",\"type\":\"uint8\"},{\"name\":\"launch_cost\",\"type\":\"uint80\"},{\"name\":\"target_distance\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"BuyRocketForSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stock_id\",\"type\":\"uint32\"},{\"name\":\"cost\",\"type\":\"uint64\"},{\"name\":\"min_top_speed\",\"type\":\"uint32\"},{\"name\":\"max_top_speed\",\"type\":\"uint32\"},{\"name\":\"min_thrust\",\"type\":\"uint32\"},{\"name\":\"max_thrust\",\"type\":\"uint32\"},{\"name\":\"min_weight\",\"type\":\"uint32\"},{\"name\":\"max_weight\",\"type\":\"uint32\"},{\"name\":\"min_fuel_capacity\",\"type\":\"uint32\"},{\"name\":\"max_fuel_capacity\",\"type\":\"uint32\"},{\"name\":\"distance\",\"type\":\"uint64\"},{\"name\":\"max_stock\",\"type\":\"uint32\"}],\"name\":\"AddRocket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"GetCompetitionFunds\",\"outputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_GameHidden\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"GetAuction\",\"outputs\":[{\"name\":\"is_for_sale\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"start_index\",\"type\":\"uint256\"}],\"name\":\"GetInventory\",\"outputs\":[{\"name\":\"rocket_ids\",\"type\":\"uint32[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stock_id\",\"type\":\"uint16\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"BuyStockRocket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stock_id\",\"type\":\"uint16\"}],\"name\":\"GetRocketStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"GetRocket\",\"outputs\":[{\"name\":\"is_valid\",\"type\":\"bool\"},{\"name\":\"top_speed\",\"type\":\"uint32\"},{\"name\":\"thrust\",\"type\":\"uint32\"},{\"name\":\"weight\",\"type\":\"uint32\"},{\"name\":\"fuel_capacity\",\"type\":\"uint32\"},{\"name\":\"stock_id\",\"type\":\"uint16\"},{\"name\":\"max_distance\",\"type\":\"uint64\"},{\"name\":\"is_for_sale\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"GetInventoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"},{\"name\":\"first_half\",\"type\":\"bool\"}],\"name\":\"GetCompetitionResults\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"RemoveRocketForSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"db\",\"type\":\"address\"}],\"name\":\"ChangeDatabase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetProfitFunds\",\"outputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"SortCompetitionScores\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stock_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"rocket_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"BuyStockRocketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rocket_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint80\"}],\"name\":\"PlaceRocketForSaleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"RemoveRocketForSaleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rocket_id\",\"type\":\"uint32\"}],\"name\":\"BuyRocketForSaleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"launcher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"competition_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"leo_displacement\",\"type\":\"int64\"},{\"indexed\":false,\"name\":\"planet_displacement\",\"type\":\"int64\"}],\"name\":\"LaunchRocketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"StartCompetitionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"competition_id\",\"type\":\"uint32\"}],\"name\":\"FinishCompetitionEvent\",\"type\":\"event\"}]","ContractName":"Game","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea854ea4a55143f54b23e92811990e289365f5cf1940197a6d67b24e17a1232a"}]}