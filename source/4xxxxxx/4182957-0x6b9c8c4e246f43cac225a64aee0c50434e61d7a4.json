{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract Equio {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances;\r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens;\r\n  // Record the time the contract bought the tokens.\r\n  uint256 public time_bought;\r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value;\r\n  // Emergency kill switch in case a critical bug is found.\r\n  bool public kill_switch;\r\n  // Record the address of the contract creator\r\n  address public creator;\r\n  // The sale name.\r\n  string name;\r\n  // The sale address.\r\n  address public sale; // = 0xA66d83716c7CFE425B44D0f7ef92dE263468fb3d; // config.get('saleAddress');\r\n  // The token address.\r\n  ERC20 public token; // = ERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942); // config.get('tokenAddress');\r\n  // SHA3 hash of kill switch password.\r\n  bytes32 password_hash; // = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612; // config.get('password');\r\n  // Earliest block contract is allowed to buy into the crowdsale.\r\n  uint256 earliest_buy_block; // = 4170700; // config.get('block');\r\n  // Earliest time contract is allowed to buy into the crowdsale. (unix time)\r\n  uint256 earliest_buy_time; // config.get('block');\r\n\r\n  function Equio(\r\n    string _name,\r\n    address _sale,\r\n    address _token,\r\n    bytes32 _password_hash,\r\n    uint256 _earliest_buy_block,\r\n    uint256 _earliest_buy_time\r\n  ) payable {\r\n      creator = msg.sender;\r\n      name = _name;\r\n      sale = _sale;\r\n      token = ERC20(_token);\r\n      password_hash = _password_hash;\r\n      earliest_buy_block = _earliest_buy_block;\r\n      earliest_buy_time = _earliest_buy_time;\r\n  }\r\n\r\n  // Withdraws all ETH deposited or tokens purchased by the user.\r\n  // \"internal\" means this function is not externally callable.\r\n  function withdraw(address user) internal {\r\n    // If called before the ICO, cancel user's participation in the sale.\r\n    if (!bought_tokens) {\r\n      // Store the user's balance prior to withdrawal in a temporary variable.\r\n      uint256 eth_to_withdraw = balances[user];\r\n      // Update the user's balance prior to sending ETH to prevent recursive call.\r\n      balances[user] = 0;\r\n      // Return the user's funds. Throws on failure to prevent loss of funds.\r\n      user.transfer(eth_to_withdraw);\r\n    } else { // Withdraw the user's tokens if the contract has already purchased them.\r\n      // Retrieve current token balance of contract.\r\n      uint256 contract_token_balance = token.balanceOf(address(this));\r\n      // Disallow token withdrawals if there are no tokens to withdraw.\r\n      require(contract_token_balance > 0);\r\n      // Store the user's token balance in a temporary variable.\r\n      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\r\n      // Update the value of tokens currently held by the contract.\r\n      contract_eth_value -= balances[user];\r\n      // Update the user's balance prior to sending to prevent recursive call.\r\n      balances[user] = 0;\r\n      // Send the funds. Throws on failure to prevent loss of funds.\r\n      // Use require here because this is doing ERC20.transfer [not <address>.transfer] which returns bool\r\n      require(token.transfer(user, tokens_to_withdraw));\r\n    }\r\n  }\r\n\r\n  // Withdraws for a given users. Callable by anyone\r\n  // TODO: Do we want this?\r\n  function auto_withdraw(address user){\r\n    // TODO: why wait 1 hour\r\n    // Only allow automatic withdrawals after users have had a chance to manually withdraw.\r\n    require (bought_tokens && now > time_bought + 1 hours);\r\n    // Withdraw the user's funds for them.\r\n    withdraw(user);\r\n  }\r\n\r\n  // Buys tokens in the sale and rewards the caller, callable by anyone.\r\n  function buy_sale(){\r\n    // Short circuit to save gas if the contract has already bought tokens.\r\n    require(bought_tokens);\r\n    // Short circuit to save gas if the earliest buy time and block hasn't been reached.\r\n    require(block.number < earliest_buy_block);\r\n    require(now < earliest_buy_time);\r\n    // Short circuit to save gas if kill switch is active.\r\n    require(!kill_switch);\r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    // Record the time the contract bought the tokens.\r\n    time_bought = now;\r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n    // Transfer all the funds to the crowdsale address\r\n    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\r\n    // already completed, preventing loss of funds.\r\n    // TODO: is this always the correct way to send ETH to a sale? (It should be!)\r\n    // This calls the sale contracts fallback function.\r\n    require(sale.call.value(contract_eth_value)());\r\n  }\r\n\r\n  // Allows anyone with the password to shut down everything except withdrawals in emergencies.\r\n  function activate_kill_switch(string password) {\r\n    // Only activate the kill switch if the password is correct.\r\n    require(sha3(password) == password_hash);\r\n    // Irreversibly activate the kill switch.\r\n    kill_switch = true;\r\n  }\r\n\r\n  // A helper function for the default function, allowing contracts to interact.\r\n  function default_helper() payable {\r\n    // Treat near-zero ETH transactions as withdrawal requests.\r\n    if (msg.value <= 1 finney) {\r\n      withdraw(msg.sender);\r\n    } else { // Deposit the user's funds for use in purchasing tokens.\r\n      // Disallow deposits if kill switch is active.\r\n      require (!kill_switch);\r\n      // TODO: do we care about this? Why not allow running investment?\r\n      // Only allow deposits if the contract hasn't already purchased the tokens.\r\n      require (!bought_tokens);\r\n      // Update records of deposited ETH to include the received amount.\r\n      balances[msg.sender] += msg.value;\r\n    }\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    // TODO: How to handle sale contract refunding ETH?\r\n    // Prevent sale contract from refunding ETH to avoid partial fulfillment.\r\n    require(msg.sender != address(sale));\r\n    // Delegate to the helper function.\r\n    default_helper();\r\n  }\r\n}\r\n\r\ncontract EquioGenesis {\r\n\r\n  /// Create a Equio conteact with `_name`, sale address `_sale`, token address `_token`,\r\n  /// password hash `_password_hash`, earliest buy block `earliest_buy_block`,\r\n  /// earliest buy time `_earliest_buy_time`.\r\n  function generate (\r\n    string _name,\r\n    address _sale,\r\n    address _token,\r\n    bytes32 _password_hash,\r\n    uint256 _earliest_buy_block,\r\n    uint256 _earliest_buy_time\r\n  ) returns (Equio equioAddess) {\r\n    return new Equio(\r\n      _name,\r\n      _sale,\r\n      _token,\r\n      _password_hash,\r\n      _earliest_buy_block,\r\n      _earliest_buy_time\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_password_hash\",\"type\":\"bytes32\"},{\"name\":\"_earliest_buy_block\",\"type\":\"uint256\"},{\"name\":\"_earliest_buy_time\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"name\":\"equioAddess\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"EquioGenesis","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9350a0a304d15a1a6bc25920022b316cc6e5fc7d8851dbe028a861263dfc3586"}]}