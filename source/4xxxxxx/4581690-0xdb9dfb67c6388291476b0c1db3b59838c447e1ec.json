{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\nuint256 c = a * b;\r\nassert(a == 0 || c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract ERC20 {\r\nuint256 public totalSupply;\r\nfunction balanceOf(address who) constant returns (uint256);\r\nfunction transfer(address to, uint256 value) returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nfunction allowance(address owner, address spender) constant returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) returns (bool);\r\nfunction approve(address spender, uint256 value) returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20 {\r\nusing SafeMath for uint256;\r\n\r\nmapping(address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\nmodifier nonZeroEth(uint _value) {\r\nrequire(_value > 0);\r\n_;\r\n}\r\n\r\nmodifier onlyPayloadSize() {\r\nrequire(msg.data.length >= 68);\r\n_;\r\n}\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\n\r\nfunction transfer(address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\nif (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nTransfer(msg.sender, _to, _value);\r\nreturn true;\r\n}else{\r\nreturn false;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from\r\n* @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amout of tokens to be transfered\r\n*/\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) nonZeroEth(_value) onlyPayloadSize returns (bool) {\r\nif(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]){\r\nuint256 _allowance = allowed[_from][msg.sender];\r\nallowed[_from][msg.sender] = _allowance.sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nbalances[_from] = balances[_from].sub(_value);\r\nTransfer(_from, _to, _value);\r\nreturn true;\r\n}else{\r\nreturn false;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\n\r\nfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n// To change the approve amount you first have to reduce the addresses`\r\n// allowance to zero by calling `approve(_spender, 0)` if it is not\r\n// already 0 to mitigate the race condition described here:\r\n// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\nrequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\nallowed[msg.sender][_spender] = _value;\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n*/\r\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n}\r\n\r\n\r\ncontract RPTToken is BasicToken {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring public name = \"RPT Token\"; //name of the token\r\nstring public symbol = \"RPT\"; // symbol of the token\r\nuint8 public decimals = 18; // decimals\r\nuint256 public totalSupply = 100000000 * 10**18; // total supply of RPT Tokens\r\n\r\n// variables\r\nuint256 public keyEmployeeAllocation; // fund allocated to key employee\r\nuint256 public totalAllocatedTokens; // variable to regulate the funds allocation\r\nuint256 public tokensAllocatedToCrowdFund; // funds allocated to crowdfund\r\n\r\n// addresses\r\naddress public founderMultiSigAddress = 0xf96E905091d38ca25e06C014fE67b5CA939eE83D; // multi sign address of founders which hold\r\naddress public crowdFundAddress; // address of crowdfund contract\r\n\r\n//events\r\nevent ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\nevent TransferPreAllocatedFunds(uint256 _blockTimeStamp , address _to , uint256 _value);\r\n\r\n//modifiers\r\nmodifier onlyCrowdFundAddress() {\r\nrequire(msg.sender == crowdFundAddress);\r\n_;\r\n}\r\n\r\nmodifier nonZeroAddress(address _to) {\r\nrequire(_to != 0x0);\r\n_;\r\n}\r\n\r\nmodifier onlyFounders() {\r\nrequire(msg.sender == founderMultiSigAddress);\r\n_;\r\n}\r\n\r\n// creation of the token contract\r\nfunction RPTToken (address _crowdFundAddress) {\r\ncrowdFundAddress = _crowdFundAddress;\r\n\r\n// Token Distribution\r\ntokensAllocatedToCrowdFund = 70 * 10 ** 24; // 70 % allocation of totalSupply\r\nkeyEmployeeAllocation = 30 * 10 ** 24; // 30 % allocation of totalSupply\r\n\r\n// Assigned balances to respective stakeholders\r\nbalances[founderMultiSigAddress] = keyEmployeeAllocation;\r\nbalances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n\r\ntotalAllocatedTokens = balances[founderMultiSigAddress];\r\n}\r\n\r\n// function to keep track of the total token allocation\r\nfunction changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\r\ntotalAllocatedTokens = totalAllocatedTokens.add(_amount);\r\n}\r\n\r\n// function to change founder multisig wallet address\r\nfunction changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\nfounderMultiSigAddress = _newFounderMultiSigAddress;\r\nChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keyEmployeeAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMultiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeTotalSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounderMultiSigAddress\",\"type\":\"address\"}],\"name\":\"changeFounderMultiSigAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAllocatedToCrowdFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdFundAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferPreAllocatedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RPTToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c9320fbe0f9925f17221a461e1f0883cae1f109e","Library":"","SwarmSource":"bzzr://a18c3082900afe5997816e93e694e330a39a89e12052cb0da92e0baf86f8bbe0"}]}