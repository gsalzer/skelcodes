{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  address public saleAgent;\r\n\r\n  function setSaleAgent(address newSaleAgnet) {\r\n    require(msg.sender == saleAgent || msg.sender == owner);\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  \r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n  event Pause();\r\n  \r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n  \r\n}\r\n\r\ncontract QBEToken is MintableToken {\t\r\n    \r\n  string public constant name = \"Qubicle\";\r\n   \r\n  string public constant symbol = \"QBE\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  mapping (address => uint) public locked;\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(locked[msg.sender] < now);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(locked[_from] < now);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n  \r\n  function lock(address addr, uint periodInDays) {\r\n    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\r\n    locked[addr] = now + periodInDays * 1 days;\r\n  }\r\n\r\n  function () payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract StagedCrowdsale is Pausable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Stage {\r\n    uint hardcap;\r\n    uint price;\r\n    uint invested;\r\n    uint closed;\r\n  }\r\n\r\n  uint public start;\r\n\r\n  uint public period;\r\n\r\n  uint public totalHardcap;\r\n \r\n  uint public totalInvested;\r\n\r\n  Stage[] public stages;\r\n\r\n  function stagesCount() public constant returns(uint) {\r\n    return stages.length;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n\r\n  function addStage(uint hardcap, uint price) public onlyOwner {\r\n    require(hardcap > 0 && price > 0);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    stages.push(stage);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n  }\r\n\r\n  function removeStage(uint8 number) public onlyOwner {\r\n    require(number >= 0 && number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    delete stages[number];\r\n    for (uint i = number; i < stages.length - 1; i++) {\r\n      stages[i] = stages[i+1];\r\n    }\r\n    stages.length--;\r\n  }\r\n \r\n  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\r\n    require(number >= 0 && number < stages.length);\r\n    Stage storage stage = stages[number];\r\n    totalHardcap = totalHardcap.sub(stage.hardcap);    \r\n    stage.hardcap = hardcap.mul(1 ether);\r\n    stage.price = price;\r\n    totalHardcap = totalHardcap.add(stage.hardcap);    \r\n  }\r\n\r\n  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\r\n    require(numberAfter < stages.length);\r\n    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\r\n    totalHardcap = totalHardcap.add(stage.hardcap);\r\n    stages.length++;\r\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\r\n      stages[i + 1] = stages[i];\r\n    }\r\n    stages[numberAfter + 1] = stage;\r\n  }\r\n\r\n  function clearStages() public onlyOwner {\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      delete stages[i];\r\n    }\r\n    stages.length -= stages.length;\r\n    totalHardcap = 0;\r\n  }\r\n\r\n  function lastSaleDate() public constant returns(uint) {\r\n    return start + period * 1 days;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(stages.length > 0 && now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n  \r\n  modifier isUnderHardcap() {\r\n    require(totalInvested <= totalHardcap);\r\n    _;\r\n  }\r\n\r\n  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      if (stages[i].closed == 0) {\r\n        return i;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract CommonSale is StagedCrowdsale {\r\n\r\n  address public multisigWallet;\r\n\r\n  uint public minPrice;\r\n\r\n  uint public totalTokensMinted;\r\n\r\n  QBEToken public token;\r\n  \r\n  function setMinPrice(uint newMinPrice) public onlyOwner {\r\n    minPrice = newMinPrice;\r\n  }\r\n\r\n  function setMultisigWallet(address newMultisigWallet) public onlyOwner {\r\n    multisigWallet = newMultisigWallet;\r\n  }\r\n  \r\n  function setToken(address newToken) public onlyOwner {\r\n    token = QBEToken(newToken);\r\n  }\r\n\r\n  function createTokens() public whenNotPaused payable {\r\n    require(msg.value >= minPrice);\r\n    uint stageIndex = currentStage(); // should check if current stage returned a valid stage\r\n    multisigWallet.transfer(msg.value);\r\n    Stage storage stage = stages[stageIndex];\r\n    uint tokens = msg.value.mul(stage.price);\r\n    token.mint(this, tokens);\r\n    token.transfer(msg.sender, tokens);\r\n    totalTokensMinted = totalTokensMinted.add(tokens);\r\n    totalInvested = totalInvested.add(msg.value);\r\n    stage.invested = stage.invested.add(msg.value);\r\n    if (stage.invested >= stage.hardcap) {\r\n      stage.closed = now;\r\n    }\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(multisigWallet, token.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\ncontract Presale is CommonSale {\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function setMainsale(address newMainsale) public onlyOwner {\r\n    mainsale = Mainsale(newMainsale);\r\n  }\r\n\r\n  function setMultisigWallet(address newMultisigWallet) public onlyOwner {\r\n    multisigWallet = newMultisigWallet;\r\n  }\r\n\r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    token.setSaleAgent(mainsale);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(multisigWallet, token.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Mainsale is CommonSale {\r\n\r\n  address public foundersTokensWallet;\r\n  \r\n  address public bountyTokensWallet;\r\n\r\n  address public unsoldTokensWallet;\r\n  \r\n  uint public foundersTokensReserve;\r\n  \r\n  uint public bountyTokensReserve;\r\n\r\n  uint public maxTokenSupply;\r\n  \r\n  uint public lockPeriod;\r\n\r\n  function setLockPeriod(uint newLockPeriod) public onlyOwner {\r\n    lockPeriod = newLockPeriod;\r\n  }\r\n\r\n  function setFoundersTokensReserve(uint newFoundersTokensReserve) public onlyOwner {\r\n    foundersTokensReserve = newFoundersTokensReserve;\r\n  }\r\n\r\n  function setBountyTokensReserve(uint newBountyTokensReserve) public onlyOwner {\r\n    bountyTokensReserve = newBountyTokensReserve;\r\n  }\r\n\r\n  function setMaxTokenSupply(uint newMaxTokenSupply) public onlyOwner {\r\n    maxTokenSupply = newMaxTokenSupply;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setUnsoldTokensWallet(address newUnsoldTokensWallet) public onlyOwner {\r\n    unsoldTokensWallet = newUnsoldTokensWallet;\r\n  }\r\n  \r\n  function finishMinting() public whenNotPaused onlyOwner {\r\n    token.mint(this, foundersTokensReserve);\r\n    token.lock(foundersTokensWallet, lockPeriod * 1 days);\r\n    token.transfer(foundersTokensWallet, foundersTokensReserve);\r\n    token.mint(this, bountyTokensReserve);\r\n    token.transfer(bountyTokensWallet, bountyTokensReserve);\r\n    totalTokensMinted = totalTokensMinted.add(foundersTokensReserve).add(bountyTokensReserve);\r\n\r\n    uint totalUnsoldTokens = maxTokenSupply.sub(totalTokensMinted);\r\n    if (totalUnsoldTokens > 0){\r\n      token.mint(this, totalUnsoldTokens);\r\n      token.transfer(unsoldTokensWallet, totalUnsoldTokens);\r\n    }\r\n    \r\n    token.finishMinting();\r\n  }\r\n\r\n}\r\n\r\ncontract TestConfigurator is Ownable {\r\n\r\n  QBEToken public token; \r\n\r\n  Presale public presale;\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function deploy() public onlyOwner {\r\n    token = new QBEToken();\r\n\r\n    presale = new Presale();\r\n\r\n    presale.setToken(token);\r\n    presale.addStage(10,3000);\r\n    presale.setMultisigWallet(0x4c076e99d9E8cFC647E1807D89506189d4256Ee1);\r\n    presale.setStart(1509393730);\r\n    presale.setPeriod(1);\r\n    presale.setMinPrice(100000000000000000);\r\n    token.setSaleAgent(presale);\t\r\n\r\n    mainsale = new Mainsale();\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.addStage(100,1500);\r\n    mainsale.setMultisigWallet(0xf32737F7779cA2D20c017Da8F51b2DF99F86A221);\r\n    mainsale.setFoundersTokensWallet(0x5b819179C8Ba84FB4a517Dd566cb09Ff4b8a277f);\r\n    mainsale.setBountyTokensWallet(0x7D2b00C23aDab97152aaB6588A50FcEdCEbD58e4);\r\n    mainsale.setUnsoldTokensWallet(0xAE5e64280eD777c6D2bb8EddfeF2394A21f147DD);\r\n    mainsale.setStart(1509393800);\r\n    mainsale.setPeriod(1);\r\n    mainsale.setLockPeriod(1);\r\n    mainsale.setMinPrice(100000000000000000);\r\n    mainsale.setFoundersTokensReserve(20 * (10**6) * 10**18);\r\n    mainsale.setBountyTokensReserve(10 * (10**6) * 10**18);\r\n    mainsale.setMaxTokenSupply(100 * (10**6) * 10**18);\r\n\r\n    presale.setMainsale(mainsale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n\r\n}\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  QBEToken public token; \r\n\r\n  Presale public presale;\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function deploy() public onlyOwner {\r\n    token = new QBEToken();\r\n\r\n    presale = new Presale();\r\n\r\n    presale.setToken(token);\r\n    presale.addStage(6000,3000);\r\n    presale.setMultisigWallet(0x17FB4A3ff095F445287AA6F3Ab699a3DCaE3DC56);\r\n    presale.setStart(1510128000);\r\n    presale.setPeriod(31);\r\n    presale.setMinPrice(100000000000000000);\r\n    token.setSaleAgent(presale);\t\r\n\r\n    mainsale = new Mainsale();\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.addStage(45000,1500);\r\n    mainsale.setMultisigWallet(0xdfF07F415E00a338205A8E21C39eC007eb37F746);\r\n    mainsale.setFoundersTokensWallet(0x7bfC9AdaF3D07adC4a1d3D03cde6581100845540);\r\n    mainsale.setBountyTokensWallet(0xce8d83BA3cDD4E7447339936643861478F8037AD);\r\n    mainsale.setUnsoldTokensWallet(0xd88a0920Dc4A044A95874f4Bd4858Fb013511290);\r\n    mainsale.setStart(1514764800);\r\n    mainsale.setPeriod(60);\r\n    mainsale.setLockPeriod(90);\r\n    mainsale.setMinPrice(100000000000000000);\r\n    mainsale.setFoundersTokensReserve(20 * (10**6) * 10**18);\r\n    mainsale.setBountyTokensReserve(10 * (10**6) * 10**18);\r\n    mainsale.setMaxTokenSupply(100 * (10**6) * 10**18);\r\n\r\n    presale.setMainsale(mainsale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"unsoldTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnsoldTokensWallet\",\"type\":\"address\"}],\"name\":\"setUnsoldTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensReserve\",\"type\":\"uint256\"}],\"name\":\"setBountyTokensReserve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensWallet\",\"type\":\"address\"}],\"name\":\"setFoundersTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMultisigWallet\",\"type\":\"address\"}],\"name\":\"setMultisigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearStages\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"closed\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensReserve\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokensReserve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxTokenSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"hardcap\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"insertStage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensWallet\",\"type\":\"address\"}],\"name\":\"setBountyTokensWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Mainsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://601c77fec48a70b805caec543e60e213b65b1e1ffd280bfea0260fabe83f0759"}]}