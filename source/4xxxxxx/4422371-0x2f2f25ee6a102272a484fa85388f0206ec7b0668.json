{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Finalizable is Ownable {\r\n\r\n\tbool public isFinalized = false;\r\n\r\n\tevent Finalized();\r\n\r\n\tfunction finalize() onlyOwner public {\r\n\t\trequire (!isFinalized);\r\n\t\t//require (hasEnded());\r\n\r\n\t\tfinalization();\r\n\t\tFinalized();\r\n\r\n\t\tisFinalized = true ;\r\n\t}\r\n\r\n\tfunction finalization() internal {\r\n\r\n\t}\r\n}\r\n\r\ncontract TopiaCoinSAFTSale is Ownable, Finalizable {\r\n\r\n\tevent PaymentExpected(bytes8 paymentIdentifier); // Event\r\n\tevent PaymentExpectationCancelled(bytes8 paymentIdentifier); // Event\r\n\tevent PaymentSubmitted(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); // Event\r\n\tevent PaymentAccepted(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); // Event\r\n\tevent PaymentRejected(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); // Event\r\n\tevent UnableToAcceptPayment(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); // Event\r\n\tevent UnableToRejectPayment(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); // Event\r\n\t\r\n\tevent SalesWalletUpdated(address oldWalletAddress, address newWalletAddress); // Event\r\n\tevent PaymentManagerUpdated(address oldPaymentManager, address newPaymentManager); // Event\r\n\r\n\tevent SaleOpen(); // Event\r\n\tevent SaleClosed(); // Event\r\n\r\n\tmapping (bytes8 => Payment) payments;\r\n\taddress salesWallet = 0x0;\r\n\taddress paymentManager = 0x0;\r\n\tbool public saleStarted = false;\r\n\r\n\t// Structure for storing payment infromation\r\n\tstruct Payment {\r\n\t\taddress from;\r\n\t\tbytes8 paymentIdentifier;\r\n\t\tbytes32 paymentHash;\r\n\t\tuint256 paymentAmount;\r\n\t\tuint date;\r\n\t\tuint8 status; \r\n\t}\r\n\r\n\tuint8 PENDING_STATUS = 10;\r\n\tuint8 PAID_STATUS = 20;\r\n\tuint8 ACCEPTED_STATUS = 22;\r\n\tuint8 REJECTED_STATUS = 40;\r\n\r\n\tmodifier onlyOwnerOrManager() {\r\n\t\trequire(msg.sender == owner || msg.sender == paymentManager);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction TopiaCoinSAFTSale(address _salesWallet, address _paymentManager) \r\n\t\tOwnable () \r\n\t{\r\n\t\trequire (_salesWallet != 0x0);\r\n\r\n\t\tsalesWallet = _salesWallet;\r\n\t\tpaymentManager = _paymentManager;\r\n\t\tsaleStarted = false;\r\n\t}\r\n\r\n\t// Updates the wallet to which all payments are sent.\r\n\tfunction updateSalesWallet(address _salesWallet) onlyOwner {\r\n\t\trequire(_salesWallet != 0x0) ;\r\n\t\trequire(_salesWallet != salesWallet);\r\n\r\n\t\taddress oldWalletAddress = salesWallet ;\r\n\t\tsalesWallet = _salesWallet;\r\n\r\n\t\tSalesWalletUpdated(oldWalletAddress, _salesWallet);\r\n\t}\r\n\r\n\t// Updates the wallet to which all payments are sent.\r\n\tfunction updatePaymentManager(address _paymentManager) onlyOwner {\r\n\t\trequire(_paymentManager != 0x0) ;\r\n\t\trequire(_paymentManager != paymentManager);\r\n\r\n\t\taddress oldPaymentManager = paymentManager ;\r\n\t\tpaymentManager = _paymentManager;\r\n\r\n\t\tPaymentManagerUpdated(oldPaymentManager, _paymentManager);\r\n\t}\r\n\r\n\t// Updates the state of the contact so that it will start accepting payments.\r\n\tfunction startSale() onlyOwner {\r\n\t\trequire (!saleStarted);\r\n\t\trequire (!isFinalized);\r\n\r\n\t\tsaleStarted = true;\r\n\t\tSaleOpen();\r\n\t}\r\n\r\n\t// Instructs the contract that it should expect a payment with the given identifier to be made.\r\n\tfunction expectPayment(bytes8 _paymentIdentifier, bytes32 _paymentHash) onlyOwnerOrManager {\r\n\t\t// Sale must be running in order to expect payments\r\n\t\trequire (saleStarted);\r\n\t\trequire (!isFinalized);\r\n\r\n\t\t// Sanity check the parameters\r\n\t\trequire (_paymentIdentifier != 0x0);\r\n\r\n\t\t// Look up the payment identifier.  We expect to find an empty Payment record.\r\n\t\tPayment storage p = payments[_paymentIdentifier];\r\n\r\n\t\trequire (p.status == 0);\r\n\t\trequire (p.from == 0x0);\r\n\r\n\t\tp.paymentIdentifier = _paymentIdentifier;\r\n\t\tp.paymentHash = _paymentHash;\r\n\t\tp.date = now;\r\n\t\tp.status = PENDING_STATUS;\r\n\r\n\t\tpayments[_paymentIdentifier] = p;\r\n\r\n\t\tPaymentExpected(_paymentIdentifier);\r\n\t}\r\n\r\n\t// Instruct the contract should stop expecting a payment with the given identifier\r\n\tfunction cancelExpectedPayment(bytes8 _paymentIdentifier) onlyOwnerOrManager {\r\n\t\t\t\t// Sale must be running in order to expect payments\r\n\t\trequire (saleStarted);\r\n\t\trequire (!isFinalized);\r\n\r\n\t\t// Sanity check the parameters\r\n\t\trequire (_paymentIdentifier != 0x0);\r\n\r\n\t\t// Look up the payment identifier.  We expect to find an empty Payment record.\r\n\t\tPayment storage p = payments[_paymentIdentifier];\r\n\r\n\t\trequire(p.paymentAmount == 0);\r\n\t\trequire(p.status == 0 || p.status == 10);\r\n\r\n\t\tp.paymentIdentifier = 0x0;\r\n\t\tp.paymentHash = 0x0;\r\n\t\tp.date = 0;\r\n\t\tp.status = 0;\r\n\r\n\t\tpayments[_paymentIdentifier] = p;\r\n\r\n\t\tPaymentExpectationCancelled(_paymentIdentifier);\r\n\t}\r\n\r\n\t// Submits a payment to the contract with the spcified payment identifier.  If the contract is\r\n\t// not expecting the specified payment, then the payment is held.  Expected payemnts are automatically\r\n\t// accepted and forwarded to the sales wallet.\r\n\tfunction submitPayment(bytes8 _paymentIdentifier, uint32 nonce) payable {\r\n\t\trequire (saleStarted);\r\n\t\trequire (!isFinalized);\r\n\r\n\t\t// Sanity Check the Parameters\r\n\t\trequire (_paymentIdentifier != 0x0);\r\n\r\n\t\tPayment storage p = payments[_paymentIdentifier];\r\n\r\n\t\trequire (p.status == PENDING_STATUS);\r\n\t\trequire (p.from == 0x0);\r\n\t\trequire (p.paymentHash != 0x0);\r\n\t\trequire (msg.value > 0);\r\n\r\n\t\t// Calculate the Payment Hash and insure it matches the expected hash\r\n\t\trequire (p.paymentHash == calculateHash(_paymentIdentifier, msg.value, nonce)) ;\r\n\r\n\t\tbool forwardPayment = (p.status == PENDING_STATUS);\r\n\t\t\r\n\t\tp.from = msg.sender;\r\n\t\tp.paymentIdentifier = _paymentIdentifier;\r\n\t\tp.date = now;\r\n\t\tp.paymentAmount = msg.value;\r\n\t\tp.status = PAID_STATUS;\r\n\r\n\t\tpayments[_paymentIdentifier] = p;\r\n\r\n\t\tPaymentSubmitted (p.from, p.paymentIdentifier, p.paymentAmount);\r\n\r\n\t\tif ( forwardPayment ) {\r\n\t\t\tsendPaymentToWallet (p) ;\r\n\t\t}\r\n\t}\r\n\r\n\t// Accepts a pending payment and forwards the payment amount to the sales wallet.\r\n\tfunction acceptPayment(bytes8 _paymentIdentifier) onlyOwnerOrManager {\r\n\t\t// Sanity Check the Parameters\r\n\t\trequire (_paymentIdentifier != 0x0);\r\n\r\n\t\tPayment storage p = payments[_paymentIdentifier];\r\n\r\n\t\trequire (p.from != 0x0) ;\r\n\t\trequire (p.status == PAID_STATUS);\r\n\r\n\t\tsendPaymentToWallet(p);\r\n\t}\r\n\r\n\t// Rejects a pending payment and returns the payment to the payer.\r\n\tfunction rejectPayment(bytes8 _paymentIdentifier) onlyOwnerOrManager {\r\n\t\t// Sanity Check the Parameters\r\n\t\trequire (_paymentIdentifier != 0x0);\r\n\r\n\t\tPayment storage p = payments[_paymentIdentifier] ;\r\n\r\n\t\trequire (p.from != 0x0) ;\r\n\t\trequire (p.status == PAID_STATUS);\r\n\r\n\t\trefundPayment(p) ;\r\n\t}\r\n\r\n\t// ******** Utility Methods ********\r\n\t// Might be removed before deploying the Smart Contract Live.\r\n\r\n\t// Returns the payment information for a particular payment identifier.\r\n\tfunction verifyPayment(bytes8 _paymentIdentifier) constant onlyOwnerOrManager returns (address from, uint256 paymentAmount, uint date, bytes32 paymentHash, uint8 status)  {\r\n\t\tPayment storage payment = payments[_paymentIdentifier];\r\n\r\n\t\treturn (payment.from, payment.paymentAmount, payment.date, payment.paymentHash, payment.status);\r\n\t}\r\n\r\n\t// Kills this contract.  Used only during debugging.\r\n\t// TODO: Remove this method before deploying Smart Contract.\r\n\tfunction kill() onlyOwner {\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n\r\n\t// ******** Internal Methods ********\r\n\r\n\t// Internal function that transfers the ether sent with a payment on to the sales wallet.\r\n\tfunction sendPaymentToWallet(Payment _payment) internal {\r\n\r\n\t\tif ( salesWallet.send(_payment.paymentAmount) ) {\r\n\t\t\t_payment.status = ACCEPTED_STATUS;\r\n\r\n\t\t\tpayments[_payment.paymentIdentifier] = _payment;\r\n\r\n\t\t\tPaymentAccepted (_payment.from, _payment.paymentIdentifier, _payment.paymentAmount);\r\n\t\t} else {\r\n\t\t\tUnableToAcceptPayment (_payment.from, _payment.paymentIdentifier, _payment.paymentAmount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Internal function that transfers the ether sent with a payment back to the sender.\r\n\tfunction refundPayment(Payment _payment) internal {\r\n\t\tif ( _payment.from.send(_payment.paymentAmount)  ) {\r\n\t\t\t_payment.status = REJECTED_STATUS;\r\n\r\n\t\t\tpayments[_payment.paymentIdentifier] = _payment;\r\n\r\n\t\t\tPaymentRejected (_payment.from, _payment.paymentIdentifier, _payment.paymentAmount);\r\n\t\t} else {\r\n\t\t\tUnableToRejectPayment (_payment.from, _payment.paymentIdentifier, _payment.paymentAmount);\r\n\t\t}\r\n\t}\r\n\r\n\t// Calculates the hash for the provided payment information.\r\n\t// TODO: Make this method internal before deploying Smart Contract.\r\n\tfunction calculateHash(bytes8 _paymentIdentifier, uint256 _amount, uint32 _nonce) constant onlyOwnerOrManager returns (bytes32 hash) {\r\n\t\treturn sha256(_paymentIdentifier, _amount, _nonce);\r\n\t}\r\n\r\n\tfunction finalization() internal {\r\n\t\tsaleStarted = false;\r\n\t\tSaleClosed();\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"acceptPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_salesWallet\",\"type\":\"address\"}],\"name\":\"updateSalesWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"},{\"name\":\"_paymentHash\",\"type\":\"bytes32\"}],\"name\":\"expectPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"cancelExpectedPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentManager\",\"type\":\"address\"}],\"name\":\"updatePaymentManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint32\"}],\"name\":\"calculateHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"rejectPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentIdentifier\",\"type\":\"bytes8\"},{\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"submitPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_salesWallet\",\"type\":\"address\"},{\"name\":\"_paymentManager\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"PaymentExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"}],\"name\":\"PaymentExpectationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"UnableToAcceptPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentIdentifier\",\"type\":\"bytes8\"},{\"indexed\":false,\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"UnableToRejectPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldWalletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"SalesWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPaymentManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPaymentManager\",\"type\":\"address\"}],\"name\":\"PaymentManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TopiaCoinSAFTSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa5a83a41e724712c15658950eb9ce656b6eb732000000000000000000000000912620c4f30ba436c79b9f1a54e149be8f168b9a","Library":"","SwarmSource":"bzzr://be9bb8a70ba72e16ca40c43fb518bb80d47dc2bb61f67b06808401ee2894b399"}]}