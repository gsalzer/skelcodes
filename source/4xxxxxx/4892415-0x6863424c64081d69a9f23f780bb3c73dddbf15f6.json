{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n}\r\n\r\n\r\ncontract TimelockedSafe {\r\n\r\n    using SafeMath for uint;\r\n\r\n\tuint constant public decimals = 18;\r\n\r\n\tuint constant public oneMonth = 30 days;\r\n\r\n    address public adminAddress;\r\n\r\n    address public withdrawAddress;\r\n\r\n    uint public lockingPeriodInMonths; // all tokens are locked for a certain period\r\n\r\n    uint public vestingPeriodInMonths; // after the locking period ends the vesting period starts, but each month\r\n                                       // there is a token withdraw limit as defined below\r\n\r\n    uint public monthlyWithdrawLimitInWei; // monthly withdraw limit during the vesting period\r\n\r\n    Token public token;\r\n\r\n    uint public startTime;\r\n\r\n    function TimelockedSafe(address _adminAddress, address _withdrawAddress,\r\n    \tuint _lockingPeriodInMonths, uint _vestingPeriodInMonths,\r\n    \tuint _monthlyWithdrawLimitInWei, address _token) public {\r\n        require(_adminAddress != 0);\r\n    \trequire(_withdrawAddress != 0);\r\n\r\n    \t// just to prevent mistakenly passing in a value with incorrect token unit\r\n    \trequire(_monthlyWithdrawLimitInWei > 100 * (10 ** decimals));\r\n\r\n        adminAddress = _adminAddress;\r\n    \twithdrawAddress = _withdrawAddress;\r\n    \tlockingPeriodInMonths = _lockingPeriodInMonths;\r\n    \tvestingPeriodInMonths = _vestingPeriodInMonths;\r\n    \tmonthlyWithdrawLimitInWei = _monthlyWithdrawLimitInWei;\r\n    \ttoken = Token(_token);\r\n    \tstartTime = now;\r\n    }\r\n\r\n    function withdraw(uint _withdrawAmountInWei) public returns (bool) {    \t\r\n    \tuint timeElapsed = now.sub(startTime);\r\n    \tuint monthsElapsed = (timeElapsed.div(oneMonth)).add(1);\r\n    \trequire(monthsElapsed >= lockingPeriodInMonths);\r\n\r\n    \tuint fullyVestedTimeInMonths = lockingPeriodInMonths.add(vestingPeriodInMonths);\r\n    \tuint remainingVestingPeriodInMonths = 0;\r\n    \tif (monthsElapsed < fullyVestedTimeInMonths) {\r\n    \t\tremainingVestingPeriodInMonths = fullyVestedTimeInMonths.sub(monthsElapsed);\r\n    \t}\r\n\r\n    \taddress timelockedSafeAddress = address(this);\r\n    \tuint minimalBalanceInWei = remainingVestingPeriodInMonths.mul(monthlyWithdrawLimitInWei);\r\n    \tuint currentTokenBalanceInWei = token.balanceOf(timelockedSafeAddress);\r\n    \trequire(currentTokenBalanceInWei.sub(_withdrawAmountInWei) >= minimalBalanceInWei);\r\n\r\n    \trequire(token.transfer(withdrawAddress, _withdrawAmountInWei));\r\n\r\n    \treturn true;\r\n    }\r\n\r\n    function changeStartTime(uint _newStartTime) public only(adminAddress) {\r\n        startTime = _newStartTime;\r\n    }\r\n\r\n    function changeTokenAddress(address _newTokenAddress) public only(adminAddress) {\r\n        token = Token(_newTokenAddress);\r\n    }\r\n\r\n    function changeWithdrawAddress(address _newWithdrawAddress) public only(adminAddress) {\r\n        withdrawAddress = _newWithdrawAddress;\r\n    }\r\n\r\n    function changeLockingPeriod(uint _newLockingPeriodInMonths) public only(adminAddress) {\r\n        lockingPeriodInMonths = _newLockingPeriodInMonths;\r\n    }\r\n\r\n    function changeVestingPeriod(uint _newVestingPeriodInMonths) public only(adminAddress) {\r\n        vestingPeriodInMonths = _newVestingPeriodInMonths;\r\n    }\r\n\r\n    function changeMonthlyWithdrawLimit(uint _newMonthlyWithdrawLimitInWei) public only(adminAddress) {\r\n        monthlyWithdrawLimitInWei = _newMonthlyWithdrawLimitInWei;\r\n    }\r\n\r\n    function finalizeConfig() public only(adminAddress) {\r\n        adminAddress = 0x0; // config finalized, give up control \r\n    }\r\n\r\n    modifier only(address x) {\r\n        require(msg.sender == x);\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"monthlyWithdrawLimitInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"changeWithdrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawAmountInWei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockingPeriodInMonths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartTime\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMonthlyWithdrawLimitInWei\",\"type\":\"uint256\"}],\"name\":\"changeMonthlyWithdrawLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriodInMonths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLockingPeriodInMonths\",\"type\":\"uint256\"}],\"name\":\"changeLockingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVestingPeriodInMonths\",\"type\":\"uint256\"}],\"name\":\"changeVestingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"},{\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"name\":\"_lockingPeriodInMonths\",\"type\":\"uint256\"},{\"name\":\"_vestingPeriodInMonths\",\"type\":\"uint256\"},{\"name\":\"_monthlyWithdrawLimitInWei\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TimelockedSafe","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bfe0bd83cad590a29ab618e94c2d2757b9010c6b00000000000000000000000003e130eafab61ca4d31923b4043db497a830d2bd000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cecb8f27f4200f3a0000000000000000000000000000003883f5e181fccaf8410fa61e12b59bad963fb645","Library":"","SwarmSource":"bzzr://942ef2dbfbfcb1b3ddf6ca937286223a5c06ce470adf2ab35350b65bbf142665"}]}