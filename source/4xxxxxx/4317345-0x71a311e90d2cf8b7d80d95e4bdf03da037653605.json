{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SynToken {\r\n    string public name = \"TEST TOKEN\";\r\n    string public symbol = \"TEST\";\r\n    uint256 public decimals = 18;\r\n    \r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) ;\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) ;\r\n    \r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n        /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) ;\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n     /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) returns (bool success);\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount)  public returns (bool);\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() public returns (bool);\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract SynTokenCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    SynToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    /*\r\n    Custom vars\r\n   */\r\n\r\n    uint256 public cap = 500*10**24;//500milllion SYN\r\n    uint256 public foundationAmount = (2*cap)/3;// 2/3s of cap\r\n    address public tokenWallet = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\r\n    uint256 public tokensSold = 0;//for ether raised, call weiRaised and convert to ether\r\n    address public admin = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\r\n    uint[] public salesRates = [2000,2250,2500]; \r\n    address public constant SynTokenAddress = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;  \r\n\r\n    bool public crowdsaleLive = false;\r\n    bool public crowdsaleInit = false;\r\n    bool public appliedPresale = false;\r\n\r\n    event NextRate(uint256 _rate);\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n    function SynTokenCrowdsale() {\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n//OVERLOADED/CUSTOM METHODS\r\n  modifier adminOnly{\r\n    if(msg.sender == admin) //    SHOULD THIS BE MSG.SENDER NOT MSG.SEND\r\n    _;\r\n    \r\n  } \r\n\r\n\r\n    // low level token purchase function\r\nfunction buyTokens(address beneficiary) public payable {\r\nrequire(beneficiary != 0x0);\r\nrequire(validPurchase());\r\n\r\nuint256 weiAmount = msg.value;\r\n\r\n// calculate token amount to be created\r\nuint256 tokens = weiAmount.mul(rate);\r\n\r\n//revert purchase attempts beyond token supply\r\nrequire(tokens <= cap - tokensSold); \r\n\r\n// update state\r\nweiRaised = weiRaised.add(weiAmount);\r\ntokensSold = tokensSold.add(tokens);\r\n\r\ntoken.mint(beneficiary, tokens);\r\nTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\nforwardFunds();\r\n}\r\n// @return true if the transaction can buy tokens\r\nfunction validPurchase() internal constant returns (bool) {\r\n\r\nbool capNotReached = tokensSold <= cap;   \r\nbool withinPeriod = now >= startTime && now <= endTime;\r\nbool nonZeroPurchase = msg.value != 0;\r\n    if(now >= startTime){\r\n        forwardRemaining();\r\n    }\r\nreturn (nonZeroPurchase && withinPeriod && capNotReached) ;\r\n}\r\n\r\n//forward all remaining tokens to the foundation address\r\nfunction forwardRemaining() internal {\r\n    require(crowdsaleLive);\r\nrequire(now > endTime);\r\nuint256 remaining = cap - tokensSold;\r\nrequire(remaining < cap);\r\ntokensSold += remaining;\r\ntoken.mint(tokenWallet, remaining);\r\n    token.finishMinting();\r\n    crowdsaleLive = false;\r\n}\r\n\r\nfunction nextRate(uint _rate) adminOnly {\r\nrequire(now > endTime);\r\nrequire(salesRates[_rate] < rate );\r\nrate = salesRates[_rate];\r\n}\r\n\r\nfunction setToken(address _tokenAddress){\r\n    token = SynToken(_tokenAddress);\r\n}\r\n\r\n\r\nfunction initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _tokenAddress) adminOnly {\r\n    require(!crowdsaleInit);    \r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    crowdsaleInit=true;\r\n}\r\n\r\n\r\nfunction applyPresale() adminOnly{\r\n\r\n    require(crowdsaleInit);\r\n    require(!appliedPresale);\r\n\r\n    token.mint(0x3de1483fda9f3383c422d8713008e5d272aa73ee, 35448897500000000000000);\r\n\ttoken.mint(0xe695e2d9243303dccff5a26731cc0083f3b10c8b, 100000000000000000000000);\r\n\ttoken.mint(0x1bf45eb62434a0dac0de59753e431210d2b33f24, 32500000000000000000000);\r\n\ttoken.mint(0x92009d954ff9efd69708e2dd2166f7e60124ce09, 22500000000000000000000);\r\n\ttoken.mint(0xe579c7b478d40c85871ac5553d488b65be9a9264, 1250000000000000000000);\r\n\ttoken.mint(0xa576e704a1c1d8d7e2fdfdd251b15a3265397121, 2500000000000000000000);\r\n\ttoken.mint(0x9e40c7ee30cefb4327ea2c83869cd161ff5fa71f, 250000000000000000000);\r\n\ttoken.mint(0xcc6b7ed85bf68ee9def96b95f3356a8072a01030, 50008790160000000000000);\r\n\ttoken.mint(0xf406317925ad6a9ea40cdf40cc1c9b0dd65ca10c, 250000000000000000000000);\r\n\ttoken.mint(0x69965bb6487178234ddcc835cb2ceccadd4e1431, 1250000000000000000000);\r\n\ttoken.mint(0xe7558aa60d1135410f03479df94ea439e782d541, 1950000000000000000000);\r\n\ttoken.mint(0x75360cbe8c7cb8174b1b623a6d9aacf952c117e3, 50000000000000000000000);\r\n\ttoken.mint(0x001a1a6ccf3b97b983d709c0d34a0de574b90a19, 2500000000000000000000);\r\n\ttoken.mint(0x56488a1d3dc8bb20b75e8317448f1a1fbadcb999, 2725000000000000000000);\r\n\ttoken.mint(0xf16e0aa06d745026bc80686e492b0f9b0578b5bd, 3200000000000000000000);\r\n\ttoken.mint(0xc046b59484843b2af6ca105afd88a3ab60e9b7cd, 1250000000000000000000);\r\n\ttoken.mint(0x479a8f11ee100a1cc99cd06e67dba639aaec56f7, 12489500000000000000000);\r\n\ttoken.mint(0x9369263b70dec0b65064bd6967e6b01c3a9377ec, 750000000000000000000);\r\n\ttoken.mint(0x89560c2b6b343ad4f6e47b19b9577bfce938ce98, 10000000000000000000000);\r\n\ttoken.mint(0xdcc719cf97c9cbc06e4e8f05ed8d9b2132fe7f31, 12500000000000000000000);\r\n\ttoken.mint(0x5ac855600754de7fc9796add50b82554324424bb, 20362000000000000000000);\r\n\ttoken.mint(0xa1b710593ed03670c9424c941130b3a073a694cc, 3016378887500000000000);\r\n\ttoken.mint(0x8186bda406b950da9690e58199479aa008160709, 150000000000000000000);\r\n\ttoken.mint(0xb87b8dc38f027b1ce89a6519dbeb705bdd251ea5, 2500000000000000000000);\r\n\ttoken.mint(0x294751d928994780f6db76af14e343d4eb9c3a46, 1354326960000000000000000);\r\n\ttoken.mint(0x339d2fbaf46acb13ffc43636c5ae5b81d442e1e2, 124999876147500000000000);\r\n\ttoken.mint(0xdfcf69c8fed25f5150db719bad4efab64f628d31, 10000000000000000000000);\r\n\ttoken.mint(0x0460529cea44e59fb7e45a6cd6ff0b8b17b680c3, 125000000000000000000000);\r\n\r\n\ttokensSold+=2233427402695000000000000;\r\n\r\n\ttoken.mint(tokenWallet, foundationAmount);\r\n\r\n\ttokensSold = tokensSold + foundationAmount;\r\n\tappliedPresale=true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"initCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salesRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SynTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appliedPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"NextRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"SynTokenCrowdsale","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87e2e74c81a72fdfa5100f299197a4b1b93e790971bac8b25152dddd0dfc5f40"}]}