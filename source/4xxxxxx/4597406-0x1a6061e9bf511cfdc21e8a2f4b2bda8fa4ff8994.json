{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract DopamemePresale is Claimable {\r\n    using SafeMath for uint256;\r\n    uint256 public maxCap = 14000000000000000000;  // 1400 ETH\r\n    uint256 public minCap = 3000000000000000000;  // 300 ETH\r\n    uint256 public minimum_investment = 15000000000000000; // 0.015 ETH\r\n    uint256 public totalInvestedInWei;\r\n    uint8 public exchangeRate = 230;  // ICO rate 200 + 15% Presale Bonus\r\n    uint256 public DMT_TotalSuply = 1e26;\r\n    uint256 public startBlock = 4597180;  // 21Nov2017_23_gmt\r\n    uint256 public endBlock;\r\n    uint256 public end_Dec_21_2017 = 1513897200;\r\n    bool public isInitialized = false;\r\n    bool public paused = false;\r\n\r\n    uint256 public tokensGenerated;\r\n    uint256 public investorsLength;\r\n    \r\n    address vault;\r\n    mapping(address => uint256) public investorBalances;\r\n    mapping(address => uint256) public investorToken;\r\n    mapping(address => bool) whitelist;\r\n    \r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    function hasStarted() public constant returns(bool) {\r\n        return block.number >= startBlock;\r\n    }\r\n\r\n    function hasEnded() public constant returns (bool) {\r\n        return (getTime() > end_Dec_21_2017 || maxCapReached());\r\n    }\r\n\r\n    function showVault() onlyOwner constant returns(address) {\r\n        return vault;\r\n    }\r\n\r\n    function showOwner() onlyOwner constant returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    /// @return Total to invest in weis.\r\n    function toFound() public constant returns(uint256) {\r\n        return maxCap >= totalInvestedInWei ? maxCap - totalInvestedInWei : 0;\r\n    }\r\n    \r\n    /// @return Total to invest in weis.\r\n    function tokensleft() public constant returns(uint256) {\r\n        return DMT_TotalSuply > tokensGenerated ? DMT_TotalSuply - tokensGenerated : 0;\r\n    }\r\n\r\n    function maxCapReached() public constant returns(bool) {\r\n        return totalInvestedInWei >= maxCap;\r\n    }\r\n\r\n    function minCapReached() public constant returns(bool) {\r\n        return totalInvestedInWei >= minCap;\r\n    }\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n    /// @notice Pauses the contribution if there is any issue\r\n    function pauseContribution(bool _paused) onlyOwner {\r\n        paused = _paused;\r\n    }\r\n    \r\n    function initialize(address _vault) public onlyOwner {\r\n        require(!isInitialized);\r\n        require(_vault != 0x0);\r\n        isInitialized = true;\r\n        vault = _vault;\r\n        Initialized(block.number, getTime());\r\n    }\r\n\r\n    function buy() public payable notPaused {\r\n        require(isInitialized);\r\n        require(hasStarted());\r\n        require(!hasEnded());\r\n        require(isValidPurchase(msg.value));\r\n        whitelistInvestor(msg.sender);\r\n        address investor = msg.sender;\r\n        investorBalances[investor] += msg.value;\r\n        uint256 tokens = msg.value.mul(exchangeRate);\r\n        investorToken[investor] += tokens;\r\n        tokensGenerated += tokens;\r\n        totalInvestedInWei += msg.value;\r\n        forwardFunds(msg.value);\r\n        NewSale(investor, tokens);\r\n        if(hasEnded()){\r\n            endBlock = block.number;\r\n            Finalized(endBlock, getTime());\r\n        }\r\n    }\r\n    function forwardFunds(uint256 _amount) internal {\r\n        vault.transfer(_amount);\r\n    }\r\n\r\n    function getTime() internal view returns(uint256) {\r\n        return now;\r\n    }\r\n    \r\n    function isValidPurchase(uint256 _amount) internal view returns(bool) {\r\n        bool nonZero = _amount > 0;\r\n        bool hasMinimumAmount = investorBalances[msg.sender].add(_amount) >= minimum_investment;\r\n        bool withinCap = totalInvestedInWei.add(_amount) <= maxCap;\r\n        return hasMinimumAmount && withinCap && nonZero;\r\n    }\r\n    function whitelistInvestor(address _newInvestor) internal {\r\n        if(!whitelist[_newInvestor]) {\r\n            whitelist[_newInvestor] = true;\r\n            investorsLength++;\r\n        }\r\n    }\r\n    function whitelistInvestors(address[] _investors) external onlyOwner {\r\n        require(_investors.length <= 250);\r\n        for(uint8 i=0; i<_investors.length;i++) {\r\n            address newInvestor = _investors[i];\r\n            if(!whitelist[newInvestor]) {\r\n                whitelist[newInvestor] = true;\r\n                investorsLength++;\r\n            }\r\n        }\r\n    }\r\n    function blacklistInvestor(address _investor) public onlyOwner {\r\n        if(whitelist[_investor]) {\r\n            delete whitelist[_investor];\r\n            if(investorsLength != 0) {\r\n                investorsLength--;\r\n            }\r\n        }\r\n    }\r\n\r\n    event NewSale(address indexed investor, uint256 _tokens);\r\n    event Initialized(uint256 _block, uint _now);\r\n    event Finalized(uint256 _block, uint _now);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensleft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toFound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"whitelistInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end_Dec_21_2017\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensGenerated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_investment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DMT_TotalSuply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"blacklistInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DopamemePresale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec8d877a4a59f189e1dae14c73afab15aaa1f18a9ea546fe446591bda5d241bc"}]}