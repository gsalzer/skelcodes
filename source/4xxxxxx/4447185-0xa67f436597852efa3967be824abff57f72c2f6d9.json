{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\ncontract IungoPresale is Owned {\r\n    // Total funding amount\r\n    uint256 public totalFunding;\r\n\r\n    // Minimum and maximum amounts per transaction for participants\r\n    uint256 public constant MIN_AMOUNT = 500 finney;\r\n    uint256 public constant MAX_AMOUNT = 50 ether;\r\n\r\n    // Minimum and maximum goals of the presale\r\n    uint256 public constant PRESALE_MINIMUM_FUNDING = 120 ether;\r\n    uint256 public constant PRESALE_MAXIMUM_FUNDING = 1100 ether;\r\n\r\n    // Public presale period\r\n    // Starts Saturday, October 28, 2017 12:00:00 AM GMT\r\n    // Ends Sunday, November 19, 2017 12:00:00 AM GTM\r\n    uint256 public constant PRESALE_START_DATE = 1509148800;\r\n    uint256 public constant PRESALE_END_DATE = 1511049600;\r\n\r\n    // Owner can clawback after a date in the future, so no ethers remain\r\n    // trapped in the contract. This will only be relevant if the\r\n    // minimum funding level is not reached\r\n    // Jan 01 2018 @ 12:00pm (UTC) 2018-01-01T12:00:00+00:00 in ISO 8601\r\n    uint256 public constant OWNER_CLAWBACK_DATE = 1514808000;\r\n\r\n    /// @notice Keep track of all participants contributions, including both the\r\n    ///         preallocation and public phases\r\n    /// @dev Name complies with ERC20 token standard, etherscan for example will recognize\r\n    ///      this and show the balances of the address\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    /// @notice Log an event for each funding contributed during the public phase\r\n    /// @notice Events are not logged when the constructor is being executed during\r\n    ///         deployment, so the preallocations will not be logged\r\n    event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\r\n\r\n    /// @notice A participant sends a contribution to the contract's address\r\n    ///         between the PRESALE_STATE_DATE and the PRESALE_END_DATE\r\n    /// @notice Only contributions between the MIN_AMOUNT and\r\n    ///         MAX_AMOUNT are accepted. Otherwise the transaction\r\n    ///         is rejected and contributed amount is returned to the participant's\r\n    ///         account\r\n    /// @notice A participant's contribution will be rejected if the presale\r\n    ///         has been funded to the maximum amount\r\n    function () payable {\r\n        // A participant cannot send funds before the presale start date\r\n        if (now < PRESALE_START_DATE) throw;\r\n        // A participant cannot send funds after the presale end date\r\n        if (now > PRESALE_END_DATE) throw;\r\n        // A participant cannot send less than the minimum amount\r\n        if (msg.value < MIN_AMOUNT) throw;\r\n        // A participant cannot send more than the maximum amount\r\n        if (msg.value > MAX_AMOUNT) throw;\r\n        // A participant cannot send funds if the presale has been reached the maximum\r\n        // funding amount\r\n        if (safeIncrement(totalFunding, msg.value) > PRESALE_MAXIMUM_FUNDING) throw;\r\n        // Register the participant's contribution\r\n        addBalance(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice The owner can withdraw ethers already during presale,\r\n    ///         only if the minimum funding level has been reached\r\n    function ownerWithdraw(uint256 value) external onlyOwner {\r\n        // The owner cannot withdraw if the presale did not reach the minimum funding amount\r\n        if (totalFunding < PRESALE_MINIMUM_FUNDING) throw;\r\n        // Withdraw the amount requested\r\n        if (!owner.send(value)) throw;\r\n    }\r\n\r\n    /// @notice The participant will need to withdraw their funds from this contract if\r\n    ///         the presale has not achieved the minimum funding level\r\n    function participantWithdrawIfMinimumFundingNotReached(uint256 value) external {\r\n        // Participant cannot withdraw before the presale ends\r\n        if (now <= PRESALE_END_DATE) throw;\r\n        // Participant cannot withdraw if the minimum funding amount has been reached\r\n        if (totalFunding >= PRESALE_MINIMUM_FUNDING) throw;\r\n        // Participant can only withdraw an amount up to their contributed balance\r\n        if (balanceOf[msg.sender] < value) throw;\r\n        // Participant's balance is reduced by the claimed amount.\r\n        balanceOf[msg.sender] = safeDecrement(balanceOf[msg.sender], value);\r\n        // Send ethers back to the participant's account\r\n        if (!msg.sender.send(value)) throw;\r\n    }\r\n\r\n    /// @notice The owner can clawback any ethers after a date in the future, so no\r\n    ///         ethers remain trapped in this contract. This will only be relevant\r\n    ///         if the minimum funding level is not reached\r\n    function ownerClawback() external onlyOwner {\r\n        // The owner cannot withdraw before the clawback date\r\n        if (now < OWNER_CLAWBACK_DATE) throw;\r\n        // Send remaining funds back to the owner\r\n        if (!owner.send(this.balance)) throw;\r\n    }\r\n\r\n    /// @dev Keep track of participants contributions and the total funding amount\r\n    function addBalance(address participant, uint256 value) private {\r\n        // Participant's balance is increased by the sent amount\r\n        balanceOf[participant] = safeIncrement(balanceOf[participant], value);\r\n        // Keep track of the total funding amount\r\n        totalFunding = safeIncrement(totalFunding, value);\r\n        // Log an event of the participant's contribution\r\n        LogParticipation(participant, value, now);\r\n    }\r\n\r\n    /// @dev Add a number to a base value. Detect overflows by checking the result is larger\r\n    ///      than the original base value.\r\n    function safeIncrement(uint256 base, uint256 increment) private constant returns (uint256) {\r\n        uint256 result = base + increment;\r\n        if (result < base) throw;\r\n        return result;\r\n    }\r\n\r\n    /// @dev Subtract a number from a base value. Detect underflows by checking that the result\r\n    ///      is smaller than the original base value\r\n    function safeDecrement(uint256 base, uint256 increment) private constant returns (uint256) {\r\n        uint256 result = base - increment;\r\n        if (result > base) throw;\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"participantWithdrawIfMinimumFundingNotReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MINIMUM_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_CLAWBACK_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAXIMUM_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClawback\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"}]","ContractName":"IungoPresale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc81b12e974ac825014e1f1030e7aae1b6551e31851be26e0dbf20675ccfb84f"}]}