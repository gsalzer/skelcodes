{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/*\r\n  Copyright 2017 Mothership Foundation https://mothership.cx\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n  of this software and associated documentation files (the \"Software\"), to\r\n  deal in the Software without restriction, including without limitation the\r\n  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n  sell copies of the Software, and to permit persons to whom the Software is\r\n  furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in\r\n  all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n  IN THE SOFTWARE.\r\n*/\r\n\r\n/// @title ERC20Basic\r\n/// @dev Simpler version of ERC20 interface\r\n/// @dev see https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20Basic.sol\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Token is ERC20Basic {\r\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @param _blockNumber The block number when the balance is queried\r\n  /// @return The balance at `_blockNumber`\r\n  function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\r\n}\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n/// functions, this simplifies the implementation of \"user permissions\".\r\n///\r\n/// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  /// account.\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /// @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  /// @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Voting is Ownable {\r\n  // Number of candidates. NOTE Candidates IDs sequience starts at 1.\r\n  uint8 public candidates;\r\n  // An interface to a token contract to check the balance\r\n  Token public msp;\r\n  // The cap for a voter's MSP balance to count in voting result\r\n  uint public cap;\r\n  // The last block that the voting period is active\r\n  uint public endBlock;\r\n\r\n  // A map to store voting candidate for each user address\r\n  mapping(address => uint8) public votes;\r\n  // A list of all voters\r\n  address[] public voters;\r\n\r\n  /// @dev Constructor to create a Voting\r\n  /// @param _candidatesCount Number of cadidates for the voting\r\n  /// @param _msp Address of the MSP token contract\r\n  /// @param _cap The cap for a voter's MSP balance to count in voting result\r\n  /// @param _endBlock The last block that the voting period is active\r\n  function Voting(uint8 _candidatesCount, address _msp, uint _cap, uint _endBlock) public {\r\n    candidates = _candidatesCount;\r\n    msp = Token(_msp);\r\n    cap = _cap;\r\n    endBlock = _endBlock;\r\n  }\r\n\r\n  /// @dev A method to signal a vote for a given `_candidate`\r\n  /// @param _candidate Voting candidate ID\r\n  function vote(uint8 _candidate) public {\r\n    require(_candidate > 0 && _candidate <= candidates);\r\n    assert(endBlock == 0 || getBlockNumber() <= endBlock);\r\n    if (votes[msg.sender] == 0) {\r\n      voters.push(msg.sender);\r\n    }\r\n    votes[msg.sender] = _candidate;\r\n    Vote(msg.sender, _candidate);\r\n  }\r\n\r\n  /// @return Number of voters\r\n  function votersCount()\r\n    public\r\n    constant\r\n    returns(uint) {\r\n    return voters.length;\r\n  }\r\n\r\n  /// @dev Queries the list with `_offset` and `_limit` of `voters`, candidates\r\n  ///  choosen and MSP amount at the current block\r\n  /// @param _offset The offset at the `voters` list\r\n  /// @param _limit The number of voters to return\r\n  /// @return The voters, candidates and MSP amount at current block\r\n  function getVoters(uint _offset, uint _limit)\r\n    public\r\n    constant\r\n    returns(address[] _voters, uint8[] _candidates, uint[] _amounts) {\r\n    return getVotersAt(_offset, _limit, getBlockNumber());\r\n  }\r\n\r\n  /// @dev Queries the list with `_offset` and `_limit` of `voters`, candidates\r\n  ///  choosen and MSP amount at a specific `_blockNumber`\r\n  /// @param _offset The offset at the `voters` list\r\n  /// @param _limit The number of voters to return\r\n  /// @param _blockNumber The block number when the voters's MSP balances is queried\r\n  /// @return The voters, candidates and MSP amount at `_blockNumber`\r\n  function getVotersAt(uint _offset, uint _limit, uint _blockNumber)\r\n    public\r\n    constant\r\n    returns(address[] _voters, uint8[] _candidates, uint[] _amounts) {\r\n\r\n    if (_offset < voters.length) {\r\n      uint count = 0;\r\n      uint resultLength = voters.length - _offset > _limit ? _limit : voters.length - _offset;\r\n      uint _block = _blockNumber > endBlock ? endBlock : _blockNumber;\r\n      _voters = new address[](resultLength);\r\n      _candidates = new uint8[](resultLength);\r\n      _amounts = new uint[](resultLength);\r\n      for(uint i = _offset; (i < voters.length) && (count < _limit); i++) {\r\n        _voters[count] = voters[i];\r\n        _candidates[count] = votes[voters[i]];\r\n        _amounts[count] = msp.balanceOfAt(voters[i], _block);\r\n        count++;\r\n      }\r\n\r\n      return(_voters, _candidates, _amounts);\r\n    }\r\n  }\r\n\r\n  function getSummary() public constant returns (uint8[] _candidates, uint[] _summary) {\r\n    uint _block = getBlockNumber() > endBlock ? endBlock : getBlockNumber();\r\n\r\n    // Fill the candidates IDs list\r\n    _candidates = new uint8[](candidates);\r\n    for(uint8 c = 1; c <= candidates; c++) {\r\n      _candidates[c - 1] = c;\r\n    }\r\n\r\n    // Get MSP impact map for each candidate\r\n    _summary = new uint[](candidates);\r\n    uint8 _candidateIndex;\r\n    for(uint i = 0; i < voters.length; i++) {\r\n      _candidateIndex = votes[voters[i]] - 1;\r\n      _summary[_candidateIndex] = _summary[_candidateIndex] + min(msp.balanceOfAt(voters[i], _block), cap);\r\n    }\r\n\r\n    return (_candidates, _summary);\r\n  }\r\n\r\n  /// @dev This method can be used by the owner to extract mistakenly\r\n  ///  sent tokens to this contract.\r\n  /// @param _token The address of the token contract that you want to recover\r\n  ///  set to 0 in case you want to extract ether.\r\n  function claimTokens(address _token) public onlyOwner {\r\n    if (_token == 0x0) {\r\n      owner.transfer(this.balance);\r\n      return;\r\n    }\r\n\r\n    ERC20Basic token = ERC20Basic(_token);\r\n    uint balance = token.balanceOf(this);\r\n    token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  /// @dev This function is overridden by the test Mocks.\r\n  function getBlockNumber() internal constant returns (uint) {\r\n    return block.number;\r\n  }\r\n\r\n  /// @dev Helper function to return a min betwen the two uints\r\n  function min(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  event Vote(address indexed _voter, uint indexed _candidate);\r\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_offset\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotersAt\",\"outputs\":[{\"name\":\"_voters\",\"type\":\"address[]\"},{\"name\":\"_candidates\",\"type\":\"uint8[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSummary\",\"outputs\":[{\"name\":\"_candidates\",\"type\":\"uint8[]\"},{\"name\":\"_summary\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offset\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"name\":\"_voters\",\"type\":\"address[]\"},{\"name\":\"_candidates\",\"type\":\"uint8[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"msp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_candidatesCount\",\"type\":\"uint8\"},{\"name\":\"_msp\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_candidate\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"}]","ContractName":"Voting","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000300000000000000000000000068aa3f232da9bdc2343465545794ef3eea5209bd00000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000000000000441f50","Library":"","SwarmSource":"bzzr://453cace4d893fe2f6baf1548d2420f1fdbc173996009e589b7503aa64814ed2a"}]}