{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    mapping (address => mapping (address => bool)) _trusted;\r\n\r\n    bytes32  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n\r\n    function DSToken(bytes32 symbol_) public {\r\n        symbol = symbol_;\r\n    }\r\n\r\n    event Trust(address indexed src, address indexed guy, bool wat);\r\n    event Mint(address indexed guy, uint wad);\r\n    event Burn(address indexed guy, uint wad);\r\n\r\n    function trusted(address src, address guy) public view returns (bool) {\r\n        return _trusted[src][guy];\r\n    }\r\n    function trust(address guy, bool wat) public stoppable {\r\n        _trusted[msg.sender][guy] = wat;\r\n        Trust(msg.sender, guy, wat);\r\n    }\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        stoppable\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender && !_trusted[src][msg.sender]) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function push(address dst, uint wad) public {\r\n        transferFrom(msg.sender, dst, wad);\r\n    }\r\n    function pull(address src, uint wad) public {\r\n        transferFrom(src, msg.sender, wad);\r\n    }\r\n    function move(address src, address dst, uint wad) public {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    function mint(uint wad) public {\r\n        mint(msg.sender, wad);\r\n    }\r\n    function burn(uint wad) public {\r\n        burn(msg.sender, wad);\r\n    }\r\n    function mint(address guy, uint wad) public auth stoppable {\r\n        _balances[guy] = add(_balances[guy], wad);\r\n        _supply = add(_supply, wad);\r\n        Mint(guy, wad);\r\n    }\r\n    function burn(address guy, uint wad) public auth stoppable {\r\n        if (guy != msg.sender && !_trusted[guy][msg.sender]) {\r\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\r\n        }\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n        _supply = sub(_supply, wad);\r\n        Burn(guy, wad);\r\n    }\r\n\r\n    // Optional token name\r\n    bytes32   public  name = \"\";\r\n\r\n    function setName(bytes32 name_) public auth {\r\n        name = name_;\r\n    }\r\n}\r\n\r\ncontract ViewlySeedSale is DSAuth, DSMath {\r\n\r\n    uint constant public MAX_FUNDING =        4000 ether;  // max funding hard-cap\r\n    uint constant public MIN_FUNDING =        1000 ether;  // min funding requirement\r\n    uint constant public MAX_TOKENS = 10 * 1000000 ether;  // token hard-cap\r\n    uint constant public BONUS =              0.15 ether;  // bonus of tokens early buyers\r\n                                                           // get over last buyers\r\n\r\n    DSToken public viewToken;         // VIEW token contract\r\n    address public beneficiary;       // destination to collect eth deposits\r\n    uint public startBlock;           // start block of sale\r\n    uint public endBlock;             // end block of sale\r\n\r\n    uint public totalEthDeposited;    // sums of ether raised\r\n    uint public totalTokensBought;    // total tokens issued on sale\r\n    uint public totalEthCollected;    // total eth collected from sale\r\n    uint public totalEthRefunded;     // total eth refunded after a failed sale\r\n\r\n    // buyers ether deposits\r\n    mapping (address => uint) public ethDeposits;\r\n    // ether refunds after a failed sale\r\n    mapping (address => uint) public ethRefunds;\r\n\r\n    enum State {\r\n        Pending,\r\n        Running,\r\n        Succeeded,\r\n        Failed\r\n    }\r\n    State public state = State.Pending;\r\n\r\n    event LogBuy(\r\n        address buyer,\r\n        uint ethDeposit,\r\n        uint tokensBought\r\n    );\r\n\r\n    event LogRefund(\r\n        address buyer,\r\n        uint ethRefund\r\n    );\r\n\r\n    event LogStartSale(\r\n        uint startBlock,\r\n        uint endBlock\r\n    );\r\n\r\n    event LogEndSale(\r\n        bool success,\r\n        uint totalEthDeposited,\r\n        uint totalTokensBought\r\n    );\r\n\r\n    event LogExtendSale(\r\n        uint blocks\r\n    );\r\n\r\n    event LogCollectEth(\r\n        uint ethCollected,\r\n        uint totalEthDeposited\r\n    );\r\n\r\n    // require given state of sale\r\n    modifier saleIn(State state_) { require(state_ == state); _; }\r\n\r\n    // check current block is inside closed interval [startBlock, endBlock]\r\n    modifier inRunningBlock() {\r\n        require(block.number >= startBlock);\r\n        require(block.number < endBlock);\r\n        _;\r\n    }\r\n    // check sender has sent some ethers\r\n    modifier ethSent() { require(msg.value > 0); _; }\r\n\r\n\r\n    // PUBLIC //\r\n\r\n    function ViewlySeedSale(DSToken viewToken_, address beneficiary_) {\r\n        viewToken = viewToken_;\r\n        beneficiary = beneficiary_;\r\n    }\r\n\r\n    function() payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() saleIn(State.Running) inRunningBlock ethSent payable {\r\n        uint tokensBought = calcTokensForPurchase(msg.value, totalEthDeposited);\r\n        ethDeposits[msg.sender] = add(msg.value, ethDeposits[msg.sender]);\r\n        totalEthDeposited = add(msg.value, totalEthDeposited);\r\n        totalTokensBought = add(tokensBought, totalTokensBought);\r\n\r\n        require(totalEthDeposited <= MAX_FUNDING);\r\n        require(totalTokensBought <= MAX_TOKENS);\r\n\r\n        viewToken.mint(msg.sender, tokensBought);\r\n\r\n        LogBuy(msg.sender, msg.value, tokensBought);\r\n    }\r\n\r\n    function claimRefund() saleIn(State.Failed) {\r\n      require(ethDeposits[msg.sender] > 0);\r\n      require(ethRefunds[msg.sender] == 0);\r\n\r\n      uint ethRefund = ethDeposits[msg.sender];\r\n      ethRefunds[msg.sender] = ethRefund;\r\n      totalEthRefunded = add(ethRefund, totalEthRefunded);\r\n      msg.sender.transfer(ethRefund);\r\n\r\n      LogRefund(msg.sender, ethRefund);\r\n    }\r\n\r\n\r\n    // AUTH REQUIRED //\r\n\r\n    function startSale(uint duration, uint blockOffset) auth saleIn(State.Pending) {\r\n        require(duration > 0);\r\n        require(blockOffset >= 0);\r\n\r\n        startBlock = add(block.number, blockOffset);\r\n        endBlock   = add(startBlock, duration);\r\n        state      = State.Running;\r\n\r\n        LogStartSale(startBlock, endBlock);\r\n    }\r\n\r\n    function endSale() auth saleIn(State.Running) {\r\n        if (totalEthDeposited >= MIN_FUNDING)\r\n          state = State.Succeeded;\r\n        else\r\n          state = State.Failed;\r\n\r\n        viewToken.stop();\r\n        LogEndSale(state == State.Succeeded, totalEthDeposited, totalTokensBought);\r\n    }\r\n\r\n    function extendSale(uint blocks) auth saleIn(State.Running) {\r\n        require(blocks > 0);\r\n\r\n        endBlock = add(endBlock, blocks);\r\n        LogExtendSale(blocks);\r\n    }\r\n\r\n    function collectEth() auth {\r\n        require(totalEthDeposited >= MIN_FUNDING);\r\n        require(this.balance > 0);\r\n\r\n        uint ethToCollect = this.balance;\r\n        totalEthCollected = add(totalEthCollected, ethToCollect);\r\n        beneficiary.transfer(ethToCollect);\r\n        LogCollectEth(ethToCollect, totalEthDeposited);\r\n    }\r\n\r\n\r\n    // PRIVATE //\r\n\r\n    uint constant averageTokensPerEth = wdiv(MAX_TOKENS, MAX_FUNDING);\r\n    uint constant endingTokensPerEth = wdiv(2 * averageTokensPerEth, 2 ether + BONUS);\r\n\r\n    // calculate number of tokens buyer get when sending 'ethSent' ethers\r\n    // after 'ethDepostiedSoFar` already reeived in the sale\r\n    function calcTokensForPurchase(uint ethSent, uint ethDepositedSoFar)\r\n        private view\r\n        returns (uint tokens)\r\n    {\r\n        uint tokensPerEthAtStart = calcTokensPerEth(ethDepositedSoFar);\r\n        uint tokensPerEthAtEnd = calcTokensPerEth(add(ethDepositedSoFar, ethSent));\r\n        uint averageTokensPerEth = add(tokensPerEthAtStart, tokensPerEthAtEnd) / 2;\r\n\r\n        // = ethSent * averageTokensPerEthInThisPurchase\r\n        return wmul(ethSent, averageTokensPerEth);\r\n    }\r\n\r\n    // return tokensPerEth for 'nthEther' of total contribution (MAX_FUNDING)\r\n    function calcTokensPerEth(uint nthEther)\r\n        private view\r\n        returns (uint)\r\n    {\r\n        uint shareOfSale = wdiv(nthEther, MAX_FUNDING);\r\n        uint shareOfBonus = sub(1 ether, shareOfSale);\r\n        uint actualBonus = wmul(shareOfBonus, BONUS);\r\n\r\n        // = endingTokensPerEth * (1 + shareOfBonus * BONUS)\r\n        return wmul(endingTokensPerEth, add(1 ether, actualBonus));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"extendSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"blockOffset\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"viewToken_\",\"type\":\"address\"},{\"name\":\"beneficiary_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethRefund\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"LogStartSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"totalEthDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokensBought\",\"type\":\"uint256\"}],\"name\":\"LogEndSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"LogExtendSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalEthDeposited\",\"type\":\"uint256\"}],\"name\":\"LogCollectEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"ViewlySeedSale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f03f8d65bafa598611c3495124093c56e8f638f0000000000000000000000000f6e51ae30705cd7248d4d9ac602cb58cc4b61a52","Library":"","SwarmSource":"bzzr://9b827f5cc9ecc8041fce79429b471983665e2a1aff71503c9c2857fb842cacdf"}]}