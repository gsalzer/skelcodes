{"status":"1","message":"OK","result":[{"SourceCode":"/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.18;\r\n\r\n/*************************************************************************\r\n * import \"./math/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"./math/SafeMath.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ownership/Ownable.sol\" : start\r\n *************************************************************************/\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public { owner = msg.sender; }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}/*************************************************************************\r\n * import \"./ownership/Ownable.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./TraceToken.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"./token/MintableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    // mitigating the race condition\r\n    assert(allowed[msg.sender][_spender] == 0 || _value == 0);\r\n    \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"./token/MintableToken.sol\" : end\r\n *************************************************************************/\r\n\r\ncontract TraceToken is MintableToken {\r\n\r\n    string public constant name = 'Trace Token';\r\n    string public constant symbol = 'TRACE';\r\n    uint8 public constant decimals = 18;\r\n    bool public transferAllowed = false;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event TransferAllowed(bool transferIsAllowed);\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished && transferAllowed);\r\n        _;        \r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) canTransfer public returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) canTransfer public returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function mint(address contributor, uint256 amount) public returns (bool) {\r\n        return super.mint(contributor, amount);\r\n    }\r\n\r\n    function endMinting(bool _transferAllowed) public returns (bool) {\r\n        transferAllowed = _transferAllowed;\r\n        TransferAllowed(_transferAllowed);\r\n        return super.finishMinting();\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"./TraceToken.sol\" : end\r\n *************************************************************************/\r\n\r\ncontract TraceTokenSale is Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Presale token\r\n\tTraceToken public token;\r\n\r\n  // amount of tokens in existance - 500mil TRACE = 5e26 Tracks\r\n  uint256 public constant TOTAL_NUM_TOKENS = 5e26; // 1 TRACE = 1e18 Tracks, all units in contract in Tracks\r\n  uint256 public constant tokensForSale = 25e25; // 50% of all tokens\r\n\r\n  // totalEthers received\r\n  uint256 public totalEthers = 0;\r\n\r\n  // Minimal possible cap in ethers\r\n  uint256 public constant softCap = 3984.064 ether; \r\n  // Maximum possible cap in ethers\r\n  uint256 public constant hardCap = 17928.287 ether; \r\n  \r\n  uint256 public constant presaleLimit = 7968.127 ether; \r\n  bool public presaleLimitReached = false;\r\n\r\n  // Minimum and maximum investments in Ether\r\n  uint256 public constant min_investment_eth = 0.5 ether; // fixed value, not changing\r\n  uint256 public constant max_investment_eth = 398.4064 ether; \r\n\r\n  uint256 public constant min_investment_presale_eth = 5 ether; // fixed value, not changing\r\n\r\n  // refund if softCap is not reached\r\n  bool public refundAllowed = false;\r\n\r\n  // pause flag\r\n  bool public paused = false;\r\n\r\n  uint256 public constant bountyReward = 1e25;\r\n  uint256 public constant preicoAndAdvisors = 4e25;\r\n  uint256 public constant liquidityPool = 25e24;\r\n  uint256 public constant futureDevelopment = 1e26; \r\n  uint256 public constant teamAndFounders = 75e24;  \r\n\r\n  uint256 public leftOverTokens = 0;\r\n\r\n  uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)];\r\n  uint256[2]  public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)];\r\n\r\n\r\n  // Withdraw multisig wallet\r\n  address public wallet;\r\n\r\n  // Withdraw multisig wallet\r\n  address public teamAndFoundersWallet;\r\n\r\n  // Withdraw multisig wallet\r\n  address public advisorsAndPreICO;\r\n\r\n  // Token per ether\r\n  uint256 public constant token_per_wei = 12550;\r\n\r\n  // start and end timestamp where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 private constant weekInSeconds = 86400 * 7;\r\n\r\n  // whitelist addresses and planned investment amounts\r\n  mapping(address => uint256) public whitelist;\r\n\r\n  // amount of ether received from token buyers\r\n  mapping(address => uint256) public etherBalances;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event Whitelist(address indexed beneficiary, uint256 value);\r\n  event SoftCapReached();\r\n  event Finalized();\r\n\r\n  function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public {\r\n    require(_startTime >=  now);\r\n    require(_wallet != 0x0);\r\n    require(_teamAndFoundersWallet != 0x0);\r\n    require(_advisorsAndPreICO != 0x0);\r\n\r\n    token = TraceToken(traceTokenAddress);\r\n    wallet = _wallet;\r\n    teamAndFoundersWallet = _teamAndFoundersWallet;\r\n    advisorsAndPreICO = _advisorsAndPreICO;\r\n    startTime = _startTime;\r\n    endTime = _startTime + 4 * weekInSeconds; // the sale lasts a maximum of 5 weeks\r\n    \r\n  }\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n     function() public payable {\r\n       return buyTokens(msg.sender);\r\n     }\r\n\r\n     function calcAmount() internal view returns (uint256) {\r\n\r\n      if (totalEthers >= presaleLimit || startTime + 2 * weekInSeconds  < now ){\r\n        // presale has ended\r\n        return msg.value.mul(token_per_wei);\r\n        }else{\r\n          // presale ongoing\r\n          require(msg.value >= min_investment_presale_eth);\r\n\r\n          /* discount 20 % in the first week - presale week 1 */\r\n          if (now <= startTime + weekInSeconds) {\r\n            return msg.value.mul(token_per_wei.mul(100)).div(80);\r\n\r\n          }\r\n\r\n          /* discount 15 % in the second week - presale week 2 */\r\n          if ( startTime +  weekInSeconds  < now ) {\r\n           return msg.value.mul(token_per_wei.mul(100)).div(85);\r\n         }\r\n       }\r\n\r\n     }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n     function buyTokens(address contributor) public payable {\r\n       require(!hasEnded());\r\n       require(!isPaused());\r\n       require(validPurchase());\r\n       require(checkWhitelist(contributor,msg.value));\r\n       uint256 amount = calcAmount();\r\n       require((token.totalSupply() + amount) <= TOTAL_NUM_TOKENS);\r\n       \r\n       whitelist[contributor] = whitelist[contributor].sub(msg.value);\r\n       etherBalances[contributor] = etherBalances[contributor].add(msg.value);\r\n\r\n       totalEthers = totalEthers.add(msg.value);\r\n\r\n       token.mint(contributor, amount);\r\n       require(totalEthers <= hardCap); \r\n       TokenPurchase(0x0, contributor, msg.value, amount);\r\n     }\r\n\r\n\r\n     // @return user balance\r\n     function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return token.balanceOf(_owner);\r\n    }\r\n\r\n    function checkWhitelist(address contributor, uint256 eth_amount) public view returns (bool) {\r\n     require(contributor!=0x0);\r\n     require(eth_amount>0);\r\n     return (whitelist[contributor] >= eth_amount);\r\n   }\r\n\r\n   function addWhitelist(address contributor, uint256 eth_amount) onlyOwner public returns (bool) {\r\n     require(!hasEnded());\r\n     require(contributor!=0x0);\r\n     require(eth_amount>0);\r\n     Whitelist(contributor, eth_amount);\r\n     whitelist[contributor] = eth_amount;\r\n     return true;\r\n   }\r\n\r\n   function addWhitelists(address[] contributors, uint256[] amounts) onlyOwner public returns (bool) {\r\n     require(!hasEnded());\r\n     address contributor;\r\n     uint256 amount;\r\n     require(contributors.length == amounts.length);\r\n\r\n     for (uint i = 0; i < contributors.length; i++) {\r\n      contributor = contributors[i];\r\n      amount = amounts[i];\r\n      require(addWhitelist(contributor, amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  function validPurchase() internal view returns (bool) {\r\n\r\n   bool withinPeriod = now >= startTime && now <= endTime;\r\n   bool withinPurchaseLimits = msg.value >= min_investment_eth && msg.value <= max_investment_eth;\r\n   return withinPeriod && withinPurchaseLimits;\r\n }\r\n\r\n function hasStarted() public view returns (bool) {\r\n  return now >= startTime;\r\n}\r\n\r\nfunction hasEnded() public view returns (bool) {\r\n  return now > endTime || token.totalSupply() == TOTAL_NUM_TOKENS;\r\n}\r\n\r\n\r\nfunction hardCapReached() public view returns (bool) {\r\n  return hardCap.mul(999).div(1000) <= totalEthers; \r\n}\r\n\r\nfunction softCapReached() public view returns(bool) {\r\n  return totalEthers >= softCap;\r\n}\r\n\r\n\r\nfunction withdraw() onlyOwner public {\r\n  require(softCapReached());\r\n  require(this.balance > 0);\r\n\r\n  wallet.transfer(this.balance);\r\n}\r\n\r\nfunction withdrawTokenToFounders() onlyOwner public {\r\n  require(softCapReached());\r\n  require(hasEnded());\r\n\r\n  if (now > startTime + 720 days && founderAmounts[7]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[7]);\r\n    founderAmounts[7] = 0;\r\n  }\r\n\r\n  if (now > startTime + 630 days && founderAmounts[6]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[6]);\r\n    founderAmounts[6] = 0;\r\n  }\r\n  if (now > startTime + 540 days && founderAmounts[5]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[5]);\r\n    founderAmounts[5] = 0;\r\n  }\r\n  if (now > startTime + 450 days && founderAmounts[4]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[4]);\r\n    founderAmounts[4] = 0;\r\n  }\r\n  if (now > startTime + 360 days&& founderAmounts[3]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[3]);\r\n    founderAmounts[3] = 0;\r\n  }\r\n  if (now > startTime + 270 days && founderAmounts[2]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[2]);\r\n    founderAmounts[2] = 0;\r\n  }\r\n  if (now > startTime + 180 days && founderAmounts[1]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[1]);\r\n    founderAmounts[1] = 0;\r\n  }\r\n  if (now > startTime + 90 days && founderAmounts[0]!=0){\r\n    token.transfer(teamAndFoundersWallet, founderAmounts[0]);\r\n    founderAmounts[0] = 0;\r\n  }\r\n}\r\n\r\nfunction withdrawTokensToAdvisors() onlyOwner public {\r\n  require(softCapReached());\r\n  require(hasEnded());\r\n\r\n  if (now > startTime + 180 days && preicoAndAdvisorsAmounts[1]!=0){\r\n    token.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[1]);\r\n    preicoAndAdvisorsAmounts[1] = 0;\r\n  }\r\n\r\n  if (now > startTime + 90 days && preicoAndAdvisorsAmounts[0]!=0){\r\n    token.transfer(advisorsAndPreICO, preicoAndAdvisorsAmounts[0]);\r\n    preicoAndAdvisorsAmounts[0] = 0;\r\n  }\r\n}\r\n\r\nfunction refund() public {\r\n  require(refundAllowed);\r\n  require(hasEnded());\r\n  require(!softCapReached());\r\n  require(etherBalances[msg.sender] > 0);\r\n  require(token.balanceOf(msg.sender) > 0);\r\n\r\n  uint256 current_balance = etherBalances[msg.sender];\r\n  etherBalances[msg.sender] = 0;\r\n  token.transfer(this,token.balanceOf(msg.sender)); // burning tokens by sending back to contract\r\n  msg.sender.transfer(current_balance);\r\n}\r\n\r\n\r\nfunction finishCrowdsale() onlyOwner public returns (bool){\r\n  require(!token.mintingFinished());\r\n  require(hasEnded() || hardCapReached());\r\n\r\n  if(softCapReached()) {\r\n    token.mint(wallet, bountyReward);\r\n    token.mint(advisorsAndPreICO,  preicoAndAdvisors.div(5)); //20% available immediately\r\n    token.mint(wallet, liquidityPool);\r\n    token.mint(wallet, futureDevelopment);\r\n    token.mint(this, teamAndFounders);\r\n    token.mint(this, preicoAndAdvisors.mul(4).div(5)); \r\n    leftOverTokens = TOTAL_NUM_TOKENS.sub(token.totalSupply());\r\n    token.mint(wallet,leftOverTokens); // will be equaly distributed among all presale and sale contributors after the sale\r\n\r\n    token.endMinting(true);\r\n    return true;\r\n    } else {\r\n      refundAllowed = true;\r\n      token.endMinting(false);\r\n      return false;\r\n    }\r\n\r\n    Finalized();\r\n  }\r\n\r\n\r\n  // additional functionality, used to pause crowdsale for 24h\r\n  function pauseSale() onlyOwner public returns (bool){\r\n    paused = true;\r\n    return true;\r\n  }\r\n\r\n  function unpauseSale() onlyOwner public returns (bool){\r\n    paused = false;\r\n    return true;\r\n  }\r\n\r\n  function isPaused() public view returns (bool){\r\n    return paused;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preicoAndAdvisorsAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleLimitReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_investment_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokenToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_investment_presale_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftOverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_per_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoAndAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndFoundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureDevelopment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"addWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAndPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_NUM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_investment_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokensToAdvisors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"founderAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"traceTokenAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_teamAndFoundersWallet\",\"type\":\"address\"},{\"name\":\"_advisorsAndPreICO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TraceTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a5c89b000000000000000000000000015f12133d7a2a925b7458241d8e90dd500cc550d000000000000000000000000cc10fcd3200850a4ca48c3bb8943e65cb0ae95ec00000000000000000000000020e2ab81e11d4d02fe71b8cf9e8e3c9e2f714d5e000000000000000000000000c199d855972ed8b93e3c6b24a569ffc0ed01b1a9","Library":"","SwarmSource":"bzzr://597e9d5e4372f4e4f152e23cfb6f18e3bea206e8ee095f54cb3ea0b64f046415"}]}