{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * WorldCoin: https://worldcoin.cash\r\n */\r\n\r\n//====== Open Zeppelin Library =====\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n  /**\r\n   * @dev Reclaim ownership of Ownable contracts\r\n   * @param contractAddr The address of the Ownable to be reclaimed.\r\n   */\r\n  function reclaimContract(address contractAddr) external onlyOwner {\r\n    Ownable contractInst = Ownable(contractAddr);\r\n    contractInst.transferOwnership(owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC23 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n//====== BurnableToken =====\r\n\r\ncontract BurnableToken is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Burn(address indexed from, uint256 amount);\r\n    event BurnRewardIncreased(address indexed from, uint256 value);\r\n\r\n    /**\r\n    * @dev Sending ether to contract increases burning reward \r\n    */\r\n    function() payable public {\r\n        if(msg.value > 0){\r\n            BurnRewardIncreased(msg.sender, msg.value);    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates how much ether one will receive in reward for burning tokens\r\n     * @param _amount of tokens to be burned\r\n     */\r\n    function burnReward(uint256 _amount) public constant returns(uint256){\r\n        return this.balance.mul(_amount).div(totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns tokens and send reward\r\n    * This is internal function because it DOES NOT check \r\n    * if _from has allowance to burn tokens.\r\n    * It is intended to be used in transfer() and transferFrom() which do this check.\r\n    * @param _from The address which you want to burn tokens from\r\n    * @param _amount of tokens to be burned\r\n    */\r\n    function burn(address _from, uint256 _amount) internal returns(bool){\r\n        require(balances[_from] >= _amount);\r\n        \r\n        uint256 reward = burnReward(_amount);\r\n        assert(this.balance - reward > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        //assert(totalSupply >= 0); //Check is not needed because totalSupply.sub(value) will already throw if this condition is not met\r\n        \r\n        _from.transfer(reward);\r\n        Burn(_from, _amount);\r\n        Transfer(_from, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers or burns tokens\r\n    * Burns tokens transferred to this contract itself or to zero address\r\n    * @param _to The address to transfer to or token contract address to burn.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if( (_to == address(this)) || (_to == 0) ){\r\n            return burn(msg.sender, _value);\r\n        }else{\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another \r\n    * or burns them if _to is this contract or zero address\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if( (_to == address(this)) || (_to == 0) ){\r\n            var _allowance = allowed[_from][msg.sender];\r\n            //require (_value <= _allowance); //Check is not needed because _allowance.sub(_value) will already throw if this condition is not met\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n            return burn(_from, _value);\r\n        }else{\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//====== WorldCoin Contracts =====\r\n\r\n/**\r\n * @title WorldCoin token\r\n */\r\ncontract WorldCoin is BurnableToken, MintableToken, HasNoContracts, HasNoTokens { //MintableToken is StandardToken, Ownable\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"World Coin Network\";\r\n    string public symbol = \"WCN\";\r\n    uint256 public decimals = 18;\r\n\r\n\r\n    /**\r\n     * Allow transfer only after crowdsale finished\r\n     */\r\n    modifier canTransfer() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\r\n        return BurnableToken.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\r\n        return BurnableToken.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title WorldCoin Crowdsale\r\n */\r\ncontract WorldCoinCrowdsale is Ownable, HasNoContracts, HasNoTokens {\r\n    using SafeMath for uint256;\r\n\r\n    uint32 private constant PERCENT_DIVIDER = 100;\r\n\r\n    WorldCoin public token;\r\n\r\n    struct Round {\r\n        uint256 start;      //Timestamp of crowdsale round start\r\n        uint256 end;        //Timestamp of crowdsale round end\r\n        uint256 rate;       //Rate: how much TOKEN one will get fo 1 ETH during this round\r\n    }\r\n    Round[] public rounds;  //Array of crowdsale rounds\r\n\r\n\r\n    uint256 public founderPercent;      //how many tokens will be sent to founder (percent of purshased token)\r\n    uint256 public partnerBonusPercent; //referral partner bonus (percent of purshased token)\r\n    uint256 public referralBonusPercent;//referral buyer bonus (percent of purshased token)\r\n    uint256 public hardCap;             //Maximum amount of tokens mined\r\n    uint256 public totalCollected;      //total amount of collected funds (in ethereum wei)\r\n    uint256 public tokensMinted;        //total amount of minted tokens\r\n    bool public finalized;              //crowdsale is finalized\r\n\r\n    /**\r\n     * @dev WorldCoin Crowdsale Contract\r\n     * @param _founderPercent Amount of tokens sent to founder with each purshase (percent of purshased token)\r\n     * @param _partnerBonusPercent Referral partner bonus (percent of purshased token)\r\n     * @param _referralBonusPercent Referral buyer bonus (percent of purshased token)\r\n     * @param _hardCap Maximum amount of ether (in wei) to be collected during crowdsale\r\n     * @param roundStarts List of round start timestams\r\n     * @param roundEnds List of round end timestams \r\n     * @param roundRates List of round rates (tokens for 1 ETH)\r\n     */\r\n    function WorldCoinCrowdsale (\r\n        uint256 _founderPercent,\r\n        uint256 _partnerBonusPercent,\r\n        uint256 _referralBonusPercent,\r\n        uint256 _hardCap,\r\n        uint256[] roundStarts,\r\n        uint256[] roundEnds,\r\n        uint256[] roundRates\r\n    ) public {\r\n\r\n        //Check all paramaters are correct and create rounds\r\n        require(_hardCap > 0);                    //Need something to sell\r\n        require(\r\n            (roundStarts.length > 0)  &&                //There should be at least one round\r\n            (roundStarts.length == roundEnds.length) &&\r\n            (roundStarts.length == roundRates.length)\r\n        );                   \r\n        uint256 prevRoundEnd = now;\r\n        rounds.length = roundStarts.length;             //initialize rounds array\r\n        for(uint8 i=0; i < roundStarts.length; i++){\r\n            rounds[i] = Round(roundStarts[i], roundEnds[i], roundRates[i]);\r\n            Round storage r = rounds[i];\r\n            require(prevRoundEnd <= r.start);\r\n            require(r.start < r.end);\r\n            require(r.rate > 0);\r\n            prevRoundEnd = rounds[i].end;\r\n        }\r\n\r\n        hardCap = _hardCap;\r\n        partnerBonusPercent = _partnerBonusPercent;\r\n        referralBonusPercent = _referralBonusPercent;\r\n        founderPercent = _founderPercent;\r\n        //founderPercentWithReferral = founderPercent * (rate + partnerBonusPercent + referralBonusPercent) / rate;  //Did not use SafeMath here, because this parameters defined by contract creator should not be malicious. Also have checked result on the next line.\r\n        //assert(founderPercentWithReferral >= founderPercent);\r\n\r\n        token = new WorldCoin();\r\n    }\r\n\r\n    /**\r\n    * @dev Fetches current Round number\r\n    * @return round number (index in rounds array + 1) or 0 if none\r\n    */\r\n    function currentRoundNum() constant public returns(uint8) {\r\n        for(uint8 i=0; i < rounds.length; i++){\r\n            if( (now > rounds[i].start) && (now <= rounds[i].end) ) return i+1;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n    * @dev Fetches current rate (how many tokens you get for 1 ETH)\r\n    * @return calculated rate or zero if no round of crowdsale is running\r\n    */\r\n    function currentRate() constant public returns(uint256) {\r\n        uint8 roundNum = currentRoundNum();\r\n        if(roundNum == 0) {\r\n            return 0;\r\n        }else{\r\n            return rounds[roundNum-1].rate;\r\n        }\r\n    }\r\n\r\n    function firstRoundStartTimestamp() constant public returns(uint256){\r\n        return rounds[0].start;\r\n    }\r\n    function lastRoundEndTimestamp() constant public returns(uint256){\r\n        return rounds[rounds.length - 1].end;\r\n    }\r\n\r\n    /**\r\n    * @dev Shows if crowdsale is running\r\n    */ \r\n    function crowdsaleRunning() constant public returns(bool){\r\n        return !finalized && (tokensMinted < hardCap) && (currentRoundNum() > 0);\r\n    }\r\n\r\n    /**\r\n    * @dev Buy WorldCoin tokens\r\n    */\r\n    function() payable public {\r\n        sale(msg.sender, 0x0);\r\n    } \r\n\r\n    /**\r\n    * @dev Buy WorldCoin tokens witn referral program\r\n    */\r\n    function sale(address buyer, address partner) public payable {\r\n        if(!crowdsaleRunning()) revert();\r\n        require(msg.value > 0);\r\n        uint256 rate = currentRate();\r\n        assert(rate > 0);\r\n\r\n        uint256 referralTokens; uint256 partnerTokens; uint256 ownerTokens;\r\n        uint256 tokens = rate.mul(msg.value);\r\n        assert(tokens > 0);\r\n        totalCollected = totalCollected.add(msg.value);\r\n        if(partner == 0x0){\r\n            ownerTokens     = tokens.mul(founderPercent).div(PERCENT_DIVIDER);\r\n            mintTokens(buyer, tokens);\r\n            mintTokens(owner, ownerTokens);\r\n        }else{\r\n            partnerTokens   = tokens.mul(partnerBonusPercent).div(PERCENT_DIVIDER);\r\n            referralTokens  = tokens.mul(referralBonusPercent).div(PERCENT_DIVIDER);\r\n            ownerTokens     = (tokens.add(partnerTokens).add(referralTokens)).mul(founderPercent).div(PERCENT_DIVIDER);\r\n            \r\n            uint256 totalBuyerTokens = tokens.add(referralTokens);\r\n            mintTokens(buyer, totalBuyerTokens);\r\n            mintTokens(partner, partnerTokens);\r\n            mintTokens(owner, ownerTokens);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Mint tokens for purshases with Non-Ether currencies\r\n    * @param beneficiary whom to send tokend\r\n    * @param amount how much tokens to send\r\n    * param message reason why we are sending tokens (not stored anythere, only in transaction itself)\r\n    */\r\n    function saleNonEther(address beneficiary, uint256 amount, string /*message*/) public onlyOwner {\r\n        mintTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Updates rate for the round\r\n    */\r\n    function setRoundRate(uint32 roundNum, uint256 rate) public onlyOwner {\r\n        require(roundNum < rounds.length);\r\n        rounds[roundNum].rate = rate;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Sends collected funds to owner\r\n    * May be executed only if goal reached and no refunds are possible\r\n    */\r\n    function claimEther() public onlyOwner {\r\n        if(this.balance > 0){\r\n            owner.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Finalizes ICO when one of conditions met:\r\n    * - end time reached OR\r\n    * - no more tokens available (cap reached) OR\r\n    * - message sent by owner\r\n    */\r\n    function finalizeCrowdsale() public {\r\n        require ( (now > lastRoundEndTimestamp()) || (totalCollected == hardCap) || (msg.sender == owner) );\r\n        finalized = token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        if(this.balance > 0){\r\n            owner.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper function to mint tokens and increase tokensMinted counter\r\n    */\r\n    function mintTokens(address beneficiary, uint256 amount) internal {\r\n        tokensMinted = tokensMinted.add(amount);\r\n        require(tokensMinted <= hardCap);\r\n        assert(token.mint(beneficiary, amount));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"saleNonEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"sale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRoundEndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundNum\",\"type\":\"uint32\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRoundRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderPercent\",\"type\":\"uint256\"},{\"name\":\"_partnerBonusPercent\",\"type\":\"uint256\"},{\"name\":\"_referralBonusPercent\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"roundStarts\",\"type\":\"uint256[]\"},{\"name\":\"roundEnds\",\"type\":\"uint256[]\"},{\"name\":\"roundRates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WorldCoinCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000005a652980000000000000000000000000000000000000000000000000000000005a8e0800000000000000000000000000000000000000000000000000000000005ab2f2000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000005a8e0800000000000000000000000000000000000000000000000000000000005ab2f200000000000000000000000000000000000000000000000000000000005adbd08000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000001c20000000000000000000000000000000000000000000000000000000000000128e0000000000000000000000000000000000000000000000000000000000000dac","Library":"","SwarmSource":"bzzr://87d72127d9eb0a8b5e93938ed47e5309713ea1c1213524757a3861a345b89dcf"}]}