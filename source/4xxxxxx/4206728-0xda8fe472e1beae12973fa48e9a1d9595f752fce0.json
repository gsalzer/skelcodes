{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyowner() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Mortal is Owned {\r\n    \r\n    function kill() {\r\n        if (msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract Slotthereum is Mortal {\r\n\r\n    Game[] public games;                              // games\r\n    uint public numberOfGames = 0;                    // number of games\r\n    uint private minBetAmount = 100000000000000;      // minimum amount per bet\r\n    uint private maxBetAmount = 5000000000000000000;  // maximum amount per bet\r\n    uint8 private pointer = 1;                        // block pointer\r\n\r\n    struct Game {\r\n        address player;\r\n        uint id;\r\n        uint amount;\r\n        uint8 start;\r\n        uint8 end;\r\n        bytes32 hash;\r\n        uint8 number;\r\n        bool win;\r\n        uint prize;\r\n    }\r\n\r\n    event MinBetAmountChanged(uint amount);\r\n    event MaxBetAmountChanged(uint amount);\r\n    event PointerChanged(uint8 value);\r\n\r\n    event GameRoll(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint amount\r\n    );\r\n\r\n    event GameWin(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint8 number,\r\n        uint amount,\r\n        uint prize\r\n    );\r\n\r\n    event GameLoose(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint8 number,\r\n        uint amount,\r\n        uint prize\r\n    );\r\n\r\n    function notify(address player, uint gameId, uint8 start, uint8 end, uint8 number, uint amount, uint prize, bool win) internal {\r\n        if (win) {\r\n            GameWin(\r\n                player,\r\n                gameId,\r\n                start,\r\n                end,\r\n                number,\r\n                amount,\r\n                prize\r\n            );\r\n        } else {\r\n            GameLoose(\r\n                player,\r\n                gameId,\r\n                start,\r\n                end,\r\n                number,\r\n                amount,\r\n                prize\r\n            );\r\n        }\r\n    }\r\n\r\n    function getBlockHash(uint i) internal constant returns (bytes32 blockHash) {\r\n        if (i > 255) {\r\n            i = 255;\r\n        }\r\n        if (i < 0) {\r\n            i = 1;\r\n        }\r\n        blockHash = block.blockhash(block.number - i);\r\n    }\r\n\r\n    function getNumber(bytes32 _a) internal constant returns (uint8) {\r\n        // uint8 mint = pointer;\r\n        uint8 mint = 0;\r\n        for (uint i = 31; i >= 1; i--) {\r\n            if ((uint8(_a[i]) >= 48) && (uint8(_a[i]) <= 57)) {\r\n                return uint8(_a[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function placeBet(uint8 start, uint8 end) public payable returns (bool) {\r\n        if (msg.value < minBetAmount) {\r\n            return false;\r\n        }\r\n\r\n        if (msg.value > maxBetAmount) {\r\n            return false;\r\n        }\r\n\r\n        uint8 counter = end - start + 1;\r\n\r\n        if (counter > 9) {\r\n            return false;\r\n        }\r\n\r\n        if (counter < 1) {\r\n            return false;\r\n        }\r\n\r\n        uint gameId = games.length;\r\n        games.length++;\r\n        numberOfGames++;\r\n\r\n        GameRoll(msg.sender, gameId, start, end, msg.value);\r\n\r\n        games[gameId].id = gameId;\r\n        games[gameId].player = msg.sender;\r\n        games[gameId].amount = msg.value;\r\n        games[gameId].start = start;\r\n        games[gameId].end = end;\r\n        games[gameId].hash = getBlockHash(pointer);\r\n        games[gameId].number = getNumber(games[gameId].hash);\r\n        // pointer = games[gameId].number;\r\n\r\n        if ((games[gameId].number >= start) && (games[gameId].number <= end)) {\r\n            games[gameId].win = true;\r\n            uint dec = msg.value / 10;\r\n            uint parts = 10 - counter;\r\n            games[gameId].prize = msg.value + dec * parts;\r\n        } else {\r\n            games[gameId].prize = 1;\r\n        }\r\n\r\n        msg.sender.transfer(games[gameId].prize);\r\n\r\n        notify(\r\n            msg.sender,\r\n            gameId,\r\n            start,\r\n            end,\r\n            games[gameId].number,\r\n            msg.value,\r\n            games[gameId].prize,\r\n            games[gameId].win\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function setMinBetAmount(uint _minBetAmount) onlyowner returns (uint) {\r\n        minBetAmount = _minBetAmount;\r\n        MinBetAmountChanged(minBetAmount);\r\n        return minBetAmount;\r\n    }\r\n\r\n    function setMaxBetAmount(uint _maxBetAmount) onlyowner returns (uint) {\r\n        maxBetAmount = _maxBetAmount;\r\n        MaxBetAmountChanged(maxBetAmount);\r\n        return maxBetAmount;\r\n    }\r\n\r\n    function setPointer(uint8 _pointer) onlyowner returns (uint) {\r\n        pointer = _pointer;\r\n        PointerChanged(pointer);\r\n        return pointer;\r\n    }\r\n\r\n    function getGameIds() constant returns(uint[]) {\r\n        uint[] memory ids = new uint[](games.length);\r\n        for (uint i = 0; i < games.length; i++) {\r\n            ids[i] = games[i].id;\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    function getGamePlayer(uint gameId) constant returns(address) {\r\n        return games[gameId].player;\r\n    }\r\n\r\n    function getGameAmount(uint gameId) constant returns(uint) {\r\n        return games[gameId].amount;\r\n    }\r\n\r\n    function getGameStart(uint gameId) constant returns(uint8) {\r\n        return games[gameId].start;\r\n    }\r\n\r\n    function getGameEnd(uint gameId) constant returns(uint8) {\r\n        return games[gameId].end;\r\n    }\r\n\r\n    function getGameHash(uint gameId) constant returns(bytes32) {\r\n        return games[gameId].hash;\r\n    }\r\n\r\n    function getGameNumber(uint gameId) constant returns(uint8) {\r\n        return games[gameId].number;\r\n    }\r\n\r\n    function getGameWin(uint gameId) constant returns(bool) {\r\n        return games[gameId].win;\r\n    }\r\n\r\n    function getGamePrize(uint gameId) constant returns(uint) {\r\n        return games[gameId].prize;\r\n    }\r\n\r\n    function getMinBetAmount() constant returns(uint) {\r\n        return minBetAmount;\r\n    }\r\n\r\n    function getMaxBetAmount() constant returns(uint) {\r\n        return maxBetAmount;\r\n    }\r\n\r\n    function () payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint8\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"win\",\"type\":\"bool\"},{\"name\":\"prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameWin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pointer\",\"type\":\"uint8\"}],\"name\":\"setPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinBetAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBetAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"PointerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameLoose\",\"type\":\"event\"}]","ContractName":"Slotthereum","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3ff19c8320599a9e6211a5412feac04699f4d2c9f791f412a5e6fa551e6dae9"}]}