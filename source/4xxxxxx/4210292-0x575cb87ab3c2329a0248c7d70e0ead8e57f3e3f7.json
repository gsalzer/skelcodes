{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    require (!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require (halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract AhooleeToken is StandardToken {\r\n\r\n  string public name = \"Ahoolee Token\";\r\n  string public symbol = \"AHT\";\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 100000000 * 1 ether;\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens. \r\n   */\r\n  function AhooleeToken() {\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract AhooleeTokenSale is Haltable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Ahoolee Token Sale\";\r\n\r\n    AhooleeToken public token;\r\n    address public beneficiary;\r\n\r\n    uint public hardCapLow;\r\n    uint public hardCapHigh;\r\n    uint public softCap;\r\n    uint public hardCapLowUsd;\r\n    uint public hardCapHighUsd;\r\n    uint public softCapUsd;\r\n    uint public collected;\r\n    uint public priceETH;\r\n    \r\n    uint public investorCount = 0;\r\n    uint public weiRefunded = 0;\r\n\r\n    uint public startTime;\r\n    uint public endTime;\r\n\r\n    bool public softCapReached = false;\r\n    bool public crowdsaleFinished = false;\r\n    \r\n    uint constant HARD_CAP_TOKENS = 25000000;\r\n\r\n    mapping (address => bool) refunded;\r\n    mapping (address => uint256) saleBalances ;  \r\n    mapping (address => bool) claimed;   \r\n\r\n    event GoalReached(uint amountRaised);\r\n    event SoftCapReached(uint softCap);\r\n    event NewContribution(address indexed holder, uint256 etherAmount);\r\n    event Refunded(address indexed holder, uint256 amount);\r\n    event LogClaim(address indexed holder, uint256 amount, uint price);\r\n\r\n    modifier onlyAfter(uint time) {\r\n        require (now > time);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBefore(uint time) {\r\n        require (now < time);\r\n        _;\r\n    }\r\n\r\n    function AhooleeTokenSale(\r\n        uint _hardCapLowUSD,\r\n        uint _hardCapHighUSD,\r\n        uint _softCapUSD,\r\n        address _token,\r\n        address _beneficiary,\r\n        uint _priceETH,\r\n\r\n        uint _startTime,\r\n        uint _durationHours\r\n    ) {\r\n        priceETH = _priceETH;\r\n        hardCapLowUsd = _hardCapLowUSD;\r\n        hardCapHighUsd = _hardCapHighUSD;\r\n        softCapUsd = _softCapUSD;\r\n        \r\n        calculatePrice();\r\n        \r\n        token = AhooleeToken(_token);\r\n        beneficiary = _beneficiary;\r\n\r\n        startTime = _startTime;\r\n        endTime = _startTime + _durationHours * 1 hours;\r\n    }\r\n\r\n    function calculatePrice() internal{\r\n        hardCapLow = hardCapLowUsd  * 1 ether / priceETH;\r\n        hardCapHigh = hardCapHighUsd  * 1 ether / priceETH;\r\n        softCap = softCapUsd * 1 ether / priceETH;\r\n    }\r\n\r\n    function setEthPrice(uint _priceETH) onlyBefore(startTime) onlyOwner {\r\n        priceETH = _priceETH;\r\n        calculatePrice();\r\n    }\r\n\r\n    function () payable stopInEmergency{\r\n        assert (msg.value > 0.01 * 1 ether || msg.value == 0);\r\n        if(msg.value > 0.01 * 1 ether) doPurchase(msg.sender);\r\n    }\r\n\r\n    function saleBalanceOf(address _owner) constant returns (uint256) {\r\n      return saleBalances[_owner];\r\n    }\r\n\r\n    function claimedOf(address _owner) constant returns (bool) {\r\n      return claimed[_owner];\r\n    }\r\n\r\n    function doPurchase(address _owner) private onlyAfter(startTime) onlyBefore(endTime) {\r\n        \r\n        require(crowdsaleFinished == false);\r\n\r\n        require (collected.add(msg.value) <= hardCapHigh);\r\n\r\n        if (!softCapReached && collected < softCap && collected.add(msg.value) >= softCap) {\r\n            softCapReached = true;\r\n            SoftCapReached(softCap);\r\n        }\r\n\r\n        if (saleBalances[msg.sender] == 0) investorCount++;\r\n      \r\n        collected = collected.add(msg.value);\r\n\r\n        saleBalances[msg.sender] = saleBalances[msg.sender].add(msg.value);\r\n\r\n        NewContribution(_owner, msg.value);\r\n\r\n        if (collected == hardCapHigh) {\r\n            GoalReached(hardCapHigh);\r\n        }\r\n    }\r\n\r\n    function claim() {\r\n        require (crowdsaleFinished);\r\n        require (!claimed[msg.sender]);\r\n        \r\n        uint price = HARD_CAP_TOKENS * 1 ether / hardCapLow;\r\n        if(collected > hardCapLow){\r\n          price = HARD_CAP_TOKENS * 1 ether / collected; \r\n        } \r\n        uint tokens = saleBalances[msg.sender] * price;\r\n\r\n        require(token.transfer(msg.sender, tokens));\r\n        claimed[msg.sender] = true;\r\n        LogClaim(msg.sender, tokens, price);\r\n    }\r\n\r\n    function returnTokens() onlyOwner {\r\n        require (crowdsaleFinished);\r\n\r\n        uint tokenAmount = token.balanceOf(this);\r\n        if(collected < hardCapLow){\r\n          tokenAmount = (hardCapLow - collected) * HARD_CAP_TOKENS * 1 ether / hardCapLow;\r\n        } \r\n        require (token.transfer(beneficiary, tokenAmount));\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        require (softCapReached);\r\n        require (beneficiary.send(collected));\r\n        crowdsaleFinished = true;\r\n    }\r\n\r\n    function refund() public onlyAfter(endTime) {\r\n        require (!softCapReached);\r\n        require (!refunded[msg.sender]);\r\n        require (saleBalances[msg.sender] != 0) ;\r\n\r\n        uint refund = saleBalances[msg.sender];\r\n        require (msg.sender.send(refund));\r\n        refunded[msg.sender] = true;\r\n        weiRefunded = weiRefunded.add(refund);\r\n        Refunded(msg.sender, refund);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_priceETH\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapHighUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapLowUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"saleBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_hardCapLowUSD\",\"type\":\"uint256\"},{\"name\":\"_hardCapHighUSD\",\"type\":\"uint256\"},{\"name\":\"_softCapUSD\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_priceETH\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_durationHours\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"softCap\",\"type\":\"uint256\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"}]","ContractName":"AhooleeTokenSale","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000393870000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000008fb97dc96558199ffb549a35a231b97a19fdc912000000000000000000000000b40060deae8fd58acc4ad97ef28e924a9dfd0be3000000000000000000000000000000000000000000000000000000000000014a0000000000000000000000000000000000000000000000000000000059a3bf700000000000000000000000000000000000000000000000000000000000000150","Library":"","SwarmSource":"bzzr://a17979d6caee931b3fdc1d03336a85bf84d7a3e720a105edd97b0eea73db22d5"}]}