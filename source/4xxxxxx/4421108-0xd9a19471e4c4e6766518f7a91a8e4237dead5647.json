{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Owned {\r\n    address public Owner;\r\n\r\n    function Owned() internal {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        Owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Feed is Owned {\r\n    uint public basePrice=0.005 ether;\r\n    uint public k=1;\r\n    uint public showInterval=15;\r\n    uint public totalMessages=0;\r\n\r\n    \r\n    struct Message\r\n    {\r\n        string content;\r\n        uint date;\r\n        address sender;\r\n        uint price;\r\n        uint show_date;\r\n        uint rejected;\r\n        string rejected_reason;\r\n    }    \r\n    \r\n    mapping (uint => Message) public messageInfo;\r\n    \r\n\r\n    /* events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    /* Initializes contract  */\r\n    function Feed() {\r\n       \r\n    }\r\n\r\n    function() public payable {\r\n        submitMessage(\"\");\r\n    }    \r\n    \r\n    function queueCount() public returns (uint _count) {\r\n        _count=0;\r\n        for (uint i=totalMessages; i>0; i--) {\r\n            if (messageInfo[i].show_date<(now-showInterval) && messageInfo[i].rejected==0) return _count;\r\n            if (messageInfo[i].rejected==0) _count++;\r\n        }\r\n        return _count;\r\n    }\r\n    \r\n    function currentMessage(uint _now) public returns ( uint _message_id, string _content, uint _show_date,uint _show_interval,uint _serverTime) {\r\n        require(totalMessages>0);\r\n        if (_now==0) _now=now;\r\n        for (uint i=totalMessages; i>0; i--) {\r\n            if (messageInfo[i].show_date>=(_now-showInterval) && messageInfo[i].show_date<_now && messageInfo[i].rejected==0) {\r\n                //good    \r\n                if (messageInfo[i+1].show_date>0) _show_interval=messageInfo[i+1].show_date-messageInfo[i].show_date; else _show_interval=showInterval;\r\n                return (i,messageInfo[i].content,messageInfo[i].show_date,_show_interval,_now);\r\n            }\r\n             if (messageInfo[i].show_date<(_now-showInterval)) throw;\r\n        }\r\n        throw;\r\n    }  \r\n\r\n  \r\n    function submitMessage(string _content) payable public returns(uint _message_id, uint _message_price, uint _queueCount) {\r\n        require(msg.value>0);\r\n        if (bytes(_content).length<1 || bytes(_content).length>150) throw;\r\n        uint total=queueCount();\r\n        uint _last_Show_data=messageInfo[totalMessages].show_date;\r\n        if (_last_Show_data==0) _last_Show_data=now+showInterval*2; else {\r\n            if (_last_Show_data<(now-showInterval)) {\r\n                _last_Show_data=_last_Show_data+(((now-_last_Show_data)/showInterval)+1)*showInterval;\r\n            } else _last_Show_data=_last_Show_data+showInterval; \r\n        }\r\n        uint message_price=basePrice+basePrice*total*k;\r\n        require(msg.value>=message_price);\r\n\r\n        // add message\r\n        totalMessages++;\r\n        messageInfo[totalMessages].date=now;\r\n        messageInfo[totalMessages].sender=msg.sender;\r\n        messageInfo[totalMessages].content=_content;\r\n        messageInfo[totalMessages].price=message_price;\r\n        messageInfo[totalMessages].show_date=_last_Show_data;\r\n        \r\n        // refound\r\n        if (msg.value>message_price) {\r\n            uint cashback=msg.value-message_price;\r\n            sendMoney(msg.sender,cashback);\r\n        }\r\n        \r\n        return (totalMessages,message_price,(total+1));\r\n    }\r\n\r\n\tfunction sendMoney(address _address, uint _amount) internal {\r\n\t\trequire(this.balance >= _amount);\r\n    \tif (_address.send(_amount)) {\r\n    \t\tTransfer(this,_address, _amount);\r\n    \t}\t    \r\n\t}\r\n\t\r\n\tfunction withdrawBenefit(address _address, uint _amount) onlyOwner public {\r\n\t\tsendMoney(_address,_amount);\r\n\r\n\t}\r\n\t\r\n    \r\n\tfunction setBasePrice(uint _newprice) onlyOwner public returns(uint _basePrice) {\r\n\t\trequire(_newprice>0);\r\n\t\tbasePrice=_newprice;\r\n\t\treturn basePrice;\r\n\t}    \r\n\t\r\n\tfunction setShowInterval(uint _newinterval) onlyOwner public returns(uint _showInterval) {\r\n\t\trequire(_newinterval>0);\r\n\t\tshowInterval=_showInterval;\r\n\t\treturn showInterval;\r\n\t}    \t\r\n\t\r\n\tfunction setPriceCoeff(uint _new_k) onlyOwner public returns(uint _k) {\r\n\t\trequire(_new_k>0);\r\n\t\tk=_new_k;\r\n\t\treturn k;\r\n\t}  \r\n\r\n\t\r\n\tfunction rejectMessage(uint _message_id, string _reason) onlyOwner public returns(uint _amount) {\r\n\t\trequire(_message_id>0);\r\n\t\trequire(bytes(messageInfo[_message_id].content).length > 0);\r\n\t\trequire(messageInfo[_message_id].rejected==0);\r\n    \tif (messageInfo[_message_id].show_date>=(now-showInterval) && messageInfo[_message_id].show_date<=now) throw;\r\n\t\tmessageInfo[_message_id].rejected=1;\r\n\t\tmessageInfo[_message_id].rejected_reason=_reason;\r\n\t\tif (messageInfo[_message_id].sender!= 0x0 && messageInfo[_message_id].price>0) {\r\n\t\t    sendMoney(messageInfo[_message_id].sender,messageInfo[_message_id].price);\r\n\t\t    return messageInfo[_message_id].price;\r\n\t\t} else throw;\r\n\t}  \t\t\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"showInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newinterval\",\"type\":\"uint256\"}],\"name\":\"setShowInterval\",\"outputs\":[{\"name\":\"_showInterval\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"currentMessage\",\"outputs\":[{\"name\":\"_message_id\",\"type\":\"uint256\"},{\"name\":\"_content\",\"type\":\"string\"},{\"name\":\"_show_date\",\"type\":\"uint256\"},{\"name\":\"_show_interval\",\"type\":\"uint256\"},{\"name\":\"_serverTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBenefit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_k\",\"type\":\"uint256\"}],\"name\":\"setPriceCoeff\",\"outputs\":[{\"name\":\"_k\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"submitMessage\",\"outputs\":[{\"name\":\"_message_id\",\"type\":\"uint256\"},{\"name\":\"_message_price\",\"type\":\"uint256\"},{\"name\":\"_queueCount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"queueCount\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message_id\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"rejectMessage\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messageInfo\",\"outputs\":[{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"show_date\",\"type\":\"uint256\"},{\"name\":\"rejected\",\"type\":\"uint256\"},{\"name\":\"rejected_reason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newprice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Feed","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c971029a674c166ab3f47256e27c53f417aef4b8d2dcf6c744ff32dc8d2be33f"}]}