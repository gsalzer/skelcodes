{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\n/**\r\n    BlockChain Board Of Derivatives Token.\r\n */\r\ncontract BBDToken is StandardToken, Ownable {\r\n\r\n    // Metadata\r\n    string public constant name = \"BlockChain Board Of Derivatives Token\";\r\n    string public constant symbol = \"BBD\";\r\n    uint256 public constant decimals = 18;\r\n    string private constant version = '1.0.0';\r\n\r\n    // Crowdsale parameters\r\n    uint256 public constant startTime = 1506844800; //Sunday, 1 October 2017 08:00:00 GMT\r\n    uint256 public constant endTime = 1509523200;  // Wednesday, 1 November 2017 08:00:00 GMT\r\n\r\n    uint256 public constant creationMaxCap = 300000000 * 10 ** decimals;\r\n    uint256 public constant creationMinCap = 2500000 * 10 ** decimals;\r\n\r\n    uint256 private constant startCreationRateOnTime = 1666; // 1666 BDD per 1 ETH\r\n    uint256 private constant endCreationRateOnTime = 1000; // 1000 BDD per 1 ETH\r\n\r\n    uint256 private constant quantityThreshold_10 = 10 ether;\r\n    uint256 private constant quantityThreshold_30 = 30 ether;\r\n    uint256 private constant quantityThreshold_100 = 100 ether;\r\n    uint256 private constant quantityThreshold_300 = 300 ether;\r\n\r\n    uint256 private constant quantityBonus_10 = 500;    // 5%\r\n    uint256 private constant quantityBonus_30 = 1000;  // 10%\r\n    uint256 private constant quantityBonus_100 = 1500; // 15%\r\n    uint256 private constant quantityBonus_300 = 2000; // 20%\r\n\r\n    // The flag indicates if the crowdsale was finalized\r\n    bool public finalized = false;\r\n\r\n    // Migration information\r\n    address public migrationAgent;\r\n    uint256 public totalMigrated;\r\n\r\n    // Exchange address\r\n    address public exchangeAddress;\r\n\r\n    // Team accounts\r\n    address private constant mainAccount = 0xEB1D40f6DA0E77E2cA046325F6F2a76081B4c7f4;\r\n    address private constant coreTeamMemberOne = 0xe43088E823eA7422D77E32a195267aE9779A8B07;\r\n    address private constant coreTeamMemberTwo = 0xad00884d1E7D0354d16fa8Ab083208c2cC3Ed515;\r\n\r\n    // Ether raised\r\n    uint256 private raised = 0;\r\n\r\n    // Since we have different exchange rates, we need to keep track of how\r\n    // much ether each contributed in case that we need to issue a refund\r\n    mapping (address => uint256) private ethBalances;\r\n\r\n    uint256 private constant divisor = 10000;\r\n\r\n    // Events\r\n    event LogRefund(address indexed _from, uint256 _value);\r\n    event LogMigrate(address indexed _from, address indexed _to, uint256 _value);\r\n    event LogBuy(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n\r\n    // Check if min cap was archived.\r\n    modifier onlyWhenICOReachedCreationMinCap() {\r\n        require( totalSupply >= creationMinCap );\r\n        _;\r\n    }\r\n\r\n    function() payable {\r\n        buy(msg.sender);\r\n    }\r\n\r\n    function creationRateOnTime() public constant returns (uint256) {\r\n        uint256 currentPrice;\r\n\r\n        if (now > endTime) {\r\n            currentPrice = endCreationRateOnTime;\r\n        }\r\n        else {\r\n            //Price is changing lineral starting from  startCreationRateOnTime to endCreationRateOnTime\r\n            uint256 rateRange = startCreationRateOnTime - endCreationRateOnTime;\r\n            uint256 timeRange = endTime - startTime;\r\n            currentPrice = startCreationRateOnTime.sub(rateRange.mul(now.sub(startTime)).div(timeRange));\r\n        }\r\n\r\n        return currentPrice;\r\n    }\r\n\r\n    //Calculate number of BBD tokens for provided ether\r\n    function calculateBDD(uint256 _ethVal) private constant returns (uint256) {\r\n        uint256 bonus;\r\n\r\n        //We provide bonus depending on eth value\r\n        if (_ethVal < quantityThreshold_10) {\r\n            bonus = 0; // 0% bonus\r\n        }\r\n        else if (_ethVal < quantityThreshold_30) {\r\n            bonus = quantityBonus_10; // 5% bonus\r\n        }\r\n        else if (_ethVal < quantityThreshold_100) {\r\n            bonus = quantityBonus_30; // 10% bonus\r\n        }\r\n        else if (_ethVal < quantityThreshold_300) {\r\n            bonus = quantityBonus_100; // 15% bonus\r\n        }\r\n        else {\r\n            bonus = quantityBonus_300; // 20% bonus\r\n        }\r\n\r\n        // Get number of BBD tokens\r\n        return _ethVal.mul(creationRateOnTime()).mul(divisor.add(bonus)).div(divisor);\r\n    }\r\n\r\n    // Buy BBD\r\n    function buy(address _beneficiary) payable {\r\n        require(!finalized);\r\n        require(msg.value != 0);\r\n        require(now <= endTime);\r\n        require(now >= startTime);\r\n\r\n        uint256 bbdTokens = calculateBDD(msg.value);\r\n        uint256 additionalBBDTokensForMainAccount = bbdTokens.mul(2250).div(divisor); // 22.5%\r\n        uint256 additionalBBDTokensForCoreTeamMember = bbdTokens.mul(125).div(divisor); // 1.25%\r\n\r\n        //Increase by 25% number of bbd tokens on each buy.\r\n        uint256 checkedSupply = totalSupply.add(bbdTokens)\r\n                                           .add(additionalBBDTokensForMainAccount)\r\n                                           .add(2 * additionalBBDTokensForCoreTeamMember);\r\n\r\n        require(creationMaxCap >= checkedSupply);\r\n\r\n        totalSupply = checkedSupply;\r\n\r\n        //Update balances\r\n        balances[_beneficiary] = balances[_beneficiary].add(bbdTokens);\r\n        balances[mainAccount] = balances[mainAccount].add(additionalBBDTokensForMainAccount);\r\n        balances[coreTeamMemberOne] = balances[coreTeamMemberOne].add(additionalBBDTokensForCoreTeamMember);\r\n        balances[coreTeamMemberTwo] = balances[coreTeamMemberTwo].add(additionalBBDTokensForCoreTeamMember);\r\n\r\n        ethBalances[_beneficiary] = ethBalances[_beneficiary].add(msg.value);\r\n\r\n        raised += msg.value;\r\n\r\n        if (exchangeAddress != 0x0 && totalSupply >= creationMinCap && msg.value >= 1 ether) {\r\n            // After archiving min cap we start moving 10% to exchange. It will help with liquidity on exchange.\r\n            exchangeAddress.transfer(msg.value.mul(1000).div(divisor)); // 10%\r\n        }\r\n\r\n        LogBuy(msg.sender, _beneficiary, msg.value, bbdTokens);\r\n    }\r\n\r\n    // Finalize for successful ICO\r\n    function finalize() onlyOwner external {\r\n        require(!finalized);\r\n        require(now >= endTime || totalSupply >= creationMaxCap);\r\n\r\n        finalized = true;\r\n\r\n        uint256 ethForCoreMember = raised.mul(500).div(divisor);\r\n\r\n        coreTeamMemberOne.transfer(ethForCoreMember); // 5%\r\n        coreTeamMemberTwo.transfer(ethForCoreMember); // 5%\r\n        mainAccount.transfer(this.balance); //90%\r\n    }\r\n\r\n    // Refund if ICO won't reach min cap\r\n    function refund() external {\r\n        require(now > endTime);\r\n        require(totalSupply < creationMinCap);\r\n\r\n        uint256 bddVal = balances[msg.sender];\r\n        require(bddVal > 0);\r\n        uint256 ethVal = ethBalances[msg.sender];\r\n        require(ethVal > 0);\r\n\r\n        balances[msg.sender] = 0;\r\n        ethBalances[msg.sender] = 0;\r\n        totalSupply = totalSupply.sub(bddVal);\r\n\r\n        msg.sender.transfer(ethVal);\r\n\r\n        LogRefund(msg.sender, ethVal);\r\n    }\r\n\r\n    // Allow to migrate to next version of contract\r\n    function migrate(uint256 _value) external {\r\n        require(finalized);\r\n        require(migrationAgent != 0x0);\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalMigrated = totalMigrated.add(_value);\r\n\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n\r\n        LogMigrate(msg.sender, migrationAgent, _value);\r\n    }\r\n\r\n    // Set migration Agent\r\n    function setMigrationAgent(address _agent) onlyOwner external {\r\n        require(finalized);\r\n        require(migrationAgent == 0x0);\r\n\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    // Set exchange address\r\n    function setExchangeAddress(address _exchangeAddress) onlyOwner external {\r\n        require(exchangeAddress == 0x0);\r\n\r\n        exchangeAddress = _exchangeAddress;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) onlyWhenICOReachedCreationMinCap returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) onlyWhenICOReachedCreationMinCap returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // Transfer BBD to exchange.\r\n    function transferToExchange(address _from, uint256 _value) onlyWhenICOReachedCreationMinCap returns (bool) {\r\n        require(msg.sender == exchangeAddress);\r\n\r\n        balances[exchangeAddress] = balances[exchangeAddress].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        Transfer(_from, exchangeAddress, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ICO overview\r\n    function icoOverview() constant returns (uint256 currentlyRaised, uint256 currentlyTotalSupply, uint256 currentlyCreationRateOnTime){\r\n        currentlyRaised = raised;\r\n        currentlyTotalSupply = totalSupply;\r\n        currentlyCreationRateOnTime = creationRateOnTime();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationRateOnTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeAddress\",\"type\":\"address\"}],\"name\":\"setExchangeAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoOverview\",\"outputs\":[{\"name\":\"currentlyRaised\",\"type\":\"uint256\"},{\"name\":\"currentlyTotalSupply\",\"type\":\"uint256\"},{\"name\":\"currentlyCreationRateOnTime\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BBDToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://749b6e66fcb27b8acddf6b01fe19cc1f9e56fccb2cd7a803a37a2f1aaf7d5a44"}]}