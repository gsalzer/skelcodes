{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20 {\r\n\r\n    function totalSupply() constant returns (uint totalSupply);\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SkrillaToken is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Skrilla\";\r\n    string public constant symbol = \"SKR\";\r\n    uint8 public constant decimals = 6;\r\n    uint256 public totalSupply;\r\n    //Multiply to get from a SKR to the number of subunits\r\n    //Note the cast here otherwise solidity uses a uint8\r\n    uint256 internal constant SUBUNIT_MULTIPLIER = 10 ** uint256(decimals);\r\n\r\n    //Token balances\r\n    mapping (address => uint256) tokenSaleBalances;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => uint256) whiteList;\r\n\r\n    //Contract conditions\r\n    uint256 internal constant SALE_CAP = 600 * 10**6 * SUBUNIT_MULTIPLIER;\r\n    uint256 internal constant TEAM_TOKENS = 100 * 10**6 * SUBUNIT_MULTIPLIER;\r\n    uint256 internal constant GROWTH_TOKENS = 300 * 10**6 * SUBUNIT_MULTIPLIER;\r\n    uint256 internal constant TOTAL_SUPPLY_CAP  = SALE_CAP + TEAM_TOKENS + GROWTH_TOKENS;\r\n\r\n    address internal withdrawAddress;\r\n\r\n    //State values\r\n    uint256 public ethRaised;\r\n    \r\n    address internal owner;\r\n    address internal growth;\r\n    address internal team;\r\n\r\n    uint256[7] public saleStageStartDates;\r\n\r\n    //The prices for each stage. The number of tokens a user will receive for 1ETH.\r\n    uint16[6] public tokens = [3000,2500,0,2400,2200,2000];\r\n\r\n\r\n    function tokenSaleBalanceOf(address _owner) public constant returns (uint256 balance) {\r\n        balance = tokenSaleBalances[_owner];\r\n    }\r\n\r\n    function getPreSaleStart() public constant returns (uint256) {\r\n        return saleStageStartDates[0];\r\n    }\r\n\r\n    function getPreSaleEnd() public constant returns (uint256) {\r\n        return saleStageStartDates[2];\r\n    }\r\n\r\n    function getSaleStart() public constant returns (uint256) {\r\n        return saleStageStartDates[3];\r\n    }\r\n\r\n    function getSaleEnd() public constant returns (uint256) {\r\n        return saleStageStartDates[6];\r\n    }\r\n\r\n    // Tokens per ETH\r\n    function getCurrentPrice(address _buyer) public constant returns (uint256) {\r\n        uint256 price = whiteList[_buyer];\r\n\r\n        if (price > 0) {\r\n            return SUBUNIT_MULTIPLIER.mul(price);\r\n        } else {\r\n            uint256 stage = getStage();\r\n            return SUBUNIT_MULTIPLIER.mul(tokens[stage]);\r\n        }\r\n    }\r\n\r\n    function inPreSalePeriod() public constant returns (bool) {\r\n        return (now >= getPreSaleStart() && now <= getPreSaleEnd());\r\n    }\r\n\r\n    function inSalePeriod() public constant returns (bool) {\r\n        return (now >= getSaleStart() && now <= getSaleEnd());\r\n        //In rounds 1 - 3 period\r\n    }\r\n\r\n    // Set start date on contract deploy\r\n    function SkrillaToken(uint256 _preSaleStart, uint256 _saleStart, address _team, address _growth, address _withdrawAddress) {\r\n\r\n        owner = msg.sender;\r\n\r\n        require(owner != _team && owner != _growth);\r\n        require(_team != _growth);\r\n        //Ensure there was no overflow\r\n        require(SALE_CAP / SUBUNIT_MULTIPLIER == 600 * 10**6);\r\n        require(GROWTH_TOKENS / SUBUNIT_MULTIPLIER == 300 * 10**6);\r\n        require(TEAM_TOKENS / SUBUNIT_MULTIPLIER == 100 * 10**6);\r\n\r\n        team = _team;\r\n        growth = _growth;\r\n        withdrawAddress = _withdrawAddress;\r\n\r\n        tokenSaleBalances[team] = TEAM_TOKENS ;\r\n        tokenSaleBalances[growth] = GROWTH_TOKENS ;\r\n\r\n        totalSupply = (TEAM_TOKENS + GROWTH_TOKENS);\r\n\r\n        if (_preSaleStart == 0) {\r\n            _preSaleStart = 1508533200; //Oct 20 2017 9pm\r\n        }\r\n\r\n        if (_saleStart == 0) {\r\n            _saleStart = 1510002000; //Nov 6 2017 9pm\r\n        }\r\n\r\n        uint256 preSaleEnd = _preSaleStart.add(3 days);\r\n        require(_saleStart > preSaleEnd);\r\n\r\n        saleStageStartDates[0] = _preSaleStart;\r\n        saleStageStartDates[1] = _preSaleStart.add(1 days);\r\n        saleStageStartDates[2] = preSaleEnd;\r\n        saleStageStartDates[3] = _saleStart;\r\n        saleStageStartDates[4] = _saleStart.add(1 days);\r\n        saleStageStartDates[5] = _saleStart.add(7 days);\r\n        saleStageStartDates[6] = _saleStart.add(14 days);\r\n\r\n        ethRaised = 0;\r\n    }\r\n\r\n    //Move a user's token sale balance into the ERC20 balances mapping.\r\n    //The user must call this before they can use their tokens as ERC20 tokens.\r\n    function withdraw() public returns (bool) {\r\n        require(now > getSaleEnd() + 14 days);\r\n\r\n        uint256 tokenSaleBalance = tokenSaleBalances[msg.sender];\r\n        balances[msg.sender] = balances[msg.sender].add(tokenSaleBalance);\r\n        delete tokenSaleBalances[msg.sender];\r\n        Withdraw(msg.sender, tokenSaleBalance);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        balance = balances[_owner];\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        //Although this function shadows the public field removing it causes all the tests to fail.\r\n        return totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(_from,_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        //Prevent attack mentioned here: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit\r\n        //Requires that the spender can only set the allowance to a non zero amount if the current allowance is 0\r\n        //This may have backward compatibility issues with older clients.\r\n        require(allowed[msg.sender][_spender] == 0 || _amount == 0);\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function addToWhitelist(address _buyer, uint256 _price) public onlyOwner {\r\n        require(_price < 10000);\r\n        whiteList[_buyer] = _price;\r\n    }\r\n\r\n    function removeFromWhitelist(address _buyer) public onlyOwner {\r\n        delete whiteList[_buyer];\r\n    }\r\n\r\n    // Fallback function can be used to buy tokens\r\n    function() payable {\r\n        buyTokens();\r\n    }\r\n\r\n    // Low level token purchase function\r\n    function buyTokens() public payable saleHasNotClosed {\r\n        // No 0 contributions\r\n        require(msg.value > 0);\r\n        require(ethRaised.add(msg.value) <= 150000 ether);\r\n\r\n        // Ignore inSalePeriod for whitelisted buyers, just check before saleEnd\r\n        require(inPreSalePeriod() || inSalePeriod() || (whiteList[msg.sender] > 0));\r\n\r\n        if (inPreSalePeriod()) {\r\n            require(msg.value >= 10 ether || whiteList[msg.sender] > 0);\r\n        }\r\n\r\n        // Get price for buyer\r\n        uint256 price = getCurrentPrice(msg.sender);\r\n        require (price > 0);\r\n\r\n        uint256 tokenAmount = price.mul(msg.value);\r\n        tokenAmount = tokenAmount.div(1 ether);\r\n\r\n        require (tokenAmount > 0);\r\n        require (totalSupply.add(tokenAmount) <= TOTAL_SUPPLY_CAP);\r\n\r\n        totalSupply = totalSupply.add(tokenAmount);\r\n        ethRaised = ethRaised.add(msg.value);\r\n        tokenSaleBalances[msg.sender] = tokenSaleBalances[msg.sender].add(tokenAmount);\r\n\r\n        // Raise event\r\n        Transfer(address(0), msg.sender, tokenAmount);\r\n        TokenPurchase(msg.sender, msg.value, tokenAmount);\r\n    }\r\n\r\n    // empty the contract ETH\r\n    function transferEth() public onlyOwner {\r\n        require(now > getSaleEnd() + 14 days);\r\n        withdrawAddress.transfer(this.balance);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier saleHasNotClosed()  {\r\n        //Sale must not have closed\r\n        require(now <= getSaleEnd());\r\n        _;\r\n    }\r\n\r\n    function getStage() public constant returns (uint256) {\r\n        for (uint256 i = 1; i < saleStageStartDates.length; i++) {\r\n            if (now < saleStageStartDates[i]) {\r\n                return i - 1;\r\n            }\r\n        }\r\n\r\n        return saleStageStartDates.length - 1;\r\n    }\r\n\r\n    event TokenPurchase(address indexed _purchaser, uint256 _value, uint256 _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Withdraw(address indexed _owner, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenSaleBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleStageStartDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inPreSalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preSaleStart\",\"type\":\"uint256\"},{\"name\":\"_saleStart\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_growth\",\"type\":\"address\"},{\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"SkrillaToken","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035f74494ebf554d69876aba12509d177d4b1261c0000000000000000000000004251ae636ff6b7b2218a12c985407230dae8c335000000000000000000000000509106810da04417d8591897f92403420537eeda","Library":"","SwarmSource":"bzzr://4c1d037b13f18c78a1d2e9171402a7bcc11b774900db2a06b2b3085707050a1a"}]}