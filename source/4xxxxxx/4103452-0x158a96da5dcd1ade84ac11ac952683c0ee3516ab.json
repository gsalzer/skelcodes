{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC223TokenInterface {\r\n    function name() constant returns (string _name);\r\n    function symbol() constant returns (string _symbol);\r\n    function decimals() constant returns (uint8 _decimals);\r\n    function totalSupply() constant returns (uint256 _totalSupply);\r\n\r\n    function transfer(address to, uint value, bytes data) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\ncontract ERC223ReceiverInterface {\r\n    function tokenFallback(address from, uint value, bytes data);\r\n}\r\n\r\ncontract ERC223Token is BasicToken, ERC223TokenInterface {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    function name() constant returns (string _name) {\r\n        return name;\r\n    }\r\n    function symbol() constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    function decimals() constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    function totalSupply() constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) returns (bool) {\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], value);\r\n        balances[to] = SafeMath.add(balances[to], value);\r\n        if (isContract(to)){\r\n            ERC223ReceiverInterface receiver = ERC223ReceiverInterface(to);\r\n            receiver.tokenFallback(msg.sender, value, data);\r\n        }\r\n        //ERC223 event\r\n        Transfer(msg.sender, to, value, data);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) returns (bool) {\r\n        bytes memory empty;\r\n        transfer(to, value, empty);\r\n        //ERC20 legacy event\r\n        Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _address) private returns (bool isContract) {\r\n        uint length;\r\n        _address = _address; //Silence compiler warning\r\n        assembly { length := extcodesize(_address) }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n\r\n\r\n  function withdrawPayments() {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract TrivialToken is ERC223Token, PullPayment {\r\n\r\n    //Constants\r\n    uint8 constant DECIMALS = 0;\r\n    uint256 constant MIN_ETH_AMOUNT = 0.005 ether;\r\n    uint256 constant MIN_BID_PERCENTAGE = 10;\r\n    uint256 constant TOTAL_SUPPLY = 1000000;\r\n    uint256 constant TOKENS_PERCENTAGE_FOR_KEY_HOLDER = 25;\r\n    uint256 constant CLEANUP_DELAY = 180 days;\r\n\r\n    //Accounts\r\n    address public artist;\r\n    address public trivial;\r\n\r\n    //Time information\r\n    uint256 public icoEndTime;\r\n    uint256 public auctionDuration;\r\n    uint256 public auctionEndTime;\r\n\r\n    //Token information\r\n    uint256 public tokensForArtist;\r\n    uint256 public tokensForTrivial;\r\n    uint256 public tokensForIco;\r\n\r\n    //ICO and auction results\r\n    uint256 public amountRaised;\r\n    address public highestBidder;\r\n    uint256 public highestBid;\r\n    bytes32 public auctionWinnerMessageHash;\r\n    uint256 public nextContributorIndexToBeGivenTokens;\r\n    uint256 public tokensDistributedToContributors;\r\n\r\n    //Events\r\n    event IcoStarted(uint256 icoEndTime);\r\n    event IcoContributed(address contributor, uint256 amountContributed, uint256 amountRaised);\r\n    event IcoFinished(uint256 amountRaised);\r\n    event IcoCancelled();\r\n    event AuctionStarted(uint256 auctionEndTime);\r\n    event HighestBidChanged(address highestBidder, uint256 highestBid);\r\n    event AuctionFinished(address highestBidder, uint256 highestBid);\r\n    event WinnerProvidedHash();\r\n\r\n    //State\r\n    enum State { Created, IcoStarted, IcoFinished, AuctionStarted, AuctionFinished, IcoCancelled }\r\n    State public currentState;\r\n\r\n    //Token contributors and holders\r\n    mapping(address => uint) public contributions;\r\n    address[] public contributors;\r\n\r\n    //Modififers\r\n    modifier onlyInState(State expectedState) { require(expectedState == currentState); _; }\r\n    modifier onlyBefore(uint256 _time) { require(now < _time); _; }\r\n    modifier onlyAfter(uint256 _time) { require(now > _time); _; }\r\n    modifier onlyTrivial() { require(msg.sender == trivial); _; }\r\n    modifier onlyKeyHolders() { require(balances[msg.sender] >= SafeMath.div(\r\n        SafeMath.mul(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER), 100)); _;\r\n    }\r\n    modifier onlyAuctionWinner() {\r\n        require(currentState == State.AuctionFinished);\r\n        require(msg.sender == highestBidder);\r\n        _;\r\n    }\r\n\r\n    function TrivialToken(\r\n        string _name, string _symbol,\r\n        uint256 _icoEndTime, uint256 _auctionDuration,\r\n        address _artist, address _trivial,\r\n        uint256 _tokensForArtist,\r\n        uint256 _tokensForTrivial,\r\n        uint256 _tokensForIco\r\n    ) {\r\n        require(now < _icoEndTime);\r\n        require(\r\n            TOTAL_SUPPLY == SafeMath.add(\r\n                _tokensForArtist,\r\n                SafeMath.add(_tokensForTrivial, _tokensForIco)\r\n            )\r\n        );\r\n        require(MIN_BID_PERCENTAGE < 100);\r\n        require(TOKENS_PERCENTAGE_FOR_KEY_HOLDER < 100);\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = DECIMALS;\r\n\r\n        icoEndTime = _icoEndTime;\r\n        auctionDuration = _auctionDuration;\r\n        artist = _artist;\r\n        trivial = _trivial;\r\n\r\n        tokensForArtist = _tokensForArtist;\r\n        tokensForTrivial = _tokensForTrivial;\r\n        tokensForIco = _tokensForIco;\r\n\r\n        currentState = State.Created;\r\n    }\r\n\r\n    /*\r\n        ICO methods\r\n    */\r\n    function startIco()\r\n    onlyInState(State.Created)\r\n    onlyTrivial() {\r\n        currentState = State.IcoStarted;\r\n        IcoStarted(icoEndTime);\r\n    }\r\n\r\n    function contributeInIco() payable\r\n    onlyInState(State.IcoStarted)\r\n    onlyBefore(icoEndTime) {\r\n        require(msg.value > MIN_ETH_AMOUNT);\r\n\r\n        if (contributions[msg.sender] == 0) {\r\n            contributors.push(msg.sender);\r\n        }\r\n        contributions[msg.sender] = SafeMath.add(contributions[msg.sender], msg.value);\r\n        amountRaised = SafeMath.add(amountRaised, msg.value);\r\n\r\n        IcoContributed(msg.sender, msg.value, amountRaised);\r\n    }\r\n\r\n    function distributeTokens(uint256 contributorsNumber)\r\n    onlyInState(State.IcoStarted)\r\n    onlyAfter(icoEndTime) {\r\n        for (uint256 i = 0; i < contributorsNumber && nextContributorIndexToBeGivenTokens < contributors.length; ++i) {\r\n            address currentContributor = contributors[nextContributorIndexToBeGivenTokens++];\r\n            uint256 tokensForContributor = SafeMath.div(\r\n                SafeMath.mul(tokensForIco, contributions[currentContributor]),\r\n                amountRaised  // amountRaised can't be 0, ICO is cancelled then\r\n            );\r\n            balances[currentContributor] = tokensForContributor;\r\n            tokensDistributedToContributors = SafeMath.add(tokensDistributedToContributors, tokensForContributor);\r\n        }\r\n    }\r\n\r\n    function finishIco()\r\n    onlyInState(State.IcoStarted)\r\n    onlyAfter(icoEndTime) {\r\n        if (amountRaised == 0) {\r\n            currentState = State.IcoCancelled;\r\n            return;\r\n        }\r\n\r\n        // all contributors must have received their tokens to finish ICO\r\n        require(nextContributorIndexToBeGivenTokens >= contributors.length);\r\n\r\n        balances[artist] = SafeMath.add(balances[artist], tokensForArtist);\r\n        balances[trivial] = SafeMath.add(balances[trivial], tokensForTrivial);\r\n        uint256 leftovers = SafeMath.sub(tokensForIco, tokensDistributedToContributors);\r\n        balances[artist] = SafeMath.add(balances[artist], leftovers);\r\n\r\n        if (!artist.send(this.balance)) {\r\n            asyncSend(artist, this.balance);\r\n        }\r\n        currentState = State.IcoFinished;\r\n        IcoFinished(amountRaised);\r\n    }\r\n\r\n    function checkContribution(address contributor) constant returns (uint) {\r\n        return contributions[contributor];\r\n    }\r\n\r\n    /*\r\n        Auction methods\r\n    */\r\n    function startAuction()\r\n    onlyInState(State.IcoFinished)\r\n    onlyKeyHolders() {\r\n        // 100% tokens owner is the only key holder\r\n        if (balances[msg.sender] == TOTAL_SUPPLY) {\r\n            // no auction takes place,\r\n            highestBidder = msg.sender;\r\n            currentState = State.AuctionFinished;\r\n            AuctionFinished(highestBidder, highestBid);\r\n            return;\r\n        }\r\n\r\n        auctionEndTime = SafeMath.add(now, auctionDuration);\r\n        currentState = State.AuctionStarted;\r\n        AuctionStarted(auctionEndTime);\r\n    }\r\n\r\n    function bidInAuction() payable\r\n    onlyInState(State.AuctionStarted)\r\n    onlyBefore(auctionEndTime) {\r\n        //Must be greater or equal to minimal amount\r\n        require(msg.value >= MIN_ETH_AMOUNT);\r\n        uint256 bid = calculateUserBid();\r\n\r\n        //If there was a bid already\r\n        if (highestBid >= MIN_ETH_AMOUNT) {\r\n            //Must be greater or equal to 105% of previous bid\r\n            uint256 minimalOverBid = SafeMath.add(highestBid, SafeMath.div(\r\n                SafeMath.mul(highestBid, MIN_BID_PERCENTAGE), 100\r\n            ));\r\n            require(bid >= minimalOverBid);\r\n            //Return to previous bidder his balance\r\n            //Value to return: current balance - current bid - paymentsInAsyncSend\r\n            uint256 amountToReturn = SafeMath.sub(SafeMath.sub(\r\n                this.balance, msg.value\r\n            ), totalPayments);\r\n            if (!highestBidder.send(amountToReturn)) {\r\n                asyncSend(highestBidder, amountToReturn);\r\n            }\r\n        }\r\n\r\n        highestBidder = msg.sender;\r\n        highestBid = bid;\r\n        HighestBidChanged(highestBidder, highestBid);\r\n    }\r\n\r\n    function calculateUserBid() private returns (uint256) {\r\n        uint256 bid = msg.value;\r\n        uint256 contribution = balanceOf(msg.sender);\r\n        if (contribution > 0) {\r\n            //Formula: (sentETH * allTokens) / (allTokens - userTokens)\r\n            //User sends 16ETH, has 40 of 200 tokens\r\n            //(16 * 200) / (200 - 40) => 3200 / 160 => 20\r\n            bid = SafeMath.div(\r\n                SafeMath.mul(msg.value, TOTAL_SUPPLY),\r\n                SafeMath.sub(TOTAL_SUPPLY, contribution)\r\n            );\r\n        }\r\n        return bid;\r\n    }\r\n\r\n    function finishAuction()\r\n    onlyInState(State.AuctionStarted)\r\n    onlyAfter(auctionEndTime) {\r\n        require(highestBid > 0);  // auction cannot be finished until at least one person bids\r\n        currentState = State.AuctionFinished;\r\n        AuctionFinished(highestBidder, highestBid);\r\n    }\r\n\r\n    function withdrawShares(address holder) public\r\n    onlyInState(State.AuctionFinished) {\r\n        uint256 availableTokens = balances[holder];\r\n        require(availableTokens > 0);\r\n        balances[holder] = 0;\r\n\r\n        if (holder != highestBidder) {\r\n            holder.transfer(\r\n                SafeMath.div(SafeMath.mul(highestBid, availableTokens), TOTAL_SUPPLY)\r\n            );\r\n        }\r\n    }\r\n\r\n    function isKeyHolder(address person) constant returns (bool) {\r\n        return balances[person] >= SafeMath.div(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER); }\r\n\r\n    /*\r\n        General methods\r\n    */\r\n\r\n    // Cancel ICO will be redesigned to prevent\r\n    // risk of user funds overtaken\r\n\r\n    /*function cancelIco()\r\n    onlyInState(State.IcoStarted)\r\n    onlyTrivial() {\r\n        currentState = State.IcoCancelled;\r\n        IcoCancelled();\r\n    }\r\n\r\n    function claimIcoContribution(address contributor) onlyInState(State.IcoCancelled) {\r\n        uint256 contribution = contributions[contributor];\r\n        require(contribution > 0);\r\n        contributions[contributor] = 0;\r\n        contributor.transfer(contribution);\r\n    }*/\r\n\r\n    function setAuctionWinnerMessageHash(bytes32 _auctionWinnerMessageHash)\r\n    onlyAuctionWinner() {\r\n        auctionWinnerMessageHash = _auctionWinnerMessageHash;\r\n        WinnerProvidedHash();\r\n    }\r\n\r\n    function killContract()\r\n    onlyTrivial() {\r\n        require(\r\n            (\r\n                currentState == State.AuctionFinished &&\r\n                now > SafeMath.add(auctionEndTime, CLEANUP_DELAY) // Delay in correct state\r\n            ) ||\r\n            currentState == State.IcoCancelled // No delay in cancelled state\r\n        );\r\n        selfdestruct(trivial);\r\n    }\r\n\r\n    // helper function to avoid too many contract calls on frontend side\r\n    function getContractState() constant returns (\r\n        uint256, uint256, uint256, uint256, uint256,\r\n        uint256, uint256, address, uint256, State,\r\n        uint256, uint256\r\n    ) {\r\n        return (\r\n            icoEndTime, auctionDuration, auctionEndTime,\r\n            tokensForArtist, tokensForTrivial, tokensForIco,\r\n            amountRaised, highestBidder, highestBid, currentState,\r\n            TOKENS_PERCENTAGE_FOR_KEY_HOLDER, MIN_BID_PERCENTAGE\r\n        );\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) onlyInState(State.IcoFinished) returns (bool) {\r\n        return ERC223Token.transfer(_to, _value, _data);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        // onlyInState(IcoFinished) check is contained in a call below\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    function () payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bidInAuction\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionWinnerMessageHash\",\"type\":\"bytes32\"}],\"name\":\"setAuctionWinnerMessageHash\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trivial\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForTrivial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForArtist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributeInIco\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextContributorIndexToBeGivenTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributorsNumber\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributedToContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionWinnerMessageHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"checkContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"person\",\"type\":\"address\"}],\"name\":\"isKeyHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"withdrawShares\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_icoEndTime\",\"type\":\"uint256\"},{\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_trivial\",\"type\":\"address\"},{\"name\":\"_tokensForArtist\",\"type\":\"uint256\"},{\"name\":\"_tokensForTrivial\",\"type\":\"uint256\"},{\"name\":\"_tokensForIco\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"icoEndTime\",\"type\":\"uint256\"}],\"name\":\"IcoStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountContributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"IcoContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"IcoFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auctionEndTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBid\",\"type\":\"uint256\"}],\"name\":\"HighestBidChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highestBid\",\"type\":\"uint256\"}],\"name\":\"AuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WinnerProvidedHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TrivialToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000005992cd04000000000000000000000000000000000000000000000000000000000012750000000000000000000000000070dc1075f2c26923028cfe36fda46acabb343bb200000000000000000000000070dc1075f2c26923028cfe36fda46acabb343bb20000000000000000000000000000000000000000000000000000000000055730000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000000927c0000000000000000000000000000000000000000000000000000000000000000952617420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035452540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ced60d0893223820cac88bb86e4fc1b5d9b13daf9d0419591ae581772954d968"}]}