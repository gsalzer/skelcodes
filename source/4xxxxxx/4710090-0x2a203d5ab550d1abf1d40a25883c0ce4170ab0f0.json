{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract token { function transfer(address receiver, uint amount){  } }\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // uint256 durationInMinutes;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // token address\r\n  address public addressOfTokenUsedAsReward;\r\n\r\n  uint256 public price = 200;//initial price\r\n\r\n  token tokenReward;\r\n\r\n  mapping (address => uint) public contributions;\r\n  \r\n\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  // uint256 public startTime;\r\n  // uint256 public endTime;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public tokensSold;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale() {\r\n    //DO NOT FORGET TO CHANGE THIS\r\n    //This is the wallet where all the ETH will go!\r\n    wallet = 0x8c7E29FE448ea7E09584A652210fE520f992cE64;//this should be Filips wallet!\r\n    // durationInMinutes = _durationInMinutes;\r\n    //Here will come the checksum address we got\r\n    addressOfTokenUsedAsReward = 0xA7352F9d1872D931b3F9ff3058025c4aE07EF888; //address of the token contract\r\n    //web3.toChecksumAddress is needed here in most cases.\r\n\r\n\r\n\r\n    tokenReward = token(addressOfTokenUsedAsReward);\r\n  }\r\n\r\n  bool public started = false;\r\n\r\n  function startSale(){\r\n    if (msg.sender != wallet) throw;\r\n    started = true;\r\n  }\r\n\r\n  function stopSale(){\r\n    if(msg.sender != wallet) throw;\r\n    started = false;\r\n  }\r\n\r\n  function setPrice(uint256 _price){\r\n    if(msg.sender != wallet) throw;\r\n    price = _price;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    if(tokensSold < 10000*10**6){\r\n      price = 300;      \r\n    }else if(tokensSold < 20000*10**6){\r\n      price = 284;\r\n    }else if(tokensSold < 30000*10**6){\r\n      price = 269;\r\n    }else if(tokensSold < 40000*10**6){\r\n      price = 256;\r\n    }else if(tokensSold < 50000*10**6){\r\n      price = 244;\r\n    }else if(tokensSold < 60000*10**6){\r\n      price = 233;\r\n    }else if(tokensSold < 70000*10**6){\r\n      price = 223;\r\n    }else if(tokensSold < 80000*10**6){\r\n      price = 214;\r\n    }else if(tokensSold < 90000*10**6){\r\n      price = 205;\r\n    }else if(tokensSold < 100000*10**6){\r\n      price = 197;\r\n    }else if(tokensSold < 110000*10**6){\r\n      price = 189;\r\n    }else if(tokensSold < 120000*10**6){\r\n      price = 182;\r\n    }else if(tokensSold < 130000*10**6){\r\n      price = 175;\r\n    }else if(tokensSold < 140000*10**6){\r\n      price = 168;\r\n    }else if(tokensSold < 150000*10**6){\r\n      price = 162;\r\n    }else if(tokensSold < 160000*10**6){\r\n      price = 156;\r\n    }else if(tokensSold < 170000*10**6){\r\n      price = 150;\r\n    }else if(tokensSold < 180000*10**6){\r\n      price = 145;\r\n    }else if(tokensSold < 190000*10**6){\r\n      price = 140;\r\n    }else if(tokensSold < 200000*10**6){\r\n      price = 135;\r\n    }else if(tokensSold < 210000*10**6){\r\n      price = 131;\r\n    }else if(tokensSold < 220000*10**6){\r\n      price = 127;\r\n    }else if(tokensSold < 230000*10**6){\r\n      price = 123;\r\n    }else if(tokensSold < 240000*10**6){\r\n      price = 120;\r\n    }else if(tokensSold < 250000*10**6){\r\n      price = 117;\r\n    }else if(tokensSold < 260000*10**6){\r\n      price = 114;\r\n    }else if(tokensSold < 270000*10**6){\r\n      price = 111;\r\n    }else if(tokensSold < 280000*10**6){\r\n      price = 108;\r\n    }else if(tokensSold < 290000*10**6){\r\n      price = 105;\r\n    }else if(tokensSold < 300000*10**6){\r\n      price = 102;\r\n    }else if(tokensSold < 310000*10**6){\r\n      price = 100;\r\n    }else if(tokensSold < 320000*10**6){\r\n      price = 98;\r\n    }else if(tokensSold < 330000*10**6){\r\n      price = 96;\r\n    }else if(tokensSold < 340000*10**6){\r\n      price = 94;\r\n    }else if(tokensSold < 350000*10**6){\r\n      price = 92;\r\n    }else if(tokensSold < 360000*10**6){\r\n      price = 90;\r\n    }else if(tokensSold < 370000*10**6){\r\n      price = 88;\r\n    }else if(tokensSold < 380000*10**6){\r\n      price = 86;\r\n    }else if(tokensSold < 390000*10**6){\r\n      price = 84;\r\n    }else if(tokensSold < 400000*10**6){\r\n      price = 82;\r\n    }else if(tokensSold < 410000*10**6){\r\n      price = 80;\r\n    }else if(tokensSold < 420000*10**6){\r\n      price = 78;\r\n    }else if(tokensSold < 430000*10**6){\r\n      price = 76;\r\n    }else if(tokensSold < 440000*10**6){\r\n      price = 74;\r\n    }else if(tokensSold < 450000*10**6){\r\n      price = 72;\r\n    }else if(tokensSold < 460000*10**6){\r\n      price = 70;\r\n    }else if(tokensSold < 470000*10**6){\r\n      price = 68;\r\n    }else if(tokensSold < 480000*10**6){\r\n      price = 66;\r\n    }else if(tokensSold < 490000*10**6){\r\n      price = 64;\r\n    }else if(tokensSold < 500000*10**6){\r\n      price = 62;\r\n    }else if(tokensSold < 510000*10**6){\r\n      price = 60;\r\n    }else if(tokensSold < 520000*10**6){\r\n      price = 58;\r\n    }else if(tokensSold < 530000*10**6){\r\n      price = 57;\r\n    }else if(tokensSold < 540000*10**6){\r\n      price = 56;\r\n    }else if(tokensSold < 550000*10**6){\r\n      price = 55;\r\n    }else if(tokensSold < 560000*10**6){\r\n      price = 54;\r\n    }else if(tokensSold < 570000*10**6){\r\n      price = 53;\r\n    }else if(tokensSold < 580000*10**6){\r\n      price = 52;\r\n    }else if(tokensSold < 590000*10**6){\r\n      price = 51;\r\n    }else if(tokensSold < 600000*10**6){\r\n      price = 50;\r\n    }else if(tokensSold < 610000*10**6){\r\n      price = 49;\r\n    }else if(tokensSold < 620000*10**6){\r\n      price = 48;\r\n    }else if(tokensSold < 630000*10**6){\r\n      price = 47;\r\n    }else if(tokensSold < 640000*10**6){\r\n      price = 46;\r\n    }else if(tokensSold < 650000*10**6){\r\n      price = 45;\r\n    }else if(tokensSold < 660000*10**6){\r\n      price = 44;\r\n    }else if(tokensSold < 670000*10**6){\r\n      price = 43;\r\n    }else if(tokensSold < 680000*10**6){\r\n      price = 42;\r\n    }else if(tokensSold < 690000*10**6){\r\n      price = 41;\r\n    }else if(tokensSold < 700000*10**6){\r\n      price = 40;\r\n    }\r\n    //the price above is Token per ETH\r\n    // calculate token amount to be sent\r\n    uint256 tokens = (weiAmount/10**12) * price;//weiamount * price \r\n    \r\n    \r\n\r\n    require(tokens >= 1 * 10 ** 6); //1 token minimum\r\n\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n\r\n    tokenReward.transfer(beneficiary, tokens);\r\n    tokensSold = tokensSold.add(tokens);//now we can track the number of tokens sold.\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    // wallet.transfer(msg.value);\r\n    if (!wallet.send(msg.value)) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = started;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  function withdrawTokens(uint256 _amount) {\r\n    if(msg.sender!=wallet) throw;\r\n    tokenReward.transfer(wallet,_amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressOfTokenUsedAsReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://02fd73940265393bbeed92c1a5c75c6ac39656655693e29e0822d001da23fb7c"}]}