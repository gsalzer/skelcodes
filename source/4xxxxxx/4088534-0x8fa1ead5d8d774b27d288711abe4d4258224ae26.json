{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/*\r\n* LOK 'LookRev Token' crowdfunding contract\r\n*\r\n* Refer to https://lookrev.com/ for further information.\r\n* \r\n* Developer: LookRev (TM) 2017.\r\n*\r\n* Audited by BokkyPooBah / Bok Consulting Pty Ltd 2017.\r\n* \r\n* The MIT License.\r\n*\r\n*/\r\n\r\n/*\r\n * ERC20 Token Standard\r\n * https://github.com/ethereum/EIPs/issues/20\r\n *\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address _who) constant returns (uint balance);\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\r\n  function transfer(address _to, uint _value) returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool ok);\r\n  function approve(address _spender, uint _value) returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a && c >= b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    uint c = a - b;\r\n    assert(c <= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) onlyOwner {\r\n    if (_newOwner != address(0)) {\r\n      newOwner = _newOwner;\r\n    }\r\n  }\r\n\r\n  function acceptOwnership() {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by InvestSeed\r\n */\r\ncontract StandardToken is ERC20, Ownable, SafeMath {\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender],_amount);\r\n            balances[_to] = safeAdd(balances[_to],_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] = safeSub(balances[_from],_amount);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\r\n            balances[_to] = safeAdd(balances[_to],_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n           return false;\r\n        }\r\n        if (balances[msg.sender] < _value) {\r\n            return false;\r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n     }\r\n\r\n     function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n       return allowed[_owner][_spender];\r\n     }\r\n}\r\n\r\n/**\r\n * LookRev token initial offering.\r\n *\r\n * Token supply is created in the token contract creation and allocated to owner.\r\n *\r\n */\r\ncontract LookRevToken is StandardToken {\r\n\r\n    /*\r\n    *  Token meta data\r\n    */\r\n    string public constant name = \"LookRev\";\r\n    string public constant symbol = \"LOK\";\r\n    uint8 public constant decimals = 18;\r\n    string public VERSION = 'LOK1.0';\r\n    bool public finalised = false;\r\n    \r\n    address public wallet;\r\n\r\n    mapping(address => bool) public kycRequired;\r\n\r\n    // Start - Wednesday, August 16, 2017 10:00:00 AM GMT-07:00 DST\r\n    // End - Saturday, September 16, 2017 10:00:00 AM GMT-07:00 DST\r\n    uint public constant START_DATE = 1502902800;\r\n    uint public constant END_DATE = 1505581200;\r\n\r\n    uint public constant DECIMALSFACTOR = 10**uint(decimals);\r\n    uint public constant TOKENS_SOFT_CAP =   10000000 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_HARD_CAP = 2000000000 * DECIMALSFACTOR;\r\n    uint public constant TOKENS_TOTAL =    4000000000 * DECIMALSFACTOR;\r\n    uint public initialSupply = 10000000 * DECIMALSFACTOR;\r\n\r\n    // 1 KETHER = 2,400,000 tokens\r\n    // 1 ETH = 2,400 tokens\r\n    // Presale 20% discount 1 ETH = 3,000 tokens\r\n    // Presale 10% discount 1 ETH = 2,667 tokens\r\n    uint public tokensPerKEther = 3000000;\r\n    uint public CONTRIBUTIONS_MIN = 0 ether;\r\n    uint public CONTRIBUTIONS_MAX = 0 ether;\r\n    uint public constant KYC_THRESHOLD = 10000 * DECIMALSFACTOR;\r\n\r\n    function LookRevToken() {\r\n      owner = msg.sender;\r\n      wallet = owner;\r\n      totalSupply = initialSupply;\r\n      balances[owner] = totalSupply;\r\n    }\r\n\r\n   // LookRev can change the crowdsale wallet address\r\n   function setWallet(address _wallet) onlyOwner {\r\n        wallet = _wallet;\r\n        WalletUpdated(wallet);\r\n    }\r\n    event WalletUpdated(address newWallet);\r\n\r\n    // Can only be set before the start of the crowdsale\r\n    // Owner can change the rate before the crowdsale starts\r\n    function setTokensPerKEther(uint _tokensPerKEther) onlyOwner {\r\n        require(now < START_DATE);\r\n        require(_tokensPerKEther > 0);\r\n        tokensPerKEther = _tokensPerKEther;\r\n        TokensPerKEtherUpdated(tokensPerKEther);\r\n    }\r\n    event TokensPerKEtherUpdated(uint tokensPerKEther);\r\n\r\n    // Accept ethers to buy tokens during the crowdsale\r\n    function () payable {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n    // Accept ethers and exchanges to purchase tokens on behalf of user\r\n    // msg.value (in units of wei)\r\n    function proxyPayment(address participant) payable {\r\n\r\n        require(!finalised);\r\n\r\n        require(now <= END_DATE);\r\n\r\n        require(msg.value > CONTRIBUTIONS_MIN);\r\n        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\r\n\r\n         // Calculate number of tokens for contributed ETH\r\n         // `18` is the ETH decimals\r\n         // `- decimals` is the token decimals\r\n         uint tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\r\n\r\n         // Check if the hard cap will be exceeded\r\n         require(totalSupply + tokens <= TOKENS_HARD_CAP);\r\n\r\n         // Add tokens purchased to account's balance and total supply\r\n         balances[participant] = safeAdd(balances[participant],tokens);\r\n         totalSupply = safeAdd(totalSupply,tokens);\r\n\r\n         // Log the tokens purchased \r\n         Transfer(0x0, participant, tokens);\r\n         // - buyer = participant\r\n         // - ethers = msg.value\r\n         // - participantTokenBalance = balances[participant]\r\n         // - tokens = tokens\r\n         // - newTotalSupply = totalSupply\r\n         // - tokensPerKEther = tokensPerKEther\r\n         TokensBought(participant, msg.value, balances[participant], tokens,\r\n              totalSupply, tokensPerKEther);\r\n\r\n         if (msg.value > KYC_THRESHOLD) {\r\n             // KYC verification required before participant can transfer the tokens\r\n             kycRequired[participant] = true;\r\n         }\r\n\r\n         // Transfer the contributed ethers to the crowdsale wallet\r\n         // throw is deprecated starting from Ethereum v0.9.0\r\n         wallet.transfer(msg.value);\r\n    }\r\n\r\n    event TokensBought(address indexed buyer, uint ethers, \r\n        uint participantTokenBalance, uint tokens, uint newTotalSupply, \r\n        uint tokensPerKEther);\r\n\r\n    function finalise() onlyOwner {\r\n        // Can only finalise if raised > soft cap or after the end date\r\n        require(totalSupply >= TOKENS_SOFT_CAP || now > END_DATE);\r\n\r\n        require(!finalised);\r\n\r\n        finalised = true;\r\n    }\r\n\r\n   function addPrecommitment(address participant, uint balance) onlyOwner {\r\n        require(now < START_DATE);\r\n        require(balance > 0);\r\n        balances[participant] = safeAdd(balances[participant],balance);\r\n        totalSupply = safeAdd(totalSupply,balance);\r\n        Transfer(0x0, participant, balance);\r\n        PrecommitmentAdded(participant, balance);\r\n    }\r\n    event PrecommitmentAdded(address indexed participant, uint balance);\r\n\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends\r\n        // Allow awarding team members before, during and after crowdsale\r\n        require(finalised || msg.sender == owner);\r\n        require(!kycRequired[msg.sender]);\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n   function transferFrom(address _from, address _to, uint _amount) returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends\r\n        require(finalised);\r\n        require(!kycRequired[_from]);\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function kycVerify(address participant, bool _required) onlyOwner {\r\n        kycRequired[participant] = _required;\r\n        KycVerified(participant, kycRequired[participant]);\r\n    }\r\n    event KycVerified(address indexed participant, bool required);\r\n\r\n    // Any account can burn _from's tokens as long as the _from account has\r\n    // approved the _amount to be burnt using approve(0x0, _amount)\r\n    function burnFrom(address _from, uint _amount) returns (bool success) {\r\n        require(totalSupply >= _amount);\r\n\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][0x0] >= _amount\r\n            && _amount > 0\r\n            && balances[0x0] + _amount > balances[0x0]\r\n        ) {\r\n            balances[_from] = safeSub(balances[_from],_amount);\r\n            balances[0x0] = safeAdd(balances[0x0],_amount);\r\n            allowed[_from][0x0] = safeSub(allowed[_from][0x0],_amount);\r\n            totalSupply = safeSub(totalSupply,_amount);\r\n            Transfer(_from, 0x0, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // LookRev can transfer out any accidentally sent ERC20 tokens\r\n    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success) \r\n    {\r\n        return ERC20(tokenAddress).transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"setTokensPerKEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"kycVerify\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYC_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"addPrecommitment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTIONS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kycRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"TokensPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participantTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"PrecommitmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"KycVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LookRevToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2c00406cc4d70c91f2783ba82f2f864f9cb549fc2678e2099ab0674e245eefaa"}]}