{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Presale {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) public balances;\r\n\r\n  // Minimum amount of wei required for presale to be successful.  If not successful, refunds are provided.\r\n  uint256 public minGoal;\r\n  // The epoch unix timestamp of when the presale starts\r\n  uint256 public startTime;\r\n  // The epoch unix timestamp of when the presale ends\r\n  uint256 public endTime;\r\n  // The wallet address that the funds will be sent to\r\n  address public projectWallet;\r\n\r\n  uint256 private totalRaised;\r\n\r\n  function Presale() {\r\n    minGoal = 83.33 ether;\r\n    startTime = 1505248886;\r\n    endTime = 1506841199;   // Sept 30, 2017 midnight PT\r\n    projectWallet = address(0x2a00BFd8379786ADfEbb6f2F59011535a4f8d4E4);\r\n  }\r\n\r\n  function transferToProjectWallet() {\r\n    // only allow transfers if there is balance\r\n    require(this.balance > 0);\r\n    // only allow transfers if minimum goal is met\r\n    require(totalRaised >= minGoal);\r\n    if(!projectWallet.send(this.balance)) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function refund() {\r\n    // only allow refund if the presale has ended\r\n    require(now > endTime);\r\n    // only allow refund if the minGoal has not been reached\r\n    require(totalRaised < minGoal);\r\n    // only allow refund during a 60 day window after presale ends\r\n    require(now < (endTime + 60 days));\r\n    uint256 amount = balances[msg.sender];\r\n    // only allow refund if investor has invested\r\n    require(amount > 0);\r\n    // after refunding, zero out balance\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function transferRemaining() {\r\n    // only allow transfer if presale has failed\r\n    require(totalRaised < minGoal);\r\n    // only allow transfer after refund window has passed\r\n    require(now >= (endTime + 60 days));\r\n    // only allow transfer if there is remaining balance\r\n    require(this.balance > 0);\r\n    projectWallet.transfer(this.balance);\r\n  }\r\n\r\n  function () payable {\r\n    // only allow payments greater than 0\r\n    require(msg.value > 0);\r\n    // only allow payments after presale has started\r\n    require(now >= startTime);\r\n    // only allow payments before presale has ended\r\n    require(now <= endTime);\r\n    // if all checks pass, then add amount to balance of the sender\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    totalRaised = totalRaised.add(msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"transferToProjectWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Presale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://421e242e8c455fc61db407e603caa42abdf9b90f946b0b5dade576f4d20e4aac"}]}