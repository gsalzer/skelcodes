{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.11;\r\n\r\ncontract CrowdWithUs {\r\n    \r\n    address public creator;\r\n    address public fundRecipient; // creator may be different than recipient\r\n    uint public minimumToRaise; // required to reach at least this much, else everyone gets refund\r\n    string campaignUrl; \r\n    byte constant version = 1;\r\n\r\n    // Data structures\r\n    enum State {\r\n        Fundraising,\r\n        ExpiredRefund,\r\n        Successful,\r\n        Closed\r\n    }\r\n\r\n    struct Contribution {\r\n        uint amount;\r\n        address contributor;\r\n    }\r\n\r\n    // State variables\r\n    State public state = State.Fundraising; // initialize on create\r\n    uint public totalRaised;\r\n    uint public currentBalance;\r\n    uint public raiseBy;\r\n    uint public completeAt;\r\n    Contribution[] contributions;\r\n\r\n    event LogFundingReceived(address addr, uint amount, uint currentTotal);\r\n    event LogWinnerPaid(address winnerAddress);\r\n    event LogFunderInitialized(\r\n        address creator,\r\n        address fundRecipient,\r\n        string url,\r\n        uint _minimumToRaise, \r\n        uint256 raiseby\r\n    );\r\n\r\n    modifier inState(State _state) {\r\n        if (state != _state) throw;\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        if (msg.sender != creator) throw;\r\n        _;\r\n    }\r\n\r\n    // Wait 1 hour after final contract state before allowing contract destruction\r\n    modifier atEndOfLifecycle() {\r\n        if(!((state == State.ExpiredRefund || state == State.Successful) && completeAt + 1 hours < now)) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function CrowdWithUs(\r\n        uint timeInHoursForFundraising,\r\n        string _campaignUrl,\r\n        address _fundRecipient,\r\n        uint _minimumToRaise)\r\n    {\r\n        creator = msg.sender;\r\n        fundRecipient = _fundRecipient;\r\n        campaignUrl = _campaignUrl;\r\n        minimumToRaise = _minimumToRaise * 1 ether; //convert to wei\r\n        raiseBy = now + (timeInHoursForFundraising * 1 hours);\r\n        currentBalance = 0;\r\n        LogFunderInitialized(\r\n            creator,\r\n            fundRecipient,\r\n            campaignUrl,\r\n            minimumToRaise,\r\n            raiseBy);\r\n    }\r\n\r\n    function contribute()\r\n    public\r\n    inState(State.Fundraising) payable returns (uint256)\r\n    {\r\n        contributions.push(\r\n            Contribution({\r\n                amount: msg.value,\r\n                contributor: msg.sender\r\n                }) // use array, so can iterate\r\n            );\r\n        totalRaised += msg.value;\r\n        currentBalance = totalRaised;\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n        return contributions.length - 1; // return id\r\n    }\r\n\r\n    function checkIfFundingCompleteOrExpired() {\r\n        if (totalRaised > minimumToRaise) {\r\n            state = State.Successful;\r\n            payOut();\r\n\r\n            // could incentivize sender who initiated state change here\r\n            } else if ( now > raiseBy )  {\r\n                state = State.ExpiredRefund; // backers can now collect refunds by calling getRefund(id)\r\n            }\r\n            completeAt = now;\r\n        }\r\n\r\n        function payOut()\r\n        public\r\n        inState(State.Successful)\r\n        {\r\n            if(!fundRecipient.send(this.balance)) {\r\n                throw;\r\n            }\r\n            state = State.Closed;\r\n            currentBalance = 0;\r\n            LogWinnerPaid(fundRecipient);\r\n        }\r\n\r\n        function getRefund(uint256 id)\r\n        public\r\n        inState(State.ExpiredRefund) \r\n        returns (bool)\r\n        {\r\n            if (contributions.length <= id || id < 0 || contributions[id].amount == 0 ) {\r\n                throw;\r\n            }\r\n\r\n            uint amountToRefund = contributions[id].amount;\r\n            contributions[id].amount = 0;\r\n\r\n            if(!contributions[id].contributor.send(amountToRefund)) {\r\n                contributions[id].amount = amountToRefund;\r\n                return false;\r\n            }\r\n            else{\r\n                totalRaised -= amountToRefund;\r\n                currentBalance = totalRaised;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function removeContract()\r\n        public\r\n        isCreator()\r\n        atEndOfLifecycle()\r\n        {\r\n            selfdestruct(msg.sender);\r\n            // creator gets all money that hasn't be claimed\r\n\r\n\r\n        }\r\n\r\n        function () { throw; }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completeAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"timeInHoursForFundraising\",\"type\":\"uint256\"},{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_fundRecipient\",\"type\":\"address\"},{\"name\":\"_minimumToRaise\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"LogWinnerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fundRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_minimumToRaise\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"raiseby\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"}]","ContractName":"CrowdWithUs","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000080000000000000000000000000b382b75b424033d0563bfa6757e9bb96de4089130000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000001b68747470733a2f2f63726f77647769746875732e6c6f6e646f6e2f0000000000","Library":"","SwarmSource":"bzzr://fdc894109a3aeb31098a07fc397b6abfbb6242a09be35ef530182c18c62670e5"}]}