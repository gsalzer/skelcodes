{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n//\r\n// Swarm Voting MVP\r\n// Single use contract to manage liquidity vote shortly after Swarm TS\r\n// Author: Max Kaye\r\n//\r\n//\r\n// Architecture:\r\n// * Ballot authority declares public key with which to encrypt ballots\r\n// * Users submit encrypted ballots as blobs\r\n// * These ballots are tracked by the ETH address of the sender\r\n// * Following the conclusion of the ballot, the secret key is provided\r\n//   by the ballot authority, and all users may transparently and\r\n//   independently validate the results\r\n//\r\n// Notes:\r\n// * Since ballots are encrypted the only validation we can do is length\r\n//\r\n\r\n\r\ncontract SwarmVotingMVP {\r\n    //// ** Storage Variables\r\n\r\n    // Std owner pattern\r\n    address public owner;\r\n\r\n    // test mode - operations like changing start/end times\r\n    bool public testMode = false;\r\n\r\n    // Maps to store ballots, along with corresponding log of voters.\r\n    // Should only be modified through `addBallotAndVoter` internal function\r\n    mapping(uint256 => bytes32) public encryptedBallots;\r\n    mapping(uint256 => bytes32) public associatedPubkeys;\r\n    mapping(uint256 => address) public associatedAddresses;\r\n    uint256 public nVotesCast = 0;\r\n\r\n    // Use a map for voters to look up their ballot\r\n    mapping(address => uint256) public voterToBallotID;\r\n\r\n    // Public key with which to encrypt ballots - curve25519\r\n    bytes32 public ballotEncryptionPubkey;\r\n\r\n    // Private key to be set after ballot conclusion - curve25519\r\n    bytes32 public ballotEncryptionSeckey;\r\n    bool seckeyRevealed = false;\r\n\r\n    // Timestamps for start and end of ballot (UTC)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Banned addresses - necessary to ban Swarm Fund from voting in their own ballot\r\n    mapping(address => bool) public bannedAddresses;\r\n    // TODO: Is this the right address?\r\n    address public swarmFundAddress = 0x8Bf7b2D536D286B9c5Ad9d99F608e9E214DE63f0;\r\n\r\n\r\n    //// ** Events\r\n    event CreatedBallot(address creator, uint256 start, uint256 end, bytes32 encPubkey);\r\n    event FailedVote(address voter, string reason);\r\n    event SuccessfulVote(address voter, bytes32 ballot, bytes32 pubkey);\r\n    event SeckeyRevealed(bytes32 secretKey);\r\n    event TestingEnabled();\r\n    event Error(string error);\r\n\r\n\r\n    //// ** Modifiers\r\n\r\n    modifier notBanned {\r\n        if (!bannedAddresses[msg.sender]) {  // ensure banned addresses cannot vote\r\n            _;\r\n        } else {\r\n            Error(\"Banned address\");\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender == owner) {  // fail if msg.sender is not the owner\r\n            _;\r\n        } else {\r\n            Error(\"Not owner\");\r\n        }\r\n    }\r\n\r\n    modifier ballotOpen {\r\n        if (block.timestamp > startTime && block.timestamp < endTime) {\r\n            _;\r\n        } else {\r\n            Error(\"Ballot not open\");\r\n        }\r\n    }\r\n\r\n    modifier onlyTesting {\r\n        if (testMode) {\r\n            _;\r\n        } else {\r\n            Error(\"Testing disabled\");\r\n        }\r\n    }\r\n\r\n    //// ** Functions\r\n\r\n    // Constructor function - init core params on deploy\r\n    function SwarmVotingMVP(uint256 _startTime, uint256 _endTime, bytes32 _encPK, bool enableTesting) public {\r\n        owner = msg.sender;\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        ballotEncryptionPubkey = _encPK;\r\n\r\n        bannedAddresses[swarmFundAddress] = true;\r\n\r\n        if (enableTesting) {\r\n            testMode = true;\r\n            TestingEnabled();\r\n        }\r\n    }\r\n\r\n    // Ballot submission\r\n    function submitBallot(bytes32 encryptedBallot, bytes32 senderPubkey) notBanned ballotOpen public {\r\n        addBallotAndVoter(encryptedBallot, senderPubkey);\r\n    }\r\n\r\n    // Internal function to ensure atomicity of voter log\r\n    function addBallotAndVoter(bytes32 encryptedBallot, bytes32 senderPubkey) internal {\r\n        uint256 ballotNumber = nVotesCast;\r\n        encryptedBallots[ballotNumber] = encryptedBallot;\r\n        associatedPubkeys[ballotNumber] = senderPubkey;\r\n        associatedAddresses[ballotNumber] = msg.sender;\r\n        voterToBallotID[msg.sender] = ballotNumber;\r\n        nVotesCast += 1;\r\n        SuccessfulVote(msg.sender, encryptedBallot, senderPubkey);\r\n    }\r\n\r\n    // Allow the owner to reveal the secret key after ballot conclusion\r\n    function revealSeckey(bytes32 _secKey) onlyOwner public {\r\n        require(block.timestamp > endTime);\r\n\r\n        ballotEncryptionSeckey = _secKey;\r\n        seckeyRevealed = true;  // this flag allows the contract to be locked\r\n        SeckeyRevealed(_secKey);\r\n    }\r\n\r\n    // Helpers\r\n    function getEncPubkey() public constant returns (bytes32) {\r\n        return ballotEncryptionPubkey;\r\n    }\r\n\r\n    function getEncSeckey() public constant returns (bytes32) {\r\n        return ballotEncryptionSeckey;\r\n    }\r\n\r\n    function getBallotOptions() public pure returns (uint8[2][4]) {\r\n        // NOTE: storing a 4x2 array in storage nearly doubled the gas cost\r\n        // of deployment - compromise is to create a constant function\r\n        return [\r\n            [8, 42],\r\n            [42, 8],\r\n            [16, 42],\r\n            [4, 84]\r\n        ];\r\n    }\r\n    \r\n    // ballot params - allows the frontend to do some checking\r\n    function getBallotOptNumber() public pure returns (uint256) {\r\n        return 4;\r\n    }\r\n\r\n    // Test functions\r\n    function setEndTime(uint256 newEndTime) onlyTesting onlyOwner public {\r\n        endTime = newEndTime;\r\n    }\r\n\r\n    function banAddress(address _addr) onlyTesting onlyOwner public {\r\n        bannedAddresses[_addr] = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nVotesCast\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBallotOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[2][4]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"encryptedBallot\",\"type\":\"bytes32\"},{\"name\":\"senderPubkey\",\"type\":\"bytes32\"}],\"name\":\"submitBallot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ballotEncryptionPubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ballotEncryptionSeckey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEncSeckey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voterToBallotID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBallotOptNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bannedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"associatedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swarmFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEncPubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedBallots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"banAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"associatedPubkeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secKey\",\"type\":\"bytes32\"}],\"name\":\"revealSeckey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_encPK\",\"type\":\"bytes32\"},{\"name\":\"enableTesting\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"encPubkey\",\"type\":\"bytes32\"}],\"name\":\"CreatedBallot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ballot\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"pubkey\",\"type\":\"bytes32\"}],\"name\":\"SuccessfulVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"secretKey\",\"type\":\"bytes32\"}],\"name\":\"SeckeyRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TestingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"error\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"SwarmVotingMVP","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059f73060000000000000000000000000000000000000000000000000000000005a00e97014108a8f844f506d91daedfd3542425bd5b4e2b1b3e7d959a2344907689dea7e0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ba032264460d0b5e78d546e10cc8a9c8236005349b362dcc021ef17a9846ee34"}]}