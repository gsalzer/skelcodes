{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/PricingStrategy.sol\r\n\r\ncontract PricingStrategy {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint[] public rates;\r\n    uint[] public limits;\r\n\r\n    function PricingStrategy(\r\n        uint[] _rates,\r\n        uint[] _limits\r\n    ) public\r\n    {\r\n        require(_rates.length == _limits.length);\r\n        rates = _rates;\r\n        limits = _limits;\r\n    }\r\n\r\n    /** Interface declaration. */\r\n    function isPricingStrategy() public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /** Calculate the current price for buy in amount. */\r\n    function calculateTokenAmount(uint weiAmount, uint weiRaised) public view returns (uint tokenAmount) {\r\n        if (weiAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        var (rate, index) = currentRate(weiRaised);\r\n        tokenAmount = weiAmount.mul(rate);\r\n\r\n        // if we crossed slot border, recalculate remaining tokens according to next slot price\r\n        if (weiRaised.add(weiAmount) > limits[index]) {\r\n            uint currentSlotWei = limits[index].sub(weiRaised);\r\n            uint currentSlotTokens = currentSlotWei.mul(rate);\r\n            uint remainingWei = weiAmount.sub(currentSlotWei);\r\n            tokenAmount = currentSlotTokens.add(calculateTokenAmount(remainingWei, limits[index]));\r\n        }\r\n    }\r\n\r\n    function currentRate(uint weiRaised) public view returns (uint rate, uint8 index) {\r\n        rate = rates[0];\r\n        index = 0;\r\n\r\n        while (weiRaised >= limits[index]) {\r\n            rate = rates[++index];\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rates\",\"type\":\"uint256[]\"},{\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PricingStrategy","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000006d6000000000000000000000000000000000000000000000000000000000000061a80000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000000000000000000000000000000000000000059d800000000000000000000000000000000000000000000000000000000000055f000000000000000000000000000000000000000000000000000000000000052080000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000045ee58a5497de8000000000000000000000000000000000000000000000000010c570cb5c6a79800000000000000000000000000000000000000000000000001d2bfc0c643d14800000000000000000000000000000000000000000000000002992874d6c0faf8000000000000000000000000000000000000000000000000035f9128e73e24a80000000000000000000000000000000000000000000000000425f9dcf7bb4e5800000000000000000000000000000000000000000000000004ec6291083878080000","Library":"","SwarmSource":"bzzr://5c26230157a5116f48b6cd23be54775f36823efc980c2a39a9465b99c327dd63"}]}