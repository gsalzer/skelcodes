{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Forgiveness {\r\n    using SafeMath for uint256;\r\n    \r\n    uint constant forgivenessFee = 0.01 ether;\r\n    uint public ownerBalance;\r\n    address public owner;\r\n    \r\n    mapping (bytes32 => bool) forgiven;\r\n    \r\n    function Forgiveness () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function askForgiveness (string transaction) public payable {\r\n        require(msg.value >= forgivenessFee);\r\n        require(!isForgiven(transaction));\r\n        ownerBalance += msg.value;\r\n        forgiven[keccak256(transaction)] = true;\r\n    }\r\n    \r\n    function isForgiven (string transaction) public view returns (bool) {\r\n        return forgiven[keccak256(transaction)];\r\n    }\r\n    \r\n    function withdrawFees () public {\r\n        require(msg.sender == owner);\r\n        uint toWithdraw = ownerBalance;\r\n        ownerBalance = 0;\r\n        msg.sender.transfer(toWithdraw);\r\n    }\r\n    \r\n    function getBalance () public view returns (uint) {\r\n        require(msg.sender == owner);\r\n        return ownerBalance;\r\n    }\r\n\r\n    function () public payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transaction\",\"type\":\"string\"}],\"name\":\"isForgiven\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transaction\",\"type\":\"string\"}],\"name\":\"askForgiveness\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Forgiveness","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://730bb76e5923535c253292f9e48aa1af4ce57192407ee46774ba0931a6b20512"}]}