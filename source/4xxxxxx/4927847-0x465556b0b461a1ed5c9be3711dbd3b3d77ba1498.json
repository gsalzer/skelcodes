{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Token {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    \r\n    uint8 public decimals;\r\n}\r\n\r\ncontract Exchange {\r\n    struct Order {\r\n        address creator;\r\n        address token;\r\n        bool buy;\r\n        uint price;\r\n        uint amount;\r\n    }\r\n    \r\n    address public owner;\r\n    uint public feeDeposit = 500;\r\n    \r\n    mapping (uint => Order) orders;\r\n    uint currentOrderId = 0;\r\n    \r\n    /* Token address (0x0 - Ether) => User address => balance */\r\n    mapping (address => mapping (address => uint)) public balanceOf;\r\n    \r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    \r\n    event PlaceSell(address indexed token, address indexed user, uint price, uint amount, uint id);\r\n    event PlaceBuy(address indexed token, address indexed user, uint price, uint amount, uint id);\r\n    event FillOrder(uint indexed id, address indexed user, uint amount);\r\n    event CancelOrder(uint indexed id);\r\n    event Deposit(address indexed token, address indexed user, uint amount);\r\n    event Withdraw(address indexed token, address indexed user, uint amount);\r\n    event BalanceChanged(address indexed token, address indexed user, uint value);\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function Exchange() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) private pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) private pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function safeMul(uint a, uint b) private pure returns (uint) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function decFeeDeposit(uint delta) external onlyOwner {\r\n        feeDeposit = safeSub(feeDeposit, delta);\r\n    }\r\n    \r\n    function calcAmountEther(address tokenAddr, uint price, uint amount) private view returns (uint) {\r\n        uint k = 10;\r\n        k = k ** Token(tokenAddr).decimals();\r\n        return safeMul(amount, price) / k;\r\n    }\r\n    \r\n    function balanceAdd(address tokenAddr, address user, uint amount) private {\r\n        balanceOf[tokenAddr][user] =\r\n            safeAdd(balanceOf[tokenAddr][user], amount);\r\n    }\r\n    \r\n    function balanceSub(address tokenAddr, address user, uint amount) private {\r\n        require(balanceOf[tokenAddr][user] >= amount);\r\n        balanceOf[tokenAddr][user] =\r\n            safeSub(balanceOf[tokenAddr][user], amount);\r\n    }\r\n    \r\n    function placeBuy(address tokenAddr, uint price, uint amount) external {\r\n        require(price > 0 && amount > 0);\r\n        uint amountEther = calcAmountEther(tokenAddr, price, amount);\r\n        require(amountEther > 0);\r\n        balanceSub(0x0, msg.sender, amountEther);\r\n        BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\r\n        orders[currentOrderId] = Order({\r\n            creator: msg.sender,\r\n            token: tokenAddr,\r\n            buy: true,\r\n            price: price,\r\n            amount: amount\r\n        });\r\n        PlaceBuy(tokenAddr, msg.sender, price, amount, currentOrderId);\r\n        currentOrderId++;\r\n    }\r\n    \r\n    function placeSell(address tokenAddr, uint price, uint amount) external {\r\n        require(price > 0 && amount > 0);\r\n        uint amountEther = calcAmountEther(tokenAddr, price, amount);\r\n        require(amountEther > 0);\r\n        balanceSub(tokenAddr, msg.sender, amount);\r\n        BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\r\n        orders[currentOrderId] = Order({\r\n            creator: msg.sender,\r\n            token: tokenAddr,\r\n            buy: false,\r\n            price: price,\r\n            amount: amount\r\n        });\r\n        PlaceSell(tokenAddr, msg.sender, price, amount, currentOrderId);\r\n        currentOrderId++;\r\n    }\r\n    \r\n    function fillOrder(uint id, uint amount) external {\r\n        require(id < currentOrderId);\r\n        require(amount > 0);\r\n        require(orders[id].creator != msg.sender);\r\n        require(orders[id].amount >= amount);\r\n        uint amountEther = calcAmountEther(orders[id].token, orders[id].price, amount);\r\n        if (orders[id].buy) {\r\n            /* send tokens from sender to creator */\r\n            // sub from sender\r\n            balanceSub(orders[id].token, msg.sender, amount);\r\n            BalanceChanged(\r\n                orders[id].token,\r\n                msg.sender,\r\n                balanceOf[orders[id].token][msg.sender]\r\n            );\r\n            \r\n            // add to creator\r\n            balanceAdd(orders[id].token, orders[id].creator, amount);\r\n            BalanceChanged(\r\n                orders[id].token,\r\n                orders[id].creator,\r\n                balanceOf[orders[id].token][orders[id].creator]\r\n            );\r\n            \r\n            /* send Ether to sender */\r\n            balanceAdd(0x0, msg.sender, amountEther);\r\n            BalanceChanged(\r\n                0x0,\r\n                msg.sender,\r\n                balanceOf[0x0][msg.sender]\r\n            );\r\n        } else {\r\n            /* send Ether from sender to creator */\r\n            // sub from sender\r\n            balanceSub(0x0, msg.sender, amountEther);\r\n            BalanceChanged(\r\n                0x0,\r\n                msg.sender,\r\n                balanceOf[0x0][msg.sender]\r\n            );\r\n            \r\n            // add to creator\r\n            balanceAdd(0x0, orders[id].creator, amountEther);\r\n            BalanceChanged(\r\n                0x0,\r\n                orders[id].creator,\r\n                balanceOf[0x0][orders[id].creator]\r\n            );\r\n            \r\n            /* send tokens to sender */\r\n            balanceAdd(orders[id].token, msg.sender, amount);\r\n            BalanceChanged(\r\n                orders[id].token,\r\n                msg.sender,\r\n                balanceOf[orders[id].token][msg.sender]\r\n            );\r\n        }\r\n        orders[id].amount -= amount;\r\n        FillOrder(id, msg.sender, orders[id].amount);\r\n    }\r\n    \r\n    function cancelOrder(uint id) external {\r\n        require(id < currentOrderId);\r\n        require(orders[id].creator == msg.sender);\r\n        require(orders[id].amount > 0);\r\n        if (orders[id].buy) {\r\n            uint amountEther = calcAmountEther(orders[id].token, orders[id].price, orders[id].amount);\r\n            balanceAdd(0x0, msg.sender, amountEther);\r\n            BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\r\n        } else {\r\n            balanceAdd(orders[id].token, msg.sender, orders[id].amount);\r\n            BalanceChanged(orders[id].token, msg.sender, balanceOf[orders[id].token][msg.sender]);\r\n        }\r\n        orders[id].amount = 0;\r\n        CancelOrder(id);\r\n    }\r\n    \r\n    function () external payable {\r\n        require(msg.value > 0);\r\n        uint fee = msg.value * feeDeposit / 10000;\r\n        require(msg.value > fee);\r\n        balanceAdd(0x0, owner, fee);\r\n        \r\n        uint toAdd = msg.value - fee;\r\n        balanceAdd(0x0, msg.sender, toAdd);\r\n        \r\n        Deposit(0x0, msg.sender, toAdd);\r\n        BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\r\n        \r\n        FundTransfer(msg.sender, toAdd, true);\r\n    }\r\n    \r\n    function depositToken(address tokenAddr, uint amount) external {\r\n        require(tokenAddr != 0x0);\r\n        require(amount > 0);\r\n        Token(tokenAddr).transferFrom(msg.sender, this, amount);\r\n        balanceAdd(tokenAddr, msg.sender, amount);\r\n        \r\n        Deposit(tokenAddr, msg.sender, amount);\r\n        BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\r\n    }\r\n    \r\n    function withdrawEther(uint amount) external {\r\n        require(amount > 0);\r\n        balanceSub(0x0, msg.sender, amount);\r\n        msg.sender.transfer(amount);\r\n        \r\n        Withdraw(0x0, msg.sender, amount);\r\n        BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\r\n        \r\n        FundTransfer(msg.sender, amount, false);\r\n    }\r\n    \r\n    function withdrawToken(address tokenAddr, uint amount) external {\r\n        require(tokenAddr != 0x0);\r\n        require(amount > 0);\r\n        balanceSub(tokenAddr, msg.sender, amount);\r\n        Token(tokenAddr).transfer(msg.sender, amount);\r\n        \r\n        Withdraw(tokenAddr, msg.sender, amount);\r\n        BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"decFeeDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d07ddb2934a50b5ab0df451a0534f1acd4d76a585c1ff92482de8083e0e19f9"}]}