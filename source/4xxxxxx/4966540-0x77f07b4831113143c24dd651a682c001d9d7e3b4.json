{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    //Disable Decimal usage\r\n    //uint8 public decimals = 0;\r\n\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) private allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        //totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        totalSupply = initialSupply;\r\n        //balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) internal\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        internal\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract MyAdvancedToken is owned, TokenERC20 {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MyAdvancedToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) internal  {\r\n        //Convert to eth value\r\n        //mintedAmount = mintedAmount  * 10 ** uint256(decimals);\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        //Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n/* //Don't allow buying this way\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n        _transfer(this, msg.sender, amount);              // makes the transfers\r\n    }\r\n*/    \r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    function sell(uint256 amount) public {\r\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, this, amount);              // makes the transfers\r\n        if (sellPrice>0) {\r\n            msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n        }\r\n        totalSupply -= amount;\r\n    }\r\n    \r\n    function getBalance(address target)  view public returns (uint256){\r\n        return balanceOf[target];\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\n\r\ncontract ScavengerHuntTokenWatch is MyAdvancedToken {\r\n    uint public crowdsaleDeadline;\r\n    uint public tokensDistributed;\r\n    uint public totalHunters;\r\n    uint public maxDailyRewards;\r\n    string public scavengerHuntTokenName;\r\n    string public scavengerHuntTokenSymbol;\r\n\r\n    //Allow to stop being anonymous\r\n    mapping (address => bytes32) public registeredNames;\r\n\r\n    // 1 = Digged, No Reward\r\n    // >1 X = Digged, Got Reward\r\n    mapping (bytes32 => mapping (bytes32 => uint)) public GPSDigs;\r\n\r\n    //Address of the person that got the reward\r\n    mapping (bytes32 => mapping (bytes32 => address)) public GPSActivityAddress;\r\n\r\n    //Maximize the daily reward\r\n    mapping (address => mapping(uint => uint256) ) public dailyRewardCount;\r\n    \r\n    \r\n    \r\n    //Private\r\n    uint256 digHashBase;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event FundTransfer(address backer, uint amountEhter, uint amountScavengerHuntTokens, bool isContribution);\r\n    event ShareLocation(address owner, uint ScavengerHuntTokenAmount, uint PercentageOfTotal, bytes32 GPSLatitude, bytes32 GPSLongitude);\r\n    event ShareMessage(address recipient, string Message, string TokenName);\r\n    event SaleEnded(address owner, uint totalTokensDistributed,uint totalHunters);\r\n    event SharePersonalMessage(address Sender, string MyPersonalMessage, bytes32 GPSLatitude, bytes32 GPSLongitude);\r\n    event NameClaimed(address owner, string Name, bytes32 GPSLatitude, bytes32 GPSLongitude);\r\n    event HunterRewarded(address owner, uint ScavengerHuntTokenAmount, uint PercentageOfTotal, bytes32 GPSLatitude, bytes32 GPSLongitude);\r\n    \r\n    modifier afterDeadline() { if (now >= crowdsaleDeadline) _; }\r\n    \r\n\r\n    /**\r\n     * Check if deadline was met, so close the sale of tokens\r\n     */\r\n    function checkDeadlinePassed() afterDeadline public {\r\n        SaleEnded(owner, tokensDistributed,totalHunters);\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n     function ScavengerHuntTokenWatch (\r\n        address ifSuccessfulSendTo,\r\n        uint durationInMinutes,\r\n        uint weiCostOfEachToken,\r\n        uint initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 adigHashBase,\r\n        uint aMaxDailyRewards\r\n        ) MyAdvancedToken(initialSupply, tokenName, tokenSymbol) public {\r\n        owner=msg.sender;\r\n        \r\n        scavengerHuntTokenName = tokenName;\r\n        scavengerHuntTokenSymbol = tokenSymbol;\r\n\r\n        //Make sure we can get these tokens\r\n        setPrices(0,weiCostOfEachToken * 1 wei);\r\n       \r\n        digHashBase = adigHashBase;\r\n        maxDailyRewards = aMaxDailyRewards;\r\n\r\n        crowdsaleDeadline = now + durationInMinutes * 1 minutes;\r\n        tokensDistributed = initialSupply;\r\n        FundTransfer(ifSuccessfulSendTo, 0, tokensDistributed, true);\r\n\r\n        //Now change the owner to the actual user\r\n        owner = ifSuccessfulSendTo;\r\n        totalHunters=1;\r\n        balanceOf[owner] = initialSupply;\r\n        \r\n\r\n    }\r\n\r\n\r\n    function destroySHT(address _from, uint256 _value) internal {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        if(balanceOf[_from]==0) {\r\n            totalHunters--;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function extendCrowdsalePeriod (uint durationInMinutes) onlyOwner public {\r\n        crowdsaleDeadline = now + durationInMinutes * 1 minutes;\r\n        crowdsaleClosed = false;\r\n        ShareMessage(msg.sender,\"The crowdsale is extended for token ->\",scavengerHuntTokenName );\r\n    }\r\n\r\n    function setMaxDailyRewards(uint aMaxDailyRewards) onlyOwner public {\r\n        maxDailyRewards = aMaxDailyRewards;\r\n        ShareMessage(msg.sender,\"The maximum of daily reward is now updated for token ->\",scavengerHuntTokenName );\r\n    }\r\n\r\n    \r\n\r\n    //We also allow the calling of the buying function too.\r\n    function buyScavengerHuntToken() payable public {\r\n        //Only allow buying in, when crowdsale is open.\r\n        if (crowdsaleClosed) {\r\n            ShareMessage(msg.sender,\"Sorry: The crowdsale has ended. You cannot buy anymore ->\",scavengerHuntTokenName );\r\n        }\r\n        require(!crowdsaleClosed);\r\n        uint amountEth = msg.value;\r\n        uint amountSht = amountEth / buyPrice;\r\n\r\n        //Mint a token for each payer\r\n        mintScavengerToken(msg.sender, amountSht);\r\n\r\n        FundTransfer(msg.sender, amountEth, amountSht, true);\r\n        \r\n        \r\n        //And check if fundraiser is closed:\r\n        checkDeadlinePassed();\r\n    }\r\n\r\n    \r\n    function buyScavengerHuntTokenWithLocationSharing(bytes32 GPSLatitude, bytes32 GPSLongitude) payable public {\r\n        buyScavengerHuntToken();\r\n        ShareLocation(msg.sender, balanceOf[msg.sender],getPercentageComplete(msg.sender), GPSLatitude, GPSLongitude);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable public {\r\n        buyScavengerHuntToken();\r\n    }\r\n\r\n    \r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintScavengerToken(address target, uint256 mintedAmount) private {\r\n        if(balanceOf[target]==0) {\r\n            //New hunter!\r\n            totalHunters++;\r\n        }else {}\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(this, target, mintedAmount);\r\n        tokensDistributed += mintedAmount;\r\n    }\r\n\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintExtraScavengerHuntTokens(address target, uint256 mintedAmount) onlyOwner public {\r\n        mintScavengerToken(target, mintedAmount);\r\n    }\r\n\r\n\r\n\r\n    function shareScavengerHuntTokenLocation(bytes32 GPSLatitude, bytes32 GPSLongitude) public {\r\n        //Only call this if you actually have tokens!\r\n        require(balanceOf[msg.sender] > 0); \r\n        ShareLocation(msg.sender, balanceOf[msg.sender],getPercentageComplete(msg.sender), GPSLatitude, GPSLongitude);\r\n    }\r\n\r\n    function sharePersonalScavengerHuntTokenMessage(string MyPersonalMessage, bytes32 GPSLatitude, bytes32 GPSLongitude) public {\r\n        //Only call this if you actually have tokens!\r\n        require(balanceOf[msg.sender] >=1); \r\n        SharePersonalMessage(msg.sender, MyPersonalMessage, GPSLatitude, GPSLongitude);\r\n        //Personal messages cost 1 token!\r\n        destroySHT(msg.sender, 1);\r\n    }\r\n\r\n    function claimName(string MyName, bytes32 GPSLatitude, bytes32 GPSLongitude) public {\r\n        //Only call this if you actually have tokens!\r\n        require(bytes(MyName).length < 32);\r\n        require(balanceOf[msg.sender] >= 10); \r\n        registeredNames[msg.sender]=getStringAsKey(MyName);\r\n        NameClaimed(msg.sender, MyName, GPSLatitude, GPSLongitude);\r\n        //Claiming your name costs 10 tokens!\r\n        destroySHT(msg.sender, 10);\r\n    }\r\n\r\n    \r\n    function transferScavengerHuntToken(address to, uint SHTokenAmount,bytes32 GPSLatitude, bytes32 GPSLongitude) public {\r\n        //Share the transfer with the new total\r\n        if(balanceOf[to]==0) {\r\n            totalHunters++;\r\n        }\r\n\r\n        //Call the internal transfer method\r\n        _transfer(msg.sender, to, SHTokenAmount);\r\n\r\n        ShareLocation(to, balanceOf[to], getPercentageComplete(to), \"unknown\", \"unknown\");\r\n        ShareLocation(msg.sender, balanceOf[msg.sender], getPercentageComplete(msg.sender), GPSLatitude, GPSLongitude);\r\n        if(balanceOf[msg.sender]==0) {\r\n            totalHunters--;\r\n        }\r\n\r\n    }\r\n\r\n    function returnEtherumToOwner(uint amount) onlyOwner public {\r\n        if (owner.send(amount)) {\r\n            FundTransfer(owner, amount,0, false);\r\n        } \r\n    }\r\n\r\n    //Date and time library\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant YEAR_IN_SECONDS = 31536000;\r\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint constant HOUR_IN_SECONDS = 3600;\r\n    uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n    uint16 constant ORIGIN_YEAR = 1970;\r\n    \r\n    function leapYearsBefore(uint year) internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }    \r\n    \r\n    function isLeapYear(uint16 year) internal pure returns (bool) {\r\n                if (year % 4 != 0) {\r\n                        return false;\r\n                }\r\n                if (year % 100 != 0) {\r\n                        return true;\r\n                }\r\n                if (year % 400 != 0) {\r\n                        return false;\r\n                }\r\n                return true;\r\n    }\r\n    \r\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\r\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                        return 31;\r\n                }\r\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                        return 30;\r\n                }\r\n                else if (isLeapYear(year)) {\r\n                        return 29;\r\n                }\r\n                else {\r\n                        return 28;\r\n                }\r\n    }\r\n\r\n    \r\n    function getToday() public view returns (uint) {\r\n        uint16 year;\r\n        uint8 month;\r\n        uint8 day;\r\n\r\n        uint secondsAccountedFor = 0;\r\n        uint buf;\r\n        uint8 i;\r\n\r\n        \r\n        uint timestamp=now;\r\n        \r\n        // Year\r\n        year = getYear(timestamp);\r\n        buf = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - buf);\r\n\r\n        // Month\r\n        uint secondsInMonth;\r\n        for (i = 1; i <= 12; i++) {\r\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, year);\r\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                    month = i;\r\n                    break;\r\n            }\r\n            secondsAccountedFor += secondsInMonth;\r\n        }\r\n\r\n        // Day\r\n        for (i = 1; i <= getDaysInMonth(month, year); i++) {\r\n                if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                        day = i;\r\n                        break;\r\n                }\r\n                secondsAccountedFor += DAY_IN_SECONDS;\r\n        }\r\n        \r\n        //20170106\r\n        uint endDate = uint(year) * 10000;\r\n        if (month<10) {\r\n            endDate += uint(month)*100;\r\n        } else {\r\n            endDate += uint(month)*10;\r\n        }\r\n        endDate += uint(day);\r\n        return endDate;\r\n        \r\n    }\r\n\r\n    function getYear(uint timestamp) internal pure returns (uint16) {\r\n            uint secondsAccountedFor = 0;\r\n            uint16 year;\r\n            uint numLeapYears;\r\n\r\n            // Year\r\n            year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n            numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n            secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n            secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n            while (secondsAccountedFor > timestamp) {\r\n                    if (isLeapYear(uint16(year - 1))) {\r\n                            secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n                    }\r\n                    else {\r\n                            secondsAccountedFor -= YEAR_IN_SECONDS;\r\n                    }\r\n                    year -= 1;\r\n            }\r\n            return year;\r\n    }\r\n\r\n    \r\n    function hashSeriesNumber(bytes32 series, uint256 number) internal pure returns (bytes32){\r\n        return keccak256(number, series);\r\n    }\r\n    \r\n    function digRewardCheck(uint hash, uint modulo,uint reward,bytes32 GPSLatitude, bytes32 GPSLongitude) internal returns (uint256) {\r\n        if (hash % modulo == 0) {\r\n            //Reward a 50 tokens\r\n            mintScavengerToken(msg.sender, reward);\r\n            dailyRewardCount[msg.sender][getToday()]++;\r\n            GPSDigs[GPSLatitude][GPSLongitude]=reward;\r\n            GPSActivityAddress[GPSLatitude][GPSLongitude]=msg.sender;\r\n            HunterRewarded(msg.sender, reward,getPercentageComplete(msg.sender), GPSLatitude, GPSLongitude);\r\n            return reward;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function digForTokens(bytes32 GPSLatitude, bytes32 GPSLongitude) payable public returns(uint256) {\r\n        //Only call this if you actually have tokens!\r\n        require(balanceOf[msg.sender] > 1); \r\n        //Only once digging is allowed!\r\n        require(GPSDigs[GPSLatitude][GPSLongitude] == 0); \r\n\r\n        //You can only win that much per day\r\n        require( dailyRewardCount[msg.sender][getToday()] <= maxDailyRewards);\r\n        \r\n        //Diggin costs 1 tokens!\r\n        destroySHT(msg.sender, 1);\r\n\r\n        uint hash = uint(hashSeriesNumber(GPSLatitude,digHashBase));\r\n        hash += uint(hashSeriesNumber(GPSLongitude,digHashBase));\r\n\r\n        uint awarded = digRewardCheck(hash, 100000000,100000,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n\r\n        awarded = digRewardCheck(hash, 100000,1000,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n        \r\n        awarded = digRewardCheck(hash, 10000,500,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n\r\n        awarded = digRewardCheck(hash, 1000,200,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n\r\n        awarded = digRewardCheck(hash, 100,50,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n\r\n        awarded = digRewardCheck(hash, 10,3,GPSLatitude,GPSLongitude);\r\n        if (awarded>0) {\r\n            return awarded;\r\n        }\r\n        \r\n        //You've got nothing!\r\n        GPSDigs[GPSLatitude][GPSLongitude]=1;\r\n        GPSActivityAddress[GPSLatitude][GPSLongitude]=msg.sender;\r\n        HunterRewarded(msg.sender, 0,getPercentageComplete(msg.sender), GPSLatitude, GPSLongitude);\r\n        return 0;\r\n    }\r\n    \r\n    \r\n    function getPercentageComplete(address ScavengerHuntTokenOwner)  view public returns (uint256){\r\n        //Since there are no decimals, just create some of our own\r\n        uint256 myBalance = balanceOf[ScavengerHuntTokenOwner]*100000.0;\r\n        uint256 myTotalSupply = totalSupply;\r\n        uint256 myResult = myBalance / myTotalSupply;\r\n        return  myResult;\r\n    }\r\n\r\n    function getStringAsKey(string key) pure public returns (bytes32 ret) {\r\n        require(bytes(key).length < 32);\r\n        assembly {\r\n          ret := mload(add(key, 32))\r\n        }\r\n    }\r\n    \r\n    function getKeyAsString(bytes32 x) pure public returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n    \r\n    modifier aftercrowdsaleDeadline()  { if (now >= crowdsaleDeadline) _; }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"getKeyAsString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyName\",\"type\":\"string\"},{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"claimName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"shareScavengerHuntTokenLocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"MyPersonalMessage\",\"type\":\"string\"},{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"sharePersonalScavengerHuntTokenMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintExtraScavengerHuntTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyScavengerHuntToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"GPSActivityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"digForTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scavengerHuntTokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHunters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkDeadlinePassed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnEtherumToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"durationInMinutes\",\"type\":\"uint256\"}],\"name\":\"extendCrowdsalePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ScavengerHuntTokenOwner\",\"type\":\"address\"}],\"name\":\"getPercentageComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"buyScavengerHuntTokenWithLocationSharing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyRewardCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDailyRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"GPSDigs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"aMaxDailyRewards\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"SHTokenAmount\",\"type\":\"uint256\"},{\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"transferScavengerHuntToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getStringAsKey\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scavengerHuntTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"weiCostOfEachToken\",\"type\":\"uint256\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"adigHashBase\",\"type\":\"uint256\"},{\"name\":\"aMaxDailyRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountEhter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountScavengerHuntTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ScavengerHuntTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PercentageOfTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"ShareLocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"TokenName\",\"type\":\"string\"}],\"name\":\"ShareMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalTokensDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalHunters\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"MyPersonalMessage\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"SharePersonalMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"NameClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ScavengerHuntTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PercentageOfTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GPSLatitude\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"GPSLongitude\",\"type\":\"bytes32\"}],\"name\":\"HunterRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"ScavengerHuntTokenWatch","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000264b05c80b8eb151d5ad5946d2b0bc095904704200000000000000000000000000000000000000000000000000000000000378c0000000000000000000000000000000000000000000000000000009184e72a0000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000057b064639dd3d2b1228fd4df8c1416ee26e8db4d686d7b1f9bd2f13b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000001353636176656e67657248756e74546f6b656e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045348543100000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://31a9fafcaea25160f0c30581543e7adb62f6d0ab3550b8986cfbbae463d0ce80"}]}