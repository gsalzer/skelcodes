{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MagnusCoin is StandardToken, Ownable, Contactable {\r\n    string public name = \"Magnus Coin\";\r\n    string public symbol = \"MGS\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    mapping (address => bool) internal allowedOverrideAddresses;\r\n\r\n    bool public tokenActive = false;\r\n    \r\n    uint256 endtime = 1543575521;\r\n\r\n    modifier onlyIfTokenActiveOrOverride() {\r\n        // owner or any addresses listed in the overrides\r\n        // can perform token transfers while inactive\r\n        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfTokenInactive() {\r\n        require(!tokenActive);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfValidAddress(address _to) {\r\n        // prevent 'invalid' addresses for transfer destinations\r\n        require(_to != 0x0);\r\n        // don't allow transferring to this contract's address\r\n        require(_to != address(this));\r\n        _;\r\n    }\r\n\r\n    event TokenActivated();\r\n    event TokenDeactivated();\r\n    \r\n\r\n    function MagnusCoin() public {\r\n\r\n        totalSupply = 118200000000000000000000000;\r\n        contactInformation = \"Magnus Collective\";\r\n        \r\n\r\n        // msg.sender == owner of the contract\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\r\n    /// @param _spender address The address which will spend the funds.\r\n    /// @param _value uint256 The amount of tokens to be spent.\r\n    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /// @dev Same ERC20 behavior, but reverts if not yet active.\r\n    /// @param _to address The address to transfer to.\r\n    /// @param _value uint256 The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function ownerSetOverride(address _address, bool enable) external onlyOwner {\r\n        allowedOverrideAddresses[_address] = enable;\r\n    }\r\n    \r\n\r\n    function ownerRecoverTokens(address _address, uint256 _value) external onlyOwner {\r\n            require(_address != address(0));\r\n            require(now < endtime );\r\n            require(_value <= balances[_address]);\r\n            require(balances[_address].sub(_value) >=0);\r\n            balances[_address] = balances[_address].sub(_value);\r\n            balances[owner] = balances[owner].add(_value);\r\n            Transfer(_address, owner, _value);\r\n    }\r\n\r\n    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \r\n\r\n        // By holding back on setting these, it prevents the token\r\n        // from being a duplicate in ERC token searches if the need to\r\n        // redeploy arises prior to the crowdsale starts.\r\n        // Mainly useful during testnet deployment/testing.\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\r\n        require(bytes(symbol).length > 0);\r\n\r\n        tokenActive = true;\r\n        TokenActivated();\r\n    }\r\n\r\n    function ownerDeactivateToken() external onlyOwner onlyIfTokenActiveOrOverride {\r\n        require(bytes(symbol).length > 0);\r\n\r\n        tokenActive = false;\r\n        TokenDeactivated();\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract MagnusSale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // this sale contract is creating the Magnus \r\n    MagnusCoin internal token;\r\n\r\n    // UNIX timestamp (UTC) based start and end, inclusive\r\n    uint256 public start;               /* UTC of timestamp that the sale will start based on the value passed in at the time of construction */\r\n    uint256 public end;                 /* UTC of computed time that the sale will end based on the hours passed in at time of construction */\r\n\r\n    uint256 public minFundingGoalWei;   /* we can set this to zero, but we might want to raise at least 20000 Ether */\r\n    uint256 public minContributionWei;  /* individual contribution min. we require at least a 0.1 Ether investment, for example. */\r\n    uint256 public maxContributionWei;  /* individual contribution max. probably don't want someone to buy more than 60000 Ether */\r\n\r\n    uint256 internal weiRaised;       /* total of all weiContributions */\r\n\r\n    uint256 public peggedETHUSD;    /* In whole dollars. $300 means use 300 */\r\n    uint256 public hardCap;         /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\r\n    uint256 internal reservedTokens;  /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\r\n    uint256 public baseRateInCents; /* $2.50 means use 250 */\r\n\r\n    mapping (address => uint256) public contributions;\r\n\r\n    uint256 internal fiatCurrencyRaisedInEquivalentWeiValue = 0; // value of wei raised outside this contract\r\n    uint256 public weiRaisedIncludingFiatCurrencyRaised;       /* total of all weiContributions inclduing external*/\r\n    bool internal isPresale;              /*  this will be false  */\r\n    bool public isRefunding = false;    \r\n\r\n\r\n    address internal multiFirstWallet=0x9B7eDe5f815551279417C383779f1E455765cD6E;\r\n    address internal multiSecondWallet=0x377Cc6d225cc49E450ee192d679950665Ae22e2C;\r\n    address internal multiThirdWallet=0xD0377e0dC9334124803E38CBf92eFdDB7A43caC8;\r\n\r\n\r\n\r\n    event ContributionReceived(address indexed buyer, bool presale, uint256 rate, uint256 value, uint256 tokens);\r\n    event PegETHUSD(uint256 pegETHUSD);\r\n    \r\n\r\n    function MagnusSale(\r\n    ) public {\r\n        \r\n        peggedETHUSD = 1210;\r\n        address _token=0x1a7CC52cA652Ac5df72A7fA4b131cB9312dD3423;\r\n        hardCap = 40000000000000000000000;\r\n        reservedTokens = 0;\r\n        isPresale = false;\r\n        minFundingGoalWei  = 1000000000000000000000;\r\n        minContributionWei = 300000000000000000;\r\n        maxContributionWei = 10000000000000000000000;\r\n        baseRateInCents = 42;\r\n        start = 1517144812;\r\n        uint256 _durationHours=4400;\r\n\r\n        token = MagnusCoin(_token);\r\n        \r\n        end = start.add(_durationHours.mul(1 hours));\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    function() public payable whenNotPaused {\r\n        require(!isRefunding);\r\n        require(msg.sender != 0x0);\r\n        require(msg.value >= minContributionWei);\r\n        require(start <= now && end >= now);\r\n\r\n        // prevent anything more than maxContributionWei per contributor address\r\n        uint256 _weiContributionAllowed = maxContributionWei > 0 ? maxContributionWei.sub(contributions[msg.sender]) : msg.value;\r\n        if (maxContributionWei > 0) {\r\n            require(_weiContributionAllowed > 0);\r\n        }\r\n\r\n        // are limited by the number of tokens remaining\r\n        uint256 _tokensRemaining = token.balanceOf(address(this)).sub( reservedTokens );\r\n        require(_tokensRemaining > 0);\r\n\r\n        // limit contribution's value based on max/previous contributions\r\n        uint256 _weiContribution = msg.value;\r\n        if (_weiContribution > _weiContributionAllowed) {\r\n            _weiContribution = _weiContributionAllowed;\r\n        }\r\n\r\n        // limit contribution's value based on hard cap of hardCap\r\n        if (hardCap > 0 && weiRaised.add(_weiContribution) > hardCap) {\r\n            _weiContribution = hardCap.sub( weiRaised );\r\n        }\r\n\r\n        // calculate token amount to be created\r\n        uint256 _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(baseRateInCents);\r\n\r\n        if (_tokens > _tokensRemaining) {\r\n            // there aren't enough tokens to fill the contribution amount, so recalculate the contribution amount\r\n            _tokens = _tokensRemaining;\r\n            _weiContribution = _tokens.mul(baseRateInCents).div(100).div(peggedETHUSD);\r\n            \r\n        }\r\n\r\n        // add the contributed wei to any existing value for the sender\r\n        contributions[msg.sender] = contributions[msg.sender].add(_weiContribution);\r\n\r\n        ContributionReceived(msg.sender, isPresale, baseRateInCents, _weiContribution, _tokens);\r\n\r\n        require(token.transfer(msg.sender, _tokens));\r\n\r\n        weiRaised = weiRaised.add(_weiContribution); //total of all weiContributions\r\n        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.add(_weiContribution);\r\n\r\n\r\n    }\r\n\r\n\r\n    function pegETHUSD(uint256 _peggedETHUSD) onlyOwner public {\r\n        peggedETHUSD = _peggedETHUSD;\r\n        PegETHUSD(peggedETHUSD);\r\n    }\r\n\r\n    function setMinWeiAllowed( uint256 _minWeiAllowed ) onlyOwner public {\r\n        minContributionWei = _minWeiAllowed;\r\n    }\r\n\r\n    function setMaxWeiAllowed( uint256 _maxWeiAllowed ) onlyOwner public {\r\n        maxContributionWei = _maxWeiAllowed;\r\n    }\r\n\r\n\r\n    function setSoftCap( uint256 _softCap ) onlyOwner public {\r\n        minFundingGoalWei = _softCap;\r\n    }\r\n\r\n    function setHardCap( uint256 _hardCap ) onlyOwner public {\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    function peggedETHUSD() constant onlyOwner public returns(uint256) {\r\n        return peggedETHUSD;\r\n    }\r\n\r\n    function hardCapETHInWeiValue() constant onlyOwner public returns(uint256) {\r\n        return hardCap;\r\n    }\r\n\r\n\r\n    function totalWeiRaised() constant onlyOwner public returns(uint256) {\r\n        return weiRaisedIncludingFiatCurrencyRaised;\r\n    }\r\n\r\n\r\n    function ownerTransferWeiFirstWallet(uint256 _value) external onlyOwner {\r\n        require(multiFirstWallet != 0x0);\r\n        require(multiFirstWallet != address(token));\r\n\r\n        // if zero requested, send the entire amount, otherwise the amount requested\r\n        uint256 _amount = _value > 0 ? _value : this.balance;\r\n\r\n        multiFirstWallet.transfer(_amount);\r\n    }\r\n\r\n    function ownerTransferWeiSecondWallet(uint256 _value) external onlyOwner {\r\n        require(multiSecondWallet != 0x0);\r\n        require(multiSecondWallet != address(token));\r\n\r\n        // if zero requested, send the entire amount, otherwise the amount requested\r\n        uint256 _amount = _value > 0 ? _value : this.balance;\r\n\r\n        multiSecondWallet.transfer(_amount);\r\n    }\r\n\r\n    function ownerTransferWeiThirdWallet(uint256 _value) external onlyOwner {\r\n        require(multiThirdWallet != 0x0);\r\n        require(multiThirdWallet != address(token));\r\n\r\n        // if zero requested, send the entire amount, otherwise the amount requested\r\n        uint256 _amount = _value > 0 ? _value : this.balance;\r\n\r\n        multiThirdWallet.transfer(_amount);\r\n    }\r\n\r\n    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\r\n        require(_beneficiary != 0x0);\r\n        require(_beneficiary != address(token));\r\n        require(paused || now > end);\r\n\r\n        uint256 _tokensRemaining = token.balanceOf(address(this));\r\n        if (_tokensRemaining > 0) {\r\n            token.transfer(_beneficiary, _tokensRemaining);\r\n        }\r\n    }\r\n\r\n    \r\n    function addFiatCurrencyRaised( uint256 _fiatCurrencyIncrementInEquivalentWeiValue ) onlyOwner public {\r\n        fiatCurrencyRaisedInEquivalentWeiValue = fiatCurrencyRaisedInEquivalentWeiValue.add( _fiatCurrencyIncrementInEquivalentWeiValue);\r\n        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.add(_fiatCurrencyIncrementInEquivalentWeiValue);\r\n        \r\n    }\r\n\r\n    function reduceFiatCurrencyRaised( uint256 _fiatCurrencyDecrementInEquivalentWeiValue ) onlyOwner public {\r\n        fiatCurrencyRaisedInEquivalentWeiValue = fiatCurrencyRaisedInEquivalentWeiValue.sub(_fiatCurrencyDecrementInEquivalentWeiValue);\r\n        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.sub(_fiatCurrencyDecrementInEquivalentWeiValue);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"baseRateInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fiatCurrencyIncrementInEquivalentWeiValue\",\"type\":\"uint256\"}],\"name\":\"addFiatCurrencyRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapETHInWeiValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fiatCurrencyDecrementInEquivalentWeiValue\",\"type\":\"uint256\"}],\"name\":\"reduceFiatCurrencyRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peggedETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundingGoalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContributionWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"ownerRecoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWeiAllowed\",\"type\":\"uint256\"}],\"name\":\"setMinWeiAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerTransferWeiFirstWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peggedETHUSD\",\"type\":\"uint256\"}],\"name\":\"pegETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedIncludingFiatCurrencyRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerTransferWeiThirdWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerTransferWeiSecondWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxWeiAllowed\",\"type\":\"uint256\"}],\"name\":\"setMaxWeiAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"presale\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ContributionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pegETHUSD\",\"type\":\"uint256\"}],\"name\":\"PegETHUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MagnusSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61136d606766e8cfd90d33f678a70706c020b28d541b80a493db68f23e271272"}]}