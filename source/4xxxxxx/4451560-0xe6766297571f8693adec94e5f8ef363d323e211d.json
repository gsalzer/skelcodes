{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title  \r\n * @dev DatTokenSale is a contract for managing a token crowdsale.\r\n * DatTokenSale have a start and end date, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a refundable valut \r\n * as they arrive.\r\n */\r\ncontract DatumTokenSale is  Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public whiteListControllerAddress;\r\n\r\n  //lookup addresses for whitelist\r\n  mapping (address => bool) public whiteListAddresses;\r\n\r\n  //lookup addresses for special bonuses\r\n  mapping (address => uint) public bonusAddresses;\r\n\r\n  //loopup for max token amount per user allowed\r\n  mapping(address => uint256) public maxAmountAddresses;\r\n\r\n  //loopup for balances\r\n  mapping(address => uint256) public balances;\r\n\r\n  // start and end date where investments are allowed (both inclusive)\r\n  uint256 public startDate = 1509282000;//29 Oct 2017 13:00:00 +00:00 UTC\r\n  //uint256 public startDate = 1509210891;//29 Oct 2017 13:00:00 +00:00 UTC\r\n  \r\n  uint256 public endDate = 1511960400; //29 Nov 2017 13:00:00 +00:00 UTC\r\n\r\n  // Minimum amount to participate (wei for internal usage)\r\n  uint256 public minimumParticipationAmount = 300000000000000000 wei; //0.1 ether\r\n\r\n  // Maximum amount to participate\r\n  uint256 public maximalParticipationAmount = 1000 ether; //1000 ether\r\n\r\n  // address where funds are collected\r\n  address wallet;\r\n\r\n  // how many token units a buyer gets per ether\r\n  uint256 rate = 25000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 private weiRaised;\r\n\r\n  //flag for final of crowdsale\r\n  bool public isFinalized = false;\r\n\r\n  //cap for the sale in ether\r\n  uint256 public cap = 61200 ether; //61200 ether\r\n\r\n  //total tokenSupply\r\n  uint256 public totalTokenSupply = 1530000000 ether;\r\n\r\n  // amount of tokens sold\r\n  uint256 public tokensInWeiSold;\r\n\r\n  uint private bonus1Rate = 28750;\r\n  uint private bonus2Rate = 28375;\r\n  uint private bonus3Rate = 28000;\r\n  uint private bonus4Rate = 27625;\r\n  uint private bonus5Rate = 27250;\r\n  uint private bonus6Rate = 26875;\r\n  uint private bonus7Rate = 26500;\r\n  uint private bonus8Rate = 26125;\r\n  uint private bonus9Rate = 25750;\r\n  uint private bonus10Rate = 25375;\r\n   \r\n  event Finalized();\r\n  /**\r\n  * @notice Log an event for each funding contributed during the public phase\r\n  * @notice Events are not logged when the constructor is being executed during\r\n  *         deployment, so the preallocations will not be logged\r\n  */\r\n  event LogParticipation(address indexed sender, uint256 value);\r\n  \r\n\r\n  /**\r\n  * @notice Log an event for each funding contributed converted to earned tokens\r\n  * @notice Events are not logged when the constructor is being executed during\r\n  *         deployment, so the preallocations will not be logged\r\n  */\r\n  event LogTokenReceiver(address indexed sender, uint256 value);\r\n\r\n\r\n  /**\r\n  * @notice Log an event for each funding contributed converted to earned tokens\r\n  * @notice Events are not logged when the constructor is being executed during\r\n  *         deployment, so the preallocations will not be logged\r\n  */\r\n  event LogTokenRemover(address indexed sender, uint256 value);\r\n  \r\n  function DatumTokenSale(address _wallet) payable {\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function () payable {\r\n    require(whiteListAddresses[msg.sender]);\r\n    require(validPurchase());\r\n\r\n    buyTokens(msg.value);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(uint256 amount) internal {\r\n    //get ammount in wei\r\n    uint256 weiAmount = amount;\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // get token amount\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n    tokensInWeiSold = tokensInWeiSold.add(tokens);\r\n\r\n    //fire token receive event\r\n    LogTokenReceiver(msg.sender, tokens);\r\n\r\n    //update balances for user\r\n    balances[msg.sender] = balances[msg.sender].add(tokens);\r\n\r\n    //fire eth purchase event\r\n    LogParticipation(msg.sender,msg.value);\r\n\r\n    //forward funds to wallet\r\n    forwardFunds(amount);\r\n  }\r\n\r\n\r\n  // manually update the tokens sold count to reserve tokens or update stats if other way bought\r\n  function reserveTokens(address _address, uint256 amount)\r\n  {\r\n    require(msg.sender == whiteListControllerAddress);\r\n\r\n    //update balances for user\r\n    balances[_address] = balances[_address].add(amount);\r\n\r\n    //fire event\r\n    LogTokenReceiver(_address, amount);\r\n\r\n    tokensInWeiSold = tokensInWeiSold.add(amount);\r\n  }\r\n\r\n  //release tokens from sold statistist, used if the account was not verified with KYC\r\n  function releaseTokens(address _address, uint256 amount)\r\n  {\r\n    require(msg.sender == whiteListControllerAddress);\r\n\r\n    balances[_address] = balances[_address].sub(amount);\r\n\r\n    //fire event\r\n    LogTokenRemover(_address, amount);\r\n\r\n    tokensInWeiSold = tokensInWeiSold.sub(amount);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds(uint256 amount) internal {\r\n    wallet.transfer(amount);\r\n  }\r\n\r\n  // should be called after crowdsale ends or to emergency stop the sale\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    Finalized();\r\n    isFinalized = true;\r\n  }\r\n\r\n  function setWhitelistControllerAddress(address _controller) onlyOwner\r\n  {\r\n     whiteListControllerAddress = _controller;\r\n  }\r\n\r\n  function addWhitelistAddress(address _addressToAdd)\r\n  {\r\n      require(msg.sender == whiteListControllerAddress);\r\n      whiteListAddresses[_addressToAdd] = true;\r\n  }\r\n\r\n  function addSpecialBonusConditions(address _address, uint _bonusPercent, uint256 _maxAmount) \r\n  {\r\n      require(msg.sender == whiteListControllerAddress);\r\n\r\n      bonusAddresses[_address] = _bonusPercent;\r\n      maxAmountAddresses[_address] = _maxAmount;\r\n  }\r\n\r\n  function removeSpecialBonusConditions(address _address) \r\n  {\r\n      require(msg.sender == whiteListControllerAddress);\r\n\r\n      delete bonusAddresses[_address];\r\n      delete maxAmountAddresses[_address];\r\n  }\r\n\r\n  function addWhitelistAddresArray(address[] _addressesToAdd)\r\n  {\r\n      require(msg.sender == whiteListControllerAddress);\r\n\r\n      for (uint256 i = 0; i < _addressesToAdd.length;i++) \r\n      {\r\n        whiteListAddresses[_addressesToAdd[i]] = true;\r\n      }\r\n      \r\n  }\r\n\r\n  function removeWhitelistAddress(address _addressToAdd)\r\n  {\r\n      require(msg.sender == whiteListControllerAddress);\r\n\r\n      delete whiteListAddresses[_addressToAdd];\r\n  }\r\n\r\n\r\n    function getTokenAmount(uint256 weiAmount) internal returns (uint256 tokens){\r\n        //add bonus\r\n        uint256 bonusRate = getBonus();\r\n\r\n        //check for special bonus and override rate if exists\r\n        if(bonusAddresses[msg.sender] != 0)\r\n        {\r\n            uint bonus = bonusAddresses[msg.sender];\r\n            //TODO: CALUC SHCHECK\r\n            bonusRate = rate.add((rate.mul(bonus)).div(100));\r\n        } \r\n\r\n        // calculate token amount to be created\r\n        uint256 weiTokenAmount = weiAmount.mul(bonusRate);\r\n        return weiTokenAmount;\r\n    }\r\n\r\n\r\n    //When a user buys our token they will recieve a bonus depedning on time:,\r\n    function getBonus() internal constant returns (uint256 amount){\r\n        uint diffInSeconds = now - startDate;\r\n        uint diffInHours = (diffInSeconds/60)/60;\r\n        \r\n        // 10/29/2017 - 11/1/2017\r\n        if(diffInHours < 72){\r\n            return bonus1Rate;\r\n        }\r\n\r\n        // 11/1/2017 - 11/4/2017\r\n        if(diffInHours >= 72 && diffInHours < 144){\r\n            return bonus2Rate;\r\n        }\r\n\r\n        // 11/4/2017 - 11/7/2017\r\n        if(diffInHours >= 144 && diffInHours < 216){\r\n            return bonus3Rate;\r\n        }\r\n\r\n        // 11/7/2017 - 11/10/2017\r\n        if(diffInHours >= 216 && diffInHours < 288){\r\n            return bonus4Rate;\r\n        }\r\n\r\n         // 11/10/2017 - 11/13/2017\r\n        if(diffInHours >= 288 && diffInHours < 360){\r\n            return bonus5Rate;\r\n        }\r\n\r\n         // 11/13/2017 - 11/16/2017\r\n        if(diffInHours >= 360 && diffInHours < 432){\r\n            return bonus6Rate;\r\n        }\r\n\r\n         // 11/16/2017 - 11/19/2017\r\n        if(diffInHours >= 432 && diffInHours < 504){\r\n            return bonus7Rate;\r\n        }\r\n\r\n         // 11/19/2017 - 11/22/2017\r\n        if(diffInHours >= 504 && diffInHours < 576){\r\n            return bonus8Rate;\r\n        }\r\n\r\n          // 11/22/2017 - 11/25/2017\r\n        if(diffInHours >= 576 && diffInHours < 648){\r\n            return bonus9Rate;\r\n        }\r\n\r\n          // 11/25/2017 - 11/28/2017\r\n        if(diffInHours >= 648 && diffInHours < 720){\r\n            return bonus10Rate;\r\n        }\r\n\r\n        return rate; \r\n    }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // check for valid time period, min amount and within cap\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 tokenAmount = getTokenAmount(msg.value);\r\n    bool withinPeriod = startDate <= now && endDate >= now;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool minAmount = msg.value >= minimumParticipationAmount;\r\n    bool maxAmount = msg.value <= maximalParticipationAmount;\r\n    bool withTokensSupply = tokensInWeiSold.add(tokenAmount) <= totalTokenSupply;\r\n    //bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    bool withMaxAmountForAddress = maxAmountAddresses[msg.sender] == 0 || balances[msg.sender].add(tokenAmount) <= maxAmountAddresses[msg.sender];\r\n\r\n    if(maxAmountAddresses[msg.sender] != 0)\r\n    {\r\n      maxAmount = balances[msg.sender].add(tokenAmount) <= maxAmountAddresses[msg.sender];\r\n    }\r\n\r\n    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withTokensSupply && withMaxAmountForAddress && maxAmount;\r\n  }\r\n\r\n    // @return true if the goal is reached\r\n  function capReached() public constant returns (bool) {\r\n    return tokensInWeiSold >= totalTokenSupply;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return isFinalized;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximalParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setWhitelistControllerAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSpecialBonusConditions\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListControllerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressesToAdd\",\"type\":\"address[]\"}],\"name\":\"addWhitelistAddresArray\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"addWhitelistAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"removeWhitelistAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmountAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_bonusPercent\",\"type\":\"uint256\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"addSpecialBonusConditions\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInWeiSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTokenReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTokenRemover\",\"type\":\"event\"}]","ContractName":"DatumTokenSale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a899df9e9cf14a7c5b87744b1edc6890a712cb97","Library":"","SwarmSource":"bzzr://52c79d315b54b4d9e071b82f3f6e3813431bdc645812728e974b1e2d670d74a9"}]}