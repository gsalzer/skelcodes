{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tfunction Ownable() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\tOwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20Basic {\r\n\tuint256 public totalSupply;\r\n\tuint256 freezeTransferTime;\r\n\tfunction balanceOf(address who) public constant returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public constant returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) balances;\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n        require(now >= freezeTransferTime);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(now >= freezeTransferTime);\r\n\r\n\t\tvar _allowance = allowed[_from][msg.sender];\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n\tevent Mint(address indexed to, uint256 amount);\r\n\tevent MintFinished();\r\n\r\n\tbool public mintingFinished = false;\r\n\r\n\tmodifier canMint() {\r\n\t\trequire(!mintingFinished);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n\t\ttotalSupply = totalSupply.add(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\tMint(_to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction finishMinting() public onlyOwner returns (bool) {\r\n\t\tmintingFinished = true;\r\n\t\tMintFinished();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract SIGToken is MintableToken {\r\n\r\n\tstring public constant name = \"Saxinvest Group Coin\";\r\n\tstring public constant symbol = \"SIG\";\r\n\tuint32 public constant decimals = 18;\r\n\r\n\tfunction SIGToken(uint256 _freezeTransferTime) public {\r\n\t\tfreezeTransferTime = _freezeTransferTime;\r\n\t}\r\n}\r\n\r\ncontract SIGICO is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tSIGToken public token;\r\n\r\n\tuint256 public startTime;\r\n\tuint256 public endTime;\r\n\tuint256 public freezeTransferTime;\r\n\r\n\tbool public isFinalized = false;\r\n\r\n\tuint256 Round1 = 1517000399; // first round end time\r\n\tuint256 Round2 = 1519851599; // second round end time\r\n\r\n\taddress SafeAddr = 0x99C5FAb804600C8504EEeE0908251b0504B6354A;\r\n\r\n\taddress FundOwnerAddr_1 = 0x8C6Ef7697b14bD32Be490036566396B0bc821569;\r\n\taddress FundOwnerAddr_2 = 0xEeE2A9aE8db4bd43E72aa912dD908557D5D23891;\r\n\taddress FundOwnerAddr_3 = 0x8f89f10C379cD244c451Df6aD4a569aFe567c22f;\r\n\r\n\taddress ReserveFundAddr = 0xC9a5E3c3ed6c340dD10F87fe35929d93fee642Ed;\r\n\r\n\taddress DeveloperTokensStoreAddr = 0x0e22b0Baa6714A8Dd18dC966002E02b5116522EF;\r\n\taddress OtherTokensStoreAddr = 0x53E936299f2b7A7173A81B28C93591C880aDfD45;\r\n\r\n\tuint256 rate;\r\n\tuint256 TotalBuyers;\r\n\tuint256 PercentageForFounders = 10;\r\n\tuint256 PercentageForReserveFund = 5;\r\n\tuint256 PercentageForDevelopers = 3;\r\n\tuint256 PercentageForOther = 2;\r\n\tuint256 tokenCost;\r\n\r\n\tmapping (address => bool) Buyers;\r\n\tmapping (uint8 => uint256) BonusTokens;\r\n\tmapping (uint8 => uint256) Restricted;\r\n\r\n\tevent TokenPurchase(address indexed sender, address indexed buyer, uint8 round, uint256 rate, uint256 weiAmount, uint256 tokens, uint256 bonus);\r\n\tevent ChangeRate(uint256 changeTime, uint256 prevRate, uint256 newRate, uint256 prevSupply);\r\n\tevent Finalized();\r\n\r\n\tfunction SIGICO(uint256 _startTime, uint256 _endTime, uint256 _rate) public {\r\n\t\trequire(_startTime >= now);\r\n\t\trequire(_endTime >= _startTime);\r\n\t\trequire(_rate > 0);\r\n\r\n\t\tfreezeTransferTime = _endTime.add(90 * 1 days);\r\n        token = new SIGToken(freezeTransferTime);\r\n\r\n\t\tstartTime = _startTime;\r\n\t\tendTime = _endTime;\r\n\t\trate = _rate;\r\n\r\n\t\ttokenCost = uint256(1 ether).div(rate);\r\n\t}\r\n\r\n\tfunction () external payable {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\tfunction buyTokens(address buyer) public payable {\r\n\t\trequire(buyer != address(0));\r\n\t\trequire(validPurchase());\r\n\r\n\t\tuint256 tokens = rate.mul(msg.value).div(1 ether);\r\n\t\tuint256 tokens2mint = 0;\r\n        uint256 bonus = 0;\r\n        uint8 round = 3;\r\n\r\n\t\tif(now < Round1){\r\n            round = 1;\r\n\t\t\tbonus = tokens.mul(20).div(100);\r\n            BonusTokens[round] += bonus;\r\n\t\t}else if(now > Round1 && now < Round2){\r\n            round = 2;\r\n\t\t\tbonus = tokens.mul(10).div(100);\r\n            BonusTokens[round] += bonus;\r\n\t\t}\r\n\r\n\t\ttokens += bonus;\r\n        tokens2mint = tokens.mul(1 ether);\r\n\t\ttoken.mint(buyer, tokens2mint);\r\n\t\tTokenPurchase(msg.sender, buyer, round, rate, msg.value, tokens, bonus);\r\n\r\n        if(Buyers[buyer] != true){\r\n\t\t\tTotalBuyers += 1;\r\n\t\t\tBuyers[buyer] = true;\r\n\t\t}\r\n\r\n\t\tforwardFunds();\r\n\t}\r\n\r\n\tfunction forwardFunds() internal {\r\n\t\tSafeAddr.transfer(msg.value);\r\n\t}\r\n\r\n\tfunction validPurchase() internal view returns (bool) {\r\n\t\tbool withinPeriod = now >= startTime && now <= endTime;\r\n\t\tbool nonZeroPurchase = msg.value != 0;\r\n\t\tbool haveEnoughEther = msg.value >= tokenCost;\r\n\t\treturn withinPeriod && nonZeroPurchase && haveEnoughEther;\r\n\t}\r\n\r\n\tfunction hasEnded() public view returns (bool) {\r\n\t\treturn now > endTime;\r\n\t}\r\n\r\n\tfunction finalize() onlyOwner public {\r\n\t\trequire(!isFinalized);\r\n\t\trequire(hasEnded());\r\n\t\tfinalization();\r\n\t\tFinalized();\r\n\t\tisFinalized = true;\r\n\t}\r\n\r\n\tfunction finalization() internal {\r\n\t\tuint256 totalSupply = token.totalSupply().div(1 ether);\r\n\r\n\t\tuint256 tokens = totalSupply.mul(PercentageForFounders).div(100 - PercentageForFounders);\r\n\t\tuint256 tokens2mint = tokens.mul(1 ether);\r\n\t\ttoken.mint(FundOwnerAddr_1, tokens2mint);\r\n\t\ttoken.mint(FundOwnerAddr_2, tokens2mint);\r\n\t\ttoken.mint(FundOwnerAddr_3, tokens2mint);\r\n\t\tRestricted[1] = tokens.mul(3);\r\n\r\n\t\ttokens = totalSupply.mul(PercentageForDevelopers).div(100 - PercentageForDevelopers);\r\n        tokens2mint = tokens.mul(1 ether);\r\n\t\ttoken.mint(DeveloperTokensStoreAddr, tokens2mint);\r\n\t\tRestricted[2] = tokens;\r\n\r\n\t\ttokens = totalSupply.mul(PercentageForOther).div(100 - PercentageForOther);\r\n        tokens2mint = tokens.mul(1 ether);\r\n\t\ttoken.mint(OtherTokensStoreAddr, tokens2mint);\r\n\t\tRestricted[3] = tokens;\r\n\r\n\t\ttokens = totalSupply.mul(PercentageForReserveFund).div(100 - PercentageForReserveFund);\r\n\t\ttokens2mint = tokens.mul(1 ether);\r\n\t\ttoken.mint(ReserveFundAddr, tokens2mint);\r\n\t\tRestricted[4] = tokens;\r\n\r\n\t\ttoken.finishMinting();\r\n\t}\r\n\r\n\tfunction changeRate(uint256 _rate) onlyOwner public returns (uint256){\r\n\t\trequire(!isFinalized);\r\n\t\trequire(_rate > 0);\r\n\t\tuint256 totalSupply = token.totalSupply().div(1 ether);\r\n\t\ttokenCost = uint256(1 ether).div(_rate);\r\n\t\tChangeRate(now, rate, _rate, totalSupply);\r\n\t\trate = _rate;\r\n\t\treturn rate;\r\n\t}\r\n\r\n\tfunction getRestrictedTokens(uint8 _who) onlyOwner public constant returns (uint256){\r\n\t\trequire(isFinalized);\r\n\t\trequire(_who <= 4);\r\n\t\treturn Restricted[_who];\r\n\t}\r\n\r\n\tfunction getBonusTokens(uint8 _round) onlyOwner public constant returns (uint256){\r\n\t\trequire(_round < 3);\r\n\t\treturn BonusTokens[_round];\r\n\t}\r\n\r\n\tfunction getTotalBuyers() onlyOwner public constant returns (uint256){\r\n\t\treturn TotalBuyers;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"uint8\"}],\"name\":\"getRestrictedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeTransferTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint8\"}],\"name\":\"getBonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"changeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevSupply\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SIGICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a661890000000000000000000000000000000000000000000000000000000005ab95f4f0000000000000000000000000000000000000000000000000000000000000514","Library":"","SwarmSource":"bzzr://26592c86319b822bd198b969b9f40b138131b9d870658259ae5850e8eebc2317"}]}