{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract owned {\r\n address public owner;\r\n\r\n function owned() {\r\n     owner = msg.sender;\r\n }\r\n\r\n modifier onlyOwner {\r\n     require(msg.sender == owner);\r\n     _;\r\n }\r\n\r\n function transferOwnership(address newOwner) onlyOwner {\r\n     owner = newOwner;\r\n }\r\n}\r\n\r\ncontract ICO_CONTRACT is owned {\r\n\r\n   event WithdrawEther (address indexed from, uint256 amount, uint256 balance);\r\n   event ReceivedEther (address indexed sender, uint256 amount);  \r\n   \r\n   uint256 minimunInputEther;\r\n   uint256 maximumInputEther;\r\n   \r\n   uint icoStartTime;\r\n   uint icoEndTime;\r\n   \r\n   bool isStopFunding;\r\n   \r\n   function ICO_CONTRACT() {\r\n       minimunInputEther = 1 ether;\r\n       maximumInputEther = 500 ether;\r\n       \r\n       icoStartTime = now;\r\n       icoEndTime = now + 14 * 1 days;\r\n       \r\n       isStopFunding = false;\r\n   }\r\n   \r\n   function getBalance() constant returns (uint256){\r\n       return address(this).balance;\r\n   }\r\n   \r\n   function withdrawEther(uint256 _amount) onlyOwner returns (bool){\r\n       \r\n       if(_amount > getBalance()) {\r\n           return false;\r\n       }\r\n       owner.transfer(_amount);\r\n       WithdrawEther(msg.sender, _amount, getBalance());\r\n       return true;\r\n   }\r\n   \r\n   function withdrawEtherAll() onlyOwner returns (bool){\r\n       uint256 _tempBal = getBalance();\r\n       owner.transfer(getBalance());\r\n       WithdrawEther(msg.sender, _tempBal, getBalance());\r\n       return true;\r\n   }\r\n\r\n   function setMiniumInputEther (uint256 _minimunInputEther) onlyOwner {\r\n       minimunInputEther = _minimunInputEther;\r\n   }\r\n   \r\n   function getMiniumInputEther() constant returns (uint256) {\r\n       return minimunInputEther;\r\n   }\r\n   \r\n   function setMaxiumInputEther (uint256 _maximumInputEther) onlyOwner {\r\n       maximumInputEther = _maximumInputEther;\r\n   }\r\n   \r\n   function getMaxiumInputEther() constant returns (uint256) {\r\n       return maximumInputEther;\r\n   }\r\n   \r\n   function setIcoStartTime(uint _startTime) onlyOwner {\r\n       icoStartTime = _startTime;\r\n   }\r\n   \r\n   function setIcoEndTime(uint _endTime) onlyOwner {\r\n       icoEndTime = _endTime;\r\n   }\r\n   \r\n   function setIcoTimeStartEnd(uint _startTime, uint _endTime) onlyOwner {\r\n       if(_startTime > _endTime) {\r\n           return;\r\n       }\r\n       \r\n       icoStartTime = _startTime;\r\n       icoEndTime = _endTime;\r\n   }\r\n   \r\n   function setStopFunding(bool _isStopFunding) onlyOwner {\r\n       isStopFunding = _isStopFunding;\r\n   }\r\n   \r\n   function getIcoTime() constant returns (uint, uint) {\r\n       return (icoStartTime, icoEndTime);\r\n   }\r\n\r\n   function () payable {\r\n       \r\n       if(msg.value < minimunInputEther) {\r\n           throw;\r\n       }\r\n       \r\n       if(msg.value > maximumInputEther) {\r\n           throw;\r\n       }\r\n       \r\n       if(!isFundingNow()) {\r\n           throw;\r\n       }\r\n       \r\n       if(isStopFunding) {\r\n           throw;\r\n       }\r\n       \r\n       ReceivedEther(msg.sender, msg.value);\r\n   }\r\n   \r\n   function isFundingNow() constant returns (bool) {\r\n       return (now > icoStartTime && now < icoEndTime);\r\n   }\r\n   \r\n   function getIsStopFunding() constant returns (bool) {\r\n       return isStopFunding;\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setIcoStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isStopFunding\",\"type\":\"bool\"}],\"name\":\"setStopFunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFundingNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setIcoTimeStartEnd\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsStopFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiniumInputEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimunInputEther\",\"type\":\"uint256\"}],\"name\":\"setMiniumInputEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maximumInputEther\",\"type\":\"uint256\"}],\"name\":\"setMaxiumInputEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxiumInputEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setIcoEndTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"}]","ContractName":"ICO_CONTRACT","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://094ed5de08322aa6d7bebe4d5f2ded66e64193dfb51ed58ccade0bab7683e957"}]}