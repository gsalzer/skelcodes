{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assertTrue(bool val) internal {\r\n    assert(val);\r\n  }\r\n\r\n  function assertFalse(bool val) internal {\r\n    assert(!val);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n *\r\n * Provides onlyOwner modifier, which prevents function from running\r\n * if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement a halt mechanism.\r\n */\r\ncontract Haltable is Ownable {\r\n\r\n  bool public halted;\r\n\r\n  modifier revertIfHalted {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyIfHalted {\r\n    if (!halted) revert();\r\n    _;\r\n  }\r\n\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  function unhalt() external onlyOwner onlyIfHalted {\r\n    halted = false;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Forward ETH payments associated with the Provide (PRVD)\r\n * token sale and track them with an event.\r\n *\r\n * Associates purchasers who made payment for token issuance with an identifier.\r\n * Enables the ability to make a purchase on behalf of another address.\r\n *\r\n * Allows the sale to be halted upon completion.\r\n */\r\ncontract ProvideSale is Haltable {\r\n  using SafeMath for uint;\r\n\r\n  /** Multisig to which all ETH is forwarded. */\r\n  address public multisig;\r\n\r\n  /** Total ETH raised (in wei). */\r\n  uint public totalTransferred;\r\n\r\n  /** Total number of distinct purchasers. */\r\n  uint public purchaserCount;\r\n\r\n  /** Total incoming ETH (in wei) per centrally tracked purchaser. */\r\n  mapping (uint128 => uint) public paymentsByPurchaser;\r\n\r\n  /** Total incoming ETH (in wei) per benefactor address. */\r\n  mapping (address => uint) public paymentsByBenefactor;\r\n\r\n  /** Emitted when a purchase is made; benefactor is the address where the tokens will be ultimately issued. */\r\n  event PaymentForwarded(address source, uint amount, uint128 identifier, address benefactor);\r\n\r\n  /**\r\n   * @param _owner Owner is able to pause and resume crowdsale\r\n   * @param _multisig Multisig to which all ETH is forwarded\r\n   */\r\n  function ProvideSale(address _owner, address _multisig) {\r\n    owner = _owner;\r\n    multisig = _multisig;\r\n  }\r\n\r\n  /**\r\n   * Purchase on a behalf of a benefactor.\r\n   *\r\n   * The payment event is logged so interested parties can keep tally of the invested amounts\r\n   * and token recipients.\r\n   *\r\n   * The actual payment is forwarded to the multisig.\r\n   *\r\n   * @param identifier Identifier in the centralized database - UUID v4\r\n   * @param benefactor Address who will receive the tokens\r\n   */\r\n  function purchaseFor(uint128 identifier, address benefactor) public revertIfHalted payable {\r\n    uint weiAmount = msg.value;\r\n\r\n    if (weiAmount == 0) {\r\n      revert(); // no invalid payments\r\n    }\r\n\r\n    if (benefactor == 0) {\r\n      revert(); // bad payment address\r\n    }\r\n\r\n    PaymentForwarded(msg.sender, weiAmount, identifier, benefactor);\r\n\r\n    totalTransferred = totalTransferred.add(weiAmount);\r\n\r\n    if (paymentsByPurchaser[identifier] == 0) {\r\n      purchaserCount++;\r\n    }\r\n\r\n    paymentsByPurchaser[identifier] = paymentsByPurchaser[identifier].add(weiAmount);\r\n    paymentsByBenefactor[benefactor] = paymentsByBenefactor[benefactor].add(weiAmount);\r\n\r\n    if (!multisig.send(weiAmount)) revert(); // may run out of gas\r\n  }\r\n\r\n  /**\r\n   * Purchase on a behalf of the sender.\r\n   *\r\n   * @param identifier Identifier of the purchaser - UUID v4\r\n   */\r\n  function purchase(uint128 identifier) public payable {\r\n    purchaseFor(identifier, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Purchase on a behalf of the sender, but uses a nil identifier.\r\n   */\r\n  function() public payable {\r\n    purchase(0);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"purchaserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint128\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"paymentsByPurchaser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentsByBenefactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint128\"},{\"name\":\"benefactor\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"identifier\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"benefactor\",\"type\":\"address\"}],\"name\":\"PaymentForwarded\",\"type\":\"event\"}]","ContractName":"ProvideSale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bb97a82d51fb28060e1c5ee25837116db63a456500000000000000000000000082c1b5686bf3d54c7094cf22af26a3ef81aa3adc","Library":"","SwarmSource":"bzzr://a6943b3637bb79830bb3c9b339c041b98efbeafd0267a3041de634315e92340d"}]}