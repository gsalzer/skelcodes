{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13; \r\ncontract Owned { \r\n    address public owner;\r\n    function Owned() {\r\n      owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n      owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    /* Public variables of the token */ \r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals; \r\n    uint256 public totalSupply;      \r\n    /* This creates an array with all balances */    \r\n    mapping (address => uint256) public balanceOf;\r\n  \r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /* This notifies clients about the amount burnt */\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function Token(\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      uint8 decimalUnits,\r\n      string tokenSymbol\r\n      ) {\r\n      balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n      totalSupply = initialSupply;                        // Update total supply\r\n      name = tokenName;                                   // Set the name for display purposes\r\n      symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n      decimals = decimalUnits;                            // Amount of decimals for display purposes      \r\n  }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                            // Add the same to the recipient\r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /// @notice Send `_value` tokens to `_to` from your account\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transfer(address _to, uint256 _value) {       \r\n      _transfer(msg.sender, _to, _value);\r\n  }\r\n    \r\n  /// @notice Remove `_value` tokens from the system irreversibly\r\n  /// @param _value the amount of money to burn\r\n  function burn(uint256 _value) returns (bool success) {\r\n      require (balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n      balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n      totalSupply -= _value;                                // Updates totalSupply\r\n      Burn(msg.sender, _value);\r\n      return true;\r\n  } \r\n}\r\n\r\ncontract BiteduToken is Owned, Token {  \r\n  mapping (address => bool) public frozenAccount;\r\n\r\n  /* This generates a public event on the blockchain that will notify clients */\r\n  event FrozenFunds(address target, bool frozen);\r\n\r\n  /* Initializes contract with initial supply tokens to the creator of the contract */\r\n  function BiteduToken() Token (29000000, \"BITEDU\", 0, \"BTEU\") {\r\n      \r\n  }\r\n\r\n /* Internal transfer, only can be called by this contract */\r\n  function _transfer(address _from, address _to, uint _value) internal {      \r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n      require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                           // Add the same to the recipient      \r\n      Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /* Internal transfer, only can be called by this contract */\r\n  function _transferFrom(address _from, address _to, uint256 _value) internal {            \r\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n      require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n      require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n      require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n      balanceOf[_from] -= _value;                         // Subtract from the sender\r\n      balanceOf[_to] += _value;                           // Add the same to the recipient         \r\n      Transfer(_from, _to, _value);\r\n  }\r\n  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value the amount to send\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {                   \r\n      _transferFrom(_from, _to, _value);\r\n      return true;\r\n  }\r\n  /// @notice Create `mintedAmount` tokens and send it to `target`\r\n  /// @param target Address to receive the tokens\r\n  /// @param mintedAmount the amount of tokens it will receive\r\n  function mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n      balanceOf[target] += mintedAmount;\r\n      totalSupply += mintedAmount;\r\n      Transfer(0, this, mintedAmount);\r\n      Transfer(this, target, mintedAmount);\r\n  }\r\n  /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n  /// @param target Address to be frozen\r\n  /// @param freeze either to freeze it or not\r\n  function freezeAccount(address target, bool freeze) onlyOwner {\r\n      frozenAccount[target] = freeze;\r\n      FrozenFunds(target, freeze);\r\n  }  \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BiteduToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ad983f2797caaa619c271e0b5b2f3ad794cd0b6dde55e780fa66b8c1ee69843"}]}