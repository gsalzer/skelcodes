{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StandardCertificate is owned{\r\n    \r\n    string public name;\r\n    string public description;\r\n    string public language;\r\n    string public place;\r\n    uint public hoursCount;\r\n    \r\n    mapping (address => uint) certificates;\r\n    \r\n    function StandardCertificate (string _name, string _description, string _language, string _place, uint _hoursCount) {\r\n        name = _name;\r\n        description = _description;\r\n        language = _language;\r\n        place = _place;\r\n        hoursCount = _hoursCount;\r\n    }\r\n    \r\n    // выдача сертификата\r\n    function issue (address student) onlyOwner {\r\n        certificates[student] = now;\r\n    }\r\n    \r\n    function issued (address student)  constant returns (uint) {\r\n        return certificates[student];\r\n    }\r\n    \r\n    function annul (address student) onlyOwner {\r\n        certificates[student] = 0;\r\n    }\r\n    \r\n}\r\n\r\ncontract EWCertificationCenter is owned {\r\n    \r\n    string public name;\r\n    string public description;\r\n    string public place;\r\n    \r\n    mapping (address => bool) public validCertificators;\r\n    \r\n    mapping (address => bool) public validCourses;\r\n    \r\n    modifier onlyValidCertificator {\r\n        require(validCertificators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    \r\n    function EWCertificationCenter (string _name, string _description, string _place) {\r\n    \r\n        name = _name;\r\n        description = _description;\r\n        place = _place;\r\n        validCertificators[msg.sender]=true;\r\n        \r\n    }\r\n    \r\n    // add and delete certificator \r\n    function addCertificator(address newCertificator) onlyOwner {\r\n        validCertificators[newCertificator] = true;\r\n    }\r\n    \r\n    function deleteCertificator(address certificator) onlyOwner {\r\n        validCertificators[certificator] = false;\r\n    }\r\n    \r\n    // add and delete cource certificate\r\n    function addCourse(address courseAddess) onlyOwner {\r\n        StandardCertificate s = StandardCertificate(courseAddess);\r\n        validCourses[courseAddess] = true;\r\n    }\r\n\r\n    function deleteCourse(address courseAddess) onlyOwner {\r\n        validCourses[courseAddess] = false;\r\n    }\r\n    \r\n    function issueSertificate(address courseAddess, address student) onlyValidCertificator {\r\n        require (student != 0x0);\r\n        require (validCourses[courseAddess]);\r\n        \r\n        StandardCertificate s = StandardCertificate(courseAddess);\r\n        s.issue(student);\r\n    }\r\n    \r\n    function checkSertificate(address courseAddess, address student) constant returns (uint) {\r\n        require (student != 0x0);\r\n        require (validCourses[courseAddess]);\r\n        \r\n        StandardCertificate s = StandardCertificate(courseAddess);\r\n        return s.issued(student);        \r\n    }\r\n    \r\n    function annulCertificate(address courseAddess, address student) onlyValidCertificator {\r\n        require (student != 0x0);\r\n        require (validCourses[courseAddess]);\r\n\r\n        StandardCertificate s = StandardCertificate(courseAddess);\r\n        s.annul(student);\r\n    }\r\n    \r\n    function changeOwnership(address certificateAddress, address newOwner) onlyOwner {\r\n        StandardCertificate s = StandardCertificate(certificateAddress);\r\n        s.transferOwnership(newOwner);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"place\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hoursCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"language\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"issued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"student\",\"type\":\"address\"}],\"name\":\"annul\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_language\",\"type\":\"string\"},{\"name\":\"_place\",\"type\":\"string\"},{\"name\":\"_hoursCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"StandardCertificate","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000035d0a0d0b0d0b7d180d0b0d0b1d0bed182d0bad0b020d0bdd0b020d0b1d0bbd0bed0bad187d0b5d0b9d0bdd0b520457468657265756d0000000000000000000000000000000000000000000000000000000000000000000000000000000000008ad091d0b0d0b7d0bed0b2d18bd0b920d0bad183d180d18120d0bfd0be20d180d0b0d0b7d180d0b0d0b1d0bed182d0bad0b520d181d0bcd0b0d180d18220d0bad0bed0bdd182d180d0b0d0bad182d0bed0b220d0b820d0bfd180d0b8d0bbd0bed0b6d0b5d0bdd0b8d0b920d0bdd0b020d0b1d0bbd0bed0bad187d0b5d0b9d0bdd0b520457468657265756d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ed180d183d181d181d0bad0b8d0b900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147777772e6574687265756d776f726b732e636f6d000000000000000000000000","Library":"","SwarmSource":"bzzr://492ffd402e2e15b98c42bd9c9dbcffdcc7ff3fbe48c86dbb2456af0dcf7acae7"}]}