{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n    function totalSupply() constant returns (uint totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    function decimals() constant returns(uint digits);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/// @title Kyber Reserve contract\r\n/// @author Yaron Velner\r\n\r\ncontract KyberReserve {\r\n    address public reserveOwner;\r\n    address public kyberNetwork;\r\n    ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant PRECISION = (10**18);\r\n    bool public tradeEnabled;\r\n\r\n    struct ConversionRate {\r\n        uint rate;\r\n        uint expirationBlock;\r\n    }\r\n\r\n    mapping(bytes32=>ConversionRate) pairConversionRate;\r\n\r\n    /// @dev c'tor.\r\n    /// @param _kyberNetwork The address of kyber network\r\n    /// @param _reserveOwner Address of the reserve owner\r\n    function KyberReserve( address _kyberNetwork, address _reserveOwner ) {\r\n        kyberNetwork = _kyberNetwork;\r\n        reserveOwner = _reserveOwner;\r\n        tradeEnabled = true;\r\n    }\r\n\r\n\r\n    /// @dev check if a pair is listed for trading.\r\n    /// @param source Source token\r\n    /// @param dest Destination token\r\n    /// @param blockNumber Current block number\r\n    /// @return true iff pair is listed\r\n    function isPairListed( ERC20 source, ERC20 dest, uint blockNumber ) internal constant returns(bool) {\r\n        ConversionRate memory rateInfo = pairConversionRate[sha3(source,dest)];\r\n        if( rateInfo.rate == 0 ) return false;\r\n        return rateInfo.expirationBlock >= blockNumber;\r\n    }\r\n\r\n    /// @dev get current conversion rate\r\n    /// @param source Source token\r\n    /// @param dest Destination token\r\n    /// @param blockNumber Current block number\r\n    /// @return conversion rate with PRECISION precision\r\n\r\n    function getConversionRate( ERC20 source, ERC20 dest, uint blockNumber ) internal constant returns(uint) {\r\n        ConversionRate memory rateInfo = pairConversionRate[sha3(source,dest)];\r\n        if( rateInfo.rate == 0 ) return 0;\r\n        if( rateInfo.expirationBlock < blockNumber ) return 0;\r\n        return rateInfo.rate * (10 ** getDecimals(dest)) / (10**getDecimals(source));\r\n    }\r\n\r\n    event ErrorReport( address indexed origin, uint error, uint errorInfo );\r\n    event DoTrade( address indexed origin, address source, uint sourceAmount, address destToken, uint destAmount, address destAddress );\r\n\r\n    function getDecimals( ERC20 token ) constant returns(uint) {\r\n      if( token == ETH_TOKEN_ADDRESS ) return 18;\r\n      return token.decimals();\r\n    }\r\n\r\n    /// @dev do a trade\r\n    /// @param sourceToken Source token\r\n    /// @param sourceAmount Amount of source token\r\n    /// @param destToken Destination token\r\n    /// @param destAddress Destination address to send tokens to\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true iff trade is succesful\r\n    function doTrade( ERC20 sourceToken,\r\n                      uint sourceAmount,\r\n                      ERC20 destToken,\r\n                      address destAddress,\r\n                      bool validate ) internal returns(bool) {\r\n\r\n        // can skip validation if done at kyber network level\r\n        if( validate ) {\r\n            if( ! isPairListed( sourceToken, destToken, block.number ) ) {\r\n                // pair is not listed\r\n                ErrorReport( tx.origin, 0x800000001, 0 );\r\n                return false;\r\n\r\n            }\r\n            if( sourceToken == ETH_TOKEN_ADDRESS ) {\r\n                if( msg.value != sourceAmount ) {\r\n                    // msg.value != sourceAmmount\r\n                    ErrorReport( tx.origin, 0x800000002, msg.value );\r\n                    return false;\r\n                }\r\n            }\r\n            else if( msg.value > 0 ) {\r\n                // msg.value must be 0\r\n                ErrorReport( tx.origin, 0x800000003, msg.value );\r\n                return false;\r\n            }\r\n            else if( sourceToken.allowance(msg.sender, this ) < sourceAmount ) {\r\n                // allowance is not enough\r\n                ErrorReport( tx.origin, 0x800000004, sourceToken.allowance(msg.sender, this ) );\r\n                return false;\r\n            }\r\n        }\r\n\r\n        uint conversionRate = getConversionRate( sourceToken, destToken, block.number );\r\n        // TODO - safe multiplication\r\n        uint destAmount = (conversionRate * sourceAmount) / PRECISION;\r\n\r\n        // sanity check\r\n        if( destAmount == 0 ) {\r\n            // unexpected error: dest amount is 0\r\n            ErrorReport( tx.origin, 0x800000005, 0 );\r\n            return false;\r\n        }\r\n\r\n        // check for sufficient balance\r\n        if( destToken == ETH_TOKEN_ADDRESS ) {\r\n            if( this.balance < destAmount ) {\r\n                // insufficient ether balance\r\n                ErrorReport( tx.origin, 0x800000006, destAmount );\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if( destToken.balanceOf(this) < destAmount ) {\r\n                // insufficient token balance\r\n                ErrorReport( tx.origin, 0x800000007, uint(destToken) );\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // collect source tokens\r\n        if( sourceToken != ETH_TOKEN_ADDRESS ) {\r\n            if( ! sourceToken.transferFrom(msg.sender,this,sourceAmount) ) {\r\n                // transfer from source token failed\r\n                ErrorReport( tx.origin, 0x800000008, uint(sourceToken) );\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // send dest tokens\r\n        if( destToken == ETH_TOKEN_ADDRESS ) {\r\n            if( ! destAddress.send(destAmount) ) {\r\n                // transfer ether to dest failed\r\n                ErrorReport( tx.origin, 0x800000009, uint(destAddress) );\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if( ! destToken.transfer(destAddress, destAmount) ) {\r\n                // transfer token to dest failed\r\n                ErrorReport( tx.origin, 0x80000000a, uint(destAddress) );\r\n                return false;\r\n            }\r\n        }\r\n\r\n        DoTrade( tx.origin, sourceToken, sourceAmount, destToken, destAmount, destAddress );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev trade\r\n    /// @param sourceToken Source token\r\n    /// @param sourceAmount Amount of source token\r\n    /// @param destToken Destination token\r\n    /// @param destAddress Destination address to send tokens to\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true iff trade is succesful\r\n    function trade( ERC20 sourceToken,\r\n                    uint sourceAmount,\r\n                    ERC20 destToken,\r\n                    address destAddress,\r\n                    bool validate ) payable returns(bool) {\r\n\r\n        if( ! tradeEnabled ) {\r\n            // trade is not enabled\r\n            ErrorReport( tx.origin, 0x810000000, 0 );\r\n            if( msg.value > 0 ) {\r\n                if( ! msg.sender.send(msg.value) ) throw;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if( msg.sender != kyberNetwork ) {\r\n            // sender must be kyber network\r\n            ErrorReport( tx.origin, 0x810000001, uint(msg.sender) );\r\n            if( msg.value > 0 ) {\r\n                if( ! msg.sender.send(msg.value) ) throw;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        if( ! doTrade( sourceToken, sourceAmount, destToken, destAddress, validate ) ) {\r\n            // do trade failed\r\n            ErrorReport( tx.origin, 0x810000002, 0 );\r\n            if( msg.value > 0 ) {\r\n                if( ! msg.sender.send(msg.value) ) throw;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        ErrorReport( tx.origin, 0, 0 );\r\n        return true;\r\n    }\r\n\r\n    event SetRate( ERC20 source, ERC20 dest, uint rate, uint expiryBlock );\r\n\r\n    /// @notice can be called only by owner\r\n    /// @dev set rate of pair of tokens\r\n    /// @param sources an array contain source tokens\r\n    /// @param dests an array contain dest tokens\r\n    /// @param conversionRates an array with rates\r\n    /// @param expiryBlocks array of expiration blocks\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true iff trade is succesful\r\n    function setRate( ERC20[] sources, ERC20[] dests, uint[] conversionRates, uint[] expiryBlocks, bool validate ) returns(bool) {\r\n        if( msg.sender != reserveOwner ) {\r\n            // sender must be reserve owner\r\n            ErrorReport( tx.origin, 0x820000000, uint(msg.sender) );\r\n            return false;\r\n        }\r\n\r\n        if( validate ) {\r\n            if( ( sources.length != dests.length ) ||\r\n                ( sources.length != conversionRates.length ) ||\r\n                ( sources.length != expiryBlocks.length ) ) {\r\n                // arrays length are not identical\r\n                ErrorReport( tx.origin, 0x820000001, 0 );\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for( uint i = 0 ; i < sources.length ; i++ ) {\r\n            SetRate( sources[i], dests[i], conversionRates[i], expiryBlocks[i] );\r\n            pairConversionRate[sha3(sources[i],dests[i])] = ConversionRate( conversionRates[i], expiryBlocks[i] );\r\n        }\r\n\r\n        ErrorReport( tx.origin, 0, 0 );\r\n        return true;\r\n    }\r\n\r\n    event EnableTrade( bool enable );\r\n\r\n    /// @notice can be called only by owner\r\n    /// @dev enable of disable trade\r\n    /// @param enable if true trade is enabled, otherwise disabled\r\n    /// @return true iff trade is succesful\r\n    function enableTrade( bool enable ) returns(bool){\r\n        if( msg.sender != reserveOwner ) {\r\n            // sender must be reserve owner\r\n            ErrorReport( tx.origin, 0x830000000, uint(msg.sender) );\r\n            return false;\r\n        }\r\n\r\n        tradeEnabled = enable;\r\n        ErrorReport( tx.origin, 0, 0 );\r\n        EnableTrade( enable );\r\n\r\n        return true;\r\n    }\r\n\r\n    event DepositToken( ERC20 token, uint amount );\r\n    function() payable {\r\n        DepositToken( ETH_TOKEN_ADDRESS, msg.value );\r\n    }\r\n\r\n    /// @notice ether could also be deposited without calling this function\r\n    /// @dev an auxilary function that allows ether deposits\r\n    /// @return true iff deposit is succesful\r\n    function depositEther( ) payable returns(bool) {\r\n        ErrorReport( tx.origin, 0, 0 );\r\n\r\n        DepositToken( ETH_TOKEN_ADDRESS, msg.value );\r\n        return true;\r\n    }\r\n\r\n    /// @notice tokens could also be deposited without calling this function\r\n    /// @dev an auxilary function that allows token deposits\r\n    /// @param token Token address\r\n    /// @param amount Amount of tokens to deposit\r\n    /// @return true iff deposit is succesful\r\n    function depositToken( ERC20 token, uint amount ) returns(bool) {\r\n        if( token.allowance( msg.sender, this ) < amount ) {\r\n            // allowence is smaller then amount\r\n            ErrorReport( tx.origin, 0x850000001, token.allowance( msg.sender, this ) );\r\n            return false;\r\n        }\r\n\r\n        if( ! token.transferFrom(msg.sender, this, amount ) ) {\r\n            // transfer from failed\r\n            ErrorReport( tx.origin, 0x850000002, uint(token) );\r\n            return false;\r\n        }\r\n\r\n        DepositToken( token, amount );\r\n        return true;\r\n    }\r\n\r\n\r\n    event Withdraw( ERC20 token, uint amount, address destination );\r\n\r\n    /// @notice can only be called by owner.\r\n    /// @dev withdaw tokens or ether from contract\r\n    /// @param token Token address\r\n    /// @param amount Amount of tokens to deposit\r\n    /// @param destination address that get withdrewed funds\r\n    /// @return true iff withdrawal is succesful\r\n    function withdraw( ERC20 token, uint amount, address destination ) returns(bool) {\r\n        if( msg.sender != reserveOwner ) {\r\n            // sender must be reserve owner\r\n            ErrorReport( tx.origin, 0x860000000, uint(msg.sender) );\r\n            return false;\r\n        }\r\n\r\n        if( token == ETH_TOKEN_ADDRESS ) {\r\n            if( ! destination.send(amount) ) throw;\r\n        }\r\n        else if( ! token.transfer(destination,amount) ) {\r\n            // transfer to reserve owner failed\r\n            ErrorReport( tx.origin, 0x860000001, uint(token) );\r\n            return false;\r\n        }\r\n\r\n        ErrorReport( tx.origin, 0, 0 );\r\n        Withdraw( token, amount, destination );\r\n    }\r\n\r\n    function changeOwner( address newOwner ) {\r\n      if( msg.sender != reserveOwner ) throw;\r\n      reserveOwner = newOwner;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    /// status functions ///////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev information on conversion rate from source to dest\r\n    /// @param source Source token\r\n    /// @param dest   Destinatoin token\r\n    /// @return (conversion rate,experation block,dest token balance of reserve)\r\n    function getPairInfo( ERC20 source, ERC20 dest ) constant returns(uint rate, uint expBlock, uint balance) {\r\n        ConversionRate memory rateInfo = pairConversionRate[sha3(source,dest)];\r\n        balance = 0;\r\n        if( dest == ETH_TOKEN_ADDRESS ) balance = this.balance;\r\n        else balance = dest.balanceOf(this);\r\n\r\n        expBlock = rateInfo.expirationBlock;\r\n        rate = rateInfo.rate;\r\n    }\r\n\r\n    /// @notice a debug function\r\n    /// @dev get the balance of the reserve\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance( ERC20 token ) constant returns(uint){\r\n        if( token == ETH_TOKEN_ADDRESS ) return this.balance;\r\n        else return token.balanceOf(this);\r\n    }\r\n}\r\n\r\n\r\ncontract Wrapper {\r\n  function getBalances( address reserve, ERC20[] tokens ) constant returns(uint[]){\r\n    uint[] memory result = new uint[](tokens.length);\r\n    for( uint i = 0 ; i < tokens.length ; i++ ) {\r\n      uint balance = 0;\r\n      if( tokens[i] == ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) ) {\r\n        balance = reserve.balance;\r\n      }\r\n      else {\r\n        balance = tokens[i].balanceOf(reserve);\r\n      }\r\n\r\n      result[i] = balance;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function getPrices( KyberReserve reserve, ERC20[] sources, ERC20[] dests )\r\n    constant returns(uint[], uint[], uint[]) {\r\n      require( sources.length == dests.length );\r\n      uint[] memory rates = new uint[](sources.length);\r\n      uint[] memory expBlocks = new uint[](sources.length);\r\n      uint[] memory balances = new uint[](sources.length);\r\n      for( uint i = 0 ; i < sources.length ; i++ ) {\r\n        uint rate; uint expBlock; uint balance;\r\n        (rate,expBlock,balance) = reserve.getPairInfo( sources[i], dests[i] );\r\n        rates[i] = rate;\r\n        expBlocks[i] = expBlock;\r\n        balances[i] = balance;\r\n      }\r\n\r\n      return (rates,expBlocks,balances);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"sources\",\"type\":\"address[]\"},{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Wrapper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7df9dbb299d229c047beb3e47a9b362441cbd84b6d411351814231b17a38d28c"}]}