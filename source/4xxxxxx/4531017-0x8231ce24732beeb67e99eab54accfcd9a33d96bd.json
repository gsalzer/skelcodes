{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Mistoken Campaign-1 Crowdsale Contract\r\n * Based on the Wild Crypto Crowdsale Contract\r\n * and the OpenZeppelin open-source framework\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the MisToken contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Token public token;\r\n\r\n  uint256 public constant RATE = 99; // Number of tokens per Ether\r\n  uint256 public constant CAP = 101; // Cap in Ether\r\n  uint256 public constant START = 1510398671; // Saturday, November 11, 2017 11:11:11 AM (GMT)\r\n  uint256 public constant DAYS = 11; // 11 Days\r\n\r\n  uint256 public constant initialTokens = 9999 * 10**18; // Initial number of tokens available\r\n  bool public initialized = false;\r\n  uint256 public raisedAmount = 0;\r\n\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\n\r\n  function Crowdsale(address _tokenAddr) {\r\n      require(_tokenAddr != 0);\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  function initialize() onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == initialTokens); // Must have some tokens allocated\r\n      initialized = true;\r\n  }\r\n\r\n  function isActive() constant returns (bool) {\r\n    return (\r\n        initialized == true &&\r\n        now >= START && // Must be after the START date\r\n        now <= START.add(DAYS * 1 days) && // Must be before the end date\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  function goalReached() constant returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n\r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n  * @dev function that sells available tokens\r\n  */\r\n  function buyTokens() payable whenSaleIsActive {\r\n\r\n    // Calculate tokens to sell\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n\r\n    BoughtTokens(msg.sender, tokens);\r\n\r\n    // Increment raised amount\r\n    raisedAmount = raisedAmount.add(msg.value);\r\n    \r\n    // Send tokens to buyer\r\n    token.transfer(msg.sender, tokens);\r\n    \r\n    // Send money to owner\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the number of tokens allocated to this contract\r\n   */\r\n  function tokensAvailable() constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   */\r\n  function destroy() onlyOwner {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > 0);\r\n    token.transfer(owner, balance);\r\n\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000addC3395871E6F3E1C131F6acccbC2dDd63cbD4a","Library":"","SwarmSource":"bzzr://0db7e416819464b4317244ea7f45324044bc2e1a7c03023023b71ebc5cf50b92"}]}