{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// --- ShareHolder forward declaration ---\r\ncontract ShareHolder\r\n{\r\n\tfunction addToShareHoldersProfit(string, string) payable\r\n\t{\r\n\t\t// ...\r\n\t}\r\n}\r\n// --- End of ShareHolder forward declaration ---\r\n\r\ncontract Ownable \r\n{\r\n\taddress m_addrOwner;\r\n\r\n\tfunction Ownable() \t\r\n\t{ \r\n\t\tm_addrOwner = msg.sender; \r\n\t}\r\n\r\n\tmodifier onlyOwner() \r\n\t{\r\n\t\tif (msg.sender != m_addrOwner) \r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n    \t_;\r\n\t}\r\n\r\n\t// ---\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner \r\n\t{\r\n\t\tm_addrOwner = newOwner;\r\n\t}\r\n\r\n\t// ---\r\n\r\n\tfunction isOwner() constant returns (bool bIsOwner) { return (m_addrOwner == msg.sender); }\r\n\r\n}\r\n\r\n// ------\r\n\r\ncontract DukeOfEther is Ownable\r\n{\r\n\taddress m_addrShareHolder = 0;      // addr. of ShareHolder Profit Manager\r\n\r\n\tuint m_deployedAtBlock = 0;\t\t\t// Initial block of a contract, used in logging/reporting\r\n\tuint m_nOwnersMoney = 0;\r\n\tuint m_nNewCountryPrice = 1 ether;  // Pay to create NEW country\r\n    uint m_nMinDukePrice = 1 finney;\r\n    uint m_nDeterioration = 3;          // After day 60, loose 3% a day till m_nMinDukePrice\r\n\tuint m_nDaysBeforeDeteriorationStarts = 60;\r\n    uint m_NextDukePaymentIncrease = 150; // Next Duke pays 150% of current\r\n    uint m_nNumberOfActiveCountries = 0;\r\n\r\n\tstruct Country\r\n\t{\r\n        bool m_bIsDestroyed;\r\n\t\tstring m_strNickName;\r\n\t\tuint m_nLastDukeRiseDate;\r\n\t\taddress m_addrCurrentDuke;\r\n\t\tuint m_nCurrentDukePaid;\r\n\t\tstring m_strCountry;\r\n\t}\r\n\t\r\n\tmapping (string => Country) m_Countries;\t// Russia, USA, China... Add more using addNewCountry()\r\n    \r\n    // --- Events ---\r\n\r\n\tevent updateDukeHistory(string strCountry, bool bIsDestroyed, string strNickName, \r\n        address indexed addrCurrentDuke, uint nCurrentDukePaid, uint date);\r\n\tevent errorMessage(string strMessage);\r\n\r\n\t// --- Functions ---\r\n\r\n\tfunction DukeOfEther()\r\n\t{\r\n        m_deployedAtBlock = block.number;\r\n        // ---\r\n\t\taddCountry(\"USA\");\r\n\t\taddCountry(\"Russia\");\r\n\t\taddCountry(\"China\");\r\n        addCountry(\"Japan\");\r\n        addCountry(\"Taiwan\");\r\n        addCountry(\"Ukraine\");\r\n\t}\r\n\r\n\t// ---\r\n\t\r\n\tfunction addCountry(string strCountry) internal\r\n\t{\r\n\t    Country memory newCountryInfo;\r\n\t    \r\n        newCountryInfo.m_bIsDestroyed = false;\r\n\t\tnewCountryInfo.m_strNickName = \"Vacant\";\r\n\t\tnewCountryInfo.m_addrCurrentDuke = m_addrOwner;\r\n\t\tnewCountryInfo.m_nCurrentDukePaid = m_nMinDukePrice;\r\n\r\n        newCountryInfo.m_strCountry = strCountry;\r\n        newCountryInfo.m_nLastDukeRiseDate = now;\r\n\t\tm_Countries[strCountry] = newCountryInfo;\r\n        \r\n        updateDukeHistory(strCountry, false, \"Vacant\", m_addrOwner, 0, now);\r\n        \r\n        m_nNumberOfActiveCountries++;\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n\tfunction verifyNickNameAndCountry(string strCountry, string strNickName) internal\r\n    {\r\n\t\tif(bytes(strNickName).length > 30 || bytes(strCountry).length > 30)\r\n        {\r\n            errorMessage(\"String too long: keep strNickName and strCountry <= 30\");\r\n            revert();\r\n        }\r\n\t}\r\n\r\n\t// ---\r\n\t\r\n\tfunction processShareHolderFee(uint nFee, string strNickName) internal\r\n\t{\t\r\n\t\t// --- ShareHolder interface ---\r\n\t\tif(m_addrShareHolder != 0)\r\n        {\r\n            ShareHolder contractShareHolder = ShareHolder(m_addrShareHolder);\r\n            contractShareHolder.addToShareHoldersProfit.value(nFee)(strNickName, \"\");\r\n        }\r\n\t}\r\n\r\n\t// ---\r\n\t\r\n\tfunction addRemoveCountry(string strCountry, string strNickName, bool bDestroy) payable\r\n\t{\r\n\t\tverifyNickNameAndCountry(strCountry, strNickName);\r\n\r\n        if(!bDestroy && m_nNumberOfActiveCountries >= 12)\r\n        {\r\n            errorMessage(\"Too many active countries. Consider destroying few.\");\r\n            revert();\r\n        }\r\n        else if(bDestroy && m_nNumberOfActiveCountries <= 3)\r\n        {\r\n            errorMessage(\"There should be at least 3 countries alive\");\r\n            revert();\r\n        }\r\n        \r\n        // Demiurg pays more, then gets even\r\n        if(msg.value < getPaymentToAddRemoveCountry(strCountry, bDestroy))\r\n\t\t{\r\n\t\t\terrorMessage(\"Sorry, but country costs more\");\r\n\t\t\trevert();\r\n\t\t}\r\n      \r\n        // Note that we do not check if the country exists: \r\n        // we take money and promote next Duke or Destroyer\r\n\r\n\t\taddress addrPrevDuke = m_Countries[strCountry].m_addrCurrentDuke;\r\n\t\t\r\n\t\tuint nFee = msg.value / 25;\t// 4%\r\n        uint nAmount = msg.value - nFee;\r\n        uint nDemiurgsEffectiveAmount = 100 * nAmount / m_NextDukePaymentIncrease;\r\n\t\r\n\t\tprocessShareHolderFee(nFee, strNickName);\r\n        \r\n        updateDukeHistory(strCountry, bDestroy, strNickName, msg.sender, msg.value, now);    \r\n        \r\n\t\tCountry memory newCountryInfo;\r\n        newCountryInfo.m_bIsDestroyed = bDestroy;\r\n        newCountryInfo.m_strCountry = strCountry;\r\n        newCountryInfo.m_strNickName = strNickName;\r\n\t\tnewCountryInfo.m_nLastDukeRiseDate = now;\r\n\t\tnewCountryInfo.m_addrCurrentDuke = msg.sender;\r\n\t\tnewCountryInfo.m_nCurrentDukePaid = nDemiurgsEffectiveAmount;\r\n        \r\n\t\tm_Countries[strCountry] = newCountryInfo;\r\n        \r\n        if(bDestroy)\r\n            m_nNumberOfActiveCountries--;\r\n        else\r\n            m_nNumberOfActiveCountries++;\r\n        \r\n        m_nOwnersMoney += (nAmount - nDemiurgsEffectiveAmount);\r\n                \r\n        addrPrevDuke.transfer(nDemiurgsEffectiveAmount);\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n\tfunction becomeDuke(string strCountry, string strNickName) payable\r\n\t{\r\n\t\tif(msg.value < getMinNextBet(strCountry))\r\n\t\t\trevert();\r\n\r\n        if(bytes(strNickName).length > 30 || bytes(strCountry).length > 30)\r\n        {\r\n            errorMessage(\"String too long: keep strNickName and strCountry <= 30\");\r\n            revert();\r\n        }\r\n            \r\n        Country memory countryInfo = m_Countries[strCountry];\r\n        if(countryInfo.m_addrCurrentDuke == 0 || countryInfo.m_bIsDestroyed == true)\r\n\t\t{\r\n\t\t\terrorMessage(\"This country does not exist: use addRemoveCountry first\");\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t\taddress addrPrevDuke = m_Countries[strCountry].m_addrCurrentDuke;\r\n            \r\n\t\tuint nFee = msg.value / 25;\t// 4%\r\n\t\tuint nOwnersFee = msg.value / 100;\t// 1%\r\n\t\tm_nOwnersMoney += nOwnersFee;\r\n\r\n        uint nPrevDukeReceived = msg.value - nFee - nOwnersFee;\r\n       \r\n        countryInfo.m_bIsDestroyed = false;\r\n        countryInfo.m_strNickName = strNickName;\r\n\t\tcountryInfo.m_nLastDukeRiseDate = now;\r\n\t\tcountryInfo.m_addrCurrentDuke = msg.sender;\r\n\t\tcountryInfo.m_nCurrentDukePaid = msg.value;\r\n\t\tcountryInfo.m_strCountry = strCountry;\r\n        \r\n        m_Countries[strCountry] = countryInfo;\r\n        \r\n        updateDukeHistory(strCountry, false, strNickName, msg.sender, msg.value, now); \r\n\r\n\t\tprocessShareHolderFee(nFee, strNickName);\r\n        \r\n        addrPrevDuke.transfer(nPrevDukeReceived);\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n\tfunction withdrawDukeOwnersMoney() onlyOwner\r\n\t{\r\n\t\tm_addrOwner.transfer(m_nOwnersMoney);\r\n\t}\r\n\t\r\n\t// ---\r\n\t\r\n    function setShareHolder(address addr) onlyOwner { m_addrShareHolder = addr; }\r\n    \r\n\tfunction isDestroyed(string strCountry) constant returns (bool) { return m_Countries[strCountry].m_bIsDestroyed; }\r\n\tfunction getInitBlock() constant returns (uint nInitBlock) { return m_deployedAtBlock; }\r\n\tfunction getDukeNickName(string strCountry) constant returns (string) \r\n        { return m_Countries[strCountry].m_strNickName; }\r\n\tfunction getDukeDate(string strCountry) constant returns (uint date) \r\n        { return m_Countries[strCountry].m_nLastDukeRiseDate; }\r\n\tfunction getCurrentDuke(string strCountry) constant returns (address addr) \r\n        { return m_Countries[strCountry].m_addrCurrentDuke; }\r\n\tfunction getCurrentDukePaid(string strCountry) constant returns (uint nPaid) \r\n        { return m_Countries[strCountry].m_nCurrentDukePaid; }\r\n\tfunction getMinNextBet(string strCountry) constant returns (uint nNextBet) \r\n\t{\r\n\t\tif(m_Countries[strCountry].m_nCurrentDukePaid == 0)\r\n\t\t\treturn 1 finney;\r\n\r\n        uint nDaysSinceLastRise = (now - m_Countries[strCountry].m_nLastDukeRiseDate) / 86400;\r\n        uint nDaysMax = m_nDaysBeforeDeteriorationStarts + 100 / m_nDeterioration;\r\n        if(nDaysSinceLastRise >= nDaysMax)\r\n            return 1 finney;\r\n\r\n        uint nCurrentDukeDue = m_Countries[strCountry].m_nCurrentDukePaid;\r\n        if(nDaysSinceLastRise > m_nDaysBeforeDeteriorationStarts)\r\n            nCurrentDukeDue = nCurrentDukeDue * (nDaysSinceLastRise - m_nDaysBeforeDeteriorationStarts) * m_nDeterioration / 100; \r\n            \r\n\t\treturn  m_NextDukePaymentIncrease * nCurrentDukeDue / 100; \r\n\t}\r\n\r\n\tfunction getPaymentToAddRemoveCountry(string strCountry, bool bRemove) constant returns (uint)\r\n\t{\r\n\t\tif(bRemove && m_Countries[strCountry].m_addrCurrentDuke == 0)\r\n\t\t\treturn 0;\r\n\t\telse if(!bRemove && m_Countries[strCountry].m_addrCurrentDuke != 0 && m_Countries[strCountry].m_bIsDestroyed == false)\t\r\n\t\t\treturn 0;\r\n\r\n\t\tuint nPrice = m_NextDukePaymentIncrease * getMinNextBet(strCountry) / 100;\r\n\t\tif(nPrice < m_nNewCountryPrice)\r\n\t\t\tnPrice = m_nNewCountryPrice;\r\n\t\treturn nPrice;\t\r\n\t}\r\n\t\r\n    // TBD: make it deletable\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getInitBlock\",\"outputs\":[{\"name\":\"nInitBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"},{\"name\":\"bRemove\",\"type\":\"bool\"}],\"name\":\"getPaymentToAddRemoveCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"getCurrentDuke\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"isDestroyed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"getMinNextBet\",\"outputs\":[{\"name\":\"nNextBet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"},{\"name\":\"strNickName\",\"type\":\"string\"},{\"name\":\"bDestroy\",\"type\":\"bool\"}],\"name\":\"addRemoveCountry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setShareHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"getDukeDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDukeOwnersMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"bIsOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"getCurrentDukePaid\",\"outputs\":[{\"name\":\"nPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"}],\"name\":\"getDukeNickName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"strCountry\",\"type\":\"string\"},{\"name\":\"strNickName\",\"type\":\"string\"}],\"name\":\"becomeDuke\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"strCountry\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bIsDestroyed\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"strNickName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"addrCurrentDuke\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nCurrentDukePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"updateDukeHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"strMessage\",\"type\":\"string\"}],\"name\":\"errorMessage\",\"type\":\"event\"}]","ContractName":"DukeOfEther","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6c145fb6a855712ada07522426df4cfea05697d1d5a240b1c71530d4400924c"}]}