{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis file is part of the BREMP Contract.\r\n\r\nThe BREMP Contract is free software: you can redistribute it and/or\r\nmodify it under the terms of the GNU lesser General Public License as published\r\nby the Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThe BREMP Contract is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with the BREMP Contract. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n@author Ilya Svirin <i.svirin@nordavind.ru>\r\nIF YOU ARE ENJOYED IT DONATE TO 0x3Ad38D1060d1c350aF29685B2b8Ec3eDE527452B ! :)\r\n*/\r\n\r\n\r\npragma solidity ^0.4.0;\r\n\r\ncontract NeuroDAO {\r\n    function balanceOf(address who) constant returns (uint);\r\n    function freezedBalanceOf(address _who) constant returns(uint);\r\n}\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    function owned() payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n    \r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\ncontract Crowdsale is owned {\r\n\r\n    uint constant totalTokens    = 25000000;\r\n    uint constant neurodaoTokens = 1250000;\r\n    uint constant totalLimitUSD  = 500000;\r\n    \r\n    uint                         public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    address                      public neurodao;\r\n    uint                         public etherPrice;\r\n\r\n    mapping (address => bool)    public holders;\r\n    mapping (uint => address)    public holdersIter;\r\n    uint                         public numberOfHolders;\r\n    \r\n    uint                         public collectedUSD;\r\n    address                      public presaleOwner;\r\n    uint                         public collectedNDAO;\r\n    \r\n    mapping (address => bool)    public gotBonus;\r\n    \r\n    enum State {Disabled, Presale, Bonuses, Enabled}\r\n    State                        public state;\r\n\r\n    modifier enabledState {\r\n        require(state == State.Enabled);\r\n        _;\r\n    }\r\n\r\n    event NewState(State _state);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function Crowdsale(address _neurodao, uint _etherPrice) payable owned() {\r\n        neurodao = _neurodao;\r\n        etherPrice = _etherPrice;\r\n        totalSupply = totalTokens;\r\n        balanceOf[owner] = neurodaoTokens;\r\n        balanceOf[this] = totalSupply - balanceOf[owner];\r\n        Transfer(this, owner, balanceOf[owner]);\r\n    }\r\n\r\n    function setEtherPrice(uint _etherPrice) public {\r\n        require(presaleOwner == msg.sender || owner == msg.sender);\r\n        etherPrice = _etherPrice;\r\n    }\r\n\r\n    function startPresale(address _presaleOwner) public onlyOwner {\r\n        require(state == State.Disabled);\r\n        presaleOwner = _presaleOwner;\r\n        state = State.Presale;\r\n        NewState(state);\r\n    }\r\n    \r\n    function startBonuses() public onlyOwner {\r\n        require(state == State.Presale);\r\n        state = State.Bonuses;\r\n        NewState(state);\r\n    }\r\n    \r\n    function finishCrowdsale() public onlyOwner {\r\n        require(state == State.Bonuses);\r\n        state = State.Enabled;\r\n        NewState(state);\r\n    }\r\n\r\n    function () payable {\r\n        uint tokens;\r\n        address tokensSource;\r\n        if (state == State.Presale) {\r\n            require(balanceOf[this] > 0);\r\n            require(collectedUSD < totalLimitUSD);\r\n            uint valueWei = msg.value;\r\n            uint valueUSD = valueWei * etherPrice / 1 ether;\r\n            if (collectedUSD + valueUSD > totalLimitUSD) {\r\n                valueUSD = totalLimitUSD - collectedUSD;\r\n                valueWei = valueUSD * 1 ether / etherPrice;\r\n                require(msg.sender.call.gas(3000000).value(msg.value - valueWei)());\r\n                collectedUSD = totalLimitUSD;\r\n            } else {\r\n                collectedUSD += valueUSD;\r\n            }\r\n            uint centsForToken;\r\n            if (now <= 1506815999) {        // 30/09/2017 11:59pm (UTC)\r\n                centsForToken = 50;\r\n            } else if (now <= 1507247999) { // 05/10/2017 11:59pm (UTC)\r\n                centsForToken = 50;\r\n            } else if (now <= 1507766399) { // 11/10/2017 11:59pm (UTC)\r\n                centsForToken = 65;\r\n            } else {\r\n                centsForToken = 70;\r\n            }\r\n            tokens = valueUSD * 100 / centsForToken;\r\n            if (NeuroDAO(neurodao).balanceOf(msg.sender) >= 1000) {\r\n                collectedNDAO += tokens;\r\n            }\r\n            tokensSource = this;\r\n        } else if (state == State.Bonuses) {\r\n            require(gotBonus[msg.sender] != true);\r\n            gotBonus[msg.sender] = true;\r\n            uint freezedBalance = NeuroDAO(neurodao).freezedBalanceOf(msg.sender);\r\n            if (freezedBalance >= 1000) {\r\n                tokens = (neurodaoTokens / 10) * freezedBalance / 21000000 + (9 * neurodaoTokens / 10) * balanceOf[msg.sender] / collectedNDAO;                \r\n            }\r\n            tokensSource = owner;\r\n        }        \r\n        require(tokens > 0);\r\n        require(balanceOf[msg.sender] + tokens > balanceOf[msg.sender]);\r\n        require(balanceOf[tokensSource] >= tokens);        \r\n        if (holders[msg.sender] != true) {\r\n            holders[msg.sender] = true;\r\n            holdersIter[numberOfHolders++] = msg.sender;\r\n        }\r\n        balanceOf[msg.sender] += tokens;\r\n        balanceOf[tokensSource] -= tokens;\r\n        Transfer(tokensSource, msg.sender, tokens);\r\n    }\r\n}\r\n\r\ncontract Token is Crowdsale {\r\n    \r\n    string  public standard    = 'Token 0.1';\r\n    string  public name        = 'BREMP';\r\n    string  public symbol      = \"BREMP\";\r\n    uint8   public decimals    = 0;\r\n\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function Token(address _neurodao, uint _etherPrice)\r\n        payable Crowdsale(_neurodao, _etherPrice) {}\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public enabledState onlyPayloadSize(2 * 32) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        if (holders[_to] != true) {\r\n            holders[_to] = true;\r\n            holdersIter[numberOfHolders++] = _to;\r\n        }\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public enabledState onlyPayloadSize(3 * 32) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]); // overflow\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        if (holders[_to] != true) {\r\n            holders[_to] = true;\r\n            holdersIter[numberOfHolders++] = _to;\r\n        }\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public enabledState {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant enabledState\r\n        returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract PresaleBREMP is Token {\r\n    \r\n    function PresaleBREMP(address _neurodao, uint _etherPrice)\r\n        payable Token(_neurodao, _etherPrice) {}\r\n    \r\n    function withdraw() public {\r\n        require(presaleOwner == msg.sender || owner == msg.sender);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    function killMe() public onlyOwner {\r\n        presaleOwner.transfer(this.balance);\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numberOfHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedNDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"setEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startBonuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gotBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdersIter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"neurodao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleOwner\",\"type\":\"address\"}],\"name\":\"startPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_neurodao\",\"type\":\"address\"},{\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PresaleBREMP","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc97ebb7c5a7d97db32fb23a23fe516575c5e10a0000000000000000000000000000000000000000000000000000000000000130","Library":"","SwarmSource":"bzzr://f16c708feffef61e1d721e761434c9bac3bc22ac23f93ac7eca85bbf01d289c4"}]}