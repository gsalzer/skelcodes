{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n* TOKEN Contract\r\n* ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 value);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    }\r\n\r\n\r\n/**\r\n* @title Admin parameters\r\n* @dev Define administration parameters for this contract\r\n*/\r\ncontract admined { //This token contract is administered\r\n    address public admin; //Admin address is public\r\n    bool public lockTransfer; //Transfer Lock flag\r\n    address public allowedAddress; //an address that can override lock condition\r\n\r\n    /**\r\n    * @dev Contract constructor\r\n    * define initial administrator\r\n    */\r\n    function admined() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        Admined(admin);\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set an allowed address\r\n    * @param _to The address to give privileges.\r\n    */\r\n    function setAllowedAddress(address _to) public {\r\n        allowedAddress = _to;\r\n        AllowedSet(_to);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier transferLock() { //A modifier to lock transactions\r\n        require(lockTransfer == false || allowedAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set new admin address\r\n    * @param _newAdmin The address to transfer administration to\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        require(_newAdmin != 0);\r\n        admin = _newAdmin;\r\n        TransferAdminship(admin);\r\n    }\r\n\r\n   /**\r\n    * @dev Function to set transfer lock\r\n    * @param _set boolean flag (true | false)\r\n    */\r\n    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\r\n        lockTransfer = _set;\r\n        SetTransferLock(_set);\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event AllowedSet(address _to);\r\n    event SetTransferLock(bool _set);\r\n    event TransferAdminship(address newAdminister);\r\n    event Admined(address administer);\r\n\r\n}\r\n\r\n/**\r\n* @title Token definition\r\n* @dev Define token paramters including ERC20 ones\r\n*/\r\ncontract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances; //A mapping of all balances per address\r\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\r\n    mapping (address => bool) frozen; //A mapping of frozen accounts\r\n\r\n    /**\r\n    * @dev Get the balance of an specified address.\r\n    * @param _owner The address to be query.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 value) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) transferLock public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(frozen[msg.sender]==false);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token from an address to another specified address using allowance\r\n    * @param _from The address where token comes.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(frozen[_from]==false);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Assign allowance to an specified address to use the owner balance\r\n    * @param _spender The address to be allowed to spend.\r\n    * @param _value The amount to be allowed.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the allowance of an specified address to use another address balance.\r\n    * @param _owner The address of the owner of the tokens.\r\n    * @param _spender The address of the allowed spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Frozen account.\r\n    * @param _target The address to being frozen.\r\n    * @param _flag The status of the frozen\r\n    */\r\n    function setFrozen(address _target,bool _flag) onlyAdmin public {\r\n        frozen[_target]=_flag;\r\n        FrozenStatus(_target,_flag);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn token of an specified address.\r\n    * @param _burnedAmount amount to burn.\r\n    */\r\n    function burnToken(uint256 _burnedAmount) onlyAdmin public {\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\r\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\r\n        Burned(msg.sender, _burnedAmount);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burned(address indexed _target, uint256 _value);\r\n    event FrozenStatus(address _target,bool _flag);\r\n}\r\n\r\n/**\r\n* @title Asset\r\n* @dev Initial supply creation\r\n*/\r\ncontract Asset is ERC20Token {\r\n    string public name = 'SMARTRealty';\r\n    uint8 public decimals = 8;\r\n    string public symbol = 'RLTY';\r\n    string public version = '1'; \r\n\r\n    address DevExecutiveAdvisorTeams= 0xF9568bd772C9B517193275b3C2E0CDAd38E586bB;\r\n    address SMARTRealtyEconomy= 0x07ADB1D9399Bd1Fa4fD613D3179DFE883755Bb13;\r\n    address Marketing= 0xd35909DbeEb5255D65b1ea14602C7f00ce3872f6;\r\n    address SMARTMortgages= 0x9D2Fe4D5f1dc4FcA1f0Ea5f461C9fAA5D09b9CCE;\r\n    address Administer= 0x8Bb41848B6dD3D98b8849049b780dC3549568c89;\r\n    address Contractors= 0xC78DF195DE5717FB15FB3448D5C6893E8e7fB254;\r\n    address Legal= 0x4690678926BCf9B30985c06806d4568C0C498123;\r\n    address BountiesandGiveaways= 0x08AF803F0F90ccDBFCe046Bc113822cFf415e148;\r\n    address CharitableUse= 0x8661dFb67dE4E5569da9859f5CB4Aa676cd5F480;\r\n\r\n\r\n    function Asset() public {\r\n\r\n        totalSupply = 500000000 * (10**uint256(decimals)); //initial token creation\r\n        Transfer(0, this, totalSupply);\r\n\r\n        //20% Presale+20% ICO\r\n        balances[msg.sender] = 200000000 * (10**uint256(decimals));\r\n        Transfer(this, msg.sender, balances[msg.sender]);        \r\n\r\n        //10%\r\n        balances[DevExecutiveAdvisorTeams] = 50000000 * (10**uint256(decimals));\r\n        Transfer(this, DevExecutiveAdvisorTeams, balances[DevExecutiveAdvisorTeams]);\r\n\r\n        //10%\r\n        balances[SMARTRealtyEconomy] = 50000000 * (10**uint256(decimals));\r\n        Transfer(this, SMARTRealtyEconomy, balances[SMARTRealtyEconomy]);\r\n\r\n        //10%\r\n        balances[Marketing] = 50000000 * (10**uint256(decimals));\r\n        Transfer(this, Marketing, balances[Marketing]);\r\n\r\n        //10%\r\n        balances[SMARTMortgages] = 50000000 * (10**uint256(decimals));\r\n        Transfer(this, SMARTMortgages, balances[SMARTMortgages]);\r\n        \r\n        //5%\r\n        balances[Administer] = 25000000 * (10**uint256(decimals));\r\n        Transfer(this, Administer, balances[Administer]);\r\n\r\n        //5%\r\n        balances[Contractors] = 25000000 * (10**uint256(decimals));\r\n        Transfer(this, Contractors, balances[Contractors]);\r\n\r\n        //5%\r\n        balances[Legal] = 25000000 * (10**uint256(decimals));\r\n        Transfer(this, Legal, balances[Legal]);\r\n\r\n        //4%\r\n        balances[BountiesandGiveaways] =  20000000 * (10**uint256(decimals));\r\n        Transfer(this, BountiesandGiveaways, balances[BountiesandGiveaways]);\r\n\r\n        //1%\r\n        balances[CharitableUse] = 5000000  * (10**uint256(decimals));\r\n        Transfer(this, CharitableUse, balances[CharitableUse]);\r\n\r\n    }\r\n    \r\n    /**\r\n    *@dev Function to handle callback calls\r\n    */\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"FrozenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"SetTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"Admined\",\"type\":\"event\"}]","ContractName":"Asset","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2996612ae36b1b7a68af75eaca323d1b1a8a26649eaee16ad406d84b5cef84d4"}]}