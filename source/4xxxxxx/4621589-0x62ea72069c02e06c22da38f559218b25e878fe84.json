{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\t/**\r\n\t\t* @title SafeMath\r\n\t\t* @dev Math operations with safety checks that throw on error\r\n\t*/\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }}\r\n\t/**\r\n\t\t* @title Ownable\r\n\t\t* @dev The Ownable contract has an owner address, and provides basic authorization control \r\n\t\t* functions, this simplifies the implementation of \"user permissions\". \r\n\t*/\r\ncontract Ownable {\r\n  address public owner;\r\n\t/** \r\n\t\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t\t* account.\r\n\t*/\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\t/**\r\n\t\t* @dev Throws if called by any account other than the owner. \r\n\t*/\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\t/**\r\n\t\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n        * @param newOwner The address to transfer ownership to. \r\n\t*/\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }  }\r\n}\r\n\t/**\r\n\t\t* @title ERC20Basic\r\n\t\t* @dev Simpler version of ERC20 interface\r\n\t\t* @dev see https://github.com/ethereum/EIPs/issues/179\r\n\t*/\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\t/**\r\n\t\t* @title Basic token\r\n\t\t* @dev Basic version of StandardToken, with no allowances. \r\n\t*/\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n\t/**\r\n\t\t* @dev transfer token for a specified address\r\n\t\t* @param _to The address to transfer to.\r\n\t\t* @param _value The amount to be transferred.\r\n\t*/\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\t/**\r\n\t\t* @dev Gets the balance of the specified address.\r\n\t\t* @param _owner The address to query the the balance of. \r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\t/**\r\n\t\t* @title ERC20 interface\r\n\t\t* @dev see https://github.com/ethereum/EIPs/issues/20\r\n\t*/\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\t/**\r\n\t\t* @title Standard ERC20 token\r\n\t\t*\r\n\t\t* @dev Implementation of the basic standard token.\r\n\t\t* @dev https://github.com/ethereum/EIPs/issues/20\r\n\t\t* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\t*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\t/**\r\n\t\t* @dev Transfer tokens from one address to another\r\n        * @param _from address The address which you want to send tokens from\r\n\t\t* @param _to address The address which you want to transfer to\r\n\t\t* @param _value uint256 the amout of tokens to be transfered\r\n\t*/\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\t/**\r\n\t\t* @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t\t* @param _spender The address which will spend the funds.\r\n\t\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\t/**\r\n\t\t* To change the approve amount you first have to reduce the addresses`\r\n\t\t* allowance to zero by calling `approve(_spender, 0)` if it is not\r\n\t\t* already 0 to mitigate the race condition described here:\r\n\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t*/\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\t/**\r\n\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t\t* @param _owner address The address which owns the funds.\r\n\t\t* @param _spender address The address which will spend the funds.\r\n\t\t* @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n\t*/\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\ncontract BIONEUM is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n    // Token Info.\r\n    string  public constant name = \"BIONEUM\";\r\n    string  public constant symbol = \"BIO\";\r\n    uint256 public constant decimals = 8;\r\n    uint256 public constant totalSupply = decVal(50000000);\r\n\t\r\n    // Address where funds are collected.\r\n    address public multisig = 0xFC8b6add05Dd6b5fd91F6559EFF84A20201fD86c;\r\n    // Developer tokens.\r\n\taddress public developers = 0x8D9acc27005419E0a260B44d060F7427Cd9739B2;\r\n    // Founder tokens.\r\n\taddress public founders = 0xB679919c63799c39d074EEad650889B24C06fdC6;\r\n    // Bounty tokens.\r\n\taddress public bounty = 0xCF2F450FB7d265fF82D0c2f1737d9f0258ae40A3;\r\n\t// Address of this contract/token\r\n    address public constant tokenAddress = this;\r\n    // Sale period.\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n    // Amount of raised money in wei.\r\n    uint256 public weiRaised;\r\n    // Amount of raised money in ether.\r\n    uint256 public etherRaised;\r\n    // Number of tokens sold.\r\n\tuint256 public tokensSold;\r\n    // Modifiers.\r\n    modifier uninitialized() {\r\n        require(multisig == 0x0);\r\n        _;\r\n    }    \r\n\tfunction BIONEUM() {\r\n        startDate = now.add(5 hours);\r\n        endDate = startDate.add(30 days);\r\n\t\t\r\n        balances[founders] \t= decVal(5000000);\r\n        Transfer(0x0, founders\t, balances[founders]);\r\n\t\t\r\n        balances[bounty] \t= decVal(1000000);\r\n        Transfer(0x0, bounty\t, balances[bounty]);\r\n\t\t\r\n        balances[developers] = decVal(4000000);\r\n        Transfer(0x0, developers\t, balances[developers]);\r\n\t\t\r\n\t\tbalances[this] = totalSupply.sub(balances[developers].add(balances[founders]).add(balances[bounty]));\r\n        Transfer(0x0, this\t\t, balances[this]);\r\n    }\r\n    function supply() internal returns (uint256) {\r\n        return balances[this];\r\n    }\r\n    function getRateAt(uint256 at) constant returns (uint256) {\r\n        if (at < startDate) {\r\n            return 0;\r\n        } else if (at < startDate.add(7 days)) {\r\n            return decVal(130);\r\n        } else if (at < startDate.add(14 days)) {\r\n            return decVal(115);\r\n        } else if (at < startDate.add(21 days)) {\r\n            return decVal(105);\r\n        } else if (at < startDate.add(28 days) || at <= endDate) {\r\n            return decVal(100);\r\n        } else {\r\n            return 0;\r\n        }    \r\n\t}\r\n\tfunction decVal(uint256 amount) internal returns(uint256){\r\n\t\treturn amount * 10 ** uint256(decimals);\r\n\t}\r\n    // Fallback function can be used to buy tokens\r\n    function () payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n    function buyTokens(address sender, uint256 value) internal {\r\n        require(saleActive());\r\n        require(value >= 0.01 ether);\r\n\r\n        uint256 weiAmount = value;\r\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\r\n\r\n        // Calculate token amount to be purchased\r\n        uint256 actualRate = getRateAt(now);\r\n        uint256 amount = weiAmount.mul(actualRate).div(1 ether);\r\n\r\n        // We have enough token to sell\r\n        require(supply() >= amount);\r\n\r\n        // Transfer tokens\r\n        balances[this] = balances[this].sub(amount);\r\n        balances[sender] = balances[sender].add(amount);\r\n\t\tTransfer(0x0, sender, amount);\r\n        // Update state.\r\n        weiRaised = updatedWeiRaised;\r\n\t\tetherRaised = weiRaised.div(1 ether);\r\n\t\ttokensSold = tokensSold.add(amount);\r\n\t\t\r\n        // Forward the fund to fund collection wallet.\r\n        multisig.transfer(msg.value);\r\n    }\r\n    function finalize() onlyOwner {\r\n        require(!saleActive());\r\n        // Transfer the rest of token to Bioneum\r\n        balances[owner] = balances[owner].add(balances[this]);\r\n\t\tTransfer(0x0, owner, balances[this]);\r\n        balances[this] = 0;\r\n    }\r\n    function saleActive() public constant returns (bool) {\r\n        return (now >= startDate && now < endDate && supply() > 0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"getRateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BIONEUM","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a20108421ac978d6d3600c358ffab0e46e036aa38b9a4e880434107a8e7a08d8"}]}