{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ERC20\r\n{\r\n    function totalSupply() public constant returns (uint totalsupply);\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract AVL is ERC20\r\n{\r\n    uint public incirculation;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    \r\n    mapping (address => uint) goo;\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (balances[msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n          \r\n            refund(gas+1158);\r\n            \r\n            return true;\r\n        } \r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success)\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\r\n        {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n          \r\n            refund(gas);\r\n            \r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n   \r\n    function balanceOf(address _owner) public constant returns (uint balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint totalsupply)\r\n    {\r\n        return incirculation;\r\n    }\r\n    \r\n    function refund(uint gas) internal\r\n    {\r\n        uint amount = (gas-msg.gas+36120) * tx.gasprice;\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Avalanche is AVL \r\n{\r\n    string public constant name = \"Avalanche\";\r\n    uint8 public constant decimals = 4;\r\n    string public constant symbol = \"AVL\";\r\n    string public constant version = \"1.0\";\r\n\r\n    event tokensCreated(uint total, uint price);\r\n    event etherSent(uint total);\r\n    event etherLeaked(uint total);\r\n    \r\n    uint public constant pieceprice = 1 ether / 256;\r\n    uint public constant oneavl = 10000;\r\n    uint public constant totalavl = 1000000 * oneavl;\r\n    \r\n    mapping (address => bytes1) addresslevels;\r\n\r\n    mapping (address => uint) lastleak;\r\n    \r\n    function Avalanche() public\r\n    {\r\n        incirculation = 10000 * oneavl;\r\n        balances[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        uint gas = msg.gas;\r\n\r\n        uint generateprice = getPrice(getAddressLevel());\r\n        uint generateamount = msg.value * oneavl / generateprice;\r\n        \r\n        if (incirculation + generateamount > totalavl)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        incirculation += generateamount;\r\n        balances[msg.sender] += generateamount;\r\n        goo[msg.sender] += msg.value;\r\n       \r\n        refund(gas); \r\n        \r\n        tokensCreated(generateamount, msg.value);\r\n    }\r\n   \r\n    function sendEther(address x) public payable \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        x.transfer(msg.value);\r\n        \r\n        refund(gas+1715);\r\n        \r\n        etherSent(msg.value);\r\n    }\r\n   \r\n    function leakEther() public \r\n    {\r\n        uint gas = msg.gas;\r\n        \r\n        if (now-lastleak[msg.sender] < 1 days)\r\n        { \r\n            refund(gas);\r\n            \r\n            etherLeaked(0);\r\n            \r\n            return;\r\n        }\r\n        \r\n        uint amount = goo[msg.sender] / uint(getAddressLevel());\r\n        \r\n        if (goo[msg.sender] < amount && goo[msg.sender] > 0)\r\n        {\r\n            amount = goo[msg.sender];\r\n        }\r\n        \r\n        if (goo[msg.sender] >= amount)\r\n        {\r\n            lastleak[msg.sender] = now;\r\n            \r\n            goo[msg.sender] -= amount;\r\n            \r\n            msg.sender.transfer(amount);\r\n            \r\n            refund(gas+359);\r\n            \r\n            etherLeaked(amount);\r\n        }\r\n    }\r\n    \r\n    function gooBalanceOf(address x) public constant returns (uint) \r\n    { \r\n        return goo[x]; \r\n    }\r\n    \r\n    function getPrice(bytes1 addrLevel) public pure returns (uint)\r\n    {\r\n        return pieceprice * (uint(addrLevel) + 1);\r\n    }\r\n   \r\n    function getAddressLevel() internal returns (bytes1 res)\r\n    {\r\n        if (addresslevels[msg.sender] > 0) \r\n        {\r\n            return addresslevels[msg.sender];\r\n        }\r\n      \r\n        bytes1 highest = 0;\r\n        \r\n        for (uint i = 0; i < 20; i++)\r\n        {\r\n            bytes1 c = bytes1(uint8(uint(msg.sender) / (2 ** (8 * (19 - i)))));\r\n            \r\n            if (bytes1(c) > highest) highest = c;\r\n        }\r\n      \r\n        addresslevels[msg.sender] = highest;\r\n        \r\n        return highest;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pieceprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrLevel\",\"type\":\"bytes1\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalavl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"sendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incirculation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"gooBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"leakEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneavl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"tokensCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"etherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"etherLeaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Avalanche","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9fcdbcfcfb9c050e5bb5af4d5480bcf2c890d4621046ab686e1f03f6857c9527"}]}