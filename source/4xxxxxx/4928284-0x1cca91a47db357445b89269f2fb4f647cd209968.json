{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\t\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) public constant returns (bool);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract Distribution is Owned {\r\n    using SafeMath for uint256;\r\n\r\n  Token token;\r\n\r\n  event TransferredToken(address indexed to, uint256 value);\r\n  event FailedTransfer(address indexed to, uint256 value);\r\n\r\n  modifier whenDropIsActive() {\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\n\r\n  function Distribution () public {\r\n      address _tokenAddr = 0xB15EF419bA0Dd1f5748c7c60e17Fe88e6e794950; //here pass address of your token\r\n      token = Token(_tokenAddr);\r\n  }\r\n\r\n  function isActive() public constant returns (bool) {\r\n    return (\r\n        tokensAvailable() > 0 // Tokens must be available to send\r\n    );\r\n  }\r\n  //below function can be used when you want to send every recipeint with different number of tokens\r\n  function sendTokens(address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\r\n    uint256 i = 0;\r\n    while (i < dests.length) {\r\n        uint256 toSend = values[i] * 10**8;\r\n        sendInternally(dests[i] , toSend, values[i]);\r\n        i++;\r\n    }\r\n  }\r\n\r\n  // this function can be used when you want to send same number of tokens to all the recipients\r\n  function sendTokensSingleValue(address[] dests, uint256 value) whenDropIsActive onlyOwner external {\r\n    uint256 i = 0;\r\n    uint256 toSend = value * 10**8;\r\n    while (i < dests.length) {\r\n        sendInternally(dests[i] , toSend, value);\r\n        i++;\r\n    }\r\n  }  \r\n\r\n  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\r\n    if(recipient == address(0)) return;\r\n\r\n    if(tokensAvailable() >= tokensToSend) {\r\n      token.transfer(recipient, tokensToSend);\r\n      TransferredToken(recipient, valueToPresent);\r\n    } else {\r\n      FailedTransfer(recipient, valueToPresent); \r\n    }\r\n  }   \r\n\r\n\r\n  function tokensAvailable() public constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function destroy() onlyOwner public {\r\n    uint256 balance = tokensAvailable();\r\n    require (balance > 0);\r\n    token.transfer(owner, balance);\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokensSingleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"}]","ContractName":"Distribution","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6dea397690abc7c6d31fc89b9343078270f1c1f1c000de2c2956149f335ec029"}]}