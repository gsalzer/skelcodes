{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ERC20 token interface is implemented only partially.\r\n// Token transfer is prohibited due to spec (see PRESALE-SPEC.md),\r\n// hence some functions are left undefined:\r\n//  - transfer, transferFrom,\r\n//  - approve, allowance.\r\n\r\ncontract MaptPresale2Token {\r\n    // MAPT TOKEN PRICE:\r\n    uint256 constant MAPT_IN_ETH = 100; // 1 MAPT = 0.01 ETH\r\n\r\n    uint constant MIN_TRANSACTION_AMOUNT_ETH = 0 ether;\r\n\r\n    uint public PRESALE_START_DATE = 1506834000; //Sun Oct  1 12:00:00 +07 2017\r\n    uint public PRESALE_END_DATE = 1508198401; //17 oct 00:00:01 +00\r\n\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    function MaptPresale2Token(address _tokenManager, address _escrow) {\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n        PRESALE_START_DATE = now;\r\n    }\r\n\r\n    /*/\r\n     *  Constants\r\n    /*/\r\n    string public constant name = \"MAT Presale2 Token\";\r\n    string public constant symbol = \"MAPT2\";\r\n    uint   public constant decimals = 18;\r\n\r\n    // Cup is 2M tokens\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 2700000 * 1 ether / 1 wei;\r\n\r\n    /*/\r\n     *  Token state\r\n    /*/\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager;\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager;\r\n\r\n    mapping (address => uint256) private balanceTable;\r\n\r\n    /*/\r\n     * Modifiers\r\n    /*/\r\n    modifier onlyTokenManager()     { if(msg.sender != tokenManager) throw; _; }\r\n    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) throw; _; }\r\n\r\n    /*/\r\n     *  Events\r\n    /*/\r\n    event LogBuy(address indexed owner, uint etherWeiIncoming, uint tokensSold);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    event LogEscrowWei(uint balanceWei);\r\n    event LogEscrowWeiReq(uint balanceWei);\r\n    event LogEscrowEth(uint balanceEth);\r\n    event LogEscrowEthReq(uint balanceEth);\r\n    event LogStartDate(uint newdate, uint oldDate);\r\n\r\n\r\n    /**\r\n     * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n     *\r\n     * @param valueWei - What is the value of the transaction send in as wei\r\n     * @return Amount of tokens the investor receives\r\n     */\r\n    function calculatePrice(uint valueWei) private constant returns (uint tokenAmount) {\r\n      uint res = valueWei * MAPT_IN_ETH;\r\n      return res;\r\n    }\r\n\r\n    /*/\r\n     *  Public functions\r\n    /*/\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner)\r\n        public\r\n        onlyCrowdsaleManager\r\n        returns (uint)\r\n    {\r\n        // Available only during migration phase\r\n        if(currentPhase != Phase.Migrating) return 1;\r\n\r\n        uint tokens = balanceTable[_owner];\r\n        if(tokens == 0) return 2;\r\n        totalSupply -= tokens;\r\n        balanceTable[_owner] = 0;\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if(totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balanceTable[_owner];\r\n    }\r\n\r\n    /*/\r\n     *  Administrative functions\r\n    /*/\r\n\r\n    //takes uint\r\n    function setPresalePhaseUInt(uint phase)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n      require( uint(Phase.Migrated) >= phase && phase >= 0 );\r\n      setPresalePhase(Phase(phase));\r\n    }\r\n\r\n    // takes enum\r\n    function setPresalePhase(Phase _nextPhase)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n      _setPresalePhase(_nextPhase);\r\n    }\r\n\r\n    function _setPresalePhase(Phase _nextPhase)\r\n        private\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n                // switch to migration phase only if crowdsale manager is set\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n                // switch to migrated only if everyting is migrated\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        if(!canSwitchPhase) throw;\r\n        currentPhase = _nextPhase;\r\n        LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n    function setCrowdsaleManager(address _mgr)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        if(currentPhase == Phase.Migrating) throw;\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    /** buy tokens for Ehter */\r\n    function buyTokens(address _buyer)\r\n        public\r\n        payable\r\n    {\r\n        require(totalSupply < TOKEN_SUPPLY_LIMIT);\r\n        uint valueWei = msg.value;\r\n\r\n        //conditions\r\n        require(currentPhase == Phase.Running);\r\n        require(valueWei >= MIN_TRANSACTION_AMOUNT_ETH);\r\n        require(now >= PRESALE_START_DATE);\r\n        require(now <= PRESALE_END_DATE);\r\n\r\n        uint newTokens = calculatePrice(valueWei);\r\n\r\n        require(newTokens > 0);\r\n        require(totalSupply + newTokens <= TOKEN_SUPPLY_LIMIT);\r\n\r\n        totalSupply += newTokens;\r\n        balanceTable[_buyer] += newTokens;\r\n\r\n        LogBuy(_buyer, valueWei, newTokens);\r\n    }\r\n\r\n    /**\r\n     * return values: 0 - OK, 1 - balance is zero, 2 - cannot send to escrow\r\n     */\r\n    function withdrawWei(uint balWei)\r\n        public\r\n        onlyTokenManager\r\n        returns (uint)\r\n    {\r\n        // Available at any phase.\r\n        LogEscrowWeiReq(balWei);\r\n        if(this.balance >= balWei) {\r\n            escrow.transfer(balWei);\r\n            LogEscrowWei(balWei);\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * return values: 0 - OK, 1 - balance is zero, 2 - cannot send to escrow\r\n     */\r\n    function withdrawEther(uint sumEther)\r\n        public\r\n        onlyTokenManager\r\n        returns (uint)\r\n    {\r\n        // Available at any phase.\r\n        LogEscrowEthReq(sumEther);\r\n        uint sumWei = sumEther * 1 ether / 1 wei;\r\n        if(this.balance >= sumWei) {\r\n            escrow.transfer(sumWei);\r\n            LogEscrowWei(sumWei);\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balWei\",\"type\":\"uint256\"}],\"name\":\"withdrawWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sumEther\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPresalePhaseUInt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherWeiIncoming\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"LogPhaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceWei\",\"type\":\"uint256\"}],\"name\":\"LogEscrowWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceWei\",\"type\":\"uint256\"}],\"name\":\"LogEscrowWeiReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceEth\",\"type\":\"uint256\"}],\"name\":\"LogEscrowEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceEth\",\"type\":\"uint256\"}],\"name\":\"LogEscrowEthReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newdate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldDate\",\"type\":\"uint256\"}],\"name\":\"LogStartDate\",\"type\":\"event\"}]","ContractName":"MaptPresale2Token","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fe593bbf1cd25976df21a979b33dd481173615a80000000000000000000000001462c2d895fb7c63e1b271bcb3cc269ca14153df","Library":"","SwarmSource":"bzzr://69ed4bbf0180d2ff1b2f2c9c54111356e844bd418b1356b3a1fcdc20dfc84924"}]}