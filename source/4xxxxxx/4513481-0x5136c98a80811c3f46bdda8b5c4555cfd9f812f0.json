{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// IDH indaHash token public sale contract\r\n//\r\n// For details, please visit: https://indahash.com/ico\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath3\r\n//\r\n// Adapted from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// (no need to implement division)\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath3 {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint c) {\r\n    c = a * b;\r\n    assert( a == 0 || c / a == b );\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns (uint) {\r\n    assert( b <= a );\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns (uint c) {\r\n    c = a + b;\r\n    assert( c >= a );\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  // Events ---------------------------\r\n\r\n  event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  // Modifier -------------------------\r\n\r\n  modifier onlyOwner {\r\n    require( msg.sender == owner );\r\n    _;\r\n  }\r\n\r\n  // Functions ------------------------\r\n\r\n  function Owned() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) onlyOwner {\r\n    require( _newOwner != owner );\r\n    require( _newOwner != address(0x0) );\r\n    OwnershipTransferProposed(owner, _newOwner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n  // Events ---------------------------\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  // Functions ------------------------\r\n\r\n  function totalSupply() constant returns (uint);\r\n  function balanceOf(address _owner) constant returns (uint balance);\r\n  function transfer(address _to, uint _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n  function approve(address _spender, uint _value) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n  \r\n  using SafeMath3 for uint;\r\n\r\n  uint public tokensIssuedTotal = 0;\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping (address => uint)) allowed;\r\n\r\n  // Functions ------------------------\r\n\r\n  /* Total token supply */\r\n\r\n  function totalSupply() constant returns (uint) {\r\n    return tokensIssuedTotal;\r\n  }\r\n\r\n  /* Get the account balance for an address */\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /* Transfer the balance from owner's account to another account */\r\n\r\n  function transfer(address _to, uint _amount) returns (bool success) {\r\n    // amount sent cannot exceed balance\r\n    require( balances[msg.sender] >= _amount );\r\n\r\n    // update balances\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to]        = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Allow _spender to withdraw from your account up to _amount */\r\n\r\n  function approve(address _spender, uint _amount) returns (bool success) {\r\n    // approval amount cannot exceed the balance\r\n    require ( balances[msg.sender] >= _amount );\r\n      \r\n    // update allowed amount\r\n    allowed[msg.sender][_spender] = _amount;\r\n    \r\n    // log event\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Spender of tokens transfers tokens from the owner's balance */\r\n  /* Must be pre-approved by owner */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\r\n    // balance checks\r\n    require( balances[_from] >= _amount );\r\n    require( allowed[_from][msg.sender] >= _amount );\r\n\r\n    // update balances and allowed amount\r\n    balances[_from]            = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to]              = balances[_to].add(_amount);\r\n\r\n    // log event\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /* Returns the amount of tokens approved by the owner */\r\n  /* that can be transferred by spender */\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// IDH public token sale\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract IndaHashToken is ERC20Token {\r\n\r\n  /* Utility variable */\r\n  \r\n  uint constant E6 = 10**6;\r\n  \r\n  /* Basic token data */\r\n\r\n  string public constant name     = \"indaHash Coin\";\r\n  string public constant symbol   = \"IDH\";\r\n  uint8  public constant decimals = 6;\r\n\r\n  /* Wallet addresses - initially set to owner at deployment */\r\n  \r\n  address public wallet;\r\n  address public adminWallet;\r\n\r\n  /* ICO dates */\r\n\r\n  uint public constant DATE_PRESALE_START = 1510153200; // 08-Nov-2017 15:00 UTC\r\n  uint public constant DATE_PRESALE_END   = 1510758000; // 15-Nov-2017 15:00 UTC\r\n\r\n  uint public constant DATE_ICO_START = 1511967600; // 29-Nov-2017 15:00 UTC\r\n  uint public constant DATE_ICO_END   = 1513782000; // 20-Dec-2017 15:00 UTC\r\n\r\n  /* ICO tokens per ETH */\r\n  \r\n  uint public tokensPerEth = 3200 * E6; // rate during last ICO week\r\n\r\n  uint public constant BONUS_PRESALE      = 40;\r\n  uint public constant BONUS_ICO_WEEK_ONE = 20;\r\n  uint public constant BONUS_ICO_WEEK_TWO = 10;\r\n\r\n  /* Other ICO parameters */  \r\n  \r\n  uint public constant TOKEN_SUPPLY_TOTAL = 400 * E6 * E6; // 400 mm tokens\r\n  uint public constant TOKEN_SUPPLY_ICO   = 320 * E6 * E6; // 320 mm tokens\r\n  uint public constant TOKEN_SUPPLY_MKT   =  80 * E6 * E6; //  80 mm tokens\r\n\r\n  uint public constant PRESALE_ETH_CAP =  15000 ether;\r\n\r\n  uint public constant MIN_FUNDING_GOAL =  40 * E6 * E6; // 40 mm tokens\r\n  \r\n  uint public constant MIN_CONTRIBUTION = 1 ether / 2; // 0.5 Ether\r\n  uint public constant MAX_CONTRIBUTION = 300 ether;\r\n\r\n  uint public constant COOLDOWN_PERIOD =  2 days;\r\n  uint public constant CLAWBACK_PERIOD = 90 days;\r\n\r\n  /* Crowdsale variables */\r\n\r\n  uint public icoEtherReceived = 0; // Ether actually received by the contract\r\n\r\n  uint public tokensIssuedIco   = 0;\r\n  uint public tokensIssuedMkt   = 0;\r\n  \r\n  uint public tokensClaimedAirdrop = 0;\r\n  \r\n  /* Keep track of Ether contributed and tokens received during Crowdsale */\r\n  \r\n  mapping(address => uint) public icoEtherContributed;\r\n  mapping(address => uint) public icoTokensReceived;\r\n\r\n  /* Keep track of participants who \r\n  /* - have received their airdropped tokens after a successful ICO */\r\n  /* - or have reclaimed their contributions in case of failed Crowdsale */\r\n  /* - are locked */\r\n  \r\n  mapping(address => bool) public airdropClaimed;\r\n  mapping(address => bool) public refundClaimed;\r\n  mapping(address => bool) public locked;\r\n\r\n  // Events ---------------------------\r\n  \r\n  event WalletUpdated(address _newWallet);\r\n  event AdminWalletUpdated(address _newAdminWallet);\r\n  event TokensPerEthUpdated(uint _tokensPerEth);\r\n  event TokensMinted(address indexed _owner, uint _tokens, uint _balance);\r\n  event TokensIssued(address indexed _owner, uint _tokens, uint _balance, uint _etherContributed);\r\n  event Refund(address indexed _owner, uint _amount, uint _tokens);\r\n  event Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n  event LockRemoved(address indexed _participant);\r\n\r\n  // Basic Functions ------------------\r\n\r\n  /* Initialize (owner is set to msg.sender by Owned.Owned() */\r\n\r\n  function IndaHashToken() {\r\n    require( TOKEN_SUPPLY_ICO + TOKEN_SUPPLY_MKT == TOKEN_SUPPLY_TOTAL );\r\n    wallet = owner;\r\n    adminWallet = owner;\r\n  }\r\n\r\n  /* Fallback */\r\n  \r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n  \r\n  // Information functions ------------\r\n  \r\n  /* What time is it? */\r\n  \r\n  function atNow() constant returns (uint) {\r\n    return now;\r\n  }\r\n  \r\n  /* Has the minimum threshold been reached? */\r\n  \r\n  function icoThresholdReached() constant returns (bool thresholdReached) {\r\n     if (tokensIssuedIco < MIN_FUNDING_GOAL) return false;\r\n     return true;\r\n  }  \r\n  \r\n  /* Are tokens transferable? */\r\n\r\n  function isTransferable() constant returns (bool transferable) {\r\n     if ( !icoThresholdReached() ) return false;\r\n     if ( atNow() < DATE_ICO_END + COOLDOWN_PERIOD ) return false;\r\n     return true;\r\n  }\r\n  \r\n  // Lock functions -------------------\r\n\r\n  /* Manage locked */\r\n\r\n  function removeLock(address _participant) {\r\n    require( msg.sender == adminWallet || msg.sender == owner );\r\n    locked[_participant] = false;\r\n    LockRemoved(_participant);\r\n  }\r\n\r\n  function removeLockMultiple(address[] _participants) {\r\n    require( msg.sender == adminWallet || msg.sender == owner );\r\n    for (uint i = 0; i < _participants.length; i++) {\r\n      locked[_participants[i]] = false;\r\n      LockRemoved(_participants[i]);\r\n    }\r\n  }\r\n\r\n  // Owner Functions ------------------\r\n  \r\n  /* Change the crowdsale wallet address */\r\n\r\n  function setWallet(address _wallet) onlyOwner {\r\n    require( _wallet != address(0x0) );\r\n    wallet = _wallet;\r\n    WalletUpdated(wallet);\r\n  }\r\n\r\n  /* Change the admin wallet address */\r\n\r\n  function setAdminWallet(address _wallet) onlyOwner {\r\n    require( _wallet != address(0x0) );\r\n    adminWallet = _wallet;\r\n    AdminWalletUpdated(adminWallet);\r\n  }\r\n\r\n  /* Change tokensPerEth before ICO start */\r\n  \r\n  function updateTokensPerEth(uint _tokensPerEth) onlyOwner {\r\n    require( atNow() < DATE_PRESALE_START );\r\n    tokensPerEth = _tokensPerEth;\r\n    TokensPerEthUpdated(_tokensPerEth);\r\n  }\r\n\r\n  /* Minting of marketing tokens by owner */\r\n\r\n  function mintMarketing(address _participant, uint _tokens) onlyOwner {\r\n    // check amount\r\n    require( _tokens <= TOKEN_SUPPLY_MKT.sub(tokensIssuedMkt) );\r\n    \r\n    // update balances\r\n    balances[_participant] = balances[_participant].add(_tokens);\r\n    tokensIssuedMkt        = tokensIssuedMkt.add(_tokens);\r\n    tokensIssuedTotal      = tokensIssuedTotal.add(_tokens);\r\n    \r\n    // locked\r\n    locked[_participant] = true;\r\n    \r\n    // log the miniting\r\n    Transfer(0x0, _participant, _tokens);\r\n    TokensMinted(_participant, _tokens, balances[_participant]);\r\n  }\r\n\r\n  /* Owner clawback of remaining funds after clawback period */\r\n  /* (for use in case of a failed Crwodsale) */\r\n  \r\n  function ownerClawback() external onlyOwner {\r\n    require( atNow() > DATE_ICO_END + CLAWBACK_PERIOD );\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  /* Transfer out any accidentally sent ERC20 tokens */\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success) {\r\n      return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n  }\r\n\r\n  // Private functions ----------------\r\n\r\n  /* Accept ETH during crowdsale (called by default function) */\r\n\r\n  function buyTokens() private {\r\n    uint ts = atNow();\r\n    bool isPresale = false;\r\n    bool isIco = false;\r\n    uint tokens = 0;\r\n    \r\n    // minimum contribution\r\n    require( msg.value >= MIN_CONTRIBUTION );\r\n    \r\n    // one address transfer hard cap\r\n    require( icoEtherContributed[msg.sender].add(msg.value) <= MAX_CONTRIBUTION );\r\n\r\n    // check dates for presale or ICO\r\n    if (ts > DATE_PRESALE_START && ts < DATE_PRESALE_END) isPresale = true;  \r\n    if (ts > DATE_ICO_START && ts < DATE_ICO_END) isIco = true;  \r\n    require( isPresale || isIco );\r\n\r\n    // presale cap in Ether\r\n    if (isPresale) require( icoEtherReceived.add(msg.value) <= PRESALE_ETH_CAP );\r\n    \r\n    // get baseline number of tokens\r\n    tokens = tokensPerEth.mul(msg.value) / 1 ether;\r\n    \r\n    // apply bonuses (none for last week)\r\n    if (isPresale) {\r\n      tokens = tokens.mul(100 + BONUS_PRESALE) / 100;\r\n    } else if (ts < DATE_ICO_START + 7 days) {\r\n      // first week ico bonus\r\n      tokens = tokens.mul(100 + BONUS_ICO_WEEK_ONE) / 100;\r\n    } else if (ts < DATE_ICO_START + 14 days) {\r\n      // second week ico bonus\r\n      tokens = tokens.mul(100 + BONUS_ICO_WEEK_TWO) / 100;\r\n    }\r\n    \r\n    // ICO token volume cap\r\n    require( tokensIssuedIco.add(tokens) <= TOKEN_SUPPLY_ICO );\r\n\r\n    // register tokens\r\n    balances[msg.sender]          = balances[msg.sender].add(tokens);\r\n    icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(tokens);\r\n    tokensIssuedIco               = tokensIssuedIco.add(tokens);\r\n    tokensIssuedTotal             = tokensIssuedTotal.add(tokens);\r\n    \r\n    // register Ether\r\n    icoEtherReceived                = icoEtherReceived.add(msg.value);\r\n    icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value);\r\n    \r\n    // locked\r\n    locked[msg.sender] = true;\r\n    \r\n    // log token issuance\r\n    Transfer(0x0, msg.sender, tokens);\r\n    TokensIssued(msg.sender, tokens, balances[msg.sender], msg.value);\r\n\r\n    // transfer Ether if we're over the threshold\r\n    if ( icoThresholdReached() ) wallet.transfer(this.balance);\r\n  }\r\n  \r\n  // ERC20 functions ------------------\r\n\r\n  /* Override \"transfer\" (ERC20) */\r\n\r\n  function transfer(address _to, uint _amount) returns (bool success) {\r\n    require( isTransferable() );\r\n    require( locked[msg.sender] == false );\r\n    require( locked[_to] == false );\r\n    return super.transfer(_to, _amount);\r\n  }\r\n  \r\n  /* Override \"transferFrom\" (ERC20) */\r\n\r\n  function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\r\n    require( isTransferable() );\r\n    require( locked[_from] == false );\r\n    require( locked[_to] == false );\r\n    return super.transferFrom(_from, _to, _amount);\r\n  }\r\n\r\n  // External functions ---------------\r\n\r\n  /* Reclaiming of funds by contributors in case of a failed crowdsale */\r\n  /* (it will fail if account is empty after ownerClawback) */\r\n\r\n  /* While there could not have been any token transfers yet, a contributor */\r\n  /* may have received minted tokens, so the token balance after a refund */ \r\n  /* may still be positive */\r\n  \r\n  function reclaimFunds() external {\r\n    uint tokens; // tokens to destroy\r\n    uint amount; // refund amount\r\n    \r\n    // ico is finished and was not successful\r\n    require( atNow() > DATE_ICO_END && !icoThresholdReached() );\r\n    \r\n    // check if refund has already been claimed\r\n    require( !refundClaimed[msg.sender] );\r\n    \r\n    // check if there is anything to refund\r\n    require( icoEtherContributed[msg.sender] > 0 );\r\n    \r\n    // update variables affected by refund\r\n    tokens = icoTokensReceived[msg.sender];\r\n    amount = icoEtherContributed[msg.sender];\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    tokensIssuedTotal    = tokensIssuedTotal.sub(tokens);\r\n    \r\n    refundClaimed[msg.sender] = true;\r\n    \r\n    // transfer out refund\r\n    msg.sender.transfer(amount);\r\n    \r\n    // log\r\n    Transfer(msg.sender, 0x0, tokens);\r\n    Refund(msg.sender, amount, tokens);\r\n  }\r\n\r\n  /* Claiming of \"airdropped\" tokens in case of successful crowdsale */\r\n  /* Can be done by token holder, or by adminWallet */ \r\n\r\n  function claimAirdrop() external {\r\n    doAirdrop(msg.sender);\r\n  }\r\n\r\n  function adminClaimAirdrop(address _participant) external {\r\n    require( msg.sender == adminWallet );\r\n    doAirdrop(_participant);\r\n  }\r\n\r\n  function adminClaimAirdropMultiple(address[] _addresses) external {\r\n    require( msg.sender == adminWallet );\r\n    for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i]);\r\n  }  \r\n  \r\n  function doAirdrop(address _participant) internal {\r\n    uint airdrop = computeAirdrop(_participant);\r\n\r\n    require( airdrop > 0 );\r\n\r\n    // update balances and token issue volume\r\n    airdropClaimed[_participant] = true;\r\n    balances[_participant] = balances[_participant].add(airdrop);\r\n    tokensIssuedTotal      = tokensIssuedTotal.add(airdrop);\r\n    tokensClaimedAirdrop   = tokensClaimedAirdrop.add(airdrop);\r\n    \r\n    // log\r\n    Airdrop(_participant, airdrop, balances[_participant]);\r\n    Transfer(0x0, _participant, airdrop);\r\n  }\r\n\r\n  /* Function to estimate airdrop amount. For some accounts, the value of */\r\n  /* tokens received by calling claimAirdrop() may be less than gas costs */\r\n  \r\n  /* If an account has tokens from the ico, the amount after the airdrop */\r\n  /* will be newBalance = tokens * TOKEN_SUPPLY_ICO / tokensIssuedIco */\r\n      \r\n  function computeAirdrop(address _participant) constant returns (uint airdrop) {\r\n    // return 0 if it's too early or ico was not successful\r\n    if ( atNow() < DATE_ICO_END || !icoThresholdReached() ) return 0;\r\n    \r\n    // return  0 is the airdrop was already claimed\r\n    if( airdropClaimed[_participant] ) return 0;\r\n\r\n    // return 0 if the account does not hold any crowdsale tokens\r\n    if( icoTokensReceived[_participant] == 0 ) return 0;\r\n    \r\n    // airdrop amount\r\n    uint tokens = icoTokensReceived[_participant];\r\n    uint newBalance = tokens.mul(TOKEN_SUPPLY_ICO) / tokensIssuedIco;\r\n    airdrop = newBalance - tokens;\r\n  }  \r\n\r\n  /* Multiple token transfers from one address to save gas */\r\n  /* (longer _amounts array not accepted = sanity check) */\r\n\r\n  function transferMultiple(address[] _addresses, uint[] _amounts) external {\r\n    require( isTransferable() );\r\n    require( locked[msg.sender] == false );\r\n    require( _addresses.length == _amounts.length );\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      if (locked[_addresses[i]] == false) super.transfer(_addresses[i], _amounts[i]);\r\n    }\r\n  }  \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CLAWBACK_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_PRESALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_ICO_WEEK_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"transferable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoEtherContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_FUNDING_GOAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"computeAirdrop\",\"outputs\":[{\"name\":\"airdrop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ETH_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_PRESALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensClaimedAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COOLDOWN_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_MKT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintMarketing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"adminClaimAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClawback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATE_ICO_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_ICO_WEEK_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssuedMkt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoThresholdReached\",\"outputs\":[{\"name\":\"thresholdReached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"adminClaimAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"removeLockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdminWallet\",\"type\":\"address\"}],\"name\":\"AdminWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherContributed\",\"type\":\"uint256\"}],\"name\":\"TokensIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IndaHashToken","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b92f4a92f6662883588a427cb57f970575daf04db1bcdfe0ab30e5e137ffa20"}]}