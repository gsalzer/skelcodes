{"status":"1","message":"OK","result":[{"SourceCode":"// (C) 2017 TokenMarket Ltd. (https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt) Commit: d9e308ff22556a8f40909b1f89ec0f759d1337e0\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    if (halted) throw;\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    if (halted && msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) throw;\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Forward Ethereum payments to another wallet and track them with an event.\r\n *\r\n * Allows to identify customers who made Ethereum payment for a central token issuance.\r\n * Furthermore allow making a payment on behalf of another address.\r\n *\r\n * Allow pausing to signal the end of the crowdsale.\r\n */\r\ncontract PaymentForwarder is Haltable {\r\n\r\n  /** Who will get all ETH in the end */\r\n  address public teamMultisig;\r\n\r\n  /** Total incoming money */\r\n  uint public totalTransferred;\r\n\r\n  /** How many distinct customers we have that have made a payment */\r\n  uint public customerCount;\r\n\r\n  /** Total incoming money per centrally tracked customer id */\r\n  mapping(uint128 => uint) public paymentsByCustomer;\r\n\r\n  /** Total incoming money per benefactor address */\r\n  mapping(address => uint) public paymentsByBenefactor;\r\n\r\n  /** A customer has made a payment. Benefactor is the address where the tokens will be ultimately issued.*/\r\n  event PaymentForwarded(address source, uint amount, uint128 customerId, address benefactor);\r\n\r\n  function PaymentForwarder(address _owner, address _teamMultisig) {\r\n    teamMultisig = _teamMultisig;\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * Pay on a behalf of an address.\r\n   *\r\n   * @param customerId Identifier in the central database, UUID v4\r\n   *\r\n   */\r\n  function pay(uint128 customerId, address benefactor) public stopInEmergency payable {\r\n\r\n    uint weiAmount = msg.value;\r\n\r\n    PaymentForwarded(msg.sender, weiAmount, customerId, benefactor);\r\n\r\n    // We trust Ethereum amounts cannot overflow uint256\r\n    totalTransferred += weiAmount;\r\n\r\n    if(paymentsByCustomer[customerId] == 0) {\r\n      customerCount++;\r\n    }\r\n\r\n    paymentsByCustomer[customerId] += weiAmount;\r\n\r\n    // We track benefactor addresses for extra safety;\r\n    // In the case of central ETH issuance tracking has problems we can\r\n    // construct ETH contributions solely based on blockchain data\r\n    paymentsByBenefactor[benefactor] += weiAmount;\r\n\r\n    // May run out of gas\r\n    if(!teamMultisig.send(weiAmount)) throw;\r\n  }\r\n\r\n  /**\r\n   * Pay on a behalf of the sender.\r\n   *\r\n   * @param customerId Identifier in the central database, UUID v4\r\n   *\r\n   */\r\n  function payForMyself(uint128 customerId) public payable {\r\n    pay(customerId, msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"payForMyself\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"benefactor\",\"type\":\"address\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentsByBenefactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"paymentsByCustomer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_teamMultisig\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"benefactor\",\"type\":\"address\"}],\"name\":\"PaymentForwarded\",\"type\":\"event\"}]","ContractName":"PaymentForwarder","CompilerVersion":"v0.4.14+commit.c2215d46","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000007b4a608746296ab1cf55c9c19078ccdc38b18dc000000000000000000000000043fccd4f59956a50f5005ef014308bbbc78ffe65","Library":"","SwarmSource":"bzzr://f369418627807d8f6c38ce1bf9ef0c0c854b5ab4bc34a9e40ddb5353cc31dfaf"}]}