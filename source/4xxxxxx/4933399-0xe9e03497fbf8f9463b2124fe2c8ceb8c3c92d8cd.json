{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals = 18;     // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // Constructor function.  Initializes contract with initial supply tokens to the creator of the contract\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply             = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender]   = totalSupply;                              // Give the creator all initial tokens\r\n        name                    = tokenName;                                // Set the name for display purposes\r\n        symbol                  = tokenSymbol;                              // Set the symbol for display purposes\r\n    }\r\n\r\n    // Internal transfer, only can be called by this contract\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);                                                // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value);                                // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);                  // Check for overflows\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];          // Save this for an assertion in the future\r\n        balanceOf[_from] -= _value;                                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);      // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n    }\r\n\r\n\r\n    /// @notice Send `_value` (in wei, with 18 zeros) tokens to `_to` from msg.sender's account\r\n    /// @param _to The address of the recipient\r\n    /// @param _value the amount to send \r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n\r\n    /// @notice Transfer tokens from another address. Send `_value` (in wei, with 18 zeros) tokens to `_to` in behalf of `_from`.  `_from` must have already approved `msg.sender`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value the amount to send\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);                    // Check allowance (array[approver][approvee])\r\n        allowance[_from][msg.sender] -= _value;                             // deduct _value from allowance\r\n        _transfer(_from, _to, _value);                                      // transfer\r\n        return true;\r\n    }\r\n\r\n    /// @notice Set allowance for other address.  Allow `_spender` to spend no more than `_value` (in wei, with 18 zeros) tokens on `msg.sender` behalf\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value the max amount they can spend\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;                           // Create allowance (array[approver][approvee])\r\n        return true;\r\n    }\r\n\r\n    /// @notice Set allowance for other address,then notify  Allow `_spender` to spend no more than `_value` (in wei, with 18 zeros) tokens on `msg.sender` behalf, then ping the contract about it\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value the max amount they can spend\r\n    /// @param _extraData some extra information to send to the approved contract\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy tokens.  Remove `_value` (in wei, with 18 zeros) tokens from the system irreversibly\r\n    /// @param _value the amount of money to burn\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);                           // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;                                    // Subtract from the sender\r\n        totalSupply -= _value;                                              // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Destroy tokens in another account.  Remove `_value` (in wei, with 18 zeros) tokens from the system irreversibly, on behalf of `_from`. `_from` must have already approved `msg.sender`\r\n    /// @param _from the address of the sender\r\n    /// @param _value the amount of money to burn\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);                    // Check allowance.  `_from` must have already approved `msg.sender`\r\n        balanceOf[_from] -= _value;                                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;                             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       TRADESMAN TOKEN STARTS HERE      */\r\n/******************************************/\r\n\r\ncontract Tradesman is owned, TokenERC20 {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public sellMultiplier;  // allows token to be valued at < 1 ETH\r\n    uint256 public buyPrice;\r\n    uint256 public buyMultiplier;   // allows token to be valued at < 1 ETH\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // Initializes contract with initial supply tokens to the creator of the contract\r\n    function Tradesman(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    // Internal transfer, only can be called by this contract\r\n    // value in wei, with 18 zeros\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);                 // Check for overflows\r\n        require (!frozenAccount[_from]);                                    // Check if sender is frozen\r\n        require (!frozenAccount[_to]);                                      // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /* we disable minting.  Fixed supply.\r\n    \r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens (in wei, with 18 zeros) it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n    */\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens, if ordered by law\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth. Multipliers allow for token value < 1 ETH\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    /// @param newSellMultiplier Allows token value < 1 ETH. num_eth = num_tokens * (sellPrice / sellMultiplier)\r\n    /// @param newBuyMultiplier Allows token value < 1 ETH.  num_tokens = num_eth * (buyMultiplier / buyPrice)\r\n    function setPrices(uint256 newSellPrice, uint256 newSellMultiplier, uint256 newBuyPrice, uint256 newBuyMultiplier) onlyOwner public {\r\n        sellPrice       = newSellPrice;                                     // sellPrice should be less than buyPrice\r\n        sellMultiplier  = newSellMultiplier;                                // so buyPrice cannot be 1 if also selling\r\n        buyPrice        = newBuyPrice;                                      // Suggest buyPrice = 10, buyMultiplier = 100000, for 10000:1 TRD:ETH\r\n        buyMultiplier   = newBuyMultiplier;                                 // then    sellPrice = 5, sellMultiplier = 100000\r\n    }\r\n\r\n    //  Set `buyMultiplier` = 0 after all tokens sold.  We can still accept donations.\r\n    /// @notice Automatically buy tokens from contract by sending ether (no `data` required).\r\n    function () payable public {\r\n        uint amount = msg.value * buyMultiplier / buyPrice;                 // calculates the amount.  Multiplier allows token value < 1 ETH\r\n        _transfer(this, msg.sender, amount);                                // makes the transfers\r\n    }\r\n    \r\n    //  Set `buyMultiplier` = 0 after all tokens sold.\r\n    /// @notice Buy tokens from contract by sending ether, with `data` = `0xa6f2ae3a`. \r\n    function buy() payable public {\r\n        require (buyMultiplier > 0);                                        // if no more tokens, make Tx fail.\r\n        uint amount = msg.value * buyMultiplier / buyPrice;                 // calculates the amount.  Multiplier allows token value < 1 ETH\r\n        _transfer(this, msg.sender, amount);                                // makes the transfers\r\n    }\r\n    \r\n    //  Set `sellMultiplier` = 0 after all tokens sold.\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    function sell(uint256 amount) public {\r\n        require (sellMultiplier > 0);                                       // if not buying back tokens, make Tx fail.\r\n        require(this.balance >= amount * sellPrice / sellMultiplier);       // checks if the contract has enough ether to buy.    Multiplier allows token value < 1 ETH\r\n        _transfer(msg.sender, this, amount);                                // makes the transfers\r\n        msg.sender.transfer(amount * sellPrice / sellMultiplier);           // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n    \r\n    /// @notice Allow contract to transfer ether directly\r\n    /// @param _to address of destination\r\n    /// @param _value amount of ETH to transfer\r\n    function etherTransfer(address _to, uint _value) onlyOwner public {\r\n        _to.transfer(_value);\r\n    }\r\n    \r\n    /// @notice generic transfer function can interact with contracts by supplying data / function calls\r\n    /// @param _to address of destination\r\n    /// @param _value amount of ETH to transfer\r\n    /// @param _data data bytes\r\n    function genericTransfer(address _to, uint _value, bytes _data) onlyOwner public {\r\n         require(_to.call.value(_value)(_data));\r\n    }\r\n\r\n    //  transfer out tokens (can be done with the generic transfer function by supplying the function signature and parameters)\r\n    /// @notice Allow contract to transfer tokens directly\r\n    /// @param _to address of destination\r\n    /// @param _value amount of ETH to transfer\r\n    function tokenTransfer(address _to, uint _value) onlyOwner public {\r\n         _transfer(this, _to, _value);                               // makes the transfers\r\n    }\r\n        \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"tokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"genericTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"etherTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newSellMultiplier\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Tradesman","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000095472616465736d616e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035452440000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://92462674c28f443b2dbdf98d0486b2fb122787f5b29a0ae9f73e75521c53e35a"}]}