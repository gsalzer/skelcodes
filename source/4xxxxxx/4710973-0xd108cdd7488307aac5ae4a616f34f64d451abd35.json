{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract CCMToken is ERC20,Ownable{\r\n\tusing SafeMath for uint256;\r\n\r\n\t//the base info of the token\r\n\tstring public constant name=\"Chain cell matrix\";\r\n\tstring public symbol;\r\n\tstring public constant version = \"1.0\";\r\n\tuint256 public constant decimals = 18;\r\n\r\n\t//总发行30亿\r\n\tuint256 public constant MAX_SUPPLY=3000000000*10**decimals;\r\n\r\n\t//投资人持有1.2亿\r\n\tuint256 public constant PARTNER_SUPPLY=120000000*10**decimals;\r\n\t//已经分配给投资人的份额\r\n\tuint256 public totalPartnerSupply;\r\n\r\n\t//私募9亿\r\n\tuint256 public constant MAX_FUNDING_SUPPLY=900000000*10**decimals;\r\n\t//私募比例，按eth 3000来算，1:75000的兑换比例，私募价为0.04\r\n\tuint256 public rate;\r\n\t//已经私募量\r\n\tuint256 public totalFundingSupply;\r\n\r\n\t//团队奖励5.4亿\r\n\tuint256 public constant TEAM_KEEPING=540000000*10**decimals;\r\n\tbool public hasTeamKeepingWithdraw;\r\n\r\n\t//1年解禁\r\n\tuint256 public constant ONE_YEAR_KEEPING=432000000*10**decimals;\r\n\tbool public hasOneYearWithdraw;\r\n\r\n\t//2年解禁\r\n\tuint256 public constant TWO_YEAR_KEEPING=432000000*10**decimals;\r\n\tbool public hasTwoYearWithdraw;\r\n\r\n\t//3年解禁\r\n\tuint256 public constant THREE_YEAR_KEEPING=576000000*10**decimals;\t\r\n\tbool public hasThreeYearWithdraw;\r\n\r\n\t//私募开始结束时间\r\n\tuint256 public startBlock;\r\n\tuint256 public endBlock;\r\n\t\r\n\r\n\t//各个用户的锁仓金额\r\n\tmapping(address=>uint256) public lockBalance;\r\n\t//锁仓百分比\r\n\tuint256 public lockRate;\r\n\r\n\r\n\t \r\n\t//ERC20的余额\r\n    mapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\r\n\tfunction CCMToken(){\r\n\t\ttotalSupply = 0 ;\r\n\t\ttotalFundingSupply = 0;\r\n\t\ttotalPartnerSupply= 0;\r\n\r\n\t\thasTeamKeepingWithdraw=false;\r\n\t\thasOneYearWithdraw=false;\r\n\t\thasTwoYearWithdraw=false;\r\n\t\thasThreeYearWithdraw=false;\r\n\r\n\t\tstartBlock = 4000000;\r\n\t\tendBlock = 5000000;\r\n\t\tlockRate=100;\r\n\t\trate=75000;\r\n\t\tsymbol=\"CCM\";\r\n\t}\r\n\r\n\tevent CreateCCM(address indexed _to, uint256 _value);\r\n\r\n\tmodifier beforeBlock(uint256 _blockNum){\r\n\t\tassert(getCurrentBlockNum()<_blockNum);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier afterBlock(uint256 _blockNum){\r\n\t\tassert(getCurrentBlockNum()>=_blockNum);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachFundingSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_FUNDING_SUPPLY>=totalFundingSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notReachPartnerWithdrawSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(PARTNER_SUPPLY>=totalPartnerSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier assertFalse(bool withdrawStatus){\r\n\t\tassert(!withdrawStatus);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notBeforeTime(uint256 targetTime){\r\n\t\tassert(now>targetTime);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t//owner有权限提取账户中的eth\r\n\tfunction etherProceeds() external\r\n\t\tonlyOwner\r\n\r\n\t{\r\n\t\tif(!msg.sender.send(this.balance)) revert();\r\n\t}\r\n\r\n\r\n\t//代币分发函数，内部使用\r\n\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\r\n\t\tnotReachTotalSupply(_value,_rate)\r\n\t{\r\n\t\tuint256 amount=_value.mul(_rate);\r\n\t\ttotalSupply=totalSupply.add(amount);\r\n\t\tbalances[receiver] +=amount;\r\n\t\tCreateCCM(receiver,amount);\r\n\t\tTransfer(0x0, receiver, amount);\r\n\t}\r\n\r\n\r\n\r\n\t//分配代币给股东\r\n\tfunction withdrawToPartner(address partnerAddress,uint256 _value) external\r\n\t\tonlyOwner\r\n\t\tnotReachPartnerWithdrawSupply(_value,1)\r\n\r\n\t{\r\n\t\tprocessFunding(partnerAddress,_value,1);\r\n\t\t//增加股东已分配份额\r\n\t\ttotalPartnerSupply=totalPartnerSupply.add(_value);\r\n\r\n\t\t//股东要锁仓，记录锁仓份额\r\n\t\tlockBalance[partnerAddress]=lockBalance[partnerAddress].add(_value);\r\n\t}\r\n\r\n\t//私募，不超过最大私募份额,要在私募时间内\r\n\tfunction () payable external\r\n\t\tafterBlock(startBlock)\r\n\t\tbeforeBlock(endBlock)\r\n\t\tnotReachFundingSupply(msg.value,rate)\r\n\t{\r\n\t\tprocessFunding(msg.sender,msg.value,rate);\r\n\t\t//增加已私募份额\r\n\t\tuint256 amount=msg.value.mul(rate);\r\n\t\ttotalFundingSupply = totalFundingSupply.add(amount);\r\n\r\n\t\t//私募的用户，都要锁仓，记录锁仓份额\r\n\t\tlockBalance[msg.sender]=lockBalance[msg.sender].add(amount);\r\n\t}\r\n\r\n\r\n\r\n\t//团队提币，提到owner账户，只有未提过才能提\r\n\tfunction withdrawToTeam() external\r\n\t\tonlyOwner\r\n\t\tassertFalse(hasTeamKeepingWithdraw)\r\n\t{\r\n\t\tprocessFunding(msg.sender,TEAM_KEEPING,1);\r\n\t\t//标记团队已提现\r\n\t\thasTeamKeepingWithdraw = true;\r\n\t}\r\n\r\n\t//一年解禁，提到owner账户，只有未提过才能提 ,\r\n\tfunction withdrawForOneYear() external\r\n\t\tonlyOwner\r\n\t\tassertFalse(hasOneYearWithdraw)\r\n\t\tnotBeforeTime(1514736000)\r\n\t{\r\n\t\tprocessFunding(msg.sender,ONE_YEAR_KEEPING,1);\r\n\t\t//标记团队已提现\r\n\t\thasOneYearWithdraw = true;\r\n\t}\r\n\r\n\t//两年解禁，提到owner账户，只有未提过才能提\r\n\tfunction withdrawForTwoYear() external\r\n\t\tonlyOwner\r\n\t\tassertFalse(hasTwoYearWithdraw)\r\n\t\tnotBeforeTime(1546272000)\r\n\t{\r\n\t\tprocessFunding(msg.sender,TWO_YEAR_KEEPING,1);\r\n\t\t//标记团队已提现\r\n\t\thasTwoYearWithdraw = true;\r\n\t}\r\n\r\n\t//三年解禁，提到owner账户，只有未提过才能提\r\n\tfunction withdrawForThreeYear() external\r\n\t\tonlyOwner\r\n\t\tassertFalse(hasThreeYearWithdraw)\r\n\t\tnotBeforeTime(1577808000)\r\n\t{\r\n\t\tprocessFunding(msg.sender,THREE_YEAR_KEEPING,1);\r\n\t\t//标记团队已提现\r\n\t\thasThreeYearWithdraw = true;\r\n\t}\r\n\r\n\r\n  //转账前，先校验减去转出份额后，是否大于等于锁仓份额\r\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\r\n \t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(balances[msg.sender].sub(_value)>=lockBalance[msg.sender].mul(lockRate).div(100));\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n  \t{\r\n\t\treturn balances[_owner];\r\n  \t}\r\n\r\n\r\n  //从委托人账上转出份额时，还要判断委托人的余额-转出份额是否大于等于锁仓份额\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(balances[_from].sub(_value)>=lockBalance[_from].mul(lockRate).div(100));\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n  \t{\r\n\t\treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n\tfunction getCurrentBlockNum() internal returns (uint256)\r\n\t{\r\n\t\treturn block.number;\r\n\t}\r\n\r\n\r\n\tfunction setSymbol(string _symbol) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tsymbol=_symbol;\r\n\t}\r\n\r\n\r\n\tfunction setRate(uint256 _rate) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\trate=_rate;\r\n\t}\r\n\r\n\tfunction setLockRate(uint256 _lockRate) external\r\n\t\tonlyOwner\r\n\t{\r\n\t\tlockRate=_lockRate;\r\n\t}\r\n\t\r\n    function setupFundingInfo(uint256 _startBlock,uint256 _endBlock) external\r\n        onlyOwner\r\n    {\r\n\t\tstartBlock=_startBlock;\r\n\t\tendBlock=_endBlock;\r\n    }\r\n\t  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasOneYearWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForThreeYear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPartnerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasTeamKeepingWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_YEAR_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THREE_YEAR_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForOneYear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partnerAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_YEAR_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasThreeYearWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockRate\",\"type\":\"uint256\"}],\"name\":\"setLockRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasTwoYearWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForTwoYear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setupFundingInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateCCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CCMToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7a7b1d48ee58f2d3451d2a59ecc849a75397396cfdfc0bf10847ae58a744df18"}]}