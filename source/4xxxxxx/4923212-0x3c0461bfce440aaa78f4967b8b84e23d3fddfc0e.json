{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    function RefundVault(address _wallet) public {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) public onlyOwner  payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() public onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() public onlyOwner {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n\r\ncontract ApplauseCashToken is StandardToken, PausableToken {\r\n    string public constant name = \"ApplauseCash\";\r\n    string public constant symbol = \"APLC\";\r\n    uint8 public constant decimals = 4;\r\n    uint256 public INITIAL_SUPPLY = 300000000 * 10000;\r\n\r\n    function ApplauseCashToken() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Modified contract for managing a token crowdsale.\r\n * ApplauseCashCrowdsale have pre-sale and main sale periods,\r\n * where investors can make token purchases and the crowdsale will assign\r\n * them tokens based on a token per ETH rate and the system of bonuses.\r\n * Funds collected are forwarded to a wallet as they arrive.\r\n * pre-sale and main sale periods both have caps defined in tokens.\r\n */\r\n\r\ncontract ApplauseCashCrowdsale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Bonus {\r\n        uint duration;\r\n        uint percent;\r\n    }\r\n\r\n    // minimum amount of funds to be raised in tokens\r\n    uint256 public softcap;\r\n\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n\r\n    // true for finalised crowdsale\r\n    bool public isFinalized;\r\n\r\n    // The token being sold\r\n    ApplauseCashToken public token = new ApplauseCashToken();\r\n\r\n    // start and end timestamps where pre-investments are allowed (both inclusive)\r\n    uint256 public preIcoStartTime;\r\n    uint256 public preIcoEndTime;\r\n\r\n    // start and end timestamps where main-investments are allowed (both inclusive)\r\n    uint256 public icoStartTime;\r\n    uint256 public icoEndTime;\r\n\r\n    // maximum amout of tokens for pre-sale and main sale\r\n    uint256 public preIcoHardcap;\r\n    uint256 public icoHardcap;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per ETH\r\n    uint256 public rate;\r\n\r\n    // amount of raised tokens\r\n    uint256 public tokensInvested;\r\n\r\n    Bonus[] public preIcoBonuses;\r\n    Bonus[] public icoBonuses;\r\n\r\n    // Invstors can't invest less then specified numbers in wei\r\n    uint256 public preIcoMinimumWei;\r\n    uint256 public icoMinimumWei;\r\n\r\n    // Default bonus %\r\n    uint256 public defaultPercent;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function ApplauseCashCrowdsale(\r\n        uint256 _preIcoStartTime,\r\n        uint256 _preIcoEndTime,\r\n        uint256 _preIcoHardcap,\r\n        uint256 _icoStartTime,\r\n        uint256 _icoEndTime,\r\n        uint256 _icoHardcap,\r\n        uint256 _softcap,\r\n        uint256 _rate,\r\n        address _wallet\r\n    ) public {\r\n\r\n        //require(_softcap > 0);\r\n\r\n        // can't start pre-sale in the past\r\n        require(_preIcoStartTime >= now);\r\n\r\n        // can't start main sale in the past\r\n        require(_icoStartTime >= now);\r\n\r\n        // can't start main sale before the end of pre-sale\r\n        require(_preIcoEndTime < _icoStartTime);\r\n\r\n        // the end of pre-sale can't happen before it's start\r\n        require(_preIcoStartTime < _preIcoEndTime);\r\n\r\n        // the end of main sale can't happen before it's start\r\n        require(_icoStartTime < _icoEndTime);\r\n\r\n        require(_rate > 0);\r\n        require(_preIcoHardcap > 0);\r\n        require(_icoHardcap > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        preIcoMinimumWei = 20000000000000000;  // 0.02 Ether default minimum\r\n        icoMinimumWei = 20000000000000000; // 0.02 Ether default minimum\r\n        defaultPercent = 0;\r\n\r\n        preIcoBonuses.push(Bonus({duration: 1 hours, percent: 90}));\r\n        preIcoBonuses.push(Bonus({duration: 6 days + 5 hours, percent: 50}));\r\n\r\n        icoBonuses.push(Bonus({duration: 1 hours, percent: 45}));\r\n        icoBonuses.push(Bonus({duration: 7 days + 15 hours, percent: 40}));\r\n        icoBonuses.push(Bonus({duration: 6 days, percent: 30}));\r\n        icoBonuses.push(Bonus({duration: 6 days, percent: 20}));\r\n        icoBonuses.push(Bonus({duration: 7 days, percent: 10}));\r\n\r\n        preIcoStartTime = _preIcoStartTime;\r\n        preIcoEndTime = _preIcoEndTime;\r\n        preIcoHardcap = _preIcoHardcap;\r\n        icoStartTime = _icoStartTime;\r\n        icoEndTime = _icoEndTime;\r\n        icoHardcap = _icoHardcap;\r\n        softcap = _softcap;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n\r\n        isFinalized = false;\r\n\r\n        vault = new RefundVault(wallet);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n\r\n        require(beneficiary != 0x0);\r\n        require(msg.value != 0);\r\n        require(!isFinalized);\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        validateWithinPeriods();\r\n\r\n        // calculate token amount to be created.\r\n        // ETH and our tokens have different numbers of decimals after comma\r\n        // ETH - 18 decimals, our tokes - 4. so we need to divide our value\r\n        // by 1e14 (18 - 4 == 14).\r\n        uint256 tokens = weiAmount.mul(rate).div(100000000000000);\r\n\r\n        uint256 percent = getBonusPercent(now);\r\n\r\n        // add bonus to tokens depends on the period\r\n        uint256 bonusedTokens = applyBonus(tokens, percent);\r\n\r\n        validateWithinCaps(bonusedTokens, weiAmount);\r\n\r\n        // update state\r\n        tokensInvested = tokensInvested.add(bonusedTokens);\r\n        token.transfer(beneficiary, bonusedTokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\r\n\r\n        forwardFunds();\r\n    }\r\n    \r\n    // owner can transfer tokens\r\n    function transferTokens(address beneficiary, uint256 tokens) public onlyOwner {\r\n        token.transfer(beneficiary, tokens);\r\n    }\r\n\r\n    // set new dates for pre-salev (emergency case)\r\n    function setPreIcoParameters(\r\n        uint256 _preIcoStartTime,\r\n        uint256 _preIcoEndTime,\r\n        uint256 _preIcoHardcap,\r\n        uint256 _preIcoMinimumWei\r\n    ) public onlyOwner {\r\n        require(!isFinalized);\r\n        require(_preIcoStartTime < _preIcoEndTime);\r\n        require(_preIcoHardcap > 0);\r\n        preIcoStartTime = _preIcoStartTime;\r\n        preIcoEndTime = _preIcoEndTime;\r\n        preIcoHardcap = _preIcoHardcap;\r\n        preIcoMinimumWei = _preIcoMinimumWei;\r\n    }\r\n\r\n    // set new dates for main-sale (emergency case)\r\n    function setIcoParameters(\r\n        uint256 _icoStartTime,\r\n        uint256 _icoEndTime,\r\n        uint256 _icoHardcap,\r\n        uint256 _icoMinimumWei\r\n    ) public onlyOwner {\r\n\r\n        require(!isFinalized);\r\n        require(_icoStartTime < _icoEndTime);\r\n        require(_icoHardcap > 0);\r\n        icoStartTime = _icoStartTime;\r\n        icoEndTime = _icoEndTime;\r\n        icoHardcap = _icoHardcap;\r\n        icoMinimumWei = _icoMinimumWei;\r\n    }\r\n\r\n    // set new wallets (emergency case)\r\n    function setWallet(address _wallet) public onlyOwner {\r\n        require(!isFinalized);\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n    }\r\n\r\n      // set new rate (emergency case)\r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        require(!isFinalized);\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n    }\r\n\r\n        // set new softcap (emergency case)\r\n    function setSoftcap(uint256 _softcap) public onlyOwner {\r\n        require(!isFinalized);\r\n        require(_softcap > 0);\r\n        softcap = _softcap;\r\n    }\r\n\r\n\r\n    // set token on pause\r\n    function pauseToken() external onlyOwner {\r\n        require(!isFinalized);\r\n        token.pause();\r\n    }\r\n\r\n    // unset token's pause\r\n    function unpauseToken() external onlyOwner {\r\n        token.unpause();\r\n    }\r\n\r\n    // set token Ownership\r\n    function transferTokenOwnership(address newOwner) external onlyOwner {\r\n        token.transferOwnership(newOwner);\r\n    }\r\n\r\n    // @return true if main sale event has ended\r\n    function icoHasEnded() external constant returns (bool) {\r\n        return now > icoEndTime;\r\n    }\r\n\r\n    // @return true if pre sale event has ended\r\n    function preIcoHasEnded() external constant returns (bool) {\r\n        return now > preIcoEndTime;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        //wallet.transfer(msg.value);\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // we want to be able to check all bonuses in already deployed contract\r\n    // that's why we pass currentTime as a parameter instead of using \"now\"\r\n    function getBonusPercent(uint256 currentTime) public constant returns (uint256 percent) {\r\n      //require(currentTime >= preIcoStartTime);\r\n        uint i = 0;\r\n        bool isPreIco = currentTime >= preIcoStartTime && currentTime <= preIcoEndTime;\r\n        uint256 offset = 0;\r\n        if (isPreIco) {\r\n            uint256 preIcoDiffInSeconds = currentTime.sub(preIcoStartTime);\r\n            for (i = 0; i < preIcoBonuses.length; i++) {\r\n                if (preIcoDiffInSeconds <= preIcoBonuses[i].duration + offset) {\r\n                    return preIcoBonuses[i].percent;\r\n                }\r\n                offset = offset.add(preIcoBonuses[i].duration);\r\n            }\r\n        } else {\r\n            uint256 icoDiffInSeconds = currentTime.sub(icoStartTime);\r\n            for (i = 0; i < icoBonuses.length; i++) {\r\n                if (icoDiffInSeconds <= icoBonuses[i].duration + offset) {\r\n                    return icoBonuses[i].percent;\r\n                }\r\n                offset = offset.add(icoBonuses[i].duration);\r\n            }\r\n        }\r\n        return defaultPercent;\r\n    }\r\n\r\n    function applyBonus(uint256 tokens, uint256 percent) internal pure returns  (uint256 bonusedTokens) {\r\n        uint256 tokensToAdd = tokens.mul(percent).div(100);\r\n        return tokens.add(tokensToAdd);\r\n    }\r\n\r\n    function validateWithinPeriods() internal constant {\r\n        // within pre-sale or main sale\r\n        require((now >= preIcoStartTime && now <= preIcoEndTime) || (now >= icoStartTime && now <= icoEndTime));\r\n    }\r\n\r\n    function validateWithinCaps(uint256 tokensAmount, uint256 weiAmount) internal constant {\r\n        uint256 expectedTokensInvested = tokensInvested.add(tokensAmount);\r\n\r\n        // within pre-sale\r\n        if (now >= preIcoStartTime && now <= preIcoEndTime) {\r\n            require(weiAmount >= preIcoMinimumWei);\r\n            require(expectedTokensInvested <= preIcoHardcap);\r\n        }\r\n\r\n        // within main sale\r\n        if (now >= icoStartTime && now <= icoEndTime) {\r\n            require(expectedTokensInvested <= icoHardcap);\r\n        }\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!softcapReached());\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    function softcapReached() public constant returns (bool) {\r\n        return tokensInvested >= softcap;\r\n    }\r\n\r\n    // finish crowdsale\r\n    function finaliseCrowdsale() external onlyOwner returns (bool) {\r\n        require(!isFinalized);\r\n        if (softcapReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        isFinalized = true;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Deployer is Ownable {\r\n\r\n    ApplauseCashCrowdsale public applauseCashCrowdsale;\r\n    uint256 public constant TOKEN_DECIMALS_MULTIPLIER = 10000;\r\n    address public multisig = 0xaB188aCBB8a401277DC2D83C242677ca3C96fF05;\r\n\r\n    function deploy() public onlyOwner {\r\n        applauseCashCrowdsale = new ApplauseCashCrowdsale(\r\n            1516280400, //Pre ICO Start: 18 Jan 2018 at 8:00 am EST\r\n            1516856400, //Pre ICO End: 24 Jan 2018 at 11:59 pm EST\r\n            3000000 * TOKEN_DECIMALS_MULTIPLIER, //Pre ICO hardcap\r\n            1517490000,  // ICO Start: 1 Feb 2018 at 8 am EST\r\n            1519880400, // ICO End: 28 Feb 2018 at 11.59 pm EST\r\n            144000000 * TOKEN_DECIMALS_MULTIPLIER,  // ICO hardcap\r\n            50000 * TOKEN_DECIMALS_MULTIPLIER, // Overal crowdsale softcap\r\n            500, // 1 ETH = 500 APLC\r\n            multisig // Multisignature wallet (controlled by multiple accounts)\r\n        );\r\n    }\r\n\r\n    function setOwner() public onlyOwner {\r\n        applauseCashCrowdsale.transferOwnership(owner);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ApplauseCashToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1beb6c4bcf81857b2b9a8a8befdd96be9f395533ad9ec483238181b74bd0b5c4"}]}