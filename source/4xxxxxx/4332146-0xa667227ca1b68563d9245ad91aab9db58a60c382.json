{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\t\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) returns (bool success) ;\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract IQTCrowdsale is Owned{\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n\t\r\n\tstruct ContributorData{\r\n\t\tbool isActive;\r\n\t\tbool isTokenDistributed;\r\n\t\tuint contributionAmount;\t// ETH contribution\r\n\t\tuint tokensAmount;\t\t\t// Exchanged IQT amount\r\n\t}\r\n\t\r\n\tmapping(address => ContributorData) public contributorList;\r\n\tmapping(uint => address) contributorIndexes;\r\n\tuint nextContributorIndex;\r\n\tuint contributorCount;\r\n    \r\n    address public beneficiary;\r\n    uint public fundingLimit;\r\n    uint public amountRaised;\r\n\tuint public remainAmount;\r\n    uint public deadline;\r\n    uint public exchangeTokenRate;\r\n    token public tokenReward;\r\n\tuint256 public tokenBalance;\r\n    bool public crowdsaleClosed = false;\r\n    bool public isIQTDistributed = false;\r\n    \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Tranche 1 crowdsale start date and end date\r\n    // Start - Monday, 25-Sep-17 12:00:00 UTC / 12pm GMT 25th September 2017\r\n    // Tier1  - Sunday, 1-Oct-17 16:00:00 UTC / 16pm GMT 1st October 2017\r\n    // Tier2  - Wednesday, 11-Oct-17 16:00:00 UTC / 16pm GMT 11th October 2017\r\n    // Tier3  - Monday, 21-Oct-17 16:00:00 UTC / 16pm GMT 21th October 2017\r\n    // End - Saturday, 25-Nov-17 12:00:00 UTC / 12pm GMT 25 November 2017 \r\n    // ------------------------------------------------------------------------\r\n    uint public constant START_TIME = 1506340800;\r\n    uint public constant SECOND_TIER_SALE_START_TIME = 1506787200;\r\n    uint public constant THIRD_TIER_SALE_START_TIME = 1507651200;\r\n    uint public constant FOURTH_TIER_SALE_START_TIME = 1508515200;\r\n    uint public constant END_TIME = 1511611200;\r\n\t\r\n\t\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // crowdsale exchange rate\r\n    // ------------------------------------------------------------------------\r\n    uint public START_RATE = 900;\r\n    uint public SECOND_TIER_RATE = 850;\r\n    uint public THIRD_TIER_RATE = 800;\r\n    uint public FOURTH_RATE = 700;\r\n    \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Funding Goal\r\n    //    - HARD CAP : 33000 ETH\r\n    // ------------------------------------------------------------------------\r\n    uint public constant FUNDING_ETH_HARD_CAP = 33000;\r\n    \r\n    // IQT token decimals\r\n    uint8 public constant IQT_DECIMALS = 8;\r\n    uint public constant IQT_DECIMALSFACTOR = 10**uint(IQT_DECIMALS);\r\n    \r\n    address public constant IQT_FUNDATION_ADDRESS = 0xB58d67ced1E480aC7FBAf70dc2b023e30140fBB4;\r\n    address public constant IQT_CONTRACT_ADDRESS = 0x51ee82641Ac238BDe34B9859f98F5F311d6E4954;\r\n\r\n    event GoalReached(address raisingAddress, uint amountRaised);\r\n\tevent LimitReached(address raisingAddress, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\tevent WithdrawFailed(address raisingAddress, uint amount, bool isContribution);\r\n\tevent FundReturn(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function IQTCrowdsale(\r\n    ) {\r\n        beneficiary = IQT_FUNDATION_ADDRESS;\r\n        fundingLimit = FUNDING_ETH_HARD_CAP * 1 ether;  // Funding limit 33000 ETH\r\n\t\t\r\n        deadline = END_TIME;  // 2017-11-25 12:00:00 UTC\r\n        exchangeTokenRate = FOURTH_RATE * IQT_DECIMALSFACTOR;\r\n        tokenReward = token(IQT_CONTRACT_ADDRESS);\r\n\t\tcontributorCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable {\r\n\t\t\r\n        require(!crowdsaleClosed);\r\n        require(now >= START_TIME && now < END_TIME);\r\n        \r\n\t\tprocessTransaction(msg.sender, msg.value);\r\n    }\r\n\t\r\n\t/**\r\n\t * Process transaction\r\n\t */\r\n\tfunction processTransaction(address _contributor, uint _amount) internal{\t\r\n\t\tuint contributionEthAmount = _amount;\r\n\t\t\t\r\n        amountRaised += contributionEthAmount;                    // add newly received ETH\r\n\t\tremainAmount += contributionEthAmount;\r\n        \r\n\t\t// calcualte exchanged token based on exchange rate\r\n        if (now >= START_TIME && now < SECOND_TIER_SALE_START_TIME){\r\n\t\t\texchangeTokenRate = START_RATE * IQT_DECIMALSFACTOR;\r\n        }\r\n        if (now >= SECOND_TIER_SALE_START_TIME && now < THIRD_TIER_SALE_START_TIME){\r\n            exchangeTokenRate = SECOND_TIER_RATE * IQT_DECIMALSFACTOR;\r\n        }\r\n        if (now >= THIRD_TIER_SALE_START_TIME && now < FOURTH_TIER_SALE_START_TIME){\r\n            exchangeTokenRate = THIRD_TIER_RATE * IQT_DECIMALSFACTOR;\r\n        }\r\n        if (now >= FOURTH_TIER_SALE_START_TIME && now < END_TIME){\r\n            exchangeTokenRate = FOURTH_RATE * IQT_DECIMALSFACTOR;\r\n        }\r\n        uint amountIqtToken = _amount * exchangeTokenRate / 1 ether;\r\n\t\t\r\n\t\tif (contributorList[_contributor].isActive == false){                  // Check if contributor has already contributed\r\n\t\t\tcontributorList[_contributor].isActive = true;                            // Set his activity to true\r\n\t\t\tcontributorList[_contributor].contributionAmount = contributionEthAmount;    // Set his contribution\r\n\t\t\tcontributorList[_contributor].tokensAmount = amountIqtToken;\r\n\t\t\tcontributorList[_contributor].isTokenDistributed = false;\r\n\t\t\tcontributorIndexes[nextContributorIndex] = _contributor;                  // Set contributors index\r\n\t\t\tnextContributorIndex++;\r\n\t\t\tcontributorCount++;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tcontributorList[_contributor].contributionAmount += contributionEthAmount;   // Add contribution amount to existing contributor\r\n\t\t\tcontributorList[_contributor].tokensAmount += amountIqtToken;             // log token amount`\r\n\t\t}\r\n\t\t\r\n        FundTransfer(msg.sender, contributionEthAmount, true);\r\n\t\t\r\n\t\tif (amountRaised >= fundingLimit){\r\n\t\t\t// close crowdsale because the crowdsale limit is reached\r\n\t\t\tcrowdsaleClosed = true;\r\n\t\t}\t\t\r\n\t\t\r\n\t}\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\t\r\n\tmodifier afterCrowdsaleClosed() { if (crowdsaleClosed == true || now >= deadline) _; }\r\n\t\r\n\t\r\n\t/**\r\n     * close Crowdsale\r\n     *\r\n     */\r\n\tfunction closeCrowdSale(){\r\n\t\trequire(beneficiary == msg.sender);\r\n\t\tif ( beneficiary == msg.sender) {\r\n\t\t\tcrowdsaleClosed = true;\r\n\t\t}\r\n\t}\r\n\t\r\n    /**\r\n     * Check token balance\r\n     *\r\n     */\r\n\tfunction checkTokenBalance(){\r\n\t\tif ( beneficiary == msg.sender) {\r\n\t\t\t//check current token balance\r\n\t\t\ttokenBalance = tokenReward.balanceOf(address(this));\r\n\t\t}\r\n\t}\r\n\t\r\n    /**\r\n     * Withdraw the all funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. \r\n     */\r\n    function safeWithdrawalAll() {\r\n        if ( beneficiary == msg.sender) {\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n\t\t\t\tremainAmount = remainAmount - amountRaised;\r\n            } else {\r\n\t\t\t\tWithdrawFailed(beneficiary, amountRaised, false);\r\n\t\t\t\t//If we fail to send the funds to beneficiary\r\n            }\r\n        }\r\n    }\r\n\t\r\n\t/**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. \r\n     */\r\n    function safeWithdrawalAmount(uint256 withdrawAmount) {\r\n        if (beneficiary == msg.sender) {\r\n            if (beneficiary.send(withdrawAmount)) {\r\n                FundTransfer(beneficiary, withdrawAmount, false);\r\n\t\t\t\tremainAmount = remainAmount - withdrawAmount;\r\n            } else {\r\n\t\t\t\tWithdrawFailed(beneficiary, withdrawAmount, false);\r\n\t\t\t\t//If we fail to send the funds to beneficiary\r\n            }\r\n        }\r\n    }\r\n\t\r\n\t/**\r\n\t * Withdraw IQT \r\n     * \r\n\t * If there are some remaining IQT in the contract \r\n\t * after all token are distributed the contributor,\r\n\t * the beneficiary can withdraw the IQT in the contract\r\n     *\r\n     */\r\n    function withdrawIQT(uint256 tokenAmount) afterCrowdsaleClosed {\r\n\t\trequire(beneficiary == msg.sender);\r\n        if (isIQTDistributed && beneficiary == msg.sender) {\r\n            tokenReward.transfer(beneficiary, tokenAmount);\r\n\t\t\t// update token balance\r\n\t\t\ttokenBalance = tokenReward.balanceOf(address(this));\r\n        }\r\n    }\r\n\t\r\n\r\n\t/**\r\n     * Distribute token\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * distribute token to contributor. \r\n     */\r\n\tfunction distributeIQTToken() {\r\n\t\tif (beneficiary == msg.sender) {  // only IQT_FUNDATION_ADDRESS can distribute the IQT\r\n\t\t\taddress currentParticipantAddress;\r\n\t\t\tfor (uint index = 0; index < contributorCount; index++){\r\n\t\t\t\tcurrentParticipantAddress = contributorIndexes[index]; \r\n\t\t\t\t\r\n\t\t\t\tuint amountIqtToken = contributorList[currentParticipantAddress].tokensAmount;\r\n\t\t\t\tif (false == contributorList[currentParticipantAddress].isTokenDistributed){\r\n\t\t\t\t\tbool isSuccess = tokenReward.transfer(currentParticipantAddress, amountIqtToken);\r\n\t\t\t\t\tif (isSuccess){\r\n\t\t\t\t\t\tcontributorList[currentParticipantAddress].isTokenDistributed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// check if all IQT are distributed\r\n\t\t\tcheckIfAllIQTDistributed();\r\n\t\t\t// get latest token balance\r\n\t\t\ttokenBalance = tokenReward.balanceOf(address(this));\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n     * Distribute token by batch\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * distribute token to contributor. \r\n     */\r\n\tfunction distributeIQTTokenBatch(uint batchUserCount) {\r\n\t\tif (beneficiary == msg.sender) {  // only IQT_FUNDATION_ADDRESS can distribute the IQT\r\n\t\t\taddress currentParticipantAddress;\r\n\t\t\tuint transferedUserCount = 0;\r\n\t\t\tfor (uint index = 0; index < contributorCount && transferedUserCount<batchUserCount; index++){\r\n\t\t\t\tcurrentParticipantAddress = contributorIndexes[index]; \r\n\t\t\t\t\r\n\t\t\t\tuint amountIqtToken = contributorList[currentParticipantAddress].tokensAmount;\r\n\t\t\t\tif (false == contributorList[currentParticipantAddress].isTokenDistributed){\r\n\t\t\t\t\tbool isSuccess = tokenReward.transfer(currentParticipantAddress, amountIqtToken);\r\n\t\t\t\t\ttransferedUserCount = transferedUserCount + 1;\r\n\t\t\t\t\tif (isSuccess){\r\n\t\t\t\t\t\tcontributorList[currentParticipantAddress].isTokenDistributed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// check if all IQT are distributed\r\n\t\t\tcheckIfAllIQTDistributed();\r\n\t\t\t// get latest token balance\r\n\t\t\ttokenBalance = tokenReward.balanceOf(address(this));\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if all contributor's token are successfully distributed\r\n\t */\r\n\tfunction checkIfAllIQTDistributed(){\r\n\t    address currentParticipantAddress;\r\n\t\tisIQTDistributed = true;\r\n\t\tfor (uint index = 0; index < contributorCount; index++){\r\n\t\t\t\tcurrentParticipantAddress = contributorIndexes[index]; \r\n\t\t\t\t\r\n\t\t\tif (false == contributorList[currentParticipantAddress].isTokenDistributed){\r\n\t\t\t\tisIQTDistributed = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"exchangeTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeCrowdSale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOURTH_TIER_SALE_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawalAmount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_TIER_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IQT_DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawalAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkTokenBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_TIER_SALE_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeIQTToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfAllIQTDistributed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_TIER_SALE_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorList\",\"outputs\":[{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"isTokenDistributed\",\"type\":\"bool\"},{\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOURTH_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IQT_FUNDATION_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"batchUserCount\",\"type\":\"uint256\"}],\"name\":\"distributeIQTTokenBatch\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IQT_CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUNDING_ETH_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawIQT\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IQT_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIQTDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_TIER_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raisingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raisingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"LimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raisingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"WithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundReturn\",\"type\":\"event\"}]","ContractName":"IQTCrowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7f5932b0d2cec5dbb82958dddb0d9be89f7af1706acf7194f4522aa201ff760a"}]}