{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/* The authentication manager details user accounts that have access to certain priviledges and keeps a permanent ledger of who has and has had these rights. */\r\ncontract AuthenticationManager {\r\n    /* Map addresses to admins */\r\n    mapping (address => bool) adminAddresses;\r\n\r\n    /* Map addresses to account readers */\r\n    mapping (address => bool) accountReaderAddresses;\r\n\r\n    /* Details of all admins that have ever existed */\r\n    address[] adminAudit;\r\n\r\n    /* Details of all account readers that have ever existed */\r\n    address[] accountReaderAudit;\r\n\r\n    /* Fired whenever an admin is added to the contract. */\r\n    event AdminAdded(address addedBy, address admin);\r\n\r\n    /* Fired whenever an admin is removed from the contract. */\r\n    event AdminRemoved(address removedBy, address admin);\r\n\r\n    /* Fired whenever an account-reader contract is added. */\r\n    event AccountReaderAdded(address addedBy, address account);\r\n\r\n    /* Fired whenever an account-reader contract is removed. */\r\n    event AccountReaderRemoved(address removedBy, address account);\r\n\r\n    /* When this contract is first setup we use the creator as the first admin */    \r\n    function AuthenticationManager() {\r\n        /* Set the first admin to be the person creating the contract */\r\n        adminAddresses[msg.sender] = true;\r\n        AdminAdded(0, msg.sender);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = msg.sender;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an admin */\r\n    function isCurrentAdmin(address _address) constant returns (bool) {\r\n        return adminAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAdmin(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < adminAudit.length; i++)\r\n            if (adminAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Gets whether or not the specified address is currently an account reader */\r\n    function isCurrentAccountReader(address _address) constant returns (bool) {\r\n        return accountReaderAddresses[_address];\r\n    }\r\n\r\n    /* Gets whether or not the specified address has ever been an admin */\r\n    function isCurrentOrPastAccountReader(address _address) constant returns (bool) {\r\n        for (uint256 i = 0; i < accountReaderAudit.length; i++)\r\n            if (accountReaderAudit[i] == _address)\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /* Adds a user to our list of admins */\r\n    function addAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already admin\r\n        if (adminAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the user\r\n        adminAddresses[_address] = true;\r\n        AdminAdded(msg.sender, _address);\r\n        adminAudit.length++;\r\n        adminAudit[adminAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user from our list of admins but keeps them in the history audit */\r\n    function removeAdmin(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        /* Don't allow removal of self */\r\n        if (_address == msg.sender)\r\n            throw;\r\n\r\n        // Fail if this account is already non-admin\r\n        if (!adminAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this admin user */\r\n        adminAddresses[_address] = false;\r\n        AdminRemoved(msg.sender, _address);\r\n    }\r\n\r\n    /* Adds a user/contract to our list of account readers */\r\n    function addAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already in the list\r\n        if (accountReaderAddresses[_address])\r\n            throw;\r\n        \r\n        // Add the user\r\n        accountReaderAddresses[_address] = true;\r\n        AccountReaderAdded(msg.sender, _address);\r\n        accountReaderAudit.length++;\r\n        accountReaderAudit[adminAudit.length - 1] = _address;\r\n    }\r\n\r\n    /* Removes a user/contracts from our list of account readers but keeps them in the history audit */\r\n    function removeAccountReader(address _address) {\r\n        /* Ensure we're an admin */\r\n        if (!isCurrentAdmin(msg.sender))\r\n            throw;\r\n\r\n        // Fail if this account is already not in the list\r\n        if (!accountReaderAddresses[_address])\r\n            throw;\r\n\r\n        /* Remove this admin user */\r\n        accountReaderAddresses[_address] = false;\r\n        AccountReaderRemoved(msg.sender, _address);\r\n    }\r\n}\r\n\r\n/* The XWIN Token itself is a simple extension of the ERC20 that allows for granting other XWIN Token contracts special rights to act on behalf of all transfers. */\r\ncontract XWinToken {\r\n    using SafeMath for uint256;\r\n\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) balances;\r\n\r\n    /* Map between users and their approval addresses and amounts */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /* List of all token holders */\r\n    address[] allTokenHolders;\r\n\r\n    /* The name of the contract */\r\n    string public name;\r\n\r\n    /* The symbol for the contract */\r\n    string public symbol;\r\n\r\n    /* How many DPs are in use in this contract */\r\n    uint8 public decimals;\r\n\r\n    /* Defines the current supply of the token in its own units */\r\n    uint256 totalSupplyAmount = 0;\r\n\r\n    /* Defines the address of the ICO contract which is the only contract permitted to mint tokens. */\r\n    address public icoContractAddress;\r\n\r\n    /* Defines whether or not the fund is closed. */\r\n    bool public isClosed;\r\n\r\n    /* Defines the contract handling the ICO phase. */\r\n    IcoPhaseManagement icoPhaseManagement;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* Fired when the fund is eventually closed. */\r\n    event FundClosed();\r\n    \r\n    /* Our transfer event to fire whenever we shift SMRT around */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* Our approval event when one user approves another to control */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Create a new instance of this fund with links to other contracts that are required. */\r\n    function XWinToken(address _icoContractAddress, address _authenticationManagerAddress) {\r\n        // Setup defaults\r\n        name = \"XWin CryptoBet\";\r\n        symbol = \"XWIN\";\r\n        decimals = 8;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        icoPhaseManagement = IcoPhaseManagement(_icoContractAddress);\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\r\n\r\n        /* Store our special addresses */\r\n        icoContractAddress = _icoContractAddress;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    } \r\n\r\n    /* This modifier allows a method to only be called by account readers */\r\n    modifier accountReaderOnly {\r\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier fundSendablePhase {\r\n        // If it's in ICO phase, forbid it\r\n        //if (icoPhaseManagement.icoPhase())\r\n        //    throw;\r\n\r\n        // If it's abandoned, forbid it\r\n        if (icoPhaseManagement.icoAbandoned())\r\n            throw;\r\n\r\n        // We're good, funds can now be transferred\r\n        _;\r\n    }\r\n\r\n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\r\n    function transferFrom(address _from, address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(3) returns (bool) {\r\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\r\n            bool isNew = balances[_to] == 0;\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            if (isNew)\r\n                tokenOwnerAdd(_to);\r\n            if (balances[_from] == 0)\r\n                tokenOwnerRemove(_from);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Returns the total number of holders of this currency. */\r\n    function tokenHolderCount()  constant returns (uint256) {\r\n        return allTokenHolders.length;\r\n    }\r\n\r\n    /* Gets the token holder at the specified index. */\r\n    function tokenHolder(uint256 _index)  constant returns (address) {\r\n        return allTokenHolders[_index];\r\n    }\r\n \r\n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\r\n    function approve(address _spender, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Gets the total supply available of this token */\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupplyAmount;\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) fundSendablePhase onlyPayloadSize(2) returns (bool) {\r\n        /* Check if sender has balance and for overflows */\r\n        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\r\n            return false;\r\n\r\n        /* Do a check to see if they are new, if so we'll want to add it to our array */\r\n        bool isRecipientNew = balances[_to] == 0;\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        /* Consolidate arrays if they are new or if sender now has empty balance */\r\n        if (isRecipientNew)\r\n            tokenOwnerAdd(_to);\r\n        if (balances[msg.sender] == 0)\r\n            tokenOwnerRemove(msg.sender);\r\n\r\n        /* Fire notification event */\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerAdd(address _addr) internal {\r\n        /* First check if they already exist */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        for (uint256 i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr)\r\n                /* Already found so we can abort now */\r\n                return;\r\n        \r\n        /* They don't seem to exist, so let's add them */\r\n        allTokenHolders.length++;\r\n        allTokenHolders[allTokenHolders.length - 1] = _addr;\r\n    }\r\n\r\n    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\r\n    function tokenOwnerRemove(address _addr) internal {\r\n        /* Find out where in our array they are */\r\n        uint256 tokenHolderCount = allTokenHolders.length;\r\n        uint256 foundIndex = 0;\r\n        bool found = false;\r\n        uint256 i;\r\n        for (i = 0; i < tokenHolderCount; i++)\r\n            if (allTokenHolders[i] == _addr) {\r\n                foundIndex = i;\r\n                found = true;\r\n                break;\r\n            }\r\n        \r\n        /* If we didn't find them just return */\r\n        if (!found)\r\n            return;\r\n        \r\n        /* We now need to shuffle down the array */\r\n        for (i = foundIndex; i < tokenHolderCount - 1; i++)\r\n            allTokenHolders[i] = allTokenHolders[i + 1];\r\n        allTokenHolders.length--;\r\n    }\r\n\r\n    /* Mint new tokens - this can only be done by special callers (i.e. the ICO management) during the ICO phase. */\r\n    function mintTokens(address _address, uint256 _amount) onlyPayloadSize(2) {\r\n        /* Ensure we are the ICO contract calling */\r\n        if (msg.sender != icoContractAddress || !icoPhaseManagement.icoPhase())\r\n            throw;\r\n\r\n        /* Mint the tokens for the new address*/\r\n        bool isNew = balances[_address] == 0;\r\n        totalSupplyAmount = totalSupplyAmount.add(_amount);\r\n        balances[_address] = balances[_address].add(_amount);\r\n        if (isNew)\r\n            tokenOwnerAdd(_address);\r\n        Transfer(0, _address, _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract IcoPhaseManagement {\r\n    using SafeMath for uint256;\r\n    \r\n    /* Defines whether or not we are in the ICO phase */\r\n    bool public icoPhase = true;\r\n\r\n    /* Defines whether or not the ICO has been abandoned */\r\n    bool public icoAbandoned = false;\r\n\r\n    /* Defines whether or not the XWIN Token contract address has yet been set.  */\r\n    bool xwinContractDefined = false;\r\n    \r\n    /* Defines the sale price during ICO */\r\n    uint256 public icoUnitPrice = 3 finney;\r\n    \r\n    /* Main wallet for collecting ethers*/\r\n    address mainWallet=\"0x20ce46Bce85BFf0CA13b02401164D96B3806f56e\";\r\n    \r\n    // contract manager address\r\n    address manager = \"0xE3ff0BA0C6E7673f46C7c94A5155b4CA84a5bE0C\";\r\n    /* Wallets wor reserved tokens */\r\n    address reservedWallet1 = \"0x43Ceb8b8f755518e325898d95F3912aF16b6110C\";\r\n    address reservedWallet2 = \"0x11F386d6c7950369E8Da56F401d1727cf131816D\";\r\n    // flag - reserved tokens already distributed (can be distributed only once)\r\n    bool public reservedTokensDistributed;\r\n\r\n    /* If an ICO is abandoned and some withdrawals fail then this map allows people to request withdrawal of locked-in ether. */\r\n    mapping(address => uint256) public abandonedIcoBalances;\r\n\r\n    /* Defines our interface to the XWIN Token contract. */\r\n    XWinToken xWinToken;\r\n\r\n    /* Defines the admin contract we interface with for credentails. */\r\n    AuthenticationManager authenticationManager;\r\n\r\n    /* Defines the time that the ICO starts. */\r\n    uint256 public icoStartTime; \r\n\r\n    /* Defines the time that the ICO ends. */\r\n    uint256 public icoEndTime; \r\n\r\n    /* Defines our event fired when the ICO is closed */\r\n    event IcoClosed();\r\n\r\n    /* Defines our event fired if the ICO is abandoned */\r\n    event IcoAbandoned(string details);\r\n    \r\n    /* Ensures that once the ICO is over this contract cannot be used until the point it is destructed. */\r\n    modifier onlyDuringIco {\r\n        bool contractValid = xwinContractDefined && !xWinToken.isClosed();\r\n        if (!contractValid || (!icoPhase && !icoAbandoned)) throw;\r\n        _;\r\n    }\r\n\r\n    /* This code can be executed only after ICO */\r\n    modifier onlyAfterIco {\r\n        if ( icoEndTime  > now) throw;\r\n        _;\r\n    }\r\n\r\n    /* This modifier allows a method to only be called by current admins */\r\n    modifier adminOnly {\r\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\r\n        _;\r\n    }\r\n    \r\n    modifier managerOnly {\r\n        require (msg.sender==manager);\r\n        _;\r\n    }\r\n    \r\n\r\n    /* Create the ICO phase managerment and define the address of the main XWIN Token contract. */\r\n    function IcoPhaseManagement(address _authenticationManagerAddress) {\r\n        /* A basic sanity check */\r\n        icoStartTime = now;\r\n        icoEndTime = 1517270400;\r\n        /* Setup access to our other contracts and validate their versions */\r\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\r\n        reservedTokensDistributed = false;\r\n    }\r\n\r\n    /* Set the XWIN Token contract address as a one-time operation.  This happens after all the contracts are created and no\r\n       other functionality can be used until this is set. */\r\n    function setXWinContractAddress(address _xwinContractAddress) adminOnly {\r\n        /* This can only happen once in the lifetime of this contract */\r\n        if (xwinContractDefined)\r\n            throw;\r\n\r\n        /* Setup access to our other contracts and validate their versions */\r\n        xWinToken = XWinToken(_xwinContractAddress);\r\n\r\n        xwinContractDefined = true;\r\n    }\r\n    \r\n    function setTokenPrice(uint newPriceInWei) managerOnly {\r\n        icoUnitPrice = newPriceInWei;\r\n    }\r\n\r\n    /* Close the ICO phase and transition to execution phase */\r\n    function close() managerOnly onlyDuringIco {\r\n        // Forbid closing contract before the end of ICO\r\n        if (now <= icoEndTime)\r\n            throw;\r\n\r\n        // Close the ICO\r\n        icoPhase = false;\r\n        IcoClosed();\r\n\r\n        // Withdraw funds to the caller\r\n        // if (!msg.sender.send(this.balance))\r\n        //    throw;\r\n    }\r\n    \r\n    /* Sending reserved tokens (20% from all tokens was reserved in preICO) */\r\n    function distributeReservedTokens() managerOnly onlyAfterIco {\r\n        \r\n        require (!reservedTokensDistributed);\r\n        \r\n        uint extraTwentyPercents = xWinToken.totalSupply().div(4);\r\n        xWinToken.mintTokens(reservedWallet1,extraTwentyPercents.div(2));\r\n        xWinToken.mintTokens(reservedWallet2,extraTwentyPercents.div(2));\r\n        \r\n        reservedTokensDistributed = true;\r\n    }\r\n    \r\n    /* Handle receiving ether in ICO phase - we work out how much the user has bought, allocate a suitable balance and send their change */\r\n    function () onlyDuringIco payable {\r\n        // Forbid funding outside of ICO\r\n        if (now < icoStartTime || now > icoEndTime)\r\n            throw;\r\n\r\n        /* Determine how much they've actually purhcased and any ether change */\r\n        //uint256 tokensPurchased = msg.value.div(icoUnitPrice);\r\n        //uint256 purchaseTotalPrice = tokensPurchased * icoUnitPrice;\r\n        //uint256 change = msg.value.sub(purchaseTotalPrice);\r\n\r\n        /* Increase their new balance if they actually purchased any */\r\n        //if (tokensPurchased > 0)\r\n        xWinToken.mintTokens(msg.sender, msg.value.mul(100000000).div(icoUnitPrice));\r\n\r\n        mainWallet.send(msg.value);\r\n        /* Send change back to recipient */\r\n        /*if (change > 0 && !msg.sender.send(change))\r\n            throw;*/\r\n    }\r\n    \r\n}\r\n\r\ncontract DividendManager {\r\n    using SafeMath for uint256;\r\n\r\n    /* Our handle to the XWIN Token contract. */\r\n    XWinToken xwinContract;\r\n\r\n    /* Handle payments we couldn't make. */\r\n    mapping (address => uint256) public dividends;\r\n\r\n    /* Indicates a payment is now available to a shareholder */\r\n    event PaymentAvailable(address addr, uint256 amount);\r\n\r\n    /* Indicates a dividend payment was made. */\r\n    event DividendPayment(uint256 paymentPerShare, uint256 timestamp);\r\n\r\n    /* Create our contract with references to other contracts as required. */\r\n    function DividendManager(address _xwinContractAddress) {\r\n        /* Setup access to our other contracts and validate their versions */\r\n        xwinContract = XWinToken(_xwinContractAddress);\r\n    }\r\n\r\n    /* Makes a dividend payment - we make it available to all senders then send the change back to the caller.  We don't actually send the payments to everyone to reduce gas cost and also to \r\n       prevent potentially getting into a situation where we have recipients throwing causing dividend failures and having to consolidate their dividends in a separate process. */\r\n    function () payable {\r\n        if (xwinContract.isClosed())\r\n            throw;\r\n\r\n        /* Determine how much to pay each shareholder. */\r\n        uint256 validSupply = xwinContract.totalSupply();\r\n        uint256 paymentPerShare = msg.value.div(validSupply);\r\n        if (paymentPerShare == 0)\r\n            throw;\r\n\r\n        /* Enum all accounts and send them payment */\r\n        uint256 totalPaidOut = 0;\r\n        for (uint256 i = 0; i < xwinContract.tokenHolderCount(); i++) {\r\n            address addr = xwinContract.tokenHolder(i);\r\n            uint256 dividend = paymentPerShare * xwinContract.balanceOf(addr);\r\n            dividends[addr] = dividends[addr].add(dividend);\r\n            PaymentAvailable(addr, dividend);\r\n            totalPaidOut = totalPaidOut.add(dividend);\r\n        }\r\n\r\n        // Attempt to send change\r\n        /*uint256 remainder = msg.value.sub(totalPaidOut);\r\n        if (remainder > 0 && !msg.sender.send(remainder)) {\r\n            dividends[msg.sender] = dividends[msg.sender].add(remainder);\r\n            PaymentAvailable(msg.sender, remainder);\r\n        }*/\r\n\r\n        /* Audit this */\r\n        DividendPayment(paymentPerShare, now);\r\n    }\r\n\r\n    /* Allows a user to request a withdrawal of their dividend in full. */\r\n    function withdrawDividend() {\r\n        // Ensure we have dividends available\r\n        if (dividends[msg.sender] == 0)\r\n            throw;\r\n        \r\n        // Determine how much we're sending and reset the count\r\n        uint256 dividend = dividends[msg.sender];\r\n        dividends[msg.sender] = 0;\r\n\r\n        // Attempt to withdraw\r\n        if (!msg.sender.send(dividend))\r\n            throw;\r\n    }\r\n}\r\n\r\n//interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\n/**\r\n * The shareholder association contract \r\n */\r\ncontract XWinAssociation {\r\n    \r\n    address public manager = \"0xE3ff0BA0C6E7673f46C7c94A5155b4CA84a5bE0C\";\r\n\r\n    uint public changeManagerQuorum = 80; // in % of tokens\r\n    \r\n    uint public debatingPeriod = 3 days;\r\n    Proposal[] public proposals;\r\n    uint public numProposals;\r\n    XWinToken public sharesTokenAddress;\r\n\r\n    event ProposalAdded(uint proposalID, address newManager, string description);\r\n    event Voted(uint proposalID, bool position, address voter);\r\n    event ProposalTallied(uint proposalID, uint result,bool active);\r\n    event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress);\r\n\r\n    struct Proposal {\r\n        address newManager;\r\n        string description;\r\n        uint votingDeadline;\r\n        bool executed;\r\n        bool proposalPassed;\r\n        uint numberOfVotes;\r\n        bytes32 proposalHash;\r\n        Vote[] votes;\r\n        mapping (address => bool) voted;\r\n    }\r\n\r\n    struct Vote {\r\n        bool inSupport;\r\n        address voter;\r\n    }\r\n\r\n    // Modifier that allows only shareholders to vote and create new proposals\r\n    modifier onlyShareholders {\r\n        require(sharesTokenAddress.balanceOf(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n    // Modifier that allows only manager\r\n    modifier onlyManager {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     */\r\n    function XWinAssociation(address _xwinContractAddress)  {\r\n        sharesTokenAddress = XWinToken(_xwinContractAddress);\r\n    }\r\n    \r\n    // change debating period by manager\r\n    function changeVoteRules (uint debatingPeriodInDays) onlyManager {\r\n        debatingPeriod = debatingPeriodInDays * 1 days;\r\n    }\r\n\r\n    // transfer ethers from contract account    \r\n    function transferEthers(address receiver, uint valueInWei) onlyManager {\r\n        uint value = valueInWei;\r\n        require ( this.balance > value);\r\n        receiver.send(value);\r\n    }\r\n    \r\n    function () payable {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Add Proposal\r\n     */\r\n    function newProposal(\r\n        address newManager,\r\n        string managerDescription\r\n    )\r\n        onlyShareholders\r\n        returns (uint proposalID)\r\n    {\r\n        proposalID = proposals.length++;\r\n        Proposal storage p = proposals[proposalID];\r\n        p.newManager = newManager;\r\n        p.description = managerDescription;\r\n        p.proposalHash = sha3(newManager);\r\n        p.votingDeadline = now + debatingPeriod;\r\n        p.executed = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes = 0;\r\n        ProposalAdded(proposalID, newManager, managerDescription);\r\n        numProposals = proposalID+1;\r\n\r\n        return proposalID;\r\n    }\r\n\r\n    /**\r\n     * Check if a proposal code matches\r\n     */\r\n    function checkProposalCode(\r\n        uint proposalNumber,\r\n        address newManager\r\n    )\r\n        constant\r\n        returns (bool codeChecksOut)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        return p.proposalHash == sha3(newManager);\r\n    }\r\n\r\n    /**\r\n     * Log a vote for a proposal\r\n     *\r\n     * Vote `supportsProposal? in support of : against` proposal #`proposalNumber`\r\n     *\r\n     * @param proposalNumber number of proposal\r\n     * @param supportsProposal either in favor or against it\r\n     */\r\n    function vote(\r\n        uint proposalNumber,\r\n        bool supportsProposal\r\n    )\r\n        onlyShareholders\r\n        returns (uint voteID)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        require(p.voted[msg.sender] != true);\r\n\r\n        voteID = p.votes.length++;\r\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\r\n        p.voted[msg.sender] = true;\r\n        p.numberOfVotes = voteID +1;\r\n        Voted(proposalNumber,  supportsProposal, msg.sender);\r\n        return voteID;\r\n    }\r\n\r\n    /**\r\n     * Finish vote\r\n     */\r\n    function executeProposal(uint proposalNumber, address newManager) {\r\n        Proposal storage p = proposals[proposalNumber];\r\n\r\n        require(now > p.votingDeadline                                          // If it is past the voting deadline\r\n            && !p.executed                                                      // and it has not already been executed\r\n            && p.proposalHash == sha3(newManager));                             // and the supplied code matches the proposal...\r\n\r\n        // ...then tally the results\r\n        uint yea = 0;\r\n \r\n        for (uint i = 0; i <  p.votes.length; ++i) {\r\n            Vote storage v = p.votes[i];\r\n            uint voteWeight = sharesTokenAddress.balanceOf(v.voter);\r\n            if (v.inSupport) \r\n                yea += voteWeight;\r\n        }\r\n\r\n        if ( yea > changeManagerQuorum * 10**sharesTokenAddress.decimals() ) {\r\n            // Proposal passed; execute the transaction\r\n\r\n            manager = newManager;\r\n            p.executed = true;\r\n\r\n            p.proposalPassed = true;\r\n        }\r\n\r\n        // Fire Events\r\n        ProposalTallied(proposalNumber, yea , p.proposalPassed);\r\n    }\r\n}\r\n\r\n\r\ncontract XWinBet {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event BetAdded(uint betId, address bettor, uint value, uint rate, uint deadline);\r\n    event BetExecuted(uint betId, address bettor, uint winValue);\r\n    event FoundsTransferd(address dao, uint value);\r\n    \r\n    XWinAssociation dao;        // address of XWin Association contract\r\n    \r\n    uint public numBets;        // count of bets\r\n    uint public reservedWeis;   // reserved weis for actual bets\r\n    \r\n    struct Bet {\r\n        address bettor;\r\n        uint value;\r\n        uint rate;      // with 3 symbols after point, for example: 1234 = 1.234\r\n        uint deadline;\r\n        bytes32 betHash;\r\n        bool executed;\r\n    }\r\n    \r\n    Bet[] public bets;\r\n    \r\n    // Modifier that allows only manager\r\n    modifier onlyManager {\r\n        require(msg.sender == dao.manager());\r\n        _;\r\n    }\r\n    \r\n    function XWinBet(address daoContract) {\r\n        dao = XWinAssociation(daoContract);\r\n    }\r\n    \r\n    function () payable {\r\n    }\r\n    \r\n    function transferEthersToDao(uint valueInEthers) onlyManager {\r\n        require(this.balance.sub(reservedWeis) >= valueInEthers * 1 ether);\r\n        dao.transfer(valueInEthers * 1 ether);\r\n        FoundsTransferd(dao, valueInEthers * 1 ether);\r\n    }\r\n    \r\n    function bet (uint rate, uint timeLimitInMinutes) payable returns (uint betID)\r\n    {\r\n        uint reserved =  msg.value.mul(rate).div(1000);\r\n        require ( this.balance > reservedWeis.add(reserved));\r\n        reservedWeis = reservedWeis.add(reserved);\r\n        \r\n        betID = bets.length++;\r\n        Bet storage b = bets[betID];\r\n        b.bettor = msg.sender;\r\n        b.value = msg.value;\r\n        b.rate = rate;\r\n        b.deadline = now + timeLimitInMinutes * 1 minutes;\r\n        b.betHash = sha3(betID,msg.sender,msg.value,rate,b.deadline);\r\n        b.executed = false;\r\n\r\n        BetAdded(betID, msg.sender,msg.value,rate,b.deadline);\r\n        numBets = betID+1;\r\n\r\n        return betID;\r\n    }\r\n    \r\n    function executeBet (uint betId, bool win) \r\n    {\r\n        \r\n        Bet b = bets[betId];\r\n        require (now > b.deadline);\r\n        require (!b.executed);\r\n        require (msg.sender == b.bettor);\r\n        require (sha3(betId,msg.sender,b.value,b.rate,b.deadline)==b.betHash);\r\n    \r\n        uint winValue = b.value.mul(b.rate).div(1000);\r\n        reservedWeis = reservedWeis.sub(winValue);\r\n        if (win)\r\n        {\r\n            msg.sender.transfer(winValue);\r\n            BetExecuted(betId,msg.sender,winValue);\r\n        }\r\n        else\r\n        {\r\n            BetExecuted(betId, msg.sender,0);\r\n        }\r\n        \r\n        b.executed = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentOrPastAccountReader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAccountReader\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAccountReader\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentOrPastAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentAccountReader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountReaderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountReaderRemoved\",\"type\":\"event\"}]","ContractName":"AuthenticationManager","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6e6333c2b49643c0ce74683b753b395e43b383e07c2208c6bc97ae8b590423a5"}]}