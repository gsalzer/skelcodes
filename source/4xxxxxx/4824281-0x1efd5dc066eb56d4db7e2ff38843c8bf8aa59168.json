{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * The Bitkom Token (BTT) has a fixed supply and restricts the ability\r\n * to transfer tokens until the owner has called the enableTransfer()\r\n * function.\r\n *\r\n * The owner can associate the token with a token sale contract. In that\r\n * case, the token balance is moved to the token sale contract, which\r\n * in turn can transfer its tokens to contributors to the sale.\r\n */\r\ncontract BitkomToken is StandardToken, Ownable {\r\n\r\n    // Constants\r\n    string  public constant name = \"Bitkom Token\";\r\n    string  public constant symbol = \"BTT\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 50000000 * 1 ether;\r\n    uint256 public constant CROWDSALE_ALLOWANCE =  33500000 * 1 ether;\r\n    uint256 public constant TEAM_ALLOWANCE =  16500000 * 1 ether;\r\n\r\n    // Properties\r\n    uint256 public crowdsaleAllowance;               // the number of tokens available for crowdsales\r\n    uint256 public teamAllowance;               // the number of tokens available for the administrator\r\n    address public crowdsaleAddr;                    // the address of a crowdsale currently selling this token\r\n    address public teamAddr;                    // the address of the team account\r\n    bool    public transferEnabled = false;     // indicates if transferring tokens is enabled or not\r\n\r\n    // Modifiers\r\n    modifier onlyWhenTransferEnabled() {\r\n        if (!transferEnabled) {\r\n            require(msg.sender == teamAddr || msg.sender == crowdsaleAddr);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * The listed addresses are not valid recipients of tokens.\r\n     *\r\n     * 0x0           - the zero address is not valid\r\n     * this          - the contract itself should not receive tokens\r\n     * owner         - the owner has all the initial tokens, but cannot receive any back\r\n     * teamAddr      - the team has an allowance of tokens to transfer, but does not receive any\r\n     * crowdsaleAddr      - the sale has an allowance of tokens to transfer, but does not receive any\r\n     */\r\n    modifier validDestination(address _to) {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n        require(_to != owner);\r\n        require(_to != address(teamAddr));\r\n        require(_to != address(crowdsaleAddr));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor - instantiates token supply and allocates balanace of\r\n     * to the owner (msg.sender).\r\n     */\r\n    function BitkomToken(address _team) public {\r\n        // the owner is a custodian of tokens that can\r\n        // give an allowance of tokens for crowdsales\r\n        // or to the admin, but cannot itself transfer\r\n        // tokens; hence, this requirement\r\n        require(msg.sender != _team);\r\n\r\n        totalSupply = INITIAL_SUPPLY;\r\n        crowdsaleAllowance = CROWDSALE_ALLOWANCE;\r\n        teamAllowance = TEAM_ALLOWANCE;\r\n\r\n        // mint all tokens\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        teamAddr = _team;\r\n        approve(teamAddr, teamAllowance);\r\n    }\r\n\r\n    /**\r\n     * Associates this token with a current crowdsale, giving the crowdsale\r\n     * an allowance of tokens from the crowdsale supply. This gives the\r\n     * crowdsale the ability to call transferFrom to transfer tokens to\r\n     * whomever has purchased them.\r\n     *\r\n     * Note that if _amountForSale is 0, then it is assumed that the full\r\n     * remaining crowdsale supply is made available to the crowdsale.\r\n     *\r\n     * @param _crowdsaleAddr The address of a crowdsale contract that will sell this token\r\n     * @param _amountForSale The supply of tokens provided to the crowdsale\r\n     */\r\n    function setCrowdsale(address _crowdsaleAddr, uint256 _amountForSale) external onlyOwner {\r\n        require(!transferEnabled);\r\n        require(_amountForSale <= crowdsaleAllowance);\r\n\r\n        // if 0, then full available crowdsale supply is assumed\r\n        uint amount = (_amountForSale == 0) ? crowdsaleAllowance : _amountForSale;\r\n\r\n        // Clear allowance of old, and set allowance of new\r\n        approve(crowdsaleAddr, 0);\r\n        approve(_crowdsaleAddr, amount);\r\n\r\n        crowdsaleAddr = _crowdsaleAddr;\r\n    }\r\n\r\n    /**\r\n     * Enables the ability of anyone to transfer their tokens. This can\r\n     * only be called by the token owner. Once enabled, it is not\r\n     * possible to disable transfers.\r\n     */\r\n    function enableTransfer() external onlyOwner {\r\n        transferEnabled = true;\r\n        approve(crowdsaleAddr, 0);\r\n        approve(teamAddr, 0);\r\n        crowdsaleAllowance = 0;\r\n        teamAllowance = 0;\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transfer function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transfer(address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Overrides ERC20 transferFrom function with modifier that prevents the\r\n     * ability to transfer tokens until after transfers have been enabled.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        if (result) {\r\n            if (msg.sender == crowdsaleAddr)\r\n                crowdsaleAllowance = crowdsaleAllowance.sub(_value);\r\n            if (msg.sender == teamAddr)\r\n                teamAllowance = teamAllowance.sub(_value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens if msg.sender == owner\r\n     * or transferEnabled == true\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        require(transferEnabled || msg.sender == owner);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n    }\r\n}\r\n\r\n/**\r\n * The BitkomSale smart contract is used for selling BitkomToken\r\n * tokens (BTT). It does so by converting ETH received into a quantity of\r\n * tokens that are transferred to the contributor via the ERC20-compatible\r\n * transferFrom() function.\r\n */\r\ncontract BitkomSale is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant RATE = 2500;       // constant for converting ETH to BTT\r\n    uint public constant GAS_LIMIT_IN_WEI = 50000000000 wei;\r\n    uint public constant MIN_CONTRIBUTION = 0.1 * 1 ether;  // lower bound on amount a contributor can send (in wei)\r\n    uint public constant TOKEN_HARDCAP = 33500000 * 1 ether;  // lower bound on amount a contributor can send (in wei)\r\n\r\n    bool public fundingCapReached = false;  // funding cap has been reached\r\n    bool public tokenHardcapReached = false;  // TOKEN_HARDCAP has been reached\r\n    bool public softcapReached = false;     // softcap has been reached\r\n    bool public saleClosed = false;         // crowdsale is closed or not\r\n    bool private rentrancy_lock = false;    // prevent certain functions from recursize calls\r\n\r\n    uint public fundingCap;                 // upper bound on amount that can be raised (in wei)\r\n    uint256 public soldTokens = 0;          // amount of sold tokens \r\n    uint256 public softCapInTokens = 1600000 * 1 ether;   // softcap in tokens for project launch\r\n\r\n    uint public weiRaised;                  // amount of raised wei\r\n    uint public weiRefunded;                  // amount of refunded wei\r\n\r\n    uint public startTime;                  // UNIX timestamp for start of sale\r\n    uint public deadline;                   // UNIX timestamp for end (deadline) of sale\r\n\r\n    address public beneficiary;             // The beneficiary is the future recipient of the funds\r\n\r\n    BitkomToken public tokenReward;     // The token being sold\r\n\r\n    mapping (address => uint256) public balanceOf;   // tracks the amount of wei contributed by address during all sales\r\n    mapping (address => bool) refunded; // tracks the status of refunding for each address\r\n\r\n    // Events\r\n    event CapReached(address _beneficiary, uint _weiRaised);\r\n    event SoftcapReached(address _beneficiary, uint _weiRaised);\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n    event Refunded(address indexed holder, uint256 amount);\r\n\r\n    // Modifiers\r\n    modifier beforeDeadline()   { require (currentTime() < deadline); _; }\r\n    modifier afterDeadline()    { require (currentTime() >= deadline); _; }\r\n    modifier afterStartTime()   { require (currentTime() >= startTime); _; }\r\n    modifier saleNotClosed()    { require (!saleClosed); _; }\r\n    modifier softCapRaised()    { require (softcapReached); _; }\r\n\r\n    modifier nonReentrant() {\r\n        require(!rentrancy_lock);\r\n        rentrancy_lock = true;\r\n        _;\r\n        rentrancy_lock = false;\r\n    }\r\n\r\n    /**\r\n     * Constructor for a crowdsale of BitkomToken tokens.\r\n     *\r\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\r\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\r\n     * @param start                         the start time (UNIX timestamp)\r\n     * @param durationInDays                the duration of the crowdsale in days\r\n     * @param addressOfTokenUsedAsReward    address of the token being sold\r\n     */\r\n    function BitkomSale(\r\n        address ifSuccessfulSendTo,\r\n        uint256 fundingCapInEthers,\r\n        uint256 start,\r\n        uint256 durationInDays,\r\n        address addressOfTokenUsedAsReward\r\n    ) public \r\n    {      \r\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\r\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\r\n        require(durationInDays > 0);\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingCap = fundingCapInEthers * 1 ether;\r\n        startTime = start;\r\n        deadline = start + (durationInDays * 1 days);\r\n        tokenReward = BitkomToken(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n\r\n    function buy()\r\n        payable\r\n        public\r\n        whenNotPaused\r\n        beforeDeadline\r\n        afterStartTime\r\n        saleNotClosed\r\n        nonReentrant\r\n    {\r\n        uint amount = msg.value;\r\n        require(amount >= MIN_CONTRIBUTION);\r\n\r\n        weiRaised = weiRaised.add(amount);\r\n\r\n        //require(weiRaised <= fundingCap);\r\n        // if we overflow the fundingCap, transfer the overflow amount\r\n        if (weiRaised > fundingCap) {\r\n            uint overflow = weiRaised.sub(fundingCap);\r\n            amount = amount.sub(overflow);\r\n            weiRaised = fundingCap;\r\n            // transfer overflow back to the user\r\n            msg.sender.transfer(overflow);\r\n        }\r\n\r\n        // Calculate bonus for user\r\n        uint256 bonus = calculateBonus();\r\n\r\n        // Calculate amount of tokens for user\r\n        uint256 tokensAmountForUser = (amount.mul(RATE)).mul(bonus);\r\n\r\n        soldTokens = soldTokens.add(tokensAmountForUser);\r\n\r\n        // 1 - вернуть лишние бабки и отдать токены чтоб их было впритык\r\n        if (soldTokens > TOKEN_HARDCAP) {\r\n            uint256 overflowInTokens = soldTokens.sub(TOKEN_HARDCAP);\r\n            uint256 overflowInWei = (overflowInTokens.div(bonus)).div(RATE);\r\n            amount = amount.sub(overflowInWei);\r\n            weiRaised = weiRaised.sub(overflowInWei);\r\n            // transfer overflow back to the user\r\n            msg.sender.transfer(overflowInWei);\r\n\r\n            // update amount of tokens\r\n            tokensAmountForUser = tokensAmountForUser.sub(overflowInTokens);\r\n\r\n            soldTokens = TOKEN_HARDCAP;\r\n        }\r\n\r\n\r\n        // Update the sender's balance of wei contributed and the total amount raised\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n\r\n        // Transfer the tokens from the crowdsale supply to the sender\r\n        if (!tokenReward.transferFrom(tokenReward.owner(), msg.sender, tokensAmountForUser)) {\r\n            revert();\r\n        }\r\n\r\n        FundTransfer(msg.sender, amount, true);\r\n\r\n        if (soldTokens >= softCapInTokens && !softcapReached) {\r\n            softcapReached = true;\r\n            SoftcapReached(beneficiary, weiRaised);\r\n        }\r\n\r\n        checkCaps();\r\n    }\r\n\r\n    /**\r\n     * The owner can terminate the crowdsale at any time.\r\n     */\r\n    function terminate() external onlyOwner {\r\n        saleClosed = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * The owner can call this function to withdraw the funds that\r\n     * have been sent to this contract. The funds will be sent to\r\n     * the beneficiary specified when the crowdsale was created.\r\n     * ONLY IF SOLDTOKENS >= SOFTCAPINTOKENS !!!!!!!!!!!!!!!!!!\r\n     */\r\n    function ownerSafeWithdrawal() external onlyOwner softCapRaised nonReentrant {\r\n        uint balanceToSend = this.balance;\r\n        beneficiary.transfer(balanceToSend);\r\n        FundTransfer(beneficiary, balanceToSend, false);\r\n    }\r\n\r\n    /**\r\n     * Checks if the funding cap or TOKEN_HARDCAP has been reached. \r\n     * If it has, then the CapReached event is triggered.\r\n     */\r\n    function checkCaps() internal {\r\n        if (weiRaised == fundingCap) {\r\n            // Check if the funding cap has been reached\r\n            fundingCapReached = true;\r\n            saleClosed = true;\r\n            CapReached(beneficiary, weiRaised);\r\n        }\r\n        if (soldTokens == TOKEN_HARDCAP) {\r\n            // Check if the funding cap has been reached\r\n            tokenHardcapReached = true;\r\n            saleClosed = true;\r\n            CapReached(beneficiary, weiRaised);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current time.\r\n    */\r\n    function currentTime() internal constant returns (uint _currentTime) {\r\n        return now;\r\n    }\r\n\r\n    /**\r\n     * Returns the bonus value.\r\n    */\r\n    function calculateBonus() internal constant returns (uint) {\r\n        if (soldTokens >= 0 && soldTokens <= 10000000 * 1 ether) {\r\n            return 4;\r\n        } else if (soldTokens > 10000000 * 1 ether && soldTokens <= 20000000 * 1 ether) {\r\n            return 3;\r\n        } else if (soldTokens > 20000000 * 1 ether && soldTokens <= 30000000 * 1 ether) {\r\n            return 2;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    function refund() external afterDeadline {\r\n        require(!softcapReached);\r\n        require(refunded[msg.sender] == false);\r\n\r\n        uint256 balance = this.balanceOf(msg.sender);\r\n        require(balance > 0);\r\n\r\n        uint refund = balance;\r\n        if (refund > this.balance) {\r\n            refund = this.balance;\r\n        }\r\n\r\n        if (!msg.sender.send(refund)) {\r\n            revert();\r\n        }\r\n        refunded[msg.sender] = true;\r\n        weiRefunded = weiRefunded.add(refund);\r\n        Refunded(msg.sender, refund);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerSafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_HARDCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_LIMIT_IN_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHardcapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingCapInEthers\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"name\":\"SoftcapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitkomSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000457e563e37c2abcd3f637df16048b6ff6750ee280000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000005a477fc0000000000000000000000000000000000000000000000000000000000000001f000000000000000000000000e1bf62429e6d20f19353ad8d71c5b174ef90d9b6","Library":"","SwarmSource":"bzzr://982da4338647cb70c6087c087e7c4d71fdd1490c5a28a8b33a5b9d32fb2a915c"}]}