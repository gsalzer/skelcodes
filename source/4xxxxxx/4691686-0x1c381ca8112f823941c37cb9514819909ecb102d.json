{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  modifier onlyPayloadSize(uint size) {\r\n    assert(msg.data.length == size + 4);\r\n    _;\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  mapping (address => bool) public crowdsaleContracts;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(this, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BSEToken is MintableToken {\r\n\r\n  string public constant name = \" BLACK SNAIL ENERGY \";\r\n\r\n  string public constant symbol = \"BSE\";\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private rentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!rentrancy_lock);\r\n    rentrancy_lock = true;\r\n    _;\r\n    rentrancy_lock = false;\r\n  }\r\n}\r\n\r\ncontract Stateful {\r\n  enum State {\r\n  Init,\r\n  PreIco,\r\n  PreIcoPaused,\r\n  preIcoFinished,\r\n  ICO,\r\n  salePaused,\r\n  CrowdsaleFinished,\r\n  companySold\r\n  }\r\n  State public state = State.Init;\r\n\r\n  event StateChanged(State oldState, State newState);\r\n\r\n  function setState(State newState) internal {\r\n    State oldState = state;\r\n    state = newState;\r\n    StateChanged(oldState, newState);\r\n  }\r\n}\r\n\r\n\r\ncontract FiatContract {\r\n  function ETH(uint _id) constant returns (uint256);\r\n  function USD(uint _id) constant returns (uint256);\r\n  function EUR(uint _id) constant returns (uint256);\r\n  function GBP(uint _id) constant returns (uint256);\r\n  function updatedAt(uint _id) constant returns (uint);\r\n}\r\n\r\ncontract Crowdsale is Ownable, ReentrancyGuard, Stateful {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => uint) preICOinvestors;\r\n  mapping (address => uint) ICOinvestors;\r\n\r\n  BSEToken public token ;\r\n  uint256 public startICO;\r\n  uint256 public startPreICO;\r\n  uint256 public period;\r\n  uint256 public constant rateCent = 2000000000000000;\r\n  \r\n  uint256 public constant preICOTokenHardCap = 440000 * 1 ether;\r\n  uint256 public constant ICOTokenHardCap = 1540000 * 1 ether;\r\n  uint256 public collectedCent;\r\n  uint256 day = 86400; // sec in day\r\n  uint256 public soldTokens;\r\n  uint256 public priceUSD; // format 1 cent = priceUSD * wei\r\n\r\n\r\n  address multisig;\r\n  address public oracle;\r\n\r\n\r\n  modifier onlyOwnerOrOracle() {\r\n    require(msg.sender == oracle || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function changeOracle(address _oracle) onlyOwner external {\r\n    require(_oracle != 0);\r\n    oracle = _oracle;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require((state == State.PreIco || state == State.ICO) &&(now < startICO + period || now < startPreICO + period));\r\n    _;\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    require(soldTokens < getHardcap());\r\n    _;\r\n  }\r\n\r\n  function getHardcap() internal returns(uint256) {\r\n    if (state == State.PreIco) {\r\n      return preICOTokenHardCap;\r\n    }\r\n    else {\r\n      if (state == State.ICO) {\r\n        return ICOTokenHardCap;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function Crowdsale(address _multisig, uint256 _priceUSD) {\r\n    priceUSD = _priceUSD;\r\n    multisig = _multisig;\r\n    token = new BSEToken();\r\n\r\n  }\r\n  function startCompanySell() onlyOwner {\r\n    require(state== State.CrowdsaleFinished);\r\n    setState(State.companySold);\r\n  }\r\n\r\n  // for mint tokens to USD investor\r\n  function usdSale(address _to, uint _valueUSD) onlyOwner  {\r\n    uint256 valueCent = _valueUSD * 100;\r\n    uint256 tokensAmount = rateCent.mul(valueCent);\r\n    collectedCent += valueCent;\r\n    token.mint(_to, tokensAmount);\r\n    if (state == State.ICO || state == State.preIcoFinished) {\r\n      ICOinvestors[_to] += tokensAmount;\r\n    } else {\r\n      preICOinvestors[_to] += tokensAmount;\r\n    }\r\n    soldTokens += tokensAmount;\r\n  }\r\n\r\n  function pauseSale() onlyOwner {\r\n    require(state == State.ICO);\r\n    setState(State.salePaused);\r\n  }\r\n\r\n  function pausePreSale() onlyOwner {\r\n    require(state == State.PreIco);\r\n    setState(State.PreIcoPaused);\r\n  }\r\n\r\n  function startPreIco(uint256 _period, uint256 _priceUSD) onlyOwner {\r\n    require(_period > 0);\r\n    require(state == State.Init || state == State.PreIcoPaused);\r\n    priceUSD = _priceUSD;\r\n    startPreICO = now;\r\n    period = _period * day;\r\n    setState(State.PreIco);\r\n  }\r\n\r\n  function finishPreIco() onlyOwner {\r\n    require(state == State.PreIco);\r\n    setState(State.preIcoFinished);\r\n    bool isSent = multisig.call.gas(3000000).value(this.balance)();\r\n    require(isSent);\r\n  }\r\n\r\n  function startIco(uint256 _period, uint256 _priceUSD) onlyOwner {\r\n    require(_period > 0);\r\n    require(state == State.PreIco || state == State.salePaused || state == State.preIcoFinished);\r\n    priceUSD = _priceUSD;\r\n    startICO = now;\r\n    period = _period * day;\r\n    setState(State.ICO);\r\n  }\r\n\r\n  function setPriceUSD(uint256 _priceUSD) onlyOwnerOrOracle {\r\n    priceUSD = _priceUSD;\r\n  }\r\n\r\n  function finishICO() onlyOwner {\r\n    require(state == State.ICO);\r\n    setState(State.CrowdsaleFinished);\r\n    bool isSent = multisig.call.gas(3000000).value(this.balance)();\r\n    require(isSent);\r\n\r\n  }\r\n  function finishMinting() onlyOwner {\r\n\r\n    token.finishMinting();\r\n\r\n  }\r\n\r\n  function getDouble() nonReentrant {\r\n    require (state == State.ICO || state == State.companySold);\r\n    uint256 extraTokensAmount;\r\n    if (state == State.ICO) {\r\n      extraTokensAmount = preICOinvestors[msg.sender];\r\n      preICOinvestors[msg.sender] = 0;\r\n      token.mint(msg.sender, extraTokensAmount);\r\n      ICOinvestors[msg.sender] += extraTokensAmount;\r\n    }\r\n    else {\r\n      if (state == State.companySold) {\r\n        extraTokensAmount = preICOinvestors[msg.sender] + ICOinvestors[msg.sender];\r\n        preICOinvestors[msg.sender] = 0;\r\n        ICOinvestors[msg.sender] = 0;\r\n        token.mint(msg.sender, extraTokensAmount);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function mintTokens() payable saleIsOn isUnderHardCap nonReentrant {\r\n    uint256 valueWEI = msg.value;\r\n    uint256 valueCent = valueWEI.div(priceUSD);\r\n    uint256 tokens = rateCent.mul(valueCent);\r\n    uint256 hardcap = getHardcap();\r\n    if (soldTokens + tokens > hardcap) {\r\n      tokens = hardcap.sub(soldTokens);\r\n      valueCent = tokens.div(rateCent);\r\n      valueWEI = valueCent.mul(priceUSD);\r\n      uint256 change = msg.value - valueWEI;\r\n      bool isSent = msg.sender.call.gas(3000000).value(change)();\r\n      require(isSent);\r\n    }\r\n    token.mint(msg.sender, tokens);\r\n    collectedCent += valueCent;\r\n    soldTokens += tokens;\r\n    if (state == State.PreIco) {\r\n      preICOinvestors[msg.sender] += tokens;\r\n    }\r\n    else {\r\n      ICOinvestors[msg.sender] += tokens;\r\n    }\r\n  }\r\n\r\n  function () payable {\r\n    mintTokens();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rateCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"name\":\"setPriceUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOTokenHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCompanySell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOTokenHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDouble\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_valueUSD\",\"type\":\"uint256\"}],\"name\":\"usdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"name\":\"startPreIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007ab8e59919594e1a183fd0b08433cd03a33bd1ae000000000000000000000000000000000000000000000000000015523e43ce62","Library":"","SwarmSource":"bzzr://afff1c5b0c8f6c957ee0c78ac4d73cb69ca91db352e21c4acff3cd25bfba01f3"}]}