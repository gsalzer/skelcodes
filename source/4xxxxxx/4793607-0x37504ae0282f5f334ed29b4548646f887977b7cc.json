{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract EtherRock {\r\n    \r\n    struct Rock {\r\n        address owner;\r\n        bool currentlyForSale;\r\n        uint price;\r\n        uint timesSold;\r\n    }\r\n    \r\n    mapping (uint => Rock) public rocks;\r\n    \r\n    mapping (address => uint[]) public rockOwners;\r\n\r\n    uint public latestNewRockForSale;\r\n    \r\n    address owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function EtherRock() {\r\n        rocks[0].price = 10**15;\r\n        rocks[0].currentlyForSale = true;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function getRockInfo (uint rockNumber) returns (address, bool, uint, uint) {\r\n        return (rocks[rockNumber].owner, rocks[rockNumber].currentlyForSale, rocks[rockNumber].price, rocks[rockNumber].timesSold);\r\n    }\r\n    \r\n    function rockOwningHistory (address _address) returns (uint[]) {\r\n        return rockOwners[_address];\r\n    }\r\n    \r\n    function buyRock (uint rockNumber) payable {\r\n        require(rocks[rockNumber].currentlyForSale = true);\r\n        require(msg.value == rocks[rockNumber].price);\r\n        rocks[rockNumber].currentlyForSale = false;\r\n        rocks[rockNumber].timesSold++;\r\n        if (rockNumber != latestNewRockForSale) {\r\n            rocks[rockNumber].owner.transfer(rocks[rockNumber].price);\r\n        }\r\n        rocks[rockNumber].owner = msg.sender;\r\n        rockOwners[msg.sender].push(rockNumber);\r\n        if (rockNumber == latestNewRockForSale) {\r\n            if (rockNumber != 99) {\r\n                latestNewRockForSale++;\r\n                rocks[latestNewRockForSale].price = 10**15 + (latestNewRockForSale**2 * 10**15);\r\n                rocks[latestNewRockForSale].currentlyForSale = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function sellRock (uint rockNumber, uint price) {\r\n        require(msg.sender == rocks[rockNumber].owner);\r\n        require(price > 0);\r\n        rocks[rockNumber].price = price;\r\n        rocks[rockNumber].currentlyForSale = true;\r\n    }\r\n    \r\n    function dontSellRock (uint rockNumber) {\r\n        require(msg.sender == rocks[rockNumber].owner);\r\n        rocks[rockNumber].currentlyForSale = false;\r\n    }\r\n    \r\n    function giftRock (uint rockNumber, address receiver) {\r\n        require(msg.sender == rocks[rockNumber].owner);\r\n        rocks[rockNumber].owner = receiver;\r\n        rockOwners[receiver].push(rockNumber);\r\n    }\r\n    \r\n    function() payable {\r\n        \r\n    }\r\n    \r\n    function withdraw() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"rockNumber\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"giftRock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rockOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rockNumber\",\"type\":\"uint256\"}],\"name\":\"dontSellRock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rockNumber\",\"type\":\"uint256\"}],\"name\":\"buyRock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rocks\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"currentlyForSale\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"timesSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rockNumber\",\"type\":\"uint256\"}],\"name\":\"getRockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rockOwningHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestNewRockForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rockNumber\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellRock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherRock","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cc0010ac5b2653509e710a572532be6c75322368b6ea2dc052b62c6252b1a3d"}]}