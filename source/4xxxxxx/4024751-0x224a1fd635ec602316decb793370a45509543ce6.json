{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Grid {\r\n  // The account address with admin privilege to this contract\r\n  // This is also the default owner of all unowned pixels\r\n  address admin;\r\n\r\n  // The size in number of pixels of the square grid on each side\r\n  uint16 public size;\r\n\r\n  // The default price of unowned pixels\r\n  uint public defaultPrice;\r\n\r\n  // The price-fee ratio used in the following formula:\r\n  //   salePrice / feeRatio = fee\r\n  //   payout = salePrice - fee\r\n  // Higher feeRatio equates to lower fee percentage\r\n  uint public feeRatio;\r\n\r\n  // The price increment rate used in the following formula:\r\n  //   price = prevPrice + (prevPrice * incrementRate / 100);\r\n  uint public incrementRate;\r\n\r\n  struct Pixel {\r\n    // User with permission to modify the pixel. A successful sale of the\r\n    // pixel will result in payouts being credited to the pendingWithdrawal of\r\n    // the User\r\n    address owner;\r\n\r\n    // Current listed price of the pixel\r\n    uint price;\r\n\r\n    // Current color of the pixel. A valid of 0 is considered transparent and\r\n    // not black. Use 1 for black.\r\n    uint24 color;\r\n  }\r\n\r\n  // The state of the pixel grid\r\n  mapping(uint32 => Pixel) pixels;\r\n\r\n  // The state of all users who have transacted with this contract\r\n  mapping(address => uint) pendingWithdrawals;\r\n\r\n  // An optional message that is shown in some parts of the UI and in the\r\n  // details pane of every owned pixel\r\n  mapping(address => string) messages;\r\n\r\n  //============================================================================\r\n  // Events\r\n  //============================================================================\r\n\r\n  event PixelTransfer(uint16 row, uint16 col, uint price, address prevOwner, address newOwner);\r\n  event PixelColor(uint16 row, uint16 col, address owner, uint24 color);\r\n  event PixelPrice(uint16 row, uint16 col, address owner, uint price);\r\n\r\n  //============================================================================\r\n  // Basic API and helper functions\r\n  //============================================================================\r\n\r\n  function Grid(\r\n    uint16 _size,\r\n    uint _defaultPrice,\r\n    uint _feeRatio,\r\n    uint _incrementRate) {\r\n    admin = msg.sender;\r\n    defaultPrice = _defaultPrice;\r\n    feeRatio = _feeRatio;\r\n    size = _size;\r\n    incrementRate = _incrementRate;\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwner(uint16 row, uint16 col) {\r\n    require(msg.sender == getPixelOwner(row, col));\r\n    _;\r\n  }\r\n\r\n  function getKey(uint16 row, uint16 col) constant returns (uint32) {\r\n    require(row < size && col < size);\r\n    return uint32(SafeMath.add(SafeMath.mul(row, size), col));\r\n  }\r\n\r\n  function() payable {}\r\n\r\n  //============================================================================\r\n  // Admin API\r\n  //============================================================================\r\n\r\n  function setAdmin(address _admin) onlyAdmin {\r\n    admin = _admin;\r\n  }\r\n\r\n  function setFeeRatio(uint _feeRatio) onlyAdmin {\r\n    feeRatio = _feeRatio;\r\n  }\r\n\r\n  function setDefaultPrice(uint _defaultPrice) onlyAdmin {\r\n    defaultPrice = _defaultPrice;\r\n  }\r\n\r\n  //============================================================================\r\n  // Public Querying API\r\n  //============================================================================\r\n\r\n  function getPixelColor(uint16 row, uint16 col) constant returns (uint24) {\r\n    uint32 key = getKey(row, col);\r\n    return pixels[key].color;\r\n  }\r\n\r\n  function getPixelOwner(uint16 row, uint16 col) constant returns (address) {\r\n    uint32 key = getKey(row, col);\r\n    if (pixels[key].owner == 0) {\r\n      return admin;\r\n    }\r\n    return pixels[key].owner;\r\n  }\r\n\r\n  function getPixelPrice(uint16 row, uint16 col) constant returns (uint) {\r\n    uint32 key = getKey(row, col);\r\n    if (pixels[key].owner == 0) {\r\n      return defaultPrice;\r\n    }\r\n    return pixels[key].price;\r\n  }\r\n\r\n  function getUserMessage(address user) constant returns (string) {\r\n    return messages[user];\r\n  }\r\n\r\n  //============================================================================\r\n  // Public Transaction API\r\n  //============================================================================\r\n\r\n  function checkPendingWithdrawal() constant returns (uint) {\r\n    return pendingWithdrawals[msg.sender];\r\n  }\r\n\r\n  function withdraw() {\r\n    if (pendingWithdrawals[msg.sender] > 0) {\r\n      uint amount = pendingWithdrawals[msg.sender];\r\n      pendingWithdrawals[msg.sender] = 0;\r\n      msg.sender.transfer(amount);\r\n    }\r\n  }\r\n\r\n  function buyPixel(uint16 row, uint16 col, uint24 newColor) payable {\r\n    uint balance = pendingWithdrawals[msg.sender];\r\n    // Return instead of letting getKey throw here to correctly refund the\r\n    // transaction by updating the user balance in user.pendingWithdrawal\r\n    if (row >= size || col >= size) {\r\n      pendingWithdrawals[msg.sender] = SafeMath.add(balance, msg.value);\r\n      return;\r\n    }\r\n\r\n    uint32 key = getKey(row, col);\r\n    uint price = getPixelPrice(row, col);\r\n    address owner = getPixelOwner(row, col);\r\n\r\n    // Return instead of throw here to correctly refund the transaction by\r\n    // updating the user balance in user.pendingWithdrawal\r\n    if (msg.value < price) {\r\n      pendingWithdrawals[msg.sender] = SafeMath.add(balance, msg.value);\r\n      return;\r\n    }\r\n\r\n    uint fee = SafeMath.div(msg.value, feeRatio);\r\n    uint payout = SafeMath.sub(msg.value, fee);\r\n\r\n    uint adminBalance = pendingWithdrawals[admin];\r\n    pendingWithdrawals[admin] = SafeMath.add(adminBalance, fee);\r\n\r\n    uint ownerBalance = pendingWithdrawals[owner];\r\n    pendingWithdrawals[owner] = SafeMath.add(ownerBalance, payout);\r\n\r\n    // Increase the price automatically based on the global incrementRate\r\n    uint increase = SafeMath.div(SafeMath.mul(price, incrementRate), 100);\r\n    pixels[key].price = SafeMath.add(price, increase);\r\n    pixels[key].owner = msg.sender;\r\n\r\n    PixelTransfer(row, col, price, owner, msg.sender);\r\n    setPixelColor(row, col, newColor);\r\n  }\r\n\r\n  //============================================================================\r\n  // Owner Management API\r\n  //============================================================================\r\n\r\n  function setPixelColor(uint16 row, uint16 col, uint24 color) onlyOwner(row, col) {\r\n    uint32 key = getKey(row, col);\r\n    if (pixels[key].color != color) {\r\n      pixels[key].color = color;\r\n      PixelColor(row, col, pixels[key].owner, color);\r\n    }\r\n  }\r\n\r\n  function setPixelPrice(uint16 row, uint16 col, uint newPrice) onlyOwner(row, col) {\r\n    uint32 key = getKey(row, col);\r\n    // The owner can only lower the price. Price increases are determined by\r\n    // the global incrementRate\r\n    require(pixels[key].price > newPrice);\r\n\r\n    pixels[key].price = newPrice;\r\n    PixelPrice(row, col, pixels[key].owner, newPrice);\r\n  }\r\n\r\n  //============================================================================\r\n  // User Management API\r\n  //============================================================================\r\n\r\n  function setUserMessage(string message) {\r\n    messages[msg.sender] = message;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"incrementRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRatio\",\"type\":\"uint256\"}],\"name\":\"setFeeRatio\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"},{\"name\":\"color\",\"type\":\"uint24\"}],\"name\":\"setPixelColor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"},{\"name\":\"newColor\",\"type\":\"uint24\"}],\"name\":\"buyPixel\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_defaultPrice\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setUserMessage\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"}],\"name\":\"getPixelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPixelPrice\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"}],\"name\":\"getPixelColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"row\",\"type\":\"uint16\"},{\"name\":\"col\",\"type\":\"uint16\"}],\"name\":\"getPixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkPendingWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_size\",\"type\":\"uint16\"},{\"name\":\"_defaultPrice\",\"type\":\"uint256\"},{\"name\":\"_feeRatio\",\"type\":\"uint256\"},{\"name\":\"_incrementRate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"row\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"col\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PixelTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"row\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"col\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"color\",\"type\":\"uint24\"}],\"name\":\"PixelColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"row\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"col\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PixelPrice\",\"type\":\"event\"}]","ContractName":"Grid","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000019","Library":"","SwarmSource":"bzzr://9f4f7e2039530017c5d405116ac226e910fe9223145331e64acac485aa2b101b"}]}