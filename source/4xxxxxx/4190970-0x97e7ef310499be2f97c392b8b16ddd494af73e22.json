{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Token {\r\n  function balanceOf(address _who) constant returns (uint balance);\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n  function transferFrom(address _from, address _to, uint _value);\r\n  function transfer(address _to, uint _value);\r\n}\r\ncontract GroveAPI {\r\n  function insert(bytes32 indexName, bytes32 id, int value) public;\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract UnicornRanch {\r\n  using SafeMath for uint;\r\n\r\n  enum VisitType { Spa, Afternoon, Day, Overnight, Week, Extended }\r\n  enum VisitState { InProgress, Completed, Repossessed }\r\n  \r\n  struct Visit {\r\n    uint unicornCount;\r\n    VisitType t;\r\n    uint startBlock;\r\n    uint expiresBlock;\r\n    VisitState state;\r\n    uint completedBlock;\r\n    uint completedCount;\r\n  }\r\n  struct VisitMeta {\r\n    address owner;\r\n    uint index;\r\n  }\r\n  \r\n  address public cardboardUnicornTokenAddress;\r\n  address public groveAddress;\r\n  address public owner = msg.sender;\r\n  mapping (address => Visit[]) bookings;\r\n  mapping (bytes32 => VisitMeta) public bookingMetadataForKey;\r\n  mapping (uint8 => uint) public visitLength;\r\n  mapping (uint8 => uint) public visitCost;\r\n  uint public visitingUnicorns = 0;\r\n  uint public repossessionBlocks = 43200;\r\n  uint8 public repossessionBountyPerTen = 2;\r\n  uint8 public repossessionBountyPerHundred = 25;\r\n  uint public birthBlockThreshold = 43860;\r\n  uint8 public birthPerTen = 1;\r\n  uint8 public birthPerHundred = 15;\r\n\r\n  event NewBooking(address indexed _who, uint indexed _index, VisitType indexed _type, uint _unicornCount);\r\n  event BookingUpdate(address indexed _who, uint indexed _index, VisitState indexed _newState, uint _unicornCount);\r\n  event RepossessionBounty(address indexed _who, uint _unicornCount);\r\n  event DonationReceived(address indexed _who, uint _unicornCount);\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function UnicornRanch() {\r\n    visitLength[uint8(VisitType.Spa)] = 720;\r\n    visitLength[uint8(VisitType.Afternoon)] = 1440;\r\n    visitLength[uint8(VisitType.Day)] = 2880;\r\n    visitLength[uint8(VisitType.Overnight)] = 8640;\r\n    visitLength[uint8(VisitType.Week)] = 60480;\r\n    visitLength[uint8(VisitType.Extended)] = 120960;\r\n    \r\n    visitCost[uint8(VisitType.Spa)] = 0;\r\n    visitCost[uint8(VisitType.Afternoon)] = 0;\r\n    visitCost[uint8(VisitType.Day)] = 10 szabo;\r\n    visitCost[uint8(VisitType.Overnight)] = 30 szabo;\r\n    visitCost[uint8(VisitType.Week)] = 50 szabo;\r\n    visitCost[uint8(VisitType.Extended)] = 70 szabo;\r\n  }\r\n\r\n\r\n  function getBookingCount(address _who) constant returns (uint count) {\r\n    return bookings[_who].length;\r\n  }\r\n  function getBooking(address _who, uint _index) constant returns (uint _unicornCount, VisitType _type, uint _startBlock, uint _expiresBlock, VisitState _state, uint _completedBlock, uint _completedCount) {\r\n    Visit storage v = bookings[_who][_index];\r\n    return (v.unicornCount, v.t, v.startBlock, v.expiresBlock, v.state, v.completedBlock, v.completedCount);\r\n  }\r\n\r\n  function bookSpaVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Spa, _unicornCount);\r\n  }\r\n  function bookAfternoonVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Afternoon, _unicornCount);\r\n  }\r\n  function bookDayVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Day, _unicornCount);\r\n  }\r\n  function bookOvernightVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Overnight, _unicornCount);\r\n  }\r\n  function bookWeekVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Week, _unicornCount);\r\n  }\r\n  function bookExtendedVisit(uint _unicornCount) payable {\r\n    return addBooking(VisitType.Extended, _unicornCount);\r\n  }\r\n  \r\n  function addBooking(VisitType _type, uint _unicornCount) payable {\r\n    if (_type == VisitType.Afternoon) {\r\n      return donateUnicorns(availableBalance(msg.sender));\r\n    }\r\n    require(msg.value >= visitCost[uint8(_type)].mul(_unicornCount)); // Must be paying proper amount\r\n\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n    cardboardUnicorns.transferFrom(msg.sender, address(this), _unicornCount); // Transfer the actual asset\r\n    visitingUnicorns = visitingUnicorns.add(_unicornCount);\r\n    uint expiresBlock = block.number.add(visitLength[uint8(_type)]); // Calculate when this booking will be done\r\n    \r\n    // Add the booking to the ledger\r\n    bookings[msg.sender].push(Visit(\r\n      _unicornCount,\r\n      _type,\r\n      block.number,\r\n      expiresBlock,\r\n      VisitState.InProgress,\r\n      0,\r\n      0\r\n    ));\r\n    uint newIndex = bookings[msg.sender].length - 1;\r\n    bytes32 uniqueKey = keccak256(msg.sender, newIndex); // Create a unique key for this booking\r\n    \r\n    // Add a reference for that key, to find the metadata about it later\r\n    bookingMetadataForKey[uniqueKey] = VisitMeta(\r\n      msg.sender,\r\n      newIndex\r\n    );\r\n    \r\n    if (groveAddress > 0) {\r\n      // Insert into Grove index for applications to query\r\n      GroveAPI g = GroveAPI(groveAddress);\r\n      g.insert(\"bookingExpiration\", uniqueKey, int(expiresBlock));\r\n    }\r\n    \r\n    // Send event about this new booking\r\n    NewBooking(msg.sender, newIndex, _type, _unicornCount);\r\n  }\r\n  \r\n  function completeBooking(uint _index) {\r\n    require(bookings[msg.sender].length > _index); // Sender must have at least this many bookings\r\n    Visit storage v = bookings[msg.sender][_index];\r\n    require(block.number >= v.expiresBlock); // Expired time must be past\r\n    require(v.state == VisitState.InProgress); // Visit must not be complete or repossessed\r\n    \r\n    uint unicornsToReturn = v.unicornCount;\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n\r\n    // Determine if any births occurred\r\n    uint birthCount = 0;\r\n    if (SafeMath.sub(block.number, v.startBlock) >= birthBlockThreshold) {\r\n      if (v.unicornCount >= 100) {\r\n        birthCount = uint(birthPerHundred).mul(v.unicornCount / 100);\r\n      } else if (v.unicornCount >= 10) {\r\n        birthCount = uint(birthPerTen).mul(v.unicornCount / 10);\r\n      }\r\n    }\r\n    if (birthCount > 0) {\r\n      uint availableUnicorns = cardboardUnicorns.balanceOf(address(this)) - visitingUnicorns;\r\n      if (availableUnicorns < birthCount) {\r\n        birthCount = availableUnicorns;\r\n      }\r\n      unicornsToReturn = unicornsToReturn.add(birthCount);\r\n    }\r\n        \r\n    // Update the status of the Visit\r\n    v.state = VisitState.Completed;\r\n    v.completedBlock = block.number;\r\n    v.completedCount = unicornsToReturn;\r\n    bookings[msg.sender][_index] = v;\r\n    \r\n    // Transfer the asset back to the owner\r\n    visitingUnicorns = visitingUnicorns.sub(v.unicornCount);\r\n    cardboardUnicorns.transfer(msg.sender, unicornsToReturn);\r\n    \r\n    // Send event about this update\r\n    BookingUpdate(msg.sender, _index, VisitState.Completed, unicornsToReturn);\r\n  }\r\n  \r\n  function repossessBooking(address _who, uint _index) {\r\n    require(bookings[_who].length > _index); // Address in question must have at least this many bookings\r\n    Visit storage v = bookings[_who][_index];\r\n    require(block.number > v.expiresBlock.add(repossessionBlocks)); // Repossession time must be past\r\n    require(v.state == VisitState.InProgress); // Visit must not be complete or repossessed\r\n    \r\n    visitingUnicorns = visitingUnicorns.sub(v.unicornCount);\r\n    \r\n    // Send event about this update\r\n    BookingUpdate(_who, _index, VisitState.Repossessed, v.unicornCount);\r\n    \r\n    // Calculate Bounty amount\r\n    uint bountyCount = 1;\r\n    if (v.unicornCount >= 100) {\r\n        bountyCount = uint(repossessionBountyPerHundred).mul(v.unicornCount / 100);\r\n    } else if (v.unicornCount >= 10) {\r\n      bountyCount = uint(repossessionBountyPerTen).mul(v.unicornCount / 10);\r\n    }\r\n    \r\n    // Send bounty to bounty hunter\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n    cardboardUnicorns.transfer(msg.sender, bountyCount);\r\n    \r\n    // Send event about the bounty payout\r\n    RepossessionBounty(msg.sender, bountyCount);\r\n\r\n    // Update the status of the Visit\r\n    v.state = VisitState.Repossessed;\r\n    v.completedBlock = block.number;\r\n    v.completedCount = v.unicornCount - bountyCount;\r\n    bookings[_who][_index] = v;\r\n  }\r\n  \r\n  function availableBalance(address _who) internal returns (uint) {\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n    uint count = cardboardUnicorns.allowance(_who, address(this));\r\n    if (count == 0) {\r\n      return 0;\r\n    }\r\n    uint balance = cardboardUnicorns.balanceOf(_who);\r\n    if (balance < count) {\r\n      return balance;\r\n    }\r\n    return count;\r\n  }\r\n  \r\n  function() payable {\r\n    if (cardboardUnicornTokenAddress == 0) {\r\n      return;\r\n    }\r\n    return donateUnicorns(availableBalance(msg.sender));\r\n  }\r\n  \r\n  function donateUnicorns(uint _unicornCount) payable {\r\n    if (_unicornCount == 0) {\r\n      return;\r\n    }\r\n    ERC20Token cardboardUnicorns = ERC20Token(cardboardUnicornTokenAddress);\r\n    cardboardUnicorns.transferFrom(msg.sender, address(this), _unicornCount);\r\n    DonationReceived(msg.sender, _unicornCount);\r\n  }\r\n  \r\n  /**\r\n   * Change ownership of the Ranch\r\n   */\r\n  function changeOwner(address _newOwner) onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * Change the outside contracts used by this contract\r\n   */\r\n  function changeCardboardUnicornTokenAddress(address _newTokenAddress) onlyOwner {\r\n    cardboardUnicornTokenAddress = _newTokenAddress;\r\n  }\r\n  function changeGroveAddress(address _newAddress) onlyOwner {\r\n    groveAddress = _newAddress;\r\n  }\r\n  \r\n  /**\r\n   * Update block durations for various types of visits\r\n   */\r\n  function changeVisitLengths(uint _spa, uint _afternoon, uint _day, uint _overnight, uint _week, uint _extended) onlyOwner {\r\n    visitLength[uint8(VisitType.Spa)] = _spa;\r\n    visitLength[uint8(VisitType.Afternoon)] = _afternoon;\r\n    visitLength[uint8(VisitType.Day)] = _day;\r\n    visitLength[uint8(VisitType.Overnight)] = _overnight;\r\n    visitLength[uint8(VisitType.Week)] = _week;\r\n    visitLength[uint8(VisitType.Extended)] = _extended;\r\n  }\r\n  \r\n  /**\r\n   * Update ether costs for various types of visits\r\n   */\r\n  function changeVisitCosts(uint _spa, uint _afternoon, uint _day, uint _overnight, uint _week, uint _extended) onlyOwner {\r\n    visitCost[uint8(VisitType.Spa)] = _spa;\r\n    visitCost[uint8(VisitType.Afternoon)] = _afternoon;\r\n    visitCost[uint8(VisitType.Day)] = _day;\r\n    visitCost[uint8(VisitType.Overnight)] = _overnight;\r\n    visitCost[uint8(VisitType.Week)] = _week;\r\n    visitCost[uint8(VisitType.Extended)] = _extended;\r\n  }\r\n  \r\n  /**\r\n   * Update bounty reward settings\r\n   */\r\n  function changeRepoSettings(uint _repoBlocks, uint8 _repoPerTen, uint8 _repoPerHundred) onlyOwner {\r\n    repossessionBlocks = _repoBlocks;\r\n    repossessionBountyPerTen = _repoPerTen;\r\n    repossessionBountyPerHundred = _repoPerHundred;\r\n  }\r\n  \r\n  /**\r\n   * Update birth event settings\r\n   */\r\n  function changeBirthSettings(uint _birthBlocks, uint8 _birthPerTen, uint8 _birthPerHundred) onlyOwner {\r\n    birthBlockThreshold = _birthBlocks;\r\n    birthPerTen = _birthPerTen;\r\n    birthPerHundred = _birthPerHundred;\r\n  }\r\n\r\n  function withdraw() onlyOwner {\r\n    owner.transfer(this.balance); // Send all ether in this contract to this contract's owner\r\n  }\r\n  function withdrawForeignTokens(address _tokenContract) onlyOwner {\r\n    ERC20Token token = ERC20Token(_tokenContract);\r\n    token.transfer(owner, token.balanceOf(address(this))); // Send all owned tokens to this contract's owner\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"repossessionBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthPerTen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBooking\",\"outputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_expiresBlock\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_completedBlock\",\"type\":\"uint256\"},{\"name\":\"_completedCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spa\",\"type\":\"uint256\"},{\"name\":\"_afternoon\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"},{\"name\":\"_overnight\",\"type\":\"uint256\"},{\"name\":\"_week\",\"type\":\"uint256\"},{\"name\":\"_extended\",\"type\":\"uint256\"}],\"name\":\"changeVisitLengths\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visitingUnicorns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"completeBooking\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"visitCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookExtendedVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getBookingCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardboardUnicornTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_repoBlocks\",\"type\":\"uint256\"},{\"name\":\"_repoPerTen\",\"type\":\"uint8\"},{\"name\":\"_repoPerHundred\",\"type\":\"uint8\"}],\"name\":\"changeRepoSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repossessionBountyPerHundred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repossessionBountyPerTen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeGroveAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookAfternoonVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"addBooking\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"visitLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthBlockThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookDayVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookOvernightVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"repossessBooking\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeCardboardUnicornTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"donateUnicorns\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthPerHundred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookSpaVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spa\",\"type\":\"uint256\"},{\"name\":\"_afternoon\",\"type\":\"uint256\"},{\"name\":\"_day\",\"type\":\"uint256\"},{\"name\":\"_overnight\",\"type\":\"uint256\"},{\"name\":\"_week\",\"type\":\"uint256\"},{\"name\":\"_extended\",\"type\":\"uint256\"}],\"name\":\"changeVisitCosts\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_birthBlocks\",\"type\":\"uint256\"},{\"name\":\"_birthPerTen\",\"type\":\"uint8\"},{\"name\":\"_birthPerHundred\",\"type\":\"uint8\"}],\"name\":\"changeBirthSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bookingMetadataForKey\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"bookWeekVisit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"NewBooking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_newState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"BookingUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"RepossessionBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_unicornCount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"}]","ContractName":"UnicornRanch","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a147e81000c5c9220c45650f75ce37e927322b5b887ff35008c63c4cb945deba"}]}