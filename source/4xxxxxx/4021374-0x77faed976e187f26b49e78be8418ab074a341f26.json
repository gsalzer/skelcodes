{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Integrative Wallet Token & Crowdsale\r\n    // Iwtoken.com\r\n    // Developer from @Adatum\r\n    // Taking ideas from @BokkyPooBah \r\n    // ----------------------------------------------------------------------------\r\n    \r\n\r\n     // ----------------------------------------------------------------------------\r\n     // Safe maths, borrowed from OpenZeppelin\r\n    // ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Add a number to another number, checking for overflows\r\n    // ------------------------------------------------------------------------\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Subtract a number from another number, checking for underflows\r\n    // ------------------------------------------------------------------------\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// https://github.com/ethereum/EIPs/issues/20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is Owned {\r\n    using SafeMath for uint;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total Supply\r\n    // ------------------------------------------------------------------------\r\n    uint256 _totalSupply = 100000000.000000000000000000;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Balances for each account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => uint256) balances;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner of account approves the transfer of an amount to another account\r\n    // ------------------------------------------------------------------------\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the total token supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the account balance of another account with address _owner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        if (balances[msg.sender] >= _amount                // User has balance\r\n            && _amount > 0                                 // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]     // Overflow check\r\n        ) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to the\r\n    // _value amount. If this function is called again it overwrites the\r\n    // current allowance with _value.\r\n    // ------------------------------------------------------------------------\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to the spender's account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        if (balances[_from] >= _amount                  // From a/c has balance\r\n            && allowed[_from][msg.sender] >= _amount    // Transfer approved\r\n            && _amount > 0                              // Non-zero transfer\r\n            && balances[_to] + _amount > balances[_to]  // Overflow check\r\n        ) {\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender,\r\n        uint256 _value);\r\n}\r\n\r\n\r\ncontract IntegrativeWalletToken is ERC20Token {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token information\r\n    // ------------------------------------------------------------------------\r\n    string public constant symbol = \"IWT\";\r\n    string public constant name = \"Integrative Wallet Token\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public constant IWTfund = 55 * (10**6) * 10**decimals;   // 55m reserved for foundation and expenses.\r\n\r\n    // Initial date 2017-08-31 : 13 00 hs UTC\r\n    uint256 public constant STARTDATE = 1504184400;\r\n    uint256 public constant ENDDATE = STARTDATE + 28 days;\r\n\r\n    // Cap USD 12.5 mil @ 196.88 ETH/USD -> 12.5m / 196.88 -> 63490 -> 63500\r\n    uint256 public constant CAP = 63500 ether;\r\n\r\n    // Cannot have a constant address here - Solidity bug\r\n    address public multisig = 0xf82D89f274e2C5FE9FD3202C5426ABE47D2099Cd;\r\n    address public iwtfundtokens = 0x1E408cE343F4a392B430dFC5E3e2fE3B6a9Cc580;\r\n\r\n\r\n    uint256 public totalEthers;\r\n\r\n    function IntegrativeWalletToken() {\r\n\t\t\r\n\t  balances[iwtfundtokens] = IWTfund;   // 55m IWT reserved for use Fundation\r\n\r\n    }\r\n\r\n  \r\n    // ------------------------------------------------------------------------\r\n    // Tokens per ETH\r\n    // Day  1-7  : 1,200 IWT = 1 Ether\r\n    // Days 8–14 : 1,000 IWT = 1 Ether\r\n    // Days 15–21: 800   IWT = 1 Ether\r\n    // Days 22–27: 600   IWT = 1 Ether\r\n    // ------------------------------------------------------------------------\r\n\t\r\n    function buyPrice() constant returns (uint256) {\r\n        return buyPriceAt(now);\r\n    }\r\n\r\n    function buyPriceAt(uint256 at) constant returns (uint256) {\r\n        if (at < STARTDATE) {\r\n            return 0;\r\n        } else if (at < (STARTDATE + 1 days)) {\r\n            return 1200;\r\n        } else if (at < (STARTDATE + 8 days)) {\r\n            return 1000;\r\n        } else if (at < (STARTDATE + 15 days)) {\r\n            return 800;\r\n        } else if (at < (STARTDATE + 22 days)) {\r\n            return 600;\r\n        } else if (at <= ENDDATE) {\r\n            return 600;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Buy tokens from the contract\r\n    // ------------------------------------------------------------------------\r\n    function () payable {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n    function proxyPayment(address participant) payable {\r\n        // No contributions before the start of the crowdsale\r\n        require(now >= STARTDATE);\r\n        // No contributions after the end of the crowdsale\r\n        require(now <= ENDDATE);\r\n        // No 0 contributions\r\n        require(msg.value > 0);\r\n\r\n        // Add ETH raised to total\r\n        totalEthers = totalEthers.add(msg.value);\r\n        // Cannot exceed cap\r\n        require(totalEthers <= CAP);\r\n\r\n        // What is the IWT to ETH rate\r\n        uint256 _buyPrice = buyPrice();\r\n\r\n        // Calculate #IWT - this is safe as _buyPrice is known\r\n        // and msg.value is restricted to valid values\r\n        uint tokens = msg.value * _buyPrice;\r\n\r\n        // Check tokens > 0\r\n        require(tokens > 0);\r\n   \r\n\r\n        // Add to balances\r\n        balances[participant] = balances[participant].add(tokens);\r\n\r\n        // Log events\r\n        TokensBought(participant, msg.value, totalEthers, tokens, _totalSupply, _buyPrice);\r\n        Transfer(0x0, participant, tokens);\r\n\r\n        // Move the funds to a safe wallet\r\n        multisig.transfer(msg.value);\r\n    }\r\n    event TokensBought(address indexed buyer, uint256 ethers, \r\n        uint256 newEtherBalance, uint256 tokens, \r\n        uint256 newTotalSupply, uint256 buyPrice);\r\n\r\n\r\n    function addPrecommitment(address participant, uint balance) onlyOwner {\r\n        require(now < STARTDATE);\r\n        require(balance > 0);\r\n        balances[participant] = balances[participant].add(balance);\r\n        _totalSupply = _totalSupply.add(balance);\r\n        Transfer(0x0, participant, balance);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint _amount) returns (bool success) {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transfer\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n        returns (bool success)\r\n    {\r\n        // Cannot transfer before crowdsale ends or cap reached\r\n        require(now > ENDDATE || totalEthers == CAP);\r\n        // Standard transferFrom\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint amount)\r\n      onlyOwner returns (bool success) \r\n    {\r\n        return ERC20Token(tokenAddress).transfer(owner, amount);\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Integrative Wallet Token & Crowdsale\r\n    // Iwtoken.com\r\n    // Developer from @Adatum\r\n    // Taking ideas from @BokkyPooBah \r\n    // ----------------------------------------------------------------------------\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENDDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"addPrecommitment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"buyPriceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IWTfund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTDATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iwtfundtokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEtherBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IntegrativeWalletToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e82866b8c7b1b334ba7de84099482f1b27d72877e743d59b7d4465c18a2c8781"}]}