{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a && c >= b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is SafeMath {\r\n\r\n  uint256 public totalSupply;\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  /**\r\n   *\r\n   * Fix for the ERC20 short address attack\r\n   *\r\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   */\r\n  modifier onlyPayloadSize(uint256 size) {\r\n     require(msg.data.length == size + 4);\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n    require(_to != 0);\r\n    uint256 balanceFrom = balances[msg.sender];\r\n    require(_value <= balanceFrom);\r\n\r\n    // SafeMath safeSub will throw if there is not enough balance.\r\n    balances[msg.sender] = safeSub(balanceFrom, _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_to != 0);\r\n    uint256 allowToTrans = allowed[_from][msg.sender];\r\n    uint256 balanceFrom = balances[_from];\r\n    require(_value <= balanceFrom);\r\n    require(_value <= allowToTrans);\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balanceFrom, _value);\r\n    allowed[_from][msg.sender] = safeSub(allowToTrans, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n//    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n    // require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * Atomic increment of approved spending\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   */\r\n  function addApproval(address _spender, uint256 _addedValue)\r\n  onlyPayloadSize(2 * 32)\r\n  public returns (bool success) {\r\n      uint256 oldValue = allowed[msg.sender][_spender];\r\n      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Atomic decrement of approved spending.\r\n   *\r\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   */\r\n  function subApproval(address _spender, uint256 _subtractedValue)\r\n  onlyPayloadSize(2 * 32)\r\n  public returns (bool success) {\r\n\r\n      uint256 oldVal = allowed[msg.sender][_spender];\r\n\r\n      if (_subtractedValue > oldVal) {\r\n          allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MigrationAgent {\r\n  function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract UpgradeableToken is Ownable, StandardToken {\r\n  address public migrationAgent;\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n    // Migrate tokens to the new token contract\r\n    function migrate() public {\r\n        require(migrationAgent != 0);\r\n        uint value = balances[msg.sender];\r\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\r\n        totalSupply = safeSub(totalSupply, value);\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n        Upgrade(msg.sender, migrationAgent, value);\r\n    }\r\n\r\n    function () public payable {\r\n      require(migrationAgent != 0);\r\n      require(balances[msg.sender] > 0);\r\n      migrate();\r\n      msg.sender.transfer(msg.value);\r\n    }\r\n\r\n    function setMigrationAgent(address _agent) onlyOwner external {\r\n        migrationAgent = _agent;\r\n        UpgradeAgentSet(_agent);\r\n    }\r\n\r\n}\r\ncontract SixtyNine is UpgradeableToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n\r\n  address public allTokenOwnerOnStart;\r\n  string public constant name = \"SixtyNine\";\r\n  string public constant symbol = \"SXN\";\r\n  uint256 public constant decimals = 6;\r\n  \r\n\r\n  function SixtyNine() public {\r\n    allTokenOwnerOnStart = msg.sender;\r\n    totalSupply = 100000000000000; //100 000 000 . 000 000\r\n    balances[allTokenOwnerOnStart] = totalSupply;\r\n    Mint(allTokenOwnerOnStart, totalSupply);\r\n    Transfer(0x0, allTokenOwnerOnStart ,totalSupply);\r\n    MintFinished();\r\n  }\r\n  \r\n\r\n\r\n}\r\n\r\n// ============================================================================\r\n\r\ncontract IcoSixtyNine is Ownable, SafeMath {\r\n  address public wallet;\r\n  address public allTokenAddress;\r\n  bool public emergencyFlagAndHiddenCap = false;\r\n  // UNIX format\r\n  uint256 public startTime = 1514441340; // 28 Dec 2017 06:09:00 UTC\r\n  uint256 public endTime =   1516849740; //  25 Jan 2018 03:09:00 UTC\r\n\r\n  uint256 public USDto1ETH = 695; // 1 ether = 695$\r\n  uint256 public price; \r\n  uint256 public totalTokensSold = 0;\r\n  uint256 public constant maxTokensToSold = 40000000000000; // 40% * (100 000 000 . 000 000)\r\n  SixtyNine public token;\r\n\r\n  function IcoSixtyNine(address _wallet, SixtyNine _token) public {\r\n    wallet = _wallet;\r\n    token = _token;\r\n    allTokenAddress = token.allTokenOwnerOnStart();\r\n    price = 1 ether / USDto1ETH / 1000000;\r\n  }\r\n\r\n  function () public payable {\r\n    require(now <= endTime && now >= startTime);\r\n    require(!emergencyFlagAndHiddenCap);\r\n    require(totalTokensSold < maxTokensToSold);\r\n    uint256 value = msg.value;\r\n    uint256 tokensToSend = safeDiv(value, price);\r\n    require(tokensToSend >= 1000000 && tokensToSend <= 250000000000);\r\n    uint256 valueToReturn = safeSub(value, tokensToSend * price);\r\n    uint256 valueToWallet = safeSub(value, valueToReturn);\r\n\r\n    wallet.transfer(valueToWallet);\r\n    if (valueToReturn > 0) {\r\n      msg.sender.transfer(valueToReturn);\r\n    }\r\n    token.transferFrom(allTokenAddress, msg.sender, tokensToSend);\r\n    totalTokensSold += tokensToSend;\r\n  }\r\n\r\n    function ChangeUSDto1ETH(uint256 _USDto1ETH) onlyOwner public {\r\n        USDto1ETH = _USDto1ETH;\r\n        ChangePrice();\r\n    }\r\n\r\n  function ChangePrice() onlyOwner public {\r\n    uint256 priceWeiToUSD = 1 ether / USDto1ETH;\r\n    uint256 price1mToken = priceWeiToUSD / 1000000; // decimals = 6\r\n    if ( now <= startTime + 69 hours) {\r\n      price = price1mToken * 1/4 ; // 1.000000Token = 0.25$ first 5 days\r\n    } \r\n    else {\r\n      if ( now <= startTime + 333 hours ) {\r\n        price = price1mToken * 55/100 ; // 1.000000Token = 0.55$ next\r\n      }else \r\n        if ( now <= startTime + 333 hours ) {\r\n            price = price1mToken * 155/100 ; // 1.000000Token = 1.55$ next\r\n         }\r\n        else {\r\n            price = price1mToken * 25 / 10; // 1.000000Token = 2.5$ to end\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n    function ChangeStart(uint _startTime) onlyOwner public {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function ChangeEnd(uint _endTime) onlyOwner public {\r\n        endTime = _endTime;\r\n    }\r\n\r\n\r\n  function emergencyAndHiddenCapToggle() onlyOwner public {\r\n    emergencyFlagAndHiddenCap = !emergencyFlagAndHiddenCap;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTokenOwnerOnStart\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SixtyNine","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://74a47adbf8af3c9be5cf5206b9135e9abb6c24a8181d685a36fabd640c8f8cad"}]}