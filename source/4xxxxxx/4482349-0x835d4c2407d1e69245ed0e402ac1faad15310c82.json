{"status":"1","message":"OK","result":[{"SourceCode":"// This contract extends the contracts provided by \r\n//! SMS verification contract\r\n//! By Gav Wood, 2016.\r\n\r\npragma solidity ^0.4.15;\r\n\r\ncontract Owned {\r\n\tmodifier only_owner {\r\n\t\tif (msg.sender != owner)\r\n\t\t\treturn;\r\n\t\t_; \r\n\t}\r\n\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tfunction setOwner(address _new) only_owner { NewOwner(owner, _new); owner = _new; }\r\n\r\n\taddress public owner = msg.sender;\r\n}\r\n\r\ncontract Certifier {\r\n\tevent Confirmed(address indexed who);\r\n\tevent Revoked(address indexed who);\r\n\tfunction certified(address _who) constant returns (bool);\r\n\tfunction get(address _who, string _field) constant returns (bytes32) {}\r\n\tfunction getAddress(address _who, string _field) constant returns (address) {}\r\n\tfunction getUint(address _who, string _field) constant returns (uint) {}\r\n}\r\n\r\ncontract SimpleCertifier is Owned, Certifier {\r\n\r\n\tmodifier only_delegate {\r\n\t\tassert(msg.sender == delegate);\r\n\t\t_; \r\n\t}\r\n\tmodifier only_certified(address _who) {\r\n\t\tif (!certs[_who].active)\r\n\t\t\treturn;\r\n\t\t_; \r\n\t}\r\n\r\n\tstruct Certification {\r\n\t\tbool active;\r\n\t\tmapping (string => bytes32) meta;\r\n\t}\r\n\r\n\tfunction certify(address _who) only_delegate {\r\n\t\tcerts[_who].active = true;\r\n\t\tConfirmed(_who);\r\n\t}\r\n\tfunction revoke(address _who) only_delegate only_certified(_who) {\r\n\t\tcerts[_who].active = false;\r\n\t\tRevoked(_who);\r\n\t}\r\n\tfunction certified(address _who) constant returns (bool) { return certs[_who].active; }\r\n\tfunction get(address _who, string _field) constant returns (bytes32) { return certs[_who].meta[_field]; }\r\n\tfunction getAddress(address _who, string _field) constant returns (address) { return address(certs[_who].meta[_field]); }\r\n\tfunction getUint(address _who, string _field) constant returns (uint) { return uint(certs[_who].meta[_field]); }\r\n\tfunction setDelegate(address _new) only_owner { delegate = _new; }\r\n\r\n\tmapping (address => Certification) certs;\r\n\t// So that the server posting puzzles doesn't have access to the ETH.\r\n\taddress public delegate = msg.sender;\r\n}\r\n\r\n\r\n\r\ncontract ProofOfSMS is SimpleCertifier {\r\n\r\n\tmodifier when_fee_paid {\r\n\t\tif (msg.value < fee)  {\r\n\t\tRequiredFeeNotMet(fee, msg.value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_; \r\n\t}\r\n\tevent RequiredFeeNotMet(uint required, uint provided);\r\n\tevent Requested(address indexed who);\r\n\tevent Puzzled(address who, bytes32 puzzle);\r\n\r\n\tevent LogAddress(address test);\r\n\r\n\tfunction request() payable when_fee_paid {\r\n\t\tif (certs[msg.sender].active) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRequested(msg.sender);\r\n\t}\r\n\r\n\tfunction puzzle (address _who, bytes32 _puzzle) only_delegate {\r\n\t\tpuzzles[_who] = _puzzle;\r\n\t\tPuzzled(_who, _puzzle);\r\n\t}\r\n\r\n\tfunction confirm(bytes32 _code) returns (bool) {\r\n\t\tLogAddress(msg.sender);\r\n\t\tif (puzzles[msg.sender] != sha3(_code))\r\n\t\t\treturn;\r\n\r\n\t\tdelete puzzles[msg.sender];\r\n\t\tcerts[msg.sender].active = true;\r\n\t\tConfirmed(msg.sender);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setFee(uint _new) only_owner {\r\n\t\tfee = _new;\r\n\t}\r\n\r\n\tfunction drain() only_owner {\r\n\t\trequire(msg.sender.send(this.balance));\r\n\t}\r\n\r\n\tfunction certified(address _who) constant returns (bool) {\r\n\t\treturn certs[_who].active;\r\n\t}\r\n\r\n\tmapping (address => bytes32) puzzles;\r\n\r\n\tuint public fee = 30 finney;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"certify\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"request\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_puzzle\",\"type\":\"bytes32\"}],\"name\":\"puzzle\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_field\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_field\",\"type\":\"string\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"certified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_field\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"RequiredFeeNotMet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"puzzle\",\"type\":\"bytes32\"}],\"name\":\"Puzzled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"test\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"ProofOfSMS","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d611ebb6ebde99dba17404d810bb3162a0241f1684ef3d484821735a86a8f0c"}]}