{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract TaskFairToken is StandardToken, Ownable {\t\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n    \r\n  string public constant name = \"Task Fair Token\";\r\n   \r\n  string public constant symbol = \"TFT\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  bool public mintingFinished = false;\r\n \r\n  address public saleAgent;\r\n\r\n  modifier notLocked() {\r\n    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(saleAgent == msg.sender || owner == msg.sender);\r\n    saleAgent = newSaleAgent;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(!mintingFinished);\r\n    require(msg.sender == saleAgent);\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public returns (bool) {\r\n    require(!mintingFinished);\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract StagedCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n  uint public price;\r\n\r\n  struct Stage {\r\n    uint period;\r\n    uint hardCap;\r\n    uint discount;\r\n    uint invested;\r\n    uint closed;\r\n  }\r\n\r\n  uint public constant STAGES_PERCENT_RATE = 100;\r\n\r\n  uint public start;\r\n\r\n  uint public totalPeriod;\r\n\r\n  uint public totalHardCap;\r\n \r\n  uint public invested;\r\n\r\n  Stage[] public stages;\r\n\r\n  function stagesCount() public constant returns(uint) {\r\n    return stages.length;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function addStage(uint period, uint hardCap, uint discount) public onlyOwner {\r\n    require(period > 0 && hardCap > 0);\r\n    stages.push(Stage(period, hardCap, discount, 0, 0));\r\n    totalPeriod = totalPeriod.add(period);\r\n    totalHardCap = totalHardCap.add(hardCap);\r\n  }\r\n\r\n  function removeStage(uint8 number) public onlyOwner {\r\n    require(number >=0 && number < stages.length);\r\n\r\n    Stage storage stage = stages[number];\r\n    totalHardCap = totalHardCap.sub(stage.hardCap);    \r\n    totalPeriod = totalPeriod.sub(stage.period);\r\n\r\n    delete stages[number];\r\n\r\n    for (uint i = number; i < stages.length - 1; i++) {\r\n      stages[i] = stages[i+1];\r\n    }\r\n\r\n    stages.length--;\r\n  }\r\n\r\n  function changeStage(uint8 number, uint period, uint hardCap, uint discount) public onlyOwner {\r\n    require(number >= 0 && number < stages.length);\r\n\r\n    Stage storage stage = stages[number];\r\n\r\n    totalHardCap = totalHardCap.sub(stage.hardCap);    \r\n    totalPeriod = totalPeriod.sub(stage.period);    \r\n\r\n    stage.hardCap = hardCap;\r\n    stage.period = period;\r\n    stage.discount = discount;\r\n\r\n    totalHardCap = totalHardCap.add(hardCap);    \r\n    totalPeriod = totalPeriod.add(period);    \r\n  }\r\n\r\n  function insertStage(uint8 numberAfter, uint period, uint hardCap, uint discount) public onlyOwner {\r\n    require(numberAfter < stages.length);\r\n\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n    totalHardCap = totalHardCap.add(hardCap);\r\n\r\n    stages.length++;\r\n\r\n    for (uint i = stages.length - 2; i > numberAfter; i--) {\r\n      stages[i + 1] = stages[i];\r\n    }\r\n\r\n    stages[numberAfter + 1] = Stage(period, hardCap, discount, 0, 0);\r\n  }\r\n\r\n  function clearStages() public onlyOwner {\r\n    for (uint i = 0; i < stages.length; i++) {\r\n      delete stages[i];\r\n    }\r\n    stages.length -= stages.length;\r\n    totalPeriod = 0;\r\n    totalHardCap = 0;\r\n  }\r\n\r\n  function lastSaleDate() public constant returns(uint) {\r\n    require(stages.length > 0);\r\n    uint lastDate = start;\r\n    for(uint i=0; i < stages.length; i++) {\r\n      if(stages[i].invested >= stages[i].hardCap) {\r\n        lastDate = stages[i].closed;\r\n      } else {\r\n        lastDate = lastDate.add(stages[i].period * 1 days);\r\n      }\r\n    }\r\n    return lastDate;\r\n  }\r\n\r\n  function currentStage() public constant returns(uint) {\r\n    require(now >= start);\r\n    uint previousDate = start;\r\n    for(uint i=0; i < stages.length; i++) {\r\n      if(stages[i].invested < stages[i].hardCap) {\r\n        if(now >= previousDate && now < previousDate + stages[i].period * 1 days) {\r\n          return i;\r\n        }\r\n        previousDate = previousDate.add(stages[i].period * 1 days);\r\n      } else {\r\n        previousDate = stages[i].closed;\r\n      }\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function updateStageWithInvested(uint stageIndex, uint investedInWei) internal {\r\n    invested = invested.add(investedInWei);\r\n    Stage storage stage = stages[stageIndex];\r\n    stage.invested = stage.invested.add(investedInWei);\r\n    if(stage.invested >= stage.hardCap) {\r\n      stage.closed = now;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract CommonCrowdsale is StagedCrowdsale {\r\n\r\n  uint public constant PERCENT_RATE = 1000;\r\n\r\n  uint public minInvestedLimit;\r\n\r\n  uint public minted;\r\n\r\n  address public directMintAgent;\r\n  \r\n  address public wallet;\r\n\r\n  address public devWallet;\r\n\r\n  address public devTokensWallet;\r\n\r\n  address public securityWallet;\r\n\r\n  address public foundersTokensWallet;\r\n\r\n  address public bountyTokensWallet;\r\n\r\n  address public growthTokensWallet;\r\n\r\n  address public advisorsTokensWallet;\r\n\r\n  address public securityTokensWallet;\r\n\r\n  uint public devPercent;\r\n\r\n  uint public securityPercent;\r\n\r\n  uint public bountyTokensPercent;\r\n\r\n  uint public devTokensPercent;\r\n\r\n  uint public advisorsTokensPercent;\r\n\r\n  uint public foundersTokensPercent;\r\n\r\n  uint public growthTokensPercent;\r\n\r\n  uint public securityTokensPercent;\r\n\r\n  TaskFairToken public token;\r\n\r\n  modifier canMint(uint value) {\r\n    require(now >= start && value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n\r\n  function setDevPercent(uint newDevPercent) public onlyOwner { \r\n    devPercent = newDevPercent;\r\n  }\r\n\r\n  function setSecurityPercent(uint newSecurityPercent) public onlyOwner { \r\n    securityPercent = newSecurityPercent;\r\n  }\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner { \r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  function setGrowthTokensPercent(uint newGrowthTokensPercent) public onlyOwner { \r\n    growthTokensPercent = newGrowthTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner { \r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setAdvisorsTokensPercent(uint newAdvisorsTokensPercent) public onlyOwner { \r\n    advisorsTokensPercent = newAdvisorsTokensPercent;\r\n  }\r\n\r\n  function setDevTokensPercent(uint newDevTokensPercent) public onlyOwner { \r\n    devTokensPercent = newDevTokensPercent;\r\n  }\r\n\r\n  function setSecurityTokensPercent(uint newSecurityTokensPercent) public onlyOwner { \r\n    securityTokensPercent = newSecurityTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner { \r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setGrowthTokensWallet(address newGrowthTokensWallet) public onlyOwner { \r\n    growthTokensWallet = newGrowthTokensWallet;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner { \r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setAdvisorsTokensWallet(address newAdvisorsTokensWallet) public onlyOwner { \r\n    advisorsTokensWallet = newAdvisorsTokensWallet;\r\n  }\r\n\r\n  function setDevTokensWallet(address newDevTokensWallet) public onlyOwner { \r\n    devTokensWallet = newDevTokensWallet;\r\n  }\r\n\r\n  function setSecurityTokensWallet(address newSecurityTokensWallet) public onlyOwner { \r\n    securityTokensWallet = newSecurityTokensWallet;\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner { \r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setDevWallet(address newDevWallet) public onlyOwner { \r\n    devWallet = newDevWallet;\r\n  }\r\n\r\n  function setSecurityWallet(address newSecurityWallet) public onlyOwner { \r\n    securityWallet = newSecurityWallet;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner canMint(investedWei) {\r\n    calculateAndTransferTokens(to, investedWei);\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner { \r\n    start = newStart;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner { \r\n    token = TaskFairToken(newToken);\r\n  }\r\n\r\n  function mintExtendedTokens() internal {\r\n    uint extendedTokensPercent = bountyTokensPercent.add(devTokensPercent).add(advisorsTokensPercent).add(foundersTokensPercent).add(growthTokensPercent).add(securityTokensPercent);\r\n    uint allTokens = minted.mul(PERCENT_RATE).div(PERCENT_RATE.sub(extendedTokensPercent));\r\n\r\n    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(bountyTokensWallet, bountyTokens);\r\n\r\n    uint advisorsTokens = allTokens.mul(advisorsTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(advisorsTokensWallet, advisorsTokens);\r\n\r\n    uint foundersTokens = allTokens.mul(foundersTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(foundersTokensWallet, foundersTokens);\r\n\r\n    uint growthTokens = allTokens.mul(growthTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(growthTokensWallet, growthTokens);\r\n\r\n    uint devTokens = allTokens.mul(devTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(devTokensWallet, devTokens);\r\n\r\n    uint secuirtyTokens = allTokens.mul(securityTokensPercent).div(PERCENT_RATE);\r\n    mintAndSendTokens(securityTokensWallet, secuirtyTokens);\r\n  }\r\n\r\n  function mintAndSendTokens(address to, uint amount) internal {\r\n    token.mint(to, amount);\r\n    minted = minted.add(amount);\r\n  }\r\n\r\n  function calculateAndTransferTokens(address to, uint investedInWei) internal {\r\n    uint stageIndex = currentStage();\r\n    Stage storage stage = stages[stageIndex];\r\n\r\n    // calculate tokens\r\n    uint tokens = investedInWei.mul(price).mul(STAGES_PERCENT_RATE).div(STAGES_PERCENT_RATE.sub(stage.discount)).div(1 ether);\r\n    \r\n    // transfer tokens\r\n    mintAndSendTokens(to, tokens);\r\n\r\n    updateStageWithInvested(stageIndex, investedInWei);\r\n  }\r\n\r\n  function createTokens() public payable;\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(wallet, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\ncontract TGE is CommonCrowdsale {\r\n  \r\n  function TGE() public {\r\n    setMinInvestedLimit(100000000000000000);\r\n    setPrice(4000000000000000000000);\r\n    setBountyTokensPercent(50);\r\n    setAdvisorsTokensPercent(20);\r\n    setDevTokensPercent(30);\r\n    setFoundersTokensPercent(50);\r\n    setGrowthTokensPercent(300);\r\n    setSecurityTokensPercent(5);\r\n    setDevPercent(20);\r\n    setSecurityPercent(10);\r\n\r\n    // fix in prod\r\n    addStage(7, 2850000000000000000000, 20);\r\n    addStage(7, 5700000000000000000000, 10);\r\n    addStage(7, 18280000000000000000000, 0);\r\n    \r\n    setStart(1514941200);\r\n    setWallet(0x570241a4953c71f92B794F77dd4e7cA295E79bb1);\r\n\r\n    setBountyTokensWallet(0xb2C6f32c444C105F168a9Dc9F5cfCCC616041c8a);\r\n    setDevTokensWallet(0xad3Df84A21d508Ad1E782956badeBE8725a9A447);\r\n    setAdvisorsTokensWallet(0x7C737C97004F1C9156faaf2A4D04911e970aC554);\r\n    setFoundersTokensWallet(0xFEED17c1db96B62C18642A675a6561F3A395Bc10);\r\n    setGrowthTokensWallet(0xEc3E7D403E9fD34E83F00182421092d44f9543b2);\r\n    setSecurityTokensWallet(0xa820b6D6434c703B1b406b12d5b82d41F72069b4);\r\n\r\n    setDevWallet(0xad3Df84A21d508Ad1E782956badeBE8725a9A447);\r\n    setSecurityWallet(0xA6A9f8b8D063538C84714f91390b48aE58047E31);\r\n  }\r\n\r\n  function finishMinting() public onlyOwner {\r\n    mintExtendedTokens();\r\n    token.finishMinting();\r\n  }\r\n\r\n  function createTokens() public payable canMint(msg.value) {\r\n    uint devWei = msg.value.mul(devPercent).div(PERCENT_RATE);\r\n    uint securityWei = this.balance.mul(securityPercent).div(PERCENT_RATE);\r\n    devWallet.transfer(devWei);\r\n    securityWallet.transfer(securityWei);\r\n    wallet.transfer(msg.value.sub(devWei).sub(securityWei));\r\n    calculateAndTransferTokens(msg.sender, msg.value);\r\n  } \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdvisorsTokensWallet\",\"type\":\"address\"}],\"name\":\"setAdvisorsTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecurityTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setSecurityTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecurityPercent\",\"type\":\"uint256\"}],\"name\":\"setSecurityPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGES_PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensWallet\",\"type\":\"address\"}],\"name\":\"setFoundersTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"investedWei\",\"type\":\"uint256\"}],\"name\":\"directMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stagesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGrowthTokensWallet\",\"type\":\"address\"}],\"name\":\"setGrowthTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setBountyTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdvisorsTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setAdvisorsTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"growthTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directMintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevTokensWallet\",\"type\":\"address\"}],\"name\":\"setDevTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevPercent\",\"type\":\"uint256\"}],\"name\":\"setDevPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirectMintAgent\",\"type\":\"address\"}],\"name\":\"setDirectMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearStages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"hardCap\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"closed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"growthTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinInvestedLimit\",\"type\":\"uint256\"}],\"name\":\"setMinInvestedLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFoundersTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecurityTokensWallet\",\"type\":\"address\"}],\"name\":\"setSecurityTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"hardCap\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGrowthTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setGrowthTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"hardCap\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecurityWallet\",\"type\":\"address\"}],\"name\":\"setSecurityWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevTokensPercent\",\"type\":\"uint256\"}],\"name\":\"setDevTokensPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"hardCap\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"insertStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBountyTokensWallet\",\"type\":\"address\"}],\"name\":\"setBountyTokensWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TGE","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e0fa2c516be2cc3ae09dc27aeea735e7aff6622eea51d3f272eddbc4aecb9de"}]}