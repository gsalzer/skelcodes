{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n// compiler: solcjs -o ./build --optimize --abi --bin <this file>\r\n//  version: 0.4.18+commit.9cf6e910.Emscripten.clang\r\n//\r\npragma solidity ^0.4.18;\r\n\r\n// ---------------------------------------------------------------------------\r\n// Treasury smart contract. Owner (Treasurer) is only account that can submit\r\n// proposals, yet cannot actually spend. The Treasurer appoints Trustees to\r\n// approve spending proposals. Funds are released automatically once a\r\n// proposal is approved by a simple majority of trustees.\r\n//\r\n// Trustees can be flagged as inactive by the Treasurer. An inactive Trustee\r\n// cannot vote. The Treasurer may set/reset flags. The Treasurer can replace\r\n// any Trustee, though any approvals already made will stand.\r\n// ---------------------------------------------------------------------------\r\n\r\ncontract owned\r\n{\r\n  address public treasurer;\r\n  function owned() public { treasurer = msg.sender; }\r\n\r\n  modifier onlyTreasurer {\r\n    require( msg.sender == treasurer );\r\n    _;\r\n  }\r\n\r\n  function setTreasurer( address newTreasurer ) public onlyTreasurer\r\n  { treasurer = newTreasurer; }\r\n\r\n  function closedown() public onlyTreasurer { selfdestruct( treasurer ); }\r\n}\r\n\r\ncontract Treasury is owned {\r\n\r\n  event Added( address indexed trustee );\r\n  event Flagged( address indexed trustee, bool isRaised );\r\n  event Replaced( address indexed older, address indexed newer );\r\n\r\n  event Proposal( address indexed payee, uint amt, string eref );\r\n  event Approved( address indexed approver,\r\n                  address indexed to,\r\n                  uint amount,\r\n                  string eref );\r\n  event Spent( address indexed payee, uint amt, string eref );\r\n\r\n  struct SpendProposal {\r\n    address   payee;\r\n    uint      amount;\r\n    string    eref;\r\n    address[] approvals;\r\n  }\r\n\r\n  SpendProposal[] proposals;\r\n  address[]       trustees;\r\n  bool[]          flagged; // flagging trustee disables from voting\r\n\r\n  function Treasury() public {}\r\n\r\n  function() public payable {}\r\n\r\n  function add( address trustee ) public onlyTreasurer\r\n  {\r\n    require( trustee != treasurer ); // separate Treasurer and Trustees\r\n\r\n    for (uint ix = 0; ix < trustees.length; ix++)\r\n      if (trustees[ix] == trustee) return;\r\n\r\n    trustees.push(trustee);\r\n    flagged.push(false);\r\n\r\n    Added( trustee );\r\n  }\r\n\r\n  function flag( address trustee, bool isRaised ) public onlyTreasurer\r\n  {\r\n    for( uint ix = 0; ix < trustees.length; ix++ )\r\n      if (trustees[ix] == trustee)\r\n      {\r\n        flagged[ix] = isRaised;\r\n        Flagged( trustees[ix], flagged[ix] );\r\n      }\r\n  }\r\n\r\n  function replace( address older, address newer ) public onlyTreasurer\r\n  {\r\n    for( uint ix = 0; ix < trustees.length; ix++ )\r\n      if (trustees[ix] == older)\r\n      {\r\n        Replaced( trustees[ix], newer );\r\n        trustees[ix] = newer;\r\n        flagged[ix] = false;\r\n      }\r\n  }\r\n\r\n  function proposal( address _payee, uint _wei, string _eref )\r\n  public onlyTreasurer\r\n  {\r\n    bytes memory erefb = bytes(_eref);\r\n    require(    _payee != address(0)\r\n             && _wei > 0\r\n             && erefb.length > 0\r\n             && erefb.length <= 32 );\r\n\r\n    uint ix = proposals.length++;\r\n    proposals[ix].payee = _payee;\r\n    proposals[ix].amount = _wei;\r\n    proposals[ix].eref = _eref;\r\n\r\n    Proposal( _payee, _wei, _eref );\r\n  }\r\n\r\n  function approve( address _payee, uint _wei, string _eref ) public\r\n  {\r\n    // ensure caller is a trustee in good standing\r\n    bool senderValid = false;\r\n    for (uint tix = 0; tix < trustees.length; tix++) {\r\n      if (msg.sender == trustees[tix]) {\r\n        if (flagged[tix])\r\n          revert();\r\n\r\n        senderValid = true;\r\n      }\r\n    }\r\n    if (!senderValid) revert();\r\n\r\n    // find the matching proposal not already actioned (amount would be 0)\r\n    for (uint pix = 0; pix < proposals.length; pix++)\r\n    {\r\n      if (    proposals[pix].payee == _payee\r\n           && proposals[pix].amount == _wei\r\n           && strcmp(proposals[pix].eref, _eref) )\r\n      {\r\n        // prevent voting twice\r\n        for (uint ap = 0; ap < proposals[pix].approvals.length; ap++)\r\n        {\r\n          if (msg.sender == proposals[pix].approvals[ap])\r\n            revert();\r\n        }\r\n\r\n        proposals[pix].approvals.push( msg.sender );\r\n\r\n        Approved( msg.sender,\r\n                  proposals[pix].payee,\r\n                  proposals[pix].amount,\r\n                  proposals[pix].eref );\r\n\r\n        if ( proposals[pix].approvals.length > (trustees.length / 2) )\r\n        {\r\n          require( this.balance >= proposals[pix].amount );\r\n\r\n          if ( proposals[pix].payee.send(proposals[pix].amount) )\r\n          {\r\n            Spent( proposals[pix].payee,\r\n                   proposals[pix].amount,\r\n                   proposals[pix].eref );\r\n\r\n            proposals[pix].amount = 0; // prevent double spend\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function strcmp( string _a, string _b ) pure internal returns (bool)\r\n  {\r\n    return keccak256(_a) == keccak256(_b);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"trustee\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"},{\"name\":\"_wei\",\"type\":\"uint256\"},{\"name\":\"_eref\",\"type\":\"string\"}],\"name\":\"proposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"trustee\",\"type\":\"address\"},{\"name\":\"isRaised\",\"type\":\"bool\"}],\"name\":\"flag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"},{\"name\":\"_wei\",\"type\":\"uint256\"},{\"name\":\"_eref\",\"type\":\"string\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"older\",\"type\":\"address\"},{\"name\":\"newer\",\"type\":\"address\"}],\"name\":\"replace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTreasurer\",\"type\":\"address\"}],\"name\":\"setTreasurer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closedown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasurer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trustee\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trustee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRaised\",\"type\":\"bool\"}],\"name\":\"Flagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"older\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newer\",\"type\":\"address\"}],\"name\":\"Replaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eref\",\"type\":\"string\"}],\"name\":\"Proposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eref\",\"type\":\"string\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eref\",\"type\":\"string\"}],\"name\":\"Spent\",\"type\":\"event\"}]","ContractName":"Treasury","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c3f7f62811ce5d8ef4fd7c5d884e252c16fc434d8229175c44a84d4c302ee719"}]}