{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract Ethraffle {\r\n    // Structs\r\n    struct Contestant {\r\n        address addr;\r\n        uint raffleId;\r\n    }\r\n\r\n    // Constants\r\n    address public creatorAddress;\r\n    address constant public rakeAddress = 0x15887100f3b3cA0b645F007c6AA11348665c69e5;\r\n    uint constant public prize = 0.1 ether;\r\n    uint constant public rake = 0.02 ether;\r\n    uint constant public totalTickets = 6;\r\n    uint constant public pricePerTicket = (prize + rake) / totalTickets;\r\n\r\n    // Variables\r\n    uint public raffleId = 0;\r\n    uint public nextTicket = 0;\r\n    uint public lastWinningNumber = 0;\r\n    mapping (uint => Contestant) public contestants;\r\n    uint[] public gaps;\r\n\r\n    // Initialization\r\n    function Ethraffle() public {\r\n        creatorAddress = msg.sender;\r\n        resetRaffle();\r\n    }\r\n\r\n    function resetRaffle() private {\r\n        raffleId++;\r\n        nextTicket = 1;\r\n    }\r\n\r\n    // Call buyTickets() when receiving Ether outside a function\r\n    function () payable public {\r\n        buyTickets();\r\n    }\r\n\r\n    function buyTickets() payable public {\r\n        uint moneySent = msg.value;\r\n\r\n        while (moneySent >= pricePerTicket && nextTicket <= totalTickets) {\r\n            uint currTicket = 0;\r\n            if (gaps.length > 0) {\r\n                currTicket = gaps[gaps.length-1];\r\n                gaps.length--;\r\n            } else {\r\n                currTicket = nextTicket++;\r\n            }\r\n\r\n            contestants[currTicket] = Contestant(msg.sender, raffleId);\r\n            moneySent -= pricePerTicket;\r\n        }\r\n\r\n        // Choose winner if we sold all the tickets\r\n        if (nextTicket > totalTickets) {\r\n            chooseWinner();\r\n        }\r\n\r\n        // Send back leftover money\r\n        if (moneySent > 0) {\r\n            msg.sender.transfer(moneySent);\r\n        }\r\n    }\r\n\r\n    function chooseWinner() private {\r\n        uint winningTicket = getRandom();\r\n        lastWinningNumber = winningTicket;\r\n        address winningAddress = contestants[winningTicket].addr;\r\n        resetRaffle();\r\n        winningAddress.transfer(prize);\r\n        rakeAddress.transfer(rake);\r\n    }\r\n\r\n    // Choose a random int between 1 and totalTickets\r\n    function getRandom() private returns (uint) {\r\n        return (uint(sha3(\r\n          block.timestamp +\r\n          block.number +\r\n          block.gaslimit +\r\n          block.difficulty +\r\n          msg.gas +\r\n          uint(msg.sender) +\r\n          uint(block.coinbase)\r\n        )) % totalTickets) + 1;\r\n    }\r\n\r\n    function getRefund() public {\r\n        uint refunds = 0;\r\n        for (uint i = 1; i <= totalTickets; i++) {\r\n            if (msg.sender == contestants[i].addr && raffleId == contestants[i].raffleId) {\r\n                refunds++;\r\n                contestants[i] = Contestant(address(0), 0);\r\n                gaps.push(i);\r\n            }\r\n        }\r\n\r\n        if (refunds > 0) {\r\n            msg.sender.transfer(refunds * pricePerTicket);\r\n        }\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == creatorAddress) {\r\n            selfdestruct(creatorAddress);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinningNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffleId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rakeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTickets\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contestants\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"raffleId\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Ethraffle","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c101f84888ff618993a8f286dcc9b6e8203dcc05d5cd9e2d5974f4afce243dde"}]}