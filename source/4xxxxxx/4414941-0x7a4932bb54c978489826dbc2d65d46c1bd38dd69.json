{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017 Icofunding S.L. (https://icofunding.com)\r\n * \r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n * Reference: https://github.com/OpenZeppelin/zeppelin-solidity/commit/353285e5d96477b4abb86f7cde9187e84ed251ac\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal constant returns (uint) {    \r\n    uint c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal constant returns (uint) {\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal constant returns (uint) {\r\n    uint c = a + b;\r\n\r\n    assert(c>=a && c>=b);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MintInterface {\r\n  function mint(address recipient, uint amount) returns (bool success);\r\n}\r\n\r\n// Interface\r\ncontract PriceModel {\r\n  function getPrice(uint block) constant returns (uint);\r\n}\r\n\r\ncontract EtherReceiverInterface {\r\n  function receiveEther() public payable;\r\n}\r\n\r\n/**\r\n * Crowdsale contract. Defines the minting process in exchange of ether\r\n */\r\ncontract CrowdsaleTokens is SafeMath {\r\n\r\n  address public tokenContract; // address of the token\r\n  address public priceModel; // address of the contract with the prices\r\n  address public vaultAddress; // address that will receive the ether collected\r\n\r\n  // blocks\r\n  uint public crowdsaleStarts; // block in which the ICO starts\r\n  uint public crowdsaleEnds; // block in which the ICO ends\r\n\r\n  // wei\r\n  uint public totalCollected; // amount of wei collected\r\n\r\n  // tokens\r\n  uint public tokensIssued; // number of tokens (plus decimals) issued so far\r\n  uint public tokenCap; // maximum number of tokens to be issued\r\n\r\n  modifier crowdsalePeriod() {\r\n    require(block.number >= crowdsaleStarts && block.number < crowdsaleEnds);\r\n\r\n    _;\r\n  }\r\n\r\n  function CrowdsaleTokens(\r\n    address _tokenContract,\r\n    address _priceModel,\r\n    address _vaultAddress,\r\n    uint _crowdsaleStarts,\r\n    uint _crowdsaleEnds,\r\n    uint _tokenCap\r\n  ) {\r\n    tokenContract = _tokenContract;\r\n    priceModel = _priceModel;\r\n    vaultAddress = _vaultAddress;\r\n    crowdsaleStarts = _crowdsaleStarts;\r\n    crowdsaleEnds = _crowdsaleEnds;\r\n    tokenCap = _tokenCap;\r\n  }\r\n\r\n  // Same as buy()\r\n  function() payable {\r\n    buy();\r\n  }\r\n\r\n  // Allows anyone to buy tokens in exchange of ether.\r\n  // Only executed after \"crowdsaleStarts\" and before \"crowdsaleEnds\"\r\n  function buy() public payable crowdsalePeriod {\r\n    // Calculate price\r\n    uint price = calculatePrice(block.number);\r\n\r\n    // Process purchase\r\n    processPurchase(price);\r\n  }\r\n\r\n  // Manages the purchase of the tokens for a given price.\r\n  // The maximum amount of tokens that can be purchased is given by the \"remaining\" function\r\n  function processPurchase(uint price) private {\r\n    // number of the tokens to be purchased  for the given price and ether sent\r\n    uint numTokens = safeDiv(safeMul(msg.value, price), 1 ether);\r\n\r\n    // token cap\r\n    assert(numTokens <= remaining() && remaining() > 0);\r\n\r\n    // update variables\r\n    totalCollected = safeAdd(totalCollected, msg.value);\r\n    tokensIssued = safeAdd(tokensIssued, numTokens);\r\n\r\n    // send the ether to a trusted wallet\r\n    EtherReceiverInterface(vaultAddress).receiveEther.value(msg.value)();\r\n\r\n    // mint tokens\r\n    if (!MintInterface(tokenContract).mint(msg.sender, numTokens))\r\n      revert();\r\n  }\r\n\r\n  // Returns the number of tokens to be purchased by 1 ether at the given block\r\n  function calculatePrice(uint block) public constant returns (uint) {\r\n    return PriceModel(priceModel).getPrice(block);\r\n  }\r\n\r\n  // Returns the number of tokens available for sale\r\n  function remaining() public constant returns (uint) {\r\n\r\n    return safeSub(tokenCap, tokensIssued);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceModel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_priceModel\",\"type\":\"address\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"name\":\"_crowdsaleStarts\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleEnds\",\"type\":\"uint256\"},{\"name\":\"_tokenCap\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"CrowdsaleTokens","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009a2ba0ca74d505e5d7a853433eb01910dc628f400000000000000000000000001ced039d3284a28b37f3dd8c079821d5c0be5159000000000000000000000000e12cad7ef07eb6a6d79aa4c721825cfda2b2a2c00000000000000000000000000000000000000000000000000000000000436e1600000000000000000000000000000000000000000000000000000000004628680000000000000000000000000000000000000000006ed79a8e3f446246000000","Library":"","SwarmSource":"bzzr://fc5cb9c23ab37e791c57dbba5598a5f1e4b0c7c6aa68cec3e15e9fd3dcf62058"}]}