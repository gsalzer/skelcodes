{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract PixelStorageWithFee {\r\n    event PixelUpdate(uint32 indexed index, uint8 color);\r\n    byte[500000] public packedBytes;\r\n    uint256 feeWei;\r\n    address masterAddress;\r\n\r\n    function PixelStorageWithFee(uint256 startingFeeWei) public {\r\n        masterAddress = msg.sender;\r\n        feeWei = startingFeeWei;\r\n    }\r\n\r\n    // Pixels are represented using 4-bits.  We pack 2 pixels into one byte like so:\r\n    // [left_pixel|right_pixel]\r\n    // To set these bytes, we use bitwise operations to change either the upper or\r\n    // lower half of a packed byte.\r\n    // [index] is the index of the pixel; not the byte\r\n    // [color] is a 4-bit integer; the upper 4 bits of the uint8 are discarded.\r\n\r\n    function set(uint32 index, uint8 color) public payable {\r\n        require(index < 500000);\r\n        require(msg.value >= feeWei);\r\n\r\n        uint32 packedByteIndex = index / 2;\r\n        byte currentByte = packedBytes[packedByteIndex];\r\n        bool left = index % 2 == 0;\r\n\r\n        byte newByte;\r\n        if (left) {\r\n            // clear upper 4 bits of existing byte\r\n            // OR with new byte shifted left 4 bits\r\n            newByte = (currentByte & hex'0f') | bytes1(color * 2 ** 4);\r\n        } else {\r\n            // clear lower 4 bits of existing byte\r\n            // OR with with new color, with upper 4 bits cleared\r\n            newByte = (currentByte & hex'f0') | (bytes1(color) & hex'0f');\r\n        }\r\n\r\n        packedBytes[packedByteIndex] = newByte;\r\n        PixelUpdate(index, color);\r\n    }\r\n\r\n    function getAll() public constant returns (byte[500000]) {\r\n        return packedBytes;\r\n    }\r\n\r\n    modifier masterOnly() {\r\n        require(msg.sender == masterAddress);\r\n        _;\r\n    }\r\n\r\n    function setFee(uint256 fee) public masterOnly {\r\n        feeWei = fee;\r\n    }\r\n\r\n    function withdraw() public masterOnly {\r\n        masterAddress.transfer(this.balance);\r\n    }\r\n\r\n    function() public payable { }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packedBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1[500000]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint32\"},{\"name\":\"color\",\"type\":\"uint8\"}],\"name\":\"set\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"startingFeeWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"color\",\"type\":\"uint8\"}],\"name\":\"PixelUpdate\",\"type\":\"event\"}]","ContractName":"PixelStorageWithFee","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://50e1df3270505f47807b9bba5df77fe108531f7ca98a91ab837509b28ed14220"}]}