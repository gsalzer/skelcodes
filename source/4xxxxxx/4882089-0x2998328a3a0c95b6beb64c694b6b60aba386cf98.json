{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title YRXToken\r\n * @dev ERC20 based Token, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract YRXToken is MintableToken {\r\n    string public constant name = \"Yoritex Token\";\r\n    string public constant symbol = \"YRX\";\r\n    uint8 public constant decimals = 18;\r\n    address public crowdsaleAddress;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 510000000 * 1 ether;\r\n\r\n    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdsale() {                             // Ensures only crowdfund can call the function\r\n        require(msg.sender == crowdsaleAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    function YRXToken() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Sets the crowdsale address, can only be done once\r\n    // -------------------------------------------------\r\n    function setCrowdsaleAddress(address _crowdsaleAddress) external onlyOwner nonZeroAddress(_crowdsaleAddress) returns (bool success){\r\n        require(crowdsaleAddress == 0x0);\r\n        crowdsaleAddress = _crowdsaleAddress;\r\n        decrementBalance(owner, totalSupply);\r\n        addToBalance(crowdsaleAddress, totalSupply);\r\n        Transfer(0x0, _crowdsaleAddress, totalSupply);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Function for the Crowdsale to transfer tokens\r\n    // -------------------------------------------------\r\n    function transferFromCrowdsale(address _to, uint256 _amount) external onlyCrowdsale nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\r\n        require(balanceOf(crowdsaleAddress) >= _amount);\r\n        decrementBalance(crowdsaleAddress, _amount);\r\n        addToBalance(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Adds to balance\r\n    // -------------------------------------------------\r\n    function addToBalance(address _address, uint _amount) internal {\r\n        balances[_address] = balances[_address].add(_amount);\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Removes from balance\r\n    // -------------------------------------------------\r\n    function decrementBalance(address _address, uint _amount) internal {\r\n        balances[_address] = balances[_address].sub(_amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title YRXCrowdsale\r\n */\r\n\r\ncontract YRXCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // true for finalised presale\r\n  bool public isPreSaleFinalised;\r\n  // true for finalised crowdsale\r\n  bool public isFinalised;\r\n  // The token being sold\r\n  YRXToken public YRX;\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // current amount of purchased tokens for pre-sale and main sale\r\n  uint256 public preSaleTotalSupply;\r\n  uint256 public mainSaleTotalSupply;\r\n  // current amount of minted tokens for bounty\r\n  uint256 public bountyTotalSupply;\r\n  uint256 private mainSaleTokensExtra;\r\n\r\n  event WalletAddressChanged(address _wallet);           // Triggered upon owner changing the wallet address\r\n  event AmountRaised(address beneficiary, uint amountRaised); // Triggered upon crowdfund being finalized\r\n  event Mint(address indexed to, uint256 amount);\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\r\n    require(_amount > 0);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroValue() {                              // Ensures a non-zero value is passed\r\n    require(msg.value > 0);\r\n    _;\r\n  }\r\n\r\n  modifier crowdsaleIsActive() {                         // Ensures the crowdfund is ongoing\r\n    require(!isFinalised && (isInPreSale() || isInMainSale()));\r\n    _;\r\n  }\r\n\r\n  function YRXCrowdsale(address _wallet, address _token) public {\r\n\r\n    /* default start-end periods dates\r\n      _preSaleStartTime =     '29 Nov 2017 00:00:00 GMT' 1511913600\r\n      _preSaleEndTime =       '10 Jan 2018 23:59:59 GMT' 1515628799\r\n      _mainSaleStartTime =    '11 Jan 2018 00:00:00 GMT' 1515628800\r\n      _mainSaleEndTime =      '11 May 2018 00:00:00 GMT' 1525996800\r\n    */\r\n\r\n    // check dates\r\n    require(mainSaleStartTime() >= now);                 // can't start main sale in the past\r\n    require(preSaleEndTime() < mainSaleStartTime());      // can't start main sale before the end of pre-sale\r\n    require(preSaleStartTime() < preSaleEndTime());       // the end of pre-sale can't happen before it's start\r\n    require(mainSaleStartTime() < mainSaleEndTime());     // the end of main sale can't happen before it's start\r\n\r\n    // create token contract\r\n    YRX = YRXToken(_token);\r\n    wallet = _wallet;\r\n    isPreSaleFinalised = false;\r\n    isFinalised = false;\r\n\r\n    // current amount of purchased tokens for pre-sale and main sale\r\n    preSaleTotalSupply = 0;\r\n    mainSaleTotalSupply = 0;\r\n    bountyTotalSupply = 0;\r\n    mainSaleTokensExtra = 0;\r\n  }\r\n\r\n  // -------------------------------------------------\r\n  // Changes main contribution wallet\r\n  // -------------------------------------------------\r\n  function changeWalletAddress(address _wallet) external onlyOwner {\r\n    wallet = _wallet;\r\n    WalletAddressChanged(_wallet);\r\n  }\r\n\r\n\r\n  function maxTokens() public pure returns(uint256) {\r\n    return 510000000 * 1 ether;\r\n  }\r\n\r\n  function preSaleMaxTokens() public pure returns(uint256) {\r\n    return 51000000 * 1 ether;\r\n  }\r\n\r\n  function mainSaleMaxTokens() public view returns(uint256) {\r\n    return 433500000  * 1 ether + mainSaleTokensExtra;\r\n  }\r\n\r\n  function bountyMaxTokens() public pure returns(uint256) {\r\n    return 25500000 * 1 ether;\r\n  }\r\n\r\n  function preSaleStartTime() public pure returns(uint256) {\r\n    return 1511913600;\r\n  }\r\n\r\n  function preSaleEndTime() public pure returns(uint256) {\r\n    return 1515628799;\r\n  }\r\n\r\n  function mainSaleStartTime() public pure returns(uint256) {\r\n    return 1515628800;\r\n  }\r\n\r\n  function mainSaleEndTime() public pure returns(uint256) {\r\n    return 1525996800;\r\n  }\r\n\r\n  function rate() public pure returns(uint256) {\r\n    return 540;\r\n  }\r\n\r\n  function discountRate() public pure returns(uint256) {\r\n    return 1350;\r\n  }\r\n\r\n  function discountICO() public pure returns(uint256) {\r\n    return 60;\r\n  }\r\n\r\n  function isInPreSale() public constant returns(bool){\r\n    return now >= preSaleStartTime() && now <= preSaleEndTime();\r\n  }\r\n\r\n  function isInMainSale() public constant returns(bool){\r\n    return now >= mainSaleStartTime() && now <= mainSaleEndTime();\r\n  }\r\n\r\n  function totalSupply() public view returns(uint256){\r\n    return YRX.totalSupply();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public crowdsaleIsActive nonZeroAddress(beneficiary) nonZeroValue payable {\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount * rate();\r\n    if (isInPreSale()) {\r\n      require(!isPreSaleFinalised);\r\n      tokens = weiAmount * discountRate();\r\n      require(tokens <= preSaleTokenLeft());\r\n    }\r\n\r\n    if (isInMainSale()) {\r\n      // tokens with discount\r\n      tokens = weiAmount * discountRate();\r\n      require(mainSaleTotalSupply + tokens <= mainSaleMaxTokens());\r\n    }\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    if (isInPreSale())\r\n      preSaleTotalSupply += tokens;\r\n    if (isInMainSale())\r\n      mainSaleTotalSupply += tokens;\r\n\r\n    forwardFunds();\r\n    if (!YRX.transferFromCrowdsale(beneficiary, tokens)) {revert();}\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // mint tokens to beneficiary\r\n  function mint(address beneficiary, uint256 amount) public onlyOwner crowdsaleIsActive nonZeroAddress(beneficiary) nonZeroAmount(amount) {\r\n    // check period\r\n    bool withinPreSalePeriod = isInPreSale();\r\n    bool withinMainSalePeriod = isInMainSale();\r\n    if (withinPreSalePeriod) {\r\n      require(!isPreSaleFinalised);\r\n      require(amount <= preSaleTokenLeft());\r\n    }\r\n    if (withinMainSalePeriod) {\r\n      require(amount <= (mainSaleMaxTokens() - mainSaleTotalSupply));\r\n    }\r\n\r\n    if (withinPreSalePeriod)\r\n      preSaleTotalSupply += amount;\r\n    if (withinMainSalePeriod)\r\n      mainSaleTotalSupply += amount;\r\n\r\n    if (!YRX.transferFromCrowdsale(beneficiary, amount)) {revert();}\r\n    Mint(beneficiary, amount);\r\n  }\r\n\r\n  function preSaleTokenLeft() public constant returns(uint256){\r\n    return preSaleMaxTokens() - preSaleTotalSupply;\r\n  }\r\n\r\n  // finalise presale\r\n  function finalisePreSale() public onlyOwner {\r\n    require(!isFinalised);\r\n    require(!isPreSaleFinalised);\r\n    require(now >= preSaleStartTime()); // can finalise presale only after it starts\r\n\r\n    if (preSaleTokenLeft() > 0) {\r\n      mainSaleTokensExtra = preSaleTokenLeft();\r\n    }\r\n\r\n    isPreSaleFinalised = true;\r\n  }\r\n\r\n  // finalase crowdsale (mainsale)\r\n  function finalise() public onlyOwner returns(bool success){\r\n    require(!isFinalised);\r\n    require(now >= mainSaleStartTime()); // can finalise mainsale (crowdsale) only after it starts\r\n    AmountRaised(wallet, weiRaised);\r\n    isFinalised = true;\r\n    return true;\r\n  }\r\n\r\n  // mint bounty tokens to beneficiary\r\n  function mintBounty(address beneficiary, uint256 amount) public onlyOwner crowdsaleIsActive nonZeroAddress(beneficiary) nonZeroAmount(amount) {\r\n    require(amount <= (bountyMaxTokens() - bountyTotalSupply));\r\n\r\n    bountyTotalSupply += amount;\r\n    if (!YRX.transferFromCrowdsale(beneficiary, amount)) {revert();}\r\n    Mint(beneficiary, amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInMainSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleMaxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleMaxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YRX\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyMaxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreSaleFinalised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleTokenLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalisePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"WalletAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"AmountRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"YRXCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002b74e0e7bcad3f6244a2449d3851de4e4346ad630000000000000000000000000c36d834a50e9149ff38ea6221cfaeabf607d57d","Library":"","SwarmSource":"bzzr://c388229decb20fcf33e8d0df81e6d8f2f19dd76dac1d37b022a494b2764c8b6e"}]}