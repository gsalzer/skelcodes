{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract MaptPricing {\r\n  // MAPT TOKEN PRICE:\r\n  uint256 constant MAPT_IN_ETH = 100; // 1 MAPT = 0.01 ETH\r\n\r\n  uint256 constant FRACTIONAL_DIVIDER = 100;\r\n  uint256 constant DEFAULT_MULTIPLIER = 1 * FRACTIONAL_DIVIDER;\r\n\r\n  uint constant MIN_ETH = 100 ether;\r\n\r\n  uint256[4] prices;\r\n  uint256[3] dates;\r\n  mapping (uint256 => uint256[]) rules;\r\n\r\n  function MaptPricing() {\r\n  }\r\n\r\n  function createPricing() {\r\n    prices[0] = 3000 ether;\r\n    prices[1] = 1500 ether;\r\n    prices[2] = 300 ether;\r\n    prices[3] = 100 ether;\r\n\r\n    dates[0] = 7 days;\r\n    dates[1] = 14 days;\r\n    dates[2] = 140 days;\r\n\r\n    rules[0] = [200, 150, 130, 120];\r\n    rules[1] = [200, 145, 125, 115];\r\n    rules[2] = [200, 145, 125, 115];\r\n  }\r\n\r\n  function calculatePrice(uint valueWei, uint256 timeSinceStart, uint decimals) public returns (uint tokenAmount) {\r\n    uint Z = 1231231;\r\n    uint m = 0;\r\n    uint ip = Z;\r\n    uint dp = Z;\r\n    uint tokens;\r\n\r\n    require(valueWei >= MIN_ETH);\r\n\r\n    if (valueWei >= prices[0]) ip = 0;\r\n    else for (uint i = 1; i < prices.length && ip == Z; i++) {\r\n      if (valueWei < prices[i-1] && valueWei >= prices[i]) ip = i;\r\n    }\r\n\r\n    if (ip == Z) {\r\n      m = DEFAULT_MULTIPLIER;\r\n    } else {\r\n      if (timeSinceStart <= dates[0]) {\r\n        dp = 0;\r\n      } else {\r\n        for (i = 1; i < dates.length && dp == Z; i++) {\r\n          if (timeSinceStart > dates[i-1] && timeSinceStart < dates[i]) {\r\n            dp = i;\r\n          }\r\n        }\r\n        //later on\r\n        if (timeSinceStart > dates[dates.length-1]) {\r\n          dp = dates.length-1;\r\n        }\r\n      }\r\n\r\n      if (dp == Z) {\r\n        m = DEFAULT_MULTIPLIER;\r\n      } else {\r\n        m = (rules[dp])[ip];\r\n      }\r\n    }\r\n\r\n    tokens = valueWei * MAPT_IN_ETH;\r\n\r\n    uint d = decimals;\r\n    d++;\r\n\r\n    uint res = tokens * m / DEFAULT_MULTIPLIER;\r\n\r\n    return res;\r\n  }\r\n}\r\n\r\ncontract MaptPresaleToken {\r\n\r\n    uint constant MIN_TRANSACTION_AMOUNT_ETH = 100 ether;\r\n\r\n    MaptPricing priceRules = new MaptPricing();\r\n    uint public PRESALE_START_DATE = 1503313200; //Mon Aug 21 12:00:00 +00 2017\r\n    uint public PRESALE_END_DATE = PRESALE_START_DATE + 30 days;\r\n\r\n    function MaptPresaleToken(address _tokenManager, address _escrow) {\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n        priceRules.createPricing();\r\n    }\r\n\r\n    string public constant name = \"MAT Presale Token\";\r\n    string public constant symbol = \"MAPT\";\r\n    uint   public constant decimals = 18;\r\n\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 2800000 * 1 ether / 1 wei;\r\n\r\n    enum Phase {\r\n        Created,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n\r\n    uint public totalSupply = 0;\r\n\r\n    address public tokenManager;\r\n\r\n    address public escrow;\r\n\r\n    address public crowdsaleManager;\r\n\r\n    mapping (address => uint256) private balanceTable;\r\n\r\n    modifier onlyTokenManager()     { if(msg.sender != tokenManager) throw; _; }\r\n    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) throw; _; }\r\n\r\n    event LogBuy(address indexed owner, uint etherWeiIncoming, uint tokensSold);\r\n    event LogBuyForFiat(address indexed owner, uint tokensSold);\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogPhaseSwitch(Phase newPhase);\r\n    event LogEscrow(uint balance);\r\n    event LogEscrowReq(uint balance);\r\n    event LogStartDate(uint newdate, uint oldDate);\r\n\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function burnTokens(address _owner)\r\n        public\r\n        onlyCrowdsaleManager\r\n        returns (uint)\r\n    {\r\n        if(currentPhase != Phase.Migrating) return 1;\r\n\r\n        uint tokens = balanceTable[_owner];\r\n        if(tokens == 0) return 2;\r\n        totalSupply -= tokens;\r\n        balanceTable[_owner] = 0;\r\n        LogBurn(_owner, tokens);\r\n\r\n        if(totalSupply == 0) {\r\n            currentPhase = Phase.Migrated;\r\n            LogPhaseSwitch(Phase.Migrated);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balanceTable[_owner];\r\n    }\r\n\r\n    function setPresalePhaseUInt(uint phase)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n      require( uint(Phase.Migrated) >= phase && phase >= 0 );\r\n      setPresalePhase(Phase(phase));\r\n    }\r\n\r\n    function setPresalePhase(Phase _nextPhase)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n      _setPresalePhase(_nextPhase);\r\n    }\r\n\r\n    function _setPresalePhase(Phase _nextPhase)\r\n        private\r\n    {\r\n        bool canSwitchPhase\r\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\r\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\r\n                && _nextPhase == Phase.Migrating\r\n                && crowdsaleManager != 0x0)\r\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\r\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\r\n                && totalSupply == 0);\r\n\r\n        if(!canSwitchPhase) throw;\r\n        currentPhase = _nextPhase;\r\n        LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n    function setCrowdsaleManager(address _mgr)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n        if(currentPhase == Phase.Migrating) throw;\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    function setStartDate(uint _date)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n        if(currentPhase != Phase.Created) throw;\r\n        LogStartDate(_date, PRESALE_START_DATE);\r\n        PRESALE_START_DATE = _date;\r\n        PRESALE_END_DATE = PRESALE_START_DATE + 30 days;\r\n    }\r\n\r\n    function buyTokens(address _buyer)\r\n        public\r\n        payable\r\n    {\r\n        require(totalSupply < TOKEN_SUPPLY_LIMIT);\r\n        uint valueWei = msg.value;\r\n\r\n        require(currentPhase == Phase.Running);\r\n        require(valueWei >= MIN_TRANSACTION_AMOUNT_ETH);\r\n        require(now >= PRESALE_START_DATE);\r\n        require(now <= PRESALE_END_DATE);\r\n\r\n        uint timeSinceStart = now - PRESALE_START_DATE;\r\n        uint newTokens = priceRules.calculatePrice(valueWei, timeSinceStart, 18);\r\n\r\n        require(newTokens > 0);\r\n        require(totalSupply + newTokens <= TOKEN_SUPPLY_LIMIT);\r\n\r\n        totalSupply += newTokens;\r\n        balanceTable[_buyer] += newTokens;\r\n\r\n        LogBuy(_buyer, valueWei, newTokens);\r\n    }\r\n\r\n    function buyTokensForFiat(address _buyer, uint tokens)\r\n        public\r\n        onlyTokenManager\r\n    {\r\n      require(currentPhase == Phase.Running);\r\n      require(tokens > 0);\r\n\r\n      uint newTokens = tokens;\r\n      require (totalSupply + newTokens <= TOKEN_SUPPLY_LIMIT);\r\n      totalSupply += newTokens;\r\n      balanceTable[_buyer] += newTokens;\r\n\r\n      LogBuyForFiat(_buyer, newTokens);\r\n    }\r\n\r\n    function withdrawEther(uint bal)\r\n        public\r\n        onlyTokenManager\r\n        returns (uint)\r\n    {\r\n        LogEscrowReq(bal);\r\n        if(this.balance >= bal) {\r\n            escrow.transfer(bal);\r\n            LogEscrow(bal);\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextPhase\",\"type\":\"uint8\"}],\"name\":\"setPresalePhase\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"buyTokensForFiat\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPresalePhaseUInt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherWeiIncoming\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"LogBuyForFiat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPhase\",\"type\":\"uint8\"}],\"name\":\"LogPhaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogEscrowReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newdate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldDate\",\"type\":\"uint256\"}],\"name\":\"LogStartDate\",\"type\":\"event\"}]","ContractName":"MaptPresaleToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fe593bbf1cd25976df21a979b33dd481173615a80000000000000000000000001462c2d895fb7c63e1b271bcb3cc269ca14153df","Library":"","SwarmSource":"bzzr://b3ae579ad58c93160dd49d2ad6c1170a01268ddd313ad2d2249bcbd75fcf022a"}]}