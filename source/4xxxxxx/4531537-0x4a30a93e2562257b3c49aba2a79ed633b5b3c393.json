{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    function issue(address _recipient, uint256 _value) returns (bool success) {}\r\n    function issueAtIco(address _recipient, uint256 _value, uint256 _icoNumber) returns (bool success) {}\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function unlock() returns (bool success) {}\r\n    function transferOwnership(address _newOwner) {}\r\n}\r\n\r\n\r\ncontract CryptoCopyCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Crowdsale addresses\r\n    address public creator;\r\n    address public buyBackFund;\r\n    address public bountyPool;\r\n    address public advisoryPool;\r\n\r\n    uint256 public minAcceptedEthAmount = 100 finney; // 0.1 ether\r\n\r\n    // ICOs specification\r\n    uint256 public maxTotalSupply = 1000000 * 10**8; // 1 mil. tokens\r\n    uint256 public tokensForInvestors = 900000 * 10**8; // 900.000 tokens\r\n    uint256 public tokensForBounty = 50000 * 10**8; // 50.000 tokens\r\n    uint256 public tokensForAdvisory = 50000 * 10**8; // 50.000 tokens\r\n\r\n    uint256 public totalTokenIssued; // Total of issued tokens\r\n\r\n    uint256 public bonusFirstTwoDaysPeriod = 2 days;\r\n    uint256 public bonusFirstWeekPeriod = 9 days;\r\n    uint256 public bonusSecondWeekPeriod = 16 days;\r\n    uint256 public bonusThirdWeekPeriod = 23 days;\r\n    uint256 public bonusFourthWeekPeriod = 30 days;\r\n    \r\n    uint256 public bonusFirstTwoDays = 20;\r\n    uint256 public bonusFirstWeek = 15;\r\n    uint256 public bonusSecondWeek = 10;\r\n    uint256 public bonusThirdWeek = 5;\r\n    uint256 public bonusFourthWeek = 5;\r\n    uint256 public bonusSubscription = 5;\r\n    \r\n    uint256 public bonusOver3ETH = 10;\r\n    uint256 public bonusOver10ETH = 20;\r\n    uint256 public bonusOver30ETH = 30;\r\n    uint256 public bonusOver100ETH = 40;\r\n\r\n    // Balances\r\n    mapping (address => uint256) balancesETH;\r\n    mapping (address => uint256) balancesETHWithBonuses;\r\n    mapping (address => uint256) balancesETHForSubscriptionBonus;\r\n    mapping (address => uint256) tokenBalances;\r\n    \r\n    uint256 public totalInvested;\r\n    uint256 public totalInvestedWithBonuses;\r\n\r\n    uint256 public hardCap = 100000 ether; // 100k ethers\r\n    uint256 public softCap = 175 ether; // 175 ethers\r\n    \r\n    enum Stages {\r\n        Countdown,\r\n        Ico,\r\n        Ended\r\n    }\r\n\r\n    Stages public stage = Stages.Countdown;\r\n\r\n    // Crowdsale times\r\n    uint public start;\r\n    uint public end;\r\n\r\n    // CryptoCopy token\r\n    Token public CryptoCopyToken;\r\n    \r\n    function setToken(address newToken) public onlyCreator {\r\n        CryptoCopyToken = Token(newToken);\r\n    }\r\n    \r\n    function returnOwnershipOfToken() public onlyCreator {\r\n        CryptoCopyToken.transferOwnership(creator);\r\n    }\r\n    \r\n    /**\r\n     * Change creator address\r\n     */\r\n    function setCreator(address _creator) public onlyCreator {\r\n        creator = _creator;\r\n    }\r\n\r\n    /**\r\n     * Throw if at stage other than current stage\r\n     *\r\n     * @param _stage expected stage to test for\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        updateState();\r\n\r\n        if (stage != _stage) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Throw if sender is not creator\r\n     */\r\n    modifier onlyCreator() {\r\n        if (creator != msg.sender) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Get ethereum balance of `_investor`\r\n     *\r\n     * @param _investor The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _investor) constant returns (uint256 balance) {\r\n        return balancesETH[_investor];\r\n    }\r\n\r\n    /**\r\n     * Construct\r\n     *\r\n     * @param _tokenAddress Address of the token\r\n     * @param _start Start of ICO\r\n     * @param _end End of ICO\r\n     */\r\n    function CryptoCopyCrowdsale(address _tokenAddress, uint256 _start, uint256 _end) {\r\n        CryptoCopyToken = Token(_tokenAddress);\r\n        creator = msg.sender;\r\n        start = _start;\r\n        end = _end;\r\n    }\r\n    \r\n    /**\r\n     * Withdraw for bounty and advisory pools\r\n     */\r\n    function withdrawBountyAndAdvisory() onlyCreator {\r\n        if (!CryptoCopyToken.issue(bountyPool, tokensForBounty)) {\r\n            throw;\r\n        }\r\n        \r\n        if (!CryptoCopyToken.issue(advisoryPool, tokensForAdvisory)) {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set up end date\r\n     */\r\n    function setEnd(uint256 _end) onlyCreator {\r\n        end = _end;\r\n    }\r\n    \r\n    /**\r\n     * Set up bounty pool\r\n     *\r\n     * @param _bountyPool Bounty pool address\r\n     */\r\n    function setBountyPool(address _bountyPool) onlyCreator {\r\n        bountyPool = _bountyPool;\r\n    }\r\n    \r\n    /**\r\n     * Set up advisory pool\r\n     *\r\n     * @param _advisoryPool Bounty pool address\r\n     */\r\n    function setAdvisoryPool(address _advisoryPool) onlyCreator {\r\n        advisoryPool = _advisoryPool;\r\n    }\r\n    \r\n    /**\r\n     * Set buy back fund address\r\n     *\r\n     * @param _buyBackFund Bay back fund address\r\n     */\r\n    function setBuyBackFund(address _buyBackFund) onlyCreator {\r\n        buyBackFund = _buyBackFund;\r\n    }\r\n\r\n    /**\r\n     * Update crowd sale stage based on current time\r\n     */\r\n    function updateState() {\r\n        uint256 timeBehind = now - start;\r\n\r\n        if (totalInvested >= hardCap || now > end) {\r\n            stage = Stages.Ended;\r\n            return;\r\n        }\r\n        \r\n        if (now < start) {\r\n            stage = Stages.Countdown;\r\n            return;\r\n        }\r\n\r\n        stage = Stages.Ico;\r\n    }\r\n\r\n    /**\r\n     * Release tokens after the ICO\r\n     */\r\n    function releaseTokens(address investorAddress) onlyCreator {\r\n        if (stage != Stages.Ended) {\r\n            return;\r\n        }\r\n        \r\n        uint256 tokensToBeReleased = tokensForInvestors * balancesETHWithBonuses[investorAddress] / totalInvestedWithBonuses;\r\n\r\n        if (tokenBalances[investorAddress] == tokensToBeReleased) {\r\n            return;\r\n        }\r\n        \r\n        if (!CryptoCopyToken.issue(investorAddress, tokensToBeReleased - tokenBalances[investorAddress])) {\r\n            throw;\r\n        }\r\n        \r\n        tokenBalances[investorAddress] = tokensToBeReleased;\r\n    }\r\n\r\n    /**\r\n     * Transfer raised amount to the company address\r\n     */\r\n    function withdraw() onlyCreator {\r\n        uint256 ethBalance = this.balance;\r\n        \r\n        if (stage != Stages.Ended) {\r\n            throw;\r\n        }\r\n        \r\n        if (!creator.send(ethBalance)) {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * Add additional bonus for subscribed investors\r\n     *\r\n     * @param investorAddress Address of investor\r\n     */\r\n    function addSubscriptionBonus(address investorAddress) onlyCreator {\r\n        uint256 alreadyIncludedSubscriptionBonus = balancesETHForSubscriptionBonus[investorAddress];\r\n        \r\n        uint256 subscriptionBonus = balancesETH[investorAddress] * bonusSubscription / 100;\r\n        \r\n        balancesETHForSubscriptionBonus[investorAddress] = subscriptionBonus;\r\n        \r\n        totalInvestedWithBonuses = totalInvestedWithBonuses.add(subscriptionBonus - alreadyIncludedSubscriptionBonus);\r\n        balancesETHWithBonuses[investorAddress] = balancesETHWithBonuses[investorAddress].add(subscriptionBonus - alreadyIncludedSubscriptionBonus);\r\n    }\r\n\r\n    /**\r\n     * Receives Eth\r\n     */\r\n    function () payable atStage(Stages.Ico) {\r\n        uint256 receivedEth = msg.value;\r\n        uint256 totalBonuses = 0;\r\n\r\n        if (receivedEth < minAcceptedEthAmount) {\r\n            throw;\r\n        }\r\n        \r\n        if (now < start + bonusFirstTwoDaysPeriod) {\r\n            totalBonuses += bonusFirstTwoDays;\r\n        } else if (now < start + bonusFirstWeekPeriod) {\r\n            totalBonuses += bonusFirstWeek;\r\n        } else if (now < start + bonusSecondWeekPeriod) {\r\n            totalBonuses += bonusSecondWeek;\r\n        } else if (now < start + bonusThirdWeekPeriod) {\r\n            totalBonuses += bonusThirdWeek;\r\n        } else if (now < start + bonusFourthWeekPeriod) {\r\n            totalBonuses += bonusFourthWeek;\r\n        }\r\n        \r\n        if (receivedEth >= 100 ether) {\r\n            totalBonuses += bonusOver100ETH;\r\n        } else if (receivedEth >= 30 ether) {\r\n            totalBonuses += bonusOver30ETH;\r\n        } else if (receivedEth >= 10 ether) {\r\n            totalBonuses += bonusOver10ETH;\r\n        } else if (receivedEth >= 3 ether) {\r\n            totalBonuses += bonusOver3ETH;\r\n        }\r\n        \r\n        uint256 receivedEthWithBonuses = receivedEth + (receivedEth * totalBonuses / 100);\r\n        \r\n        totalInvested = totalInvested.add(receivedEth);\r\n        totalInvestedWithBonuses = totalInvestedWithBonuses.add(receivedEthWithBonuses);\r\n        balancesETH[msg.sender] = balancesETH[msg.sender].add(receivedEth);\r\n        balancesETHWithBonuses[msg.sender] = balancesETHWithBonuses[msg.sender].add(receivedEthWithBonuses);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyPool\",\"type\":\"address\"}],\"name\":\"setBountyPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForAdvisory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CryptoCopyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOver30ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBountyAndAdvisory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnOwnershipOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstTwoDaysPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusThirdWeekPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_advisoryPool\",\"type\":\"address\"}],\"name\":\"setAdvisoryPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestedWithBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstWeekPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"addSubscriptionBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSecondWeekPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOver100ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstTwoDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFourthWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusFourthWeekPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOver3ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusOver10ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyBackFund\",\"type\":\"address\"}],\"name\":\"setBuyBackFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CryptoCopyCrowdsale","CompilerVersion":"v0.4.19-nightly.2017.10.29+commit.eb140bc6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000423475e0a0a90dde8bd813ebdcc21162cd5ed63f000000000000000000000000000000000000000000000000000000005a06bfb1000000000000000000000000000000000000000000000000000000005a40be10","Library":"","SwarmSource":"bzzr://3ca31d33349cfb82dc245e8d154c0d916db77099707e152065a4947cbb3984ee"}]}