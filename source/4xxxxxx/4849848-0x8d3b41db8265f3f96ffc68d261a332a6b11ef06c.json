{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract admined {\r\n\taddress public admin;\r\n\r\n\tfunction admined() public {\r\n\t\tadmin = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyAdmin(){\r\n\t\trequire(msg.sender == admin) ;\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferAdminship(address newAdmin) onlyAdmin public  {\r\n\t\tadmin = newAdmin;\r\n\t}\r\n\r\n}\r\n\r\ncontract Topscoin {\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\t// balanceOf[address] = 5;\r\n\tstring public standard = \"Topscoin v1.0\";\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals; \r\n\tuint256 public totalSupply;\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\tfunction Topscoin(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) public {\r\n\t\tbalanceOf[msg.sender] = initialSupply;\r\n\t\ttotalSupply = initialSupply;\r\n\t\tdecimals = decimalUnits;\r\n\t\tsymbol = tokenSymbol;\r\n\t\tname = tokenName;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\trequire(balanceOf[msg.sender] > _value) ;\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]) ;\r\n\t\t//if(admin)\r\n\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success){\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n\t\trequire(balanceOf[_from] > _value) ;\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]) ;\r\n\t\trequire(_value < allowance[_from][msg.sender]) ;\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\r\n\t}\r\n}\r\n\r\ncontract TopscoinAdvanced is admined, Topscoin{\r\n\r\n\tuint256 minimumBalanceForAccounts = 5 finney;\r\n\tuint256 public sellPrice;\r\n\tuint256 public buyPrice;\r\n\tmapping (address => bool) public frozenAccount;\r\n\r\n\tevent FrozenFund(address target, bool frozen);\r\n\r\n\tfunction TopscoinAdvanced(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralAdmin) Topscoin (0, tokenName, tokenSymbol, decimalUnits ) public {\r\n\t\t\r\n\t\tif(centralAdmin != 0)\r\n\t\t\tadmin = centralAdmin;\r\n\t\telse\r\n\t\t\tadmin = msg.sender;\r\n\t\tbalanceOf[admin] = initialSupply;\r\n\t\ttotalSupply = initialSupply;\t\r\n\t}\r\n\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyAdmin public {\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\ttotalSupply += mintedAmount;\r\n\t\tTransfer(0, this, mintedAmount);\r\n\t\tTransfer(this, target, mintedAmount);\r\n\t}\r\n\r\n\tfunction freezeAccount(address target, bool freeze) onlyAdmin public {\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\tFrozenFund(target, freeze);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\tif(msg.sender.balance < minimumBalanceForAccounts)\r\n\t\tsell((minimumBalanceForAccounts - msg.sender.balance)/sellPrice);\r\n\r\n\t\trequire(frozenAccount[msg.sender]) ;\r\n\t\trequire(balanceOf[msg.sender] > _value) ;\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]) ;\r\n\t\t//if(admin)\r\n\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(frozenAccount[_from]) ;\r\n\t\trequire(balanceOf[_from] > _value) ;\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]) ;\r\n\t\trequire(_value < allowance[_from][msg.sender]) ;\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyAdmin public {\r\n\t\tsellPrice = newSellPrice;\r\n\t\tbuyPrice = newBuyPrice;\r\n\t}\r\n\r\n\tfunction buy() payable  public {\r\n\t\tuint256 amount = (msg.value/(1 ether)) / buyPrice;\r\n\t\trequire(balanceOf[this] > amount) ;\r\n\t\tbalanceOf[msg.sender] += amount;\r\n\t\tbalanceOf[this] -= amount;\r\n\t\tTransfer(this, msg.sender, amount);\r\n\t}\r\n\r\n\tfunction sell(uint256 amount) public {\r\n\t\trequire(balanceOf[msg.sender] > amount) ;\r\n\t\tbalanceOf[this] +=amount;\r\n\t\tbalanceOf[msg.sender] -= amount;\r\n\t\tif(!msg.sender.send(amount * sellPrice * 1 ether)){\r\n\t\t\trevert();\r\n\t\t} else {\r\n\t\t\tTransfer(msg.sender, this, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction giveBlockreward() public {\r\n\t\tbalanceOf[block.coinbase] += 1;\r\n\t}\r\n\r\n\tbytes32 public currentChallenge;\r\n\tuint public timeOfLastProof;\r\n\tuint public difficulty = 10**32;\r\n\r\n\tfunction proofOfWork(uint nonce) public {\r\n\t\tbytes8 n = bytes8(keccak256(nonce, currentChallenge));\r\n\r\n\t\trequire(n > bytes8(difficulty)) ;\r\n\t\tuint timeSinceLastBlock = (now - timeOfLastProof);\r\n\t\trequire(timeSinceLastBlock > 5 seconds) ;\r\n\r\n\t\tbalanceOf[msg.sender] += timeSinceLastBlock / 60 seconds;\r\n\t\tdifficulty = difficulty * 10 minutes / timeOfLastProof + 1;\r\n\t\ttimeOfLastProof = now;\r\n\t\tcurrentChallenge = keccak256(nonce, currentChallenge, block.blockhash(block.number-1));\r\n \t}\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"giveBlockreward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"centralAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TopscoinAdvanced","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000042c1d8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000044ac01c7b4a9ad6f0fe4418c4675a902bc035d500000000000000000000000000000000000000000000000000000000000000008546f7073636f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004746f707300000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3c04c54fcdbbe4207ba3931523d20ed713104550f4943b9ec2123f4649efdc78"}]}