{"status":"1","message":"OK","result":[{"SourceCode":"/*    Devery Funds\r\n======================== */\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract BuyerFund {\r\n  // Store the amount of ETH deposited by each account.\r\n  mapping (address => uint256) public balances; \r\n  \r\n  // Track whether the contract has bought the tokens yet.\r\n  bool public bought_tokens; \r\n\r\n  // Whether contract is enabled.\r\n  bool public contract_enabled;\r\n  \r\n  // Record ETH value of tokens currently held by contract.\r\n  uint256 public contract_eth_value; \r\n  \r\n  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\r\n  uint256 constant public min_required_amount = 20 ether; \r\n\r\n  // Maximum\r\n  uint256 public max_raised_amount = 50 ether;\r\n\r\n  // Creator address\r\n  address constant public creator = 0x5777c72Fb022DdF1185D3e2C7BB858862c134080;\r\n  \r\n  // The crowdsale address.\r\n  address public sale;\r\n\r\n  // Buy to drain any unclaimed funds.\r\n  uint256 public drain_block;\r\n\r\n  // Picops block\r\n  uint256 public picops_block = 0;\r\n\r\n  // Picops current user\r\n  address public picops_user;\r\n\r\n  // Picops enabled bool\r\n  bool public picops_enabled = false;\r\n\r\n  // Allow fee to be sent in order to verify identity on Picops\r\n  function picops_identity(address picopsAddress, uint256 amount) {\r\n    // User == picops user.\r\n    require(msg.sender == picops_user);\r\n\r\n    // If picops isn't verified.\r\n    require(!picops_enabled);\r\n\r\n    // Transfers\r\n    picopsAddress.transfer(amount);\r\n  }\r\n\r\n  function picops_withdraw_excess() {\r\n    // If sale address set, this can't be called.\r\n    require(sale == 0x0);\r\n\r\n    // User == picops user.\r\n    require(msg.sender == picops_user);\r\n    \r\n    // If picops isn't verified.\r\n    require(!picops_enabled);\r\n\r\n    // Reset picops_block\r\n    picops_block = 0;\r\n\r\n    // Withdraw\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n  \r\n  // Allows any user to withdraw his tokens.\r\n  // Takes the token's ERC20 address as argument as it is unknown at the time of contract deployment.\r\n  function perform_withdraw(address tokenAddress) {\r\n    // Disallow withdraw if tokens haven't been bought yet.\r\n    require(bought_tokens);\r\n    \r\n    // Retrieve current token balance of contract.\r\n    ERC20 token = ERC20(tokenAddress);\r\n\r\n    // Token balance\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n      \r\n    // Disallow token withdrawals if there are no tokens to withdraw.\r\n    require(contract_token_balance != 0);\r\n      \r\n    // Store the user's token balance in a temporary variable.\r\n    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      \r\n    // Update the value of tokens currently held by the contract.\r\n    contract_eth_value -= balances[msg.sender];\r\n      \r\n    // Update the user's balance prior to sending to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n\r\n    // Fee to cover contract deployment + picops verifier. \r\n    uint256 fee = tokens_to_withdraw / 100 ;\r\n\r\n    // Send the funds.  Throws on failure to prevent loss of funds.\r\n    require(token.transfer(msg.sender, tokens_to_withdraw - (fee * 2)));\r\n\r\n    // Send the fee to creator. 1% fee.\r\n    require(token.transfer(creator, fee));\r\n\r\n    // Send the fee to the verifier. 1% fee.\r\n    require(token.transfer(picops_user, fee));\r\n  }\r\n  \r\n  // Allows any user to get his eth refunded\r\n  function refund_me() {\r\n    require(!bought_tokens);\r\n\r\n    // Store the user's balance prior to withdrawal in a temporary variable.\r\n    uint256 eth_to_withdraw = balances[msg.sender];\r\n\r\n    // Update the user's balance prior to sending ETH to prevent recursive call.\r\n    balances[msg.sender] = 0;\r\n\r\n    // Return the user's funds. \r\n    msg.sender.transfer(eth_to_withdraw);\r\n  }\r\n  \r\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n  function buy_the_tokens() {\r\n    // Balance greater than minimum.\r\n    require(this.balance > min_required_amount); \r\n\r\n    // Not bought tokens\r\n    require(!bought_tokens);\r\n    \r\n    // Record that the contract has bought the tokens.\r\n    bought_tokens = true;\r\n    \r\n    // Record the amount of ETH sent as the contract's current value.\r\n    contract_eth_value = this.balance;\r\n\r\n    // Transfer all the funds to the crowdsale address.\r\n    sale.transfer(contract_eth_value);\r\n  }\r\n\r\n  function enable_deposits(bool toggle) {\r\n    require(msg.sender == creator);\r\n\r\n    // Throw if sale isn't set\r\n    require(sale != 0x0);\r\n\r\n    // Throw if drain_block isn't set\r\n    require(drain_block != 0x0);\r\n\r\n    // Throw if picops isn't verified\r\n    require(picops_enabled);\r\n    \r\n    contract_enabled = toggle;\r\n  }\r\n\r\n  // Set before sale enabled. Not changeable once set. \r\n  function set_block(uint256 _drain_block) { \r\n    require(msg.sender == creator); \r\n\r\n    // Allows block to only be set once.\r\n    require(drain_block == 0x0);\r\n\r\n    // Sets block.\r\n    drain_block = _drain_block;\r\n  }\r\n\r\n  // Address has been verified.\r\n  function picops_is_enabled() {\r\n    require(msg.sender == creator);\r\n\r\n    picops_enabled = !picops_enabled;\r\n  }\r\n\r\n  // Set before sale enabled. Not changeable once set. \r\n  function set_sale_address(address _sale) {\r\n    require(msg.sender == creator);\r\n\r\n    // Stops address being changed \r\n    require(sale == 0x0);\r\n\r\n    // Tokens not purchased\r\n    require(!bought_tokens);\r\n\r\n    // Set sale address.\r\n    sale = _sale;\r\n  }\r\n\r\n  function set_successful_verifier(address _picops_user) {\r\n    require(msg.sender == creator);\r\n\r\n    picops_user = _picops_user;\r\n  }\r\n\r\n  function pool_drain(address tokenAddress) {\r\n    require(msg.sender == creator);\r\n\r\n    // Tokens bought\r\n    require(bought_tokens); \r\n\r\n    // Block no. decided by community.\r\n    require(block.number >= (drain_block));\r\n\r\n    // ERC20 token from address\r\n    ERC20 token = ERC20(tokenAddress);\r\n\r\n    // Token balance\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n\r\n    // Sends any remaining tokens after X date to the creator.\r\n    require(token.transfer(msg.sender, contract_token_balance));\r\n  }\r\n\r\n  // Default function.  Called when a user sends ETH to the contract.\r\n  function () payable {\r\n    require(!bought_tokens);\r\n\r\n    // Following code gives the last user to deposit coins a 30 minute period to validate through picops. \r\n    // User should not deposit too much ether.\r\n    // User should withdraw any excess ether at the end of verification.\r\n\r\n    if (!contract_enabled) {\r\n      // Gives the user approximately 30 minutes to validate. \r\n      require (block.number >= (picops_block + 120));\r\n\r\n      // Resets stored user\r\n      picops_user = msg.sender;\r\n\r\n      // Sets picops_block\r\n      picops_block = block.number;\r\n    } else {\r\n      require(this.balance < max_raised_amount);\r\n\r\n      balances[msg.sender] += msg.value;\r\n    }     \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picops_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"enable_deposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_required_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"pool_drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picops_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_me\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drain_block\",\"type\":\"uint256\"}],\"name\":\"set_block\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"picops_is_enabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"picops_user\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"picopsAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"picops_identity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drain_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_raised_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_picops_user\",\"type\":\"address\"}],\"name\":\"set_successful_verifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"picops_withdraw_excess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"perform_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BuyerFund","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://23ef034b7ece9d25828e631f5866430987b19d133dfae8fc9354f94fc1a64553"}]}