{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * Authors: Justin Jones, Marshall Stokes\r\n * Published: 2017 by Sprux LLC\r\n */\r\n\r\n\r\n/* Contract provides functions so only contract owner can execute a function */\r\ncontract owned {\r\n    address public owner;                                    //the contract owner\r\n\r\n    function owned() {\r\n        owner = msg.sender;                                  //constructor initializes the creator as the owner on initialization\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n\r\n/**\r\n * Centrally issued Ethereum token.\r\n * \r\n *\r\n * Token supply is created on deployment and allocated to contract owner and two \r\n * time-locked acccounts. The account deadlines (lock time) are in minutes from now.\r\n * The owner can then transfer from its supply to crowdfund participants.\r\n * The owner can burn any excessive tokens.\r\n * The owner can freeze and unfreeze accounts\r\n *\r\n */\r\n\r\ncontract StandardToken is owned{ \r\n    /* Public variables of the token */\r\n    string public standard = 'Token 0.1';\r\n    string public name;                     // the token name \r\n    string public symbol;                   // the ticker symbol\r\n    uint8 public decimals;                  // amount of decimal places in the token\r\n    address public the120address;           // the 120-day-locked address\r\n    address public the365address;           // the 365-day-locked address\r\n    uint public deadline120;                // days from contract creation in minutes to lock the120address (172800 minutes == 120 days)\r\n    uint public deadline365;                // days from contract creation in minutes to lock the365address (525600 minutes == 365 days)\r\n    uint256 public totalSupply;             // total number of tokens that exist (e.g. not burned)\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    /* This creates an array with all frozen accounts */\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Initializes contract with entire supply of tokens assigned to our distro accounts */\r\n    function StandardToken(\r\n\r\n        string tokenName,   \r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        \r\n        uint256 distro1,            // the initial crowdfund distro amount\r\n        uint256 distro120,          // the 120 day distro amount\r\n        uint256 distro365,          // the 365 day distro amount\r\n        address address120,         // the 120 day address \r\n        address address365,         // the 365 day address\r\n        uint durationInMinutes120,  // amount of minutes to lock address120\r\n        uint durationInMinutes365   // amount of minutes to lock address365\r\n        \r\n        ) {\r\n        balanceOf[msg.sender] = distro1;                         // Give the owner tokens for initial crowdfund distro\r\n        balanceOf[address120] = distro120;                       // Set 120 day address balance (to be locked)\r\n        balanceOf[address365] = distro365;                       // Set 365 day address balance (to be locked)\r\n        freezeAccount(address120, true);                         // Freeze the 120 day address on creation\r\n        freezeAccount(address365, true);                         // Freeze the 120 day address on creation\r\n        totalSupply = distro1+distro120+distro365;               // Total supply is sum of tokens assigned to distro accounts\r\n        deadline120 = now + durationInMinutes120 * 1 minutes;    // Set the 120 day deadline\r\n        deadline365 = now + durationInMinutes365 * 1 minutes;    // Set the 365 day deadline\r\n        the120address = address120;                              // Set the publicly accessible 120 access\r\n        the365address = address365;                              // Set the publicly accessible 365 access\r\n        name = tokenName;                                        // Set the name for display purposes\r\n        symbol = tokenSymbol;                                    // Set the symbol for display purposes\r\n        decimals = decimalUnits;                                 // Number of decimals for display purposes\r\n    }\r\n\r\n    /* Send tokens */\r\n    function transfer(address _to, uint256 _value) returns (bool success){\r\n        if (_value == 0) return false; \t\t\t\t             // Don't waste gas on zero-value transaction\r\n        if (balanceOf[msg.sender] < _value) return false;        // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\r\n        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens on your behalf */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }        \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \r\n        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \r\n        if (balanceOf[_from] < _value) return false;            // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\r\n        balanceOf[_from] -= _value;                             // Subtract from the sender\r\n        balanceOf[_to] += _value;                               // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;                 // Allowance changes\r\n        Transfer(_from, _to, _value);                           // Tokens are send\r\n        return true;\r\n    }\r\n    \r\n    /* A function to freeze or un-freeze an account, to and from */\r\n    function freezeAccount(address target, bool freeze ) onlyOwner {    \r\n        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\r\n        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\r\n        frozenAccount[target] = freeze;                                 // Set the array object to the value of bool freeze\r\n        FrozenFunds(target, freeze);                                    // Notify event\r\n    }\r\n    \r\n    /* A function to burn tokens and remove from supply */\r\n    function burn(uint256 _value) returns (bool success)  {\r\n\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \r\n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\r\n        if (balanceOf[msg.sender] < _value) return false;      // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;                       // Subtract from the sender\r\n        totalSupply -= _value;                                 // Reduce totalSupply accordingly\r\n        Transfer(msg.sender,0, _value);                        // Burn baby burn\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\r\n        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \r\n        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \r\n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\r\n        if (balanceOf[_from] < _value) return false;           // Check if the sender has enough\r\n        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\r\n        balanceOf[_from] -= _value;                            // Subtract from the sender\r\n        allowance[_from][msg.sender] -= _value;                // Allowance is updated\r\n        totalSupply -= _value;                                 // Updates totalSupply\r\n        Transfer(_from, 0, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline120\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"the365address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline365\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"the120address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"distro1\",\"type\":\"uint256\"},{\"name\":\"distro120\",\"type\":\"uint256\"},{\"name\":\"distro365\",\"type\":\"uint256\"},{\"name\":\"address120\",\"type\":\"address\"},{\"name\":\"address365\",\"type\":\"address\"},{\"name\":\"durationInMinutes120\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes365\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StandardToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000019945ca26200000000000000000000000000000000000000000000000000000019945ca2620000000000000000000000000000000000000000000000000000003e871b540c0000000000000000000000000002b2ec6739fecb9021cfa48a1c263b24e371484a80000000000000000000000003b2e10f7f855abb2204a19230d7f35cbf9aa76050000000000000000000000000000000000000000000000000000000000020c2f000000000000000000000000000000000000000000000000000000000005f56f000000000000000000000000000000000000000000000000000000000000000b537461724372656469747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045354524300000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://8d9f36d34b8dff2be20029d1143f636ad8b4a63535e6662907f5c5e01490fb71"}]}