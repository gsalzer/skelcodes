{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract McFlyToken is MintableToken {\r\n\r\n    string public constant name = 'McFly';\r\n    string public constant symbol = 'MFL';\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping(address=>bool) whitelist;\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n    event AllowTransfer(address from);\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished || whitelist[msg.sender]);\r\n        _;        \r\n    }\r\n\r\n    function allowTransfer(address from) onlyOwner {\r\n        AllowTransfer(from);\r\n        whitelist[from] = true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) canTransfer returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) canTransfer returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function burn(address from) onlyOwner returns (bool) {\r\n        Transfer(from, 0x0, balances[from]);\r\n        Burn(from, balances[from]);\r\n\r\n        balances[0x0] += balances[from];\r\n        balances[from] = 0;\r\n    }\r\n}\r\n\r\ncontract MultiOwners {\r\n\r\n    event AccessGrant(address indexed owner);\r\n    event AccessRevoke(address indexed owner);\r\n    \r\n    mapping(address => bool) owners;\r\n    address public publisher;\r\n\r\n\r\n    function MultiOwners() {\r\n        owners[msg.sender] = true;\r\n        publisher = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { \r\n        require(owners[msg.sender] == true);\r\n        _; \r\n    }\r\n\r\n    function isOwner() constant returns (bool) {\r\n        return owners[msg.sender] ? true : false;\r\n    }\r\n\r\n    function checkOwner(address maybe_owner) constant returns (bool) {\r\n        return owners[maybe_owner] ? true : false;\r\n    }\r\n\r\n\r\n    function grant(address _owner) onlyOwner {\r\n        owners[_owner] = true;\r\n        AccessGrant(_owner);\r\n    }\r\n\r\n    function revoke(address _owner) onlyOwner {\r\n        require(_owner != publisher);\r\n        require(msg.sender != _owner);\r\n\r\n        owners[_owner] = false;\r\n        AccessRevoke(_owner);\r\n    }\r\n}\r\n\r\ncontract Haltable is MultiOwners {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\ncontract McFlyCrowdsale is MultiOwners, Haltable {\r\n    using SafeMath for uint256;\r\n\r\n    // min wei per tx for TLP 1.1\r\n    uint256 public minimalWeiTLP1 = 1e17; // 0.1 ETH\r\n    uint256 public priceTLP1 = 1e14; // 0.0001 ETH\r\n\r\n    // min wei per tx for TLP 1.2\r\n    uint256 public minimalWeiTLP2 = 2e17; // 0.2 ETH\r\n    uint256 public priceTLP2 = 2e14; // 0.0002 ETH\r\n\r\n    // Total ETH received during WAVES, TLP1.1 and TLP1.2\r\n    uint256 public totalETH;\r\n\r\n    // Token\r\n    McFlyToken public token;\r\n\r\n    // Withdraw wallet\r\n    address public wallet;\r\n\r\n    // start and end timestamp for TLP 1.1, endTimeTLP1 calculate from startTimeTLP1\r\n    uint256 public startTimeTLP1;\r\n    uint256 public endTimeTLP1;\r\n    uint256 daysTLP1 = 12 days;\r\n\r\n    // start and end timestamp for TLP 1.2, endTimeTLP2 calculate from startTimeTLP2\r\n    uint256 public startTimeTLP2;\r\n    uint256 public endTimeTLP2;\r\n    uint256 daysTLP2 = 24 days;\r\n\r\n    // Percents\r\n    uint256 fundPercents = 15;\r\n    uint256 teamPercents = 10;\r\n    uint256 reservedPercents = 10;\r\n    uint256 bountyOnlinePercents = 2;\r\n    uint256 bountyOfflinePercents = 3;\r\n    uint256 advisoryPercents = 5;\r\n    \r\n    // Cap\r\n    // maximum possible tokens for minting\r\n    uint256 public hardCapInTokens = 1800e24; // 1,800,000,000 MFL\r\n\r\n    // maximum possible tokens for sell \r\n    uint256 public mintCapInTokens = hardCapInTokens.mul(70).div(100); // 1,260,000,000 MFL\r\n\r\n    // maximum possible tokens for fund minting\r\n    uint256 public fundTokens = hardCapInTokens.mul(fundPercents).div(100); // 270,000,000 MFL\r\n    uint256 public fundTotalSupply;\r\n    address public fundMintingAgent;\r\n\r\n    // Rewards\r\n    // WAVES\r\n    // maximum possible tokens to convert from WAVES\r\n    uint256 public wavesTokens = 100e24; // 100,000,000 MFL\r\n    address public wavesAgent;\r\n\r\n    // Team 10%\r\n    uint256 teamVestingPeriodInSeconds = 31 days;\r\n    uint256 teamVestingPeriodsCount = 12;\r\n    uint256 _teamTokens;\r\n    uint256 public teamTotalSupply;\r\n    address public teamWallet;\r\n\r\n    // Bounty 5% (2% + 3%)\r\n    // Bounty online 2%\r\n    uint256 _bountyOnlineTokens;\r\n    address public bountyOnlineWallet;\r\n\r\n    // Bounty offline 3%\r\n    uint256 _bountyOfflineTokens;\r\n    address public bountyOfflineWallet;\r\n\r\n    // Advisory 5%\r\n    uint256 _advisoryTokens;\r\n    address public advisoryWallet;\r\n\r\n    // Reserved for future 10%\r\n    uint256 _reservedTokens;\r\n    address public reservedWallet;\r\n\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TransferOddEther(address indexed beneficiary, uint256 value);\r\n    event FundMinting(address indexed beneficiary, uint256 value);\r\n    event TeamVesting(address indexed beneficiary, uint256 period, uint256 value);\r\n    event SetFundMintingAgent(address new_agent);\r\n    event SetStartTimeTLP1(uint256 new_startTimeTLP1);\r\n    event SetStartTimeTLP2(uint256 new_startTimeTLP2);\r\n\r\n\r\n    modifier validPurchase() {\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        \r\n        require(withinPeriod() && nonZeroPurchase);\r\n\r\n        _;        \r\n    }\r\n\r\n    function McFlyCrowdsale(\r\n        uint256 _startTimeTLP1,\r\n        uint256 _startTimeTLP2,\r\n        address _wallet,\r\n        address _wavesAgent,\r\n        address _fundMintingAgent,\r\n        address _teamWallet,\r\n        address _bountyOnlineWallet,\r\n        address _bountyOfflineWallet,\r\n        address _advisoryWallet,\r\n        address _reservedWallet\r\n    ) {\r\n        require(_startTimeTLP1 >= block.timestamp);\r\n        require(_startTimeTLP2 > _startTimeTLP1);\r\n        require(_wallet != 0x0);\r\n        require(_wavesAgent != 0x0);\r\n        require(_fundMintingAgent != 0x0);\r\n        require(_teamWallet != 0x0);\r\n        require(_bountyOnlineWallet != 0x0);\r\n        require(_bountyOfflineWallet != 0x0);\r\n        require(_advisoryWallet != 0x0);\r\n        require(_reservedWallet != 0x0);\r\n\r\n        token = new McFlyToken();\r\n\r\n        startTimeTLP1 = _startTimeTLP1; \r\n        endTimeTLP1 = startTimeTLP1.add(daysTLP1);\r\n\r\n        require(endTimeTLP1 < _startTimeTLP2);\r\n\r\n        startTimeTLP2 = _startTimeTLP2; \r\n        endTimeTLP2 = startTimeTLP2.add(daysTLP2);\r\n\r\n        wavesAgent = _wavesAgent;\r\n        fundMintingAgent = _fundMintingAgent;\r\n\r\n        wallet = _wallet;\r\n        teamWallet = _teamWallet;\r\n        bountyOnlineWallet = _bountyOnlineWallet;\r\n        bountyOfflineWallet = _bountyOfflineWallet;\r\n        advisoryWallet = _advisoryWallet;\r\n        reservedWallet = _reservedWallet;\r\n\r\n        totalETH = wavesTokens.mul(priceTLP1.mul(65).div(100)).div(1e18); // 6500 for 100,000,000 MFL from WAVES\r\n        token.mint(wavesAgent, wavesTokens);\r\n        token.allowTransfer(wavesAgent);\r\n    }\r\n\r\n    function withinPeriod() constant public returns (bool) {\r\n        bool withinPeriodTLP1 = (now >= startTimeTLP1 && now <= endTimeTLP1);\r\n        bool withinPeriodTLP2 = (now >= startTimeTLP2 && now <= endTimeTLP2);\r\n        return withinPeriodTLP1 || withinPeriodTLP2;\r\n    }\r\n\r\n    // @return false if crowdsale event was ended\r\n    function running() constant public returns (bool) {\r\n        return withinPeriod() && !token.mintingFinished();\r\n    }\r\n\r\n    function teamTokens() constant public returns (uint256) {\r\n        if(_teamTokens > 0) {\r\n            return _teamTokens;\r\n        }\r\n        return token.totalSupply().mul(teamPercents).div(70);\r\n    }\r\n\r\n    function bountyOnlineTokens() constant public returns (uint256) {\r\n        if(_bountyOnlineTokens > 0) {\r\n            return _bountyOnlineTokens;\r\n        }\r\n        return token.totalSupply().mul(bountyOnlinePercents).div(70);\r\n    }\r\n\r\n    function bountyOfflineTokens() constant public returns (uint256) {\r\n        if(_bountyOfflineTokens > 0) {\r\n            return _bountyOfflineTokens;\r\n        }\r\n        return token.totalSupply().mul(bountyOfflinePercents).div(70);\r\n    }\r\n\r\n    function advisoryTokens() constant public returns (uint256) {\r\n        if(_advisoryTokens > 0) {\r\n            return _advisoryTokens;\r\n        }\r\n        return token.totalSupply().mul(advisoryPercents).div(70);\r\n    }\r\n\r\n    function reservedTokens() constant public returns (uint256) {\r\n        if(_reservedTokens > 0) {\r\n            return _reservedTokens;\r\n        }\r\n        return token.totalSupply().mul(reservedPercents).div(70);\r\n    }\r\n\r\n    // @return current stage name\r\n    function stageName() constant public returns (string) {\r\n        bool beforePeriodTLP1 = (now < startTimeTLP1);\r\n        bool withinPeriodTLP1 = (now >= startTimeTLP1 && now <= endTimeTLP1);\r\n        bool betweenPeriodTLP1andTLP2 = (now >= endTimeTLP1 && now <= startTimeTLP2);\r\n        bool withinPeriodTLP2 = (now >= startTimeTLP2 && now <= endTimeTLP2);\r\n\r\n        if(beforePeriodTLP1) {\r\n            return 'Not started';\r\n        }\r\n\r\n        if(withinPeriodTLP1) {\r\n            return 'TLP1.1';\r\n        } \r\n\r\n        if(betweenPeriodTLP1andTLP2) {\r\n            return 'Between TLP1.1 and TLP1.2';\r\n        }\r\n\r\n        if(withinPeriodTLP2) {\r\n            return 'TLP1.2';\r\n        }\r\n\r\n        return 'Finished';\r\n    }\r\n\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n    function() payable {\r\n        return buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @dev change agent for waves minting\r\n     * @praram agent - new agent address\r\n     */\r\n    function setFundMintingAgent(address agent) onlyOwner {\r\n        fundMintingAgent = agent;\r\n        SetFundMintingAgent(agent);\r\n    }\r\n\r\n    /*\r\n     * @dev set TLP1.2 start date\r\n     * @param _at â new start date\r\n     */\r\n    function setStartTimeTLP2(uint256 _at) onlyOwner {\r\n        require(block.timestamp < startTimeTLP2); // forbid change time when TLP1.2 is active\r\n        require(block.timestamp < _at); // should be great than current block timestamp\r\n        require(endTimeTLP1 < _at); // should be great than end TLP1.1\r\n\r\n        startTimeTLP2 = _at;\r\n        endTimeTLP2 = startTimeTLP2.add(daysTLP2);\r\n        SetStartTimeTLP2(_at);\r\n    }\r\n\r\n    /*\r\n     * @dev set TLP1.1 start date\r\n     * @param _at - new start date\r\n     */\r\n    function setStartTimeTLP1(uint256 _at) onlyOwner {\r\n        require(block.timestamp < startTimeTLP1); // forbid change time when TLP1.1 is active\r\n        require(block.timestamp < _at); // should be great than current block timestamp\r\n\r\n        startTimeTLP1 = _at;\r\n        endTimeTLP1 = startTimeTLP1.add(daysTLP1);\r\n        SetStartTimeTLP1(_at);\r\n    }\r\n\r\n    /*\r\n     * @dev Large Token Holder minting \r\n     * @param to - mint to address\r\n     * @param amount - how much mint\r\n     */\r\n    function fundMinting(address to, uint256 amount) stopInEmergency {\r\n        require(msg.sender == fundMintingAgent || isOwner());\r\n        require(block.timestamp <= startTimeTLP2);\r\n        require(fundTotalSupply + amount <= fundTokens);\r\n        require(token.totalSupply() + amount <= mintCapInTokens);\r\n\r\n        fundTotalSupply = fundTotalSupply.add(amount);\r\n        FundMinting(to, amount);\r\n        token.mint(to, amount);\r\n    }\r\n\r\n    /*\r\n     * @dev calculate amount\r\n     * @param  _value - ether to be converted to tokens\r\n     * @param  at - current time\r\n     * @param  _totalSupply - total supplied tokens\r\n     * @return tokens amount that we should send to our dear investor\r\n     * @return odd ethers amount, which contract should send back\r\n     */\r\n    function calcAmountAt(\r\n        uint256 amount,\r\n        uint256 at,\r\n        uint256 _totalSupply\r\n    ) public constant returns (uint256, uint256) {\r\n        uint256 estimate;\r\n        uint256 discount;\r\n        uint256 price;\r\n\r\n        if(at >= startTimeTLP1 && at <= endTimeTLP1) {\r\n            /*\r\n                35% 0.0650 | 1 ETH -> 1 / (100-35) * 100 / 0.1 * 1000 = 15384.61538461538 MFL\r\n                30% 0.0700 | 1 ETH -> 1 / (100-30) * 100 / 0.1 * 1000 = 14285.714287 MFL\r\n                15% 0.0850 | 1 ETH -> 1 / (100-15) * 100 / 0.1 * 1000 = 11764.705882352941 MFL\r\n                 0% 0.1000 | 1 ETH -> 1 / (100-0) * 100  / 0.1 * 1000 = 10000 MFL\r\n            */\r\n            require(amount >= minimalWeiTLP1);\r\n\r\n            price = priceTLP1;\r\n\r\n            if(at < startTimeTLP1 + 3 days) {\r\n                discount = 65; //  100-35 = 0.065 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP1 + 6 days) {\r\n                discount = 70; //  100-30 = 0.07 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP1 + 9 days) {\r\n                discount = 85; //  100-15 = 0.085 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP1 + 12 days) {\r\n                discount = 100; // 100 = 0.1 ETH per 1000 MFL\r\n\r\n            } else {\r\n                revert();\r\n            }\r\n\r\n        } else if(at >= startTimeTLP2 && at <= endTimeTLP2) {\r\n            /*\r\n                 -40% 0.12 | 1 ETH -> 1 / (100-40) * 100 / 0.2 * 1000 = 8333.3333333333 MFL\r\n                 -30% 0.14 | 1 ETH -> 1 / (100-30) * 100 / 0.2 * 1000 = 7142.8571428571 MFL\r\n                 -20% 0.16 | 1 ETH -> 1 / (100-20) * 100 / 0.2 * 1000 = 6250 MFL\r\n                 -10% 0.18 | 1 ETH -> 1 / (100-10) * 100 / 0.2 * 1000 = 5555.5555555556 MFL\r\n                   0% 0.20 | 1 ETH -> 1 / (100-0) * 100 / 0.2 * 1000  = 5000 MFL\r\n                  10% 0.22 | 1 ETH -> 1 / (100+10) * 100 / 0.2 * 1000 = 4545.4545454545 MFL\r\n                  20% 0.24 | 1 ETH -> 1 / (100+20) * 100 / 0.2 * 1000 = 4166.6666666667 MFL\r\n                  30% 0.26 | 1 ETH -> 1 / (100+30) * 100 / 0.2 * 1000 = 3846.1538461538 MFL\r\n            */\r\n            require(amount >= minimalWeiTLP2);\r\n\r\n            price = priceTLP2;\r\n\r\n            if(at < startTimeTLP2 + 3 days) {\r\n                discount = 60; // 100-40 = 0.12 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 6 days) {\r\n                discount = 70; // 100-30 = 0.14 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 9 days) {\r\n                discount = 80; // 100-20 = 0.16 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 12 days) {\r\n                discount = 90; // 100-10 = 0.18 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 15 days) {\r\n                discount = 100; // 100 = 0.2 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 18 days) {\r\n                discount = 110; // 100+10 = 0.22 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 21 days) {\r\n                discount = 120; // 100+20 = 0.24 ETH per 1000 MFL\r\n\r\n            } else if(at < startTimeTLP2 + 24 days) {\r\n                discount = 130; // 100+30 = 0.26 ETH per 1000 MFL\r\n\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        price = price.mul(discount).div(100);\r\n        estimate = _totalSupply.add(amount.mul(1e18).div(price));\r\n\r\n        if(estimate > mintCapInTokens) {\r\n            return (\r\n                mintCapInTokens.sub(_totalSupply),\r\n                estimate.sub(mintCapInTokens).mul(price).div(1e18)\r\n            );\r\n        }\r\n        return (estimate.sub(_totalSupply), 0);\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function buyTokens(address contributor) payable stopInEmergency validPurchase public {\r\n        uint256 amount;\r\n        uint256 odd_ethers;\r\n        uint256 ethers;\r\n        \r\n        (amount, odd_ethers) = calcAmountAt(msg.value, block.timestamp, token.totalSupply());\r\n  \r\n        require(contributor != 0x0) ;\r\n        require(amount + token.totalSupply() <= mintCapInTokens);\r\n\r\n        ethers = (msg.value - odd_ethers);\r\n\r\n        token.mint(contributor, amount); // fail if minting is finished\r\n        TokenPurchase(contributor, ethers, amount);\r\n        totalETH += ethers;\r\n\r\n        if(odd_ethers > 0) {\r\n            require(odd_ethers < msg.value);\r\n            TransferOddEther(contributor, odd_ethers);\r\n            contributor.transfer(odd_ethers);\r\n        }\r\n\r\n        wallet.transfer(ethers);\r\n    }\r\n\r\n    function teamWithdraw() public {\r\n        require(token.mintingFinished());\r\n        require(msg.sender == teamWallet || isOwner());\r\n\r\n        uint256 currentPeriod = (block.timestamp).sub(endTimeTLP2).div(teamVestingPeriodInSeconds);\r\n        if(currentPeriod > teamVestingPeriodsCount) {\r\n            currentPeriod = teamVestingPeriodsCount;\r\n        }\r\n        uint256 tokenAvailable = _teamTokens.mul(currentPeriod).div(teamVestingPeriodsCount).sub(teamTotalSupply);\r\n\r\n        require(teamTotalSupply + tokenAvailable <= _teamTokens);\r\n\r\n        teamTotalSupply = teamTotalSupply.add(tokenAvailable);\r\n\r\n        TeamVesting(teamWallet, currentPeriod, tokenAvailable);\r\n        token.transfer(teamWallet, tokenAvailable);\r\n\r\n    }\r\n\r\n    function finishCrowdsale() onlyOwner public {\r\n        require(now > endTimeTLP2 || mintCapInTokens == token.totalSupply());\r\n        require(!token.mintingFinished());\r\n\r\n        uint256 _totalSupply = token.totalSupply();\r\n\r\n        // rewards\r\n        _teamTokens = _totalSupply.mul(teamPercents).div(70); // 180,000,000 MFL\r\n        token.mint(this, _teamTokens); // mint to contract address\r\n\r\n        _reservedTokens = _totalSupply.mul(reservedPercents).div(70); // 180,000,000 MFL\r\n        token.mint(reservedWallet, _reservedTokens);\r\n\r\n        _advisoryTokens = _totalSupply.mul(advisoryPercents).div(70); // 90,000,000 MFL\r\n        token.mint(advisoryWallet, _advisoryTokens);\r\n\r\n        _bountyOfflineTokens = _totalSupply.mul(bountyOfflinePercents).div(70); // 54,000,000 MFL\r\n        token.mint(bountyOfflineWallet, _bountyOfflineTokens);\r\n\r\n        _bountyOnlineTokens = _totalSupply.mul(bountyOnlinePercents).div(70); // 36,000,000 MFL\r\n        token.mint(bountyOnlineWallet, _bountyOnlineTokens);\r\n\r\n        token.finishMinting();\r\n   }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTLP1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setStartTimeTLP1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundMintingAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOfflineTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setFundMintingAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeTLP2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalWeiTLP2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setStartTimeTLP2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeTLP2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wavesAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeTLP1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"at\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"calcAmountAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOnlineWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"teamWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOfflineWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTLP2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maybe_owner\",\"type\":\"address\"}],\"name\":\"checkOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyOnlineTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wavesTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalWeiTLP1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeTLP1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimeTLP1\",\"type\":\"uint256\"},{\"name\":\"_startTimeTLP2\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_wavesAgent\",\"type\":\"address\"},{\"name\":\"_fundMintingAgent\",\"type\":\"address\"},{\"name\":\"_teamWallet\",\"type\":\"address\"},{\"name\":\"_bountyOnlineWallet\",\"type\":\"address\"},{\"name\":\"_bountyOfflineWallet\",\"type\":\"address\"},{\"name\":\"_advisoryWallet\",\"type\":\"address\"},{\"name\":\"_reservedWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferOddEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TeamVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_agent\",\"type\":\"address\"}],\"name\":\"SetFundMintingAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_startTimeTLP1\",\"type\":\"uint256\"}],\"name\":\"SetStartTimeTLP1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_startTimeTLP2\",\"type\":\"uint256\"}],\"name\":\"SetStartTimeTLP2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessRevoke\",\"type\":\"event\"}]","ContractName":"McFlyCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a00f780000000000000000000000000000000000000000000000000000000005a209b800000000000000000000000001968ca762be67170bdbac3e92b0994c94396ce8e000000000000000000000000a149371e5cb03a91ac4c145db3407a22cbac68cb0000000000000000000000008233a1e4e4559e3c14478e3b2f1f14e3aa5d70ce000000000000000000000000fe8aaf90e062779ca4d8bbef587e2314e9cd092200000000000000000000000015e3640cbf48f241a5c532523340323536ef03f0000000000000000000000000ef2c37b2ea0fd96ef3ca9ca1205943cf6b1acf40000000000000000000000000827b553d7161d07ba090bedb7a2990461c73fc14000000000000000000000000dcd7633fbf57f389480987861198eccca01b1286","Library":"","SwarmSource":"bzzr://5d9dbeec6170bfb3d366b5c52e52309bdda13fea849408aa27f91bb97130c22d"}]}