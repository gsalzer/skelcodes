{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract Finalizable is Ownable {\r\n  bool public contractFinalized;\r\n\r\n  modifier notFinalized() {\r\n    require(!contractFinalized);\r\n    _;\r\n  }\r\n\r\n  function finalizeContract() onlyOwner {\r\n    contractFinalized = true;\r\n  }\r\n}\r\n\r\ncontract Shared is Ownable, Finalizable {\r\n  uint internal constant DECIMALS = 8;\r\n  \r\n  address internal constant REWARDS_WALLET = 0x30b002d3AfCb7F9382394f7c803faFBb500872D8;\r\n  address internal constant CROWDSALE_WALLET = 0x028e1Ce69E379b1678278640c7387ecc40DAa895;\r\n  address internal constant LIFE_CHANGE_WALLET = 0xEe4284f98D0568c7f65688f18A2F74354E17B31a;\r\n  address internal constant LIFE_CHANGE_VESTING_WALLET = 0x2D354bD67707223C9aC0232cd0E54f22b03483Cf;\r\n}\r\n\r\ncontract Ledger is Shared {\r\n  using SafeMath for uint;\r\n\r\n  address public controller;\r\n  mapping(address => uint) public balanceOf;\r\n  mapping (address => mapping (address => uint)) public allowed;\r\n  uint public totalSupply;\r\n\r\n  function setController(address _address) onlyOwner notFinalized {\r\n    controller = _address;\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _from, address _to, uint _value) onlyController returns (bool success) {\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _spender, address _from, address _to, uint _value) onlyController returns (bool success) {\r\n    var _allowance = allowed[_from][_spender];\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    allowed[_from][_spender] = _allowance.sub(_value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _owner, address _spender, uint _value) onlyController returns (bool success) {\r\n    require((_value == 0) || (allowed[_owner][_spender] == 0));\r\n    allowed[_owner][_spender] = _value;\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) onlyController constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function burn(address _from, uint _amount) onlyController returns (bool success) {\r\n    balanceOf[_from] = balanceOf[_from].sub(_amount);\r\n    totalSupply = totalSupply.sub(_amount);\r\n    return true;\r\n  }\r\n\r\n  function mint(address _to, uint _amount) onlyController returns (bool success) {\r\n    balanceOf[_to] += _amount;\r\n    totalSupply += _amount;\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Controller is Shared, Pausable {\r\n  using SafeMath for uint;\r\n\r\n  bool public initialized;\r\n\r\n  ChristCoin public token;\r\n  Ledger public ledger;\r\n  address public crowdsale;\r\n\r\n  uint public vestingAmount;\r\n  uint public vestingPaid;\r\n  uint public vestingStart;\r\n  uint public vestingDuration;\r\n\r\n  function Controller(address _token, address _ledger, address _crowdsale) {\r\n    token = ChristCoin(_token);\r\n    ledger = Ledger(_ledger);\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  function setToken(address _address) onlyOwner notFinalized {\r\n    token = ChristCoin(_address);\r\n  }\r\n\r\n  function setLedger(address _address) onlyOwner notFinalized {\r\n    ledger = Ledger(_address);\r\n  }\r\n\r\n  function setCrowdsale(address _address) onlyOwner notFinalized {\r\n    crowdsale = _address;\r\n  }\r\n\r\n  modifier onlyToken() {\r\n    require(msg.sender == address(token));\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrowdsale() {\r\n    require(msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTokenOrCrowdsale() {\r\n    require(msg.sender == address(token) || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  modifier notVesting() {\r\n    require(msg.sender != LIFE_CHANGE_VESTING_WALLET);\r\n    _;\r\n  }\r\n\r\n  function init() onlyOwner {\r\n    require(!initialized);\r\n    mintWithEvent(REWARDS_WALLET, 9 * (10 ** (9 + DECIMALS))); // 9 billion\r\n    mintWithEvent(CROWDSALE_WALLET, 900 * (10 ** (6 + DECIMALS))); // 900 million\r\n    mintWithEvent(LIFE_CHANGE_WALLET, 100 * (10 ** (6 + DECIMALS))); // 100 million\r\n    initialized = true;\r\n  }\r\n\r\n  function totalSupply() onlyToken constant returns (uint) {\r\n    return ledger.totalSupply();\r\n  }\r\n\r\n  function balanceOf(address _owner) onlyTokenOrCrowdsale constant returns (uint) {\r\n    return ledger.balanceOf(_owner);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) onlyToken constant returns (uint) {\r\n    return ledger.allowance(_owner, _spender);\r\n  }\r\n\r\n  function transfer(address _from, address _to, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\r\n    return ledger.transfer(_from, _to, _value);\r\n  }\r\n\r\n  function transferWithEvent(address _from, address _to, uint _value) onlyCrowdsale returns (bool success) {\r\n    success = ledger.transfer(_from, _to, _value);\r\n    if (success) {\r\n      token.controllerTransfer(msg.sender, _to, _value);\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _spender, address _from, address _to, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\r\n    return ledger.transferFrom(_spender, _from, _to, _value);\r\n  }\r\n\r\n  function approve(address _owner, address _spender, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\r\n    return ledger.approve(_owner, _spender, _value);\r\n  }\r\n\r\n  function burn(address _owner, uint _amount) onlyToken whenNotPaused returns (bool success) {\r\n    return ledger.burn(_owner, _amount);\r\n  }\r\n\r\n  function mintWithEvent(address _to, uint _amount) internal returns (bool success) {\r\n    success = ledger.mint(_to, _amount);\r\n    if (success) {\r\n      token.controllerTransfer(0x0, _to, _amount);\r\n    }\r\n  }\r\n\r\n  function startVesting(uint _amount, uint _duration) onlyCrowdsale {\r\n    require(vestingAmount == 0);\r\n    vestingAmount = _amount;\r\n    vestingPaid = 0;\r\n    vestingStart = now;\r\n    vestingDuration = _duration;\r\n  }\r\n\r\n  function withdrawVested(address _withdrawTo) returns (uint amountWithdrawn) {\r\n    require(msg.sender == LIFE_CHANGE_VESTING_WALLET);\r\n    require(vestingAmount > 0);\r\n    \r\n    uint _elapsed = now.sub(vestingStart);\r\n    uint _rate = vestingAmount.div(vestingDuration);\r\n    uint _unlocked = _rate.mul(_elapsed);\r\n\r\n    if (_unlocked > vestingAmount) {\r\n       _unlocked = vestingAmount;\r\n    }\r\n\r\n    if (_unlocked <= vestingPaid) {\r\n      amountWithdrawn = 0;\r\n      return;\r\n    }\r\n\r\n    amountWithdrawn = _unlocked.sub(vestingPaid);\r\n    vestingPaid = vestingPaid.add(amountWithdrawn);\r\n\r\n    ledger.transfer(LIFE_CHANGE_VESTING_WALLET, _withdrawTo, amountWithdrawn);\r\n    token.controllerTransfer(LIFE_CHANGE_VESTING_WALLET, _withdrawTo, amountWithdrawn);\r\n  }\r\n}\r\n\r\ncontract ChristCoin is Shared {\r\n  using SafeMath for uint;\r\n\r\n  string public name = \"Christ Coin\";\r\n  string public symbol = \"CCLC\";\r\n  uint8 public decimals = 8;\r\n\r\n  Controller public controller;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  function setController(address _address) onlyOwner notFinalized {\r\n    controller = Controller(_address);\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(msg.sender == address(controller));\r\n    _;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint) {\r\n    return controller.balanceOf(_owner);\r\n  }\r\n\r\n  function totalSupply() constant returns (uint) {\r\n    return controller.totalSupply();\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    success = controller.transfer(msg.sender, _to, _value);\r\n    if (success) {\r\n      Transfer(msg.sender, _to, _value);\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    success = controller.transferFrom(msg.sender, _from, _to, _value);\r\n    if (success) {\r\n      Transfer(_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n    success = controller.approve(msg.sender, _spender, _value);\r\n    if (success) {\r\n      Approval(msg.sender, _spender, _value);\r\n    }\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint) {\r\n    return controller.allowance(_owner, _spender);\r\n  }\r\n\r\n  function burn(uint _amount) onlyOwner returns (bool success) {\r\n    success = controller.burn(msg.sender, _amount);\r\n    if (success) {\r\n      Transfer(msg.sender, 0x0, _amount);\r\n    }\r\n  }\r\n\r\n  function controllerTransfer(address _from, address _to, uint _value) onlyController {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function controllerApproval(address _from, address _spender, uint _value) onlyController {\r\n    Approval(_from, _spender, _value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vestingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithEvent\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLedger\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawTo\",\"type\":\"address\"}],\"name\":\"withdrawVested\",\"outputs\":[{\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"startVesting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_ledger\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000007837872a605461981127653c6d21e45c9cf180500000000000000000000000052ae06056e121d2d34ea2e42e1b84b46bd3a31db000000000000000000000000656dfda5eb02047b3f4ddbb91777738a9d49eb99","Library":"","SwarmSource":"bzzr://5a6916d48351d7ab3ad5c74e15c38d9f4ea71e86f1527fba6b4bba8004f9feb9"}]}