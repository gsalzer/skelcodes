{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _amount The amount of tokens to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _amount) returns (bool success);\r\n\r\n  /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n  ///  is approved by `_from`\r\n  /// @param _from The address holding the tokens being transferred\r\n  /// @param _to The address of the recipient\r\n  /// @param _amount The amount of tokens to be transferred\r\n  /// @return True if the transfer was successful\r\n  function transferFrom(address _from, address _to, uint256 _amount\r\n  ) returns (bool success);\r\n\r\n  /// @param _owner The address that's balance is being requested\r\n  /// @return The balance of `_owner` at the current block\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n  ///  its behalf. This is a modified version of the ERC20 approve function\r\n  ///  to be a little bit safer\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _amount The amount of tokens to be approved for transfer\r\n  /// @return True if the approval was successful\r\n  function approve(address _spender, uint256 _amount) returns (bool success);\r\n\r\n  /// @dev This function makes it easy to read the `allowed[]` map\r\n  /// @param _owner The address of the account that owns the token\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n  ///  to spend\r\n  function allowance(address _owner, address _spender\r\n  ) constant returns (uint256 remaining);\r\n\r\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n  ///  its behalf, and then a function is triggered in the contract that is\r\n  ///  being approved, `_spender`. This allows users to use their tokens to\r\n  ///  interact with contracts in one function call instead of two\r\n  /// @param _spender The address of the contract able to transfer the tokens\r\n  /// @param _amount The amount of tokens to be approved for transfer\r\n  /// @return True if the function call was successful\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n  ) returns (bool success);\r\n\r\n  /// @dev This function makes it easy to get the total number of tokens\r\n  /// @return The total number of tokens\r\n  function totalSupply() constant returns (uint);\r\n}\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount)\r\n        returns(bool);\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) return false;\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        // Recommended by Bokky Poobah to remove this check\r\n        // require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function ()  payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Aigang Contribution contract\r\n *\r\n *  By contributing ETH to this smart contract you agree to the following terms and conditions:\r\n *  https://github.com/AigangNetwork/aigang-crowdsale-contracts/Aigang-T&Cs(171020_clean).docx\r\n *\r\n */\r\n\r\n\r\ncontract Contribution is Controlled, TokenController {\r\n  using SafeMath for uint256;\r\n\r\n  MiniMeToken public aix;\r\n  bool public transferable;\r\n  address public contributionWallet;\r\n  address public remainderHolder;\r\n  address public devHolder;\r\n  address public communityHolder;\r\n  address public exchanger;\r\n\r\n  address public collector;\r\n  uint256 public collectorWeiCap;\r\n  uint256 public collectorWeiCollected;\r\n\r\n  uint256 public totalWeiCap;             // Total Wei to be collected\r\n  uint256 public totalWeiCollected;       // How much Wei has been collected\r\n  uint256 public weiPreCollected;\r\n  uint256 public notCollectedAmountAfter24Hours;\r\n  uint256 public twentyPercentWithBonus;\r\n  uint256 public thirtyPercentWithBonus;\r\n\r\n  uint256 public minimumPerTransaction = 0.01 ether;\r\n\r\n  uint256 public numWhitelistedInvestors;\r\n  mapping (address => bool) public canPurchase;\r\n  mapping (address => uint256) public individualWeiCollected;\r\n\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 public initializedTime;\r\n  uint256 public finalizedTime;\r\n\r\n  uint256 public initializedBlock;\r\n  uint256 public finalizedBlock;\r\n\r\n  bool public paused;\r\n\r\n  modifier initialized() {\r\n    require(initializedBlock != 0);\r\n    _;\r\n  }\r\n\r\n  modifier contributionOpen() {\r\n    // collector can start depositing 2 days prior\r\n    if (msg.sender == collector) {\r\n      require(getBlockTimestamp().add(2 days) >= startTime);\r\n    } else {\r\n      require(getBlockTimestamp() >= startTime);\r\n    }\r\n    require(getBlockTimestamp() <= endTime);\r\n    require(finalizedTime == 0);\r\n    _;\r\n  }\r\n\r\n  modifier notPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  function Contribution(address _aix) {\r\n    require(_aix != 0x0);\r\n    aix = MiniMeToken(_aix);\r\n  }\r\n\r\n  function initialize(\r\n      address _apt,\r\n      address _exchanger,\r\n      address _contributionWallet,\r\n      address _remainderHolder,\r\n      address _devHolder,\r\n      address _communityHolder,\r\n      address _collector,\r\n      uint256 _collectorWeiCap,\r\n      uint256 _totalWeiCap,\r\n      uint256 _startTime,\r\n      uint256 _endTime\r\n  ) public onlyController {\r\n    // Initialize only once\r\n    require(initializedBlock == 0);\r\n    require(initializedTime == 0);\r\n    assert(aix.totalSupply() == 0);\r\n    assert(aix.controller() == address(this));\r\n    assert(aix.decimals() == 18);  // Same amount of decimals as ETH\r\n\r\n    require(_contributionWallet != 0x0);\r\n    contributionWallet = _contributionWallet;\r\n\r\n    require(_remainderHolder != 0x0);\r\n    remainderHolder = _remainderHolder;\r\n\r\n    require(_devHolder != 0x0);\r\n    devHolder = _devHolder;\r\n\r\n    require(_communityHolder != 0x0);\r\n    communityHolder = _communityHolder;\r\n\r\n    require(_collector != 0x0);\r\n    collector = _collector;\r\n\r\n    require(_collectorWeiCap > 0);\r\n    require(_collectorWeiCap <= _totalWeiCap);\r\n    collectorWeiCap = _collectorWeiCap;\r\n\r\n    assert(_startTime >= getBlockTimestamp());\r\n    require(_startTime < _endTime);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n\r\n    require(_totalWeiCap > 0);\r\n    totalWeiCap = _totalWeiCap;\r\n\r\n    initializedBlock = getBlockNumber();\r\n    initializedTime = getBlockTimestamp();\r\n\r\n    require(_apt != 0x0);\r\n    require(_exchanger != 0x0);\r\n\r\n    weiPreCollected = MiniMeToken(_apt).totalSupplyAt(initializedBlock);\r\n\r\n    // Exchangerate from apt to aix 2500 considering 25% bonus.\r\n    require(aix.generateTokens(_exchanger, weiPreCollected.mul(2500)));\r\n    exchanger = _exchanger;\r\n\r\n    Initialized(initializedBlock);\r\n  }\r\n\r\n  /// @notice interface for founders to blacklist investors\r\n  /// @param _investors array of investors\r\n  function blacklistAddresses(address[] _investors) public onlyController {\r\n    for (uint256 i = 0; i < _investors.length; i++) {\r\n      blacklist(_investors[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice interface for founders to whitelist investors\r\n  /// @param _investors array of investors\r\n  function whitelistAddresses(address[] _investors) public onlyController {\r\n    for (uint256 i = 0; i < _investors.length; i++) {\r\n      whitelist(_investors[i]);\r\n    }\r\n  }\r\n\r\n  function whitelist(address investor) public onlyController {\r\n    if (canPurchase[investor]) return;\r\n    numWhitelistedInvestors++;\r\n    canPurchase[investor] = true;\r\n  }\r\n\r\n  function blacklist(address investor) public onlyController {\r\n    if (!canPurchase[investor]) return;\r\n    numWhitelistedInvestors--;\r\n    canPurchase[investor] = false;\r\n  }\r\n\r\n  // ETH-AIX exchange rate\r\n  function exchangeRate() constant public initialized returns (uint256) {\r\n    if (getBlockTimestamp() <= startTime + 1 hours) {\r\n      // 15% Bonus\r\n      return 2300;\r\n    }\r\n\r\n    if (getBlockTimestamp() <= startTime + 2 hours) {\r\n      // 10% Bonus\r\n      return 2200;\r\n    }\r\n\r\n    if (getBlockTimestamp() <= startTime + 1 days) {\r\n      return 2000;\r\n    }\r\n\r\n    uint256 collectedAfter24Hours = notCollectedAmountAfter24Hours.sub(weiToCollect());\r\n\r\n    if (collectedAfter24Hours <= twentyPercentWithBonus) {\r\n      // 15% Bonus\r\n      return 2300;\r\n    }\r\n\r\n    if (collectedAfter24Hours <= twentyPercentWithBonus + thirtyPercentWithBonus) {\r\n      // 10% Bonus\r\n      return 2200;\r\n    }\r\n\r\n    return 2000;\r\n  }\r\n\r\n  function tokensToGenerate(uint256 toFund) constant public returns (uint256) {\r\n    // collector gets 15% bonus\r\n    if (msg.sender == collector) {\r\n      return toFund.mul(2300);\r\n    }\r\n\r\n    return toFund.mul(exchangeRate());\r\n  }\r\n\r\n  /// @notice If anybody sends Ether directly to this contract, consider he is\r\n  /// getting AIXs.\r\n  function () public payable notPaused {\r\n    proxyPayment(msg.sender);\r\n  }\r\n\r\n  //////////\r\n  // TokenController functions\r\n  //////////\r\n\r\n  /// @notice This method will generally be called by the AIX token contract to\r\n  ///  acquire AIXs. Or directly from third parties that want to acquire AIXs in\r\n  ///  behalf of a token holder.\r\n  /// @param _th AIX holder where the AIXs will be minted.\r\n  function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\r\n    require(_th != 0x0);\r\n    doBuy(_th);\r\n    return true;\r\n  }\r\n\r\n  function onTransfer(address _from, address, uint256) public returns (bool) {\r\n    if (_from == exchanger) {\r\n      return true;\r\n    }\r\n    return transferable;\r\n  }\r\n\r\n  function onApprove(address _from, address, uint256) public returns (bool) {\r\n    if (_from == exchanger) {\r\n      return true;\r\n    }\r\n    return transferable;\r\n  }\r\n\r\n  function allowTransfers(bool _transferable) onlyController {\r\n    transferable = _transferable;\r\n  }\r\n\r\n  function doBuy(address _th) internal {\r\n    // whitelisting only during the first day\r\n    if (getBlockTimestamp() <= startTime + 1 days) {\r\n      require(canPurchase[_th] || msg.sender == collector);\r\n    } else if (notCollectedAmountAfter24Hours == 0) {\r\n      notCollectedAmountAfter24Hours = weiToCollect();\r\n      twentyPercentWithBonus = notCollectedAmountAfter24Hours.mul(20).div(100);\r\n      thirtyPercentWithBonus = notCollectedAmountAfter24Hours.mul(30).div(100);\r\n    }\r\n\r\n    require(msg.value >= minimumPerTransaction);\r\n    uint256 toFund = msg.value;\r\n    uint256 toCollect = weiToCollectByInvestor(_th);\r\n\r\n    if (toCollect > 0) {\r\n      // Check total supply cap reached, sell the all remaining tokens\r\n      if (toFund > toCollect) {\r\n        toFund = toCollect;\r\n      }\r\n      uint256 tokensGenerated = tokensToGenerate(toFund);\r\n      require(tokensGenerated > 0);\r\n      require(aix.generateTokens(_th, tokensGenerated));\r\n\r\n      contributionWallet.transfer(toFund);\r\n      individualWeiCollected[_th] = individualWeiCollected[_th].add(toFund);\r\n      totalWeiCollected = totalWeiCollected.add(toFund);\r\n      NewSale(_th, toFund, tokensGenerated);\r\n    } else {\r\n      toFund = 0;\r\n    }\r\n\r\n    uint256 toReturn = msg.value.sub(toFund);\r\n    if (toReturn > 0) {\r\n      _th.transfer(toReturn);\r\n    }\r\n  }\r\n\r\n  /// @notice This method will can be called by the controller before the contribution period\r\n  ///  end or by anybody after the `endTime`. This method finalizes the contribution period\r\n  ///  by creating the remaining tokens and transferring the controller to the configured\r\n  ///  controller.\r\n  function finalize() public initialized {\r\n    require(finalizedBlock == 0);\r\n    require(finalizedTime == 0);\r\n    require(getBlockTimestamp() >= startTime);\r\n    require(msg.sender == controller || getBlockTimestamp() > endTime || weiToCollect() == 0);\r\n\r\n    // remainder will be minted and locked for 1 year.\r\n    aix.generateTokens(remainderHolder, weiToCollect().mul(2000));\r\n    // AIX generated so far is 51% of total\r\n    uint256 tokenCap = aix.totalSupply().mul(100).div(51);\r\n    // dev Wallet will have 20% of the total Tokens and will be able to retrieve quarterly.\r\n    aix.generateTokens(devHolder, tokenCap.mul(20).div(100));\r\n    // community Wallet will have access to 29% of the total Tokens.\r\n    aix.generateTokens(communityHolder, tokenCap.mul(29).div(100));\r\n\r\n    finalizedBlock = getBlockNumber();\r\n    finalizedTime = getBlockTimestamp();\r\n\r\n    Finalized(finalizedBlock);\r\n  }\r\n\r\n  //////////\r\n  // Constant functions\r\n  //////////\r\n\r\n  /// @return Total eth that still available for collection in weis.\r\n  function weiToCollect() public constant returns(uint256) {\r\n    return totalWeiCap > totalWeiCollected ? totalWeiCap.sub(totalWeiCollected) : 0;\r\n  }\r\n\r\n  /// @return Total eth that still available for collection in weis.\r\n  function weiToCollectByInvestor(address investor) public constant returns(uint256) {\r\n    uint256 cap;\r\n    uint256 collected;\r\n    // adding 1 day as a placeholder for X hours.\r\n    // This should change into a variable or coded into the contract.\r\n    if (investor == collector) {\r\n      cap = collectorWeiCap;\r\n      collected = individualWeiCollected[investor];\r\n    } else if (getBlockTimestamp() <= startTime + 1 days) {\r\n      cap = totalWeiCap.div(numWhitelistedInvestors);\r\n      collected = individualWeiCollected[investor];\r\n    } else {\r\n      cap = totalWeiCap;\r\n      collected = totalWeiCollected;\r\n    }\r\n    return cap > collected ? cap.sub(collected) : 0;\r\n  }\r\n\r\n  //////////\r\n  // Testing specific methods\r\n  //////////\r\n\r\n  /// @notice This function is overridden by the test Mocks.\r\n  function getBlockNumber() internal constant returns (uint256) {\r\n    return block.number;\r\n  }\r\n\r\n  function getBlockTimestamp() internal constant returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  //////////\r\n  // Safety Methods\r\n  //////////\r\n\r\n  /// @notice This method can be used by the controller to extract mistakenly\r\n  ///  sent tokens to this contract.\r\n  /// @param _token The address of the token contract that you want to recover\r\n  ///  set to 0 in case you want to extract ether.\r\n  function claimTokens(address _token) public onlyController {\r\n    if (aix.controller() == address(this)) {\r\n      aix.claimTokens(_token);\r\n    }\r\n\r\n    if (_token == 0x0) {\r\n      controller.transfer(this.balance);\r\n      return;\r\n    }\r\n\r\n    ERC20 token = ERC20(_token);\r\n    uint256 balance = token.balanceOf(this);\r\n    token.transfer(controller, balance);\r\n    ClaimedTokens(_token, controller, balance);\r\n  }\r\n\r\n  /// @notice Pauses the contribution if there is any issue\r\n  function pauseContribution(bool _paused) onlyController {\r\n    paused = _paused;\r\n  }\r\n\r\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n  event NewSale(address indexed _th, uint256 _amount, uint256 _tokens);\r\n  event Initialized(uint _now);\r\n  event Finalized(uint _now);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"weiPreCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPerTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainderHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectorWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"tokensToGenerate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirtyPercentWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectorWeiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notCollectedAmountAfter24Hours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numWhitelistedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_apt\",\"type\":\"address\"},{\"name\":\"_exchanger\",\"type\":\"address\"},{\"name\":\"_contributionWallet\",\"type\":\"address\"},{\"name\":\"_remainderHolder\",\"type\":\"address\"},{\"name\":\"_devHolder\",\"type\":\"address\"},{\"name\":\"_communityHolder\",\"type\":\"address\"},{\"name\":\"_collector\",\"type\":\"address\"},{\"name\":\"_collectorWeiCap\",\"type\":\"uint256\"},{\"name\":\"_totalWeiCap\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyPercentWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualWeiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"weiToCollectByInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_th\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initializedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_aix\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_th\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"}]","ContractName":"Contribution","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000236e0c24812759dfc0f906de85f492089bc59af3","Library":"","SwarmSource":"bzzr://e3e0b1c10edba36c80e698b5103631d36c1efcfa9dc2e162b0f4c8d015bd271a"}]}