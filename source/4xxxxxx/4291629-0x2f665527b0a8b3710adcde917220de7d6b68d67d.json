{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n//import './lib/safeMath.sol';\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// import './ERC20.sol';\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function balanceOf(address who) constant returns (uint256);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// import './helpers/BasicToken.sol';\r\ncontract BasicToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n/**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }\r\n      return false;\r\n}\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}\r\n\r\n// import './BiQToken.sol';\r\ncontract BiQToken is BasicToken {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"BurstIQ Token\";              //name of the token\r\n  string public symbol = \"BiQ\";                      // symbol of the token\r\n  uint8 public decimals = 18;                        // decimals\r\n  uint256 public totalSupply = 1000000000 * 10**18;  // total supply of BiQ Tokens\r\n\r\n  // variables\r\n  uint256 public keyEmployeesAllocatedFund;           // fund allocated to key employees\r\n  uint256 public advisorsAllocation;                  // fund allocated to advisors\r\n  uint256 public marketIncentivesAllocation;          // fund allocated to Market\r\n  uint256 public vestingFounderAllocation;            // funds allocated to founders that in under vesting period\r\n  uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\r\n  uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\r\n  uint256 public saftInvestorAllocation;              // funds allocated to private presales and instituational investors\r\n\r\n  bool public isPublicTokenReleased = false;          // flag to track the release the public token\r\n\r\n  // addresses\r\n\r\n  address public founderMultiSigAddress;              // multi sign address of founders which hold\r\n  address public advisorAddress;                      //  advisor address which hold advisorsAllocation funds\r\n  address public vestingFounderAddress;               // address of founder that hold vestingFounderAllocation\r\n  address public crowdFundAddress;                    // address of crowdfund contract\r\n\r\n  // vesting period\r\n\r\n  uint256 public preAllocatedTokensVestingTime;       // crowdfund start time + 6 months\r\n\r\n  //events\r\n\r\n  event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\r\n  event TransferPreAllocatedFunds(uint256  _blockTimeStamp , address _to , uint256 _value);\r\n  event PublicTokenReleased(uint256 _blockTimeStamp);\r\n\r\n  //modifiers\r\n\r\n  modifier onlyCrowdFundAddress() {\r\n    require(msg.sender == crowdFundAddress);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _to) {\r\n    require(_to != 0x0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == founderMultiSigAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyVestingFounderAddress() {\r\n    require(msg.sender == vestingFounderAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdvisorAddress() {\r\n    require(msg.sender == advisorAddress);\r\n    _;\r\n  }\r\n\r\n  modifier isPublicTokenNotReleased() {\r\n    require(isPublicTokenReleased == false);\r\n    _;\r\n  }\r\n\r\n\r\n  // creation of the token contract\r\n  function BiQToken (address _crowdFundAddress, address _founderMultiSigAddress, address _advisorAddress, address _vestingFounderAddress) {\r\n    crowdFundAddress = _crowdFundAddress;\r\n    founderMultiSigAddress = _founderMultiSigAddress;\r\n    vestingFounderAddress = _vestingFounderAddress;\r\n    advisorAddress = _advisorAddress;\r\n\r\n    // Token Distribution\r\n    vestingFounderAllocation = 18 * 10 ** 25 ;        // 18 % allocation of totalSupply\r\n    keyEmployeesAllocatedFund = 2 * 10 ** 25 ;        // 2 % allocation of totalSupply\r\n    advisorsAllocation = 5 * 10 ** 25 ;               // 5 % allocation of totalSupply\r\n    tokensAllocatedToCrowdFund = 60 * 10 ** 25 ;      // 60 % allocation of totalSupply\r\n    marketIncentivesAllocation = 5 * 10 ** 25 ;       // 5 % allocation of totalSupply\r\n    saftInvestorAllocation = 10 * 10 ** 25 ;          // 10 % alloaction of totalSupply\r\n\r\n    // Assigned balances to respective stakeholders\r\n    balances[founderMultiSigAddress] = keyEmployeesAllocatedFund + saftInvestorAllocation;\r\n    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\r\n\r\n    totalAllocatedTokens = balances[founderMultiSigAddress];\r\n    preAllocatedTokensVestingTime = now + 180 * 1 days;                // it should be 6 months period for vesting\r\n  }\r\n\r\n  // function to keep track of the total token allocation\r\n  function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\r\n    totalAllocatedTokens = totalAllocatedTokens.add(_amount);\r\n    tokensAllocatedToCrowdFund = tokensAllocatedToCrowdFund.sub(_amount);\r\n  }\r\n\r\n  // function to change founder multisig wallet address\r\n  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\r\n    founderMultiSigAddress = _newFounderMultiSigAddress;\r\n    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n  }\r\n\r\n  // function for releasing the public tokens called once by the founder only\r\n  function releaseToken() onlyFounders isPublicTokenNotReleased {\r\n    isPublicTokenReleased = !isPublicTokenReleased;\r\n    PublicTokenReleased(now);\r\n  }\r\n\r\n  // function to transfer market Incentives fund\r\n  function transferMarketIncentivesFund(address _to, uint _value) onlyFounders nonZeroAddress(_to)  returns (bool) {\r\n    if (marketIncentivesAllocation >= _value) {\r\n      marketIncentivesAllocation = marketIncentivesAllocation.sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      totalAllocatedTokens = totalAllocatedTokens.add(_value);\r\n      TransferPreAllocatedFunds(now, _to, _value);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  // fund transferred to vesting Founders address after 6 months\r\n  function getVestedFounderTokens() onlyVestingFounderAddress returns (bool) {\r\n    if (now >= preAllocatedTokensVestingTime && vestingFounderAllocation > 0) {\r\n      balances[vestingFounderAddress] = balances[vestingFounderAddress].add(vestingFounderAllocation);\r\n      totalAllocatedTokens = totalAllocatedTokens.add(vestingFounderAllocation);\r\n      vestingFounderAllocation = 0;\r\n      TransferPreAllocatedFunds(now, vestingFounderAddress, vestingFounderAllocation);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // fund transferred to vesting advisor address after 6 months\r\n  function getVestedAdvisorTokens() onlyAdvisorAddress returns (bool) {\r\n    if (now >= preAllocatedTokensVestingTime && advisorsAllocation > 0) {\r\n      balances[advisorAddress] = balances[advisorAddress].add(advisorsAllocation);\r\n      totalAllocatedTokens = totalAllocatedTokens.add(advisorsAllocation);\r\n      advisorsAllocation = 0;\r\n      TransferPreAllocatedFunds(now, advisorAddress, advisorsAllocation);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // overloaded transfer function to restrict the investor to transfer the token before the ICO sale ends\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    if (msg.sender == crowdFundAddress) {\r\n      return super.transfer(_to,_value);\r\n    } else {\r\n      if (isPublicTokenReleased) {\r\n        return super.transfer(_to,_value);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // overloaded transferFrom function to restrict the investor to transfer the token before the ICO sale ends\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    if (msg.sender == crowdFundAddress) {\r\n      return super.transferFrom(_from, _to, _value);\r\n    } else {\r\n      if (isPublicTokenReleased) {\r\n        return super.transferFrom(_from, _to, _value);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // fallback function to restrict direct sending of ether\r\n  function () {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract BiQCrowdFund {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    BiQToken public token;                                 // Token contract reference\r\n\r\n    //variables\r\n    uint256 public crowdfundStartTime;                     // Starting time of CrowdFund\r\n    uint256 public crowdfundEndTime;                       // End time of Crowdfund\r\n    uint256 public totalWeiRaised = 0;                     // Counter to track the amount raised\r\n    uint256 public exchangeRate = 2307;                    // Calculated using priceOfEtherInUSD/priceOfBiQToken so 276.84/0.12\r\n    uint256 internal minAmount = 36.1219 * 10 ** 18;       // Calculated using 10k USD / 276.84 USD\r\n\r\n    bool public isCrowdFundActive = false;                 // Flag to track the crowdfund active or not\r\n    bool internal isTokenDeployed = false;                 // Flag to track the token deployment -- only can be set once\r\n    bool internal hasCrowdFundStarted = false;             // Flag to track if the crowdfund started\r\n\r\n    // addresses\r\n    address public founderMultiSigAddress;                 // Founders multisig address\r\n    address public remainingTokenHolder;                   // Address to hold the remaining tokens after crowdfund end\r\n    address public authorizerAddress;                      // Address of Authorizer who will authorize the investor\r\n\r\n    // mapping\r\n    mapping (address => uint256) auth;                     // KYC authentication\r\n\r\n    enum State { PreSale, CrowdFund }\r\n\r\n    //events\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event CrowdFundClosed(uint256 _blockTimeStamp);\r\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\r\n\r\n    //Modifiers\r\n    modifier tokenIsDeployed() {\r\n        require(isTokenDeployed == true);\r\n        _;\r\n    }\r\n     modifier nonZeroEth() {\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address _to) {\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier checkCrowdFundActive() {\r\n        require(isCrowdFundActive == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFounders() {\r\n        require(msg.sender == founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublic() {\r\n        require(msg.sender != founderMultiSigAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizer() {\r\n        require(msg.sender == authorizerAddress);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier inState(State state) {\r\n        require(getState() == state);\r\n        _;\r\n    }\r\n\r\n    // Constructor to initialize the local variables\r\n    function BiQCrowdFund (address _founderWalletAddress, address _remainingTokenHolder, address _authorizerAddress) {\r\n        founderMultiSigAddress = _founderWalletAddress;\r\n        remainingTokenHolder = _remainingTokenHolder;\r\n        authorizerAddress = _authorizerAddress;\r\n    }\r\n\r\n    // Function to change the founders multisig address\r\n    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders nonZeroAddress(_newFounderAddress) {\r\n        founderMultiSigAddress = _newFounderAddress;\r\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\r\n    }\r\n\r\n     function setAuthorizerAddress(address _newAuthorizerAddress) onlyFounders nonZeroAddress(_newAuthorizerAddress) {\r\n        authorizerAddress = _newAuthorizerAddress;\r\n    }\r\n\r\n     function setRemainingTokenHolder(address _newRemainingTokenHolder) onlyFounders nonZeroAddress(_newRemainingTokenHolder) {\r\n        remainingTokenHolder = _newRemainingTokenHolder;\r\n    }\r\n\r\n    // Attach the token contract, can only be done once\r\n    function setTokenAddress(address _tokenAddress) onlyFounders nonZeroAddress(_tokenAddress) {\r\n        require(isTokenDeployed == false);\r\n        token = BiQToken(_tokenAddress);\r\n        isTokenDeployed = true;\r\n    }\r\n\r\n    // change the state of crowdfund\r\n    function changeCrowdfundState() tokenIsDeployed onlyFounders inState(State.CrowdFund) {\r\n        isCrowdFundActive = !isCrowdFundActive;\r\n    }\r\n\r\n    // for KYC/AML\r\n    function authorize(address _to, uint256 max_amount) onlyAuthorizer {\r\n        auth[_to] = max_amount * 1 ether;\r\n    }\r\n\r\n    // Buy token function call only in duration of crowdfund active\r\n    function buyTokens(address beneficiary) nonZeroEth tokenIsDeployed onlyPublic nonZeroAddress(beneficiary) payable returns(bool) {\r\n        // Only allow a certain amount for every investor\r\n        if (auth[beneficiary] < msg.value) {\r\n            revert();\r\n        }\r\n        auth[beneficiary] = auth[beneficiary].sub(msg.value);\r\n\r\n        if (getState() == State.PreSale) {\r\n            if (buyPreSaleTokens(beneficiary)) {\r\n                return true;\r\n            }\r\n            revert();\r\n        } else {\r\n            require(now < crowdfundEndTime && isCrowdFundActive);\r\n            fundTransfer(msg.value);\r\n\r\n            uint256 amount = getNoOfTokens(exchangeRate, msg.value);\r\n\r\n            if (token.transfer(beneficiary, amount)) {\r\n                token.changeTotalSupply(amount);\r\n                totalWeiRaised = totalWeiRaised.add(msg.value);\r\n                TokenPurchase(beneficiary, msg.value, amount);\r\n                return true;\r\n            }\r\n            revert();\r\n        }\r\n\r\n    }\r\n\r\n    // function to transfer the funds to founders account\r\n    function fundTransfer(uint256 weiAmount) internal {\r\n        founderMultiSigAddress.transfer(weiAmount);\r\n    }\r\n\r\n    ///////////////////////////////////// Constant Functions /////////////////////////////////////\r\n\r\n    // function to get the current state of the crowdsale\r\n   function getState() public constant returns(State) {\r\n        if (!isCrowdFundActive && !hasCrowdFundStarted) {\r\n            return State.PreSale;\r\n        }\r\n        return State.CrowdFund;\r\n   }\r\n\r\n    // To get the authorized amount corresponding to an address\r\n   function getPreAuthorizedAmount(address _address) constant returns(uint256) {\r\n        return auth[_address];\r\n   }\r\n\r\n   // get the amount of tokens a user would receive for a specific amount of ether\r\n   function calculateTotalTokenPerContribution(uint256 _totalETHContribution) public constant returns(uint256) {\r\n       if (getState() == State.PreSale) {\r\n           return getTokensForPreSale(exchangeRate, _totalETHContribution * 1 ether).div(10 ** 18);\r\n       }\r\n       return getNoOfTokens(exchangeRate, _totalETHContribution);\r\n   }\r\n\r\n    // provides the bonus %\r\n    function currentBonus(uint256 _ethContribution) public constant returns (uint8) {\r\n        if (getState() == State.PreSale) {\r\n            return getPreSaleBonusRate(_ethContribution * 1 ether);\r\n        }\r\n        return getCurrentBonusRate();\r\n    }\r\n\r\n\r\n///////////////////////////////////// Presale Functions /////////////////////////////////////\r\n    // function to buy the tokens at presale with minimum investment = 10k USD\r\n    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\r\n       // check the minimum investment should be 10k USD\r\n        if (msg.value < minAmount) {\r\n          revert();\r\n        } else {\r\n            fundTransfer(msg.value);\r\n            uint256 amount = getTokensForPreSale(exchangeRate, msg.value);\r\n\r\n            if (token.transfer(beneficiary, amount)) {\r\n                token.changeTotalSupply(amount);\r\n                totalWeiRaised = totalWeiRaised.add(msg.value);\r\n                TokenPurchase(beneficiary, msg.value, amount);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // function calculate the total no of tokens with bonus multiplication in the duration of presale\r\n    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\r\n        uint256 noOfToken = _amount.mul(_exchangeRate);\r\n        uint256 preSaleTokenQuantity = ((100 + getPreSaleBonusRate(_amount)) * noOfToken ).div(100);\r\n        return preSaleTokenQuantity;\r\n    }\r\n\r\n    function getPreSaleBonusRate(uint256 _ethAmount) internal returns (uint8) {\r\n        if ( _ethAmount >= minAmount.mul(5) && _ethAmount < minAmount.mul(10)) {\r\n            return 30;\r\n        }\r\n        if (_ethAmount >= minAmount.mul(10)) {\r\n            return 35;\r\n        }\r\n        if (_ethAmount >= minAmount) {\r\n            return 25;\r\n        }\r\n    }\r\n///////////////////////////////////// Crowdfund Functions /////////////////////////////////////\r\n\r\n    // Starts the crowdfund, can only be called once\r\n    function startCrowdfund(uint256 _exchangeRate) onlyFounders tokenIsDeployed inState(State.PreSale) {\r\n        if (_exchangeRate > 0 && !hasCrowdFundStarted) {\r\n            exchangeRate = _exchangeRate;\r\n            crowdfundStartTime = now;\r\n            crowdfundEndTime = crowdfundStartTime + 5 * 1 weeks; // end date is 5 weeks after the starting date\r\n            isCrowdFundActive = !isCrowdFundActive;\r\n            hasCrowdFundStarted = !hasCrowdFundStarted;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    // function call after crowdFundEndTime.\r\n    // It transfers the remaining tokens to remainingTokenHolder address\r\n    function endCrowdfund() onlyFounders returns (bool) {\r\n        require(now > crowdfundEndTime);\r\n        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\r\n\r\n        if (remainingToken != 0 && token.transfer(remainingTokenHolder, remainingToken)) {\r\n          return true;\r\n        } else {\r\n            return false;\r\n        }\r\n        CrowdFundClosed(now);\r\n    }\r\n\r\n   // function to calculate the total no of tokens with bonus multiplication\r\n    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\r\n         uint256 noOfToken = _amount.mul(_exchangeRate);\r\n         uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\r\n         return noOfTokenWithBonus;\r\n    }\r\n\r\n    // function provide the current bonus rate\r\n    function getCurrentBonusRate() internal returns (uint8) {\r\n        if (now > crowdfundStartTime + 4 weeks) {\r\n            return 0;\r\n        }\r\n        if (now > crowdfundStartTime + 3 weeks) {\r\n            return 5;\r\n        }\r\n        if (now > crowdfundStartTime + 2 weeks) {\r\n            return 10;\r\n        }\r\n        if (now > crowdfundStartTime + 1 weeks) {\r\n            return 15;\r\n        }\r\n        if (now > crowdfundStartTime) {\r\n            return 20;\r\n        }\r\n    }\r\n\r\n    // Crowdfund entry\r\n    // send ether to the contract address\r\n    // With at least 200 000 gas\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFounderAddress\",\"type\":\"address\"}],\"name\":\"setFounderMultiSigAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdfund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderMultiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdFundActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRemainingTokenHolder\",\"type\":\"address\"}],\"name\":\"setRemainingTokenHolder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"startCrowdfund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalETHContribution\",\"type\":\"uint256\"}],\"name\":\"calculateTotalTokenPerContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeCrowdfundState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethContribution\",\"type\":\"uint256\"}],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuthorizerAddress\",\"type\":\"address\"}],\"name\":\"setAuthorizerAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPreAuthorizedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founderWalletAddress\",\"type\":\"address\"},{\"name\":\"_remainingTokenHolder\",\"type\":\"address\"},{\"name\":\"_authorizerAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"}],\"name\":\"CrowdFundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blockTimeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_foundersWalletAddress\",\"type\":\"address\"}],\"name\":\"ChangeFoundersWalletAddress\",\"type\":\"event\"}]","ContractName":"BiQCrowdFund","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000051ed811d1e4d61e4205dadbfc831771967a11d6000000000000000000000000051ed811d1e4d61e4205dadbfc831771967a11d60000000000000000000000000a6d28ad28786330d1fd839d608d08869e4966047","Library":"","SwarmSource":"bzzr://068f651ee43d8045d3dd91ef1f7bbf6fbc84df4281de5cb676a7c226770a383a"}]}