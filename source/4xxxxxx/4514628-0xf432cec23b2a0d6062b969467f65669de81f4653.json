{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\n/// @title provides subject to role checking logic\r\ncontract IAccessPolicy {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice We don't make this function constant to allow for state-updating access controls such as rate limiting.\r\n    /// @dev checks if subject belongs to requested role for particular object\r\n    /// @param subject address to be checked against role, typically msg.sender\r\n    /// @param role identifier of required role\r\n    /// @param object contract instance context for role checking, typically contract requesting the check\r\n    /// @param verb additional data, in current AccessControll implementation msg.sig\r\n    /// @return if subject belongs to a role\r\n    function allowed(\r\n        address subject,\r\n        bytes32 role,\r\n        address object,\r\n        bytes4 verb\r\n    )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n/// @title enables access control in implementing contract\r\n/// @dev see AccessControlled for implementation\r\ncontract IAccessControlled {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// @dev must log on access policy change\r\n    event LogAccessPolicyChanged(\r\n        address controller,\r\n        IAccessPolicy oldPolicy,\r\n        IAccessPolicy newPolicy\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev allows to change access control mechanism for this contract\r\n    ///     this method must be itself access controlled, see AccessControlled implementation and notice below\r\n    /// @notice it is a huge issue for Solidity that modifiers are not part of function signature\r\n    ///     then interfaces could be used for example to control access semantics\r\n    /// @param newPolicy new access policy to controll this contract\r\n    /// @param newAccessController address of ROLE_ACCESS_CONTROLLER of new policy that can set access to this contract\r\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\r\n        public;\r\n\r\n    function accessPolicy()\r\n        public\r\n        constant\r\n        returns (IAccessPolicy);\r\n\r\n}\r\n\r\ncontract StandardRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // @notice Soldity somehow doesn't evaluate this compile time\r\n    // @dev role which has rights to change permissions and set new policy in contract, keccak256(\"AccessController\")\r\n    bytes32 internal constant ROLE_ACCESS_CONTROLLER = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\r\n}\r\n\r\n/// @title Granular code execution permissions\r\n/// @notice Intended to replace existing Ownable pattern with more granular permissions set to execute smart contract functions\r\n///     for each function where 'only' modifier is applied, IAccessPolicy implementation is called to evaluate if msg.sender belongs to required role for contract being called.\r\n///     Access evaluation specific belong to IAccessPolicy implementation, see RoleBasedAccessPolicy for details.\r\n/// @dev Should be inherited by a contract requiring such permissions controll. IAccessPolicy must be provided in constructor. Access policy may be replaced to a different one\r\n///     by msg.sender with ROLE_ACCESS_CONTROLLER role\r\ncontract AccessControlled is IAccessControlled, StandardRoles {\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    IAccessPolicy private _accessPolicy;\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    /// @dev limits function execution only to senders assigned to required 'role'\r\n    modifier only(bytes32 role) {\r\n        require(_accessPolicy.allowed(msg.sender, role, this, msg.sig));\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function AccessControlled(IAccessPolicy policy) internal {\r\n        require(address(policy) != 0x0);\r\n        _accessPolicy = policy;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IAccessControlled\r\n    //\r\n\r\n    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\r\n        public\r\n        only(ROLE_ACCESS_CONTROLLER)\r\n    {\r\n        // ROLE_ACCESS_CONTROLLER must be present\r\n        // under the new policy. This provides some\r\n        // protection against locking yourself out.\r\n        require(newPolicy.allowed(newAccessController, ROLE_ACCESS_CONTROLLER, this, msg.sig));\r\n\r\n        // We can now safely set the new policy without foot shooting.\r\n        IAccessPolicy oldPolicy = _accessPolicy;\r\n        _accessPolicy = newPolicy;\r\n\r\n        // Log event\r\n        LogAccessPolicyChanged(msg.sender, oldPolicy, newPolicy);\r\n    }\r\n\r\n    function accessPolicy()\r\n        public\r\n        constant\r\n        returns (IAccessPolicy)\r\n    {\r\n        return _accessPolicy;\r\n    }\r\n}\r\n\r\ncontract AccessRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // NOTE: All roles are set to the keccak256 hash of the\r\n    // CamelCased role name, i.e.\r\n    // ROLE_LOCKED_ACCOUNT_ADMIN = keccak256(\"LockedAccountAdmin\")\r\n\r\n    // may setup LockedAccount, change disbursal mechanism and set migration\r\n    bytes32 internal constant ROLE_LOCKED_ACCOUNT_ADMIN = 0x4675da546d2d92c5b86c4f726a9e61010dce91cccc2491ce6019e78b09d2572e;\r\n\r\n    // may setup whitelists and abort whitelisting contract with curve rollback\r\n    bytes32 internal constant ROLE_WHITELIST_ADMIN = 0xaef456e7c864418e1d2a40d996ca4febf3a7e317fe3af5a7ea4dda59033bbe5c;\r\n\r\n    // May issue (generate) Neumarks\r\n    bytes32 internal constant ROLE_NEUMARK_ISSUER = 0x921c3afa1f1fff707a785f953a1e197bd28c9c50e300424e015953cbf120c06c;\r\n\r\n    // May burn Neumarks it owns\r\n    bytes32 internal constant ROLE_NEUMARK_BURNER = 0x19ce331285f41739cd3362a3ec176edffe014311c0f8075834fdd19d6718e69f;\r\n\r\n    // May create new snapshots on Neumark\r\n    bytes32 internal constant ROLE_SNAPSHOT_CREATOR = 0x08c1785afc57f933523bc52583a72ce9e19b2241354e04dd86f41f887e3d8174;\r\n\r\n    // May enable/disable transfers on Neumark\r\n    bytes32 internal constant ROLE_TRANSFER_ADMIN = 0xb6527e944caca3d151b1f94e49ac5e223142694860743e66164720e034ec9b19;\r\n\r\n    // may reclaim tokens/ether from contracts supporting IReclaimable interface\r\n    bytes32 internal constant ROLE_RECLAIMER = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\r\n\r\n    // represents legally platform operator in case of forks and contracts with legal agreement attached. keccak256(\"PlatformOperatorRepresentative\")\r\n    bytes32 internal constant ROLE_PLATFORM_OPERATOR_REPRESENTATIVE = 0xb2b321377653f655206f71514ff9f150d0822d062a5abcf220d549e1da7999f0;\r\n\r\n    // allows to deposit EUR-T and allow addresses to send and receive EUR-T. keccak256(\"EurtDepositManager\")\r\n    bytes32 internal constant ROLE_EURT_DEPOSIT_MANAGER = 0x7c8ecdcba80ce87848d16ad77ef57cc196c208fc95c5638e4a48c681a34d4fe7;\r\n}\r\n\r\ncontract IEthereumForkArbiter {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogForkAnnounced(\r\n        string name,\r\n        string url,\r\n        uint256 blockNumber\r\n    );\r\n\r\n    event LogForkSigned(\r\n        uint256 blockNumber,\r\n        bytes32 blockHash\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function nextForkName()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function nextForkUrl()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function nextForkBlockNumber()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    function lastSignedBlockNumber()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    function lastSignedBlockHash()\r\n        public\r\n        constant\r\n        returns (bytes32);\r\n\r\n    function lastSignedTimestamp()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title legally binding smart contract\r\n * @dev General approach to paring legal and smart contracts:\r\n * 1. All terms and agreement are between two parties: here between legal representation of platform operator representative and platform investor.\r\n * 2. Parties are represented by public Ethereum addresses. Platform investor is and address that holds and controls funds and receives and controls Neumark token\r\n * 3. Legal agreement has immutable part that corresponds to smart contract code and mutable part that may change for example due to changing regulations or other externalities that smart contract does not control.\r\n * 4. There should be a provision in legal document that future changes in mutable part cannot change terms of immutable part.\r\n * 5. Immutable part links to corresponding smart contract via its address.\r\n * 6. Additional provision should be added if smart contract supports it\r\n *  a. Fork provision\r\n *  b. Bugfixing provision (unilateral code update mechanism)\r\n *  c. Migration provision (bilateral code update mechanism)\r\n *\r\n * Details on Agreement base class:\r\n * 1. We bind smart contract to legal contract by storing uri (preferably ipfs or hash) of the legal contract in the smart contract. It is however crucial that such binding is done by platform operator representation so transaction establishing the link must be signed by respective wallet ('amendAgreement')\r\n * 2. Mutable part of agreement may change. We should be able to amend the uri later. Previous amendments should not be lost and should be retrievable (`amendAgreement` and 'pastAgreement' functions).\r\n * 3. It is up to deriving contract to decide where to put 'acceptAgreement' modifier. However situation where there is no cryptographic proof that given address was really acting in the transaction should be avoided, simplest example being 'to' address in `transfer` function of ERC20.\r\n *\r\n**/\r\ncontract Agreement is\r\n    AccessControlled,\r\n    AccessRoles\r\n{\r\n\r\n    ////////////////////////\r\n    // Type declarations\r\n    ////////////////////////\r\n\r\n    /// @notice agreement with signature of the platform operator representative\r\n    struct SignedAgreement {\r\n        address platformOperatorRepresentative;\r\n        uint256 signedBlockTimestamp;\r\n        string agreementUri;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    IEthereumForkArbiter private ETHEREUM_FORK_ARBITER;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // stores all amendments to the agreement, first amendment is the original\r\n    SignedAgreement[] private _amendments;\r\n\r\n    // stores block numbers of all addresses that signed the agreement (signatory => block number)\r\n    mapping(address => uint256) private _signatories;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogAgreementAccepted(\r\n        address indexed accepter\r\n    );\r\n\r\n    event LogAgreementAmended(\r\n        address platformOperatorRepresentative,\r\n        string agreementUri\r\n    );\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    /// @notice logs that agreement was accepted by platform user\r\n    /// @dev intended to be added to functions that if used make 'accepter' origin to enter legally binding agreement\r\n    modifier acceptAgreement(address accepter) {\r\n        if(_signatories[accepter] == 0) {\r\n            require(_amendments.length > 0);\r\n            _signatories[accepter] = block.number;\r\n            LogAgreementAccepted(accepter);\r\n        }\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function Agreement(IAccessPolicy accessPolicy, IEthereumForkArbiter forkArbiter)\r\n        AccessControlled(accessPolicy)\r\n        internal\r\n    {\r\n        require(forkArbiter != IEthereumForkArbiter(0x0));\r\n        ETHEREUM_FORK_ARBITER = forkArbiter;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function amendAgreement(string agreementUri)\r\n        public\r\n        only(ROLE_PLATFORM_OPERATOR_REPRESENTATIVE)\r\n    {\r\n        SignedAgreement memory amendment = SignedAgreement({\r\n            platformOperatorRepresentative: msg.sender,\r\n            signedBlockTimestamp: block.timestamp,\r\n            agreementUri: agreementUri\r\n        });\r\n        _amendments.push(amendment);\r\n        LogAgreementAmended(msg.sender, agreementUri);\r\n    }\r\n\r\n    function ethereumForkArbiter()\r\n        public\r\n        constant\r\n        returns (IEthereumForkArbiter)\r\n    {\r\n        return ETHEREUM_FORK_ARBITER;\r\n    }\r\n\r\n    function currentAgreement()\r\n        public\r\n        constant\r\n        returns\r\n        (\r\n            address platformOperatorRepresentative,\r\n            uint256 signedBlockTimestamp,\r\n            string agreementUri,\r\n            uint256 index\r\n        )\r\n    {\r\n        require(_amendments.length > 0);\r\n        uint256 last = _amendments.length - 1;\r\n        SignedAgreement storage amendment = _amendments[last];\r\n        return (\r\n            amendment.platformOperatorRepresentative,\r\n            amendment.signedBlockTimestamp,\r\n            amendment.agreementUri,\r\n            last\r\n        );\r\n    }\r\n\r\n    function pastAgreement(uint256 amendmentIndex)\r\n        public\r\n        constant\r\n        returns\r\n        (\r\n            address platformOperatorRepresentative,\r\n            uint256 signedBlockTimestamp,\r\n            string agreementUri,\r\n            uint256 index\r\n        )\r\n    {\r\n        SignedAgreement storage amendment = _amendments[amendmentIndex];\r\n        return (\r\n            amendment.platformOperatorRepresentative,\r\n            amendment.signedBlockTimestamp,\r\n            amendment.agreementUri,\r\n            amendmentIndex\r\n        );\r\n    }\r\n\r\n    function agreementSignedAtBlock(address signatory)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _signatories[signatory];\r\n    }\r\n}\r\n\r\ncontract IsContract {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    function isContract(address addr)\r\n        internal\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint256 size;\r\n        // takes 700 gas\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract IBasicToken {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    /// @param owner The address that's balance is being requested\r\n    /// @return The balance of `owner` at the current block\r\n    function balanceOf(address owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance);\r\n\r\n    /// @notice Send `amount` tokens to `to` from `msg.sender`\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\n/// @title allows deriving contract to recover any token or ether that it has balance of\r\n/// @notice note that this opens your contracts to claims from various people saying they lost tokens and they want them back\r\n///     be ready to handle such claims\r\n/// @dev use with care!\r\n///     1. ROLE_RECLAIMER is allowed to claim tokens, it's not returning tokens to original owner\r\n///     2. in derived contract that holds any token by design you must override `reclaim` and block such possibility.\r\n///         see LockedAccount as an example\r\ncontract Reclaimable is AccessControlled, AccessRoles {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    IBasicToken constant internal RECLAIM_ETHER = IBasicToken(0x0);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function reclaim(IBasicToken token)\r\n        public\r\n        only(ROLE_RECLAIMER)\r\n    {\r\n        address reclaimer = msg.sender;\r\n        if(token == RECLAIM_ETHER) {\r\n            reclaimer.transfer(this.balance);\r\n        } else {\r\n            uint256 balance = token.balanceOf(this);\r\n            require(token.transfer(reclaimer, balance));\r\n        }\r\n    }\r\n}\r\n\r\ncontract ITokenMetadata {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function symbol()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function name()\r\n        public\r\n        constant\r\n        returns (string);\r\n\r\n    function decimals()\r\n        public\r\n        constant\r\n        returns (uint8);\r\n}\r\n\r\n/// @title adds token metadata to token contract\r\n/// @dev see Neumark for example implementation\r\ncontract TokenMetadata is ITokenMetadata {\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // The Token's name: e.g. DigixDAO Tokens\r\n    string private NAME;\r\n\r\n    // An identifier: e.g. REP\r\n    string private SYMBOL;\r\n\r\n    // Number of decimals of the smallest unit\r\n    uint8 private DECIMALS;\r\n\r\n    // An arbitrary versioning scheme\r\n    string private VERSION;\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @notice Constructor to set metadata\r\n    /// @param tokenName Name of the new token\r\n    /// @param decimalUnits Number of decimals of the new token\r\n    /// @param tokenSymbol Token Symbol for the new token\r\n    /// @param version Token version ie. when cloning is used\r\n    function TokenMetadata(\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        string version\r\n    )\r\n        public\r\n    {\r\n        NAME = tokenName;                                 // Set the name\r\n        SYMBOL = tokenSymbol;                             // Set the symbol\r\n        DECIMALS = decimalUnits;                          // Set the decimals\r\n        VERSION = version;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function name()\r\n        public\r\n        constant\r\n        returns (string)\r\n    {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol()\r\n        public\r\n        constant\r\n        returns (string)\r\n    {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals()\r\n        public\r\n        constant\r\n        returns (uint8)\r\n    {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function version()\r\n        public\r\n        constant\r\n        returns (string)\r\n    {\r\n        return VERSION;\r\n    }\r\n}\r\n\r\ncontract IERC223Callback {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function onTokenTransfer(\r\n        address from,\r\n        uint256 amount,\r\n        bytes data\r\n    )\r\n        public;\r\n\r\n}\r\n\r\ncontract IERC223Token is IBasicToken {\r\n\r\n    /// @dev Departure: We do not log data, it has no advantage over a standard\r\n    ///     log event. By sticking to the standard log event we\r\n    ///     stay compatible with constracts that expect and ERC20 token.\r\n\r\n    // event Transfer(\r\n    //    address indexed from,\r\n    //    address indexed to,\r\n    //    uint256 amount,\r\n    //    bytes data);\r\n\r\n\r\n    /// @dev Departure: We do not use the callback on regular transfer calls to\r\n    ///     stay compatible with constracts that expect and ERC20 token.\r\n\r\n    // function transfer(address to, uint256 amount)\r\n    //     public\r\n    //     returns (bool);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function transfer(address to, uint256 amount, bytes data)\r\n        public\r\n        returns (bool);\r\n}\r\n\r\ncontract IERC20Allowance {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param owner The address of the account that owns the token\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of owner that spender is allowed\r\n    ///  to spend\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining);\r\n\r\n    /// @notice `msg.sender` approves `spender` to spend `amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @param amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n    /// @notice Send `amount` tokens to `to` from `from` on the condition it\r\n    ///  is approved by `from`\r\n    /// @param from The address holding the tokens being transferred\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\ncontract IERC20Token is IBasicToken, IERC20Allowance {\r\n\r\n}\r\n\r\ncontract IERC677Callback {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    // NOTE: This call can be initiated by anyone. You need to make sure that\r\n    // it is send by the token (`require(msg.sender == token)`) or make sure\r\n    // amount is valid (`require(token.allowance(this) >= amount)`).\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 amount,\r\n        address token, // IERC667Token\r\n        bytes data\r\n    )\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\ncontract IERC677Allowance is IERC20Allowance {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice `msg.sender` approves `spender` to send `amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param spender The address of the contract able to transfer the tokens\r\n    /// @param amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address spender, uint256 amount, bytes extraData)\r\n        public\r\n        returns (bool success);\r\n\r\n}\r\n\r\ncontract IERC677Token is IERC20Token, IERC677Allowance {\r\n}\r\n\r\ncontract Math {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // absolute difference: |v1 - v2|\r\n    function absDiff(uint256 v1, uint256 v2)\r\n        internal\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        return v1 > v2 ? v1 - v2 : v2 - v1;\r\n    }\r\n\r\n    // divide v by d, round up if remainder is 0.5 or more\r\n    function divRound(uint256 v, uint256 d)\r\n        internal\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        return add(v, d/2) / d;\r\n    }\r\n\r\n    // computes decimal decimalFraction 'frac' of 'amount' with maximum precision (multiplication first)\r\n    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\r\n    // mind loss of precision as decimal fractions do not have finite binary expansion\r\n    // do not use instead of division\r\n    function decimalFraction(uint256 amount, uint256 frac)\r\n        internal\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        // it's like 1 ether is 100% proportion\r\n        return proportion(amount, frac, 10**18);\r\n    }\r\n\r\n    // computes part/total of amount with maximum precision (multiplication first)\r\n    // part and total must have the same units\r\n    function proportion(uint256 amount, uint256 part, uint256 total)\r\n        internal\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        return divRound(mul(amount, part), total);\r\n    }\r\n\r\n    //\r\n    // Open Zeppelin Math library below\r\n    //\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is IBasicToken, Math {\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param amount The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        transferInternal(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return _balances[owner];\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // actual transfer function called by all public variants\r\n    function transferInternal(address from, address to, uint256 amount)\r\n        internal\r\n    {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = sub(_balances[from], amount);\r\n        _balances[to] = add(_balances[to], amount);\r\n        Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is\r\n    IERC20Token,\r\n    BasicToken,\r\n    IERC677Token\r\n{\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements ERC20\r\n    //\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param amount uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        // check and reset allowance\r\n        var allowance = _allowed[from][msg.sender];\r\n        _allowed[from][msg.sender] = sub(allowance, amount);\r\n        // do the transfer\r\n        transferInternal(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param spender The address which will spend the funds.\r\n    * @param amount The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        returns (bool)\r\n    {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((amount == 0) || (_allowed[msg.sender][spender] == 0));\r\n\r\n        _allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n    */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    //\r\n    // Implements IERC677Token\r\n    //\r\n\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 amount,\r\n        bytes extraData\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(approve(spender, amount));\r\n\r\n        // in case of re-entry 1. approval is done 2. msg.sender is different\r\n        bool success = IERC677Callback(spender).receiveApproval(\r\n            msg.sender,\r\n            amount,\r\n            this,\r\n            extraData\r\n        );\r\n        require(success);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract EtherToken is\r\n    IsContract,\r\n    AccessControlled,\r\n    StandardToken,\r\n    TokenMetadata,\r\n    Reclaimable\r\n{\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    string private constant NAME = \"Ether Token\";\r\n\r\n    string private constant SYMBOL = \"ETH-T\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogDeposit(\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogWithdrawal(\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function EtherToken(IAccessPolicy accessPolicy)\r\n        AccessControlled(accessPolicy)\r\n        StandardToken()\r\n        TokenMetadata(NAME, DECIMALS, SYMBOL, \"\")\r\n        Reclaimable()\r\n        public\r\n    {\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// deposit msg.value of Ether to msg.sender balance\r\n    function deposit()\r\n        payable\r\n        public\r\n    {\r\n        _balances[msg.sender] = add(_balances[msg.sender], msg.value);\r\n        _totalSupply = add(_totalSupply, msg.value);\r\n        LogDeposit(msg.sender, msg.value);\r\n        Transfer(address(0), msg.sender, msg.value);\r\n    }\r\n\r\n    /// withdraws and sends 'amount' of ether to msg.sender\r\n    function withdraw(uint256 amount)\r\n        public\r\n    {\r\n        require(_balances[msg.sender] >= amount);\r\n        _balances[msg.sender] = sub(_balances[msg.sender], amount);\r\n        _totalSupply = sub(_totalSupply, amount);\r\n        msg.sender.transfer(amount);\r\n        LogWithdrawal(msg.sender, amount);\r\n        Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    //\r\n    // Implements IERC223Token\r\n    //\r\n\r\n    function transfer(address to, uint256 amount, bytes data)\r\n        public\r\n        returns (bool)\r\n    {\r\n        transferInternal(msg.sender, to, amount);\r\n\r\n        // Notify the receiving contract.\r\n        if (isContract(to)) {\r\n            // in case of re-entry (1) transfer is done (2) msg.sender is different\r\n            IERC223Callback(to).onTokenTransfer(msg.sender, amount, data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // Overrides Reclaimable\r\n    //\r\n\r\n    /// @notice allows EtherToken to reclaim tokens wrongly sent to its address\r\n    /// @dev as EtherToken by design has balance of Ether (native Ethereum token)\r\n    ///     such reclamation is not allowed\r\n    function reclaim(IBasicToken token)\r\n        public\r\n    {\r\n        // forbid reclaiming ETH hold in this contract.\r\n        require(token != RECLAIM_ETHER);\r\n        Reclaimable.reclaim(token);\r\n    }\r\n}\r\n\r\n/// @notice implemented in the contract that is the target of state migration\r\n/// @dev implementation must provide actual function that will be called by source to migrate state\r\ncontract IMigrationTarget {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    // should return migration source address\r\n    function currentMigrationSource()\r\n        public\r\n        constant\r\n        returns (address);\r\n}\r\n\r\n/// @notice mixin that enables contract to receive migration\r\n/// @dev when derived from\r\ncontract MigrationTarget is\r\n    IMigrationTarget\r\n{\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    // intended to be applied on migration receiving function\r\n    modifier onlyMigrationSource() {\r\n        require(msg.sender == currentMigrationSource());\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EuroTokenMigrationTarget is\r\n    MigrationTarget\r\n{\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice accepts migration of single eur-t token holder\r\n    /// @dev allowed to be called only from migration source, do not forget to add accessor modifier in implementation\r\n    function migrateEuroTokenOwner(address owner, uint256 amount)\r\n        public\r\n        onlyMigrationSource();\r\n}\r\n\r\n/// @notice implemented in the contract that stores state to be migrated\r\n/// @notice contract is called migration source\r\n/// @dev migration target implements IMigrationTarget interface, when it is passed in 'enableMigration' function\r\n/// @dev 'migrate' function may be called to migrate part of state owned by msg.sender\r\n/// @dev in legal terms this corresponds to amending/changing agreement terms by co-signature of parties\r\ncontract IMigrationSource {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogMigrationEnabled(\r\n        address target\r\n    );\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice should migrate state owned by msg.sender\r\n    /// @dev intended flow is to: read source state, clear source state, call migrate function on target, log success event\r\n    function migrate()\r\n        public;\r\n\r\n    /// @notice should enable migration to migration target\r\n    /// @dev should limit access to specific role in implementation\r\n    function enableMigration(IMigrationTarget migration)\r\n        public;\r\n\r\n    /// @notice returns current migration target\r\n    function currentMigrationTarget()\r\n        public\r\n        constant\r\n        returns (IMigrationTarget);\r\n}\r\n\r\n/// @notice mixin that enables migration pattern for a contract\r\n/// @dev when derived from\r\ncontract MigrationSource is\r\n    IMigrationSource,\r\n    AccessControlled\r\n{\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    /// stores role hash that can enable migration\r\n    bytes32 private MIGRATION_ADMIN;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // migration target contract\r\n    IMigrationTarget internal _migration;\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    /// @notice add to enableMigration function to prevent changing of migration\r\n    ///     target once set\r\n    modifier onlyMigrationEnabledOnce() {\r\n        require(address(_migration) == 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationEnabled() {\r\n        require(address(_migration) != 0);\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function MigrationSource(\r\n        IAccessPolicy policy,\r\n        bytes32 migrationAdminRole\r\n    )\r\n        AccessControlled(policy)\r\n        internal\r\n    {\r\n        MIGRATION_ADMIN = migrationAdminRole;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice should migrate state that belongs to msg.sender\r\n    /// @dev do not forget to add accessor modifier in implementation\r\n    function migrate()\r\n        onlyMigrationEnabled()\r\n        public;\r\n\r\n    /// @notice should enable migration to migration target\r\n    /// @dev do not forget to add accessor modifier in override\r\n    function enableMigration(IMigrationTarget migration)\r\n        public\r\n        onlyMigrationEnabledOnce()\r\n        only(MIGRATION_ADMIN)\r\n    {\r\n        // this must be the source\r\n        require(migration.currentMigrationSource() == address(this));\r\n        _migration = migration;\r\n        LogMigrationEnabled(_migration);\r\n    }\r\n\r\n    /// @notice returns current migration target\r\n    function currentMigrationTarget()\r\n        public\r\n        constant\r\n        returns (IMigrationTarget)\r\n    {\r\n        return _migration;\r\n    }\r\n}\r\n\r\n/// Simple implementation of EuroToken which is pegged 1:1 to certain off-chain\r\n/// pool of Euro. Balances of this token are intended to be migrated to final\r\n/// implementation that will be available later\r\ncontract EuroToken is\r\n    IERC677Token,\r\n    AccessControlled,\r\n    StandardToken,\r\n    TokenMetadata,\r\n    MigrationSource,\r\n    Reclaimable\r\n{\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    string private constant NAME = \"Euro Token\";\r\n\r\n    string private constant SYMBOL = \"EUR-T\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // a list of addresses that are allowed to receive EUR-T\r\n    mapping(address => bool) private _allowedTransferTo;\r\n\r\n    // a list of of addresses that are allowed to send EUR-T\r\n    mapping(address => bool) private _allowedTransferFrom;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogDeposit(\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogWithdrawal(\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogAllowedFromAddress(\r\n        address indexed from,\r\n        bool allowed\r\n    );\r\n\r\n    event LogAllowedToAddress(\r\n        address indexed to,\r\n        bool allowed\r\n    );\r\n\r\n    /// @notice migration was successful\r\n    event LogEuroTokenOwnerMigrated(\r\n        address indexed owner,\r\n        uint256 amount\r\n    );\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    modifier onlyAllowedTransferFrom(address from) {\r\n        require(_allowedTransferFrom[from]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedTransferTo(address to) {\r\n        require(_allowedTransferTo[to]);\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function EuroToken(IAccessPolicy accessPolicy)\r\n        AccessControlled(accessPolicy)\r\n        StandardToken()\r\n        TokenMetadata(NAME, DECIMALS, SYMBOL, \"\")\r\n        MigrationSource(accessPolicy, ROLE_EURT_DEPOSIT_MANAGER)\r\n        Reclaimable()\r\n        public\r\n    {\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice deposit 'amount' of EUR-T to address 'to'\r\n    /// @dev address 'to' is whitelisted as recipient of future transfers\r\n    /// @dev deposit may happen only in case of succesful KYC of recipient and validation of banking data\r\n    /// @dev which in this implementation is an off-chain responsibility of EURT_DEPOSIT_MANAGER\r\n    function deposit(address to, uint256 amount)\r\n        public\r\n        only(ROLE_EURT_DEPOSIT_MANAGER)\r\n        returns (bool)\r\n    {\r\n        require(to != address(0));\r\n        _balances[to] = add(_balances[to], amount);\r\n        _totalSupply = add(_totalSupply, amount);\r\n        setAllowedTransferTo(to, true);\r\n        LogDeposit(to, amount);\r\n        Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice withdraws 'amount' of EUR-T by burning required amount and providing a proof of whithdrawal\r\n    /// @dev proof is provided in form of log entry on which EURT_DEPOSIT_MANAGER\r\n    /// @dev will act off-chain to return required Euro amount to EUR-T holder\r\n    function withdraw(uint256 amount)\r\n        public\r\n    {\r\n        require(_balances[msg.sender] >= amount);\r\n        _balances[msg.sender] = sub(_balances[msg.sender], amount);\r\n        _totalSupply = sub(_totalSupply, amount);\r\n        LogWithdrawal(msg.sender, amount);\r\n        Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    /// @notice enables or disables address to be receipient of EUR-T\r\n    function setAllowedTransferTo(address to, bool allowed)\r\n        public\r\n        only(ROLE_EURT_DEPOSIT_MANAGER)\r\n    {\r\n        _allowedTransferTo[to] = allowed;\r\n        LogAllowedToAddress(to, allowed);\r\n    }\r\n\r\n    /// @notice enables or disables address to be sender of EUR-T\r\n    function setAllowedTransferFrom(address from, bool allowed)\r\n        public\r\n        only(ROLE_EURT_DEPOSIT_MANAGER)\r\n    {\r\n        _allowedTransferFrom[from] = allowed;\r\n        LogAllowedFromAddress(from, allowed);\r\n    }\r\n\r\n    function allowedTransferTo(address to)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return _allowedTransferTo[to];\r\n    }\r\n\r\n    function allowedTransferFrom(address from)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return _allowedTransferFrom[from];\r\n    }\r\n\r\n    //\r\n    // Overrides ERC20 Interface to allow transfer from/to allowed addresses\r\n    //\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        onlyAllowedTransferFrom(msg.sender)\r\n        onlyAllowedTransferTo(to)\r\n        returns (bool success)\r\n    {\r\n        return BasicToken.transfer(to, amount);\r\n    }\r\n\r\n    /// @dev broker acts in the name of 'from' address so broker needs to have permission to transfer from\r\n    ///  this way we may give permissions to brokering smart contracts while investors do not have permissions\r\n    ///  to transfer. 'to' address requires standard transfer to permission\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        public\r\n        onlyAllowedTransferFrom(msg.sender)\r\n        onlyAllowedTransferTo(to)\r\n        returns (bool success)\r\n    {\r\n        return StandardToken.transferFrom(from, to, amount);\r\n    }\r\n\r\n    //\r\n    // Overrides migration source\r\n    //\r\n\r\n    function migrate()\r\n        public\r\n        onlyMigrationEnabled()\r\n        onlyAllowedTransferTo(msg.sender)\r\n    {\r\n        // burn deposit\r\n        uint256 amount = _balances[msg.sender];\r\n        if (amount > 0) {\r\n            _balances[msg.sender] = 0;\r\n            _totalSupply = sub(_totalSupply, amount);\r\n        }\r\n        // remove all transfer permissions\r\n        _allowedTransferTo[msg.sender] = false;\r\n        _allowedTransferFrom[msg.sender] = false;\r\n        // migrate to\r\n        EuroTokenMigrationTarget(_migration).migrateEuroTokenOwner(msg.sender, amount);\r\n        // set event\r\n        LogEuroTokenOwnerMigrated(msg.sender, amount);\r\n    }\r\n}\r\n\r\n/// @notice implemented in the contract that is the target of LockedAccount migration\r\n///  migration process is removing investors balance from source LockedAccount fully\r\n///  target should re-create investor with the same balance, totalLockedAmount and totalInvestors are invariant during migration\r\ncontract LockedAccountMigration is\r\n    MigrationTarget\r\n{\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    // implemented in migration target, yes modifiers are inherited from base class\r\n    function migrateInvestor(\r\n        address investor,\r\n        uint256 balance,\r\n        uint256 neumarksDue,\r\n        uint256 unlockDate\r\n    )\r\n        public\r\n        onlyMigrationSource();\r\n}\r\n\r\ncontract NeumarkIssuanceCurve {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // maximum number of neumarks that may be created\r\n    uint256 private constant NEUMARK_CAP = 1500000000000000000000000000;\r\n\r\n    // initial neumark reward fraction (controls curve steepness)\r\n    uint256 private constant INITIAL_REWARD_FRACTION = 6500000000000000000;\r\n\r\n    // stop issuing new Neumarks above this Euro value (as it goes quickly to zero)\r\n    uint256 private constant ISSUANCE_LIMIT_EUR_ULPS = 8300000000000000000000000000;\r\n\r\n    // approximate curve linearly above this Euro value\r\n    uint256 private constant LINEAR_APPROX_LIMIT_EUR_ULPS = 2100000000000000000000000000;\r\n    uint256 private constant NEUMARKS_AT_LINEAR_LIMIT_ULPS = 1499832501287264827896539871;\r\n\r\n    uint256 private constant TOT_LINEAR_NEUMARKS_ULPS = NEUMARK_CAP - NEUMARKS_AT_LINEAR_LIMIT_ULPS;\r\n    uint256 private constant TOT_LINEAR_EUR_ULPS = ISSUANCE_LIMIT_EUR_ULPS - LINEAR_APPROX_LIMIT_EUR_ULPS;\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice returns additional amount of neumarks issued for euroUlps at totalEuroUlps\r\n    /// @param totalEuroUlps actual curve position from which neumarks will be issued\r\n    /// @param euroUlps amount against which neumarks will be issued\r\n    function incremental(uint256 totalEuroUlps, uint256 euroUlps)\r\n        public\r\n        constant\r\n        returns (uint256 neumarkUlps)\r\n    {\r\n        require(totalEuroUlps + euroUlps >= totalEuroUlps);\r\n        uint256 from = cumulative(totalEuroUlps);\r\n        uint256 to = cumulative(totalEuroUlps + euroUlps);\r\n        // as expansion is not monotonic for large totalEuroUlps, assert below may fail\r\n        // example: totalEuroUlps=1.999999999999999999999000000e+27 and euroUlps=50\r\n        assert(to >= from);\r\n        return to - from;\r\n    }\r\n\r\n    /// @notice returns amount of euro corresponding to burned neumarks\r\n    /// @param totalEuroUlps actual curve position from which neumarks will be burned\r\n    /// @param burnNeumarkUlps amount of neumarks to burn\r\n    function incrementalInverse(uint256 totalEuroUlps, uint256 burnNeumarkUlps)\r\n        public\r\n        constant\r\n        returns (uint256 euroUlps)\r\n    {\r\n        uint256 totalNeumarkUlps = cumulative(totalEuroUlps);\r\n        require(totalNeumarkUlps >= burnNeumarkUlps);\r\n        uint256 fromNmk = totalNeumarkUlps - burnNeumarkUlps;\r\n        uint newTotalEuroUlps = cumulativeInverse(fromNmk, 0, totalEuroUlps);\r\n        // yes, this may overflow due to non monotonic inverse function\r\n        assert(totalEuroUlps >= newTotalEuroUlps);\r\n        return totalEuroUlps - newTotalEuroUlps;\r\n    }\r\n\r\n    /// @notice returns amount of euro corresponding to burned neumarks\r\n    /// @param totalEuroUlps actual curve position from which neumarks will be burned\r\n    /// @param burnNeumarkUlps amount of neumarks to burn\r\n    /// @param minEurUlps euro amount to start inverse search from, inclusive\r\n    /// @param maxEurUlps euro amount to end inverse search to, inclusive\r\n    function incrementalInverse(uint256 totalEuroUlps, uint256 burnNeumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\r\n        public\r\n        constant\r\n        returns (uint256 euroUlps)\r\n    {\r\n        uint256 totalNeumarkUlps = cumulative(totalEuroUlps);\r\n        require(totalNeumarkUlps >= burnNeumarkUlps);\r\n        uint256 fromNmk = totalNeumarkUlps - burnNeumarkUlps;\r\n        uint newTotalEuroUlps = cumulativeInverse(fromNmk, minEurUlps, maxEurUlps);\r\n        // yes, this may overflow due to non monotonic inverse function\r\n        assert(totalEuroUlps >= newTotalEuroUlps);\r\n        return totalEuroUlps - newTotalEuroUlps;\r\n    }\r\n\r\n    /// @notice finds total amount of neumarks issued for given amount of Euro\r\n    /// @dev binomial expansion does not guarantee monotonicity on uint256 precision for large euroUlps\r\n    ///     function below is not monotonic\r\n    function cumulative(uint256 euroUlps)\r\n        public\r\n        constant\r\n        returns(uint256 neumarkUlps)\r\n    {\r\n        // Return the cap if euroUlps is above the limit.\r\n        if (euroUlps >= ISSUANCE_LIMIT_EUR_ULPS) {\r\n            return NEUMARK_CAP;\r\n        }\r\n        // use linear approximation above limit below\r\n        // binomial expansion does not guarantee monotonicity on uint256 precision for large euroUlps\r\n        if (euroUlps >= LINEAR_APPROX_LIMIT_EUR_ULPS) {\r\n            // (euroUlps - LINEAR_APPROX_LIMIT_EUR_ULPS) is small so expression does not overflow\r\n            return NEUMARKS_AT_LINEAR_LIMIT_ULPS + (TOT_LINEAR_NEUMARKS_ULPS * (euroUlps - LINEAR_APPROX_LIMIT_EUR_ULPS)) / TOT_LINEAR_EUR_ULPS;\r\n        }\r\n\r\n        // Approximate cap-cap·(1-1/D)^n using the Binomial expansion\r\n        // http://galileo.phys.virginia.edu/classes/152.mf1i.spring02/Exponential_Function.htm\r\n        // Function[imax, -CAP*Sum[(-IR*EUR/CAP)^i/Factorial[i], {i, imax}]]\r\n        // which may be simplified to\r\n        // Function[imax, -CAP*Sum[(EUR)^i/(Factorial[i]*(-d)^i), {i, 1, imax}]]\r\n        // where d = cap/initial_reward\r\n        uint256 d = 230769230769230769230769231; // NEUMARK_CAP / INITIAL_REWARD_FRACTION\r\n        uint256 term = NEUMARK_CAP;\r\n        uint256 sum = 0;\r\n        uint256 denom = d;\r\n        do assembly {\r\n            // We use assembler primarily to avoid the expensive\r\n            // divide-by-zero check solc inserts for the / operator.\r\n            term  := div(mul(term, euroUlps), denom)\r\n            sum   := add(sum, term)\r\n            denom := add(denom, d)\r\n            // sub next term as we have power of negative value in the binomial expansion\r\n            term  := div(mul(term, euroUlps), denom)\r\n            sum   := sub(sum, term)\r\n            denom := add(denom, d)\r\n        } while (term != 0);\r\n        return sum;\r\n    }\r\n\r\n    /// @notice find issuance curve inverse by binary search\r\n    /// @param neumarkUlps neumark amount to compute inverse for\r\n    /// @param minEurUlps minimum search range for the inverse, inclusive\r\n    /// @param maxEurUlps maxium search range for the inverse, inclusive\r\n    /// @dev in case of approximate search (no exact inverse) upper element of minimal search range is returned\r\n    /// @dev in case of many possible inverses, the lowest one will be used (if range permits)\r\n    /// @dev corresponds to a linear search that returns first euroUlp value that has cumulative() equal or greater than neumarkUlps\r\n    function cumulativeInverse(uint256 neumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\r\n        public\r\n        constant\r\n        returns (uint256 euroUlps)\r\n    {\r\n        require(maxEurUlps >= minEurUlps);\r\n        require(cumulative(minEurUlps) <= neumarkUlps);\r\n        require(cumulative(maxEurUlps) >= neumarkUlps);\r\n        uint256 min = minEurUlps;\r\n        uint256 max = maxEurUlps;\r\n\r\n        // Binary search\r\n        while (max > min) {\r\n            uint256 mid = (max + min) / 2;\r\n            uint256 val = cumulative(mid);\r\n            // exact solution should not be used, a late points of the curve when many euroUlps are needed to\r\n            // increase by one nmkUlp this will lead to  \"indeterministic\" inverse values that depend on the initial min and max\r\n            // and further binary division -> you can land at any of the euro value that is mapped to the same nmk value\r\n            // with condition below removed, binary search will point to the lowest eur value possible which is good because it cannot be exploited even with 0 gas costs\r\n            /* if (val == neumarkUlps) {\r\n                return mid;\r\n            }*/\r\n            // NOTE: approximate search (no inverse) must return upper element of the final range\r\n            //  last step of approximate search is always (min, min+1) so new mid is (2*min+1)/2 => min\r\n            //  so new min = mid + 1 = max which was upper range. and that ends the search\r\n            // NOTE: when there are multiple inverses for the same neumarkUlps, the `max` will be dragged down\r\n            //  by `max = mid` expression to the lowest eur value of inverse. works only for ranges that cover all points of multiple inverse\r\n            if (val < neumarkUlps) {\r\n                min = mid + 1;\r\n            } else {\r\n                max = mid;\r\n            }\r\n        }\r\n        // NOTE: It is possible that there is no inverse\r\n        //  for example curve(0) = 0 and curve(1) = 6, so\r\n        //  there is no value y such that curve(y) = 5.\r\n        //  When there is no inverse, we must return upper element of last search range.\r\n        //  This has the effect of reversing the curve less when\r\n        //  burning Neumarks. This ensures that Neumarks can always\r\n        //  be burned. It also ensure that the total supply of Neumarks\r\n        //  remains below the cap.\r\n        return max;\r\n    }\r\n\r\n    function neumarkCap()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return NEUMARK_CAP;\r\n    }\r\n\r\n    function initialRewardFraction()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return INITIAL_REWARD_FRACTION;\r\n    }\r\n}\r\n\r\n/// @title advances snapshot id on demand\r\n/// @dev see Snapshot folder for implementation examples ie. DailyAndSnapshotable contract\r\ncontract ISnapshotable {\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// @dev should log each new snapshot id created, including snapshots created automatically via MSnapshotPolicy\r\n    event LogSnapshotCreated(uint256 snapshotId);\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// always creates new snapshot id which gets returned\r\n    /// however, there is no guarantee that any snapshot will be created with this id, this depends on the implementation of MSnaphotPolicy\r\n    function createSnapshot()\r\n        public\r\n        returns (uint256);\r\n\r\n    /// upper bound of series snapshotIds for which there's a value\r\n    function currentSnapshotId()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n}\r\n\r\n/// @title Abstracts snapshot id creation logics\r\n/// @dev Mixin (internal interface) of the snapshot policy which abstracts snapshot id creation logics from Snapshot contract\r\n/// @dev to be implemented and such implementation should be mixed with Snapshot-derived contract, see EveryBlock for simplest example of implementation and StandardSnapshotToken\r\ncontract MSnapshotPolicy {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // The snapshot Ids need to be strictly increasing.\r\n    // Whenever the snaspshot id changes, a new snapshot will be created.\r\n    // As long as the same snapshot id is being returned, last snapshot will be updated as this indicates that snapshot id didn't change\r\n    //\r\n    // Values passed to `hasValueAt` and `valuteAt` are required\r\n    // to be less or equal to `mCurrentSnapshotId()`.\r\n    function mCurrentSnapshotId()\r\n        internal\r\n        returns (uint256);\r\n}\r\n\r\n/// @title creates snapshot id on each day boundary and allows to create additional snapshots within a given day\r\n/// @dev snapshots are encoded in single uint256, where high 128 bits represents a day number (from unix epoch) and low 128 bits represents additional snapshots within given day create via ISnapshotable\r\ncontract DailyAndSnapshotable is\r\n    MSnapshotPolicy,\r\n    ISnapshotable\r\n{\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // Floor[2**128 / 1 days]\r\n    uint256 private MAX_TIMESTAMP = 3938453320844195178974243141571391;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    uint256 private _currentSnapshotId;\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @param start snapshotId from which to start generating values\r\n    /// @dev start must be for the same day or 0, required for token cloning\r\n    function DailyAndSnapshotable(uint256 start) internal {\r\n        // 0 is invalid value as we are past unix epoch\r\n        if (start > 0) {\r\n            uint256 dayBase = snapshotAt(block.timestamp);\r\n            require(start >= dayBase);\r\n            // dayBase + 2**128 will not overflow as it is based on block.timestamp\r\n            require(start < dayBase + 2**128);\r\n            _currentSnapshotId = start;\r\n        }\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function snapshotAt(uint256 timestamp)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        require(timestamp < MAX_TIMESTAMP);\r\n\r\n        uint256 dayBase = 2**128 * (timestamp / 1 days);\r\n        return dayBase;\r\n    }\r\n\r\n    //\r\n    // Implements ISnapshotable\r\n    //\r\n\r\n    function createSnapshot()\r\n        public\r\n        returns (uint256)\r\n    {\r\n        uint256 dayBase = 2**128 * (block.timestamp / 1 days);\r\n\r\n        if (dayBase > _currentSnapshotId) {\r\n            // New day has started, create snapshot for midnight\r\n            _currentSnapshotId = dayBase;\r\n        } else {\r\n            // within single day, increase counter (assume 2**128 will not be crossed)\r\n            _currentSnapshotId += 1;\r\n        }\r\n\r\n        // Log and return\r\n        LogSnapshotCreated(_currentSnapshotId);\r\n        return _currentSnapshotId;\r\n    }\r\n\r\n    function currentSnapshotId()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return mCurrentSnapshotId();\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements MSnapshotPolicy\r\n    //\r\n\r\n    function mCurrentSnapshotId()\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 dayBase = 2**128 * (block.timestamp / 1 days);\r\n\r\n        // New day has started\r\n        if (dayBase > _currentSnapshotId) {\r\n            _currentSnapshotId = dayBase;\r\n            LogSnapshotCreated(dayBase);\r\n        }\r\n\r\n        return _currentSnapshotId;\r\n    }\r\n}\r\n\r\n/// @title controls spending approvals\r\n/// @dev TokenAllowance observes this interface, Neumark contract implements it\r\ncontract MTokenAllowanceController {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param owner The address that calls `approve()`\r\n    /// @param spender The spender in the `approve()` call\r\n    /// @param amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function mOnApprove(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        returns (bool allow);\r\n\r\n}\r\n\r\n/// @title controls token transfers\r\n/// @dev BasicSnapshotToken observes this interface, Neumark contract implements it\r\ncontract MTokenTransferController {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param from The origin of the transfer\r\n    /// @param to The destination of the transfer\r\n    /// @param amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function mOnTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        returns (bool allow);\r\n\r\n}\r\n\r\n/// @title controls approvals and transfers\r\n/// @dev The token controller contract must implement these functions, see Neumark as example\r\n/// @dev please note that controller may be a separate contract that is called from mOnTransfer and mOnApprove functions\r\ncontract MTokenController is MTokenTransferController, MTokenAllowanceController {\r\n}\r\n\r\n/// @title internal token transfer function\r\n/// @dev see BasicSnapshotToken for implementation\r\ncontract MTokenTransfer {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param from The address holding the tokens being transferred\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @dev  reverts if transfer was not successful\r\n    function mTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal;\r\n}\r\n\r\n/// @title token spending approval and transfer\r\n/// @dev implements token approval and transfers and exposes relevant part of ERC20 and ERC677 approveAndCall\r\n///     may be mixed in with any basic token (implementing mTransfer) like BasicSnapshotToken or MintableSnapshotToken to add approval mechanism\r\n///     observes MTokenAllowanceController interface\r\n///     observes MTokenTransfer\r\ncontract TokenAllowance is\r\n    MTokenTransfer,\r\n    MTokenAllowanceController,\r\n    IERC20Allowance,\r\n    IERC677Token\r\n{\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // `allowed` tracks rights to spends others tokens as per ERC20\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function TokenAllowance()\r\n        internal\r\n    {\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IERC20Token\r\n    //\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param owner The address of the account that owns the token\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  where allowance per spender must be 0 to allow change of such allowance\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @param amount The amount of tokens to be approved for transfer\r\n    /// @return True or reverts, False is never returned\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        // Alerts the token controller of the approve function call\r\n        require(mOnApprove(msg.sender, spender, amount));\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((amount == 0) || (_allowed[msg.sender][spender] == 0));\r\n\r\n        _allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param from The address holding the tokens being transferred\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful, reverts in any other case\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        // The standard ERC 20 transferFrom functionality\r\n        bool amountApproved = _allowed[from][msg.sender] >= amount;\r\n        require(amountApproved);\r\n\r\n        _allowed[from][msg.sender] -= amount;\r\n        mTransfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // Implements IERC677Token\r\n    //\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param spender The address of the contract able to transfer the tokens\r\n    /// @param amount The amount of tokens to be approved for transfer\r\n    /// @return True or reverts, False is never returned\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 amount,\r\n        bytes extraData\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(approve(spender, amount));\r\n\r\n        success = IERC677Callback(spender).receiveApproval(\r\n            msg.sender,\r\n            amount,\r\n            this,\r\n            extraData\r\n        );\r\n        require(success);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/// @title Reads and writes snapshots\r\n/// @dev Manages reading and writing a series of values, where each value has assigned a snapshot id for access to historical data\r\n/// @dev may be added to any contract to provide snapshotting mechanism. should be mixed in with any of MSnapshotPolicy implementations to customize snapshot creation mechanics\r\n///     observes MSnapshotPolicy\r\n/// based on MiniMe token\r\ncontract Snapshot is MSnapshotPolicy {\r\n\r\n    ////////////////////////\r\n    // Types\r\n    ////////////////////////\r\n\r\n    /// @dev `Values` is the structure that attaches a snapshot id to a\r\n    ///  given value, the snapshot id attached is the one that last changed the\r\n    ///  value\r\n    struct Values {\r\n\r\n        // `snapshotId` is the snapshot id that the value was generated at\r\n        uint256 snapshotId;\r\n\r\n        // `value` at a specific snapshot id\r\n        uint256 value;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    function hasValue(\r\n        Values[] storage values\r\n    )\r\n        internal\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return values.length > 0;\r\n    }\r\n\r\n    /// @dev makes sure that 'snapshotId' between current snapshot id (mCurrentSnapshotId) and first snapshot id. this guarantees that getValueAt returns value from one of the snapshots.\r\n    function hasValueAt(\r\n        Values[] storage values,\r\n        uint256 snapshotId\r\n    )\r\n        internal\r\n        constant\r\n        returns (bool)\r\n    {\r\n        require(snapshotId <= mCurrentSnapshotId());\r\n        return values.length > 0 && values[0].snapshotId <= snapshotId;\r\n    }\r\n\r\n    /// gets last value in the series\r\n    function getValue(\r\n        Values[] storage values,\r\n        uint256 defaultValue\r\n    )\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        if (values.length == 0) {\r\n            return defaultValue;\r\n        } else {\r\n            uint256 last = values.length - 1;\r\n            return values[last].value;\r\n        }\r\n    }\r\n\r\n    /// @dev `getValueAt` retrieves value at a given snapshot id\r\n    /// @param values The series of values being queried\r\n    /// @param snapshotId Snapshot id to retrieve the value at\r\n    /// @return Value in series being queried\r\n    function getValueAt(\r\n        Values[] storage values,\r\n        uint256 snapshotId,\r\n        uint256 defaultValue\r\n    )\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        require(snapshotId <= mCurrentSnapshotId());\r\n\r\n        // Empty value\r\n        if (values.length == 0) {\r\n            return defaultValue;\r\n        }\r\n\r\n        // Shortcut for the out of bounds snapshots\r\n        uint256 last = values.length - 1;\r\n        uint256 lastSnapshot = values[last].snapshotId;\r\n        if (snapshotId >= lastSnapshot) {\r\n            return values[last].value;\r\n        }\r\n        uint256 firstSnapshot = values[0].snapshotId;\r\n        if (snapshotId < firstSnapshot) {\r\n            return defaultValue;\r\n        }\r\n        // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = last;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            // must always return lower indice for approximate searches\r\n            if (values[mid].snapshotId <= snapshotId) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n        return values[min].value;\r\n    }\r\n\r\n    /// @dev `setValue` used to update sequence at next snapshot\r\n    /// @param values The sequence being updated\r\n    /// @param value The new last value of sequence\r\n    function setValue(\r\n        Values[] storage values,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        // TODO: simplify or break into smaller functions\r\n\r\n        uint256 currentSnapshotId = mCurrentSnapshotId();\r\n        // Always create a new entry if there currently is no value\r\n        bool empty = values.length == 0;\r\n        if (empty) {\r\n            // Create a new entry\r\n            values.push(\r\n                Values({\r\n                    snapshotId: currentSnapshotId,\r\n                    value: value\r\n                })\r\n            );\r\n            return;\r\n        }\r\n\r\n        uint256 last = values.length - 1;\r\n        bool hasNewSnapshot = values[last].snapshotId < currentSnapshotId;\r\n        if (hasNewSnapshot) {\r\n\r\n            // Do nothing if the value was not modified\r\n            bool unmodified = values[last].value == value;\r\n            if (unmodified) {\r\n                return;\r\n            }\r\n\r\n            // Create new entry\r\n            values.push(\r\n                Values({\r\n                    snapshotId: currentSnapshotId,\r\n                    value: value\r\n                })\r\n            );\r\n        } else {\r\n\r\n            // We are updating the currentSnapshotId\r\n            bool previousUnmodified = last > 0 && values[last - 1].value == value;\r\n            if (previousUnmodified) {\r\n                // Remove current snapshot if current value was set to previous value\r\n                delete values[last];\r\n                values.length--;\r\n                return;\r\n            }\r\n\r\n            // Overwrite next snapshot entry\r\n            values[last].value = value;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title access to snapshots of a token\r\n/// @notice allows to implement complex token holder rights like revenue disbursal or voting\r\n/// @notice snapshots are series of values with assigned ids. ids increase strictly. particular id mechanism is not assumed\r\ncontract ITokenSnapshots {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice Total amount of tokens at a specific `snapshotId`.\r\n    /// @param snapshotId of snapshot at which totalSupply is queried\r\n    /// @return The total amount of tokens at `snapshotId`\r\n    /// @dev reverts on snapshotIds greater than currentSnapshotId()\r\n    /// @dev returns 0 for snapshotIds less than snapshotId of first value\r\n    function totalSupplyAt(uint256 snapshotId)\r\n        public\r\n        constant\r\n        returns(uint256);\r\n\r\n    /// @dev Queries the balance of `owner` at a specific `snapshotId`\r\n    /// @param owner The address from which the balance will be retrieved\r\n    /// @param snapshotId of snapshot at which the balance is queried\r\n    /// @return The balance at `snapshotId`\r\n    function balanceOfAt(address owner, uint256 snapshotId)\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    /// @notice upper bound of series of snapshotIds for which there's a value in series\r\n    /// @return snapshotId\r\n    function currentSnapshotId()\r\n        public\r\n        constant\r\n        returns (uint256);\r\n}\r\n\r\n/// @title represents link between cloned and parent token\r\n/// @dev when token is clone from other token, initial balances of the cloned token\r\n///     correspond to balances of parent token at the moment of parent snapshot id specified\r\n/// @notice please note that other tokens beside snapshot token may be cloned\r\ncontract IClonedTokenParent is ITokenSnapshots {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n\r\n    /// @return address of parent token, address(0) if root\r\n    /// @dev parent token does not need to clonable, nor snapshottable, just a normal token\r\n    function parentToken()\r\n        public\r\n        constant\r\n        returns(IClonedTokenParent parent);\r\n\r\n    /// @return snapshot at wchich initial token distribution was taken\r\n    function parentSnapshotId()\r\n        public\r\n        constant\r\n        returns(uint256 snapshotId);\r\n}\r\n\r\n/// @title token with snapshots and transfer functionality\r\n/// @dev observes MTokenTransferController interface\r\n///     observes ISnapshotToken interface\r\n///     implementes MTokenTransfer interface\r\ncontract BasicSnapshotToken is\r\n    MTokenTransfer,\r\n    MTokenTransferController,\r\n    IBasicToken,\r\n    IClonedTokenParent,\r\n    Snapshot\r\n{\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // `PARENT_TOKEN` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    IClonedTokenParent private PARENT_TOKEN;\r\n\r\n    // `PARENT_SNAPSHOT_ID` is the snapshot id from the Parent Token that was\r\n    //  used to determine the initial distribution of the cloned token\r\n    uint256 private PARENT_SNAPSHOT_ID;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the snapshot id that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Values[]) internal _balances;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Values[] internal _totalSupplyValues;\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @notice Constructor to create snapshot token\r\n    /// @param parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param parentSnapshotId at which snapshot id clone was created, set to 0 to clone at upper bound\r\n    /// @dev please not that as long as cloned token does not overwrite value at current snapshot id, it will refer\r\n    ///     to parent token at which this snapshot still may change until snapshot id increases. for that time tokens are coupled\r\n    ///     this is prevented by parentSnapshotId value of parentToken.currentSnapshotId() - 1 being the maxiumum\r\n    ///     see SnapshotToken.js test to learn consequences coupling has.\r\n    function BasicSnapshotToken(\r\n        IClonedTokenParent parentToken,\r\n        uint256 parentSnapshotId\r\n    )\r\n        Snapshot()\r\n        internal\r\n    {\r\n        PARENT_TOKEN = parentToken;\r\n        if (parentToken == address(0)) {\r\n            require(parentSnapshotId == 0);\r\n        } else {\r\n            if (parentSnapshotId == 0) {\r\n                require(parentToken.currentSnapshotId() > 0);\r\n                PARENT_SNAPSHOT_ID = parentToken.currentSnapshotId() - 1;\r\n            } else {\r\n                PARENT_SNAPSHOT_ID = parentSnapshotId;\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IBasicToken\r\n    //\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return totalSupplyAtInternal(mCurrentSnapshotId());\r\n    }\r\n\r\n    /// @param owner The address that's balance is being requested\r\n    /// @return The balance of `owner` at the current block\r\n    function balanceOf(address owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balanceOfAtInternal(owner, mCurrentSnapshotId());\r\n    }\r\n\r\n    /// @notice Send `amount` tokens to `to` from `msg.sender`\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful, reverts in any other case\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        mTransfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // Implements ITokenSnapshots\r\n    //\r\n\r\n    function totalSupplyAt(uint256 snapshotId)\r\n        public\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        return totalSupplyAtInternal(snapshotId);\r\n    }\r\n\r\n    function balanceOfAt(address owner, uint256 snapshotId)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return balanceOfAtInternal(owner, snapshotId);\r\n    }\r\n\r\n    function currentSnapshotId()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return mCurrentSnapshotId();\r\n    }\r\n\r\n    //\r\n    // Implements IClonedTokenParent\r\n    //\r\n\r\n    function parentToken()\r\n        public\r\n        constant\r\n        returns(IClonedTokenParent parent)\r\n    {\r\n        return PARENT_TOKEN;\r\n    }\r\n\r\n    /// @return snapshot at wchich initial token distribution was taken\r\n    function parentSnapshotId()\r\n        public\r\n        constant\r\n        returns(uint256 snapshotId)\r\n    {\r\n        return PARENT_SNAPSHOT_ID;\r\n    }\r\n\r\n    //\r\n    // Other public functions\r\n    //\r\n\r\n    /// @notice gets all token balances of 'owner'\r\n    /// @dev intended to be called via eth_call where gas limit is not an issue\r\n    function allBalancesOf(address owner)\r\n        external\r\n        constant\r\n        returns (uint256[2][])\r\n    {\r\n        /* very nice and working implementation below,\r\n        // copy to memory\r\n        Values[] memory values = _balances[owner];\r\n        do assembly {\r\n            // in memory structs have simple layout where every item occupies uint256\r\n            balances := values\r\n        } while (false);*/\r\n\r\n        Values[] storage values = _balances[owner];\r\n        uint256[2][] memory balances = new uint256[2][](values.length);\r\n        for(uint256 ii = 0; ii < values.length; ++ii) {\r\n            balances[ii] = [values[ii].snapshotId, values[ii].value];\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    function totalSupplyAtInternal(uint256 snapshotId)\r\n        public\r\n        constant\r\n        returns(uint256)\r\n    {\r\n        Values[] storage values = _totalSupplyValues;\r\n\r\n        // If there is a value, return it, reverts if value is in the future\r\n        if (hasValueAt(values, snapshotId)) {\r\n            return getValueAt(values, snapshotId, 0);\r\n        }\r\n\r\n        // Try parent contract at or before the fork\r\n        if (address(PARENT_TOKEN) != 0) {\r\n            uint256 earlierSnapshotId = PARENT_SNAPSHOT_ID > snapshotId ? snapshotId : PARENT_SNAPSHOT_ID;\r\n            return PARENT_TOKEN.totalSupplyAt(earlierSnapshotId);\r\n        }\r\n\r\n        // Default to an empty balance\r\n        return 0;\r\n    }\r\n\r\n    // get balance at snapshot if with continuation in parent token\r\n    function balanceOfAtInternal(address owner, uint256 snapshotId)\r\n        internal\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        Values[] storage values = _balances[owner];\r\n\r\n        // If there is a value, return it, reverts if value is in the future\r\n        if (hasValueAt(values, snapshotId)) {\r\n            return getValueAt(values, snapshotId, 0);\r\n        }\r\n\r\n        // Try parent contract at or before the fork\r\n        if (PARENT_TOKEN != address(0)) {\r\n            uint256 earlierSnapshotId = PARENT_SNAPSHOT_ID > snapshotId ? snapshotId : PARENT_SNAPSHOT_ID;\r\n            return PARENT_TOKEN.balanceOfAt(owner, earlierSnapshotId);\r\n        }\r\n\r\n        // Default to an empty balance\r\n        return 0;\r\n    }\r\n\r\n    //\r\n    // Implements MTokenTransfer\r\n    //\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param from The address holding the tokens being transferred\r\n    /// @param to The address of the recipient\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful, reverts in any other case\r\n    function mTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        internal\r\n    {\r\n        // never send to address 0\r\n        require(to != address(0));\r\n        // block transfers in clone that points to future/current snapshots of patent token\r\n        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\r\n        // Alerts the token controller of the transfer\r\n        require(mOnTransfer(from, to, amount));\r\n\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer reverts\r\n        var previousBalanceFrom = balanceOf(from);\r\n        require(previousBalanceFrom >= amount);\r\n\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        uint256 newBalanceFrom = previousBalanceFrom - amount;\r\n        setValue(_balances[from], newBalanceFrom);\r\n\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        uint256 previousBalanceTo = balanceOf(to);\r\n        uint256 newBalanceTo = previousBalanceTo + amount;\r\n        assert(newBalanceTo >= previousBalanceTo); // Check for overflow\r\n        setValue(_balances[to], newBalanceTo);\r\n\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\n/// @title token generation and destruction\r\n/// @dev internal interface providing token generation and destruction, see MintableSnapshotToken for implementation\r\ncontract MTokenMint {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    /// @notice Generates `amount` tokens that are assigned to `owner`\r\n    /// @param owner The address that will be assigned the new tokens\r\n    /// @param amount The quantity of tokens generated\r\n    /// @dev reverts if tokens could not be generated\r\n    function mGenerateTokens(address owner, uint256 amount)\r\n        internal;\r\n\r\n    /// @notice Burns `amount` tokens from `owner`\r\n    /// @param owner The address that will lose the tokens\r\n    /// @param amount The quantity of tokens to burn\r\n    /// @dev reverts if tokens could not be destroyed\r\n    function mDestroyTokens(address owner, uint256 amount)\r\n        internal;\r\n}\r\n\r\n/// @title basic snapshot token with facitilites to generate and destroy tokens\r\n/// @dev implementes MTokenMint, does not expose any public functions that create/destroy tokens\r\ncontract MintableSnapshotToken is\r\n    BasicSnapshotToken,\r\n    MTokenMint\r\n{\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @notice Constructor to create a MintableSnapshotToken\r\n    /// @param parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    function MintableSnapshotToken(\r\n        IClonedTokenParent parentToken,\r\n        uint256 parentSnapshotId\r\n    )\r\n        BasicSnapshotToken(parentToken, parentSnapshotId)\r\n        internal\r\n    {}\r\n\r\n    /// @notice Generates `amount` tokens that are assigned to `owner`\r\n    /// @param owner The address that will be assigned the new tokens\r\n    /// @param amount The quantity of tokens generated\r\n    function mGenerateTokens(address owner, uint256 amount)\r\n        internal\r\n    {\r\n        // never create for address 0\r\n        require(owner != address(0));\r\n        // block changes in clone that points to future/current snapshots of patent token\r\n        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\r\n\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 newTotalSupply = curTotalSupply + amount;\r\n        require(newTotalSupply >= curTotalSupply); // Check for overflow\r\n\r\n        uint256 previousBalanceTo = balanceOf(owner);\r\n        uint256 newBalanceTo = previousBalanceTo + amount;\r\n        assert(newBalanceTo >= previousBalanceTo); // Check for overflow\r\n\r\n        setValue(_totalSupplyValues, newTotalSupply);\r\n        setValue(_balances[owner], newBalanceTo);\r\n\r\n        Transfer(0, owner, amount);\r\n    }\r\n\r\n    /// @notice Burns `amount` tokens from `owner`\r\n    /// @param owner The address that will lose the tokens\r\n    /// @param amount The quantity of tokens to burn\r\n    function mDestroyTokens(address owner, uint256 amount)\r\n        internal\r\n    {\r\n        // block changes in clone that points to future/current snapshots of patent token\r\n        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\r\n\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= amount);\r\n\r\n        uint256 previousBalanceFrom = balanceOf(owner);\r\n        require(previousBalanceFrom >= amount);\r\n\r\n        uint256 newTotalSupply = curTotalSupply - amount;\r\n        uint256 newBalanceFrom = previousBalanceFrom - amount;\r\n        setValue(_totalSupplyValues, newTotalSupply);\r\n        setValue(_balances[owner], newBalanceFrom);\r\n\r\n        Transfer(owner, 0, amount);\r\n    }\r\n}\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n    Copyright 2017, Remco Bloemen, Marcin Rudolf\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/// @title StandardSnapshotToken Contract\r\n/// @author Jordi Baylina, Remco Bloemen, Marcin Rudolf\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n/// @dev Various contracts are composed to provide required functionality of this token, different compositions are possible\r\n///     MintableSnapshotToken provides transfer, miniting and snapshotting functions\r\n///     TokenAllowance provides approve/transferFrom functions\r\n///     TokenMetadata adds name, symbol and other token metadata\r\n/// @dev This token is still abstract, Snapshot, BasicSnapshotToken and TokenAllowance observe interfaces that must be implemented\r\n///     MSnapshotPolicy - particular snapshot id creation mechanism\r\n///     MTokenController - controlls approvals and transfers\r\n///     see Neumark as an example\r\n/// @dev implements ERC223 token transfer\r\ncontract StandardSnapshotToken is\r\n    IERC20Token,\r\n    MintableSnapshotToken,\r\n    TokenAllowance,\r\n    IERC223Token,\r\n    IsContract\r\n{\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    ///  is a new token\r\n    /// param tokenName Name of the new token\r\n    /// param decimalUnits Number of decimals of the new token\r\n    /// param tokenSymbol Token Symbol for the new token\r\n    function StandardSnapshotToken(\r\n        IClonedTokenParent parentToken,\r\n        uint256 parentSnapshotId\r\n    )\r\n        MintableSnapshotToken(parentToken, parentSnapshotId)\r\n        TokenAllowance()\r\n        internal\r\n    {}\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements IERC223Token\r\n    //\r\n\r\n    function transfer(address to, uint256 amount, bytes data)\r\n        public\r\n        returns (bool)\r\n    {\r\n        // it is necessary to point out implementation to be called\r\n        BasicSnapshotToken.mTransfer(msg.sender, to, amount);\r\n\r\n        // Notify the receiving contract.\r\n        if (isContract(to)) {\r\n            IERC223Callback(to).onTokenTransfer(msg.sender, amount, data);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Neumark is\r\n    AccessControlled,\r\n    AccessRoles,\r\n    Agreement,\r\n    DailyAndSnapshotable,\r\n    StandardSnapshotToken,\r\n    TokenMetadata,\r\n    NeumarkIssuanceCurve,\r\n    Reclaimable\r\n{\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    string private constant TOKEN_NAME = \"Neumark\";\r\n\r\n    uint8  private constant TOKEN_DECIMALS = 18;\r\n\r\n    string private constant TOKEN_SYMBOL = \"NEU\";\r\n\r\n    string private constant VERSION = \"NMK_1.0\";\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // disable transfers when Neumark is created\r\n    bool private _transferEnabled = false;\r\n\r\n    // at which point on curve new Neumarks will be created, see NeumarkIssuanceCurve contract\r\n    // do not use to get total invested funds. see burn(). this is just a cache for expensive inverse function\r\n    uint256 private _totalEurUlps;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogNeumarksIssued(\r\n        address indexed owner,\r\n        uint256 euroUlps,\r\n        uint256 neumarkUlps\r\n    );\r\n\r\n    event LogNeumarksBurned(\r\n        address indexed owner,\r\n        uint256 euroUlps,\r\n        uint256 neumarkUlps\r\n    );\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function Neumark(\r\n        IAccessPolicy accessPolicy,\r\n        IEthereumForkArbiter forkArbiter\r\n    )\r\n        AccessControlled(accessPolicy)\r\n        AccessRoles()\r\n        Agreement(accessPolicy, forkArbiter)\r\n        StandardSnapshotToken(\r\n            IClonedTokenParent(0x0),\r\n            0\r\n        )\r\n        TokenMetadata(\r\n            TOKEN_NAME,\r\n            TOKEN_DECIMALS,\r\n            TOKEN_SYMBOL,\r\n            VERSION\r\n        )\r\n        DailyAndSnapshotable(0)\r\n        NeumarkIssuanceCurve()\r\n        Reclaimable()\r\n        public\r\n    {}\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice issues new Neumarks to msg.sender with reward at current curve position\r\n    ///     moves curve position by euroUlps\r\n    ///     callable only by ROLE_NEUMARK_ISSUER\r\n    function issueForEuro(uint256 euroUlps)\r\n        public\r\n        only(ROLE_NEUMARK_ISSUER)\r\n        acceptAgreement(msg.sender)\r\n        returns (uint256)\r\n    {\r\n        require(_totalEurUlps + euroUlps >= _totalEurUlps);\r\n        uint256 neumarkUlps = incremental(_totalEurUlps, euroUlps);\r\n        _totalEurUlps += euroUlps;\r\n        mGenerateTokens(msg.sender, neumarkUlps);\r\n        LogNeumarksIssued(msg.sender, euroUlps, neumarkUlps);\r\n        return neumarkUlps;\r\n    }\r\n\r\n    /// @notice used by ROLE_NEUMARK_ISSUER to transer newly issued neumarks\r\n    ///     typically to the investor and platform operator\r\n    function distribute(address to, uint256 neumarkUlps)\r\n        public\r\n        only(ROLE_NEUMARK_ISSUER)\r\n        acceptAgreement(to)\r\n    {\r\n        mTransfer(msg.sender, to, neumarkUlps);\r\n    }\r\n\r\n    /// @notice msg.sender can burn their Neumarks, curve is rolled back using inverse\r\n    ///     curve. as a result cost of Neumark gets lower (reward is higher)\r\n    function burn(uint256 neumarkUlps)\r\n        public\r\n        only(ROLE_NEUMARK_BURNER)\r\n    {\r\n        burnPrivate(neumarkUlps, 0, _totalEurUlps);\r\n    }\r\n\r\n    /// @notice executes as function above but allows to provide search range for low gas burning\r\n    function burn(uint256 neumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\r\n        public\r\n        only(ROLE_NEUMARK_BURNER)\r\n    {\r\n        burnPrivate(neumarkUlps, minEurUlps, maxEurUlps);\r\n    }\r\n\r\n    function enableTransfer(bool enabled)\r\n        public\r\n        only(ROLE_TRANSFER_ADMIN)\r\n    {\r\n        _transferEnabled = enabled;\r\n    }\r\n\r\n    function createSnapshot()\r\n        public\r\n        only(ROLE_SNAPSHOT_CREATOR)\r\n        returns (uint256)\r\n    {\r\n        return DailyAndSnapshotable.createSnapshot();\r\n    }\r\n\r\n    function transferEnabled()\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        return _transferEnabled;\r\n    }\r\n\r\n    function totalEuroUlps()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalEurUlps;\r\n    }\r\n\r\n    function incremental(uint256 euroUlps)\r\n        public\r\n        constant\r\n        returns (uint256 neumarkUlps)\r\n    {\r\n        return incremental(_totalEurUlps, euroUlps);\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements MTokenController\r\n    //\r\n\r\n    function mOnTransfer(\r\n        address from,\r\n        address, // to\r\n        uint256 // amount\r\n    )\r\n        internal\r\n        acceptAgreement(from)\r\n        returns (bool allow)\r\n    {\r\n        // must have transfer enabled or msg.sender is Neumark issuer\r\n        return _transferEnabled || accessPolicy().allowed(msg.sender, ROLE_NEUMARK_ISSUER, this, msg.sig);\r\n    }\r\n\r\n    function mOnApprove(\r\n        address owner,\r\n        address, // spender,\r\n        uint256 // amount\r\n    )\r\n        internal\r\n        acceptAgreement(owner)\r\n        returns (bool allow)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Private functions\r\n    ////////////////////////\r\n\r\n    function burnPrivate(uint256 burnNeumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\r\n        private\r\n    {\r\n        uint256 prevEuroUlps = _totalEurUlps;\r\n        // burn first in the token to make sure balance/totalSupply is not crossed\r\n        mDestroyTokens(msg.sender, burnNeumarkUlps);\r\n        _totalEurUlps = cumulativeInverse(totalSupply(), minEurUlps, maxEurUlps);\r\n        // actually may overflow on non-monotonic inverse\r\n        assert(prevEuroUlps >= _totalEurUlps);\r\n        uint256 euroUlps = prevEuroUlps - _totalEurUlps;\r\n        LogNeumarksBurned(msg.sender, euroUlps, burnNeumarkUlps);\r\n    }\r\n}\r\n\r\ncontract TimeSource {\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function currentTime() internal constant returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\ncontract LockedAccount is\r\n    AccessControlled,\r\n    AccessRoles,\r\n    TimeSource,\r\n    Math,\r\n    IsContract,\r\n    MigrationSource,\r\n    IERC677Callback,\r\n    Reclaimable\r\n{\r\n\r\n    ////////////////////////\r\n    // Type declarations\r\n    ////////////////////////\r\n\r\n    // state space of LockedAccount\r\n    enum LockState {\r\n        // controller is not yet set\r\n        Uncontrolled,\r\n        // new funds lockd are accepted from investors\r\n        AcceptingLocks,\r\n        // funds may be unlocked by investors, final state\r\n        AcceptingUnlocks,\r\n        // funds may be unlocked by investors, without any constraints, final state\r\n        ReleaseAll\r\n    }\r\n\r\n    // represents locked account of the investor\r\n    struct Account {\r\n        // funds locked in the account\r\n        uint256 balance;\r\n        // neumark amount that must be returned to unlock\r\n        uint256 neumarksDue;\r\n        // date with which unlock may happen without penalty\r\n        uint256 unlockDate;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // a token controlled by LockedAccount, read ERC20 + extensions to read what\r\n    // token is it (ETH/EUR etc.)\r\n    IERC677Token private ASSET_TOKEN;\r\n\r\n    Neumark private NEUMARK;\r\n\r\n    // longstop period in seconds\r\n    uint256 private LOCK_PERIOD;\r\n\r\n    // penalty: decimalFraction of stored amount on escape hatch\r\n    uint256 private PENALTY_FRACTION;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // total amount of tokens locked\r\n    uint256 private _totalLockedAmount;\r\n\r\n    // total number of locked investors\r\n    uint256 internal _totalInvestors;\r\n\r\n    // current state of the locking contract\r\n    LockState private _lockState;\r\n\r\n    // controlling contract that may lock money or unlock all account if fails\r\n    address private _controller;\r\n\r\n    // fee distribution pool\r\n    address private _penaltyDisbursalAddress;\r\n\r\n    // LockedAccountMigration private migration;\r\n    mapping(address => Account) internal _accounts;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// @notice logged when funds are locked by investor\r\n    /// @param investor address of investor locking funds\r\n    /// @param amount amount of newly locked funds\r\n    /// @param amount of neumarks that must be returned to unlock funds\r\n    event LogFundsLocked(\r\n        address indexed investor,\r\n        uint256 amount,\r\n        uint256 neumarks\r\n    );\r\n\r\n    /// @notice logged when investor unlocks funds\r\n    /// @param investor address of investor unlocking funds\r\n    /// @param amount amount of unlocked funds\r\n    /// @param neumarks amount of Neumarks that was burned\r\n    event LogFundsUnlocked(\r\n        address indexed investor,\r\n        uint256 amount,\r\n        uint256 neumarks\r\n    );\r\n\r\n    /// @notice logged when unlock penalty is disbursed to Neumark holders\r\n    /// @param disbursalPoolAddress address of disbursal pool receiving penalty\r\n    /// @param amount penalty amount\r\n    /// @param assetToken address of token contract penalty was paid with\r\n    /// @param investor addres of investor paying penalty\r\n    /// @dev assetToken and investor parameters are added for quick tallying penalty payouts\r\n    event LogPenaltyDisbursed(\r\n        address indexed disbursalPoolAddress,\r\n        uint256 amount,\r\n        address assetToken,\r\n        address investor\r\n    );\r\n\r\n    /// @notice logs Locked Account state transitions\r\n    event LogLockStateTransition(\r\n        LockState oldState,\r\n        LockState newState\r\n    );\r\n\r\n    event LogInvestorMigrated(\r\n        address indexed investor,\r\n        uint256 amount,\r\n        uint256 neumarks,\r\n        uint256 unlockDate\r\n    );\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == address(_controller));\r\n        _;\r\n    }\r\n\r\n    modifier onlyState(LockState state) {\r\n        require(_lockState == state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStates(LockState state1, LockState state2) {\r\n        require(_lockState == state1 || _lockState == state2);\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @notice creates new LockedAccount instance\r\n    /// @param policy governs execution permissions to admin functions\r\n    /// @param assetToken token contract representing funds locked\r\n    /// @param neumark Neumark token contract\r\n    /// @param penaltyDisbursalAddress address of disbursal contract for penalty fees\r\n    /// @param lockPeriod period for which funds are locked, in seconds\r\n    /// @param penaltyFraction decimal fraction of unlocked amount paid as penalty,\r\n    ///     if unlocked before lockPeriod is over\r\n    /// @dev this implementation does not allow spending funds on ICOs but provides\r\n    ///     a migration mechanism to final LockedAccount with such functionality\r\n    function LockedAccount(\r\n        IAccessPolicy policy,\r\n        IERC677Token assetToken,\r\n        Neumark neumark,\r\n        address penaltyDisbursalAddress,\r\n        uint256 lockPeriod,\r\n        uint256 penaltyFraction\r\n    )\r\n        AccessControlled(policy)\r\n        MigrationSource(policy, ROLE_LOCKED_ACCOUNT_ADMIN)\r\n        Reclaimable()\r\n        public\r\n    {\r\n        ASSET_TOKEN = assetToken;\r\n        NEUMARK = neumark;\r\n        LOCK_PERIOD = lockPeriod;\r\n        PENALTY_FRACTION = penaltyFraction;\r\n        _penaltyDisbursalAddress = penaltyDisbursalAddress;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// @notice locks funds of investors for a period of time\r\n    /// @param investor funds owner\r\n    /// @param amount amount of funds locked\r\n    /// @param neumarks amount of neumarks that needs to be returned by investor to unlock funds\r\n    /// @dev callable only from controller (Commitment) contract\r\n    function lock(address investor, uint256 amount, uint256 neumarks)\r\n        public\r\n        onlyState(LockState.AcceptingLocks)\r\n        onlyController()\r\n    {\r\n        require(amount > 0);\r\n        // transfer to itself from Commitment contract allowance\r\n        assert(ASSET_TOKEN.transferFrom(msg.sender, address(this), amount));\r\n\r\n        Account storage account = _accounts[investor];\r\n        account.balance = addBalance(account.balance, amount);\r\n        account.neumarksDue = add(account.neumarksDue, neumarks);\r\n\r\n        if (account.unlockDate == 0) {\r\n            // this is new account - unlockDate always > 0\r\n            _totalInvestors += 1;\r\n            account.unlockDate = currentTime() + LOCK_PERIOD;\r\n        }\r\n        LogFundsLocked(investor, amount, neumarks);\r\n    }\r\n\r\n    /// @notice unlocks investors funds, see unlockInvestor for details\r\n    /// @dev function requires that proper allowance on Neumark is made to LockedAccount by msg.sender\r\n    ///     except in ReleaseAll state which does not burn Neumark\r\n    function unlock()\r\n        public\r\n        onlyStates(LockState.AcceptingUnlocks, LockState.ReleaseAll)\r\n    {\r\n        unlockInvestor(msg.sender);\r\n    }\r\n\r\n    /// @notice unlocks investors funds, see unlockInvestor for details\r\n    /// @dev this ERC667 callback by Neumark contract after successful approve\r\n    ///     allows to unlock and allow neumarks to be burned in one transaction\r\n    function receiveApproval(\r\n        address from,\r\n        uint256, // _amount,\r\n        address _token,\r\n        bytes _data\r\n    )\r\n        public\r\n        onlyState(LockState.AcceptingUnlocks)\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == _token);\r\n        require(_data.length == 0);\r\n\r\n        // only from neumarks\r\n        require(_token == address(NEUMARK));\r\n\r\n        // this will check if allowance was made and if _amount is enough to\r\n        //  unlock, reverts on any error condition\r\n        unlockInvestor(from);\r\n\r\n        // we assume external call so return value will be lost to clients\r\n        // that's why we throw above\r\n        return true;\r\n    }\r\n\r\n    /// allows to anyone to release all funds without burning Neumarks and any\r\n    /// other penalties\r\n    function controllerFailed()\r\n        public\r\n        onlyState(LockState.AcceptingLocks)\r\n        onlyController()\r\n    {\r\n        changeState(LockState.ReleaseAll);\r\n    }\r\n\r\n    /// allows anyone to use escape hatch\r\n    function controllerSucceeded()\r\n        public\r\n        onlyState(LockState.AcceptingLocks)\r\n        onlyController()\r\n    {\r\n        changeState(LockState.AcceptingUnlocks);\r\n    }\r\n\r\n    function setController(address controller)\r\n        public\r\n        only(ROLE_LOCKED_ACCOUNT_ADMIN)\r\n        onlyState(LockState.Uncontrolled)\r\n    {\r\n        _controller = controller;\r\n        changeState(LockState.AcceptingLocks);\r\n    }\r\n\r\n    /// sets address to which tokens from unlock penalty are sent\r\n    /// both simple addresses and contracts are allowed\r\n    /// contract needs to implement ApproveAndCallCallback interface\r\n    function setPenaltyDisbursal(address penaltyDisbursalAddress)\r\n        public\r\n        only(ROLE_LOCKED_ACCOUNT_ADMIN)\r\n    {\r\n        require(penaltyDisbursalAddress != address(0));\r\n\r\n        // can be changed at any moment by admin\r\n        _penaltyDisbursalAddress = penaltyDisbursalAddress;\r\n    }\r\n\r\n    function assetToken()\r\n        public\r\n        constant\r\n        returns (IERC677Token)\r\n    {\r\n        return ASSET_TOKEN;\r\n    }\r\n\r\n    function neumark()\r\n        public\r\n        constant\r\n        returns (Neumark)\r\n    {\r\n        return NEUMARK;\r\n    }\r\n\r\n    function lockPeriod()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return LOCK_PERIOD;\r\n    }\r\n\r\n    function penaltyFraction()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return PENALTY_FRACTION;\r\n    }\r\n\r\n    function balanceOf(address investor)\r\n        public\r\n        constant\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        Account storage account = _accounts[investor];\r\n        return (account.balance, account.neumarksDue, account.unlockDate);\r\n    }\r\n\r\n    function controller()\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return _controller;\r\n    }\r\n\r\n    function lockState()\r\n        public\r\n        constant\r\n        returns (LockState)\r\n    {\r\n        return _lockState;\r\n    }\r\n\r\n    function totalLockedAmount()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalLockedAmount;\r\n    }\r\n\r\n    function totalInvestors()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return _totalInvestors;\r\n    }\r\n\r\n    function penaltyDisbursalAddress()\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return _penaltyDisbursalAddress;\r\n    }\r\n\r\n    //\r\n    // Overrides migration source\r\n    //\r\n\r\n    /// enables migration to new LockedAccount instance\r\n    /// it can be set only once to prevent setting temporary migrations that let\r\n    /// just one investor out\r\n    /// may be set in AcceptingLocks state (in unlikely event that controller\r\n    /// fails we let investors out)\r\n    /// and AcceptingUnlocks - which is normal operational mode\r\n    function enableMigration(IMigrationTarget migration)\r\n        public\r\n        onlyStates(LockState.AcceptingLocks, LockState.AcceptingUnlocks)\r\n    {\r\n        // will enforce other access controls\r\n        MigrationSource.enableMigration(migration);\r\n    }\r\n\r\n    /// migrates single investor\r\n    function migrate()\r\n        public\r\n        onlyMigrationEnabled()\r\n    {\r\n        // migrates\r\n        Account memory account = _accounts[msg.sender];\r\n\r\n        // return on non existing accounts silently\r\n        if (account.balance == 0) {\r\n            return;\r\n        }\r\n\r\n        // this will clear investor storage\r\n        removeInvestor(msg.sender, account.balance);\r\n\r\n        // let migration target to own asset balance that belongs to investor\r\n        assert(ASSET_TOKEN.approve(address(_migration), account.balance));\r\n        LockedAccountMigration(_migration).migrateInvestor(\r\n            msg.sender,\r\n            account.balance,\r\n            account.neumarksDue,\r\n            account.unlockDate\r\n        );\r\n        LogInvestorMigrated(msg.sender, account.balance, account.neumarksDue, account.unlockDate);\r\n    }\r\n\r\n    //\r\n    // Overrides Reclaimable\r\n    //\r\n\r\n    /// @notice allows LockedAccount to reclaim tokens wrongly sent to its address\r\n    /// @dev as LockedAccount by design has balance of assetToken (in the name of investors)\r\n    ///     such reclamation is not allowed\r\n    function reclaim(IBasicToken token)\r\n        public\r\n    {\r\n        // forbid reclaiming locked tokens\r\n        require(token != ASSET_TOKEN);\r\n        Reclaimable.reclaim(token);\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    function addBalance(uint256 balance, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _totalLockedAmount = add(_totalLockedAmount, amount);\r\n        uint256 newBalance = balance + amount;\r\n        return newBalance;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Private functions\r\n    ////////////////////////\r\n\r\n    function subBalance(uint256 balance, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        _totalLockedAmount -= amount;\r\n        return balance - amount;\r\n    }\r\n\r\n    function removeInvestor(address investor, uint256 balance)\r\n        private\r\n    {\r\n        subBalance(balance, balance);\r\n        _totalInvestors -= 1;\r\n        delete _accounts[investor];\r\n    }\r\n\r\n    function changeState(LockState newState)\r\n        private\r\n    {\r\n        assert(newState != _lockState);\r\n        LogLockStateTransition(_lockState, newState);\r\n        _lockState = newState;\r\n    }\r\n\r\n    /// @notice unlocks 'investor' tokens by making them withdrawable from assetToken\r\n    /// @dev expects number of neumarks that is due on investor's account to be approved for LockedAccount for transfer\r\n    /// @dev there are 3 unlock modes depending on contract and investor state\r\n    ///     in 'AcceptingUnlocks' state Neumarks due will be burned and funds transferred to investors address in assetToken,\r\n    ///         before unlockDate, penalty is deduced and distributed\r\n    ///     in 'ReleaseAll' neumarks are not burned and unlockDate is not observed, funds are unlocked unconditionally\r\n    function unlockInvestor(address investor)\r\n        private\r\n    {\r\n        // use memory storage to obtain copy and be able to erase storage\r\n        Account memory accountInMem = _accounts[investor];\r\n\r\n        // silently return on non-existing accounts\r\n        if (accountInMem.balance == 0) {\r\n            return;\r\n        }\r\n        // remove investor account before external calls\r\n        removeInvestor(investor, accountInMem.balance);\r\n\r\n        // Neumark burning and penalty processing only in AcceptingUnlocks state\r\n        if (_lockState == LockState.AcceptingUnlocks) {\r\n            // transfer Neumarks to be burned to itself via allowance mechanism\r\n            //  not enough allowance results in revert which is acceptable state so 'require' is used\r\n            require(NEUMARK.transferFrom(investor, address(this), accountInMem.neumarksDue));\r\n\r\n            // burn neumarks corresponding to unspent funds\r\n            NEUMARK.burn(accountInMem.neumarksDue);\r\n\r\n            // take the penalty if before unlockDate\r\n            if (currentTime() < accountInMem.unlockDate) {\r\n                require(_penaltyDisbursalAddress != address(0));\r\n                uint256 penalty = decimalFraction(accountInMem.balance, PENALTY_FRACTION);\r\n\r\n                // distribute penalty\r\n                if (isContract(_penaltyDisbursalAddress)) {\r\n                    require(\r\n                        ASSET_TOKEN.approveAndCall(_penaltyDisbursalAddress,penalty, \"\")\r\n                    );\r\n                } else {\r\n                    // transfer to simple address\r\n                    assert(ASSET_TOKEN.transfer(_penaltyDisbursalAddress, penalty));\r\n                }\r\n                LogPenaltyDisbursed(_penaltyDisbursalAddress, penalty, ASSET_TOKEN, investor);\r\n                accountInMem.balance -= penalty;\r\n            }\r\n        }\r\n        if (_lockState == LockState.ReleaseAll) {\r\n            accountInMem.neumarksDue = 0;\r\n        }\r\n        // transfer amount back to investor - now it can withdraw\r\n        assert(ASSET_TOKEN.transfer(investor, accountInMem.balance));\r\n        LogFundsUnlocked(investor, accountInMem.balance, accountInMem.neumarksDue);\r\n    }\r\n}\r\n\r\n/// @title state machine for Commitment contract\r\n/// @notice implements following state progression Before --> Whitelist --> Public --> Finished\r\n/// @dev state switching via 'transitionTo' function\r\n/// @dev inherited contract must implement mAfterTransition which will be called just after state transition happened\r\ncontract StateMachine {\r\n\r\n    ////////////////////////\r\n    // Types\r\n    ////////////////////////\r\n\r\n    enum State {\r\n        Before,\r\n        Whitelist,\r\n        Public,\r\n        Finished\r\n    }\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // current state\r\n    State private _state = State.Before;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    event LogStateTransition(\r\n        State oldState,\r\n        State newState\r\n    );\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    modifier onlyState(State state) {\r\n        require(_state == state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStates(State state0, State state1) {\r\n        require(_state == state0 || _state == state1);\r\n        _;\r\n    }\r\n\r\n    /// @dev Multiple states can be handled by adding more modifiers.\r\n    /* modifier notInState(State state) {\r\n        require(_state != state);\r\n        _;\r\n    }*/\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function StateMachine() internal {\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    function state()\r\n        public\r\n        constant\r\n        returns (State)\r\n    {\r\n        return _state;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // @dev Transitioning to the same state is silently ignored, no log events\r\n    //  or handlers are called.\r\n    function transitionTo(State newState)\r\n        internal\r\n    {\r\n        State oldState = _state;\r\n        require(validTransition(oldState, newState));\r\n\r\n        _state = newState;\r\n        LogStateTransition(oldState, newState);\r\n\r\n        // should not change state and it is required here.\r\n        mAfterTransition(oldState, newState);\r\n        require(_state == newState);\r\n    }\r\n\r\n    function validTransition(State oldState, State newState)\r\n        private\r\n        constant\r\n        returns (bool valid)\r\n    {\r\n        return (\r\n            oldState == State.Before && newState == State.Whitelist) || (\r\n            oldState == State.Whitelist && newState == State.Public) || (\r\n            oldState == State.Public && newState == State.Finished\r\n        );\r\n    }\r\n\r\n    /// @notice gets called after every state transition.\r\n    /// @dev may not change state, transitionTo will revert on that condition\r\n    function mAfterTransition(State oldState, State newState)\r\n        internal;\r\n}\r\n\r\n/// @title time induced state machine\r\n/// @notice ------ time ----->\r\n///\r\n///  +--------+-----------+--------+------------\r\n///  | Before | Whitelist | Public | Finished …\r\n///  +--------+-----------+--------+------------\r\n/// @dev intended usage via 'withTimedTransitions' modifier which makes sure that state machine transitions into\r\n///     correct state before executing function body. note that this is contract state changing modifier so use with care\r\n/// @dev state change request is publicly accessible via 'handleTimedTransitions'\r\n/// @dev time is based on block.timestamp\r\ncontract TimedStateMachine is StateMachine {\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // duration of Whitelist state\r\n    int256 private constant WHITELIST_DURATION = 5 days;\r\n\r\n    // duration of Public state\r\n    int256 private constant PUBLIC_DURATION = 30 days;\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // timestamp at which Whitelist phase of Commitment starts\r\n    // @dev set in TimedStateMachine constructor, it is an exclusive reference point\r\n    //      to all time induced state changes in this contract\r\n    int256 internal WHITELIST_START;\r\n\r\n    ////////////////////////\r\n    // Modifiers\r\n    ////////////////////////\r\n\r\n    // @dev This modifier needs to be applied to all external non-constant\r\n    //     functions.\r\n    // @dev This modifier goes _before_ other state modifiers like `onlyState`.\r\n    modifier withTimedTransitions() {\r\n        handleTimedTransitions();\r\n        _;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    function TimedStateMachine(int256 whitelistStart)\r\n        internal\r\n    {\r\n        WHITELIST_START = whitelistStart;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    // @notice This function is public so that it can be called independently.\r\n    function handleTimedTransitions()\r\n        public\r\n    {\r\n        int256 t = int256(block.timestamp);\r\n\r\n        // Time induced state transitions.\r\n        // @dev Don't use `else if` and keep sorted by time and call `state()`\r\n        //     or else multiple transitions won't cascade properly.\r\n        if (state() == State.Before && t >= startOf(State.Whitelist)) {\r\n            transitionTo(State.Whitelist);\r\n        }\r\n        if (state() == State.Whitelist && t >= startOf(State.Public)) {\r\n            transitionTo(State.Public);\r\n        }\r\n        if (state() == State.Public && t >= startOf(State.Finished)) {\r\n            transitionTo(State.Finished);\r\n        }\r\n    }\r\n\r\n    function startOf(State state)\r\n        public\r\n        constant\r\n        returns (int256)\r\n    {\r\n        if (state == State.Before) {\r\n            return 0;\r\n        }\r\n        if (state == State.Whitelist) {\r\n            return WHITELIST_START;\r\n        }\r\n        if (state == State.Public) {\r\n            return WHITELIST_START + WHITELIST_DURATION;\r\n        }\r\n        if (state == State.Finished) {\r\n            return WHITELIST_START + WHITELIST_DURATION + PUBLIC_DURATION;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title processes capital commitments into Neufund ecosystem\r\ncontract Commitment is\r\n    AccessControlled,\r\n    Agreement,\r\n    TimedStateMachine,\r\n    Reclaimable,\r\n    Math\r\n{\r\n    ////////////////////////\r\n    // Types\r\n    ////////////////////////\r\n\r\n    // The two tokens accepted in a pre-allocated ticket.\r\n    enum Token {\r\n        None,\r\n        Ether,\r\n        Euro\r\n    }\r\n\r\n    // Pre-allocated tickets with a pre-allocated neumark reward.\r\n    struct WhitelistTicket {\r\n\r\n        // The currency the investor wants and is allowed to committed.\r\n        Token token;\r\n\r\n        // The amount the investor committed. The investor can invest more or\r\n        // less than this amount. In units of least precision of the token.\r\n        uint256 amountEurUlps;\r\n\r\n        // The amount of Neumark reward for this commitment (computed by\r\n        // contract). Investor can still invest more, but that would be at\r\n        // spot price.\r\n        uint256 rewardNmk;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Constants\r\n    ////////////////////////\r\n\r\n    // share of Neumark reward platform operator gets\r\n    // actually this is a divisor that splits Neumark reward in two parts\r\n    // the results of division belongs to platform operator, the remaining reward part belongs to investor\r\n    uint256 private constant PLATFORM_NEUMARK_SHARE = 2; // 50:50 division\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // wallet that keeps Platform Operator share of neumarks\r\n    address private PLATFORM_WALLET;\r\n\r\n    Neumark private NEUMARK;\r\n\r\n    EtherToken private ETHER_TOKEN;\r\n\r\n    EuroToken private EURO_TOKEN;\r\n\r\n    LockedAccount private ETHER_LOCK;\r\n\r\n    LockedAccount private EURO_LOCK;\r\n\r\n    // maximum amount of EuroToken that can be committed to generate Neumark reward\r\n    // indirectly this is cap for Neumark amount generated as it is checked against NEUMARK.totalEuroUlps()\r\n    uint256 private CAP_EUR_ULPS;\r\n\r\n    // minimum amount of EuroToken that may be committed\r\n    uint256 private MIN_TICKET_EUR_ULPS;\r\n\r\n    // fixed ETH/EUR price during the commitment, used to convert ETH into EUR, see convertToEur\r\n    uint256 private ETH_EUR_FRACTION;\r\n\r\n    ////////////////////////\r\n    // Mutable state\r\n    ////////////////////////\r\n\r\n    // Mapping of investor to pre-allocated tickets.\r\n    mapping (address => WhitelistTicket) private _whitelist;\r\n\r\n    // List of pre-allocated ticket investors.\r\n    // NOTE: The order of of the investors matters when computing the reward.\r\n    address[] private _whitelistInvestors;\r\n\r\n    // amount of Neumarks reserved for Ether whitelist investors\r\n    uint256 private _whitelistEtherNmk = 0;\r\n\r\n    // amount of Neumarks reserved for Euro whitelist investors\r\n    uint256 private _whitelistEuroNmk = 0;\r\n\r\n    ////////////////////////\r\n    // Events\r\n    ////////////////////////\r\n\r\n    /// on every commitment transaction\r\n    /// `investor` committed `amount` in `paymentToken` currency which was\r\n    /// converted to `eurEquivalent` that generates `grantedAmount` of\r\n    /// `ofToken`.\r\n    event LogFundsCommitted(\r\n        address indexed investor,\r\n        address indexed paymentToken,\r\n        uint256 amount,\r\n        uint256 eurEquivalent,\r\n        uint256 grantedAmount,\r\n        address ofToken\r\n    );\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    /// @param accessPolicy access policy instance controlling access to admin public functions\r\n    /// @param forkArbiter indicates supported fork\r\n    /// @param startDate timestamp of Whitelist state beginning, see TimedStateMachine constructor\r\n    /// @param platformWallet address of wallet storing platform operator's Neumarks\r\n    /// @param neumark Neumark token contract\r\n    /// @param etherToken ether-encapsulating token contract\r\n    /// @param euroToken euro pegged stable coin\r\n    /// @param etherLock manages locking mechanism for ether investors\r\n    /// @param euroLock manages locking mechanism for euro token investors\r\n    /// @param capEurUlps maxium amount of euro tokens committed\r\n    /// @param minTicketEurUlps minimum ticket size\r\n    /// @param ethEurFraction Ether to Euro rate, fixed during commitment\r\n    function Commitment(\r\n        IAccessPolicy accessPolicy,\r\n        IEthereumForkArbiter forkArbiter,\r\n        int256 startDate,\r\n        address platformWallet,\r\n        Neumark neumark,\r\n        EtherToken etherToken,\r\n        EuroToken euroToken,\r\n        LockedAccount etherLock,\r\n        LockedAccount euroLock,\r\n        uint256 capEurUlps,\r\n        uint256 minTicketEurUlps,\r\n        uint256 ethEurFraction\r\n    )\r\n        AccessControlled(accessPolicy)\r\n        Agreement(accessPolicy, forkArbiter)\r\n        TimedStateMachine(startDate)\r\n        public\r\n    {\r\n        require(platformWallet != 0x0);\r\n        require(address(neumark) != 0x0);\r\n        require(address(etherToken) != 0x0);\r\n        require(address(euroToken) != 0x0);\r\n        require(address(etherLock) != 0x0);\r\n        require(etherLock.assetToken() == etherToken);\r\n        require(address(euroLock) != 0x0);\r\n        require(euroLock.assetToken() == euroToken);\r\n        // Euro is represented internally with 18 decimals\r\n        require(capEurUlps >= 10**18*10**6); // 1 M€\r\n        require(capEurUlps <= 10**18*10**9); // 1 G€\r\n        require(minTicketEurUlps >= 10**18*10**2); // 100 €\r\n        require(minTicketEurUlps <= 10**18*10**5); // 100 k€\r\n        require(ethEurFraction >= 10**18*10**2); // 100 € / ETH\r\n        require(ethEurFraction <= 10**18*10**4); // 10 k€ / ETH\r\n        PLATFORM_WALLET = platformWallet;\r\n        NEUMARK = neumark;\r\n        ETHER_TOKEN = etherToken;\r\n        EURO_TOKEN = euroToken;\r\n        ETHER_LOCK = etherLock;\r\n        EURO_LOCK = euroLock;\r\n        CAP_EUR_ULPS = capEurUlps;\r\n        MIN_TICKET_EUR_ULPS = minTicketEurUlps;\r\n        ETH_EUR_FRACTION = ethEurFraction;\r\n    }\r\n\r\n    ////////////////////////\r\n    // External functions\r\n    ////////////////////////\r\n\r\n    function addWhitelisted(\r\n        address[] investors,\r\n        Token[] tokens,\r\n        uint256[] amounts\r\n    )\r\n        external\r\n        withTimedTransitions()\r\n        onlyState(State.Before)\r\n        only(ROLE_WHITELIST_ADMIN)\r\n    {\r\n        require(investors.length == tokens.length);\r\n        require(investors.length == amounts.length);\r\n\r\n        for (uint256 i = 0; i < investors.length; ++i) {\r\n            addWhitelistInvestorPrivate(investors[i], tokens[i], amounts[i]);\r\n        }\r\n\r\n        // We don't go over the cap\r\n        require(NEUMARK.totalEuroUlps() <= CAP_EUR_ULPS);\r\n    }\r\n\r\n    /// @notice used by WHITELIST_ADMIN to kill commitment process before it starts\r\n    /// @dev by selfdestruct we make all LockContracts controlled by this contract dysfunctional\r\n    function abort()\r\n        external\r\n        withTimedTransitions()\r\n        onlyState(State.Before)\r\n        only(ROLE_WHITELIST_ADMIN)\r\n    {\r\n        // Return all Neumarks that may have been reserved.\r\n        NEUMARK.burn(NEUMARK.balanceOf(this));\r\n\r\n        // At this point we can kill the contract, it can not have aquired any\r\n        // other value.\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function commit()\r\n        external\r\n        payable\r\n        withTimedTransitions()\r\n        onlyStates(State.Whitelist, State.Public)\r\n        acceptAgreement(msg.sender) // agreement accepted by act of reserving funds in this function\r\n    {\r\n        // Take with EtherToken allowance (if any)\r\n        uint256 allowedAmount = ETHER_TOKEN.allowance(msg.sender, this);\r\n        uint256 committedAmount = add(allowedAmount, msg.value);\r\n        uint256 committedEurUlps = convertToEur(committedAmount);\r\n        // check against minimum ticket before proceeding\r\n        require(committedEurUlps >= MIN_TICKET_EUR_ULPS);\r\n\r\n        if (allowedAmount > 0) {\r\n            assert(ETHER_TOKEN.transferFrom(msg.sender, this, allowedAmount));\r\n        }\r\n        if (msg.value > 0) {\r\n            ETHER_TOKEN.deposit.value(msg.value)();\r\n        }\r\n\r\n        // calculate Neumark reward and update Whitelist ticket\r\n        uint256 investorNmk = getInvestorNeumarkReward(committedEurUlps, Token.Ether);\r\n\r\n        // Lock EtherToken\r\n        ETHER_TOKEN.approve(ETHER_LOCK, committedAmount);\r\n        ETHER_LOCK.lock(msg.sender, committedAmount, investorNmk);\r\n\r\n        // Log successful commitment\r\n        LogFundsCommitted(\r\n            msg.sender,\r\n            ETHER_TOKEN,\r\n            committedAmount,\r\n            committedEurUlps,\r\n            investorNmk,\r\n            NEUMARK\r\n        );\r\n    }\r\n\r\n    function commitEuro()\r\n        external\r\n        withTimedTransitions()\r\n        onlyStates(State.Whitelist, State.Public)\r\n        acceptAgreement(msg.sender) // agreement accepted by act of reserving funds in this function\r\n    {\r\n        // receive Euro tokens\r\n        uint256 committedEurUlps = EURO_TOKEN.allowance(msg.sender, this);\r\n        // check against minimum ticket before proceeding\r\n        require(committedEurUlps >= MIN_TICKET_EUR_ULPS);\r\n\r\n        assert(EURO_TOKEN.transferFrom(msg.sender, this, committedEurUlps));\r\n\r\n        // calculate Neumark reward and update Whitelist ticket\r\n        uint256 investorNmk = getInvestorNeumarkReward(committedEurUlps, Token.Euro);\r\n\r\n        // Lock EuroToken\r\n        EURO_TOKEN.approve(EURO_LOCK, committedEurUlps);\r\n        EURO_LOCK.lock(msg.sender, committedEurUlps, investorNmk);\r\n\r\n        // Log successful commitment\r\n        LogFundsCommitted(\r\n            msg.sender,\r\n            EURO_TOKEN,\r\n            committedEurUlps,\r\n            committedEurUlps,\r\n            investorNmk,\r\n            NEUMARK\r\n        );\r\n    }\r\n\r\n    function estimateNeumarkReward(uint256 amount)\r\n        external\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        uint256 amountEurUlps = convertToEur(amount);\r\n        uint256 rewardNmk = NEUMARK.incremental(amountEurUlps);\r\n        var (, investorNmk) = calculateNeumarkDistribtion(rewardNmk);\r\n        return investorNmk;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public functions\r\n    ////////////////////////\r\n\r\n    /// converts `amount` in wei into EUR with 18 decimals required by Curve\r\n    /// Neufund public commitment uses fixed EUR rate during commitment to level playing field and\r\n    /// prevent strategic behavior around ETH/EUR volatility. equity TOs will use oracles as they need spot prices\r\n    ///\r\n    /// @notice Considering the max possible ETH_EUR_FRACTION value (10**18*10**4 == ~2**73), the max\r\n    ///       amount of ETH (not wei) that is safe to be passed as the argument\r\n    ///       is ~10**(54 - 18) (~2**123).\r\n    function convertToEur(uint256 amount)\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        require(amount < 2**123);\r\n        return decimalFraction(amount, ETH_EUR_FRACTION);\r\n    }\r\n\r\n    function platformWalletAddress()\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return PLATFORM_WALLET;\r\n    }\r\n\r\n    function neumark()\r\n        public\r\n        constant\r\n        returns (Neumark)\r\n    {\r\n        return NEUMARK;\r\n    }\r\n\r\n    function etherLock()\r\n        public\r\n        constant\r\n        returns (LockedAccount)\r\n    {\r\n        return ETHER_LOCK;\r\n    }\r\n\r\n    function euroLock()\r\n        public\r\n        constant\r\n        returns (LockedAccount)\r\n    {\r\n        return EURO_LOCK;\r\n    }\r\n\r\n    function maxCapEur()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return CAP_EUR_ULPS;\r\n    }\r\n\r\n    function minTicketEur()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return MIN_TICKET_EUR_ULPS;\r\n    }\r\n\r\n    function ethEurFraction()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return ETH_EUR_FRACTION;\r\n    }\r\n\r\n    function platformOperatorNeumarkRewardShare()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return PLATFORM_NEUMARK_SHARE;\r\n    }\r\n\r\n    // used to enumerate investors in whitelist\r\n    function whitelistInvestor(uint256 atWhitelistPosition)\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return _whitelistInvestors[atWhitelistPosition];\r\n    }\r\n\r\n    // ticket information for particular investors\r\n    function whitelistTicket(address investor)\r\n        public\r\n        constant\r\n        returns (Token token, uint256 ticketEurUlps, uint256 /*investorNmk*/)\r\n    {\r\n        WhitelistTicket storage ticket = _whitelist[investor];\r\n        //  could also use ( , investorNmk) but parser has problems in solium TODO fix solium\r\n        var (, investorNmk) = calculateNeumarkDistribtion(ticket.rewardNmk);\r\n        return (ticket.token, ticket.amountEurUlps, investorNmk);\r\n    }\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    //\r\n    // Implements StateMachine\r\n    //\r\n\r\n    function mAfterTransition(State /* oldState */, State newState)\r\n        internal\r\n    {\r\n        // nothing to do after entering Whitelist\r\n        if (newState == State.Whitelist) {\r\n            return;\r\n        }\r\n\r\n        uint256 nmkToBurn = 0;\r\n        if (newState == State.Public) {\r\n\r\n            // mark unfufilled Ether reservations for burning\r\n            nmkToBurn = _whitelistEtherNmk;\r\n            _whitelistEtherNmk = 0;\r\n        }\r\n        if (newState == State.Finished) {\r\n\r\n            // mark unfufilled Euro reservations for burning\r\n            nmkToBurn = _whitelistEuroNmk;\r\n            _whitelistEuroNmk = 0;\r\n\r\n            // enable escape hatch and end locking funds phase\r\n            ETHER_LOCK.controllerSucceeded();\r\n            EURO_LOCK.controllerSucceeded();\r\n\r\n            // enable Neumark transfers\r\n            NEUMARK.enableTransfer(true);\r\n        }\r\n        // burn Neumarks after state change to prevent theoretical re-entry\r\n        NEUMARK.burn(nmkToBurn);\r\n    }\r\n\r\n    ////////////////////////\r\n    // Private functions\r\n    ////////////////////////\r\n\r\n    function addWhitelistInvestorPrivate(\r\n        address investor,\r\n        Token token,\r\n        uint256 amount\r\n    )\r\n        private\r\n    {\r\n        // Validate\r\n        require(investor != 0x0);\r\n        require(_whitelist[investor].token == Token.None);\r\n        bool isEuro = token == Token.Euro;\r\n        bool isEther = token == Token.Ether;\r\n        require(isEuro || isEther);\r\n        // Note: amount can be zero, indicating no pre-allocated NMK,\r\n        //       but still the ability to commit before the public.\r\n        uint256 amountEurUlps = isEuro ? amount : convertToEur(amount);\r\n        require(amount == 0 || amountEurUlps >= MIN_TICKET_EUR_ULPS);\r\n\r\n        // Register the investor on the list of investors to keep them\r\n        // in order.\r\n        _whitelistInvestors.push(investor);\r\n\r\n        // Create a ticket without NEUMARK reward information and add it to\r\n        // the pre-allocated tickets.\r\n        _whitelist[investor] = WhitelistTicket({\r\n            token: token,\r\n            amountEurUlps: amountEurUlps,\r\n            rewardNmk: 0\r\n        });\r\n\r\n        if (amountEurUlps > 0) {\r\n            // Allocate Neumarks (will be issued to `this`).\r\n            // Because `_whitelist[investor].token == Token.None` does not not hold\r\n            // any more, this function is protected against reentrancy attack\r\n            // conducted from NEUMARK.issueForEuro().\r\n            uint256 rewardNmk = NEUMARK.issueForEuro(amountEurUlps);\r\n            // Record the number of Neumarks for investor.\r\n            _whitelist[investor].rewardNmk = rewardNmk;\r\n\r\n            // Add to totals\r\n            if (isEuro) {\r\n                _whitelistEuroNmk = add(_whitelistEuroNmk, rewardNmk);\r\n            } else {\r\n                _whitelistEtherNmk = add(_whitelistEtherNmk, rewardNmk);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Token.None should not be passed to 'tokenType' parameter\r\n    function getInvestorNeumarkReward(uint256 committedEurUlps, Token tokenType)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // We don't go over the cap\r\n        require(add(NEUMARK.totalEuroUlps(), committedEurUlps) <= CAP_EUR_ULPS);\r\n\r\n        // Compute committed funds\r\n        uint256 remainingEurUlps = committedEurUlps;\r\n        uint256 rewardNmk = 0;\r\n        uint256 ticketNmk = 0;\r\n\r\n        // Whitelist part\r\n        WhitelistTicket storage ticket = _whitelist[msg.sender];\r\n\r\n        bool whitelisted = ticket.token == tokenType;\r\n        require(whitelisted || state() == State.Public);\r\n\r\n        bool whitelistActiveForToken = tokenType == Token.Euro || state() == State.Whitelist;\r\n        if (whitelisted && whitelistActiveForToken && ticket.amountEurUlps > 0 ) {\r\n            uint256 ticketEurUlps = min(remainingEurUlps, ticket.amountEurUlps);\r\n            ticketNmk = proportion(\r\n                ticket.rewardNmk,\r\n                ticketEurUlps,\r\n                ticket.amountEurUlps\r\n            );\r\n            // update investor ticket\r\n            ticket.amountEurUlps = sub(ticket.amountEurUlps, ticketEurUlps);\r\n            ticket.rewardNmk = sub(ticket.rewardNmk, ticketNmk);\r\n            // mark ticketEurUlps as spent\r\n            remainingEurUlps = sub(remainingEurUlps, ticketEurUlps);\r\n            // set neumark reward\r\n            rewardNmk = ticketNmk;\r\n            // decrease reserved Neumark pool accordingly\r\n            if (tokenType == Token.Euro) {\r\n                _whitelistEuroNmk = sub(_whitelistEuroNmk, ticketNmk);\r\n            } else {\r\n                _whitelistEtherNmk = sub(_whitelistEtherNmk, ticketNmk);\r\n            }\r\n        }\r\n\r\n        // issue Neumarks against curve for amount left after pre-defined ticket was realized\r\n        if (remainingEurUlps > 0) {\r\n            rewardNmk = add(rewardNmk, NEUMARK.issueForEuro(remainingEurUlps));\r\n            remainingEurUlps = 0; // not used later but we should keep variable semantics\r\n        }\r\n\r\n        // Split the Neumarks\r\n        var (platformNmk, investorNmk) = calculateNeumarkDistribtion(rewardNmk);\r\n\r\n        // Issue Neumarks and distribute\r\n        NEUMARK.distribute(msg.sender, investorNmk);\r\n        NEUMARK.distribute(PLATFORM_WALLET, platformNmk);\r\n\r\n        return investorNmk;\r\n    }\r\n\r\n    // calculates investor's and platform operator's neumarks from total reward\r\n    function calculateNeumarkDistribtion(uint256 rewardNmk)\r\n        private\r\n        returns (uint256 platformNmk, uint256 investorNmk)\r\n    {\r\n        // round down - platform may get 1 wei less than investor\r\n        platformNmk = rewardNmk / PLATFORM_NEUMARK_SHARE;\r\n        // rewardNmk > platformNmk always\r\n        return (platformNmk, rewardNmk - platformNmk);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"whitelistTicket\",\"outputs\":[{\"name\":\"token\",\"type\":\"uint8\"},{\"name\":\"ticketEurUlps\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTicketEur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformOperatorNeumarkRewardShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"handleTimedTransitions\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"atWhitelistPosition\",\"type\":\"uint256\"}],\"name\":\"whitelistInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPolicy\",\"type\":\"address\"},{\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"setAccessPolicy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"estimateNeumarkReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethEurFraction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signatory\",\"type\":\"address\"}],\"name\":\"agreementSignedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToEur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"euroLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amendmentIndex\",\"type\":\"uint256\"}],\"name\":\"pastAgreement\",\"outputs\":[{\"name\":\"platformOperatorRepresentative\",\"type\":\"address\"},{\"name\":\"signedBlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"agreementUri\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint8[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"startOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCapEur\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAgreement\",\"outputs\":[{\"name\":\"platformOperatorRepresentative\",\"type\":\"address\"},{\"name\":\"signedBlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"agreementUri\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitEuro\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"neumark\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethereumForkArbiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agreementUri\",\"type\":\"string\"}],\"name\":\"amendAgreement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"accessPolicy\",\"type\":\"address\"},{\"name\":\"forkArbiter\",\"type\":\"address\"},{\"name\":\"startDate\",\"type\":\"int256\"},{\"name\":\"platformWallet\",\"type\":\"address\"},{\"name\":\"neumark\",\"type\":\"address\"},{\"name\":\"etherToken\",\"type\":\"address\"},{\"name\":\"euroToken\",\"type\":\"address\"},{\"name\":\"etherLock\",\"type\":\"address\"},{\"name\":\"euroLock\",\"type\":\"address\"},{\"name\":\"capEurUlps\",\"type\":\"uint256\"},{\"name\":\"minTicketEurUlps\",\"type\":\"uint256\"},{\"name\":\"ethEurFraction\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eurEquivalent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ofToken\",\"type\":\"address\"}],\"name\":\"LogFundsCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accepter\",\"type\":\"address\"}],\"name\":\"LogAgreementAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"platformOperatorRepresentative\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"agreementUri\",\"type\":\"string\"}],\"name\":\"LogAgreementAmended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldPolicy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPolicy\",\"type\":\"address\"}],\"name\":\"LogAccessPolicyChanged\",\"type\":\"event\"}]","ContractName":"Commitment","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ae38c27e646959735ec70d77ed4ecc03a3eff4900000000000000000000000004c688949578b4fd0cb8f8993a0ec608659e05cf1000000000000000000000000000000000000000000000000000000005a0829b0000000000000000000000000a826813d0eb5d629e959c02b8f7a3d0f53066ce4000000000000000000000000a823e6722006afe99e91c30ff5295052fe6b8e32000000000000000000000000b59a226a2b8a2f2b0512baa35cc348b6b213b6710000000000000000000000002682762d9830ace22218c7bd51d19e5757ec3f03000000000000000000000000b1e4675f0dbe360ba90447a7e58c62c762ad62d40000000000000000000000005cb5d4a198a253e21212c72c27b51558d19e3a57000000000000000000000000000000000000000000a56fa5b99019a5c800000000000000000000000000000000000000000000000000000fb88ef7839f48000000000000000000000000000000000000000000000000000fb88ef7839f480000","Library":"","SwarmSource":"bzzr://d8f8bdc3551e75848b45618527ebdc0e56dfcc13fe8788293d3b70d0ab088a01"}]}