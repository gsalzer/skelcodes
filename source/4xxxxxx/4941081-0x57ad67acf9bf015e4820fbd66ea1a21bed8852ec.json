{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n *  The Lympo Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\r\n *  All tokens not being sold during the crowdsale but the reserved token\r\n *  for tournaments future financing are burned.\r\n *  Author: Justas Kregzde\r\n */\r\n \r\npragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract LympoToken {\r\n    using SafeMath for uint;\r\n    // Public variables of the token\r\n    string constant public standard = \"ERC20\";\r\n    string constant public name = \"Lympo tokens\";\r\n    string constant public symbol = \"LYM\";\r\n    uint8 constant public decimals = 18;\r\n    uint _totalSupply = 1000000000e18; // Total supply of 1 billion Lympo Tokens\r\n    uint constant public tokensPreICO = 265000000e18; // 26.5%\r\n    uint constant public tokensICO = 385000000e18; // 38.5%\r\n    uint constant public teamReserve = 100000000e18; // 10%\r\n    uint constant public advisersReserve = 30000000e18; // 3%\r\n    uint constant public ecosystemReserve = 220000000e18; // 22%\r\n    uint constant public ecoLock23 = 146652000e18; // 2/3 of ecosystem reserve\r\n    uint constant public ecoLock13 = 73326000e18; // 1/3 of ecosystem reserve\r\n    uint constant public startTime = 1519815600; // Time after ICO, when tokens became transferable. Wednesday, 28 February 2018 11:00:00 GMT\r\n    uint public lockReleaseDate1year;\r\n    uint public lockReleaseDate2year;\r\n    address public ownerAddr;\r\n    address public ecosystemAddr;\r\n    address public advisersAddr;\r\n    bool burned;\r\n\r\n    // Array with all balances\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n    // Public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed _owner, address indexed spender, uint value);\r\n    event Burned(uint amount);\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Get the total token supply\r\n    function totalSupply() constant returns (uint totalSupply) {\r\n        totalSupply = _totalSupply;\r\n    }\r\n\r\n    // Initializes contract with initial supply tokens to the creator of the contract\r\n    function LympoToken(address _ownerAddr, address _advisersAddr, address _ecosystemAddr) {\r\n        ownerAddr = _ownerAddr;\r\n        advisersAddr = _advisersAddr;\r\n        ecosystemAddr = _ecosystemAddr;\r\n        lockReleaseDate1year = startTime + 1 years; // 2019\r\n        lockReleaseDate2year = startTime + 2 years; // 2020\r\n        balances[ownerAddr] = _totalSupply; // Give the owner all initial tokens\r\n    }\r\n\t\r\n    // Send some of your tokens to a given address\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        require(now >= startTime); // Check if the crowdsale is already over\r\n\r\n        // prevent the owner of spending his share of tokens for team within first the two year\r\n        if (msg.sender == ownerAddr && now < lockReleaseDate2year)\r\n            require(balances[msg.sender].sub(_value) >= teamReserve);\r\n\r\n        // prevent the ecosystem owner of spending 2/3 share of tokens for the first year, 1/3 for the next year\r\n        if (msg.sender == ecosystemAddr && now < lockReleaseDate1year)\r\n            require(balances[msg.sender].sub(_value) >= ecoLock23);\r\n        else if (msg.sender == ecosystemAddr && now < lockReleaseDate2year)\r\n            require(balances[msg.sender].sub(_value) >= ecoLock13);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\t\r\n    // A contract or person attempts to get the tokens of somebody else.\r\n    // This is only allowed if the token holder approved.\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        if (now < startTime)  // Check if the crowdsale is already over\r\n            require(_from == ownerAddr);\r\n\r\n        // prevent the owner of spending his share of tokens for team within the first two year\r\n        if (_from == ownerAddr && now < lockReleaseDate2year)\r\n            require(balances[_from].sub(_value) >= teamReserve);\r\n\r\n        // prevent the ecosystem owner of spending 2/3 share of tokens for the first year, 1/3 for the next year\r\n        if (_from == ecosystemAddr && now < lockReleaseDate1year)\r\n            require(balances[_from].sub(_value) >= ecoLock23);\r\n        else if (_from == ecosystemAddr && now < lockReleaseDate2year)\r\n            require(balances[_from].sub(_value) >= ecoLock13);\r\n\r\n        var _allowed = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = _allowed.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    // Approve the passed address to spend the specified amount of tokens\r\n    // on behalf of msg.sender.\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Called when ICO is closed. Burns the remaining tokens except the tokens reserved:\r\n    // Anybody may burn the tokens after ICO ended, but only once (in case the owner holds more tokens in the future).\r\n    // this ensures that the owner will not posses a majority of the tokens.\r\n    function burn() {\r\n        // If tokens have not been burned already and the crowdsale ended\r\n        if (!burned && now > startTime) {\r\n            uint totalReserve = ecosystemReserve.add(teamReserve);\r\n            totalReserve = totalReserve.add(advisersReserve);\r\n            uint difference = balances[ownerAddr].sub(totalReserve);\r\n            balances[ownerAddr] = teamReserve;\r\n            balances[advisersAddr] = advisersReserve;\r\n            balances[ecosystemAddr] = ecosystemReserve;\r\n            _totalSupply = _totalSupply.sub(difference);\r\n            burned = true;\r\n            Burned(difference);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoLock23\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockReleaseDate2year\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockReleaseDate1year\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecoLock13\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_advisersAddr\",\"type\":\"address\"},{\"name\":\"_ecosystemAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"}]","ContractName":"LympoToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c1c04f74a97a1e7eedb23d181023d48933399929000000000000000000000000ca2bef18c2e913364fc782023549a70d237097c20000000000000000000000008f1d6707ce33e0c25be46a137450f0ebeb2f2f09","Library":"","SwarmSource":"bzzr://66896b70111518949f4ecfd628993e8b75213aad436ea72fba946b36a7c2706f"}]}