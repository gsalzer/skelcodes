{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\ncontract kkTestICO91 {\r\n    \r\n    function name() constant returns (string) { return \"kkTestICO91\"; }\r\n    function symbol() constant returns (string) { return \"kTI91\"; }\r\n    function decimals() constant returns (uint8) { return 0; }\r\n\t\r\n\r\n    uint256 public INITIAL_SUPPLY;\r\n\tuint256 public totalSupply;\r\n\t\r\n\tuint256 public totalContrib;\r\n    \r\n    uint256 public rate;\r\n  \r\n    address public owner;\t\t\t\t\t\t    //init owner address\r\n\t\r\n\tuint256 public amount;\r\n\t\r\n\t\r\n\tfunction kkTestICO91() {\r\n        INITIAL_SUPPLY = 30000000;                  //Starting coin supply\r\n\t\ttotalSupply = 0;\r\n\t\t\r\n\t\ttotalContrib = 0;\r\n        \r\n        rate = 5000;                                //How many tokens per ETH given\r\n\t\t\r\n\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\r\n\t\t\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\r\n\t}\r\n\t\r\n\t\r\n\t//This function is called when Ether is sent to the contract address\r\n\t//Even if 0 ether is sent.\r\n\tfunction () payable {\r\n\t    \r\n\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\r\n\t    \r\n\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \r\n\t\t\trevert();\r\n\t\t}\r\n\t\t\r\n\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\r\n\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\r\n\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\r\n\t\ttotalContrib = (totalContrib + msg.value);\r\n\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\r\n\t\t\r\n\t\t\r\n\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\r\n\r\n\t}\t\r\n\t\r\n\t\r\n\t\r\n  \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n  mapping(address => uint256) balances;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n\r\n        uint256 fromBalance = balances[msg.sender];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n        bool overflowed = balances[_to] + _value < balances[_to];\r\n        \r\n        if (sufficientFunds && !overflowed) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            \r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\r\n\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (_value == 0) { return false; }\r\n        \r\n        uint256 fromBalance = balances[owner];\r\n\r\n        bool sufficientFunds = fromBalance >= _value;\r\n\r\n        if (sufficientFunds) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            \r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n\t\r\n    function getStats() constant returns (uint256, uint256) {\r\n        return (totalSupply, totalContrib);\r\n    }\r\n\r\n\t\r\n\t\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\t\r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContrib\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"kkTestICO91","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27610dd938ac6bbf03a6795d6d848fa246f14bcd15c2e5bcff4c5a38d2a32af4"}]}