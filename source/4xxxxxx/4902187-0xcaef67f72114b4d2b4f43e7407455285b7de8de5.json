{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT,\r\n        ERROR_OBJ_NOT_FOUND,\r\n        ERROR_OBJ_INVALID_OWNERSHIP\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n\r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n    \r\n    enum BattleResult {\r\n        CASTLE_WIN,\r\n        CASTLE_LOSE,\r\n        CASTLE_DESTROYED\r\n    }\r\n    \r\n    enum CacheClassInfoType {\r\n        CLASS_TYPE,\r\n        CLASS_STEP,\r\n        CLASS_ANCESTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ncontract EtheremonGateway is EtheremonEnum, BasicAccessControl {\r\n    // using for battle contract later\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    \r\n    // read \r\n    function isGason(uint64 _objId) constant external returns(bool);\r\n    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \r\n        uint ancestorLength, uint xfactorsLength);\r\n    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint);\r\n    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32);\r\n}\r\n\r\ncontract EtheremonGym is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    uint8 constant public STAT_COUNT = 6;\r\n    \r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    struct AttackData {\r\n        uint32 objClassId;\r\n        address trainee;\r\n        uint8 objLevel;\r\n        uint8 winCount;\r\n        uint32 winExp;\r\n        uint32 loseExp;\r\n    }\r\n    \r\n    struct HpData {\r\n        uint16 aHpAttack;\r\n        uint16 aHpAttackCritical;\r\n        uint16 bHpAttack;\r\n        uint16 bHpAttackCritical;        \r\n    }\r\n    \r\n    struct GymTrainer {\r\n        uint32 classId;\r\n        uint8[6] statBases;\r\n    }\r\n    \r\n    struct TrainingLog {\r\n        uint8[3] trainers;\r\n        uint8 trainerLevel;\r\n        uint64 objId;\r\n        uint8 objLevel;\r\n        uint8 ran;\r\n    }\r\n    \r\n    struct CacheClassInfo {\r\n        uint8[] types;\r\n        uint8[] steps;\r\n        uint32[] ancestors;\r\n    }\r\n    \r\n    mapping(uint8 => GymTrainer) public gymTrainers;\r\n    mapping(address => TrainingLog) public trainees;\r\n    mapping(uint8 => uint8) typeAdvantages;\r\n    mapping(uint32 => CacheClassInfo) cacheClasses;\r\n    mapping(uint8 => uint32) levelExps;\r\n    mapping(uint8 => uint32) levelExpGains;\r\n    uint256 public gymFee = 0.001 ether;\r\n    uint8 public maxTrainerLevel = 5;\r\n    uint8 public totalTrainer = 0;\r\n    uint8 public maxRandomRound = 4;\r\n    uint8 public typeBuffPercentage = 20;\r\n    uint8 public minHpDeducted = 10;\r\n    uint8 public expPercentage = 70;\r\n    \r\n    // contract\r\n    address public worldContract;\r\n    address public dataContract;\r\n\r\n   // modifier\r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireWorldContract {\r\n        require(worldContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    // constructor\r\n    function EtheremonGym(address _dataContract, address _worldContract) public {\r\n        dataContract = _dataContract;\r\n        worldContract = _worldContract;\r\n    }\r\n    \r\n    \r\n     // admin & moderators\r\n    function setTypeAdvantages() onlyModerators external {\r\n        typeAdvantages[1] = 14;\r\n        typeAdvantages[2] = 16;\r\n        typeAdvantages[3] = 8;\r\n        typeAdvantages[4] = 9;\r\n        typeAdvantages[5] = 2;\r\n        typeAdvantages[6] = 11;\r\n        typeAdvantages[7] = 3;\r\n        typeAdvantages[8] = 5;\r\n        typeAdvantages[9] = 15;\r\n        typeAdvantages[11] = 18;\r\n        // skipp 10\r\n        typeAdvantages[12] = 7;\r\n        typeAdvantages[13] = 6;\r\n        typeAdvantages[14] = 17;\r\n        typeAdvantages[15] = 13;\r\n        typeAdvantages[16] = 12;\r\n        typeAdvantages[17] = 1;\r\n        typeAdvantages[18] = 4;\r\n    }\r\n    \r\n    function setTypeAdvantage(uint8 _type1, uint8 _type2) onlyModerators external {\r\n        typeAdvantages[_type1] = _type2;\r\n    }\r\n    \r\n    function setCacheClassInfo(uint32 _classId) onlyModerators requireDataContract requireWorldContract public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n         EtheremonGateway gateway = EtheremonGateway(worldContract);\r\n        uint i = 0;\r\n        CacheClassInfo storage classInfo = cacheClasses[_classId];\r\n\r\n        // add type\r\n        i = data.getSizeArrayType(ArrayType.CLASS_TYPE, uint64(_classId));\r\n        uint8[] memory aTypes = new uint8[](i);\r\n        for(; i > 0 ; i--) {\r\n            aTypes[i-1] = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(_classId), i-1);\r\n        }\r\n        classInfo.types = aTypes;\r\n\r\n        // add steps\r\n        i = data.getSizeArrayType(ArrayType.STAT_STEP, uint64(_classId));\r\n        uint8[] memory steps = new uint8[](i);\r\n        for(; i > 0 ; i--) {\r\n            steps[i-1] = data.getElementInArrayType(ArrayType.STAT_STEP, uint64(_classId), i-1);\r\n        }\r\n        classInfo.steps = steps;\r\n        \r\n        // add ancestor\r\n        i = gateway.getClassPropertySize(_classId, PropertyType.ANCESTOR);\r\n        uint32[] memory ancestors = new uint32[](i);\r\n        for(; i > 0 ; i--) {\r\n            ancestors[i-1] = gateway.getClassPropertyValue(_classId, PropertyType.ANCESTOR, i-1);\r\n        }\r\n        classInfo.ancestors = ancestors;\r\n    }\r\n    \r\n    function fastSetCacheClassInfo(uint32 _classId1, uint32 _classId2, uint32 _classId3, uint32 _classId4) onlyModerators requireDataContract requireWorldContract external {\r\n        setCacheClassInfo(_classId1);\r\n        setCacheClassInfo(_classId2);\r\n        setCacheClassInfo(_classId3);\r\n        setCacheClassInfo(_classId4);\r\n    }\r\n    \r\n    function presetGymTrainer() onlyModerators external {\r\n        GymTrainer storage trainer1 = gymTrainers[1];\r\n        trainer1.classId = 12;\r\n        trainer1.statBases[0] = 85;\r\n        trainer1.statBases[1] = 95;\r\n        trainer1.statBases[2] = 65;\r\n        trainer1.statBases[3] = 50;\r\n        trainer1.statBases[4] = 50;\r\n        trainer1.statBases[5] = 50;\r\n        GymTrainer storage trainer2 = gymTrainers[2];\r\n        trainer2.classId = 15;\r\n        trainer2.statBases[0] = 50;\r\n        trainer2.statBases[1] = 55;\r\n        trainer2.statBases[2] = 85;\r\n        trainer2.statBases[3] = 85;\r\n        trainer2.statBases[4] = 40;\r\n        trainer2.statBases[5] = 75;\r\n        GymTrainer storage trainer3 = gymTrainers[3];\r\n        trainer3.classId = 8;\r\n        trainer3.statBases[0] = 110;\r\n        trainer3.statBases[1] = 60;\r\n        trainer3.statBases[2] = 40;\r\n        trainer3.statBases[3] = 60;\r\n        trainer3.statBases[4] = 40;\r\n        trainer3.statBases[5] = 40;\r\n        GymTrainer storage trainer4 = gymTrainers[4];\r\n        trainer4.classId = 4;\r\n        trainer4.statBases[0] = 54;\r\n        trainer4.statBases[1] = 69;\r\n        trainer4.statBases[2] = 58;\r\n        trainer4.statBases[3] = 75;\r\n        trainer4.statBases[4] = 75;\r\n        trainer4.statBases[5] = 70;\r\n        GymTrainer storage trainer5 = gymTrainers[5];\r\n        trainer5.classId = 6;\r\n        trainer5.statBases[0] = 50;\r\n        trainer5.statBases[1] = 50;\r\n        trainer5.statBases[2] = 50;\r\n        trainer5.statBases[3] = 105;\r\n        trainer5.statBases[4] = 55;\r\n        trainer5.statBases[5] = 95;\r\n        GymTrainer storage trainer6 = gymTrainers[6];\r\n        trainer6.classId = 13;\r\n        trainer6.statBases[0] = 55;\r\n        trainer6.statBases[1] = 90;\r\n        trainer6.statBases[2] = 95;\r\n        trainer6.statBases[3] = 45;\r\n        trainer6.statBases[4] = 35;\r\n        trainer6.statBases[5] = 35;\r\n        GymTrainer storage trainer7 = gymTrainers[7];\r\n        trainer7.classId = 7;\r\n        trainer7.statBases[0] = 85;\r\n        trainer7.statBases[1] = 60;\r\n        trainer7.statBases[2] = 73;\r\n        trainer7.statBases[3] = 75;\r\n        trainer7.statBases[4] = 80;\r\n        trainer7.statBases[5] = 50;\r\n        GymTrainer storage trainer8 = gymTrainers[8];\r\n        trainer8.classId = 24;\r\n        trainer8.statBases[0] = 140;\r\n        trainer8.statBases[1] = 135;\r\n        trainer8.statBases[2] = 70;\r\n        trainer8.statBases[3] = 77;\r\n        trainer8.statBases[4] = 90;\r\n        trainer8.statBases[5] = 50;\r\n        GymTrainer storage trainer9 = gymTrainers[9];\r\n        trainer9.classId = 16;\r\n        trainer9.statBases[0] = 70;\r\n        trainer9.statBases[1] = 105;\r\n        trainer9.statBases[2] = 80;\r\n        trainer9.statBases[3] = 60;\r\n        trainer9.statBases[4] = 80;\r\n        trainer9.statBases[5] = 90;\r\n        totalTrainer = 9;\r\n    }\r\n    \r\n    function setGymTrainer(uint8 _trainerId, uint32 _classId, uint8 _s0, uint8 _s1, uint8 _s2, uint8 _s3, uint8 _s4, uint8 _s5) onlyModerators external {\r\n        GymTrainer storage trainer = gymTrainers[_trainerId];\r\n        if (trainer.classId == 0)\r\n            totalTrainer += 1;\r\n        trainer.classId = _classId;\r\n        trainer.statBases[0] = _s0;\r\n        trainer.statBases[1] = _s1;\r\n        trainer.statBases[2] = _s2;\r\n        trainer.statBases[3] = _s3;\r\n        trainer.statBases[4] = _s4;\r\n        trainer.statBases[5] = _s5;\r\n    }\r\n    \r\n    function setContract(address _dataContract, address _worldContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n        worldContract = _worldContract;\r\n    }\r\n    \r\n    function setConfig(uint256 _gymFee, uint8 _maxTrainerLevel, uint8 _maxRandomRound, uint8 _typeBuffPercentage, \r\n        uint8 _minHpDeducted, uint8 _expPercentage) onlyModerators external {\r\n        gymFee = _gymFee;\r\n        maxTrainerLevel = _maxTrainerLevel;\r\n        maxRandomRound = _maxRandomRound;\r\n        typeBuffPercentage = _typeBuffPercentage;\r\n        minHpDeducted = _minHpDeducted;\r\n        expPercentage = _expPercentage;\r\n    }\r\n    \r\n    function genLevelExp() onlyModerators external {\r\n        uint8 level = 1;\r\n        uint32 requirement = 100;\r\n        uint32 sum = requirement;\r\n        while(level <= 100) {\r\n            levelExps[level] = sum;\r\n            level += 1;\r\n            requirement = (requirement * 11) / 10 + 5;\r\n            sum += requirement;\r\n        }\r\n    }\r\n    \r\n    function genLevelExpGain() onlyModerators external {\r\n        levelExpGains[1] = 31;\r\n        levelExpGains[2] = 33;\r\n        levelExpGains[3] = 34;\r\n        levelExpGains[4] = 36;\r\n        levelExpGains[5] = 38;\r\n        levelExpGains[6] = 40;\r\n        levelExpGains[7] = 42;\r\n        levelExpGains[8] = 44;\r\n        levelExpGains[9] = 46;\r\n        levelExpGains[10] = 48;\r\n    }\r\n    \r\n    function setLevelExpGain(uint8 _level, uint32 _exp) onlyModerators external {\r\n        levelExpGains[_level] = _exp;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators external {\r\n        if (_amount > this.balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    // public\r\n    function getCacheClassSize(uint32 _classId) constant public returns(uint, uint, uint) {\r\n        CacheClassInfo storage classInfo = cacheClasses[_classId];\r\n        return (classInfo.types.length, classInfo.steps.length, classInfo.ancestors.length);\r\n    }\r\n    \r\n    function getTrainerInfo(uint8 _trainerId) constant external returns(uint32, uint8, uint8, uint8, uint8, uint8, uint8) {\r\n        GymTrainer memory trainer = gymTrainers[_trainerId];\r\n        return (trainer.classId, trainer.statBases[0], trainer.statBases[1], trainer.statBases[2], trainer.statBases[3],\r\n            trainer.statBases[4], trainer.statBases[5]);\r\n    }\r\n    \r\n    function getRandom(uint8 maxRan, uint8 index) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1));\r\n        for (uint8 i = 0; i < index && i < 6; i ++) {\r\n            genNum /= 256;\r\n        }\r\n        return uint8(genNum % maxRan);\r\n    }\r\n    \r\n    function getLevel(uint32 exp) view public returns (uint8) {\r\n        uint8 minIndex = 1;\r\n        uint8 maxIndex = 100;\r\n        uint8 currentIndex;\r\n     \r\n        while (minIndex < maxIndex) {\r\n            currentIndex = (minIndex + maxIndex) / 2;\r\n            if (exp < levelExps[currentIndex])\r\n                maxIndex = currentIndex;\r\n            else\r\n                minIndex = currentIndex + 1;\r\n        }\r\n        return minIndex;\r\n    }\r\n    \r\n    function getGainExp(uint8 xLevel, uint8 yLevel) constant public returns(uint32 winExp, uint32 loseExp){\r\n        winExp = levelExpGains[yLevel] * expPercentage / 100;\r\n        if (xLevel > yLevel) {\r\n            if (xLevel > yLevel + 10) {\r\n                winExp = 5;\r\n            } else {\r\n                winExp /= uint32(3) ** (xLevel - yLevel) / uint32(2) ** (xLevel - yLevel);\r\n                if (winExp < 5)\r\n                    winExp = 5;\r\n            }\r\n        }\r\n        loseExp = winExp / 3;\r\n    }\r\n    \r\n    function safeDeduct(uint16 a, uint16 b) pure private returns(uint16){\r\n        if (a > b) {\r\n            return a - b;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getTypeSupport(uint32 _aClassId, uint32 _bClassId) constant private returns (bool aHasAdvantage, bool bHasAdvantage) {\r\n        // check types \r\n        for (uint i = 0; i < cacheClasses[_aClassId].types.length; i++) {\r\n            for (uint j = 0; j < cacheClasses[_bClassId].types.length; j++) {\r\n                if (typeAdvantages[cacheClasses[_aClassId].types[i]] == cacheClasses[_bClassId].types[j]) {\r\n                    aHasAdvantage = true;\r\n                }\r\n                if (typeAdvantages[cacheClasses[_bClassId].types[j]] == cacheClasses[_aClassId].types[i]) {\r\n                    bHasAdvantage = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function calHpDeducted(uint16 _attack, uint16 _specialAttack, uint16 _defense, uint16 _specialDefense, bool _lucky) view public returns(uint16){\r\n        if (_lucky) {\r\n            _attack = _attack * 13 / 10;\r\n            _specialAttack = _specialAttack * 13 / 10;\r\n        }\r\n        uint16 hpDeducted = safeDeduct(_attack, _defense * 3 /4);\r\n        uint16 hpSpecialDeducted = safeDeduct(_specialAttack, _specialDefense* 3 / 4);\r\n        if (hpDeducted < minHpDeducted && hpSpecialDeducted < minHpDeducted)\r\n            return minHpDeducted;\r\n        if (hpDeducted > hpSpecialDeducted)\r\n            return hpDeducted;\r\n        return hpSpecialDeducted;\r\n    }\r\n    \r\n    function attack(uint8 _index, uint8 _ran, uint16[6] _aStats, uint16[6] _bStats) constant public returns(bool win) {\r\n        if (_ran < _index * maxRandomRound)\r\n            _ran = maxRandomRound;\r\n        else\r\n            _ran = _ran - _index * maxRandomRound;\r\n            \r\n        uint16 round = 0;\r\n        uint16 aHp = _aStats[0];\r\n        uint16 bHp = _bStats[0];\r\n        if (_aStats[5] > _bStats[5]) {\r\n            while (round < maxRandomRound && aHp > 0 && bHp > 0) {\r\n                if (round % 2 == 0) {\r\n                    // a attack \r\n                    bHp = safeDeduct(bHp, calHpDeducted(_aStats[1], _aStats[3], _bStats[2], _bStats[4], round==_ran));\r\n                } else {\r\n                    aHp = safeDeduct(aHp, calHpDeducted(_bStats[1], _bStats[3], _aStats[2], _aStats[4], round==_ran));\r\n                }\r\n                round++;\r\n            }\r\n        } else {\r\n            while (round < maxRandomRound && aHp > 0 && bHp > 0) {\r\n                if (round % 2 != 0) {\r\n                    bHp = safeDeduct(bHp, calHpDeducted(_aStats[1], _aStats[3], _bStats[2], _bStats[4], round==_ran));\r\n                } else {\r\n                    aHp = safeDeduct(aHp, calHpDeducted(_bStats[1], _bStats[3], _aStats[2], _aStats[4], round==_ran));\r\n                }\r\n                round++;\r\n            }\r\n        }\r\n        \r\n        win = aHp >= bHp;\r\n    }\r\n    \r\n    function attackTrainer(uint8 _index, uint8 _ran, uint8 _trainerId, uint8 _trainerLevel, uint32 _objClassId, uint16[6] _objStats) constant public returns(bool result) {\r\n        GymTrainer memory trainer = gymTrainers[_trainerId];\r\n        uint16[6] memory trainerStats;\r\n        uint i = 0;\r\n        for (i=0; i < STAT_COUNT; i+=1) {\r\n            trainerStats[i] = trainer.statBases[i];\r\n        }\r\n        for (i=0; i < cacheClasses[trainer.classId].steps.length; i++) {\r\n            trainerStats[i] += uint16(safeMult(cacheClasses[trainer.classId].steps[i], _trainerLevel*3));\r\n        }\r\n        \r\n        bool objHasAdvantage;\r\n        bool trainerHasAdvantage;\r\n        (objHasAdvantage, trainerHasAdvantage) = getTypeSupport(_objClassId, trainer.classId);\r\n        uint16 originAttack = _objStats[1];\r\n        uint16 originAttackSpecial = _objStats[3];\r\n        if (objHasAdvantage) {\r\n            _objStats[1] += _objStats[1] * typeBuffPercentage / 100;\r\n            _objStats[3] += _objStats[3] * typeBuffPercentage / 100;\r\n        }\r\n        if (trainerHasAdvantage) {\r\n            trainerStats[1] += trainerStats[1] * typeBuffPercentage / 100;\r\n            trainerStats[3] += trainerStats[3] * typeBuffPercentage / 100;\r\n        }\r\n        result = attack(_index, _ran, _objStats, trainerStats);\r\n        _objStats[1] = originAttack;\r\n        _objStats[3] = originAttackSpecial;\r\n    }\r\n    \r\n    function getObjInfo(uint64 _objId) constant public returns(uint32 classId, address trainee, uint8 level) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, classId, trainee, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        level = getLevel(obj.exp);\r\n    }\r\n    \r\n    function startTraining(uint64 _objId, uint8 _trainerLevel, uint8 _t1, uint8 _t2, uint8 _t3) isActive requireDataContract requireWorldContract payable external {\r\n        if (_trainerLevel > maxTrainerLevel)\r\n            revert();\r\n        if (msg.value != gymFee)\r\n            revert();\r\n        if (_t1 == _t2 || _t1 == _t3 || _t2 == _t3)\r\n            revert();\r\n        if (_t1 == 0 || _t2 == 0 || _t3 == 0 || _t1 > totalTrainer || _t2 > totalTrainer || _t3 > totalTrainer)\r\n            revert();\r\n\r\n        AttackData memory att;\r\n        (att.objClassId, att.trainee, att.objLevel) = getObjInfo(_objId);\r\n        if (msg.sender != att.trainee)\r\n            revert();\r\n\r\n        uint i = 0;\r\n        uint16[6] memory objStats;\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        for (i=0; i < STAT_COUNT; i+=1) {\r\n            objStats[i] = data.getElementInArrayType(ArrayType.STAT_BASE, _objId, i);\r\n        }\r\n        for (i=0; i < cacheClasses[att.objClassId].steps.length; i++) {\r\n            objStats[i] += uint16(safeMult(cacheClasses[att.objClassId].steps[i], att.objLevel*3));\r\n        }\r\n        \r\n        att.winCount = 0;\r\n        uint8 ran = getRandom(maxRandomRound*3, 0);\r\n        if (attackTrainer(0, ran, _t1, _trainerLevel, att.objClassId, objStats))\r\n            att.winCount += 1;\r\n        if (attackTrainer(1, ran, _t2, _trainerLevel, att.objClassId, objStats))\r\n            att.winCount += 1;\r\n        if (attackTrainer(2, ran, _t3, _trainerLevel, att.objClassId, objStats))\r\n            att.winCount += 1;\r\n\r\n        (att.winExp, att.loseExp) = getGainExp(att.objLevel, _trainerLevel);\r\n        EtheremonGateway gateway = EtheremonGateway(worldContract);\r\n        gateway.increaseMonsterExp(_objId, att.winCount * att.winExp + (3 - att.winCount) * att.loseExp);\r\n        \r\n        TrainingLog storage trainingLog = trainees[msg.sender];\r\n        trainingLog.trainers[0] = _t1;\r\n        trainingLog.trainers[1] = _t2;\r\n        trainingLog.trainers[2] = _t3;\r\n        trainingLog.trainerLevel = _trainerLevel;\r\n        trainingLog.objId = _objId;\r\n        trainingLog.objLevel = att.objLevel;\r\n        trainingLog.ran = ran;\r\n    }\r\n    \r\n    function getTrainingLog(address _trainee) constant external returns(uint8, uint8, uint8, uint64, uint8, uint8, uint8) {\r\n        TrainingLog memory trainingLog = trainees[_trainee];\r\n        return (trainingLog.trainers[0], trainingLog.trainers[1], trainingLog.trainers[2], \r\n            trainingLog.objId, trainingLog.trainerLevel, trainingLog.objLevel, trainingLog.ran);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gymFee\",\"type\":\"uint256\"},{\"name\":\"_maxTrainerLevel\",\"type\":\"uint8\"},{\"name\":\"_maxRandomRound\",\"type\":\"uint8\"},{\"name\":\"_typeBuffPercentage\",\"type\":\"uint8\"},{\"name\":\"_minHpDeducted\",\"type\":\"uint8\"},{\"name\":\"_expPercentage\",\"type\":\"uint8\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"worldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_attack\",\"type\":\"uint16\"},{\"name\":\"_specialAttack\",\"type\":\"uint16\"},{\"name\":\"_defense\",\"type\":\"uint16\"},{\"name\":\"_specialDefense\",\"type\":\"uint16\"},{\"name\":\"_lucky\",\"type\":\"bool\"}],\"name\":\"calHpDeducted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId1\",\"type\":\"uint32\"},{\"name\":\"_classId2\",\"type\":\"uint32\"},{\"name\":\"_classId3\",\"type\":\"uint32\"},{\"name\":\"_classId4\",\"type\":\"uint32\"}],\"name\":\"fastSetCacheClassInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trainerId\",\"type\":\"uint8\"},{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_s0\",\"type\":\"uint8\"},{\"name\":\"_s1\",\"type\":\"uint8\"},{\"name\":\"_s2\",\"type\":\"uint8\"},{\"name\":\"_s3\",\"type\":\"uint8\"},{\"name\":\"_s4\",\"type\":\"uint8\"},{\"name\":\"_s5\",\"type\":\"uint8\"}],\"name\":\"setGymTrainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genLevelExpGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_worldContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type1\",\"type\":\"uint8\"},{\"name\":\"_type2\",\"type\":\"uint8\"}],\"name\":\"setTypeAdvantage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genLevelExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTypeAdvantages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_exp\",\"type\":\"uint32\"}],\"name\":\"setLevelExpGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getObjInfo\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"},{\"name\":\"trainee\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainerId\",\"type\":\"uint8\"}],\"name\":\"getTrainerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_ran\",\"type\":\"uint8\"},{\"name\":\"_aStats\",\"type\":\"uint16[6]\"},{\"name\":\"_bStats\",\"type\":\"uint16[6]\"}],\"name\":\"attack\",\"outputs\":[{\"name\":\"win\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getCacheClassSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTrainer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"gymTrainers\",\"outputs\":[{\"name\":\"classId\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gymFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeBuffPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"setCacheClassInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainee\",\"type\":\"address\"}],\"name\":\"getTrainingLog\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"xLevel\",\"type\":\"uint8\"},{\"name\":\"yLevel\",\"type\":\"uint8\"}],\"name\":\"getGainExp\",\"outputs\":[{\"name\":\"winExp\",\"type\":\"uint32\"},{\"name\":\"loseExp\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trainees\",\"outputs\":[{\"name\":\"trainerLevel\",\"type\":\"uint8\"},{\"name\":\"objId\",\"type\":\"uint64\"},{\"name\":\"objLevel\",\"type\":\"uint8\"},{\"name\":\"ran\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_trainerLevel\",\"type\":\"uint8\"},{\"name\":\"_t1\",\"type\":\"uint8\"},{\"name\":\"_t2\",\"type\":\"uint8\"},{\"name\":\"_t3\",\"type\":\"uint8\"}],\"name\":\"startTraining\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHpDeducted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_ran\",\"type\":\"uint8\"},{\"name\":\"_trainerId\",\"type\":\"uint8\"},{\"name\":\"_trainerLevel\",\"type\":\"uint8\"},{\"name\":\"_objClassId\",\"type\":\"uint32\"},{\"name\":\"_objStats\",\"type\":\"uint16[6]\"}],\"name\":\"attackTrainer\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTrainerLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRandomRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRan\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"presetGymTrainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_worldContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtheremonGym","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000001fc7bd85293f3982f40d52698df8d26be89360d6","Library":"","SwarmSource":"bzzr://aa58eb55d185b351c219eabf73ca8ffb70e5a24083eea4cdb0a2b1b4642160aa"}]}