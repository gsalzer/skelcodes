{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Owned {\r\n\tmodifier only_owner {\r\n\t\tif (msg.sender != owner)\r\n\t\t\treturn;\r\n\t\t_; \r\n\t}\r\n\r\n\tevent NewOwner(address indexed old, address indexed current);\r\n\r\n\tfunction setOwner(address _new) only_owner { NewOwner(owner, _new); owner = _new; }\r\n\r\n\taddress public owner = msg.sender;\r\n}\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LegalLazyScheduler is Ownable {\r\n    uint64 public lastUpdate;\r\n    uint64 public intervalDuration;\r\n    bool schedulerEnabled = false;\r\n    function() internal callback;\r\n\r\n    event LogRegisteredInterval(uint64 date, uint64 duration);\r\n    event LogProcessedInterval(uint64 date, uint64 intervals);    \r\n    /**\r\n    * Triggers the registered callback function for the number of periods passed since last update\r\n    */\r\n    modifier intervalTrigger() {\r\n        uint64 currentTime = uint64(now);\r\n        uint64 requiredIntervals = (currentTime - lastUpdate) / intervalDuration;\r\n        if( schedulerEnabled && (requiredIntervals > 0)) {\r\n            LogProcessedInterval(lastUpdate, requiredIntervals);\r\n            while (requiredIntervals-- > 0) {\r\n                callback();\r\n            }\r\n            lastUpdate = currentTime;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function LegalLazyScheduler() {\r\n        lastUpdate = uint64(now);\r\n    }\r\n\r\n    function enableScheduler() onlyOwner public {\r\n        schedulerEnabled = true;\r\n    }\r\n\r\n    function registerIntervalCall(uint64 _intervalDuration, function() internal _callback) internal {\r\n        lastUpdate = uint64(now);\r\n        intervalDuration = _intervalDuration;\r\n        callback = _callback;\r\n        LogRegisteredInterval(lastUpdate, intervalDuration);        \r\n    }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract LegalTGE is Ownable, Pausable {\r\n  /**\r\n  * The safe math library for safety math opertations provided by Zeppelin\r\n  */\r\n  using SafeMath for uint256;\r\n  /** State machine\r\n   * - PreparePreContribution: During this phase SmartOne adjust conversionRate and start/end date\r\n   * - PreContribution: During this phase only registered users can contribute to the TGE and therefore receive a bonus until cap or end date is reached\r\n   * - PrepareContribution: During this phase SmartOne adjusts conversionRate by the ETHUSD depreciation during PreContribution and change start and end date in case of an unforseen event \r\n   * - Contribution: During this all users can contribute until cap or end date is reached\r\n   * - Auditing: SmartOne awaits recommendation by auditor and board of foundation will then finalize contribution or enable refunding\r\n   * - Finalized: Token are released\r\n   * - Refunding: Refunds can be claimed\r\n   */\r\n  enum States{PreparePreContribution, PreContribution, PrepareContribution, Contribution, Auditing, Finalized, Refunding}\r\n\r\n  enum VerificationLevel { None, SMSVerified, KYCVerified }\r\n\r\n /**\r\n  * Whenever the state of the contract changes, this event will be fired.\r\n  */\r\n  event LogStateChange(States _states);\r\n\r\n\r\n  /**\r\n  * This event is fired when a user has been successfully verified by the external KYC verification process\r\n  */\r\n  event LogKYCConfirmation(address sender);\r\n\r\n  /**\r\n  * Whenever a legalToken is assigned to this contract, this event will be fired.\r\n  */\r\n  event LogTokenAssigned(address sender, address newToken);\r\n\r\n  /**\r\n  * Every timed transition must be loged for auditing \r\n  */\r\n  event LogTimedTransition(uint _now, States _newState);\r\n  \r\n  /**\r\n  * This event is fired when PreContribution data is changed during the PreparePreContribution phase\r\n  */\r\n  event LogPreparePreContribution(address sender, uint conversionRate, uint startDate, uint endDate);\r\n\r\n  /**\r\n  * A user has transfered Ether and received unreleasead tokens in return\r\n  */\r\n  event LogContribution(address contributor, uint256 weiAmount, uint256 tokenAmount, VerificationLevel verificationLevel, States _state);\r\n\r\n  /**\r\n  * This event will be fired when SmartOne finalizes the TGE \r\n  */\r\n  event LogFinalized(address sender);\r\n\r\n  /**\r\n  * This event will be fired when the auditor confirms the confirms regularity confirmity \r\n  */\r\n  event LogRegularityConfirmation(address sender, bool _regularity, bytes32 _comment);\r\n  \r\n  /**\r\n  * This event will be fired when refunding is enabled by the auditor \r\n  */\r\n  event LogRefundsEnabled(address sender);\r\n\r\n  /**\r\n  * This event is fired when PreContribution data is changed during the PreparePreContribution phase\r\n  */\r\n  event LogPrepareContribution(address sender, uint conversionRate, uint startDate, uint endDate);\r\n\r\n  /**\r\n  * This refund vault used to hold funds while TGE is running.\r\n  * Uses the default implementation provided by the OpenZeppelin community.\r\n  */ \r\n  RefundVault public vault;\r\n\r\n  /**\r\n  * Defines the state of the conotribution process\r\n  */\r\n  States public state;\r\n\r\n  /**\r\n  * The token we are giving the contributors in return for their contributions\r\n  */ \r\n  LegalToken public token;\r\n  \r\n  /**\r\n  * The contract provided by Parity Tech (Gav Woods) to verify the mobile number during user registration\r\n  */ \r\n  ProofOfSMS public proofOfSMS;\r\n\r\n  /** \r\n  * The contribution (wei) will be forwarded to this address after the token has been finalized by the foundation board\r\n  */\r\n  address public multisigWallet;\r\n\r\n  /** \r\n  * Maximum amount of wei this TGE can raise.\r\n  */\r\n  uint256 public tokenCap;\r\n\r\n  /** \r\n  * The amount of wei a contributor has contributed. \r\n  * Used to check whether the total of contributions per user exceeds the max limit (depending on his verification level)\r\n  */\r\n  mapping (address => uint) public weiPerContributor;\r\n\r\n  /** \r\n  * Minimum amount of tokens a contributor is able to buy\r\n  */\r\n  uint256 public minWeiPerContributor;\r\n\r\n  /** \r\n  * Maximum amount of tokens an SMS verified user can contribute.\r\n  */\r\n  uint256 public maxWeiSMSVerified;\r\n\r\n  /** \r\n  * Maximum amount of tokens an none-verified user can contribute.\r\n  */\r\n  uint256 public maxWeiUnverified;\r\n\r\n  /* \r\n  * The number of token units a contributor receives per ETHER during pre-contribtion phase\r\n  */ \r\n  uint public preSaleConversionRate;\r\n\r\n  /* \r\n  * The UNIX timestamp (in seconds) defining when the pre-contribution phase will start\r\n  */\r\n  uint public preSaleStartDate;\r\n\r\n  /* \r\n  * The UNIX timestamp (in seconds) defining when the TGE will end\r\n  */\r\n  uint public preSaleEndDate;\r\n\r\n  /* \r\n  * The number of token units a contributor receives per ETHER during contribution phase\r\n  */ \r\n  uint public saleConversionRate;\r\n\r\n  /* \r\n  * The UNIX timestamp (in seconds) defining when the TGE will start\r\n  */\r\n  uint public saleStartDate;\r\n\r\n  /* \r\n  * The UNIX timestamp (in seconds) defining when the TGE would end if cap will not be reached\r\n  */\r\n  uint public saleEndDate;\r\n\r\n  /* \r\n  * The bonus a sms verified user will receive for a contribution during pre-contribution phase in base points\r\n  */\r\n  uint public smsVerifiedBonusBps;\r\n\r\n  /* \r\n  * The bonus a kyc verified user will receive for a contribution during pre-contribution phase in base points\r\n  */\r\n  uint public kycVerifiedBonusBps;\r\n\r\n  /**\r\n  * Total percent of tokens minted to the team at the end of the sale as base points\r\n  * 1BP -> 0.01%\r\n  */\r\n  uint public maxTeamBonusBps;\r\n\r\n  /**\r\n  * Only the foundation board is able to finalize the TGE.\r\n  * Two of four members have to confirm the finalization. Therefore a multisig contract is used.\r\n  */\r\n  address public foundationBoard;\r\n\r\n  /**\r\n  * Only the KYC confirmation account is allowed to confirm a successfull KYC verification\r\n  */\r\n  address public kycConfirmer;\r\n\r\n  /**\r\n  * Once the contribution has ended an auditor will verify whether all regulations have been fullfilled\r\n  */\r\n  address public auditor;\r\n\r\n  /**\r\n  * The tokens for the insitutional investors will be allocated to this wallet\r\n  */\r\n  address public instContWallet;\r\n\r\n  /**\r\n  * This flag ist set by auditor before finalizing the TGE to indicate whether all regualtions have been fulfilled\r\n  */\r\n  bool public regulationsFulfilled;\r\n\r\n  /**\r\n  * The auditor can comment the confirmation (e.g. in case of deviations)\r\n  */\r\n  bytes32 public auditorComment;\r\n\r\n  /**\r\n  * The total number of institutional and public tokens sold during pre- and contribution phase\r\n  */\r\n  uint256 public tokensSold = 0;\r\n\r\n  /*\r\n  * The number of tokens pre allocated to insitutional contributors\r\n  */\r\n  uint public instContAllocatedTokens;\r\n\r\n  /**\r\n  * The amount of wei totally raised by the public TGE\r\n  */\r\n  uint256 public weiRaised = 0;\r\n\r\n  /* \r\n  * The amount of wei raised during the preContribution phase \r\n  */\r\n  uint256 public preSaleWeiRaised = 0;\r\n\r\n  /*\r\n  * How much wei we have given back to contributors.\r\n  */\r\n  uint256 public weiRefunded = 0;\r\n\r\n  /*\r\n  * The number of tokens allocated to the team when the TGE was finalized.\r\n  * The calculation is based on the predefined maxTeamBonusBps\r\n  */\r\n  uint public teamBonusAllocatedTokens;\r\n\r\n  /**\r\n  * The number of contributors which have contributed to the TGE\r\n  */\r\n  uint public numberOfContributors = 0;\r\n\r\n  /**\r\n  * dictionary that maps addresses to contributors which have sucessfully been verified by the external KYC process \r\n  */\r\n  mapping (address => bool) public kycRegisteredContributors;\r\n\r\n  struct TeamBonus {\r\n    address toAddress;\r\n    uint64 tokenBps;\r\n    uint64 cliffDate;\r\n    uint64 vestingDate;\r\n  }\r\n\r\n  /*\r\n  * Defines the percentage (base points) distribution of the team-allocated bonus rewards among members which will be vested ..\r\n  * 1 Bp -> 0.01%\r\n  */\r\n  TeamBonus[] public teamBonuses;\r\n\r\n  /**\r\n   * @dev Check whether the TGE is currently in the state provided\r\n   */\r\n\r\n function LegalTGE (address _foundationBoard, address _multisigWallet, address _instContWallet, uint256 _instContAllocatedTokens, uint256 _tokenCap, uint256 _smsVerifiedBonusBps, uint256 _kycVerifiedBonusBps, uint256 _maxTeamBonusBps, address _auditor, address _kycConfirmer, ProofOfSMS _proofOfSMS, RefundVault _vault) {\r\n     // --------------------------------------------------------------------------------\r\n    // -- Validate all variables which are not passed to the constructor first\r\n    // --------------------------------------------------------------------------------\r\n    // the address of the account used for auditing\r\n    require(_foundationBoard != 0x0);\r\n    \r\n    // the address of the multisig must not be 'undefined'\r\n    require(_multisigWallet != 0x0);\r\n\r\n    // the address of the wallet for constitutional contributors must not be 'undefined'\r\n    require(_instContWallet != 0x0);\r\n\r\n    // the address of the account used for auditing\r\n    require(_auditor != 0x0);\r\n    \r\n    // the address of the cap for this TGE must not be 'undefined'\r\n    require(_tokenCap > 0); \r\n\r\n    // pre-contribution and contribution phases must not overlap\r\n    // require(_preSaleStartDate <= _preSaleEndDate);\r\n\r\n    multisigWallet = _multisigWallet;\r\n    instContWallet = _instContWallet;\r\n    instContAllocatedTokens = _instContAllocatedTokens;\r\n    tokenCap = _tokenCap;\r\n    smsVerifiedBonusBps = _smsVerifiedBonusBps;\r\n    kycVerifiedBonusBps = _kycVerifiedBonusBps;\r\n    maxTeamBonusBps = _maxTeamBonusBps;\r\n    auditor = _auditor;\r\n    foundationBoard = _foundationBoard;\r\n    kycConfirmer = _kycConfirmer;\r\n    proofOfSMS = _proofOfSMS;\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // -- Initialize all variables which are not passed to the constructor first\r\n    // --------------------------------------------------------------------------------\r\n    state = States.PreparePreContribution;\r\n    vault = _vault;\r\n  }\r\n\r\n  /** =============================================================================================================================\r\n  * All logic related to the TGE contribution is currently placed below.\r\n  * ============================================================================================================================= */\r\n\r\n  function setMaxWeiForVerificationLevels(uint _minWeiPerContributor, uint _maxWeiUnverified, uint  _maxWeiSMSVerified) public onlyOwner inState(States.PreparePreContribution) {\r\n    require(_minWeiPerContributor >= 0);\r\n    require(_maxWeiUnverified > _minWeiPerContributor);\r\n    require(_maxWeiSMSVerified > _minWeiPerContributor);\r\n\r\n    // the minimum number of wei an unverified user can contribute\r\n    minWeiPerContributor = _minWeiPerContributor;\r\n\r\n    // the maximum number of wei an unverified user can contribute\r\n    maxWeiUnverified = _maxWeiUnverified;\r\n\r\n    // the maximum number of wei an SMS verified user can contribute    \r\n    maxWeiSMSVerified = _maxWeiSMSVerified;\r\n  }\r\n\r\n  function setLegalToken(LegalToken _legalToken) public onlyOwner inState(States.PreparePreContribution) {\r\n    token = _legalToken;\r\n    if ( instContAllocatedTokens > 0 ) {\r\n      // mint the pre allocated tokens for the institutional investors\r\n      token.mint(instContWallet, instContAllocatedTokens);\r\n      tokensSold += instContAllocatedTokens;\r\n    }    \r\n    LogTokenAssigned(msg.sender, _legalToken);\r\n  }\r\n\r\n  function validatePreContribution(uint _preSaleConversionRate, uint _preSaleStartDate, uint _preSaleEndDate) constant internal {\r\n    // the pre-contribution conversion rate must not be 'undefined'\r\n    require(_preSaleConversionRate >= 0);\r\n\r\n    // the pre-contribution start date must not be in the past\r\n    require(_preSaleStartDate >= now);\r\n\r\n    // the pre-contribution start date must not be in the past\r\n    require(_preSaleEndDate >= _preSaleStartDate);\r\n  }\r\n\r\n  function validateContribution(uint _saleConversionRate, uint _saleStartDate, uint _saleEndDate) constant internal {\r\n    // the contribution conversion rate must not be 'undefined'\r\n    require(_saleConversionRate >= 0);\r\n\r\n    // the contribution start date must not be in the past\r\n    require(_saleStartDate >= now);\r\n\r\n    // the contribution end date must not be before start date \r\n    require(_saleEndDate >= _saleStartDate);\r\n  }\r\n\r\n  function isNowBefore(uint _date) constant internal returns (bool) {\r\n    return ( now < _date );\r\n  }\r\n\r\n  function evalTransitionState() public returns (States) {\r\n    // once the TGE is in state finalized or refunding, there is now way to transit to another state!\r\n    if ( hasState(States.Finalized))\r\n      return States.Finalized;\r\n    if ( hasState(States.Refunding))\r\n      return States.Refunding;\r\n    if ( isCapReached()) \r\n      return States.Auditing;\r\n    if ( isNowBefore(preSaleStartDate))\r\n      return States.PreparePreContribution; \r\n    if ( isNowBefore(preSaleEndDate))\r\n      return States.PreContribution;\r\n    if ( isNowBefore(saleStartDate))  \r\n      return States.PrepareContribution;\r\n    if ( isNowBefore(saleEndDate))    \r\n      return States.Contribution;\r\n    return States.Auditing;\r\n  }\r\n\r\n  modifier stateTransitions() {\r\n    States evaluatedState = evalTransitionState();\r\n    setState(evaluatedState);\r\n    _;\r\n  }\r\n\r\n  function hasState(States _state) constant private returns (bool) {\r\n    return (state == _state);\r\n  }\r\n\r\n  function setState(States _state) private {\r\n  \tif ( _state != state ) {\r\n      state = _state;\r\n\t  LogStateChange(state);\r\n\t  }\r\n  }\r\n\r\n  modifier inState(States  _state) {\r\n    require(hasState(_state));\r\n    _;\r\n  }\r\n\r\n  function updateState() public stateTransitions {\r\n  }  \r\n  \r\n  /**\r\n   * @dev Checks whether contract is in a state in which contributions will be accepted\r\n   */\r\n  modifier inPreOrContributionState() {\r\n    require(hasState(States.PreContribution) || (hasState(States.Contribution)));\r\n    _;\r\n  }\r\n  modifier inPrePrepareOrPreContributionState() {\r\n    require(hasState(States.PreparePreContribution) || (hasState(States.PreContribution)));\r\n    _;\r\n  }\r\n\r\n  modifier inPrepareState() {\r\n    // we can relay on state since modifer since already evaluated by stateTransitions modifier\r\n    require(hasState(States.PreparePreContribution) || (hasState(States.PrepareContribution)));\r\n    _;\r\n  }\r\n  /** \r\n  * This modifier makes sure that not more tokens as specified can be allocated\r\n  */\r\n  modifier teamBonusLimit(uint64 _tokenBps) {\r\n    uint teamBonusBps = 0; \r\n    for ( uint i = 0; i < teamBonuses.length; i++ ) {\r\n      teamBonusBps = teamBonusBps.add(teamBonuses[i].tokenBps);\r\n    }\r\n    require(maxTeamBonusBps >= teamBonusBps);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * Allocates the team bonus with a specific vesting rule\r\n  */\r\n  function allocateTeamBonus(address _toAddress, uint64 _tokenBps, uint64 _cliffDate, uint64 _vestingDate) public onlyOwner teamBonusLimit(_tokenBps) inState(States.PreparePreContribution) {\r\n    teamBonuses.push(TeamBonus(_toAddress, _tokenBps, _cliffDate, _vestingDate));\r\n  }\r\n\r\n  /**\r\n  * This method can optional be called by the owner to adjust the conversionRate, startDate and endDate before contribution phase starts.\r\n  * Pre-conditions:\r\n  * - Caller is owner (deployer)\r\n  * - TGE is in state PreContribution\r\n  * Post-conditions:\r\n  */\r\n  function preparePreContribution(uint _preSaleConversionRate, uint _preSaleStartDate, uint _preSaleEndDate) public onlyOwner inState(States.PreparePreContribution) {\r\n    validatePreContribution(_preSaleConversionRate, _preSaleStartDate, _preSaleEndDate);    \r\n    preSaleConversionRate = _preSaleConversionRate;\r\n    preSaleStartDate = _preSaleStartDate;\r\n    preSaleEndDate = _preSaleEndDate;\r\n    LogPreparePreContribution(msg.sender, preSaleConversionRate, preSaleStartDate, preSaleEndDate);\r\n  }\r\n\r\n  /**\r\n  * This method can optional be called by the owner to adjust the conversionRate, startDate and endDate before pre contribution phase starts.\r\n  * Pre-conditions:\r\n  * - Caller is owner (deployer)\r\n  * - Crowdsale is in state PreparePreContribution\r\n  * Post-conditions:\r\n  */\r\n  function prepareContribution(uint _saleConversionRate, uint _saleStartDate, uint _saleEndDate) public onlyOwner inPrepareState {\r\n    validateContribution(_saleConversionRate, _saleStartDate, _saleEndDate);\r\n    saleConversionRate = _saleConversionRate;\r\n    saleStartDate = _saleStartDate;\r\n    saleEndDate = _saleEndDate;\r\n\r\n    LogPrepareContribution(msg.sender, saleConversionRate, saleStartDate, saleEndDate);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable public {\r\n    contribute();  \r\n  }\r\n  function getWeiPerContributor(address _contributor) public constant returns (uint) {\r\n  \treturn weiPerContributor[_contributor];\r\n  }\r\n\r\n  function contribute() whenNotPaused stateTransitions inPreOrContributionState public payable {\r\n    require(msg.sender != 0x0);\r\n    require(msg.value >= minWeiPerContributor);\r\n\r\n    VerificationLevel verificationLevel = getVerificationLevel();\r\n    \r\n    // we only allow verified users to participate during pre-contribution phase\r\n    require(hasState(States.Contribution) || verificationLevel > VerificationLevel.None);\r\n\r\n    // we need to keep track of all contributions per user to limit total contributions\r\n    weiPerContributor[msg.sender] = weiPerContributor[msg.sender].add(msg.value);\r\n\r\n    // the total amount of ETH a KYC verified user can contribute is unlimited, so we do not need to check\r\n\r\n    if ( verificationLevel == VerificationLevel.SMSVerified ) {\r\n      // the total amount of ETH a non-KYC user can contribute is limited to maxWeiPerContributor\r\n      require(weiPerContributor[msg.sender] <= maxWeiSMSVerified);\r\n    }\r\n\r\n    if ( verificationLevel == VerificationLevel.None ) {\r\n      // the total amount of ETH a non-verified user can contribute is limited to maxWeiUnverified\r\n      require(weiPerContributor[msg.sender] <= maxWeiUnverified);\r\n    }\r\n\r\n    if (hasState(States.PreContribution)) {\r\n      preSaleWeiRaised = preSaleWeiRaised.add(msg.value);\r\n    }\r\n\r\n    weiRaised = weiRaised.add(msg.value);\r\n\r\n    // calculate the token amount to be created\r\n    uint256 tokenAmount = calculateTokenAmount(msg.value, verificationLevel);\r\n\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n\r\n    if ( token.balanceOf(msg.sender) == 0 ) {\r\n       numberOfContributors++;\r\n    }\r\n\r\n    if ( isCapReached()) {\r\n      updateState();\r\n    }\r\n\r\n    token.mint(msg.sender, tokenAmount);\r\n\r\n    forwardFunds();\r\n\r\n    LogContribution(msg.sender, msg.value, tokenAmount, verificationLevel, state);    \r\n  }\r\n\r\n \r\n  function calculateTokenAmount(uint256 _weiAmount, VerificationLevel _verificationLevel) public constant returns (uint256) {\r\n    uint256 conversionRate = saleConversionRate;\r\n    if ( state == States.PreContribution) {\r\n      conversionRate = preSaleConversionRate;\r\n    }\r\n    uint256 tokenAmount = _weiAmount.mul(conversionRate);\r\n    \r\n    // an anonymous user (Level-0) gets no bonus\r\n    uint256 bonusTokenAmount = 0;\r\n\r\n    if ( _verificationLevel == VerificationLevel.SMSVerified ) {\r\n      // a SMS verified user (Level-1) gets a bonus\r\n      bonusTokenAmount = tokenAmount.mul(smsVerifiedBonusBps).div(10000);\r\n    } else if ( _verificationLevel == VerificationLevel.KYCVerified ) {\r\n      // a KYC verified user (Level-2) gets the highest bonus\r\n      bonusTokenAmount = tokenAmount.mul(kycVerifiedBonusBps).div(10000);\r\n    }\r\n    return tokenAmount.add(bonusTokenAmount);\r\n  }\r\n\r\n  function getVerificationLevel() constant public returns (VerificationLevel) {\r\n    if (kycRegisteredContributors[msg.sender]) {\r\n      return VerificationLevel.KYCVerified;\r\n    } else if (proofOfSMS.certified(msg.sender)) {\r\n      return VerificationLevel.SMSVerified;\r\n    }\r\n    return VerificationLevel.None;\r\n  }\r\n\r\n  modifier onlyKycConfirmer() {\r\n    require(msg.sender == kycConfirmer);\r\n    _;\r\n  }\r\n\r\n  function confirmKYC(address addressId) onlyKycConfirmer inPrePrepareOrPreContributionState() public returns (bool) {\r\n    LogKYCConfirmation(msg.sender);\r\n    return kycRegisteredContributors[addressId] = true;\r\n  }\r\n\r\n// =============================================================================================================================\r\n// All functions related to the TGE cap come here\r\n// =============================================================================================================================\r\n  function isCapReached() constant internal returns (bool) {\r\n    if (tokensSold >= tokenCap) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n// =============================================================================================================================\r\n// Everything which is related tof the auditing process comes here.\r\n// =============================================================================================================================\r\n  /**\r\n   * @dev Throws if called by any account other than the foundation board\r\n   */\r\n  modifier onlyFoundationBoard() {\r\n    require(msg.sender == foundationBoard);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the auditor.\r\n   */\r\n  modifier onlyAuditor() {\r\n    require(msg.sender == auditor);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Throws if auditor has not yet confirmed TGE\r\n   */\r\n  modifier auditorConfirmed() {\r\n    require(auditorComment != 0x0);\r\n    _;\r\n  }\r\n\r\n /*\r\n * After the TGE reaches state 'auditing', the auditor will verify the legal and regulatory obligations \r\n */\r\n function confirmLawfulness(bool _regulationsFulfilled, bytes32 _auditorComment) public onlyAuditor stateTransitions inState ( States.Auditing ) {\r\n    regulationsFulfilled = _regulationsFulfilled;\r\n    auditorComment = _auditorComment;\r\n    LogRegularityConfirmation(msg.sender, _regulationsFulfilled, _auditorComment);\r\n  }\r\n\r\n  /**\r\n   * After the auditor has verified the the legal and regulatory obligations of the TGE, the foundation board is able to finalize the TGE.\r\n   * The finalization consists of the following steps:\r\n   * - Transit state\r\n   * - close the RefundVault and transfer funds to the foundation wallet\r\n   * - release tokens (make transferable)\r\n   * - enable scheduler for the inflation compensation\r\n   * - Min the defined amount of token per team and make them vestable\r\n   */\r\n  function finalize() public onlyFoundationBoard stateTransitions inState ( States.Auditing ) auditorConfirmed {\r\n    setState(States.Finalized);\r\n    // Make token transferable otherwise the transfer call used when granting vesting to teams will be rejected.\r\n    token.releaseTokenTransfer();\r\n    \r\n    // mint bonusus for \r\n    allocateTeamBonusTokens();\r\n\r\n    // the funds can now be transfered to the multisig wallet of the foundation\r\n    vault.close();\r\n\r\n    // disable minting for the TGE (though tokens will still be minted to compensate an inflation period) \r\n    token.finishMinting();\r\n\r\n    // now we can safely enable the shceduler for inflation compensation\r\n    token.enableScheduler();\r\n\r\n    // pass ownership from contract to SmartOne\r\n    token.transferOwnership(owner);\r\n\r\n    LogFinalized(msg.sender);\r\n  }\r\n\r\n  function enableRefunds() public onlyFoundationBoard stateTransitions inState ( States.Auditing ) auditorConfirmed {\r\n    setState(States.Refunding);\r\n\r\n    LogRefundsEnabled(msg.sender);\r\n\r\n    // no need to trigger event here since this allready done in RefundVault (see event RefundsEnabled) \r\n    vault.enableRefunds(); \r\n  }\r\n  \r\n\r\n// =============================================================================================================================\r\n// Postallocation Reward Tokens\r\n// =============================================================================================================================\r\n  \r\n  /** \r\n  * Called once by TGE finalize() if the sale was success.\r\n  */\r\n  function allocateTeamBonusTokens() private {\r\n\r\n    for (uint i = 0; i < teamBonuses.length; i++) {\r\n      // How many % of tokens the team member receive as rewards\r\n      uint _teamBonusTokens = (tokensSold.mul(teamBonuses[i].tokenBps)).div(10000);\r\n\r\n      // mint new tokens for contributors\r\n      token.mint(this, _teamBonusTokens);\r\n      token.grantVestedTokens(teamBonuses[i].toAddress, _teamBonusTokens, uint64(now), teamBonuses[i].cliffDate, teamBonuses[i].vestingDate, false, false);\r\n      teamBonusAllocatedTokens = teamBonusAllocatedTokens.add(_teamBonusTokens);\r\n    }\r\n  }\r\n\r\n  // =============================================================================================================================\r\n  // All functions related to Refunding can be found here. \r\n  // Uses some slightly modifed logic from https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/crowdsale/RefundableTGE.sol\r\n  // =============================================================================================================================\r\n\r\n  /** We're overriding the fund forwarding from TGE.\r\n  * In addition to sending the funds, we want to call\r\n  * the RefundVault deposit function\r\n  */\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * If TGE was not successfull refunding process will be released by SmartOne\r\n  */\r\n  function claimRefund() public stateTransitions inState ( States.Refunding ) {\r\n    // workaround since vault refund does not return refund value\r\n    weiRefunded = weiRefunded.add(vault.deposited(msg.sender));\r\n    vault.refund(msg.sender);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n    require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will receive the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will receive the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\ncontract VestedToken is StandardToken, LimitedTransferToken, Ownable {\r\n\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n\r\n  mapping (address => TokenGrant[]) public grants;\r\n\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) onlyOwner public {\r\n\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    require(_cliff >= _start && _vesting >= _cliff);\r\n\r\n    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n\r\n    uint256 count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n\r\n    transfer(_to, _value);\r\n\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint256 _grantId) public {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    require(grant.revokable);\r\n    require(grant.granter == msg.sender); // Only granter can revoke it\r\n\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\r\n    grants[_holder].length -= 1;\r\n\r\n    balances[receiver] = balances[receiver].add(nonVested);\r\n    balances[_holder] = balances[_holder].sub(nonVested);\r\n\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint256 representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n\r\n    if (grantIndex == 0) \r\n      return super.transferableTokens(holder, time); // shortcut for holder without grants\r\n\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\r\n\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint256 representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\r\n    return grants[_holder].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specific time\r\n   * @param tokens uint256 The amount of tokens granted\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 The time representing the beginning of the grant\r\n   * @param cliff uint64  The cliff period, the period before nothing can be paid out\r\n   * @param vesting uint64 The vesting period\r\n   * @return An uint256 representing the amount of vested tokens of a specific grant\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Cliff    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) public constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n\r\n      // vestedTokens = (tokens * (time - start)) / (vesting - start)\r\n      uint256 vestedTokens = SafeMath.div(\r\n                                    SafeMath.mul(\r\n                                      tokens,\r\n                                      SafeMath.sub(time, start)\r\n                                      ),\r\n                                    SafeMath.sub(vesting, start)\r\n                                    );\r\n\r\n      return vestedTokens;\r\n  }\r\n\r\n  /**\r\n   * @dev Get all information about a specific grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint256 representing the amount of non vested tokens of a specific grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return grant.value.sub(vestedTokens(grant, time));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the date when the holder can transfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint256 representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = Math.max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n\r\ncontract Certifier {\r\n\tevent Confirmed(address indexed who);\r\n\tevent Revoked(address indexed who);\r\n\tfunction certified(address _who) constant returns (bool);\r\n\t// function get(address _who, string _field) constant returns (bytes32) {}\r\n\t// function getAddress(address _who, string _field) constant returns (address) {}\r\n\t// function getUint(address _who, string _field) constant returns (uint) {}\r\n}\r\n\r\ncontract SimpleCertifier is Owned, Certifier {\r\n\r\n\tmodifier only_delegate {\r\n\t\tassert(msg.sender == delegate);\r\n\t\t_; \r\n\t}\r\n\tmodifier only_certified(address _who) {\r\n\t\tif (!certs[_who].active)\r\n\t\t\treturn;\r\n\t\t_; \r\n\t}\r\n\r\n\tstruct Certification {\r\n\t\tbool active;\r\n\t\tmapping (string => bytes32) meta;\r\n\t}\r\n\r\n\tfunction certify(address _who) only_delegate {\r\n\t\tcerts[_who].active = true;\r\n\t\tConfirmed(_who);\r\n\t}\r\n\tfunction revoke(address _who) only_delegate only_certified(_who) {\r\n\t\tcerts[_who].active = false;\r\n\t\tRevoked(_who);\r\n\t}\r\n\tfunction certified(address _who) constant returns (bool) { return certs[_who].active; }\r\n\t// function get(address _who, string _field) constant returns (bytes32) { return certs[_who].meta[_field]; }\r\n\t// function getAddress(address _who, string _field) constant returns (address) { return address(certs[_who].meta[_field]); }\r\n\t// function getUint(address _who, string _field) constant returns (uint) { return uint(certs[_who].meta[_field]); }\r\n\tfunction setDelegate(address _new) only_owner { delegate = _new; }\r\n\r\n\tmapping (address => Certification) certs;\r\n\t// So that the server posting puzzles doesn't have access to the ETH.\r\n\taddress public delegate = msg.sender;\r\n}\r\n\r\ncontract ProofOfSMS is SimpleCertifier {\r\n\r\n\tmodifier when_fee_paid {\r\n\t\tif (msg.value < fee)  {\r\n\t\tRequiredFeeNotMet(fee, msg.value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t_; \r\n\t}\r\n\tevent RequiredFeeNotMet(uint required, uint provided);\r\n\tevent Requested(address indexed who);\r\n\tevent Puzzled(address who, bytes32 puzzle);\r\n\r\n\tevent LogAddress(address test);\r\n\r\n\tfunction request() payable when_fee_paid {\r\n\t\tif (certs[msg.sender].active) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRequested(msg.sender);\r\n\t}\r\n\r\n\tfunction puzzle (address _who, bytes32 _puzzle) only_delegate {\r\n\t\tpuzzles[_who] = _puzzle;\r\n\t\tPuzzled(_who, _puzzle);\r\n\t}\r\n\r\n\tfunction confirm(bytes32 _code) returns (bool) {\r\n\t\tLogAddress(msg.sender);\r\n\t\tif (puzzles[msg.sender] != sha3(_code))\r\n\t\t\treturn;\r\n\r\n\t\tdelete puzzles[msg.sender];\r\n\t\tcerts[msg.sender].active = true;\r\n\t\tConfirmed(msg.sender);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setFee(uint _new) only_owner {\r\n\t\tfee = _new;\r\n\t}\r\n\r\n\tfunction drain() only_owner {\r\n\t\trequire(msg.sender.send(this.balance));\r\n\t}\r\n\r\n\tfunction certified(address _who) constant returns (bool) {\r\n\t\treturn certs[_who].active;\r\n\t}\r\n\r\n\tmapping (address => bytes32) puzzles;\r\n\r\n\tuint public fee = 30 finney;\r\n}\r\n\r\ncontract LegalToken is LegalLazyScheduler, MintableToken, VestedToken {\r\n    /**\r\n    * The name of the token\r\n    */\r\n    bytes32 public name;\r\n\r\n    /**\r\n    * The symbol used for exchange\r\n    */\r\n    bytes32 public symbol;\r\n\r\n    /**\r\n    * Use to convert to number of tokens.\r\n    */\r\n    uint public decimals = 18;\r\n\r\n    /**\r\n    * The yearly expected inflation rate in base points.\r\n    */\r\n    uint32 public inflationCompBPS;\r\n\r\n    /**\r\n    * The tokens are locked until the end of the TGE.\r\n    * The contract can release the tokens if TGE successful. If false we are in transfer lock up period.\r\n    */\r\n    bool public released = false;\r\n\r\n    /**\r\n    * Annually new minted tokens will be transferred to this wallet.\r\n    * Publications will be rewarded with funds (incentives).  \r\n    */\r\n    address public rewardWallet;\r\n\r\n    /**\r\n    * Name and symbol were updated. \r\n    */\r\n    event UpdatedTokenInformation(bytes32 newName, bytes32 newSymbol);\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens. \r\n    */\r\n    function LegalToken(address _rewardWallet, uint32 _inflationCompBPS, uint32 _inflationCompInterval) onlyOwner public {\r\n        setTokenInformation(\"Legal Token\", \"LGL\");\r\n        totalSupply = 0;        \r\n        rewardWallet = _rewardWallet;\r\n        inflationCompBPS = _inflationCompBPS;\r\n        registerIntervalCall(_inflationCompInterval, mintInflationPeriod);\r\n    }    \r\n\r\n    /**\r\n    * This function allows the token owner to rename the token after the operations\r\n    * have been completed and then point the audience to use the token contract.\r\n    */\r\n    function setTokenInformation(bytes32 _name, bytes32 _symbol) onlyOwner public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        UpdatedTokenInformation(name, symbol);\r\n    }\r\n\r\n    /**\r\n    * Mint new tokens for the predefined inflation period and assign them to the reward wallet. \r\n    */\r\n    function mintInflationPeriod() private {\r\n        uint256 tokensToMint = totalSupply.mul(inflationCompBPS).div(10000);\r\n        totalSupply = totalSupply.add(tokensToMint);\r\n        balances[rewardWallet] = balances[rewardWallet].add(tokensToMint);\r\n        Mint(rewardWallet, tokensToMint);\r\n        Transfer(0x0, rewardWallet, tokensToMint);\r\n    }     \r\n    \r\n    function setRewardWallet(address _rewardWallet) public onlyOwner {\r\n        rewardWallet = _rewardWallet;\r\n    }\r\n\r\n    /**\r\n    * Limit token transfer until the TGE is over.\r\n    */\r\n    modifier tokenReleased(address _sender) {\r\n        require(released);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * This will make the tokens transferable\r\n    */\r\n    function releaseTokenTransfer() public onlyOwner {\r\n        released = true;\r\n    }\r\n\r\n    // error: canTransfer(msg.sender, _value)\r\n    function transfer(address _to, uint _value) public tokenReleased(msg.sender) intervalTrigger returns (bool success) {\r\n        // Calls StandardToken.transfer()\r\n        // error: super.transfer(_to, _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public tokenReleased(_from) intervalTrigger returns (bool success) {\r\n        // Calls StandardToken.transferForm()\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public tokenReleased(msg.sender) intervalTrigger returns (bool) {\r\n        // calls StandardToken.approve(..)\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        // calls StandardToken.allowance(..)\r\n        return super.allowance(_owner, _spender);\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) public tokenReleased(msg.sender) intervalTrigger returns (bool success) {\r\n        // calls StandardToken.increaseApproval(..)\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public tokenReleased(msg.sender) intervalTrigger returns (bool success) {\r\n        // calls StandardToken.decreaseApproval(..)\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"foundationBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smsVerifiedBonusBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofOfSMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"kycRegisteredContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVerificationLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycConfirmer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulationsFulfilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instContWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamBonuses\",\"outputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"tokenBps\",\"type\":\"uint64\"},{\"name\":\"cliffDate\",\"type\":\"uint64\"},{\"name\":\"vestingDate\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamBonusAllocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"evalTransitionState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getWeiPerContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerifiedBonusBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preSaleConversionRate\",\"type\":\"uint256\"},{\"name\":\"_preSaleStartDate\",\"type\":\"uint256\"},{\"name\":\"_preSaleEndDate\",\"type\":\"uint256\"}],\"name\":\"preparePreContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"instContAllocatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiPerContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWeiPerContributor\",\"type\":\"uint256\"},{\"name\":\"_maxWeiUnverified\",\"type\":\"uint256\"},{\"name\":\"_maxWeiSMSVerified\",\"type\":\"uint256\"}],\"name\":\"setMaxWeiForVerificationLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_tokenBps\",\"type\":\"uint64\"},{\"name\":\"_cliffDate\",\"type\":\"uint64\"},{\"name\":\"_vestingDate\",\"type\":\"uint64\"}],\"name\":\"allocateTeamBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_regulationsFulfilled\",\"type\":\"bool\"},{\"name\":\"_auditorComment\",\"type\":\"bytes32\"}],\"name\":\"confirmLawfulness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiUnverified\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleConversionRate\",\"type\":\"uint256\"},{\"name\":\"_saleStartDate\",\"type\":\"uint256\"},{\"name\":\"_saleEndDate\",\"type\":\"uint256\"}],\"name\":\"prepareContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTeamBonusBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_legalToken\",\"type\":\"address\"}],\"name\":\"setLegalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_verificationLevel\",\"type\":\"uint8\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressId\",\"type\":\"address\"}],\"name\":\"confirmKYC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditorComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWeiSMSVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWeiPerContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_foundationBoard\",\"type\":\"address\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_instContWallet\",\"type\":\"address\"},{\"name\":\"_instContAllocatedTokens\",\"type\":\"uint256\"},{\"name\":\"_tokenCap\",\"type\":\"uint256\"},{\"name\":\"_smsVerifiedBonusBps\",\"type\":\"uint256\"},{\"name\":\"_kycVerifiedBonusBps\",\"type\":\"uint256\"},{\"name\":\"_maxTeamBonusBps\",\"type\":\"uint256\"},{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_kycConfirmer\",\"type\":\"address\"},{\"name\":\"_proofOfSMS\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_states\",\"type\":\"uint8\"}],\"name\":\"LogStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogKYCConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"LogTokenAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_now\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"LogTimedTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"LogPreparePreContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"verificationLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"LogContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_regularity\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_comment\",\"type\":\"bytes32\"}],\"name\":\"LogRegularityConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogRefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"LogPrepareContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LegalTGE","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001e269f566ab75b941a4682193937d3631fd5955400000000000000000000000014640403af0f5540fad86f715def53e317c9f88800000000000000000000000010a0f400b4b0226bf26c9bcfa19f713e5483f2e000000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000ac0db698068112d00000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000000000000000000000000000000000000000000d05000000000000000000000000dd71aabf44b067ad0fe971aec8fb32e985af1fd6000000000000000000000000001f4bf22547a4bba111b407287713e7021e715e00000000000000000000000003df86c400cc6c648e7b819e330d0434eaa05532000000000000000000000000899efa14bea420efc43b53b4188a3476b3c86acb","Library":"","SwarmSource":"bzzr://016005669b690c49ba66a301498967526e4903737e141b33a9fb14211425864c"}]}