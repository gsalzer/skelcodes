{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n    function unlock() public;\r\n    function burn(uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyInEmergency {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\n\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract ICO is SafeMath, Pausable{\r\n    address public ifSuccessfulSendFundsTo;\r\n    address public BTCproxy;\r\n    address public GBPproxy;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n    uint public preIcoEnds;\r\n    uint public tokensSold;\r\n    uint public maxToken;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n\r\n    event FundWithdrawal(address addr, uint value);\r\n    event ReceivedETH(address addr, uint value);\r\n\tevent ReceivedBTC(address addr, uint value);\r\n\tevent ReceivedGBP(address addr, uint value);\r\n    \r\n    modifier beforeDeadline{ \r\n        require(now < deadline); \r\n        _;\r\n    }\r\n\tmodifier afterDeadline{ \r\n\t    require(now >= deadline); \r\n\t    _; \r\n\t}\r\n\tmodifier ICOactive{ \r\n\t    require(!crowdsaleClosed); \r\n\t    _; \r\n\t}\r\n\t\r\n\tmodifier ICOinactive{ \r\n\t    require(crowdsaleClosed); \r\n\t    _; \r\n\t}\r\n\t\r\n\tmodifier onlyBy(address a){\r\n\t    require(msg.sender == a);\r\n\t\t_;\r\n\t}\r\n\t\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function ICO() public{\r\n        maxToken = 40*(10 ** 6) * (10 ** 6);\r\n        stopped = false;\r\n        tokensSold = 0;\r\n        ifSuccessfulSendFundsTo = 0xDB9e5d21B0c4f06b55fb85ff96acfF75d94D60F7;\r\n        BTCproxy = 0x50651260Ba2B8A3264F1AE074E7a6E7Da101567a;\r\n        GBPproxy = 0x1ABb9E204Eb8E546eFA06Cbb8c039A91227cb211;\r\n        fundingGoal = 100 ether;\r\n        deadline = now + 42 days;\r\n        preIcoEnds = now + 14 days;\r\n        tokenReward = token(0xF27d2B20048a58f558368BbdC45d3f8ec342159C);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () public payable stopInEmergency beforeDeadline ICOactive{\r\n        require(msg.value >= MinimumInvestment());\r\n        uint amount = amountToSend(msg.value);\r\n        if (amount==0){\r\n            revert();\r\n        }else{\r\n            balanceOf[msg.sender] += msg.value;\r\n            amountRaised += msg.value;\r\n            tokenReward.transfer(msg.sender,amount);\r\n            tokensSold = add(tokensSold,amount);\r\n            ReceivedETH(msg.sender,msg.value);\r\n        }\r\n    }\r\n    \r\n    function ReceiveBTC(address addr, uint value) public stopInEmergency beforeDeadline ICOactive onlyBy(BTCproxy){\r\n        require(value >= MinimumInvestment());\r\n        uint amount = amountToSend(value);\r\n        if (amount==0){\r\n            revert();\r\n        }else{\r\n            amountRaised += value;\r\n            tokenReward.transfer(addr,amount);\r\n            tokensSold = add(tokensSold,amount);\r\n            ReceivedBTC(addr,value);\r\n        }\r\n    }\r\n    \r\n    function ReceiveGBP(address addr, uint value) public stopInEmergency beforeDeadline ICOactive onlyBy(GBPproxy){\r\n        require(value >= MinimumInvestment());\r\n        uint amount = amountToSend(value);\r\n        if (amount==0){\r\n            revert();\r\n        }else{\r\n            balanceOf[addr] += value;\r\n            amountRaised += value;\r\n            tokenReward.transfer(addr,amount);\r\n            tokensSold = add(tokensSold,amount);\r\n            ReceivedGBP(addr,value);\r\n        }\r\n    }\r\n    \r\n    function MinimumInvestment() internal returns(uint){\r\n        if (now <= preIcoEnds){\r\n            return 1 ether;\r\n        }else{\r\n            return 0.1 ether;\r\n        }\r\n    }\r\n    \r\n    function amountToSend(uint amount) internal returns(uint){\r\n        uint toSend = 0;\r\n        if (tokensSold <= 5 * (10 ** 6) * (10 ** 6)){\r\n            toSend = mul(amount,1000*(10 ** 6))/(1 ether);\r\n        }else if (5 * (10 ** 6) * (10 ** 6)< tokensSold &&  tokensSold <= 10 * (10 ** 6) * (10 ** 6)){\r\n            toSend = mul(amount,850*(10 ** 6))/(1 ether);\r\n        }else if (10 * (10 ** 6) * (10 ** 6)< tokensSold &&  tokensSold <= 20 * (10 ** 6) * (10 ** 6)){\r\n            toSend = mul(amount,700*(10 ** 6))/(1 ether);\r\n        }else if (20 * (10 ** 6) * (10 ** 6)< tokensSold &&  tokensSold <= 30 * (10 ** 6) * (10 ** 6)){\r\n            toSend = mul(amount,600*(10 ** 6))/(1 ether);\r\n        }else if (30 * (10 ** 6) * (10 ** 6)< tokensSold &&  tokensSold <= 40 * (10 ** 6) * (10 ** 6)){\r\n            toSend = mul(amount,550*(10 ** 6))/(1 ether);\r\n        }\r\n        if (amount >= 10 ether){\r\n                toSend = add(toSend,toSend/50); // volume bonus\r\n        }\r\n        if (add(toSend,tokensSold) > maxToken){\r\n            return 0;\r\n        }else{\r\n            return toSend;\r\n        }\r\n    }\r\n    function finalize() public onlyBy(owner) {\r\n        if (amountRaised>=fundingGoal){\r\n\t\t    if (!ifSuccessfulSendFundsTo.send(amountRaised)){\r\n\t\t        revert();\r\n\t\t    }else{\r\n            fundingGoalReached = true;\r\n\t\t    }\r\n\t\t}else{\r\n\t\t    fundingGoalReached = false;\r\n\t\t}\r\n\t\tuint HYDEmitted = add(tokensSold,10 * (10 ** 6) * (10 ** 6));\r\n\t\tif (HYDEmitted < 50 * (10 ** 6) * (10 ** 6)){\t\t\t\t\t\t\t\t\t\t\t\t\t// burn the rest of RLC\r\n\t\t\t  tokenReward.burn(50 * (10 ** 6) * (10 ** 6) - HYDEmitted);\r\n\t\t}\r\n\t\ttokenReward.unlock();\r\n\t\tcrowdsaleClosed = true;\r\n\t}\r\n\r\n    \r\n    function safeWithdrawal() public afterDeadline ICOinactive{\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundWithdrawal(msg.sender, amount);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BTCproxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ifSuccessfulSendFundsTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveGBP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GBPproxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceivedBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceivedGBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cf4442e1859e66cb36da04e6eadbfa2c3384dc2c2012749b5f0432224ddcb5d"}]}