{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract KyberAirDrop is Ownable {\r\n  uint public numDrops;\r\n  uint public dropAmount;\r\n\r\n  function KyberAirDrop( address dropper ) {\r\n    transferOwnership(dropper);\r\n  }\r\n\r\n  event TokenDrop( address receiver, uint amount );\r\n  function airDrop( ERC20Interface token,\r\n                    address   tokenRepo,\r\n                    address[] recipients,\r\n                    uint amount,\r\n                    bool kgt,\r\n                    KyberGenesisToken kgtToken ) onlyOwner {\r\n    require( amount == 0 || amount == (2*(10**18)) || amount == (5*(10**18)) );\r\n\r\n    if( amount > 0 ) {\r\n      for( uint i = 0 ; i < recipients.length ; i++ ) {\r\n          assert( token.transferFrom( tokenRepo, recipients[i], amount ) );\r\n          TokenDrop( recipients[i], amount );\r\n      }\r\n    }\r\n\r\n    if( kgt ) {\r\n      kgtToken.mint(recipients);\r\n    }\r\n\r\n    numDrops += recipients.length;\r\n    dropAmount += recipients.length * amount;\r\n  }\r\n\r\n  function tranferMinterOwnership( KyberGenesisToken kgtToken, address newOwner ) onlyOwner {\r\n    kgtToken.transferOwnership(newOwner);\r\n  }\r\n\r\n  function emergencyERC20Drain( ERC20Interface token, uint amount ) {\r\n      // callable by anyone\r\n      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\r\n      token.transfer( kyberMultisig, amount );\r\n  }\r\n}\r\n\r\ncontract KyberGenesisToken is Ownable {\r\n  string  public  constant name     = \"Kyber Genesis Token\";\r\n  string  public  constant symbol   = \"KGT\";\r\n  uint    public  constant decimals = 0;\r\n\r\n  uint                   public totalSupply = 0;\r\n  mapping(address=>uint) public balanceOf;\r\n\r\n  function KyberGenesisToken( address minter ) {\r\n    transferOwnership(minter);\r\n  }\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event EndMinting( uint timestamp );\r\n\r\n  function mint( address[] recipients ) onlyOwner {\r\n    uint newRecipients = 0;\r\n    for( uint i = 0 ; i < recipients.length ; i++ ){\r\n      address recipient = recipients[i];\r\n      if( balanceOf[recipient] == 0 ){\r\n        Transfer( address(0x0), recipient, 1 );\r\n        balanceOf[recipient] = 1;\r\n        newRecipients++;\r\n      }\r\n    }\r\n\r\n    totalSupply += newRecipients;\r\n  }\r\n\r\n  function endMinting() onlyOwner {\r\n    transferOwnership(address(0xdead));\r\n    EndMinting(block.timestamp);\r\n  }\r\n\r\n  function burn() {\r\n    require(balanceOf[msg.sender] == 1 );\r\n    Transfer( msg.sender, address(0x0), 1 );\r\n    balanceOf[msg.sender] = 0;\r\n    totalSupply--;\r\n  }\r\n\r\n  function emergencyERC20Drain( ERC20Interface token, uint amount ){\r\n      // callable by anyone\r\n      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\r\n      token.transfer( kyberMultisig, amount );\r\n  }\r\n\r\n\r\n  // ERC20 stubs\r\n  function transfer(address _to, uint _value) returns (bool){ revert(); }\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool){ revert(); }\r\n  function approve(address _spender, uint _value) returns (bool){ revert(); }\r\n  function allowance(address _owner, address _spender) constant returns (uint){ return 0; }\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool){}\r\n  function transfer(address _to, uint _value) returns (bool){}\r\n  function ERC20Interface(){}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"dropAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenRepo\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"kgt\",\"type\":\"bool\"},{\"name\":\"kgtToken\",\"type\":\"address\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDrops\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kgtToken\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"tranferMinterOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"dropper\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDrop\",\"type\":\"event\"}]","ContractName":"KyberAirDrop","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cBAC9e86E0B7160F1a8E4835ad01Dd51c514afce","Library":"","SwarmSource":"bzzr://4aea17b09940a7e1bffd623333825ec4196fa8cf05c50e945fffe7b404e88213"}]}