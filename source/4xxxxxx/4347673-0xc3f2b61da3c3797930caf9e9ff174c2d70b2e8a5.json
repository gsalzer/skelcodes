{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/*\r\nauthor : dungeon_master\r\n*/\r\n\r\ncontract Bounty {\r\n    // Track if the bounty has been already paid.\r\n    bool public bounty_paid = false;\r\n    // Track the total number of donors.\r\n    uint256 public count_donors = 0;\r\n    // Stores the amount given by every donor.\r\n    mapping (address => uint256) public balances;\r\n    // Stores the donor status.\r\n    mapping (address => bool) public has_donated;\r\n    // Stores the voting state.\r\n    mapping (address => bool) public has_voted;\r\n\r\n    address public proposed_beneficiary = 0x0;\r\n    uint256 public votes_for = 0;\r\n    uint256 public votes_against = 0;\r\n\r\n    modifier onlyDonor {\r\n        require(!bounty_paid);\r\n        require(has_donated[msg.sender]);\r\n        // The rest of the function is inserted where the _; is.\r\n        _;\r\n    }\r\n\r\n\r\n    // Paying the tipper.\r\n    function payout() {\r\n        require(!bounty_paid);\r\n        require(proposed_beneficiary != 0x0);\r\n        // To change, maybe. Find a way to use a ratio.\r\n        require(votes_for > votes_against);\r\n        // Minimum of 80% of the donors must have voted.\r\n        require(votes_for+votes_against > count_donors*8/10);\r\n        bounty_paid = true;\r\n        proposed_beneficiary.transfer(this.balance);\r\n\r\n    }\r\n\r\n    function propose_beneficiary(address _proposed) onlyDonor {\r\n        // Updates the proposed_beneficiary variable.\r\n        proposed_beneficiary = _proposed;\r\n        // Resets the voting counts.\r\n        votes_for = 0;\r\n        votes_against = 0;\r\n\r\n    }\r\n\r\n    // Allow to vote for the proposed_beneficiary by passing \"yes\" or \"no\" in the function.\r\n    // Any other string won't be counted.\r\n    function vote_beneficiary(string _vote) onlyDonor {\r\n        require(!has_voted[msg.sender]);\r\n        require(proposed_beneficiary != 0x0);\r\n        if (keccak256(_vote) == keccak256(\"yes\")) {\r\n            votes_for += 1;\r\n            has_voted[msg.sender] = true;\r\n        }\r\n        if (keccak256(_vote) == keccak256(\"no\")) {\r\n            votes_against += 1;\r\n            has_voted[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    // Allow donors to withdraw their donations.\r\n    function refund() onlyDonor {\r\n        // Calling a refund withdraws you from the voters\r\n        has_donated[msg.sender] = false;\r\n        count_donors -= 1;\r\n\r\n        // Store the user's balance prior to withdrawal in a temporary variable.\r\n        uint256 eth_to_withdraw = balances[msg.sender];\r\n        \r\n        // Update the user's balance prior to sending ETH to prevent recursive call.\r\n        balances[msg.sender] = 0;\r\n        \r\n        // Return the user's funds.  Throws on failure to prevent loss of funds.\r\n        msg.sender.transfer(eth_to_withdraw);\r\n    }\r\n\r\n    // Default function. Called whenever someone sent ETH to the contract.\r\n    function () payable {\r\n        // Disallow sending if the bounty is already paid.\r\n        require(!bounty_paid);\r\n        // Maximum 50 donors are allowed.\r\n        require(count_donors < 51);\r\n        // Minimum donation to avoid trolls.\r\n        require(msg.value >= 0.1 ether);\r\n        //If you haven't donated before, you are added and counted as a new donor.\r\n        if (!has_donated[msg.sender]) {\r\n            has_donated[msg.sender] = true;\r\n            count_donors += 1;\r\n        } \r\n        balances[msg.sender] += msg.value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"has_donated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposed_beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votes_against\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votes_for\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty_paid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"string\"}],\"name\":\"vote_beneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count_donors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposed\",\"type\":\"address\"}],\"name\":\"propose_beneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"has_voted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://46346b8ef4ee2ff71d6edfc40aec5d2ad8b35a0eaf7b32a458b57dabebea8568"}]}