{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract PresaleFallbackReceiver {\r\n  bool public presaleFallBackCalled;\r\n\r\n  function presaleFallBack(uint256 _presaleWeiRaised) public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BTCPaymentI is Ownable, PresaleFallbackReceiver {\r\n  PaymentFallbackReceiver public presale;\r\n  PaymentFallbackReceiver public mainsale;\r\n\r\n  function addPayment(address _beneficiary, uint256 _tokens) public;\r\n  function setPresale(address _presale) external;\r\n  function setMainsale(address _mainsale) external;\r\n  function presaleFallBack(uint256) public returns (bool);\r\n}\r\n\r\n\r\ncontract PaymentFallbackReceiver {\r\n  BTCPaymentI public payment;\r\n\r\n  enum SaleType { pre, main }\r\n\r\n  function PaymentFallbackReceiver(address _payment) public {\r\n    require(_payment != address(0));\r\n    payment = BTCPaymentI(_payment);\r\n  }\r\n\r\n  modifier onlyPayment() {\r\n    require(msg.sender == address(payment));\r\n    _;\r\n  }\r\n\r\n  event MintByBTC(SaleType _saleType, address indexed _beneficiary, uint256 _tokens);\r\n\r\n  /**\r\n   * @dev paymentFallBack() is called in BTCPayment.addPayment().\r\n   * Presale or Mainsale contract should mint token to beneficiary,\r\n   * and apply corresponding ether amount to max ether cap.\r\n   * @param _beneficiary ethereum address who receives tokens\r\n   * @param _tokens amount of FXT to mint\r\n   */\r\n  function paymentFallBack(address _beneficiary, uint256 _tokens) external onlyPayment();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Sudo\r\n * @dev Some functions should be restricted so as not to be available in any situation.\r\n * `onlySudoEnabled` modifier controlls it.\r\n */\r\ncontract Sudo is Ownable {\r\n  bool public sudoEnabled;\r\n\r\n  modifier onlySudoEnabled() {\r\n    require(sudoEnabled);\r\n    _;\r\n  }\r\n\r\n  event SudoEnabled(bool _sudoEnabled);\r\n\r\n  function Sudo(bool _sudoEnabled) public {\r\n    sudoEnabled = _sudoEnabled;\r\n  }\r\n\r\n  function enableSudo(bool _sudoEnabled) public onlyOwner {\r\n    sudoEnabled = _sudoEnabled;\r\n    SudoEnabled(_sudoEnabled);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract FXTI is ERC20 {\r\n  bool public sudoEnabled = true;\r\n\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\r\n  function generateTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n  function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n  function blockAddress(address _addr) public;\r\n\r\n  function unblockAddress(address _addr) public;\r\n\r\n  function enableSudo(bool _sudoEnabled) public;\r\n\r\n  function enableTransfers(bool _transfersEnabled) public;\r\n\r\n  // byList functions\r\n\r\n  function generateTokensByList(address[] _owners, uint[] _amounts) public returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title KYCInterface\r\n */\r\ncontract KYCI is Ownable {\r\n  function setAdmin(address _addr, bool _value) public returns (bool);\r\n  function isRegistered(address _addr, bool _isPresale) public returns (bool);\r\n  function register(address _addr, bool _isPresale) public;\r\n  function registerByList(address[] _addrs, bool _isPresale) public;\r\n  function unregister(address _addr, bool _isPresale)public;\r\n  function unregisterByList(address[] _addrs, bool _isPresale) public;\r\n}\r\n\r\n\r\n/**\r\n * @dev This base contract is inherited by FXTPresale and FXTMainsale\r\n * and have related contracts address and ether funded in the sale as state.\r\n * Main purpose of this base contract is to provide the interface to control\r\n * generating / burning token and increase / decrease ether ether funded in the sale.\r\n * Those functions are only called in case of emergency situation such as\r\n * erroneous action handling Bitcoin payment.\r\n */\r\ncontract SaleBase is Sudo, Pausable, PaymentFallbackReceiver {\r\n  using SafeMath for uint256;\r\n\r\n  // related contracts\r\n  FXTI public token;\r\n  KYCI public kyc;\r\n  RefundVault public vault;\r\n\r\n  // fuzex account to hold ownership of contracts after sale finalized\r\n  address public fuzexAccount;\r\n\r\n  // common sale parameters\r\n  mapping (address => uint256) public beneficiaryFunded;\r\n  uint256 public weiRaised;\r\n\r\n  bool public isFinalized; // whether sale is finalized\r\n\r\n  /**\r\n   * @dev After sale finalized, token and other contract ownership is transferred to\r\n   * another contract or account. So this modifier doesn't effect contract logic, just\r\n   * make sure of it.\r\n   */\r\n  modifier onlyNotFinalized() {\r\n    require(!isFinalized);\r\n    _;\r\n  }\r\n\r\n  function SaleBase(\r\n    address _token,\r\n    address _kyc,\r\n    address _vault,\r\n    address _payment,\r\n    address _fuzexAccount)\r\n    Sudo(false) // sudoEnabled\r\n    PaymentFallbackReceiver(_payment)\r\n    public\r\n  {\r\n    require(_token != address(0)\r\n     && _kyc != address(0)\r\n     && _vault != address(0)\r\n     && _fuzexAccount != address(0));\r\n\r\n    token = FXTI(_token);\r\n    kyc = KYCI(_kyc);\r\n    vault = RefundVault(_vault);\r\n    fuzexAccount = _fuzexAccount;\r\n  }\r\n\r\n  /**\r\n   * @dev Below 4 functions are only called in case of emergency and certain situation.\r\n   * e.g. Wrong parameters for BTCPayment.addPayment function so that token should be burned and\r\n   * wei-raised should be modified.\r\n   */\r\n  function increaseWeiRaised(uint256 _amount) public onlyOwner onlyNotFinalized onlySudoEnabled {\r\n    weiRaised = weiRaised.add(_amount);\r\n  }\r\n\r\n  function decreaseWeiRaised(uint256 _amount) public onlyOwner onlyNotFinalized onlySudoEnabled {\r\n    weiRaised = weiRaised.sub(_amount);\r\n  }\r\n\r\n  function generateTokens(address _owner, uint _amount) public onlyOwner onlyNotFinalized onlySudoEnabled returns (bool) {\r\n    return token.generateTokens(_owner, _amount);\r\n  }\r\n\r\n  function destroyTokens(address _owner, uint _amount) public onlyOwner onlyNotFinalized onlySudoEnabled returns (bool) {\r\n    return token.destroyTokens(_owner, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Prevent token holder from transfer.\r\n   */\r\n  function blockAddress(address _addr) public onlyOwner onlyNotFinalized onlySudoEnabled {\r\n    token.blockAddress(_addr);\r\n  }\r\n\r\n  function unblockAddress(address _addr) public onlyOwner onlyNotFinalized onlySudoEnabled {\r\n    token.unblockAddress(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer ownership of other contract whoes owner is `this` to other address.\r\n   */\r\n  function changeOwnership(address _target, address _newOwner) public onlyOwner {\r\n    Ownable(_target).transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer ownership of MiniMeToken whoes controller is `this` to other address.\r\n   */\r\n  function changeController(address _target, address _newOwner) public onlyOwner {\r\n    Controlled(_target).changeController(_newOwner);\r\n  }\r\n\r\n  function setFinalize() internal onlyOwner {\r\n    require(!isFinalized);\r\n    isFinalized = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title FXTPresale\r\n * @dev Private-sale is finished before this contract is deployed.\r\n *\r\n */\r\ncontract FXTPresale is SaleBase {\r\n  uint256 public baseRate = 12000;    // 1 ETH = 12000 FXT\r\n  uint256 public PRE_BONUS = 25;     // presale bonus 25%\r\n  uint256 public BONUS_COEFF = 100;\r\n\r\n  // private-sale parameters\r\n  uint256 public privateEtherFunded;\r\n  uint256 public privateMaxEtherCap;\r\n\r\n  // presale parameters\r\n  uint256 public presaleMaxEtherCap;\r\n  uint256 public presaleMinPurchase;\r\n\r\n  uint256 public maxEtherCap;   // max ether cap for both private-sale & presale\r\n\r\n  uint64 public startTime;     // when presale starts\r\n  uint64 public endTime;       // when presale ends\r\n\r\n  event PresaleTokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 toFund, uint256 tokens);\r\n\r\n  /**\r\n   * @dev only presale registered address can participate presale.\r\n   * private-sale doesn't require to check address because owner deals with it.\r\n   */\r\n  modifier onlyRegistered(address _addr) {\r\n    require(kyc.isRegistered(_addr, true));\r\n    _;\r\n  }\r\n\r\n  function FXTPresale(\r\n    address _token,\r\n    address _kyc,\r\n    address _vault,\r\n    address _payment,\r\n    address _fuzexAccount,\r\n    uint64 _startTime,\r\n    uint64 _endTime,\r\n    uint256 _privateEtherFunded,\r\n    uint256 _privateMaxEtherCap,\r\n    uint256 _presaleMaxEtherCap,\r\n    uint256 _presaleMinPurchase)\r\n    SaleBase(_token, _kyc, _vault, _payment, _fuzexAccount)\r\n    public\r\n  {\r\n    require(now < _startTime && _startTime < _endTime);\r\n\r\n    require(_privateEtherFunded >= 0);\r\n    require(_privateMaxEtherCap > 0);\r\n    require(_presaleMaxEtherCap > 0);\r\n    require(_presaleMinPurchase > 0);\r\n\r\n    require(_presaleMinPurchase < _presaleMaxEtherCap);\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n\r\n    privateEtherFunded = _privateEtherFunded;\r\n    privateMaxEtherCap = _privateMaxEtherCap;\r\n\r\n    presaleMaxEtherCap = _presaleMaxEtherCap;\r\n    presaleMinPurchase = _presaleMinPurchase;\r\n\r\n    maxEtherCap = privateMaxEtherCap.add(presaleMaxEtherCap);\r\n    weiRaised = _privateEtherFunded; // ether funded during private-sale\r\n\r\n    require(weiRaised <= maxEtherCap);\r\n  }\r\n\r\n  function () external payable {\r\n    buyPresale(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev paymentFallBack() assumes that paid BTC doesn't exceed the max ether cap.\r\n   * BTC / ETH price (or rate) is determined using reliable outer resources.\r\n   * @param _beneficiary ethereum address who receives tokens\r\n   * @param _tokens amount of FXT to mint\r\n   */\r\n  function paymentFallBack(address _beneficiary, uint256 _tokens)\r\n    external\r\n    onlyPayment\r\n  {\r\n    // only check time and parameters\r\n    require(startTime <= now && now <= endTime);\r\n    require(_beneficiary != address(0));\r\n    require(_tokens > 0);\r\n\r\n    uint256 rate = getRate();\r\n    uint256 weiAmount = _tokens.div(rate);\r\n\r\n    require(weiAmount >= presaleMinPurchase);\r\n\r\n    // funded ether should not exceed max ether cap.\r\n    require(weiRaised.add(weiAmount) <= maxEtherCap);\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    beneficiaryFunded[_beneficiary] = beneficiaryFunded[_beneficiary].add(weiAmount);\r\n\r\n    token.generateTokens(_beneficiary, _tokens);\r\n    MintByBTC(SaleType.pre, _beneficiary, _tokens);\r\n  }\r\n\r\n  function buyPresale(address _beneficiary)\r\n    public\r\n    payable\r\n    onlyRegistered(_beneficiary)\r\n    whenNotPaused\r\n  {\r\n    // check validity\r\n    require(_beneficiary != address(0));\r\n    require(msg.value >= presaleMinPurchase);\r\n    require(validPurchase());\r\n\r\n    uint256 toFund;\r\n    uint256 tokens;\r\n\r\n    (toFund, tokens) = buy(_beneficiary);\r\n\r\n    PresaleTokenPurchase(msg.sender, _beneficiary, toFund, tokens);\r\n  }\r\n\r\n  function buy(address _beneficiary)\r\n    internal\r\n    returns (uint256 toFund, uint256 tokens)\r\n  {\r\n    // calculate eth amount\r\n    uint256 weiAmount = msg.value;\r\n    uint256 totalAmount = weiRaised.add(weiAmount);\r\n\r\n    if (totalAmount > maxEtherCap) {\r\n      toFund = maxEtherCap.sub(weiRaised);\r\n    } else {\r\n      toFund = weiAmount;\r\n    }\r\n\r\n    require(toFund > 0);\r\n    require(weiAmount >= toFund);\r\n\r\n    uint256 rate = getRate();\r\n    tokens = toFund.mul(rate);\r\n    uint256 toReturn = weiAmount.sub(toFund);\r\n\r\n    weiRaised = weiRaised.add(toFund);\r\n    beneficiaryFunded[_beneficiary] = beneficiaryFunded[_beneficiary].add(toFund);\r\n\r\n    token.generateTokens(_beneficiary, tokens);\r\n\r\n    if (toReturn > 0) {\r\n      msg.sender.transfer(toReturn);\r\n    }\r\n\r\n    forwardFunds(toFund);\r\n  }\r\n\r\n  function validPurchase() internal view returns (bool) {\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool validTime = now >= startTime && now <= endTime;\r\n    return nonZeroPurchase && !maxReached() && validTime;\r\n  }\r\n\r\n  /**\r\n   * @dev get current rate\r\n   */\r\n  function getRate() public view returns (uint256) {\r\n    return calcRate(PRE_BONUS);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate rate wrt _bonus. if _bonus is 15, this function\r\n   * returns baseRate * 1.15.\r\n   * rate = 12000 * (25 + 100) / 100 for 25% bonus\r\n   */\r\n  function calcRate(uint256 _bonus) internal view returns (uint256) {\r\n    return _bonus.add(BONUS_COEFF).mul(baseRate).div(BONUS_COEFF);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether max ether cap is reached for presale\r\n   * @return true if max ether cap is reaced\r\n   */\r\n  function maxReached() public view  returns (bool) {\r\n    return weiRaised == maxEtherCap;\r\n  }\r\n\r\n  function forwardFunds(uint256 _toFund) internal {\r\n    vault.deposit.value(_toFund)(msg.sender);\r\n  }\r\n\r\n  function finalizePresale(address _mainsale) public onlyOwner {\r\n      require(!isFinalized);\r\n      require(maxReached() || now > endTime);\r\n\r\n      PresaleFallbackReceiver mainsale = PresaleFallbackReceiver(_mainsale);\r\n\r\n      require(mainsale.presaleFallBack(weiRaised));\r\n      require(payment.presaleFallBack(weiRaised));\r\n\r\n      vault.close();\r\n\r\n      changeController(address(token), _mainsale);\r\n      changeOwnership(address(vault), fuzexAccount);\r\n\r\n      enableSudo(false);\r\n      setFinalize();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseWeiRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unblockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fuzexAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateEtherFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sudoEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"paymentFallBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateMaxEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleMaxEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sudoEnabled\",\"type\":\"bool\"}],\"name\":\"enableSudo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyPresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainsale\",\"type\":\"address\"}],\"name\":\"finalizePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseWeiRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleMinPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_COEFF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_kyc\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"address\"},{\"name\":\"_fuzexAccount\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint64\"},{\"name\":\"_endTime\",\"type\":\"uint64\"},{\"name\":\"_privateEtherFunded\",\"type\":\"uint256\"},{\"name\":\"_privateMaxEtherCap\",\"type\":\"uint256\"},{\"name\":\"_presaleMaxEtherCap\",\"type\":\"uint256\"},{\"name\":\"_presaleMinPurchase\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"MintByBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sudoEnabled\",\"type\":\"bool\"}],\"name\":\"SudoEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FXTPresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001829aa045e21e0d59580024a951db48096e01782000000000000000000000000c9e8045616abbdf535fda1fdbfe04b4f42101b2e000000000000000000000000da6d5a2ec190562cbd8c50f13faa8c1a43a0446100000000000000000000000058c3069023ed736f430d585003715058c2e3c671000000000000000000000000f2169b581ee51465fa1837d8450970b5c1aa4d3c000000000000000000000000000000000000000000000000000000005a5bef00000000000000000000000000000000000000000000000000000000005a861f0000000000000000000000000000000000000000000000043c33c193756480000000000000000000000000000000000000000000000000043c33c193756480000000000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000004563918244f40000","Library":"","SwarmSource":"bzzr://8e9e228e9ba1c5a16496f63d6301e78275b108fae026cc18ce351822efbb051e"}]}