{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/KnowsConstants.sol\r\n\r\ncontract KnowsConstants {\r\n    // 2/4/18 @ 6:30 PM EST, the deadline for bets\r\n    uint public constant GAME_START_TIME = 1517787000;\r\n}\r\n\r\n// File: contracts/KnowsSquares.sol\r\n\r\n// knows what a valid box is\r\ncontract KnowsSquares {\r\n    modifier isValidSquare(uint home, uint away) {\r\n        require(home >= 0 && home < 10);\r\n        require(away >= 0 && away < 10);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IKnowsTime.sol\r\n\r\ninterface IKnowsTime {\r\n    function currentTime() public view returns (uint);\r\n}\r\n\r\n// File: contracts/KnowsTime.sol\r\n\r\n// knows what time it is\r\ncontract KnowsTime is IKnowsTime {\r\n    function currentTime() public view returns (uint) {\r\n        return now;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IKnowsVoterStakes.sol\r\n\r\ninterface IKnowsVoterStakes {\r\n    function getVoterStakes(address voter, uint asOfBlock) public view returns (uint);\r\n}\r\n\r\n// File: contracts/interfaces/IScoreOracle.sol\r\n\r\ninterface IScoreOracle {\r\n    function getSquareWins(uint home, uint away) public view returns (uint numSquareWins, uint totalWins);\r\n    function isFinalized() public view returns (bool);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Squares.sol\r\n\r\ncontract Squares is KnowsConstants, KnowsTime, KnowsSquares, IKnowsVoterStakes {\r\n    using SafeMath for uint;\r\n\r\n    function Squares(IScoreOracle _oracle, address _developer) public {\r\n        oracle = _oracle;\r\n        developer = _developer;\r\n    }\r\n\r\n    // the oracle for the scores\r\n    IScoreOracle public oracle;\r\n\r\n    // the developer of the smart contract\r\n    address public developer;\r\n\r\n    // staked ether for each player and each box\r\n    mapping(address => uint[10][10]) public totalSquareStakesByUser;\r\n\r\n    // total stakes for each box\r\n    uint[10][10] public totalSquareStakes;\r\n\r\n    // the total stakes for each user\r\n    mapping(address => uint) public totalUserStakes;\r\n\r\n    // the overall total of money stakes in the grid\r\n    uint public totalStakes;\r\n\r\n    event LogBet(address indexed better, uint indexed home, uint indexed away, uint stake);\r\n\r\n    function bet(uint home, uint away) public payable isValidSquare(home, away) {\r\n        require(msg.value > 0);\r\n        require(currentTime() < GAME_START_TIME);\r\n\r\n        // the stake is the message value\r\n        uint stake = msg.value;\r\n\r\n        // add the stake amount to the overall total\r\n        totalStakes = totalStakes.add(stake);\r\n\r\n        // add their stake to the total user stakes\r\n        totalUserStakes[msg.sender] = totalUserStakes[msg.sender].add(stake);\r\n\r\n        // add their stake to their own accounting\r\n        totalSquareStakesByUser[msg.sender][home][away] = totalSquareStakesByUser[msg.sender][home][away].add(stake);\r\n\r\n        // add it to the total stakes as well\r\n        totalSquareStakes[home][away] = totalSquareStakes[home][away].add(stake);\r\n\r\n        LogBet(msg.sender, home, away, stake);\r\n    }\r\n\r\n    event LogPayout(address indexed winner, uint payout, uint donation);\r\n\r\n    // calculate the winnings owed for a user's bet on a particular square\r\n    function getWinnings(address user, uint home, uint away) public view returns (uint winnings) {\r\n        // the square wins and the total wins are used to calculate\r\n        // the percentage of the total stake that the square is worth\r\n        var (numSquareWins, totalWins) = oracle.getSquareWins(home, away);\r\n\r\n        return totalSquareStakesByUser[user][home][away]\r\n            .mul(totalStakes)\r\n            .mul(numSquareWins)\r\n            .div(totalWins)\r\n            .div(totalSquareStakes[home][away]);\r\n    }\r\n\r\n    // called by the winners to collect winnings for a box\r\n    function collectWinnings(uint home, uint away, uint donationPercentage) public isValidSquare(home, away) {\r\n        // score must be finalized\r\n        require(oracle.isFinalized());\r\n\r\n        // optional donation\r\n        require(donationPercentage <= 100);\r\n\r\n        // we cannot pay out more than we have\r\n        // but we should not prevent paying out what we do have\r\n        // this should never happen since integer math always truncates, we should only end up with too much\r\n        // however it's worth writing in the protection\r\n        uint winnings = Math.min256(this.balance, getWinnings(msg.sender, home, away));\r\n\r\n        require(winnings > 0);\r\n\r\n        // the donation amount\r\n        uint donation = winnings.mul(donationPercentage).div(100);\r\n\r\n        uint payout = winnings.sub(donation);\r\n\r\n        // clear their stakes - can only collect once\r\n        totalSquareStakesByUser[msg.sender][home][away] = 0;\r\n\r\n        msg.sender.transfer(payout);\r\n        developer.transfer(donation);\r\n\r\n        LogPayout(msg.sender, payout, donation);\r\n    }\r\n\r\n    function getVoterStakes(address voter, uint asOfBlock) public view returns (uint) {\r\n        return totalUserStakes[voter];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSquareStakesByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUserStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"home\",\"type\":\"uint256\"},{\"name\":\"away\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSquareStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"home\",\"type\":\"uint256\"},{\"name\":\"away\",\"type\":\"uint256\"},{\"name\":\"donationPercentage\",\"type\":\"uint256\"}],\"name\":\"collectWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"home\",\"type\":\"uint256\"},{\"name\":\"away\",\"type\":\"uint256\"}],\"name\":\"getWinnings\",\"outputs\":[{\"name\":\"winnings\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"asOfBlock\",\"type\":\"uint256\"}],\"name\":\"getVoterStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_developer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"better\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"home\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"away\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"LogPayout\",\"type\":\"event\"}]","ContractName":"Squares","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000042b81fb65d24f547aee4f012e6953e41d0be0d5e00000000000000000000000003a23e66d9b3bdc6186253f9677fbb0212c38a69","Library":"","SwarmSource":"bzzr://fbcfe0349674fa6f3d16823c97eec4930f20e2e9f92d972bccd4a348b25a688d"}]}