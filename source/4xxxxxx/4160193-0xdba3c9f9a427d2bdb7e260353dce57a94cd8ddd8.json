{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferProposed(\r\n      address indexed _from,\r\n      address indexed _to\r\n    );\r\n\r\n    event OwnershipTransferred(\r\n      address indexed _from,\r\n      address indexed _to\r\n    );\r\n\r\n    function Owned()\r\n    {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner\r\n    {\r\n      require(_newOwner != address(0x0));\r\n      OwnershipTransferProposed(owner, _newOwner);\r\n      newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership()\r\n    {\r\n      require(msg.sender == newOwner);\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n\r\n  function safeAdd(uint a, uint b) internal\r\n    returns (uint)\r\n  {\r\n    uint c = a + b;\r\n    assert(c >= a && c >= b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal\r\n    returns (uint)\r\n  {\r\n    assert(b <= a);\r\n    uint c = a - b;\r\n    assert(c <= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    event LogTransfer(\r\n      address indexed _from,\r\n      address indexed _to,\r\n      uint256 _value\r\n    );\r\n    \r\n    event LogApproval(\r\n      address indexed _owner,\r\n      address indexed _spender,\r\n      uint256 _value\r\n    );\r\n\r\n    function totalSupply() constant\r\n      returns (uint256);\r\n    \r\n    function balanceOf(address _owner) constant \r\n      returns (uint256 balance);\r\n    \r\n    function transfer(address _to, uint256 _value)\r\n      returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n      returns (bool success);\r\n    \r\n    function approve(address _spender, uint256 _value) \r\n      returns (bool success);\r\n    \r\n    function allowance(address _owner, address _spender) constant \r\n      returns (uint256 remaining);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20\r\n//\r\n// note that totalSupply() is not defined here\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Token is ERC20Interface, Owned, SafeMath {\r\n\r\n    // Account balances\r\n    //\r\n    mapping(address => uint256) balances;\r\n\r\n    // Account holder approves the transfer of an amount to another account\r\n    //\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Get the account balance for an address\r\n    function balanceOf(address _owner) constant \r\n      returns (uint256 balance)\r\n    {\r\n      return balances[_owner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from owner's account to another account\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint256 _amount) \r\n      returns (bool success)\r\n    {\r\n      require( _amount > 0 );                              // Non-zero transfer\r\n      require( balances[msg.sender] >= _amount );          // User has balance\r\n      require( balances[_to] + _amount > balances[_to] );  // Overflow check\r\n\r\n      balances[msg.sender] -= _amount;\r\n      balances[_to] += _amount;\r\n      LogTransfer(msg.sender, _to, _amount);\r\n      return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Allow _spender to withdraw from your account, multiple times, up to\r\n    // _amount. If this function is called again it overwrites the\r\n    // current allowance with _amount.\r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint256 _amount) \r\n      returns (bool success)\r\n    {\r\n      // before changing the approve amount for an address, its allowance\r\n      // must be reset to 0 to mitigate the race condition described here:\r\n      // cf https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n      require( _amount == 0 || allowed[msg.sender][_spender] == 0 );\r\n        \r\n      // the approval amount cannot exceed the balance\r\n      require (balances[msg.sender] >= _amount);\r\n        \r\n      allowed[msg.sender][_spender] = _amount;\r\n      LogApproval(msg.sender, _spender, _amount);\r\n      return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Spender of tokens transfer an amount of tokens from the token owner's\r\n    // balance to another account. The owner of the tokens must already\r\n    // have approve(...)-d this transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _amount) \r\n    returns (bool success) \r\n    {\r\n      require( _amount > 0 );                              // Non-zero transfer\r\n      require( balances[_from] >= _amount );               // Sufficient balance\r\n      require( allowed[_from][msg.sender] >= _amount );    // Transfer approved\r\n      require( balances[_to] + _amount > balances[_to] );  // Overflow check\r\n\r\n      balances[_from] -= _amount;\r\n      allowed[_from][msg.sender] -= _amount;\r\n      balances[_to] += _amount;\r\n      LogTransfer(_from, _to, _amount);\r\n      return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred by _spender\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address _owner, address _spender) constant \r\n    returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// GZR public token sale\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Zorro02Token is ERC20Token {\r\n\r\n\r\n    // VARIABLES ================================\r\n\r\n\r\n    // basic token data\r\n\r\n    string public constant name = \"Zorro02\";\r\n    string public constant symbol = \"ZORRO02\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant GITHUB_LINK = 'htp://github.com/..';\r\n\r\n    // wallet address (can be reset at any time during ICO)\r\n    \r\n    address public wallet;\r\n\r\n    // ICO variables that can be reset before ICO starts\r\n\r\n    uint public tokensPerEth = 100000;\r\n    uint public icoTokenSupply = 300;\r\n\r\n    // ICO constants #1\r\n\r\n    uint public constant TOTAL_TOKEN_SUPPLY = 1000;\r\n    uint public constant ICO_TRIGGER = 10;\r\n    uint public constant MIN_CONTRIBUTION = 10**15;\r\n    \r\n    // ICO constants #2 : ICO dates\r\n\r\n    // Start - Friday, 15-Sep-17 00:00:00 UTC\r\n    // End - Sunday, 15-Oct-17 00:00:00 UTC\r\n    // as per http://www.unixtimestamp.com\r\n    uint public constant START_DATE = 1502787600;\r\n    uint public constant END_DATE = 1502791200;\r\n\r\n    // ICO variables\r\n\r\n    uint public icoTokensIssued = 0;\r\n    bool public icoFinished = false;\r\n    bool public tradeable = false;\r\n\r\n    // Minting\r\n    \r\n    uint public ownerTokensMinted = 0;\r\n    \r\n    // other variables\r\n    \r\n    uint256 constant MULT_FACTOR = 10**18;\r\n    \r\n\r\n    // EVENTS ===================================\r\n\r\n    \r\n    event LogWalletUpdated(\r\n      address newWallet\r\n    );\r\n    \r\n    event LogTokensPerEthUpdated(\r\n      uint newTokensPerEth\r\n    );\r\n    \r\n    event LogIcoTokenSupplyUpdated(\r\n      uint newIcoTokenSupply\r\n    );\r\n    \r\n    event LogTokensBought(\r\n      address indexed buyer,\r\n      uint ethers,\r\n      uint tokens, \r\n      uint participantTokenBalance, \r\n      uint newIcoTokensIssued\r\n    );\r\n    \r\n    event LogMinting(\r\n      address indexed participant,\r\n      uint tokens,\r\n      uint newOwnerTokensMinted\r\n    );\r\n\r\n\r\n    // FUNCTIONS ================================\r\n    \r\n    // --------------------------------\r\n    // initialize\r\n    // --------------------------------\r\n\r\n    function Zorro02Token() {\r\n      owner = msg.sender;\r\n      wallet = msg.sender;\r\n    }\r\n\r\n\r\n    // --------------------------------\r\n    // implement totalSupply() ERC20 function\r\n    // --------------------------------\r\n    \r\n    function totalSupply() constant\r\n      returns (uint256)\r\n    {\r\n      return TOTAL_TOKEN_SUPPLY;\r\n    }\r\n\r\n\r\n    // --------------------------------\r\n    // changing ICO parameters\r\n    // --------------------------------\r\n    \r\n    // Owner can change the crowdsale wallet address at any time\r\n    //\r\n    function setWallet(address _wallet) onlyOwner\r\n    {\r\n      wallet = _wallet;\r\n      LogWalletUpdated(wallet);\r\n    }\r\n    \r\n    // Owner can change the number of tokens per ETH before the ICO start date\r\n    //\r\n    function setTokensPerEth(uint _tokensPerEth) onlyOwner\r\n    {\r\n      require(now < START_DATE);\r\n      require(_tokensPerEth > 0);\r\n      tokensPerEth = _tokensPerEth;\r\n      LogTokensPerEthUpdated(tokensPerEth);\r\n    }\r\n        \r\n\r\n    // Owner can change the number available tokens for the ICO\r\n    // (must be below 70 million) \r\n    //\r\n    function setIcoTokenSupply(uint _icoTokenSupply) onlyOwner\r\n    {\r\n        require(now < START_DATE);\r\n        require(_icoTokenSupply < TOTAL_TOKEN_SUPPLY);\r\n        icoTokenSupply = _icoTokenSupply;\r\n        LogIcoTokenSupplyUpdated(icoTokenSupply);\r\n    }\r\n\r\n\r\n    // --------------------------------\r\n    // Default function\r\n    // --------------------------------\r\n    \r\n    function () payable\r\n    {\r\n        proxyPayment(msg.sender);\r\n    }\r\n\r\n    // --------------------------------\r\n    // Accept ETH during crowdsale\r\n    // --------------------------------\r\n\r\n    function proxyPayment(address participant) payable\r\n    {\r\n        require(!icoFinished);\r\n        require(now >= START_DATE);\r\n        require(now <= END_DATE);\r\n        require(msg.value > MIN_CONTRIBUTION);\r\n        \r\n        // get number of tokens\r\n        uint tokens = msg.value * tokensPerEth;\r\n        \r\n        // first check if there is enough capacity\r\n        uint available = icoTokenSupply - icoTokensIssued;\r\n        require (tokens <= available); \r\n\r\n        // ok it's possible to issue tokens so let's do it\r\n        \r\n        // Add tokens purchased to account's balance and total supply\r\n        // TODO - verify SafeAdd is not necessary\r\n        balances[participant] += tokens;\r\n        icoTokensIssued += tokens;\r\n\r\n        // Transfer the tokens to the participant  \r\n        LogTransfer(0x0, participant, tokens);\r\n        \r\n        // Log the token purchase\r\n        LogTokensBought(participant, msg.value, tokens, balances[participant], icoTokensIssued);\r\n\r\n        // Transfer the contributed ethers to the crowdsale wallet\r\n        // throw is deprecated starting from Ethereum v0.9.0\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    \r\n    // --------------------------------\r\n    // Minting of tokens by owner\r\n    // --------------------------------\r\n\r\n    // Tokens remaining available to mint by owner\r\n    //\r\n    function availableToMint()\r\n      returns (uint)\r\n    {\r\n      if (icoFinished) {\r\n        return TOTAL_TOKEN_SUPPLY - icoTokensIssued - ownerTokensMinted;\r\n      } else {\r\n        return TOTAL_TOKEN_SUPPLY - icoTokenSupply - ownerTokensMinted;        \r\n      }\r\n    }\r\n\r\n    // Minting of tokens by owner\r\n    //    \r\n    function mint(address participant, uint256 tokens) onlyOwner \r\n    {\r\n        require( tokens <= availableToMint() );\r\n        balances[participant] += tokens;\r\n        ownerTokensMinted += tokens;\r\n        LogTransfer(0x0, participant, tokens);\r\n        LogMinting(participant, tokens, ownerTokensMinted);\r\n    }\r\n\r\n    // --------------------------------\r\n    // Declare ICO finished\r\n    // --------------------------------\r\n    \r\n    function declareIcoFinished() onlyOwner\r\n    {\r\n      // the token can only be made tradeable after ICO finishes\r\n      require( now > END_DATE || icoTokenSupply - icoTokensIssued < ICO_TRIGGER );\r\n      icoFinished = true;\r\n    }\r\n\r\n    // --------------------------------\r\n    // Make tokens tradeable\r\n    // --------------------------------\r\n    \r\n    function tradeable() onlyOwner\r\n    {\r\n      // the token can only be made tradeable after ICO finishes\r\n      require(icoFinished);\r\n      tradeable = true;\r\n    }\r\n\r\n    // --------------------------------\r\n    // Transfers\r\n    // --------------------------------\r\n\r\n    function transfer(address _to, uint _amount) \r\n      returns (bool success)\r\n    {\r\n      // Cannot transfer out until tradeable, except for owner\r\n      require(tradeable || msg.sender == owner);\r\n      return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n      returns (bool success)\r\n    {\r\n        // not possible until tradeable\r\n        require(tradeable);\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    // --------------------------------\r\n    // Varia\r\n    // --------------------------------\r\n\r\n    // Transfer out any accidentally sent ERC20 tokens\r\n    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner \r\n      returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(owner, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEth\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoTokenSupply\",\"type\":\"uint256\"}],\"name\":\"setIcoTokenSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"availableToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareIcoFinished\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GITHUB_LINK\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"LogWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTokensPerEth\",\"type\":\"uint256\"}],\"name\":\"LogTokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newIcoTokenSupply\",\"type\":\"uint256\"}],\"name\":\"LogIcoTokenSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participantTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newIcoTokensIssued\",\"type\":\"uint256\"}],\"name\":\"LogTokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOwnerTokensMinted\",\"type\":\"uint256\"}],\"name\":\"LogMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogApproval\",\"type\":\"event\"}]","ContractName":"Zorro02Token","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c41b9b24b80125d29ee01791889a4224d5d0792a665217cc5d9ed8bdc168273c"}]}