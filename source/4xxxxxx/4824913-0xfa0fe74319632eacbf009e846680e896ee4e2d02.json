{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyowner() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function Owned() internal {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Mortal is Owned {\r\n    function kill() public onlyowner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract Slotthereum is Mortal {\r\n\r\n    modifier onlyuser() {\r\n        if (tx.origin == msg.sender) {\r\n            _;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    Game[] public games;                                // games\r\n    mapping (address => uint) private balances;         // balances per address\r\n    uint public numberOfGames = 0;                      // number of games\r\n    uint private minBetAmount = 100000000000000;        // minimum amount per bet\r\n    uint private maxBetAmount = 1000000000000000000;    // maximum amount per bet\r\n    bytes32 private seed;\r\n    uint private nonce = 1;\r\n\r\n    struct Game {\r\n        address player;\r\n        uint id;\r\n        uint amount;\r\n        uint8 start;\r\n        uint8 end;\r\n        uint8 number;\r\n        bool win;\r\n        uint prize;\r\n        bytes32 hash;\r\n        uint blockNumber;\r\n    }\r\n\r\n    event MinBetAmountChanged(uint amount);\r\n    event MaxBetAmountChanged(uint amount);\r\n\r\n    event GameRoll(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint amount\r\n    );\r\n\r\n    event GameWin(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint8 number,\r\n        uint amount,\r\n        uint prize\r\n    );\r\n\r\n    event GameLoose(\r\n        address indexed player,\r\n        uint indexed gameId,\r\n        uint8 start,\r\n        uint8 end,\r\n        uint8 number,\r\n        uint amount,\r\n        uint prize\r\n    );\r\n\r\n    // function assert(bool assertion) internal {\r\n    //     if (!assertion) {\r\n    //         revert();\r\n    //     }\r\n    // }\r\n\r\n    // function add(uint x, uint y) internal constant returns (uint z) {\r\n    //     assert((z = x + y) >= x);\r\n    // }\r\n\r\n    function getNumber(bytes32 hash) onlyuser internal returns (uint8) {\r\n        nonce++;\r\n        seed = keccak256(block.timestamp, nonce);\r\n        return uint8(keccak256(hash, seed))%(0+9)-0;\r\n    }\r\n\r\n    function notify(address player, uint gameId, uint8 start, uint8 end, uint8 number, uint amount, uint prize, bool win) internal {\r\n        if (win) {\r\n            GameWin(\r\n                player,\r\n                gameId,\r\n                start,\r\n                end,\r\n                number,\r\n                amount,\r\n                prize\r\n            );\r\n        } else {\r\n            GameLoose(\r\n                player,\r\n                gameId,\r\n                start,\r\n                end,\r\n                number,\r\n                amount,\r\n                prize\r\n            );\r\n        }\r\n    }\r\n\r\n    function placeBet(uint8 start, uint8 end) onlyuser public payable returns (bool) {\r\n        if (msg.value < minBetAmount) {\r\n            return false;\r\n        }\r\n\r\n        if (msg.value > maxBetAmount) {\r\n            return false;\r\n        }\r\n\r\n        uint8 counter = end - start + 1;\r\n\r\n        if (counter > 7) {\r\n            return false;\r\n        }\r\n\r\n        if (counter < 1) {\r\n            return false;\r\n        }\r\n\r\n        uint gameId = games.length;\r\n        games.length++;\r\n        numberOfGames++;\r\n\r\n        GameRoll(msg.sender, gameId, start, end, msg.value);\r\n\r\n        games[gameId].id = gameId;\r\n        games[gameId].player = msg.sender;\r\n        games[gameId].amount = msg.value;\r\n        games[gameId].start = start;\r\n        games[gameId].end = end;\r\n        games[gameId].prize = 1;\r\n        games[gameId].hash = 0x0;\r\n        games[gameId].blockNumber = block.number;\r\n\r\n        if (gameId > 0) {\r\n            uint lastGameId = gameId - 1;\r\n            if (games[lastGameId].blockNumber != games[gameId].blockNumber) {\r\n                games[lastGameId].hash = block.blockhash(block.number - 1);\r\n                games[lastGameId].number = getNumber(games[lastGameId].hash);\r\n\r\n                if ((games[lastGameId].number >= games[lastGameId].start) && (games[lastGameId].number <= games[lastGameId].end)) {\r\n                    games[lastGameId].win = true;\r\n                    uint dec = games[lastGameId].amount / 10;\r\n                    uint parts = 10 - counter;\r\n                    games[lastGameId].prize = games[lastGameId].amount + dec * parts;\r\n                }\r\n\r\n                games[lastGameId].player.transfer(games[lastGameId].prize);\r\n                // balances[games[lastGameId].player] = add(balances[games[lastGameId].player], games[lastGameId].prize);\r\n\r\n                notify(\r\n                    games[lastGameId].player,\r\n                    lastGameId,\r\n                    games[lastGameId].start,\r\n                    games[lastGameId].end,\r\n                    games[lastGameId].number,\r\n                    games[lastGameId].amount,\r\n                    games[lastGameId].prize,\r\n                    games[lastGameId].win\r\n                );\r\n\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBalance() public constant returns (uint) {\r\n        if ((balances[msg.sender] > 0) && (balances[msg.sender] < this.balance)) {\r\n            return balances[msg.sender];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // function withdraw() onlyuser public returns (uint) {\r\n    //     uint amount = getBalance();\r\n    //     if (amount > 0) {\r\n    //         balances[msg.sender] = 0;\r\n    //         msg.sender.transfer(amount);\r\n    //         return amount;\r\n    //     }\r\n    //     return 0;\r\n    // }\r\n\r\n    function ownerWithdraw(uint amount) onlyowner public returns (uint) {\r\n        if (amount <= this.balance) {\r\n            msg.sender.transfer(amount);\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function setMinBetAmount(uint _minBetAmount) onlyowner public returns (uint) {\r\n        minBetAmount = _minBetAmount;\r\n        MinBetAmountChanged(minBetAmount);\r\n        return minBetAmount;\r\n    }\r\n\r\n    function setMaxBetAmount(uint _maxBetAmount) onlyowner public returns (uint) {\r\n        maxBetAmount = _maxBetAmount;\r\n        MaxBetAmountChanged(maxBetAmount);\r\n        return maxBetAmount;\r\n    }\r\n\r\n    function getGameIds() public constant returns(uint[]) {\r\n        uint[] memory ids = new uint[](games.length);\r\n        for (uint i = 0; i < games.length; i++) {\r\n            ids[i] = games[i].id;\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    function getGamePlayer(uint gameId) public constant returns(address) {\r\n        return games[gameId].player;\r\n    }\r\n\r\n    function getGameHash(uint gameId) public constant returns(bytes32) {\r\n        return games[gameId].hash;\r\n    }\r\n\r\n    function getGameBlockNumber(uint gameId) public constant returns(uint) {\r\n        return games[gameId].blockNumber;\r\n    }\r\n\r\n    function getGameAmount(uint gameId) public constant returns(uint) {\r\n        return games[gameId].amount;\r\n    }\r\n\r\n    function getGameStart(uint gameId) public constant returns(uint8) {\r\n        return games[gameId].start;\r\n    }\r\n\r\n    function getGameEnd(uint gameId) public constant returns(uint8) {\r\n        return games[gameId].end;\r\n    }\r\n\r\n    function getGameNumber(uint gameId) public constant returns(uint8) {\r\n        return games[gameId].number;\r\n    }\r\n\r\n    function getGameWin(uint gameId) public constant returns(bool) {\r\n        return games[gameId].win;\r\n    }\r\n\r\n    function getGamePrize(uint gameId) public constant returns(uint) {\r\n        return games[gameId].prize;\r\n    }\r\n\r\n    function getMinBetAmount() public constant returns(uint) {\r\n        return minBetAmount;\r\n    }\r\n\r\n    function getMaxBetAmount() public constant returns(uint) {\r\n        return maxBetAmount;\r\n    }\r\n\r\n    function () public payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint8\"},{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"win\",\"type\":\"bool\"},{\"name\":\"prize\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamePlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameWin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinBetAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBetAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameLoose\",\"type\":\"event\"}]","ContractName":"Slotthereum","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf649bab1e006a6ca3967f07c23d8c1b3337e8a12c1c212710050c8fa6a2ff01"}]}