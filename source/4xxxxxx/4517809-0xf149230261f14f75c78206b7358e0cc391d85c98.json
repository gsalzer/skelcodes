{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract SYNVault {\r\n    // flag to determine if address is for a real contract or not\r\n    bool public isSYNVault = false;\r\n\r\n    SynchroCoin synchroCoin;\r\n    address businessAddress;\r\n    uint256 unlockedAtBlockNumber;\r\n    // Locked for 345days (1year after completion of the crowdsale)\r\n    // 2129143 blocks = 24 hours * 60 minutes * 60 seconds * 345days / 14seconds per block\r\n    uint256 public constant numBlocksLocked = 2129143;\r\n\r\n    /// @notice Constructor function sets the Multisig address and\r\n    /// total number of locked tokens to transfer\r\n    function SYNVault(address _businessAddress) public {\r\n        require(_businessAddress != 0x0);\r\n        synchroCoin = SynchroCoin(msg.sender);\r\n        businessAddress = _businessAddress;\r\n        isSYNVault = true;\r\n        unlockedAtBlockNumber = SafeMath.add(block.number, numBlocksLocked); // 345 days of blocks later\r\n    }\r\n\r\n    /// @notice Transfer locked tokens to Synchrolife's wallet\r\n    function unlock() external {\r\n        // Wait your turn!\r\n        require(block.number > unlockedAtBlockNumber);\r\n        // Will fail if allocation (and therefore toTransfer) is 0.\r\n        if (!synchroCoin.transfer(businessAddress, synchroCoin.balanceOf(this))) revert();\r\n    }\r\n\r\n    // disallow payment this is for SYN not ether\r\n    function () public { revert(); }\r\n}\r\n\r\ncontract SynchroCoin is Ownable, StandardToken {\r\n\r\n    string public constant symbol = \"SYC\";\r\n    string public constant name = \"SynchroCoin\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant initialSupply = 100000000e18;    //100000000000000000000000000\r\n    \r\n    uint256 public constant startDate = 1506092400;\r\n    uint256 public constant endDate = 1508511599;\r\n    uint256 public constant firstPresaleStart = 1502884800;\r\n    uint256 public constant firstPresaleEnd = 1503835140;\r\n    uint256 public constant secondPresaleStart = 1504526400;\r\n    uint256 public constant secondPresaleEnd = 1504785540;\r\n\r\n    //55% for CrowdSale distribution\r\n    uint256 public constant crowdSalePercentage = 5500;\r\n    //20% for Synchrolife pool for rewards\r\n    uint256 public constant rewardPoolPercentage = 2000;\r\n    //9.5% for Synchrolife business + 5% for early investors\r\n    uint256 public constant businessPercentage = 1450;\r\n    //9.5% for Synchrolife team, advisors and partners\r\n    uint256 public constant vaultPercentage = 950;\r\n    //1% for Bounty\r\n    uint256 public constant bountyPercentage = 100;\r\n    \r\n    //Denominator for percentage calculation.\r\n    uint256 public constant hundredPercent = 10000; \r\n    \r\n    //First Presale: 268000000000000000000\r\n    //Second Presale: 70000000000000000000 \r\n    //Crowdsale:     417427897026000000400\r\n    uint256 public constant totalFundedEther = 755427897026000000400;\r\n    \r\n    //First Presale: 375200000000000000000\r\n    //Second Presale: 91000000000000000000\r\n    //Crowdsale:     438371225465900000400\r\n    uint256 public constant totalConsideredFundedEther = 904571225465900000400;\r\n    \r\n    SYNVault public vault;\r\n    address public businessAddress;\r\n    address public rewardPoolAddress;\r\n    \r\n    uint256 public crowdSaleTokens;\r\n    uint256 public bountyTokens;\r\n    uint256 public rewardPoolTokens;\r\n\r\n    function SynchroCoin(address _businessAddress, address _rewardPoolAddress) public {\r\n        totalSupply = initialSupply;\r\n        businessAddress = _businessAddress;\r\n        rewardPoolAddress = _rewardPoolAddress;\r\n        \r\n        vault = new SYNVault(businessAddress);\r\n        require(vault.isSYNVault());\r\n        \r\n        uint256 remainingSupply = initialSupply;\r\n        \r\n        // 55% of total to be distributed to presale and crowdsale participents\r\n        crowdSaleTokens = SafeMath.div(SafeMath.mul(totalSupply, crowdSalePercentage), hundredPercent);\r\n        remainingSupply = SafeMath.sub(remainingSupply, crowdSaleTokens);\r\n        \r\n        // 20% of total to be allocated for rewards\r\n        rewardPoolTokens = SafeMath.div(SafeMath.mul(totalSupply, rewardPoolPercentage), hundredPercent);\r\n        balances[rewardPoolAddress] = SafeMath.add(balances[rewardPoolAddress], rewardPoolTokens);\r\n        Transfer(0, rewardPoolAddress, rewardPoolTokens);\r\n        remainingSupply = SafeMath.sub(remainingSupply, rewardPoolTokens);\r\n        \r\n        // 9.5% of total goes to vault, timelocked for 1 year\r\n        uint256 vaultTokens = SafeMath.div(SafeMath.mul(totalSupply, vaultPercentage), hundredPercent);\r\n        balances[vault] = SafeMath.add(balances[vault], vaultTokens);\r\n        Transfer(0, vault, vaultTokens);\r\n        remainingSupply = SafeMath.sub(remainingSupply, vaultTokens);\r\n        \r\n        // 1% of total used for bounty. Remainder will be used for business.\r\n        bountyTokens = SafeMath.div(SafeMath.mul(totalSupply, bountyPercentage), hundredPercent);\r\n        remainingSupply = SafeMath.sub(remainingSupply, bountyTokens);\r\n        \r\n        balances[businessAddress] = SafeMath.add(balances[businessAddress], remainingSupply);\r\n        Transfer(0, businessAddress, remainingSupply);\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n    \r\n    function getBonusMultiplierAt(uint256 _timestamp) public constant returns (uint256) {\r\n        if (_timestamp >= firstPresaleStart && _timestamp < firstPresaleEnd) {\r\n            return 140;\r\n        }\r\n        else if (_timestamp >= secondPresaleStart && _timestamp < secondPresaleEnd) {\r\n            return 130;\r\n        }\r\n        else if (_timestamp < (startDate + 1 days)) {\r\n            return 120;\r\n        }\r\n        else if (_timestamp < (startDate + 7 days)) {\r\n            return 115;\r\n        }\r\n        else if (_timestamp < (startDate + 14 days)) {\r\n            return 110;\r\n        }\r\n        else if (_timestamp < (startDate + 21 days)) {\r\n            return 105;\r\n        }\r\n        else if (_timestamp <= endDate) {\r\n            return 100;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function distributeCrowdsaleTokens(address _to, uint256 _ether, uint256 _timestamp) public onlyOwner returns (uint256) {\r\n        require(_to != 0x0);\r\n        require(_ether >= 100 finney);\r\n        require(_timestamp >= firstPresaleStart);\r\n        require(_timestamp <= endDate);\r\n        \r\n        //Calculate participant's bonus\r\n        uint256 consideredFundedEther = SafeMath.div(SafeMath.mul(_ether, getBonusMultiplierAt(_timestamp)), 100);\r\n        //Calculate participant's token share\r\n        uint256 share = SafeMath.div(SafeMath.mul(consideredFundedEther, crowdSaleTokens), totalConsideredFundedEther);\r\n        balances[_to] = SafeMath.add(balances[_to], share);\r\n        Transfer(0, _to, share);\r\n        return share;\r\n    }\r\n    \r\n    function distributeBountyTokens(address[] _to, uint256[] _values) public onlyOwner {\r\n        require(_to.length == _values.length);\r\n        \r\n        uint256 i = 0;\r\n        while (i < _to.length) {\r\n            bountyTokens = SafeMath.sub(bountyTokens, _values[i]);\r\n            balances[_to[i]] = SafeMath.add(balances[_to[i]], _values[i]);\r\n            Transfer(0, _to[i], _values[i]);\r\n            i += 1;\r\n        }\r\n    }\r\n    \r\n    function completeBountyDistribution() public onlyOwner {\r\n        //After distribution of bounty tokens, transfer remaining tokens to Synchrolife business address\r\n        balances[businessAddress] = SafeMath.add(balances[businessAddress], bountyTokens);\r\n        Transfer(0, businessAddress, bountyTokens);\r\n        bountyTokens = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBonusMultiplierAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeBountyDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"businessPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"distributeBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ether\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"distributeCrowdsaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPresaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalConsideredFundedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPoolTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPoolPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSalePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPresaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPresaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPresaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_businessAddress\",\"type\":\"address\"},{\"name\":\"_rewardPoolAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SynchroCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000df7c8b2d87f4c65772daeb131243c2f00000000000000000000000000000000bf2e0140b45e058a30e268a4d793aee400000000","Library":"","SwarmSource":"bzzr://418a5923c343fcf4d06c9943fe71ba2cc757432d19b95bbc28195c5e54269492"}]}