{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract PresaleToken {\r\n    \r\n    /// Fields:\r\n    string public constant name = \"ShiftCash Presale Token\";\r\n    string public constant symbol = \"SCASH\";\r\n    uint public constant decimals = 18;\r\n    uint public constant PRICE = 598;  // per 1 Ether\r\n\r\n    //  price\r\n    // Cap is 4000 ETH\r\n    // 1 eth = 598;  presale SCASH tokens\r\n    uint public constant TOKEN_SUPPLY_LIMIT = 2392000 * (1 ether / 1 wei);\r\n\r\n    enum State{\r\n        Init,\r\n        Running,\r\n        Paused,\r\n        Migrating,\r\n        Migrated\r\n    }\r\n\r\n    State public currentState = State.Init;\r\n    uint public totalSupply = 0; // amount of tokens already sold\r\n\r\n    // Gathered funds can be withdrawn only to escrow's address.\r\n    address public escrow = 0;\r\n\r\n    // Token manager has exclusive priveleges to call administrative\r\n    // functions on this contract.\r\n    address public tokenManager = 0;\r\n\r\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\r\n    address public crowdsaleManager = 0;\r\n\r\n    mapping (address => uint256) private balance;\r\n    mapping (address => bool) ownerAppended;\r\n    address[] public owners;\r\n\r\n    /// Modifiers:\r\n    modifier onlyTokenManager()     { require(msg.sender == tokenManager); _; }\r\n    modifier onlyCrowdsaleManager() { require(msg.sender == crowdsaleManager); _; }\r\n    modifier onlyInState(State state){ require(state == currentState); _; }\r\n\r\n    /// Events:\r\n    event LogBurn(address indexed owner, uint value);\r\n    event LogStateSwitch(State newState);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\r\n    /// Functions:\r\n    /// @dev Constructor\r\n    /// @param _tokenManager Token manager address.\r\n    function PresaleToken(address _tokenManager, address _escrow) public {\r\n        require(_tokenManager != 0);\r\n        require(_escrow != 0);\r\n\r\n        tokenManager = _tokenManager;\r\n        escrow = _escrow;\r\n    }\r\n\r\n    function buyTokens(address _buyer) public payable onlyInState(State.Running) {\r\n        require(msg.value != 0);\r\n        uint newTokens = msg.value * PRICE;\r\n\r\n        require(totalSupply + newTokens <= TOKEN_SUPPLY_LIMIT);\r\n\r\n        balance[_buyer] += newTokens;\r\n        totalSupply += newTokens;\r\n        \r\n        if(!ownerAppended[_buyer]) {\r\n            ownerAppended[_buyer] = true;\r\n            owners.push(_buyer);\r\n        }\r\n        \r\n        Transfer(msg.sender, _buyer, newTokens);\r\n\r\n        if(this.balance > 0) {\r\n            require(escrow.send(this.balance));\r\n        }\r\n\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function burnTokens(address _owner) public onlyCrowdsaleManager onlyInState(State.Migrating) {\r\n        uint tokens = balance[_owner];\r\n        require(tokens != 0);\r\n\r\n        balance[_owner] = 0;\r\n        totalSupply -= tokens;\r\n\r\n        LogBurn(_owner, tokens);\r\n\r\n        // Automatically switch phase when migration is done.\r\n        if(totalSupply == 0) {\r\n            currentState = State.Migrated;\r\n            LogStateSwitch(State.Migrated);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256) {\r\n        return balance[_owner];\r\n    }\r\n\r\n    function setPresaleState(State _nextState) public onlyTokenManager {\r\n        // Init -> Running\r\n        // Running -> Paused\r\n        // Running -> Migrating\r\n        // Paused -> Running\r\n        // Paused -> Migrating\r\n        // Migrating -> Migrated\r\n        bool canSwitchState\r\n        =  (currentState == State.Init && _nextState == State.Running)\r\n        || (currentState == State.Running && _nextState == State.Paused)\r\n        // switch to migration phase only if crowdsale manager is set\r\n        || ((currentState == State.Running || currentState == State.Paused)\r\n        && _nextState == State.Migrating\r\n        && crowdsaleManager != 0x0)\r\n        || (currentState == State.Paused && _nextState == State.Running)\r\n        // switch to migrated only if everyting is migrated\r\n        || (currentState == State.Migrating && _nextState == State.Migrated\r\n        && totalSupply == 0);\r\n\r\n        require(canSwitchState);\r\n\r\n        currentState = _nextState;\r\n        LogStateSwitch(_nextState);\r\n    }\r\n\r\n    /// Setters/getters\r\n    function setTokenManager(address _mgr) public onlyTokenManager {\r\n        tokenManager = _mgr;\r\n    }\r\n\r\n    function setCrowdsaleManager(address _mgr) public onlyTokenManager {\r\n        // You can't change crowdsale contract when migration is in progress.\r\n        require(currentState != State.Migrating);\r\n        crowdsaleManager = _mgr;\r\n    }\r\n\r\n    function getTokenManager() constant returns(address) {\r\n        return tokenManager;\r\n    }\r\n\r\n    function getCrowdsaleManager() constant returns(address) {\r\n        return crowdsaleManager;\r\n    }\r\n\r\n    function getCurrentState() constant returns(State) {\r\n        return currentState;\r\n    }\r\n\r\n    function getPrice() constant returns(uint) {\r\n        return PRICE;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint256) {\r\n        return (owners[index], balance[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n    \r\n\r\n    // Default fallback function\r\n    function() payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mgr\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextState\",\"type\":\"uint8\"}],\"name\":\"setPresaleState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_escrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LogStateSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PresaleToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000037eb84e50ec8fa5cafd6e2c8b811f3ba8a235e790000000000000000000000004158d17661d970ea2980c37b274adee92aafd92d","Library":"","SwarmSource":"bzzr://8f33aa11872176eef9d6095a5ef374a13916f0f8d8b44a96a721a051fc7a83ec"}]}