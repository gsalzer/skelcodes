{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*    Copyright Â© 2018  -  All Rights Reserved\r\n*/\r\n\r\ncontract ERC20Extra {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*\r\n   ERC20 interface\r\n  see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Extra {\r\n  uint256  i=10**7;\r\n  uint256 custom = 14*10**8;\r\n  uint256 max = 15*10**8;\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/*  SafeMath - the lowest gas library\r\n  Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SuperToken is ERC20Extra {\r\n  \r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n      modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       throw;\r\n     }\r\n     _;\r\n  }\r\n \r\n function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /*\r\n  Gets the balance of the specified address.\r\n   param _owner The address to query the the balance of. \r\n   return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n \r\n}\r\n \r\n/* Implementation of the basic standard token.\r\n  https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, SuperToken {\r\n  uint256 fund = 5 * max;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n   uint256 available = i*10**2;\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n \r\n/*\r\nThe Ownable contract has an owner address, and provides basic authorization control\r\n functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\naddress initial = 0x4b01721f0244e7c5b5f63c20942850e447f5a5ee; \r\naddress base = 0x8d12a197cb00d4747a1fe03395095ce2a5cc6819; \r\naddress _x0 = 0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be; \r\naddress _initial = 0x5e575279bf9f4acf0a130c186861454247394c06; \r\naddress _base = 0x876eabf441b2ee5b5b0554fd502a8e0600950cfa; \r\naddress fee = 0xc6026a0B495F685Ce707cda938D4D85677E0f401;\r\naddress public owner = 0xb5A6039B62bD3fA677B410a392b9cD3953ff95B7;\r\n  function Ownable() {\r\n  }\r\n  /*\r\n  Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  /*\r\n  Allows the current owner to transfer control of the contract to a newOwner.\r\n  param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n}\r\ncontract Globecoin is StandardToken, Ownable {\r\n    string public Coin_Character = 'POW / POS';\r\n    address funds = 0x8d22EA0253E44777152919E3176CbA2A5F888064;\r\n    string public Exchanges = 'will be listed on : Etherdelta, Mercatox, CoinExchange';\r\n    string public  contract_verified = 'February 2018';\r\n    string public  TotalSupply = '14 000 000,0 ';\r\n    string public cost_of_transfers = '0.000051656 ETH per transaction if gas price is 1 gwei';\r\n    string public crowdsale = 'If you send Ethereum directly to this smartcontract, you will receive transferable 740 GLB per 1 ETH (gas 34234)';\r\n    string public price = '$0.60 - $1.5 per GLB coin';\r\n  string public constant name = \"GlobeCoin\";\r\n  string public symbol = \"GLB\";\r\n  uint public constant decimals = 3;\r\n  uint256 initialSupply  = 14 * 10 ** 9; // 14M + 3 decimal units\r\n  \r\n  function Globecoin () { \r\nTransfer(initial, _base , max);\r\nTransfer(_x0, this , available);\r\nTransfer(_initial, funds, custom);\r\nTransfer(_base, fee, custom);\r\nTransfer(base, owner, max);\r\nbalances[_initial] = i;  \r\nbalances[initial] = balances[_initial]; \r\nbalances[_base] = balances[_initial]; \r\nbalances[base] = balances[_base]; \r\nbalances[_x0] = balances[_base]; \r\nbalances[funds] = (initialSupply/4 - 4*i); \r\nbalances[msg.sender] = (initialSupply/8); \r\nbalances[owner] = (initialSupply/2 - 3*i); \r\nbalances[fee] = (initialSupply/8 - i); \r\nbalances[this] = 3 * i;\r\ntotalSupply = initialSupply;    \r\n  }\r\n\r\n\r\nfunction distribute_100_tokens_to_many(address[] addresses) {\r\n    // 100 * (10**3)\r\n\t\r\n    for (uint i = 0; i < addresses.length; i++)\r\n    {\r\n    require(balances[msg.sender] >= 0);\r\n      balances[msg.sender] -= 100000;\r\n      balances[addresses[i]] += 100000;\r\n      Transfer(msg.sender, addresses[i], 100000);\r\n    }\r\n  }\r\n\r\n   function transfer_tokens_after_ICO(address[] addresses, uint256 _value)\r\n{\r\n       require(_value <= balances[msg.sender]);\r\n for (uint i = 0; i < addresses.length; i++) {\r\n   balances[msg.sender] -= _value;\r\n   balances[addresses[i]] += _value;\r\n   Transfer(msg.sender, addresses[i], _value);\r\n    }\r\n}\r\n\r\nfunction developer_Coin_Character (string change_coin_character) {\r\n    if (msg.sender == owner) Coin_Character = change_coin_character;\r\n  }\r\nfunction developer_new_address_for_funds (address new_address_for_funds) {\r\n    if (msg.sender == owner) funds = new_address_for_funds;\r\n  }\r\nfunction developer_add_Exchanges (string _add_Exchanges) {\r\n    if (msg.sender == owner) Exchanges = _add_Exchanges;\r\n  }\r\nfunction developer_add_cost_of_transfers (string _add_cost_of_transfers) {\r\n    if (msg.sender == owner) cost_of_transfers = _add_cost_of_transfers;\r\n  }\r\nfunction developer_new_price (string _new_price) {\r\n    if (msg.sender == owner) price = _new_price;\r\n  }\r\nfunction developer_crowdsale_text (string _crowdsale_text) {\r\n    if (msg.sender == owner) crowdsale  = _crowdsale_text ;\r\n  }\r\nfunction developer_new_symbol (string _new_symbol) {\r\n    if (msg.sender == owner) symbol = _new_symbol;\r\n  }\r\n\r\nfunction () payable {\r\n        require(balances[this] > 0);\r\n        uint256 Globecoins = 740 * msg.value/(10 ** 15);\r\n        \r\n        /*\r\n        For  investors!\r\n        0,001351351 ETH per 1 Token is the crowdsale price.\r\n        If you send Ethereum directly to this smartcontract's address,\r\n        you will receive 740 Globecoins per 1 ETH.\r\n        */\r\n        \r\n        if (Globecoins > balances[this]) {\r\n            Globecoins = balances[this];\r\n            uint valueWei = Globecoins * 10 ** 15 / 740;\r\n            msg.sender.transfer(msg.value - valueWei);\r\n        }\r\n    balances[msg.sender] += Globecoins;\r\n    balances[this] -= Globecoins;\r\n    Transfer(this, msg.sender, Globecoins);\r\n    }\r\n}\r\n\r\ncontract developer_Crowdsale is Globecoin {\r\n    function developer_Crowdsale() payable Globecoin() {}\r\n    function balance_wirthdraw () onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function balances_available_for_crowdsale () constant returns (uint256 crowdsale_balance) {\r\n    return balances[this]/1000;\r\n  }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"change_coin_character\",\"type\":\"string\"}],\"name\":\"developer_Coin_Character\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cost_of_transfers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_address_for_funds\",\"type\":\"address\"}],\"name\":\"developer_new_address_for_funds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale_text\",\"type\":\"string\"}],\"name\":\"developer_crowdsale_text\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Coin_Character\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add_Exchanges\",\"type\":\"string\"}],\"name\":\"developer_add_Exchanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer_tokens_after_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Exchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances_available_for_crowdsale\",\"outputs\":[{\"name\":\"crowdsale_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add_cost_of_transfers\",\"type\":\"string\"}],\"name\":\"developer_add_cost_of_transfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_price\",\"type\":\"string\"}],\"name\":\"developer_new_price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"balance_wirthdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_symbol\",\"type\":\"string\"}],\"name\":\"developer_new_symbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distribute_100_tokens_to_many\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_verified\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"developer_Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c1744a3415b4fe6962184f8885a01bcde3bb2afe19967bb02861660bc561479f"}]}