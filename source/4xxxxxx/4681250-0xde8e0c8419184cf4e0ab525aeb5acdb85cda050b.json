{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n* The \"Become a Billionaire\" decentralized Raffle v1.0, Main-Net Release.\r\n* ~by Gluedog \r\n* -----------\r\n* \r\n* Compiler version: 0.4.19+commit.c4cbbb05.Emscripten.clang\r\n* \r\n* The weekly Become a Billionaire decentralized raffle is the basis of the deflationary mechanism for Billionaire Token\r\n* ---------------------------------------------------------------------------------------------------------------------\r\n* Every week, users can register 10 XBL to an Ethereum Smart Contract address – this is the equivalent of buying one ticket,\r\n*     more tickets mean a better chance to win. Users can buy an unlimited number of tickets to increase their chances.\r\n*     At the end of the week, the Smart Contract will choose three winners at random. First place will get 40% of\r\n*     the tokens  that were raised during that week, second place gets 20% and third place gets 10%.\r\n*     From the remaining 30% of the tokens: 10% are burned – as an offering to the market gods. The other 20% are sent\r\n*     to another Smart Contract Address that works like a twisted faucet – rewarding people for burning their own coins.\r\n* \r\n* The Become a Billionaire raffle Smart Contract will run forever, and will have an internal timer that will reset\r\n*     itself every seven days or after there have been 256 tickets registered to the Raffle. The players are registered\r\n*     by creating an internal mapping, inside the Smart Contract, a mapping of every address that registers tokens to \r\n*     it and their associated number of tickets. This mapping is reset every time the internal timer resets (every seven days).\r\n*/\r\n\r\npragma solidity ^0.4.8;\r\ncontract XBL_ERC20Wrapper\r\n{\r\n    function transferFrom(address from, address to, uint value) returns (bool success);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function burn(uint256 _value) returns (bool success);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function totalSupply() constant returns (uint256 total_supply);\r\n}\r\n\r\ncontract BillionaireTokenRaffle\r\n{\r\n    address private winner1;\r\n    address private winner2;\r\n    address private winner3;\r\n\r\n    address public XBLContract_addr;\r\n    address public burner_addr;\r\n    address public raffle_addr;\r\n    address private owner_addr;\r\n\r\n    address[] private raffle_bowl; /* Holds ticket entries */\r\n    address[] private participants;\r\n    uint256[] private seeds;\r\n\r\n    uint64 public unique_players; /* Unique number of addresses registered in a week */\r\n    uint256 public total_burned_by_raffle;\r\n    uint256 public next_week_timestamp;\r\n    uint256 private minutes_in_a_week = 10080;\r\n    uint256 public raffle_balance;\r\n    uint256 public ticket_price;\r\n    uint256 public current_week;\r\n    uint256 public total_supply;\r\n    /* Initiate the XBL token wrapper */\r\n    XBL_ERC20Wrapper private ERC20_CALLS;\r\n\r\n    mapping(address => uint256) public address_to_tickets; /* Will be made private after open beta is finished. */\r\n    mapping(address => uint256) public address_to_tokens_prev_week0; /* Variables which will be made public  */\r\n    mapping(address => uint256) public address_to_tokens_prev_week1; /*  after each week's raffle has ended */\r\n\r\n    uint8 public prev_week_ID; /* Keeps track of which variable is the correct indicator of prev week mapping\r\n                                    Can only be [0] or [1]. */\r\n    address public lastweek_winner1;\r\n    address public lastweek_winner2;\r\n    address public lastweek_winner3;\r\n\r\n    /* Init */\r\n    function BillionaireTokenRaffle()\r\n    {\r\n        /* Billionaire Token contract address */\r\n        XBLContract_addr = 0x49AeC0752E68D0282Db544C677f6BA407BA17ED7;\r\n        ERC20_CALLS = XBL_ERC20Wrapper(XBLContract_addr);\r\n        total_supply = ERC20_CALLS.totalSupply();\r\n        ticket_price = 10000000000000000000; /* 10 XBL  */\r\n        raffle_addr = address(this); /* Own address                              */\r\n        owner_addr = msg.sender; /* Set the owner address as the initial sender */\r\n        next_week_timestamp = now + minutes_in_a_week * 1 minutes; /* Will get set every time resetRaffle() is called */\r\n    }\r\n\r\n    /* A modifier that can be applied to functions to only allow the owner to execute them.       */\r\n    /* This is very useful in cases where one would like to upgrade the deflationary algorithm.   */\r\n    /* We can simply use setter functions on the \"Burner address\",                                */\r\n    /* so that if we update the Burner, we can just point the Raffle to the new version of it.    */\r\n    modifier onlyOwner()\r\n    {\r\n        require (msg.sender == owner_addr);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner()\r\n    {\r\n        require(msg.sender == burner_addr);\r\n        _;\r\n    }\r\n\r\n    /* <<<--- Burner accesible functions --->>> */\r\n    /* <<<--- Burner accesible functions --->>> */\r\n    /* <<<--- Burner accesible functions --->>> */\r\n\r\n    function getLastWeekStake(address user_addr) public onlyBurner returns (uint256 last_week_stake)\r\n    {   /* The burner accesses this function to retrieve each player's stake from the previous week. */\r\n        if (prev_week_ID == 0)\r\n            return address_to_tokens_prev_week1[user_addr];\r\n        if (prev_week_ID == 1)\r\n            return address_to_tokens_prev_week0[user_addr];\r\n    }\r\n\r\n    function reduceLastWeekStake(address user_addr, uint256 amount) public onlyBurner\r\n    {   /* After a succesful burn, the burner will call this function and reduce the player's last_week_stake. */\r\n        if (prev_week_ID == 0)\r\n            address_to_tokens_prev_week1[user_addr] -= amount;\r\n        if (prev_week_ID == 1)\r\n            address_to_tokens_prev_week0[user_addr] -= amount;\r\n    }\r\n\r\n    /* <<<--- Public utility functions --->>> */\r\n    /* <<<--- Public utility functions --->>> */\r\n    /* <<<--- Public utility functions --->>> */\r\n\r\n    function registerTickets(uint256 number_of_tickets) public returns (int8 registerTickets_STATUS)\r\n    {\r\n        /*  registerTickets RETURN CODES:\r\n\r\n            [-6] - Raffle still has tickets after fillBurner() called \r\n            [-5] - fillBurner() null burner addr, raised error\r\n            [-4] - fillWeeklyArrays() prev_week_ID invalid value, raised error.\r\n            [-3] - getWinners() fail, raised error.\r\n            [-2] - ACTUAL ALLOWANCE CHECK MISMATCH.\r\n            [-1] - INVALID INPUT (zero or too many tickets).\r\n            [0 ] - REGISTERED OK.                                   */\r\n\r\n        /* Check the ticket amount limit (256 max) */\r\n        if (raffle_bowl.length > 256)\r\n        {\r\n            next_week_timestamp = now;\r\n        }\r\n\r\n        /* Check the time limit, one week is max. */\r\n        if (now >= next_week_timestamp)\r\n        {\r\n            int8 RAFFLE_STATUS = resetRaffle();\r\n            /* Error checks */\r\n            if (RAFFLE_STATUS == -2)\r\n                return -3; /* getWinners() errored, raise it! */\r\n\r\n            if (RAFFLE_STATUS == -3)\r\n                return -5; /* fillBurner() errored, raise it! */\r\n\r\n            if (RAFFLE_STATUS == -4)\r\n                return -6; /* Raffle still has tickets after fillBurner() called */\r\n        }\r\n        /* Before users will call registerTickets function,they will first have to call approve()    */\r\n        /* on the XBL contract address and approve the Raffle to spend tokens on their behalf.      */\r\n        /* After they have called approve, they will have to call this registerTickets() function  */\r\n\r\n        if ( (number_of_tickets == 0) || (number_of_tickets > 5) || (address_to_tickets[msg.sender] >= 5) )\r\n            return -1; /* Invalid Input */\r\n\r\n        if (ERC20_CALLS.allowance(msg.sender, raffle_addr) < ticket_price * number_of_tickets)\r\n            return -2; /* Allowance check mismatch */\r\n\r\n        if (ERC20_CALLS.balanceOf(msg.sender) < ticket_price * number_of_tickets) \r\n            return - 2; /* Allowance check mismatch */\r\n\r\n        /*  Reaching this point means the ticket registrant is legit  */\r\n        /*  Every ticket will add an entry to the raffle_bowl         */\r\n        if (fillWeeklyArrays(number_of_tickets, msg.sender) == -1)\r\n            return -4; /* prev_week_ID invalid value */\r\n\r\n        else\r\n        {   /* Everything checks out, transfer the coins from the user to the Raffle */\r\n            ERC20_CALLS.transferFrom(msg.sender, raffle_addr, number_of_tickets * ticket_price);\r\n            return 0; \r\n        }\r\n    }\r\n\r\n    /* <<<--- Owner functions --->>> */\r\n    /* <<<--- Owner functions --->>> */\r\n    /* <<<--- Owner functions --->>> */\r\n\r\n    function setBurnerAddress(address _burner_addr) public onlyOwner\r\n    {\r\n        burner_addr = _burner_addr;\r\n    }\r\n\r\n    function setTicketPrice(uint256 _ticket_price) public onlyOwner\r\n    {\r\n        ticket_price = _ticket_price;\r\n    }\r\n\r\n    function setOwnerAddr(address _owner_addr) public onlyOwner\r\n    {\r\n        owner_addr = _owner_addr;\r\n    }\r\n\r\n    /* <<<--- Internal functions --->>> */\r\n    /* <<<--- Internal functions --->>> */\r\n    /* <<<--- Internal functions --->>> */\r\n\r\n    function getPercent(uint8 percent, uint256 number) private returns (uint256 result)\r\n    {\r\n        return number * percent / 100;\r\n    }\r\n\r\n    function getRand(uint256 upper_limit) private returns (uint256 random_number)\r\n    {\r\n        return uint(sha256(uint256(block.blockhash(block.number-1)) * uint256(sha256(msg.sender)))) % upper_limit;\r\n    }\r\n    \r\n    function getRandWithSeed(uint256 upper_limit, uint seed) private returns (uint256 random_number)\r\n    {\r\n        return seed % upper_limit;\r\n    }\r\n\r\n    function resetWeeklyVars() private returns (bool success)\r\n    {   /*  After the weekly vars have been been reset, the player that last\r\n            registered (if this gets called from registerTickets()) will have\r\n            to have his tickets added to next week's Raffle Bowl.               */\r\n\r\n        total_supply = ERC20_CALLS.totalSupply();\r\n\r\n        /* Clear everything. */\r\n        for (uint i = 0; i < participants.length; i++)\r\n        {\r\n            address_to_tickets[participants[i]] = 0;\r\n\r\n            /* Clear the opposite of whatever prev_week_ID is */\r\n            if (prev_week_ID == 0)\r\n                address_to_tokens_prev_week1[participants[i]] = 0;\r\n            if (prev_week_ID == 1)\r\n                address_to_tokens_prev_week0[participants[i]] = 0;\r\n        }\r\n\r\n        seeds.length = 0;\r\n        raffle_bowl.length = 0;\r\n        participants.length = 0;\r\n        unique_players = 0;\r\n        \r\n        lastweek_winner1 = winner1;\r\n        lastweek_winner2 = winner2;\r\n        lastweek_winner3 = winner3;\r\n        winner1 = 0x0;\r\n        winner2 = 0x0;\r\n        winner3 = 0x0;\r\n        \r\n        prev_week_ID++;\r\n        if (prev_week_ID == 2)\r\n            prev_week_ID = 0;\r\n\r\n        return success;\r\n    }\r\n\r\n    function resetRaffle() private returns (int8 resetRaffle_STATUS)\r\n    {\r\n        /*  resetRaffle STATUS CODES:\r\n\r\n            [-5] - burnTenPercent() error            \r\n            [-4] - Raffle still has tokens after fillBurner().\r\n            [-3] - fillBurner() error.\r\n            [-2] - getWinners() error.\r\n            [-1] - We have no participants.\r\n            [0 ] - ALL OK.\r\n            [1 ] - Only one player, was refunded.\r\n            [2 ] - Two players, were refunded.\r\n            [3 ] - Three players, refunded.            */\r\n\r\n        while (now >= next_week_timestamp)\r\n        {\r\n            next_week_timestamp += minutes_in_a_week * 1 minutes;\r\n            current_week++;\r\n        }\r\n\r\n        if (raffle_bowl.length == 0)\r\n        {   /*   We have no registrants.  */\r\n            /* Reset the stats and return */\r\n            resetWeeklyVars(); \r\n            return -1;\r\n        }\r\n\r\n        if (unique_players < 4)\r\n        {   /* We have between 1 and three players in the raffle */\r\n            for (uint i = 0; i < raffle_bowl.length; i++)\r\n            { /* Refund their tokens */ \r\n                if (address_to_tickets[raffle_bowl[i]] != 0)\r\n                {\r\n                    ERC20_CALLS.transfer(raffle_bowl[i], address_to_tickets[raffle_bowl[i]] * ticket_price);\r\n                    address_to_tickets[raffle_bowl[i]] = 0;\r\n                }\r\n            }\r\n            /* Reset variables. */\r\n            resetWeeklyVars();\r\n            /* Return 1, 2 or 3 depending on how many raffle players were refunded */\r\n            return int8(unique_players);\r\n        }\r\n        /* At this point we assume that we have more than three unique players */\r\n        getWinners(); /* Choose three winners */\r\n\r\n        /* Do we have winners? */\r\n        if ( (winner1 == 0x0) || (winner2 == 0x0) || (winner3 == 0x0) )\r\n            return -2;\r\n\r\n        /* We have three winners! Proceed with rewards */\r\n        raffle_balance = ERC20_CALLS.balanceOf(raffle_addr);\r\n\r\n        /* Transfer 40%, 20% and 10% of the tokens to their respective winners */ \r\n        ERC20_CALLS.transfer(winner1, getPercent(40, raffle_balance));\r\n        ERC20_CALLS.transfer(winner2, getPercent(20, raffle_balance));\r\n        ERC20_CALLS.transfer(winner3, getPercent(10, raffle_balance));\r\n        /* Burn 10% */\r\n        if (burnTenPercent(raffle_balance) != true)\r\n            return -5;\r\n\r\n        /* Fill the burner with the rest of the tokens. */\r\n        if (fillBurner() == -1)\r\n            return -3; /* Burner addr NULL | error */ \r\n\r\n        /* Reset variables. */\r\n        resetWeeklyVars();\r\n\r\n        if (ERC20_CALLS.balanceOf(raffle_addr) > 0)\r\n            return -4; /* We still have a positive balance | error */\r\n\r\n        return 0; /* Everything OK */\r\n    }\r\n\r\n    function getWinners() private returns (int8 getWinners_STATUS)\r\n    {\r\n        /* Acquire the first random number using previous blockhash as an initial seed. */\r\n        uint initial_rand = getRand(seeds.length);\r\n\r\n        /* Use this first random number to choose one of the seeds from the array. */\r\n        uint firstwinner_rand = getRandWithSeed(seeds.length, seeds[initial_rand]);\r\n\r\n        /* This new random number is used to grab the first winner's index from raffle_bowl. */\r\n        winner1 = raffle_bowl[firstwinner_rand];\r\n\r\n        /* Find the position of winner1 in participants[] */\r\n        for (uint16 i = 0; i < participants.length; i++)\r\n        {\r\n            if (participants[i] == winner1)\r\n            {\r\n                uint16 winner1_index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        /* Then choose two more winners, based on the initial position of winner1, looping over participants[] now. */\r\n        if (winner1_index+1 >= participants.length)\r\n        {\r\n            winner2 = participants[0];\r\n            winner3 = participants[1];\r\n\r\n            return 0;\r\n        }\r\n\r\n        if (winner1_index+2 >= participants.length)\r\n        {\r\n            winner2 = participants[winner1_index+1];\r\n            winner3 = participants[0];\r\n\r\n            return 0;\r\n        }\r\n\r\n        winner2 = participants[winner1_index+1];\r\n        winner3 = participants[winner1_index+2];\r\n\r\n        return 0;\r\n    }\r\n\r\n    function fillBurner() private returns (int8 fillBurner_STATUS)\r\n    {\r\n        /* [-1]: Burner Address NULL\r\n        *  [ 0]: OK\r\n        */\r\n        if (burner_addr == 0x0)\r\n            return -1;\r\n\r\n        ERC20_CALLS.transfer(burner_addr, ERC20_CALLS.balanceOf(raffle_addr));\r\n        return 0;\r\n    }\r\n\r\n    function fillWeeklyArrays(uint256 number_of_tickets, address user_addr) private returns (int8 fillWeeklyArrays_STATUS)\r\n    {\r\n        /*  [-1] Error with prev_week_ID\r\n        *   [0]  OK                        */\r\n\r\n        if ((prev_week_ID != 0) && (prev_week_ID != 1))\r\n            return -1;\r\n\r\n        /* Record unique players. */\r\n        if (address_to_tickets[user_addr] == 0)\r\n        {\r\n            unique_players++;\r\n            participants.push(user_addr);\r\n        }\r\n\r\n        address_to_tickets[user_addr] += number_of_tickets;\r\n        \r\n        if (prev_week_ID == 0)\r\n            address_to_tokens_prev_week0[user_addr] += number_of_tickets * ticket_price;\r\n        if (prev_week_ID == 1)\r\n            address_to_tokens_prev_week1[user_addr] += number_of_tickets * ticket_price;\r\n\r\n        uint256 _ticket_number = number_of_tickets;\r\n        while (_ticket_number > 0)\r\n        {\r\n            raffle_bowl.push(user_addr);\r\n            _ticket_number--;\r\n        }\r\n        /* Capture a seed from the user. */\r\n        seeds.push(uint(sha256(user_addr)) * uint(sha256(now)));\r\n\r\n        return 0;\r\n    }\r\n\r\n    function burnTenPercent(uint256 raffle_balance) private returns (bool success_state)\r\n    {\r\n        uint256 amount_to_burn = getPercent(10, raffle_balance);\r\n        total_burned_by_raffle += amount_to_burn;\r\n        /* Burn the coins, return success state */\r\n        if (ERC20_CALLS.burn(amount_to_burn) == true)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /* <<<--- Debug ONLY functions --->>> */\r\n    /* <<<--- Debug ONLY functions --->>> */\r\n    /* <<<--- Debug ONLY functions --->>> */\r\n\r\n    function dSET_XBL_ADDRESS(address _XBLContract_addr) public onlyOwner\r\n    {   /* These will be hardcoded in the production version. */\r\n        XBLContract_addr = _XBLContract_addr;\r\n        ERC20_CALLS = XBL_ERC20Wrapper(XBLContract_addr);\r\n        total_supply = ERC20_CALLS.totalSupply();\r\n    }\r\n\r\n    function dTRIGGER_NEXTWEEK_TIMESTAMP() public onlyOwner\r\n    {   /* Trigger end week quicker. */\r\n        next_week_timestamp = now;\r\n    }\r\n\r\n    function dKERNEL_PANIC() public onlyOwner\r\n    {   /* Out of Gas panic function. */\r\n        for (uint i = 0; i < raffle_bowl.length; i++)\r\n        { /* Refund everyone's tokens */ \r\n            if (address_to_tickets[raffle_bowl[i]] != 0)\r\n            {\r\n                ERC20_CALLS.transfer(raffle_bowl[i], address_to_tickets[raffle_bowl[i]] * ticket_price);\r\n                address_to_tickets[raffle_bowl[i]] = 0;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"prev_week_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticket_price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number_of_tickets\",\"type\":\"uint256\"}],\"name\":\"registerTickets\",\"outputs\":[{\"name\":\"registerTickets_STATUS\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticket_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_to_tokens_prev_week0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dKERNEL_PANIC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next_week_timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_addr\",\"type\":\"address\"}],\"name\":\"getLastWeekStake\",\"outputs\":[{\"name\":\"last_week_stake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_to_tickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XBLContract_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_XBLContract_addr\",\"type\":\"address\"}],\"name\":\"dSET_XBL_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffle_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastweek_winner3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner_addr\",\"type\":\"address\"}],\"name\":\"setBurnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastweek_winner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_burned_by_raffle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastweek_winner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_week\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_to_tokens_prev_week1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduceLastWeekStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unique_players\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner_addr\",\"type\":\"address\"}],\"name\":\"setOwnerAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dTRIGGER_NEXTWEEK_TIMESTAMP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffle_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BillionaireTokenRaffle","CompilerVersion":"v0.4.19-nightly.2017.11.11+commit.284c3839","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df569a407dcf643c918cfdab0fd984f748efd1aed9d556199b3662c58fa23933"}]}