{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4;\r\n\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address _account) public constant returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract Token is ERC20 {\r\n    // Balances for trading\r\n    // Default balance - 0\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public FreezeBalances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    // Total amount of supplied tokens\r\n    uint256 public totalSupply;\r\n    uint256 public preSaleSupply;\r\n    uint256 public ICOSupply;\r\n    uint256 public userGrowsPoolSupply;\r\n    uint256 public auditSupply;\r\n    uint256 public bountySupply;\r\n\r\n    // Total tokens remind balance\r\n    uint256 public totalTokensRemind;\r\n\r\n    // Information about token\r\n    string public constant name = \"AdMine\";\r\n    string public constant symbol = \"MCN\";\r\n    address public owner;\r\n    uint8 public decimals = 5;\r\n\r\n    // If function has this modifier, only owner can execute this function\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    uint public unfreezeTime;\r\n    uint public AdmineTeamTokens;\r\n    uint public AdmineAdvisorTokens;\r\n\r\n\r\n    function Token() public {\r\n        owner = msg.sender;\r\n        // 100 миллионов токенов  = 100 000 000\r\n        // 100 000 000 * 10^5 = 10000000000000\r\n        totalSupply = 10000000000000;\r\n\r\n        // Pre Sale supply calculate 5%\r\n        preSaleSupply = totalSupply * 5 / 100;\r\n\r\n        // ICO supply calculate 60%\r\n        ICOSupply = totalSupply * 60 / 100;\r\n\r\n        // User growth pool 10%\r\n        userGrowsPoolSupply = totalSupply * 10 / 100;\r\n\r\n        // AdMine team tokens 15%\r\n        AdmineTeamTokens = totalSupply * 15 / 100;\r\n\r\n        // Admine advisors tokens supply 6%\r\n        AdmineAdvisorTokens = totalSupply * 6 / 100;\r\n\r\n        // Audit tokens supply 2%\r\n        auditSupply = totalSupply * 2 / 100;\r\n\r\n        // Bounty tokens supply 2%\r\n        bountySupply = totalSupply * 2 / 100;\r\n\r\n        totalTokensRemind = totalSupply;\r\n        balances[owner] = totalSupply;\r\n        unfreezeTime = now + 1 years;\r\n\r\n        freeze(0x01306bfbC0C20BEADeEc30000F634d08985D87de, AdmineTeamTokens);\r\n    }\r\n\r\n    // Transfere tokens to audit partners (2%)\r\n    function transferAuditTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(auditSupply>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        auditSupply -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    // Transfer tokens to bounty partners (2%)\r\n    function transferBountyTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(bountySupply>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        bountySupply -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    function returnBountyTokens(address _from, uint256 _amount) public onlyOwner {\r\n        require(balances[_from]>=_amount);\r\n        balances[owner] += _amount;\r\n        balances[_from] -= _amount;\r\n        bountySupply += _amount;\r\n        totalTokensRemind += _amount;\r\n    }\r\n\r\n    // Transfer tokens to AdMine users pool (10%)\r\n    function transferUserGrowthPoolTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(userGrowsPoolSupply>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        userGrowsPoolSupply -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    function returnUserGrowthPoolTokens(address _from, uint256 _amount) public onlyOwner {\r\n        require(balances[_from]>=_amount);\r\n        balances[owner] += _amount;\r\n        balances[_from] -= _amount;\r\n        userGrowsPoolSupply += _amount;\r\n        totalTokensRemind += _amount;\r\n    }\r\n\r\n    // Transfer tokens to advisors (6%)\r\n    function transferAdvisorTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(AdmineAdvisorTokens>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        AdmineAdvisorTokens -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    function returnAdvisorTokens(address _from, uint256 _amount) public onlyOwner {\r\n        require(balances[_from]>=_amount);\r\n        balances[owner] += _amount;\r\n        balances[_from] -= _amount;\r\n        AdmineAdvisorTokens += _amount;\r\n        totalTokensRemind += _amount;\r\n    }\r\n\r\n    // Transfer tokens to ico partners (60%)\r\n    function transferIcoTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(ICOSupply>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        ICOSupply -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    function returnIcoTokens(address _from, uint256 _amount) public onlyOwner {\r\n        require(balances[_from]>=_amount);\r\n        balances[owner] += _amount;\r\n        balances[_from] -= _amount;\r\n        ICOSupply += _amount;\r\n        totalTokensRemind += _amount;\r\n    }\r\n\r\n    // Transfer tokens to pre sale partners (5%)\r\n    function transferPreSaleTokens(address _to, uint256 _amount) public onlyOwner {\r\n        require(preSaleSupply>=_amount);\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        preSaleSupply -= _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n    function returnPreSaleTokens(address _from, uint256 _amount) public onlyOwner {\r\n        require(balances[_from]>=_amount);\r\n        balances[owner] += _amount;\r\n        balances[_from] -= _amount;\r\n        preSaleSupply += _amount;\r\n        totalTokensRemind += _amount;\r\n    }\r\n\r\n    // Erase unsold pre sale tokens\r\n    function eraseUnsoldPreSaleTokens() public onlyOwner {\r\n        balances[owner] -= preSaleSupply;\r\n        preSaleSupply = 0;\r\n        totalTokensRemind -= preSaleSupply;\r\n    }\r\n\r\n    function transferUserTokensTo(address _from, address _to, uint256 _amount) public onlyOwner {\r\n        require(balances[_from] >= _amount && _amount > 0);\r\n        balances[_from] -= _amount;\r\n        balances[_to] += _amount;\r\n        Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    // Chech trade balance of account\r\n    function balanceOf(address _account) public constant returns (uint256 balance) {\r\n        return balances[_account];\r\n    }\r\n\r\n    // Transfer tokens from your account to other account\r\n    function transfer(address _to, uint _value) public  returns (bool success) {\r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\r\n        require(balances[msg.sender] >= _value);           // Check if the sender has enough\r\n        balances[msg.sender] -= _value;                    // Subtract from the sender\r\n        balances[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Transfer tokens from account (_from) to another account (_to)\r\n    function transferFrom(address _from, address _to, uint256 _amount) public  returns(bool) {\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        if (balances[_from] >= _amount && _amount > 0) {\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public  returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function add_tokens(address _to, uint256 _amount) public onlyOwner {\r\n        balances[owner] -= _amount;\r\n        balances[_to] += _amount;\r\n        totalTokensRemind -= _amount;\r\n    }\r\n\r\n\r\n    // вызвать эту функцию через  год -когда нужно будет разморозить\r\n    function all_unfreeze() public onlyOwner {\r\n        require(now >= unfreezeTime);\r\n        // сюда записать те адреса которые морозили в конструткоре\r\n        unfreeze(0x01306bfbC0C20BEADeEc30000F634d08985D87de);\r\n    }\r\n\r\n    function unfreeze(address _user) internal {\r\n        uint amount = FreezeBalances[_user];\r\n        balances[_user] += amount;\r\n    }\r\n\r\n\r\n    function freeze(address _user, uint256 _amount) public onlyOwner {\r\n        balances[owner] -= _amount;\r\n        FreezeBalances[_user] += _amount;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAdvisorTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"all_unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferIcoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferPreSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnUserGrowthPoolTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnPreSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensRemind\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"FreezeBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferUserTokensTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"eraseUnsoldPreSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGrowsPoolSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferUserGrowthPoolTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnIcoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"add_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAuditTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnAdvisorTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unfreezeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdmineTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdmineAdvisorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.20-nightly.2017.12.14+commit.3d1830f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7729c8f1c37f817f0d2b6f4ca976d947a73ab39a84a81c07f0c0b900c22e432b"}]}