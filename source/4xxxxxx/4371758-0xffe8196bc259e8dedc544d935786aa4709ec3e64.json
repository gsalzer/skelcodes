{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract owned {\r\n\r\n        address public owner;\r\n\r\n        function owned() {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n                if (msg.sender == owner)\r\n                _;\r\n        }\r\n\r\n\r\n}\r\n\r\ncontract tokenRecipient {\r\n        function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\r\n}\r\n\r\ncontract IERC20Token {\r\n\r\n        /// @return total amount of tokens\r\n        function totalSupply() constant returns (uint256 totalSupply);\r\n\r\n        /// @param _owner The address from which the balance will be retrieved\r\n        /// @return The balance\r\n        function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n        /// @notice send `_value` token to `_to` from `msg.sender`\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of token to be transferred\r\n        /// @return Whether the transfer was successful or not\r\n        function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n        /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n        /// @param _from The address of the sender\r\n        /// @param _to The address of the recipient\r\n        /// @param _value The amount of token to be transferred\r\n        /// @return Whether the transfer was successful or not\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n        /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @param _value The amount of wei to be approved for transfer\r\n        /// @return Whether the approval was successful or not\r\n        function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n        /// @param _owner The address of the account owning tokens\r\n        /// @param _spender The address of the account able to transfer the tokens\r\n        /// @return Amount of remaining tokens allowed to spent\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract Hedge is IERC20Token, owned{\r\n\r\n        /* Public variables of the token */\r\n        string public standard = \"Hedge v1.0\";\r\n        string public name = \"Hedge\";\r\n        string public symbol = \"HDG\";\r\n        uint8 public decimals = 18;\r\n        uint256 public initialSupply = 50000000 * 10 ** 18;\r\n        uint256 public tokenFrozenUntilBlock;\r\n        uint256 public timeLock = block.timestamp + 180 days; //cofounders time lock\r\n\r\n        /* Private variables of the token */\r\n        uint256 supply = initialSupply;\r\n        mapping (address => uint256) balances;\r\n        mapping (address => mapping (address => uint256)) allowances;\r\n        mapping (address => bool) restrictedAddresses;\r\n\r\n        event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\r\n\r\n        /* Initializes contract and  sets restricted addresses */\r\n        function Hedge() {\r\n                restrictedAddresses[0x0] = true;                        // Users cannot send tokens to 0x0 address\r\n                restrictedAddresses[address(this)] = true;      // Users cannot sent tokens to this contracts address\r\n                balances[msg.sender] = 50000000 * 10 ** 18;\r\n        }\r\n\r\n        /* Get total supply of issued coins */\r\n        function totalSupply() constant returns (uint256 totalSupply) {\r\n                return supply;\r\n        }\r\n\r\n        /* Get balance of specific address */\r\n        function balanceOf(address _owner) constant returns (uint256 balance) {\r\n                return balances[_owner];\r\n        }\r\n\r\n         function transferOwnership(address newOwner) onlyOwner {\r\n                require(transfer(newOwner, balances[msg.sender]));\r\n                owner = newOwner;\r\n        }\r\n\r\n        /* Send coins */\r\n        function transfer(address _to, uint256 _value) returns (bool success) {\r\n                require (block.number >= tokenFrozenUntilBlock) ;       // Throw is token is frozen in case of emergency\r\n                require (!restrictedAddresses[_to]) ;                // Prevent transfer to restricted addresses\r\n                require (balances[msg.sender] >= _value);           // Check if the sender has enough\r\n                require (balances[_to] + _value >= balances[_to]) ;  // Check for overflows\r\n                require (!(msg.sender == owner && block.timestamp < timeLock && (balances[msg.sender]-_value) < 10000000 * 10 ** 18));\r\n\r\n                balances[msg.sender] -= _value;                     // Subtract from the sender\r\n                balances[_to] += _value;                            // Add the same to the recipient\r\n                Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\r\n                return true;\r\n        }\r\n\r\n        /* Allow another contract to spend some tokens in your behalf */\r\n        function approve(address _spender, uint256 _value) returns (bool success) {\r\n                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\r\n                allowances[msg.sender][_spender] = _value;          // Set allowance\r\n                Approval(msg.sender, _spender, _value);             // Raise Approval event\r\n                return true;\r\n        }\r\n\r\n        /* Approve and then communicate the approved contract in a single tx */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n                tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\r\n                approve(_spender, _value);                                      // Set approval to contract for _value\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\r\n                return true;\r\n        }\r\n\r\n        /* A contract attempts to get the coins */\r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\r\n                require (!restrictedAddresses[_to]);                // Prevent transfer to restricted addresses\r\n                require(balances[_from] >= _value);                // Check if the sender has enough\r\n                require (balances[_to] + _value >= balances[_to]);  // Check for overflows\r\n                require (_value <= allowances[_from][msg.sender]);  // Check allowance\r\n                require (!(_from == owner && block.timestamp < timeLock && (balances[_from]-_value) < 10000000 * 10 ** 18));\r\n                balances[_from] -= _value;                          // Subtract from the sender\r\n                balances[_to] += _value;                            // Add the same to the recipient\r\n                allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\r\n                Transfer(_from, _to, _value);                       // Notify anyone listening that this transfer took place\r\n                return true;\r\n        }\r\n\r\n        function burn(uint256 _value) returns (bool success) {\r\n                require(balances[msg.sender] >= _value);                 // Check if the sender has enough\r\n                balances[msg.sender] -= _value;                          // Subtract from the sender\r\n                supply-=_value;\r\n                Burn(msg.sender, _value);\r\n                return true;\r\n        }\r\n\r\n        function burnFrom(address _from, uint256 _value) returns (bool success) {\r\n                require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n                require(_value <= allowances[_from][msg.sender]);    // Check allowance\r\n                balances[_from] -= _value;                         // Subtract from the targeted balance\r\n                allowances[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n                supply -= _value;                              // Update totalSupply\r\n                Burn(_from, _value);\r\n                return true;\r\n        }\r\n\r\n        /* Get the amount of remaining tokens to spend */\r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n                return allowances[_owner][_spender];\r\n        }\r\n\r\n\r\n\r\n        /* Stops all token transfers in case of emergency */\r\n        function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {\r\n                tokenFrozenUntilBlock = _frozenUntilBlock;\r\n                TokenFrozen(_frozenUntilBlock, _reason);\r\n        }\r\n\r\n        function unfreezeTransfersUntil(string _reason) onlyOwner {\r\n                tokenFrozenUntilBlock = 0;\r\n                TokenFrozen(0, _reason);\r\n        }\r\n\r\n        /* Owner can add new restricted address or removes one */\r\n        function editRestrictedAddress(address _newRestrictedAddress) onlyOwner {\r\n                restrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\r\n        }\r\n\r\n        function isRestrictedAddress(address _queryAddress) constant returns (bool answer){\r\n                return restrictedAddresses[_queryAddress];\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_queryAddress\",\"type\":\"address\"}],\"name\":\"isRestrictedAddress\",\"outputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRestrictedAddress\",\"type\":\"address\"}],\"name\":\"editRestrictedAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"unfreezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozenUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"freezeTransfersUntil\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozenUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Hedge","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21b01ef0a7f805c8d51f17c1c17a824ad56b8a2bea15d93fa0acce9cc397c018"}]}