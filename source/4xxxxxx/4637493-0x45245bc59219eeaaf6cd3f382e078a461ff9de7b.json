{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface TokenUpgraderInterface{\r\n    function upgradeFor(address _for, uint256 _value) public returns (bool success);\r\n    function upgradeFrom(address _by, address _for, uint256 _value) public returns (bool success);\r\n}\r\n  \r\ncontract Token {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner = msg.sender;\r\n\r\n    string public name = \"\\\"BANKEX\\\" project utility token\";\r\n    string public symbol = \"BKX\";\r\n\r\n    bool public upgradable = false;\r\n    bool public upgraderSet = false;\r\n    TokenUpgraderInterface public upgrader;\r\n\r\n    bool public locked = false;\r\n    uint8 public decimals = 18;\r\n    uint256 public decimalMultiplier = 10**(uint256(decimals));\r\n\r\n    modifier unlocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    // Ownership\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner returns (bool success) {\r\n        require(newOwner != address(0));      \r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    // ERC20 related functions\r\n\r\n    uint256 public totalSupply = 0;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\r\n    function transfer(address _to, uint256 _value) unlocked public returns (bool) {\r\n        require(_to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 bal) {\r\n        return balances[_owner];\r\n    }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) unlocked public returns (bool) {\r\n        require(_to != address(0));\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        require(_allowance >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n    function approve(address _spender, uint256 _value) unlocked public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) unlocked public\r\n        returns (bool success) {\r\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) unlocked public\r\n        returns (bool success) {\r\n            uint oldValue = allowed[msg.sender][_spender];\r\n            if (_subtractedValue > oldValue) {\r\n                allowed[msg.sender][_spender] = 0;\r\n            } else {\r\n                allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n            }\r\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n    }\r\n\r\n  /**\r\n    * Constructor mints tokens to corresponding addresses\r\n   */\r\n\r\n    function Token () public {\r\n        //values are in natural format\r\n\r\n        address publicSaleReserveAddress = 0xDef97e9F16831DA75a52fF583323c4cdd1f508da;\r\n        mint(publicSaleReserveAddress, 74000000);\r\n\r\n        address preICOconversionFromWavesReserveAddress = 0x2E3Da0E4DF6C6704c21bD53D873Af09af0a34f86;\r\n        mint(preICOconversionFromWavesReserveAddress, 3000000);\r\n\r\n        address preICOconversionFromEthReserveAddress = 0xDE4c839cee9464212C76473420bb87eF0Da8a617;\r\n        mint(preICOconversionFromEthReserveAddress, 3000000);\r\n\r\n        address advisorsReserveAddress = 0xDdbC59F27332448EC1e3F9797B69169e680F21Dc;\r\n        mint(advisorsReserveAddress, 40000000);\r\n        \r\n        address frozenForInstitutionalSalesReserveAddress = 0xf026ad161674E4f8b3306a191Bd936E01A5BD4A7;\r\n        mint(frozenForInstitutionalSalesReserveAddress, 140000000);\r\n\r\n        address teamReserveAddress = 0x3c0A403245F1C144207935b65da418Ddcc29c94E;\r\n        mint(teamReserveAddress, 50000000);\r\n        \r\n        address optionsReserveAddress = 0x0483bF7eB04cE3d20936e210B9F3801964791EDA;\r\n        mint(optionsReserveAddress, 50000000);\r\n        \r\n        address foundationReserveAddress = 0x6a6a0b4aaa60E97386F94c5414522159b45DEdE8;\r\n        mint(foundationReserveAddress, 40000000);\r\n\r\n        assert(totalSupply == 400000000*decimalMultiplier);\r\n    }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _for The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\r\n    function mint(address _for, uint256 _amount) internal returns (bool success) {\r\n        _amount = _amount*decimalMultiplier;\r\n        balances[_for] = balances[_for].add(_amount);\r\n        totalSupply = totalSupply.add(_amount);\r\n        Transfer(0, _for, _amount);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to lock token transfers\r\n   * @param _newLockState New lock state\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\r\n    function setLock(bool _newLockState) onlyOwner public returns (bool success) {\r\n        require(_newLockState != locked);\r\n        locked = _newLockState;\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to allow token upgrades\r\n   * @param _newState New upgrading allowance state\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\r\n    function allowUpgrading(bool _newState) onlyOwner public returns (bool success) {\r\n        upgradable = _newState;\r\n        return true;\r\n    }\r\n\r\n    function setUpgrader(address _upgraderAddress) onlyOwner public returns (bool success) {\r\n        require(!upgraderSet);\r\n        require(_upgraderAddress != address(0));\r\n        upgraderSet = true;\r\n        upgrader = TokenUpgraderInterface(_upgraderAddress);\r\n        return true;\r\n    }\r\n\r\n    function upgrade() public returns (bool success) {\r\n        require(upgradable);\r\n        require(upgraderSet);\r\n        require(upgrader != TokenUpgraderInterface(0));\r\n        uint256 value = balances[msg.sender];\r\n        assert(value > 0);\r\n        delete balances[msg.sender];\r\n        totalSupply = totalSupply.sub(value);\r\n        assert(upgrader.upgradeFor(msg.sender, value));\r\n        return true;\r\n    }\r\n\r\n    function upgradeFor(address _for, uint256 _value) public returns (bool success) {\r\n        require(upgradable);\r\n        require(upgraderSet);\r\n        require(upgrader != TokenUpgraderInterface(0));\r\n        uint256 _allowance = allowed[_for][msg.sender];\r\n        require(_allowance >= _value);\r\n        balances[_for] = balances[_for].sub(_value);\r\n        allowed[_for][msg.sender] = _allowance.sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        assert(upgrader.upgradeFrom(msg.sender, _for, _value));\r\n        return true;\r\n    }\r\n\r\n    function () payable external {\r\n        if (upgradable) {\r\n            assert(upgrade());\r\n            return;\r\n        }\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"upgraderSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgraderAddress\",\"type\":\"address\"}],\"name\":\"setUpgrader\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLockState\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upgradeFor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"allowUpgrading\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57153936d51bed78b135521c7a559ddd93e398aa2e0aab1fe48f0560156d728b"}]}