{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\ncontract Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is SafeMath, ERC20Basic {\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) returns (bool){\r\n    balances[msg.sender] = sub(balances[msg.sender],_value);\r\n    balances[_to] = add(balances[_to],_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_to] = add(balances[_to],_value);\r\n    balances[_from] = sub(balances[_from],_value);\r\n    allowed[_from][msg.sender] = sub(_allowance,_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = add(totalSupply,_amount);\r\n    balances[_to] = add(balances[_to],_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * Pausable token\r\n *\r\n * Simple ERC20 Token example, with pausable token creation\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n}\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\ncontract LimitedTransferToken is ERC20 {\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(now)));\r\n   _;\r\n  }\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will recieve the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will recieve the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n/**\r\n * @title Vested token\r\n * @dev Tokens that can be vested for a group of addresses.\r\n */\r\ncontract VestedToken is Math, StandardToken, LimitedTransferToken {\r\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\r\n  struct TokenGrant {\r\n    address granter;     // 20 bytes\r\n    uint256 value;       // 32 bytes\r\n    uint64 cliff;\r\n    uint64 vesting;\r\n    uint64 start;        // 3 * 8 = 24 bytes\r\n    bool revokable;\r\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\r\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\r\n  mapping (address => TokenGrant[]) public grants;\r\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\r\n  /**\r\n   * @dev Grant tokens to a specified address\r\n   * @param _to address The address which the tokens will be granted to.\r\n   * @param _value uint256 The amount of tokens to be granted.\r\n   * @param _start uint64 Time of the beginning of the grant.\r\n   * @param _cliff uint64 Time of the cliff period.\r\n   * @param _vesting uint64 The vesting period.\r\n   */\r\n  function grantVestedTokens(\r\n    address _to,\r\n    uint256 _value,\r\n    uint64 _start,\r\n    uint64 _cliff,\r\n    uint64 _vesting,\r\n    bool _revokable,\r\n    bool _burnsOnRevoke\r\n  ) public {\r\n    // Check for date inconsistencies that may cause unexpected behavior\r\n    require(_cliff >= _start && _vesting >= _cliff);\r\n    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\r\n    uint256 count = grants[_to].push(\r\n                TokenGrant(\r\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\r\n                  _value,\r\n                  _cliff,\r\n                  _vesting,\r\n                  _start,\r\n                  _revokable,\r\n                  _burnsOnRevoke\r\n                )\r\n              );\r\n    transfer(_to, _value);\r\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\r\n  }\r\n  /**\r\n   * @dev Revoke the grant of tokens of a specifed address.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   */\r\n  function revokeTokenGrant(address _holder, uint256 _grantId) public {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n    require(grant.revokable);\r\n    require(grant.granter == msg.sender); // Only granter can revoke it\r\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\r\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\r\n    // remove grant from array\r\n    delete grants[_holder][_grantId];\r\n    grants[_holder][_grantId] = grants[_holder][sub(grants[_holder].length,1)];\r\n    grants[_holder].length -= 1;\r\n    balances[receiver] = add(balances[receiver],nonVested);\r\n    balances[_holder] = sub(balances[_holder],nonVested);\r\n    Transfer(_holder, receiver, nonVested);\r\n  }\r\n  /**\r\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\r\n   * @param holder address The address of the holder\r\n   * @param time uint64 The specific time.\r\n   * @return An uint256 representing a holder's total amount of transferable tokens.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n    uint256 grantIndex = tokenGrantsCount(holder);\r\n    if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\r\n    // Iterate through all the grants the holder has, and add all non-vested tokens\r\n    uint256 nonVested = 0;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      nonVested = add(nonVested, nonVestedTokens(grants[holder][i], time));\r\n    }\r\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\r\n    uint256 vestedTransferable = sub(balanceOf(holder), nonVested);\r\n    // Return the minimum of how many vested can transfer and other value\r\n    // in case there are other limiting transferability factors (default is balanceOf)\r\n    return min256(vestedTransferable, super.transferableTokens(holder, time));\r\n  }\r\n  /**\r\n   * @dev Check the amount of grants that an address has.\r\n   * @param _holder The holder of the grants.\r\n   * @return A uint256 representing the total amount of grants.\r\n   */\r\n  function tokenGrantsCount(address _holder) constant returns (uint256 index) {\r\n    return grants[_holder].length;\r\n  }\r\n  /**\r\n   * @dev Calculate amount of vested tokens at a specifc time.\r\n   * @param tokens uint256 The amount of tokens grantted.\r\n   * @param time uint64 The time to be checked\r\n   * @param start uint64 A time representing the begining of the grant\r\n   * @param cliff uint64 The cliff period.\r\n   * @param vesting uint64 The vesting period.\r\n   * @return An uint256 representing the amount of vested tokensof a specif grant.\r\n   *  transferableTokens\r\n   *   |                         _/--------   vestedTokens rect\r\n   *   |                       _/\r\n   *   |                     _/\r\n   *   |                   _/\r\n   *   |                 _/\r\n   *   |                /\r\n   *   |              .|\r\n   *   |            .  |\r\n   *   |          .    |\r\n   *   |        .      |\r\n   *   |      .        |\r\n   *   |    .          |\r\n   *   +===+===========+---------+----------> time\r\n   *      Start       Clift    Vesting\r\n   */\r\n  function calculateVestedTokens(\r\n    uint256 tokens,\r\n    uint256 time,\r\n    uint256 start,\r\n    uint256 cliff,\r\n    uint256 vesting) constant returns (uint256)\r\n    {\r\n      // Shortcuts for before cliff and after vesting cases.\r\n      if (time < cliff) return 0;\r\n      if (time >= vesting) return tokens;\r\n      // Interpolate all vested tokens.\r\n      // As before cliff the shortcut returns 0, we can use just calculate a value\r\n      // in the vesting rect (as shown in above's figure)\r\n      // vestedTokens = tokens * (time - start) / (vesting - start)\r\n      uint256 vestedTokens = div(\r\n                                    mul(\r\n                                      tokens,\r\n                                      sub(time, start)\r\n                                      ),\r\n                                    sub(vesting, start)\r\n                                    );\r\n      return vestedTokens;\r\n  }\r\n  /**\r\n   * @dev Get all information about a specifc grant.\r\n   * @param _holder The address which will have its tokens revoked.\r\n   * @param _grantId The id of the token grant.\r\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\r\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\r\n   */\r\n  function tokenGrant(address _holder, uint256 _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\r\n    TokenGrant storage grant = grants[_holder][_grantId];\r\n    granter = grant.granter;\r\n    value = grant.value;\r\n    start = grant.start;\r\n    cliff = grant.cliff;\r\n    vesting = grant.vesting;\r\n    revokable = grant.revokable;\r\n    burnsOnRevoke = grant.burnsOnRevoke;\r\n    vested = vestedTokens(grant, uint64(now));\r\n  }\r\n  /**\r\n   * @dev Get the amount of vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time The time to be checked\r\n   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\r\n   */\r\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return calculateVestedTokens(\r\n      grant.value,\r\n      uint256(time),\r\n      uint256(grant.start),\r\n      uint256(grant.cliff),\r\n      uint256(grant.vesting)\r\n    );\r\n  }\r\n  /**\r\n   * @dev Calculate the amount of non vested tokens at a specific time.\r\n   * @param grant TokenGrant The grant to be checked.\r\n   * @param time uint64 The time to be checked\r\n   * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\r\n   * passed time frame.\r\n   */\r\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\r\n    return sub(grant.value,vestedTokens(grant, time));\r\n  }\r\n  /**\r\n   * @dev Calculate the date when the holder can trasfer all its tokens\r\n   * @param holder address The address of the holder\r\n   * @return An uint256 representing the date of the last transferable tokens.\r\n   */\r\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\r\n    date = uint64(now);\r\n    uint256 grantIndex = grants[holder].length;\r\n    for (uint256 i = 0; i < grantIndex; i++) {\r\n      date = max64(grants[holder][i].vesting, date);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is SafeMath, StandardToken {\r\n    event Burn(address indexed burner, uint indexed value);\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint _value)\r\n        public\r\n    {\r\n        require(_value > 0);\r\n        address burner = msg.sender;\r\n        balances[burner] = sub(balances[burner], _value);\r\n        totalSupply = sub(totalSupply, _value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n/**\r\n * @title PLC\r\n * @dev PLC is ERC20 token contract, inheriting MintableToken, PausableToken,\r\n * VestedToken, BurnableToken contract from open zeppelin.\r\n */\r\ncontract PLC is MintableToken, PausableToken, VestedToken, BurnableToken {\r\n  string public name = \"PlusCoin\";\r\n  string public symbol = \"PLC\";\r\n  uint256 public decimals = 18;\r\n}\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable, SafeMath{\r\n  enum State { Active, Refunding, Closed }\r\n  mapping (address => uint256) public deposited;\r\n  mapping (address => uint256) public refunded;\r\n  State public state;\r\n  address public devMultisig;\r\n  address[] public reserveWallet;\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  /**\r\n   * @dev This constructor sets the addresses of multi-signature wallet and\r\n   * 5 reserve wallets.\r\n   * and forwarding it if crowdsale is successful.\r\n   * @param _devMultiSig address The address of multi-signature wallet.\r\n   * @param _reserveWallet address[5] The addresses of reserve wallet.\r\n   */\r\n  function RefundVault(address _devMultiSig, address[] _reserveWallet) {\r\n    state = State.Active;\r\n    devMultisig = _devMultiSig;\r\n    reserveWallet = _reserveWallet;\r\n  }\r\n  /**\r\n   * @dev This function is called when user buy tokens. Only RefundVault\r\n   * contract stores the Ether user sent which forwarded from crowdsale\r\n   * contract.\r\n   * @param investor address The address who buy the token from crowdsale.\r\n   */\r\n  function deposit(address investor) onlyOwner payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = add(deposited[investor], msg.value);\r\n  }\r\n  event Transferred(address _to, uint _value);\r\n  /**\r\n   * @dev This function is called when crowdsale is successfully finalized.\r\n   */\r\n  function close() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    uint256 balance = this.balance;\r\n    uint256 devAmount = div(balance, 10);\r\n    devMultisig.transfer(devAmount);\r\n    Transferred(devMultisig, devAmount);\r\n    uint256 reserveAmount = div(mul(balance, 9), 10);\r\n    uint256 reserveAmountForEach = div(reserveAmount, reserveWallet.length);\r\n    for(uint8 i = 0; i < reserveWallet.length; i++){\r\n      reserveWallet[i].transfer(reserveAmountForEach);\r\n      Transferred(reserveWallet[i], reserveAmountForEach);\r\n    }\r\n    Closed();\r\n  }\r\n  /**\r\n   * @dev This function is called when crowdsale is unsuccessfully finalized\r\n   * and refund is required.\r\n   */\r\n  function enableRefunds() onlyOwner {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n  /**\r\n   * @dev This function allows for user to refund Ether.\r\n   */\r\n  function refund(address investor) returns (bool) {\r\n    require(state == State.Refunding);\r\n    if (refunded[investor] > 0) {\r\n      return false;\r\n    }\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    refunded[investor] = depositedValue;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title KYC\r\n * @dev KYC contract handles the white list for PLCCrowdsale contract\r\n * Only accounts registered in KYC contract can buy PLC token.\r\n * Admins can register account, and the reason why\r\n */\r\ncontract KYC is Ownable, SafeMath, Pausable {\r\n  // check the address is registered for token sale\r\n  mapping (address => bool) public registeredAddress;\r\n  // check the address is admin of kyc contract\r\n  mapping (address => bool) public admin;\r\n  event Registered(address indexed _addr);\r\n  event Unregistered(address indexed _addr);\r\n  event NewAdmin(address indexed _addr);\r\n  /**\r\n   * @dev check whether the address is registered for token sale or not.\r\n   * @param _addr address\r\n   */\r\n  modifier onlyRegistered(address _addr) {\r\n    require(isRegistered(_addr));\r\n    _;\r\n  }\r\n  /**\r\n   * @dev check whether the msg.sender is admin or not\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(admin[msg.sender]);\r\n    _;\r\n  }\r\n  function KYC() {\r\n    admin[msg.sender] = true;\r\n  }\r\n  /**\r\n   * @dev set new admin as admin of KYC contract\r\n   * @param _addr address The address to set as admin of KYC contract\r\n   */\r\n  function setAdmin(address _addr)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_addr != address(0) && admin[_addr] == false);\r\n    admin[_addr] = true;\r\n    NewAdmin(_addr);\r\n  }\r\n  /**\r\n   * @dev check the address is register for token sale\r\n   * @param _addr address The address to check whether register or not\r\n   */\r\n  function isRegistered(address _addr)\r\n    public\r\n    constant\r\n    returns (bool)\r\n  {\r\n    return registeredAddress[_addr];\r\n  }\r\n  /**\r\n   * @dev register the address for token sale\r\n   * @param _addr address The address to register for token sale\r\n   */\r\n  function register(address _addr)\r\n    public\r\n    onlyAdmin\r\n    whenNotPaused\r\n  {\r\n    require(_addr != address(0) && registeredAddress[_addr] == false);\r\n    registeredAddress[_addr] = true;\r\n    Registered(_addr);\r\n  }\r\n  /**\r\n   * @dev register the addresses for token sale\r\n   * @param _addrs address[] The addresses to register for token sale\r\n   */\r\n  function registerByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n    whenNotPaused\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\r\n      registeredAddress[_addrs[i]] = true;\r\n      Registered(_addrs[i]);\r\n    }\r\n  }\r\n  /**\r\n   * @dev unregister the registered address\r\n   * @param _addr address The address to unregister for token sale\r\n   */\r\n  function unregister(address _addr)\r\n    public\r\n    onlyAdmin\r\n    onlyRegistered(_addr)\r\n  {\r\n    registeredAddress[_addr] = false;\r\n    Unregistered(_addr);\r\n  }\r\n  /**\r\n   * @dev unregister the registered addresses\r\n   * @param _addrs address[] The addresses to unregister for token sale\r\n   */\r\n  function unregisterByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(isRegistered(_addrs[i]));\r\n      registeredAddress[_addrs[i]] = false;\r\n      Unregistered(_addrs[i]);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @title PLCCrowdsale\r\n * @dev PLCCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract PLCCrowdsale is Ownable, SafeMath, Pausable {\r\n  // token registery contract\r\n  KYC public kyc;\r\n  // The token being sold\r\n  PLC public token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint64 public startTime; // 1506384000; //2017.9.26 12:00 am (UTC)\r\n  uint64 public endTime; // 1507593600; //2017.10.10 12:00 am (UTC)\r\n  uint64[5] public deadlines; // [1506643200, 1506902400, 1507161600, 1507420800, 1507593600]; // [2017.9.26, 2017.10.02, 2017.10.05, 2017.10.08, 2017.10.10]\r\n  mapping (address => uint256) public presaleRate;\r\n  uint8[5] public rates = [240, 230, 220, 210, 200];\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  // amount of ether buyer can buy\r\n  uint256 constant public maxGuaranteedLimit = 5000 ether;\r\n  // amount of ether presale buyer can buy\r\n  mapping (address => uint256) public presaleGuaranteedLimit;\r\n  mapping (address => bool) public isDeferred;\r\n  // amount of ether funded for each buyer\r\n  // bool: true if deferred otherwise false\r\n  mapping (bool => mapping (address => uint256)) public buyerFunded;\r\n  // amount of tokens minted for deferredBuyers\r\n  uint256 public deferredTotalTokens;\r\n  // buyable interval in block number 20\r\n  uint256 constant public maxCallFrequency = 20;\r\n  // block number when buyer buy\r\n  mapping (address => uint256) public lastCallBlock;\r\n  bool public isFinalized = false;\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public maxEtherCap; // 100000 ether;\r\n  uint256 public minEtherCap; // 30000 ether;\r\n  // investor address list\r\n  address[] buyerList;\r\n  mapping (address => bool) inBuyerList;\r\n  // number of refunded investors\r\n  uint256 refundCompleted;\r\n  // new owner of token contract when crowdsale is Finalized\r\n  address newTokenOwner = 0x568E2B5e9643D38e6D8146FeE8d80a1350b2F1B9;\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n  // dev team multisig wallet\r\n  address devMultisig;\r\n  // reserve\r\n  address[] reserveWallet;\r\n  /**\r\n   * @dev Checks whether buyer is sending transaction too frequently\r\n   */\r\n  modifier canBuyInBlock () {\r\n    require(add(lastCallBlock[msg.sender], maxCallFrequency) < block.number);\r\n    lastCallBlock[msg.sender] = block.number;\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Checks whether ico is started\r\n   */\r\n  modifier onlyAfterStart() {\r\n    require(now >= startTime && now <= endTime);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Checks whether ico is not started\r\n   */\r\n  modifier onlyBeforeStart() {\r\n    require(now < startTime);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Checks whether the account is registered\r\n   */\r\n  modifier onlyRegistered(address _addr) {\r\n    require(kyc.isRegistered(_addr));\r\n    _;\r\n  }\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event PresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event DeferredPresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  /**\r\n   * event for finalize logging\r\n   */\r\n  event Finalized();\r\n  /**\r\n   * event for register presale logging\r\n   * @param presaleInvestor who register for presale\r\n   * @param presaleAmount weis presaleInvestor can buy as presale\r\n   * @param _presaleRate rate at which presaleInvestor can buy tokens\r\n   * @param _isDeferred whether the investor is deferred investor\r\n   */\r\n  event RegisterPresale(address indexed presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred);\r\n  /**\r\n   * event for unregister presale logging\r\n   * @param presaleInvestor who register for presale\r\n   */\r\n  event UnregisterPresale(address indexed presaleInvestor);\r\n  /**\r\n   * @dev PLCCrowdsale constructor sets variables\r\n   * @param _kyc address The address which KYC contract is deployed at\r\n   * @param _token address The address which PLC contract is deployed at\r\n   * @param _refundVault address The address which RefundVault is deployed at\r\n   * @param _devMultisig address The address which MultiSigWallet for devTeam is deployed at\r\n   * @param _reserveWallet address[5] The address list of reserveWallet addresses\r\n   * @param _timelines uint64[5] list of timelines from startTime to endTime with timelines for rate changes\r\n   * @param _maxEtherCap uint256 The value which maximum weis to be funded\r\n   * @param _minEtherCap uint256 The value which minimum weis to be funded\r\n   */\r\n  function PLCCrowdsale(\r\n    address _kyc,\r\n    address _token,\r\n    address _refundVault,\r\n    address _devMultisig,\r\n    address[] _reserveWallet,\r\n    uint64[6] _timelines, // [startTime, ... , endTime]\r\n    uint256 _maxEtherCap,\r\n    uint256 _minEtherCap)\r\n  {\r\n    //timelines check\r\n    for(uint8 i = 0; i < _timelines.length-1; i++){\r\n      require(_timelines[i] < _timelines[i+1]);\r\n    }\r\n    require(_timelines[0] >= now);\r\n    //address check\r\n    require(_kyc != 0x00 && _token != 0x00 && _refundVault != 0x00 && _devMultisig != 0x00);\r\n    for(i = 0; i < _reserveWallet.length; i++){\r\n      require(_reserveWallet[i] != 0x00);\r\n    }\r\n    //cap check\r\n    require(_minEtherCap < _maxEtherCap);\r\n    kyc   = KYC(_kyc);\r\n    token = PLC(_token);\r\n    vault = RefundVault(_refundVault);\r\n    devMultisig   = _devMultisig;\r\n    reserveWallet = _reserveWallet;\r\n    startTime    = _timelines[0];\r\n    endTime      = _timelines[5];\r\n    deadlines[0] = _timelines[1];\r\n    deadlines[1] = _timelines[2];\r\n    deadlines[2] = _timelines[3];\r\n    deadlines[3] = _timelines[4];\r\n    deadlines[4] = _timelines[5];\r\n    maxEtherCap  = _maxEtherCap;\r\n    minEtherCap  = _minEtherCap;\r\n  }\r\n  /**\r\n   * @dev PLCCrowdsale fallback function for buying Tokens\r\n   */\r\n  function () payable {\r\n    if(isDeferred[msg.sender])\r\n      buyDeferredPresaleTokens(msg.sender);\r\n    else if(now < startTime)\r\n      buyPresaleTokens(msg.sender);\r\n    else\r\n      buyTokens();\r\n  }\r\n  /**\r\n   * @dev push all token buyers in list\r\n   * @param _addr address Account to push into buyerList\r\n   */\r\n  function pushBuyerList(address _addr) internal {\r\n    if (!inBuyerList[_addr]) {\r\n      inBuyerList[_addr] = true;\r\n      buyerList.push(_addr);\r\n    }\r\n  }\r\n  /**\r\n   * @dev register presale account checking modifier\r\n   * @param presaleInvestor address The account to register as presale account\r\n   * @param presaleAmount uint256 The value which investor is allowed to buy\r\n   * @param _presaleRate uint256 The rate at which investor buy tokens\r\n   * @param _isDeferred bool whether presaleInvestor is deferred buyer\r\n   */\r\n  function registerPresale(address presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred)\r\n    onlyBeforeStart\r\n    onlyOwner\r\n  {\r\n    require(presaleInvestor != 0x00);\r\n    require(presaleAmount > 0);\r\n    require(_presaleRate > 0);\r\n    require(presaleGuaranteedLimit[presaleInvestor] == 0);\r\n    presaleGuaranteedLimit[presaleInvestor] = presaleAmount;\r\n    presaleRate[presaleInvestor] = _presaleRate;\r\n    isDeferred[presaleInvestor] = _isDeferred;\r\n    if(_isDeferred) {\r\n      weiRaised = add(weiRaised, presaleAmount);\r\n      uint256 deferredInvestorToken = mul(presaleAmount, _presaleRate);\r\n      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\r\n      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\r\n      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\r\n      token.mint(address(this), totalAmount);\r\n      deferredTotalTokens = add(deferredTotalTokens, totalAmount);\r\n    }\r\n    RegisterPresale(presaleInvestor, presaleAmount, _presaleRate, _isDeferred);\r\n  }\r\n  /**\r\n   * @dev register presale account checking modifier\r\n   * @param presaleInvestor address The account to register as presale account\r\n   */\r\n  function unregisterPresale(address presaleInvestor)\r\n    onlyBeforeStart\r\n    onlyOwner\r\n  {\r\n    require(presaleInvestor != 0x00);\r\n    require(presaleGuaranteedLimit[presaleInvestor] > 0);\r\n    uint256 _amount = presaleGuaranteedLimit[presaleInvestor];\r\n    uint256 _rate = presaleRate[presaleInvestor];\r\n    bool _isDeferred = isDeferred[presaleInvestor];\r\n    require(buyerFunded[_isDeferred][presaleInvestor] == 0);\r\n    presaleGuaranteedLimit[presaleInvestor] = 0;\r\n    presaleRate[presaleInvestor] = 0;\r\n    isDeferred[presaleInvestor] = false;\r\n    if(_isDeferred) {\r\n      weiRaised = sub(weiRaised, _amount);\r\n      uint256 deferredInvestorToken = mul(_amount, _rate);\r\n      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\r\n      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\r\n      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\r\n      deferredTotalTokens = sub(deferredTotalTokens, totalAmount);\r\n      token.burn(totalAmount);\r\n    }\r\n    UnregisterPresale(presaleInvestor);\r\n  }\r\n  /**\r\n   * @dev buy token (deferred presale investor)\r\n   * @param beneficiary address The account to receive tokens\r\n   */\r\n  function buyDeferredPresaleTokens(address beneficiary)\r\n    payable\r\n    whenNotPaused\r\n  {\r\n    require(beneficiary != 0x00);\r\n    require(isDeferred[beneficiary]);\r\n    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\r\n    require(guaranteedLimit > 0);\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount != 0);\r\n    uint256 totalAmount = add(buyerFunded[true][beneficiary], weiAmount);\r\n    uint256 toFund;\r\n    if (totalAmount > guaranteedLimit) {\r\n      toFund = sub(guaranteedLimit, buyerFunded[true][beneficiary]);\r\n    } else {\r\n      toFund = weiAmount;\r\n    }\r\n    require(toFund > 0);\r\n    require(weiAmount >= toFund);\r\n    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\r\n    uint256 toReturn = sub(weiAmount, toFund);\r\n    buy(beneficiary, tokens, toFund, toReturn, true);\r\n    // token distribution : 70% for sale, 20% for dev, 10% for reserve\r\n    uint256 devAmount = div(mul(tokens, 20), 70);\r\n    uint256 reserveAmount = div(mul(tokens, 10), 70);\r\n    distributeToken(devAmount, reserveAmount, true);\r\n    // ether distribution : 10% for dev, 90% for reserve\r\n    uint256 devEtherAmount = div(toFund, 10);\r\n    uint256 reserveEtherAmount = div(mul(toFund, 9), 10);\r\n    distributeEther(devEtherAmount, reserveEtherAmount);\r\n    DeferredPresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\r\n  }\r\n  /**\r\n   * @dev buy token (normal presale investor)\r\n   * @param beneficiary address The account to receive tokens\r\n   */\r\n  function buyPresaleTokens(address beneficiary)\r\n    payable\r\n    whenNotPaused\r\n    onlyBeforeStart\r\n  {\r\n    // check validity\r\n    require(beneficiary != 0x00);\r\n    require(validPurchase());\r\n    require(!isDeferred[beneficiary]);\r\n    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\r\n    require(guaranteedLimit > 0);\r\n    // calculate eth amount\r\n    uint256 weiAmount = msg.value;\r\n    uint256 totalAmount = add(buyerFunded[false][beneficiary], weiAmount);\r\n    uint256 toFund;\r\n    if (totalAmount > guaranteedLimit) {\r\n      toFund = sub(guaranteedLimit, buyerFunded[false][beneficiary]);\r\n    } else {\r\n      toFund = weiAmount;\r\n    }\r\n    require(toFund > 0);\r\n    require(weiAmount >= toFund);\r\n    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\r\n    uint256 toReturn = sub(weiAmount, toFund);\r\n    buy(beneficiary, tokens, toFund, toReturn, false);\r\n    forwardFunds(toFund);\r\n    PresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\r\n  }\r\n  /**\r\n   * @dev buy token (normal investors)\r\n   */\r\n  function buyTokens()\r\n    payable\r\n    whenNotPaused\r\n    canBuyInBlock\r\n    onlyAfterStart\r\n    onlyRegistered(msg.sender)\r\n  {\r\n    // check validity\r\n    require(validPurchase());\r\n    require(buyerFunded[false][msg.sender] < maxGuaranteedLimit);\r\n    // calculate eth amount\r\n    uint256 weiAmount = msg.value;\r\n    uint256 totalAmount = add(buyerFunded[false][msg.sender], weiAmount);\r\n    uint256 toFund;\r\n    if (totalAmount > maxGuaranteedLimit) {\r\n      toFund = sub(maxGuaranteedLimit, buyerFunded[false][msg.sender]);\r\n    } else {\r\n      toFund = weiAmount;\r\n    }\r\n    if(add(weiRaised,toFund) > maxEtherCap) {\r\n      toFund = sub(maxEtherCap, weiRaised);\r\n    }\r\n    require(toFund > 0);\r\n    require(weiAmount >= toFund);\r\n    uint256 tokens = mul(toFund, getRate());\r\n    uint256 toReturn = sub(weiAmount, toFund);\r\n    buy(msg.sender, tokens, toFund, toReturn, false);\r\n    forwardFunds(toFund);\r\n    TokenPurchase(msg.sender, msg.sender, toFund, tokens);\r\n  }\r\n  /**\r\n   * @dev get buy rate for now\r\n   * @return rate uint256 rate for now\r\n   */\r\n  function getRate() constant returns (uint256 rate) {\r\n    for(uint8 i = 0; i < deadlines.length; i++)\r\n      if(now < deadlines[i])\r\n        return rates[i];\r\n      return rates[rates.length-1];//should never be returned, but to be sure to not divide by 0\r\n  }\r\n  /**\r\n   * @dev get the number of buyers\r\n   * @return uint256 the number of buyers\r\n   */\r\n  function getBuyerNumber() constant returns (uint256) {\r\n    return buyerList.length;\r\n  }\r\n  /**\r\n   * @dev send ether to the fund collection wallet\r\n   * @param toFund uint256 The value of weis to send to vault\r\n   */\r\n  function forwardFunds(uint256 toFund) internal {\r\n    vault.deposit.value(toFund)(msg.sender);\r\n  }\r\n  /**\r\n   * @dev checks whether purchase value is not zero and maxEtherCap is not reached\r\n   * @return true if the transaction can buy tokens\r\n   */\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return nonZeroPurchase && !maxReached();\r\n  }\r\n  function buy(\r\n    address _beneficiary,\r\n    uint256 _tokens,\r\n    uint256 _toFund,\r\n    uint256 _toReturn,\r\n    bool _isDeferred)\r\n    internal\r\n  {\r\n    if (!_isDeferred) {\r\n      pushBuyerList(msg.sender);\r\n      weiRaised = add(weiRaised, _toFund);\r\n    }\r\n    buyerFunded[_isDeferred][_beneficiary] = add(buyerFunded[_isDeferred][_beneficiary], _toFund);\r\n    if (!_isDeferred) {\r\n      token.mint(address(this), _tokens);\r\n    }\r\n    // 1 week lock\r\n    token.grantVestedTokens(\r\n      _beneficiary,\r\n      _tokens,\r\n      uint64(endTime),\r\n      uint64(endTime + 1 weeks),\r\n      uint64(endTime + 1 weeks),\r\n      false,\r\n      false);\r\n    // return ether if needed\r\n    if (_toReturn > 0) {\r\n      msg.sender.transfer(_toReturn);\r\n    }\r\n  }\r\n  /**\r\n   * @dev distribute token to multisig wallet and reserve walletes.\r\n   * This function is called in two context where crowdsale is closing and\r\n   * deferred token is bought.\r\n   * @param devAmount uint256 token amount for dev multisig wallet\r\n   * @param reserveAmount uint256 token amount for reserve walletes\r\n   * @param _isDeferred bool check whether function is called when deferred token is sold\r\n   */\r\n  function distributeToken(uint256 devAmount, uint256 reserveAmount, bool _isDeferred) internal {\r\n    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\r\n    token.grantVestedTokens(\r\n      devMultisig,\r\n      devAmount,\r\n      uint64(endTime),\r\n      uint64(endTime),\r\n      uint64(endTime + 1 years),\r\n      false,\r\n      false);\r\n    if (_isDeferred) {\r\n      for(uint8 i = 0; i < reserveWallet.length; i++) {\r\n        token.transfer(reserveWallet[i], eachReserveAmount);\r\n      }\r\n    } else {\r\n      for(uint8 j = 0; j < reserveWallet.length; j++) {\r\n        token.mint(reserveWallet[j], eachReserveAmount);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @dev distribute ether to multisig wallet and reserve walletes\r\n   * @param devAmount uint256 ether amount for dev multisig wallet\r\n   * @param reserveAmount uint256 ether amount for reserve walletes\r\n   */\r\n  function distributeEther(uint256 devAmount, uint256 reserveAmount) internal {\r\n    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\r\n    devMultisig.transfer(devAmount);\r\n    for(uint8 i = 0; i < reserveWallet.length; i++){\r\n      reserveWallet[i].transfer(eachReserveAmount);\r\n    }\r\n  }\r\n  /**\r\n   * @dev checks whether crowdsale is ended\r\n   * @return true if crowdsale event has ended\r\n   */\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  /**\r\n   * @dev should be called after crowdsale ends, to do\r\n   */\r\n  function finalize() {\r\n    require(!isFinalized);\r\n    require(hasEnded() || maxReached());\r\n    finalization();\r\n    Finalized();\r\n    isFinalized = true;\r\n  }\r\n  /**\r\n   * @dev end token minting on finalization, mint tokens for dev team and reserve wallets\r\n   */\r\n  function finalization() internal {\r\n    if (minReached()) {\r\n      vault.close();\r\n      uint256 totalToken = token.totalSupply();\r\n      uint256 tokenSold = sub(totalToken, deferredTotalTokens);\r\n      // token distribution : 70% for sale, 20% for dev, 10% for reserve\r\n      uint256 devAmount = div(mul(tokenSold, 20), 70);\r\n      uint256 reserveAmount = div(mul(tokenSold, 10), 70);\r\n      token.mint(address(this), devAmount);\r\n      distributeToken(devAmount, reserveAmount, false);\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n    token.finishMinting();\r\n    token.transferOwnership(newTokenOwner);\r\n  }\r\n  /**\r\n   * @dev should be called when ethereum is forked during crowdsale for refunding ethers on not supported fork\r\n   */\r\n  function finalizeWhenForked() onlyOwner whenPaused {\r\n    require(!isFinalized);\r\n    isFinalized = true;\r\n    vault.enableRefunds();\r\n    token.finishMinting();\r\n  }\r\n  /**\r\n   * @dev refund a lot of investors at a time checking onlyOwner\r\n   * @param numToRefund uint256 The number of investors to refund\r\n   */\r\n  function refundAll(uint256 numToRefund) onlyOwner {\r\n    require(isFinalized);\r\n    require(!minReached());\r\n    require(numToRefund > 0);\r\n    uint256 limit = refundCompleted + numToRefund;\r\n    if (limit > buyerList.length) {\r\n      limit = buyerList.length;\r\n    }\r\n    for(uint256 i = refundCompleted; i < limit; i++) {\r\n      vault.refund(buyerList[i]);\r\n    }\r\n    refundCompleted = limit;\r\n  }\r\n  /**\r\n   * @dev if crowdsale is unsuccessful, investors can claim refunds here\r\n   * @param investor address The account to be refunded\r\n   */\r\n  function claimRefund(address investor) returns (bool) {\r\n    require(isFinalized);\r\n    require(!minReached());\r\n    return vault.refund(investor);\r\n  }\r\n  /**\r\n   * @dev Checks whether maxEtherCap is reached\r\n   * @return true if max ether cap is reaced\r\n   */\r\n  function maxReached() public constant returns (bool) {\r\n    return weiRaised == maxEtherCap;\r\n  }\r\n  /**\r\n   * @dev Checks whether minEtherCap is reached\r\n   * @return true if min ether cap is reaced\r\n   */\r\n  function minReached() public constant returns (bool) {\r\n    return weiRaised >= minEtherCap;\r\n  }\r\n  /**\r\n   * @dev should burn unpaid tokens of deferred presale investors\r\n   */\r\n  function burnUnpaidTokens()\r\n    onlyOwner\r\n  {\r\n    require(isFinalized);\r\n    uint256 unpaidTokens = token.balanceOf(address(this));\r\n    token.burn(unpaidTokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDeferred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCallFrequency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyerNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleGuaranteedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyPresaleTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGuaranteedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCallBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEtherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"presaleInvestor\",\"type\":\"address\"},{\"name\":\"presaleAmount\",\"type\":\"uint256\"},{\"name\":\"_presaleRate\",\"type\":\"uint256\"},{\"name\":\"_isDeferred\",\"type\":\"bool\"}],\"name\":\"registerPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyDeferredPresaleTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeWhenForked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnpaidTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deferredTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"presaleInvestor\",\"type\":\"address\"}],\"name\":\"unregisterPresale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numToRefund\",\"type\":\"uint256\"}],\"name\":\"refundAll\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyc\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_refundVault\",\"type\":\"address\"},{\"name\":\"_devMultisig\",\"type\":\"address\"},{\"name\":\"_reserveWallet\",\"type\":\"address[]\"},{\"name\":\"_timelines\",\"type\":\"uint64[6]\"},{\"name\":\"_maxEtherCap\",\"type\":\"uint256\"},{\"name\":\"_minEtherCap\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeferredPresaleTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"presaleInvestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"presaleAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_presaleRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isDeferred\",\"type\":\"bool\"}],\"name\":\"RegisterPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"presaleInvestor\",\"type\":\"address\"}],\"name\":\"UnregisterPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"PLCCrowdsale","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008fc95edf1c8720510809d881b1e3a44ab4b8d031000000000000000000000000df99c7f9e0eadd71057a801055da810985df38bd0000000000000000000000006f5fbf934bf453215c00e58194afca59bf6b92cd0000000000000000000000002f85e6449bcf407cf8a83f82bc006c97a5fc3ebb00000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000059c998800000000000000000000000000000000000000000000000000000000059caea000000000000000000000000000000000000000000000000000000000059cede800000000000000000000000000000000000000000000000000000000059d2d3000000000000000000000000000000000000000000000000000000000059d6c7800000000000000000000000000000000000000000000000000000000059dc0d8000000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000065a4da25d3016c000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000822bb1cdd2051323abdb3d705e6d67f70c6f15160000000000000000000000003a9dda0ec79b6c38b650c56f4885c291551542a2000000000000000000000000528960b54d618a99683ebdccd83ed5da02616a45","Library":"","SwarmSource":"bzzr://8225a87e897fd3d5693bf029082d263dddee9218ea87bf3ecaf8241d075d91c5"}]}