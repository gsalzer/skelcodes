{"status":"1","message":"OK","result":[{"SourceCode":"/* This source code is part of CACIB DocChain registered trademark\r\n*  It is provided becaused published in the public blockchain of Ethereum.\r\n*  Reusing this code is forbidden without approbation of CACIB first (idea@ca-cib.com)\r\n*  Providing this code in public repository is meant to provide clarity to the mechanism by which the DocChain product works\r\n*\r\n*  This contract represents a repository of document hashes linked to their signatories IEthIdentity and is the heart of the DocChain product\r\n*/\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * The IEthIdentity interface defines fundamental functionnalities\r\n * that every Ethereum identity in this framework must implement to be \r\n * usable with DocChain principles.\r\n * \r\n * The purpose of implementing IEthIdentity interface is to prove its own identity\r\n * and let others checking whether any proof has been made by its identity.\r\n */\r\ninterface IEthIdentity {\r\n    \r\n    /**\r\n     * Add proof if it does not exist yet\r\n     *  - address: the smart contract address where the identity proof has been stored (see eSignature contract)\r\n     *  - bytes32: the attribute id or proof id for which the identity owner has made a proof\r\n     */\r\n    function addProof(address, bytes32) public returns(bool);\r\n    \r\n    /**\r\n     * Remove proof of a source if existed\r\n     *  - address: the smart contract address where the identity proof has been stored (see eSignature contract)\r\n     *  - bytes32: the attribute id or proof id to be removed\r\n     */\r\n    function removeProof(address, bytes32) public returns(bool);\r\n\r\n    /**\r\n     * Check whether the provided address is the controlling wallet (owner) of the identity\r\n     */\r\n    function checkOwner(address) public constant returns(bool);\r\n    \r\n    /**\r\n     * Get the identity owner name\r\n     */\r\n    function getIdentityName() public constant returns(bytes32);\r\n    \r\n}\r\n\r\n\r\ncontract eSignature {\r\n    \r\n    /**\r\n     * The document structure is composed of:\r\n     * - A hash representing the document\r\n     * - Address of the issuer IEthIdentity who initally creates the document\r\n     * - A mapping list of all signing IEthIdentity that approve the document\r\n     */\r\n    struct DocStruct {\r\n        bytes32 hash;\r\n        IEthIdentity issuerIdentity;\r\n\r\n        uint nbSignatories;                             // counter of signatories\r\n        mapping(address => bool) signatoryAddresses;    // mapping to know if an address is a signatory\r\n        mapping(uint => IEthIdentity) signatories;      // mapping to get a signatory by position\r\n    }\r\n\r\n    /**\r\n     * The eSignature contract contains two data points:\r\n     * - A mapping list of documents existing in eSignature contract\r\n     * - A counter to keep track the number of existing documents in the list\r\n     */\r\n    uint public count;\r\n    mapping(bytes20 => DocStruct) docs;\r\n    \r\n    /**\r\n     * This event is used for notifying new document created\r\n     * - key: document id generated by eSignature contract\r\n     */\r\n    event DocCreated(bytes20 key);\r\n    \r\n    /**\r\n     * This event is used for notifying a new approval of a document\r\n     * - key: document id generated by eSignature contract\r\n     * - identity: address of signing IEthIdentity\r\n     */\r\n    event DocSigned(bytes20 key, IEthIdentity identity);\r\n    \r\n    /**\r\n     * Create new document that is represented by its hash\r\n     * Return the id of created document\r\n     * - hash: hash string of the document content\r\n     * - issuerId: address of EthIdentiy of issuer\r\n     */\r\n    function newDoc(bytes32 hash, IEthIdentity issuerId) public returns (bytes20 docKey) {\r\n        \r\n        /* Warning: Potential Violation of Checks-Effects-Interaction pattern \r\n            If the issuerId is 0x00 or a fake address it will fail\r\n            If the caller passes its own implementation of IEthIdentity to attempt re-entrant code \r\n                it will call itself recursively first consuming all its gas and not altering the smart contract\r\n            If the caller passes an identity implementation that returns true always and calls newDoc again\r\n                two (or more) documents will be created with different docKey not altering the mechanism\r\n        */\r\n        // Check if valid identity via inter-contract call, limit gas used for this call\r\n        require(issuerId.checkOwner.gas(800)(msg.sender)); \r\n        \r\n        // Generate the document Id and save to mapping\r\n        count++;\r\n        docKey = ripemd160(issuerId, count);\r\n        \r\n        // Additional check that docKey not exists to avoid overriding\r\n        assert(checkExists(docKey) == false);\r\n        \r\n        docs[docKey].issuerIdentity = issuerId;\r\n        docs[docKey].hash = hash;\r\n        // docs[docKey].nbSignatories is by construction initialized to zero.\r\n        \r\n        DocCreated(docKey);\r\n    }\r\n    \r\n    /**\r\n     * Create and sign a new document that is represented by its hash\r\n     * Return the id of created signed document\r\n     * - hash: unique hash string of the document content\r\n     * - ethIdentity: address of EthIdentiy of signer that allow to verify the signer's authenticity\r\n     */\r\n    function newSignedDoc(bytes32 hash, IEthIdentity ethIdentity) public returns (bytes20 docKey) {\r\n        // Create & sign a new document\r\n        docKey = newDoc(hash, ethIdentity);\r\n        \r\n        // Verify document & check if it is already signed by the current ethIdentity\r\n        require(docs[docKey].signatoryAddresses[ethIdentity] == false); // Prevent re-signing document by the same signer\r\n        \r\n        docs[docKey].signatoryAddresses[ethIdentity] = true;\r\n        docs[docKey].signatories[docs[docKey].nbSignatories] = ethIdentity;\r\n        docs[docKey].nbSignatories++;\r\n        \r\n        DocSigned(docKey, ethIdentity);\r\n    }\r\n    \r\n    /**\r\n     * Sign an existing document with a valid IEthIdentity of signer\r\n     * - key: unique id of the created document\r\n     * - ethIdentity: address of EthIdentiy of signer that allow to verify the signer's authenticity\r\n     */\r\n    function signDoc(bytes20 docKey, IEthIdentity ethIdentity) public {\r\n        \r\n        /* Warning: Potential Violation of Checks-Effects-Interaction pattern \r\n            If the issuerId is 0x00 or a fake address it will fail\r\n            If the caller passes its own implementation of IEthIdentity to attempt re-entrant code \r\n                it will call itself recursively first consuming all its gas and not altering the smart contract\r\n            If the caller passes an identity implementation that returns true always and calls signDoc again\r\n                the second check will prevent corrupting the logic\r\n        */\r\n        // Check if valid identity via inter-contract call, limit gas used for this call\r\n        require(ethIdentity.checkOwner.gas(800)(msg.sender)); \r\n\r\n        // Verify document & check if it is already signed by the current ethIdentity\r\n        require(docs[docKey].signatoryAddresses[ethIdentity] == false); // Prevent re-signing document by the same signer\r\n        \r\n        docs[docKey].signatoryAddresses[ethIdentity] = true;\r\n        docs[docKey].signatories[docs[docKey].nbSignatories] = ethIdentity;\r\n        docs[docKey].nbSignatories++;\r\n        \r\n        DocSigned(docKey, ethIdentity);\r\n    }\r\n    \r\n    /**\r\n     * Get the document information by its id key. \r\n     * Return a tuple containing the document's hash, its issuers and number of signatories\r\n     * - key: a unique id of the created document\r\n     */\r\n    function getDoc(bytes20 docKey) public constant returns (bytes32 hash, IEthIdentity issuer, uint nbSignatories) {\r\n        \r\n        // Check if document exists by its key\r\n        if (checkExists(docKey)) \r\n            return (docs[docKey].hash, docs[docKey].issuerIdentity, docs[docKey].nbSignatories);\r\n        else  // returns a tupple saying the key is not valid\r\n            return (\"No a valid key\", IEthIdentity(0x0), 0);\r\n    }\r\n    \r\n    /**\r\n     * Get the specific signatory of a given document by its id key\r\n     * Return a tuple containing the EthIdentity address and name of signatory\r\n     * - key: a unique key representing the created document\r\n     * - index: index of the signatory to get its information\r\n     */\r\n    function getSignatory(bytes20 docKey, uint index) public constant returns (IEthIdentity identity, string identityName) {\r\n\r\n        // Check if document exists by its key\r\n        if (checkExists(docKey)) {\r\n        \r\n            // Check index is not outbound\r\n            require(index < docs[docKey].nbSignatories);\r\n            \r\n            identity = docs[docKey].signatories[index];\r\n            // Get the signatory information from its identity contract\r\n            identityName = bytes32ToString(identity.getIdentityName());\r\n                    \r\n            return (identity, identityName); \r\n        } else {\r\n            return (IEthIdentity(0x0), \"\");\r\n        }    \r\n    }\r\n    \r\n    /**\r\n     * Check if a document exists by its key\r\n     * Return true/false indicating the document existance\r\n     * - key: a unique key representing the created document\r\n     */\r\n    function checkExists(bytes20 docKey) public constant returns(bool) {\r\n        // Document exists only if its issuer is valid\r\n        return docs[docKey].issuerIdentity != address(0x0);\r\n    }\r\n    \r\n    /**\r\n     * Convert bytes32 to string. Set modifier pure which means cannot\r\n     * access the contract storage.\r\n     */\r\n    function bytes32ToString (bytes32 data) internal pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        for (uint j=0; j<32; j++){\r\n            if (data[j] != 0) {\r\n                bytesString[j] = data[j];\r\n            }\r\n        }\r\n        return string(bytesString);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"issuerId\",\"type\":\"address\"}],\"name\":\"newDoc\",\"outputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"ethIdentity\",\"type\":\"address\"}],\"name\":\"newSignedDoc\",\"outputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"}],\"name\":\"getDoc\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"nbSignatories\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"}],\"name\":\"checkExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"},{\"name\":\"ethIdentity\",\"type\":\"address\"}],\"name\":\"signDoc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"docKey\",\"type\":\"bytes20\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSignatory\",\"outputs\":[{\"name\":\"identity\",\"type\":\"address\"},{\"name\":\"identityName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes20\"}],\"name\":\"DocCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes20\"},{\"indexed\":false,\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"DocSigned\",\"type\":\"event\"}]","ContractName":"eSignature","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://668ab55a93e6789aad6e8e72b9145415acc36fbce0d286f6341873ef9b57c69c"}]}