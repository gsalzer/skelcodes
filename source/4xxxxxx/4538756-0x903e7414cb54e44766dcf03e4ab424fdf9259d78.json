{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool);\r\n    function approve(address spender, uint256 value) returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title HoQuToken\r\n * @dev HoQu.io token contract.\r\n */\r\ncontract HoQuToken is StandardToken, Pausable {\r\n\r\n    string public constant name = \"HOQU Token\";\r\n    string public constant symbol = \"HQX\";\r\n    uint32 public constant decimals = 18;\r\n\r\n    /**\r\n     * @dev Give all tokens to msg.sender.\r\n     */\r\n    function HoQuToken(uint _totalSupply) {\r\n        require (_totalSupply > 0);\r\n        totalSupply = balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ClaimableCrowdsale\r\n * @title HoQu.io claimable crowdsale contract.\r\n */\r\ncontract ClaimableCrowdsale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // all accepted ethers will be sent to this address\r\n    address beneficiaryAddress;\r\n\r\n    // all remain tokens after ICO should go to that address\r\n    address public bankAddress;\r\n\r\n    // token instance\r\n    HoQuToken public token;\r\n\r\n    uint256 public maxTokensAmount;\r\n    uint256 public issuedTokensAmount = 0;\r\n    uint256 public minBuyableAmount;\r\n    uint256 public tokenRate; // amount of HQX per 1 ETH\r\n    \r\n    uint256 endDate;\r\n\r\n    bool public isFinished = false;\r\n\r\n    // buffer for claimable tokens\r\n    mapping(address => uint256) public tokens;\r\n    mapping(address => bool) public approved;\r\n    mapping(uint32 => address) internal tokenReceivers;\r\n    uint32 internal receiversCount;\r\n\r\n    /**\r\n    * Events for token purchase logging\r\n    */\r\n    event TokenBought(address indexed _buyer, uint256 _tokens, uint256 _amount);\r\n    event TokenAdded(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\r\n    event TokenToppedUp(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\r\n    event TokenSubtracted(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount);\r\n    event TokenSent(address indexed _receiver, uint256 _tokens);\r\n\r\n    modifier inProgress() {\r\n        require (!isFinished);\r\n        require (issuedTokensAmount < maxTokensAmount);\r\n        require (now <= endDate);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @param _tokenAddress address of a HQX token contract\r\n    * @param _bankAddress address for remain HQX tokens accumulation\r\n    * @param _beneficiaryAddress accepted ETH go to this address\r\n    * @param _tokenRate rate HQX per 1 ETH\r\n    * @param _minBuyableAmount min ETH per each buy action (in ETH wei)\r\n    * @param _maxTokensAmount ICO HQX capacity (in HQX wei)\r\n    * @param _endDate the date when ICO will expire\r\n    */\r\n    function ClaimableCrowdsale(\r\n        address _tokenAddress,\r\n        address _bankAddress,\r\n        address _beneficiaryAddress,\r\n        uint256 _tokenRate,\r\n        uint256 _minBuyableAmount,\r\n        uint256 _maxTokensAmount,\r\n        uint256 _endDate\r\n    ) {\r\n        token = HoQuToken(_tokenAddress);\r\n\r\n        bankAddress = _bankAddress;\r\n        beneficiaryAddress = _beneficiaryAddress;\r\n\r\n        tokenRate = _tokenRate;\r\n        minBuyableAmount = _minBuyableAmount;\r\n        maxTokensAmount = _maxTokensAmount;\r\n\r\n        endDate = _endDate;\r\n    }\r\n\r\n    /*\r\n     * @dev Set new HoQu token exchange rate.\r\n     */\r\n    function setTokenRate(uint256 _tokenRate) onlyOwner {\r\n        require (_tokenRate > 0);\r\n        tokenRate = _tokenRate;\r\n    }\r\n\r\n    /**\r\n     * Buy HQX. Tokens will be stored in contract until claim stage\r\n     */\r\n    function buy() payable inProgress whenNotPaused {\r\n        uint256 payAmount = msg.value;\r\n        uint256 returnAmount = 0;\r\n\r\n        // calculate token amount to be transfered to investor\r\n        uint256 tokensAmount = tokenRate.mul(payAmount);\r\n    \r\n        if (issuedTokensAmount + tokensAmount > maxTokensAmount) {\r\n            tokensAmount = maxTokensAmount.sub(issuedTokensAmount);\r\n            payAmount = tokensAmount.div(tokenRate);\r\n            returnAmount = msg.value.sub(payAmount);\r\n        }\r\n    \r\n        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\r\n        require (issuedTokensAmount <= maxTokensAmount);\r\n\r\n        storeTokens(msg.sender, tokensAmount);\r\n        TokenBought(msg.sender, tokensAmount, payAmount);\r\n\r\n        beneficiaryAddress.transfer(payAmount);\r\n    \r\n        if (returnAmount > 0) {\r\n            msg.sender.transfer(returnAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add HQX payed by another crypto (BTC, LTC). Tokens will be stored in contract until claim stage\r\n     */\r\n    function add(address _receiver, uint256 _equivalentEthAmount) onlyOwner inProgress whenNotPaused {\r\n        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\r\n        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\r\n\r\n        storeTokens(_receiver, tokensAmount);\r\n        TokenAdded(_receiver, tokensAmount, _equivalentEthAmount);\r\n    }\r\n\r\n    /**\r\n     * Add HQX by referral program. Tokens will be stored in contract until claim stage\r\n     */\r\n    function topUp(address _receiver, uint256 _equivalentEthAmount) onlyOwner whenNotPaused {\r\n        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\r\n        issuedTokensAmount = issuedTokensAmount.add(tokensAmount);\r\n\r\n        storeTokens(_receiver, tokensAmount);\r\n        TokenToppedUp(_receiver, tokensAmount, _equivalentEthAmount);\r\n    }\r\n\r\n    /**\r\n     * Reduce bought HQX amount. Emergency use only\r\n     */\r\n    function sub(address _receiver, uint256 _equivalentEthAmount) onlyOwner whenNotPaused {\r\n        uint256 tokensAmount = tokenRate.mul(_equivalentEthAmount);\r\n\r\n        require (tokens[_receiver] >= tokensAmount);\r\n\r\n        tokens[_receiver] = tokens[_receiver].sub(tokensAmount);\r\n        issuedTokensAmount = issuedTokensAmount.sub(tokensAmount);\r\n\r\n        TokenSubtracted(_receiver, tokensAmount, _equivalentEthAmount);\r\n    }\r\n\r\n    /**\r\n     * Internal method for storing tokens in contract until claim stage\r\n     */\r\n    function storeTokens(address _receiver, uint256 _tokensAmount) internal whenNotPaused {\r\n        if (tokens[_receiver] == 0) {\r\n            tokenReceivers[receiversCount] = _receiver;\r\n            receiversCount++;\r\n            approved[_receiver] = false;\r\n        }\r\n        tokens[_receiver] = tokens[_receiver].add(_tokensAmount);\r\n    }\r\n\r\n    /**\r\n     * Claim all bought HQX. Available tokens will be sent to transaction sender address if it is approved\r\n     */\r\n    function claim() whenNotPaused {\r\n        claimFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Claim all bought HQX for specific approved address\r\n     */\r\n    function claimOne(address _receiver) onlyOwner whenNotPaused {\r\n        claimFor(_receiver);\r\n    }\r\n\r\n    /**\r\n     * Claim all bought HQX for all approved addresses\r\n     */\r\n    function claimAll() onlyOwner whenNotPaused {\r\n        for (uint32 i = 0; i < receiversCount; i++) {\r\n            address receiver = tokenReceivers[i];\r\n            if (approved[receiver] && tokens[receiver] > 0) {\r\n                claimFor(receiver);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal method for claiming tokens for specific approved address\r\n     */\r\n    function claimFor(address _receiver) internal whenNotPaused {\r\n        require(approved[_receiver]);\r\n        require(tokens[_receiver] > 0);\r\n\r\n        uint256 tokensToSend = tokens[_receiver];\r\n        tokens[_receiver] = 0;\r\n\r\n        token.transferFrom(bankAddress, _receiver, tokensToSend);\r\n        TokenSent(_receiver, tokensToSend);\r\n    }\r\n\r\n    function approve(address _receiver) onlyOwner whenNotPaused {\r\n        approved[_receiver] = true;\r\n    }\r\n    \r\n    /**\r\n     * Finish Sale.\r\n     */\r\n    function finish() onlyOwner {\r\n        require (issuedTokensAmount >= maxTokensAmount || now > endDate);\r\n        require (!isFinished);\r\n        isFinished = true;\r\n        token.transfer(bankAddress, token.balanceOf(this));\r\n    }\r\n\r\n    function getReceiversCount() constant onlyOwner returns (uint32) {\r\n        return receiversCount;\r\n    }\r\n\r\n    function getReceiver(uint32 i) constant onlyOwner returns (address) {\r\n        return tokenReceivers[i];\r\n    }\r\n    \r\n    /**\r\n     * Buy HQX. Tokens will be stored in contract until claim stage\r\n     */\r\n    function() external payable {\r\n        buy();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_equivalentEthAmount\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint32\"}],\"name\":\"getReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReceiversCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_equivalentEthAmount\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_equivalentEthAmount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_bankAddress\",\"type\":\"address\"},{\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"name\":\"_tokenRate\",\"type\":\"uint256\"},{\"name\":\"_minBuyableAmount\",\"type\":\"uint256\"},{\"name\":\"_maxTokensAmount\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_equivalentAmount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_equivalentAmount\",\"type\":\"uint256\"}],\"name\":\"TokenToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_equivalentAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"TokenSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"ClaimableCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001b957dc4aefeed3b4a2351a6a6d5cbfbba0cecfa00000000000000000000000029f5ffb0e38e72ea60226f24b0e241bcc12868b80000000000000000000000008c097a9c954894c8779edef955398d6b8ea7226a0000000000000000000000000000000000000000000000000000000000001b580000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000001cacf1e2e857d9cd200000000000000000000000000000000000000000000000000000000000005a136c7f","Library":"","SwarmSource":"bzzr://43ff769a42805ba192fc5b871e67e1398ae60ae5ee3441dd7902bb8c2759fae7"}]}