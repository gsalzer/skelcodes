{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract SafeMath {\r\n\r\n    function add(uint x, uint y) internal constant returns (uint z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n \r\n    function subtract(uint x, uint y) internal constant returns (uint z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function multiply(uint x, uint y) internal constant returns (uint z) {\r\n        z = x * y;\r\n        assert(x == 0 || z / x == y);\r\n        return z;\r\n    }\r\n\r\n    function divide(uint x, uint y) internal constant returns (uint z) {\r\n        z = x / y;\r\n        assert(x == ( (y * z) + (x % y) ));\r\n        return z;\r\n    }\r\n    \r\n    function min64(uint64 x, uint64 y) internal constant returns (uint64) {\r\n        return x < y ? x: y;\r\n    }\r\n    \r\n    function max64(uint64 x, uint64 y) internal constant returns (uint64) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal constant returns (uint) {\r\n        return (x <= y) ? x : y;\r\n    }\r\n\r\n    function max(uint x, uint y) internal constant returns (uint) {\r\n        return (x >= y) ? x : y;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyowner() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract Mortal is Owned {\r\n    \r\n    function kill() {\r\n        if (msg.sender == owner)\r\n            selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract Lotthereum is Mortal, SafeMath {\r\n\r\n    Game[] private games;\r\n    mapping (address => uint) private balances;  // balances per address\r\n\r\n    struct Game {\r\n        uint id;\r\n        uint pointer;\r\n        uint maxNumberOfBets;\r\n        uint minAmountByBet;\r\n        uint prize;\r\n        uint currentRound;\r\n        Round[] rounds;\r\n    }\r\n\r\n    struct Round {\r\n        uint id;\r\n        uint pointer;\r\n        bytes32 hash;\r\n        bool open;\r\n        uint8 number;\r\n        Bet[] bets;\r\n        address[] winners;\r\n    }\r\n\r\n    struct Bet {\r\n        uint id;\r\n        address origin;\r\n        uint amount;\r\n        uint8 bet;\r\n        uint round;\r\n    }\r\n\r\n    event RoundOpen(\r\n        uint indexed gameId,\r\n        uint indexed roundId\r\n    );\r\n    event RoundClose(\r\n        uint indexed gameId,\r\n        uint indexed roundId,\r\n        uint8 number\r\n    );\r\n    event MaxNumberOfBetsChanged(\r\n        uint maxNumberOfBets\r\n    );\r\n    event MinAmountByBetChanged(\r\n        uint minAmountByBet\r\n    );\r\n    event BetPlaced(\r\n        uint indexed gameId,\r\n        uint indexed roundId,\r\n        address indexed origin,\r\n        uint betId\r\n    );\r\n    event RoundWinner(\r\n        uint indexed gameId,\r\n        uint indexed roundId,\r\n        address indexed winnerAddress,\r\n        uint amount\r\n    );\r\n\r\n    function createGame(\r\n        uint pointer,\r\n        uint maxNumberOfBets,\r\n        uint minAmountByBet,\r\n        uint prize\r\n    ) onlyowner returns (uint id) {\r\n        id = games.length;\r\n        games.length += 1;\r\n        games[id].id = id;\r\n        games[id].pointer = pointer;\r\n        games[id].maxNumberOfBets = maxNumberOfBets;\r\n        games[id].minAmountByBet = minAmountByBet;\r\n        games[id].prize = prize;\r\n        games[id].currentRound = createGameRound(id);\r\n    }\r\n\r\n    function createGameRound(uint gameId) internal returns (uint id) {\r\n        id = games[gameId].rounds.length;\r\n        games[gameId].rounds.length += 1;\r\n        games[gameId].rounds[id].id = id;\r\n        games[gameId].rounds[id].open = true;\r\n        RoundOpen(gameId, id);\r\n    }\r\n\r\n    function payout(uint gameId) internal {\r\n        address[] winners = games[gameId].rounds[games[gameId].currentRound].winners;\r\n        for (uint i = 0; i < games[gameId].maxNumberOfBets -1; i++) {\r\n            if (games[gameId].rounds[games[gameId].currentRound].bets[i].bet == games[gameId].rounds[games[gameId].currentRound].number) {\r\n                uint id = winners.length;\r\n                winners.length += 1;\r\n                winners[id] = games[gameId].rounds[games[gameId].currentRound].bets[i].origin;\r\n            }\r\n        }\r\n\r\n        if (winners.length > 0) {\r\n            uint prize = divide(games[gameId].prize, winners.length);\r\n            for (i = 0; i < winners.length; i++) {\r\n                balances[winners[i]] = add(balances[winners[i]], prize);\r\n                RoundWinner(gameId, games[gameId].currentRound, winners[i], prize);\r\n            }\r\n        }\r\n    }\r\n\r\n    function closeRound(uint gameId) constant internal {\r\n        games[gameId].rounds[games[gameId].currentRound].open = false;\r\n        games[gameId].rounds[games[gameId].currentRound].hash = getBlockHash(games[gameId].pointer);\r\n        games[gameId].rounds[games[gameId].currentRound].number = getNumber(games[gameId].rounds[games[gameId].currentRound].hash);\r\n        // games[gameId].pointer = games[gameId].rounds[games[gameId].currentRound].number;\r\n        payout(gameId);\r\n        RoundClose(\r\n            gameId,\r\n            games[gameId].rounds[games[gameId].currentRound].id,\r\n            games[gameId].rounds[games[gameId].currentRound].number\r\n        );\r\n        games[gameId].currentRound = createGameRound(gameId);\r\n    }\r\n\r\n    function getBlockHash(uint i) constant returns (bytes32 blockHash) {\r\n        if (i > 255) {\r\n            i = 255;\r\n        }\r\n        blockHash = block.blockhash(block.number - i);\r\n    }\r\n\r\n    function getNumber(bytes32 _a) constant returns (uint8) {\r\n        uint8 _b = 1;\r\n        uint8 mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = _a.length - 1; i >= 0; i--) {\r\n            if ((_a[i] >= 48) && (_a[i] <= 57)) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint8(_a[i]) - 48;\r\n                return mint;\r\n            } else if (_a[i] == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function placeBet(uint gameId, uint8 bet) public payable returns (bool) {\r\n        if (!games[gameId].rounds[games[gameId].currentRound].open) {\r\n            return false;\r\n        }\r\n\r\n        if (msg.value < games[gameId].minAmountByBet) {\r\n            return false;\r\n        }\r\n\r\n        if (games[gameId].rounds[games[gameId].currentRound].bets.length < games[gameId].maxNumberOfBets) {\r\n            uint id = games[gameId].rounds[games[gameId].currentRound].bets.length;\r\n            games[gameId].rounds[games[gameId].currentRound].bets.length += 1;\r\n            games[gameId].rounds[games[gameId].currentRound].bets[id].id = id;\r\n            games[gameId].rounds[games[gameId].currentRound].bets[id].round = games[gameId].rounds[games[gameId].currentRound].id;\r\n            games[gameId].rounds[games[gameId].currentRound].bets[id].bet = bet;\r\n            games[gameId].rounds[games[gameId].currentRound].bets[id].origin = msg.sender;\r\n            games[gameId].rounds[games[gameId].currentRound].bets[id].amount = msg.value;\r\n            BetPlaced(gameId, games[gameId].rounds[games[gameId].currentRound].id, msg.sender, id);\r\n        }\r\n\r\n        if (games[gameId].rounds[games[gameId].currentRound].bets.length >= games[gameId].maxNumberOfBets) {\r\n            closeRound(gameId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw() public returns (uint) {\r\n        uint amount = getBalance();\r\n        if (amount > 0) {\r\n            balances[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getBalance() constant returns (uint) {\r\n        if ((balances[msg.sender] > 0) && (balances[msg.sender] < this.balance)) {\r\n            return balances[msg.sender];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getGames() constant returns(uint[] memory ids) {\r\n        ids = new uint[](games.length);\r\n        for (uint i = 0; i < games.length; i++) {\r\n            ids[i] = games[i].id;\r\n        }\r\n    }\r\n\r\n    function getGameCurrentRoundId(uint gameId) constant returns(uint) {\r\n        return games[gameId].currentRound;\r\n    }\r\n\r\n    function getGameRoundOpen(uint gameId, uint roundId) constant returns(bool) {\r\n        return games[gameId].rounds[roundId].open;\r\n    }\r\n\r\n    function getGameMaxNumberOfBets(uint gameId) constant returns(uint) {\r\n        return games[gameId].maxNumberOfBets;\r\n    }\r\n\r\n    function getGameMinAmountByBet(uint gameId) constant returns(uint) {\r\n        return games[gameId].minAmountByBet;\r\n    }\r\n\r\n    function getGamePrize(uint gameId) constant returns(uint) {\r\n        return games[gameId].prize;\r\n    }\r\n\r\n    function getRoundNumberOfBets(uint gameId, uint roundId) constant returns(uint) {\r\n        return games[gameId].rounds[roundId].bets.length;\r\n    }\r\n\r\n    function getRoundBetOrigin(uint gameId, uint roundId, uint betId) constant returns(address) {\r\n        return games[gameId].rounds[roundId].bets[betId].origin;\r\n    }\r\n\r\n    function getRoundBetAmount(uint gameId, uint roundId, uint betId) constant returns(uint) {\r\n        return games[gameId].rounds[roundId].bets[betId].amount;\r\n    }\r\n\r\n    function getRoundBetNumber(uint gameId, uint roundId, uint betId) constant returns(uint) {\r\n        return games[gameId].rounds[roundId].bets[betId].bet;\r\n    }\r\n\r\n    function getRoundNumber(uint gameId, uint roundId) constant returns(uint8) {\r\n        return games[gameId].rounds[roundId].number;\r\n    }\r\n\r\n    function getRoundPointer(uint gameId, uint roundId) constant returns(uint) {\r\n        return games[gameId].rounds[roundId].pointer;\r\n    }\r\n\r\n    function getPointer(uint gameId) constant returns(uint) {\r\n        return games[gameId].pointer;\r\n    }\r\n\r\n    function () payable {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"bet\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"bytes32\"}],\"name\":\"getNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getGameRoundOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameMinAmountByBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetOrigin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pointer\",\"type\":\"uint256\"},{\"name\":\"maxNumberOfBets\",\"type\":\"uint256\"},{\"name\":\"minAmountByBet\",\"type\":\"uint256\"},{\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGames\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameCurrentRoundId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameMaxNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getRoundBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"RoundClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxNumberOfBets\",\"type\":\"uint256\"}],\"name\":\"MaxNumberOfBetsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAmountByBet\",\"type\":\"uint256\"}],\"name\":\"MinAmountByBetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoundWinner\",\"type\":\"event\"}]","ContractName":"Lotthereum","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ff172200c599a4ebff107517e782b239f0d64a44b6f21f30a8b32ae83254d15"}]}