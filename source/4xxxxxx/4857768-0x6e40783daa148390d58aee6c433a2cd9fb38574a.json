{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Races is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments; \r\n  mapping( uint8 => address) public raceBet; \r\n  mapping(address => uint8) public jockeyLevel; \r\n  uint256 public gameCost = 20 finney; //0.02 eth\r\n  uint32 public raceNum = 1; \r\n  uint8 public lastWinner = 0; \r\n  uint256 winTax = 2 finney; \r\n  uint8 betsNum = 0; \r\n  \r\n  function newBet(uint8 horseNum) public payable {\r\n  \r\n     if (raceBet[horseNum]==0 && horseNum<7 && horseNum>0 && msg.value==20 finney) {\r\n\t\t payments[msg.sender] = payments[msg.sender].add(msg.value);\r\n\t\t raceBet[horseNum]=msg.sender;\r\n\t\t betsNum++;\r\n\t\t \r\n\t\t if (betsNum==6) {//start race\r\n\t\t \r\n\t\t    uint random_number = uint(block.blockhash(block.number-1));\r\n\r\n\t\t\t//jockey has level from 0 to 5 (1 - 6 on web site)\r\n\t\t\tuint8 newWinner=uint8(random_number%77+1);\r\n\t\t\tif (jockeyLevel[raceBet[newWinner]]<5) {\r\n\t\t\t\tnewWinner=uint8(random_number%62+1);\r\n\t\t\t\tif (jockeyLevel[raceBet[newWinner]]<4) {\r\n\t\t\t\t\tnewWinner=uint8(random_number%47+1);\r\n\t\t\t\t\tif (jockeyLevel[raceBet[newWinner]]<3) {\r\n\t\t\t\t\t\tnewWinner=uint8(random_number%32+1);\r\n\t\t\t\t\t\tif (jockeyLevel[raceBet[newWinner]]<2) {\r\n\t\t\t\t\t\t\tnewWinner=uint8(random_number%17+1);\r\n\t\t\t\t\t\t\tif (jockeyLevel[raceBet[newWinner]]<1) {\r\n\t\t\t\t\t\t\t   newWinner=uint8(random_number%6+1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (newWinner>0 && newWinner<7) {\r\n\t\t\t\traceNum++;\r\n\t\t\t\tracesInfo(raceNum, newWinner, raceBet[newWinner]); //save event in blockchain\r\n\r\n\t\t\t\tif (jockeyLevel[raceBet[newWinner]]<5)\r\n\t\t\t\t\tjockeyLevel[raceBet[newWinner]]++;\r\n\t\t\t\t\r\n\t\t\t\tfor (uint8 i=1;i<7;i++) {\r\n\t\t\t\t\tif (i != newWinner) {\r\n\t\t\t\t\t\tpayments[raceBet[i]]=payments[raceBet[i]].sub(gameCost);\r\n\t\t\t\t\t\tpayments[raceBet[newWinner]]=payments[raceBet[newWinner]].add(gameCost).sub(winTax);\r\n\t\t\t\t\t\tpayments[owner]=payments[owner].add(winTax);\r\n\t\t\t\t\t\traceBet[i]=0;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\traceBet[newWinner]=0;\r\n\t\t\t\tbetsNum=0;\t\r\n\t\t\t\tlastWinner=newWinner;\r\n\t\t\t}\r\n\r\n\t\t }\r\n\t } else {\r\n\t     require(this.balance >= msg.value && msg.value>0);\r\n\t     address payee = msg.sender;\r\n\t     assert(payee.send(msg.value)); ///error bet, send eth back\r\n\t }\r\n  }\r\n  \r\n  function setGameCost(uint256 newGameCost) public onlyOwner {\r\n\t  assert(newGameCost>0);\r\n\t  gameCost = newGameCost;\r\n\t  winTax = gameCost.div(10);\r\n  }\r\n  \r\n  \r\n  //current bets\r\n  function getBetArr() public constant returns(address[6], uint8[6], uint32, uint8) {\r\n     uint8[6] memory jockeyLvl;\r\n     address[6] memory betArr;\r\n\t \r\n\t for (uint8 i=1;i<7;i++) {\r\n\t\t jockeyLvl[i-1] = jockeyLevel[raceBet[i]]; \r\n\t     betArr[i-1] = raceBet[i];\r\n\t }\r\n\t return (betArr, jockeyLvl, raceNum, lastWinner);\r\n  }  \r\n  \r\n  function getBalance() public constant returns(uint256) {\r\n\t return payments[msg.sender];\r\n  }    \r\n  \r\n\r\n  function withdrawPayments() public {\r\n\taddress payee = msg.sender;\r\n\tuint256 payment = payments[payee];\r\n\r\n\trequire(payment != 0);\r\n\trequire(this.balance >= payment);\r\n\r\n\tpayments[payee] = 0;\r\n\r\n\tfor (uint8 i=1;i<7;i++) {\r\n\t\tif (raceBet[i]==payee) {\r\n\t\t   raceBet[i]=0; \r\n\t\t   betsNum--;\r\n\t\t}\r\n\t}\r\n\r\n\tassert(payee.send(payment));\r\n  }  \r\n  \r\n  event racesInfo(uint256 indexed raceNum, uint8 indexed winnerNum, address indexed whoWinner);  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"raceBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetArr\",\"outputs\":[{\"name\":\"\",\"type\":\"address[6]\"},{\"name\":\"\",\"type\":\"uint8[6]\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGameCost\",\"type\":\"uint256\"}],\"name\":\"setGameCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"horseNum\",\"type\":\"uint8\"}],\"name\":\"newBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jockeyLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"raceNum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winnerNum\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"whoWinner\",\"type\":\"address\"}],\"name\":\"racesInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Races","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7e9e43d8f347963518521fb9cf9800a1a2604d964766e2a7306c2c1e39765cec"}]}